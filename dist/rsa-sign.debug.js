var rsaSign = (function () { 

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  throw 'NO_DYNAMIC_EXECUTION was set, cannot eval';
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 1*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-1)/1] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    abort('NO_DYNAMIC_EXECUTION was set, cannot eval - ccall/cwrap are not functional');
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  // NO_DYNAMIC_EXECUTION is on, so we can't use the fast version of cwrap.
  // Fall back to returning a bound version of ccall.
  cwrap = function cwrap(ident, returnType, argTypes) {
    return function() {
      return ccall(ident, returnType, argTypes, arguments);
    }
  }
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 52443072;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 104900000;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 10432;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,159,28,0,0,18,0,0,0,18,0,0,0,19,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,65,0,0,0,20,0,0,0,12,4,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,100,0,0,0,0,0,0,0,160,2,0,0,156,2,0,0,32,0,0,0,12,4,0,0,19,0,0,0,19,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,116,0,0,0,0,0,0,0,191,28,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,20,0,0,0,18,0,0,0,20,0,0,0,21,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,47,138,66,145,68,55,113,207,251,192,181,165,219,181,233,91,194,86,57,241,17,241,89,164,130,63,146,213,94,28,171,152,170,7,216,1,91,131,18,190,133,49,36,195,125,12,85,116,93,190,114,254,177,222,128,167,6,220,155,116,241,155,193,193,105,155,228,134,71,190,239,198,157,193,15,204,161,12,36,111,44,233,45,170,132,116,74,220,169,176,92,218,136,249,118,82,81,62,152,109,198,49,168,200,39,3,176,199,127,89,191,243,11,224,198,71,145,167,213,81,99,202,6,103,41,41,20,133,10,183,39,56,33,27,46,252,109,44,77,19,13,56,83,84,115,10,101,187,10,106,118,46,201,194,129,133,44,114,146,161,232,191,162,75,102,26,168,112,139,75,194,163,81,108,199,25,232,146,209,36,6,153,214,133,53,14,244,112,160,106,16,22,193,164,25,8,108,55,30,76,119,72,39,181,188,176,52,179,12,28,57,74,170,216,78,79,202,156,91,243,111,46,104,238,130,143,116,111,99,165,120,20,120,200,132,8,2,199,140,250,255,190,144,235,108,80,164,247,163,249,190,242,120,113,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,20,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,8,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,23,0,0,0,163,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,5,0,7,0,11,0,13,0,17,0,19,0,23,0,29,0,31,0,37,0,41,0,43,0,47,0,53,0,59,0,61,0,67,0,71,0,73,0,79,0,83,0,89,0,97,0,101,0,103,0,107,0,109,0,113,0,127,0,131,0,137,0,139,0,149,0,151,0,157,0,163,0,167,0,173,0,179,0,181,0,191,0,193,0,197,0,199,0,211,0,223,0,227,0,229,0,233,0,239,0,241,0,251,0,1,1,7,1,13,1,15,1,21,1,25,1,27,1,37,1,51,1,55,1,57,1,61,1,75,1,81,1,91,1,93,1,97,1,103,1,111,1,117,1,123,1,127,1,133,1,141,1,145,1,153,1,163,1,165,1,175,1,177,1,183,1,187,1,193,1,201,1,205,1,207,1,211,1,223,1,231,1,235,1,243,1,247,1,253,1,9,2,11,2,29,2,35,2,45,2,51,2,57,2,59,2,65,2,75,2,81,2,87,2,89,2,95,2,101,2,105,2,107,2,119,2,129,2,131,2,135,2,141,2,147,2,149,2,161,2,165,2,171,2,179,2,189,2,197,2,207,2,215,2,221,2,227,2,231,2,239,2,245,2,249,2,1,3,5,3,19,3,29,3,41,3,43,3,53,3,55,3,59,3,61,3,71,3,85,3,89,3,91,3,95,3,109,3,113,3,115,3,119,3,139,3,143,3,151,3,161,3,169,3,173,3,179,3,185,3,199,3,203,3,209,3,215,3,223,3,229,3,241,3,245,3,251,3,253,3,7,4,9,4,15,4,25,4,27,4,37,4,39,4,45,4,63,4,67,4,69,4,73,4,79,4,85,4,93,4,99,4,105,4,127,4,129,4,139,4,147,4,157,4,163,4,169,4,177,4,189,4,193,4,199,4,205,4,207,4,213,4,225,4,235,4,253,4,255,4,3,5,9,5,11,5,17,5,21,5,23,5,27,5,39,5,41,5,47,5,81,5,87,5,93,5,101,5,119,5,129,5,143,5,147,5,149,5,153,5,159,5,167,5,171,5,173,5,179,5,191,5,201,5,203,5,207,5,209,5,213,5,219,5,231,5,243,5,251,5,7,6,13,6,17,6,23,6,31,6,35,6,43,6,47,6,61,6,65,6,71,6,73,6,77,6,83,6,85,6,91,6,101,6,121,6,127,6,131,6,133,6,157,6,161,6,163,6,173,6,185,6,187,6,197,6,205,6,211,6,217,6,223,6,241,6,247,6,251,6,253,6,9,7,19,7,31,7,39,7,55,7,69,7,75,7,79,7,81,7,85,7,87,7,97,7,109,7,115,7,121,7,139,7,141,7,157,7,159,7,181,7,187,7,195,7,201,7,205,7,207,7,211,7,219,7,225,7,235,7,237,7,247,7,5,8,15,8,21,8,33,8,35,8,39,8,41,8,51,8,63,8,65,8,81,8,83,8,89,8,93,8,95,8,105,8,113,8,131,8,155,8,159,8,165,8,173,8,189,8,191,8,195,8,203,8,219,8,221,8,225,8,233,8,239,8,245,8,249,8,5,9,7,9,29,9,35,9,37,9,43,9,47,9,53,9,67,9,73,9,77,9,79,9,85,9,89,9,95,9,107,9,113,9,119,9,133,9,137,9,143,9,155,9,163,9,169,9,173,9,199,9,217,9,227,9,235,9,239,9,245,9,247,9,253,9,19,10,31,10,33,10,49,10,57,10,61,10,73,10,87,10,97,10,99,10,103,10,111,10,117,10,123,10,127,10,129,10,133,10,139,10,147,10,151,10,153,10,159,10,169,10,171,10,181,10,189,10,193,10,207,10,217,10,229,10,231,10,237,10,241,10,243,10,3,11,17,11,21,11,27,11,35,11,41,11,45,11,63,11,71,11,81,11,87,11,93,11,101,11,111,11,123,11,137,11,141,11,147,11,153,11,155,11,183,11,185,11,195,11,203,11,207,11,221,11,225,11,233,11,245,11,251,11,7,12,11,12,17,12,37,12,47,12,49,12,65,12,91,12,95,12,97,12,109,12,115,12,119,12,131,12,137,12,145,12,149,12,157,12,179,12,181,12,185,12,187,12,199,12,227,12,229,12,235,12,241,12,247,12,251,12,1,13,3,13,15,13,19,13,31,13,33,13,43,13,45,13,61,13,63,13,79,13,85,13,105,13,121,13,129,13,133,13,135,13,139,13,141,13,163,13,171,13,183,13,189,13,199,13,201,13,205,13,211,13,213,13,219,13,229,13,231,13,243,13,253,13,255,13,9,14,23,14,29,14,33,14,39,14,47,14,53,14,59,14,75,14,87,14,89,14,93,14,107,14,113,14,117,14,125,14,135,14,143,14,149,14,155,14,177,14,183,14,185,14,195,14,209,14,213,14,219,14,237,14,239,14,249,14,7,15,11,15,13,15,23,15,37,15,41,15,49,15,67,15,71,15,77,15,79,15,83,15,89,15,91,15,103,15,107,15,127,15,149,15,161,15,163,15,167,15,173,15,179,15,181,15,187,15,209,15,211,15,217,15,233,15,239,15,251,15,253,15,3,16,15,16,31,16,33,16,37,16,43,16,57,16,61,16,63,16,81,16,105,16,115,16,121,16,123,16,133,16,135,16,145,16,147,16,157,16,163,16,165,16,175,16,177,16,187,16,193,16,201,16,231,16,241,16,243,16,253,16,5,17,11,17,21,17,39,17,45,17,57,17,69,17,71,17,89,17,95,17,99,17,105,17,111,17,129,17,131,17,141,17,155,17,161,17,165,17,167,17,171,17,195,17,197,17,209,17,215,17,231,17,239,17,245,17,251,17,13,18,29,18,31,18,35,18,41,18,43,18,49,18,55,18,65,18,71,18,83,18,95,18,113,18,115,18,121,18,125,18,143,18,151,18,175,18,179,18,181,18,185,18,191,18,193,18,205,18,209,18,223,18,253,18,7,19,13,19,25,19,39,19,45,19,55,19,67,19,69,19,73,19,79,19,87,19,93,19,103,19,105,19,109,19,123,19,129,19,135,19,139,19,145,19,147,19,157,19,159,19,175,19,187,19,195,19,213,19,217,19,223,19,235,19,237,19,243,19,249,19,255,19,27,20,33,20,47,20,51,20,59,20,69,20,77,20,89,20,107,20,111,20,113,20,117,20,141,20,153,20,159,20,161,20,177,20,183,20,189,20,203,20,213,20,227,20,231,20,5,21,11,21,17,21,23,21,31,21,37,21,41,21,43,21,55,21,61,21,65,21,67,21,73,21,95,21,101,21,103,21,107,21,125,21,127,21,131,21,143,21,145,21,151,21,155,21,181,21,187,21,193,21,197,21,205,21,215,21,247,21,7,22,9,22,15,22,19,22,21,22,25,22,27,22,37,22,51,22,57,22,61,22,69,22,79,22,85,22,105,22,109,22,111,22,117,22,147,22,151,22,159,22,169,22,175,22,181,22,189,22,195,22,207,22,211,22,217,22,219,22,225,22,229,22,235,22,237,22,247,22,249,22,9,23,15,23,35,23,39,23,51,23,65,23,93,23,99,23,119,23,123,23,141,23,149,23,155,23,159,23,165,23,179,23,185,23,191,23,201,23,203,23,213,23,225,23,233,23,243,23,245,23,255,23,7,24,19,24,29,24,53,24,55,24,59,24,67,24,73,24,77,24,85,24,103,24,113,24,119,24,125,24,127,24,133,24,143,24,155,24,157,24,167,24,173,24,179,24,185,24,193,24,199,24,209,24,215,24,217,24,223,24,229,24,235,24,245,24,253,24,21,25,27,25,49,25,51,25,69,25,73,25,81,25,91,25,121,25,129,25,147,25,151,25,153,25,163,25,169,25,171,25,177,25,181,25,199,25,207,25,219,25,237,25,253,25,3,26,5,26,17,26,23,26,33,26,35,26,45,26,47,26,53,26,63,26,77,26,81,26,105,26,107,26,123,26,125,26,135,26,137,26,147,26,167,26,171,26,173,26,177,26,185,26,201,26,207,26,213,26,215,26,227,26,243,26,251,26,255,26,5,27,35,27,37,27,47,27,49,27,55,27,59,27,65,27,71,27,79,27,85,27,89,27,101,27,107,27,115,27,127,27,131,27,145,27,157,27,167,27,191,27,197,27,209,27,215,27,217,27,239,27,247,27,9,28,19,28,25,28,39,28,43,28,45,28,51,28,61,28,69,28,75,28,79,28,85,28,115,28,129,28,139,28,141,28,153,28,163,28,165,28,181,28,183,28,201,28,225,28,243,28,249,28,9,29,27,29,33,29,35,29,53,29,57,29,63,29,65,29,75,29,83,29,93,29,99,29,105,29,113,29,117,29,123,29,125,29,135,29,137,29,149,29,153,29,159,29,165,29,167,29,179,29,183,29,197,29,215,29,219,29,225,29,245,29,249,29,1,30,7,30,11,30,19,30,23,30,37,30,43,30,47,30,61,30,73,30,77,30,79,30,109,30,113,30,137,30,143,30,149,30,161,30,173,30,187,30,193,30,197,30,199,30,203,30,221,30,227,30,239,30,247,30,253,30,1,31,13,31,15,31,27,31,57,31,73,31,75,31,81,31,103,31,117,31,123,31,133,31,145,31,151,31,153,31,157,31,165,31,175,31,181,31,187,31,211,31,225,31,231,31,235,31,243,31,255,31,17,32,27,32,29,32,39,32,41,32,45,32,51,32,71,32,77,32,81,32,95,32,99,32,101,32,105,32,119,32,125,32,137,32,161,32,171,32,177,32,185,32,195,32,197,32,227,32,231,32,237,32,239,32,251,32,255,32,13,33,19,33,53,33,65,33,73,33,79,33,89,33,91,33,95,33,115,33,125,33,133,33,149,33,151,33,161,33,175,33,179,33,181,33,193,33,199,33,215,33,221,33,229,33,233,33,241,33,245,33,251,33,3,34,9,34,15,34,27,34,33,34,37,34,43,34,49,34,57,34,75,34,79,34,99,34,103,34,115,34,117,34,127,34,133,34,135,34,145,34,157,34,159,34,163,34,183,34,189,34,219,34,225,34,229,34,237,34,247,34,3,35,9,35,11,35,39,35,41,35,47,35,51,35,53,35,69,35,81,35,83,35,89,35,99,35,107,35,131,35,143,35,149,35,167,35,173,35,177,35,191,35,197,35,201,35,213,35,221,35,227,35,239,35,243,35,249,35,5,36,11,36,23,36,25,36,41,36,61,36,65,36,67,36,77,36,95,36,103,36,107,36,121,36,125,36,127,36,133,36,155,36,161,36,175,36,181,36,187,36,197,36,203,36,205,36,215,36,217,36,221,36,223,36,245,36,247,36,251,36,1,37,7,37,19,37,25,37,39,37,49,37,61,37,67,37,75,37,79,37,115,37,129,37,141,37,147,37,151,37,157,37,159,37,171,37,177,37,189,37,205,37,207,37,217,37,225,37,247,37,249,37,5,38,11,38,15,38,21,38,39,38,41,38,53,38,59,38,63,38,75,38,83,38,89,38,101,38,105,38,111,38,123,38,129,38,131,38,143,38,155,38,159,38,173,38,179,38,195,38,201,38,203,38,213,38,221,38,239,38,245,38,23,39,25,39,53,39,55,39,77,39,83,39,85,39,95,39,107,39,109,39,115,39,119,39,127,39,149,39,155,39,157,39,167,39,175,39,179,39,185,39,193,39,197,39,209,39,227,39,239,39,3,40,7,40,13,40,19,40,27,40,31,40,33,40,49,40,61,40,63,40,73,40,81,40,91,40,93,40,97,40,103,40,117,40,129,40,151,40,159,40,187,40,189,40,193,40,213,40,217,40,219,40,223,40,237,40,247,40,3,41,5,41,17,41,33,41,35,41,63,41,71,41,93,41,101,41,105,41,111,41,117,41,131,41,135,41,143,41,155,41,161,41,167,41,171,41,191,41,195,41,213,41,215,41,227,41,233,41,237,41,243,41,1,42,19,42,29,42,37,42,47,42,79,42,85,42,95,42,101,42,107,42,109,42,115,42,131,42,137,42,139,42,151,42,157,42,185,42,187,42,197,42,205,42,221,42,227,42,235,42,241,42,251,42,19,43,39,43,49,43,51,43,61,43,63,43,75,43,79,43,85,43,105,43,109,43,111,43,123,43,141,43,151,43,153,43,163,43,165,43,169,43,189,43,205,43,231,43,235,43,243,43,249,43,253,43,9,44,15,44,23,44,35,44,47,44,53,44,57,44,65,44,87,44,89,44,105,44,119,44,129,44,135,44,147,44,159,44,173,44,179,44,183,44,203,44,207,44,219,44,225,44,227,44,233,44,239,44,255,44,7,45,29,45,31,45,59,45,67,45,73,45,77,45,97,45,101,45,113,45,137,45,157,45,161,45,169,45,179,45,181,45,197,45,199,45,211,45,223,45,1,46,3,46,7,46,13,46,25,46,31,46,37,46,45,46,51,46,55,46,57,46,63,46,87,46,91,46,111,46,121,46,127,46,133,46,147,46,151,46,157,46,163,46,165,46,177,46,183,46,193,46,195,46,205,46,211,46,231,46,235,46,5,47,9,47,11,47,17,47,39,47,41,47,65,47,69,47,75,47,77,47,81,47,87,47,111,47,117,47,125,47,129,47,131,47,165,47,171,47,179,47,195,47,207,47,209,47,219,47,221,47,231,47,237,47,245,47,249,47,1,48,13,48,35,48,41,48,55,48,59,48,85,48,89,48,91,48,103,48,113,48,121,48,125,48,133,48,145,48,149,48,163,48,169,48,185,48,191,48,199,48,203,48,209,48,215,48,223,48,229,48,239,48,251,48,253,48,3,49,9,49,25,49,33,49,39,49,45,49,57,49,67,49,69,49,75,49,93,49,97,49,103,49,109,49,115,49,127,49,145,49,153,49,159,49,169,49,177,49,195,49,199,49,213,49,219,49,237,49,247,49,255,49,9,50,21,50,23,50,29,50,41,50,53,50,89,50,93,50,99,50,107,50,111,50,117,50,119,50,123,50,141,50,153,50,159,50,167,50,173,50,179,50,183,50,201,50,203,50,207,50,209,50,233,50,237,50,243,50,249,50,7,51,37,51,43,51,47,51,53,51,65,51,71,51,91,51,95,51,103,51,107,51,115,51,121,51,127,51,131,51,161,51,163,51,173,51,185,51,193,51,203,51,211,51,235,51,241,51,253,51,1,52,15,52,19,52,25,52,27,52,55,52,69,52,85,52,87,52,99,52,105,52,109,52,129,52,139,52,145,52,151,52,157,52,165,52,175,52,187,52,201,52,211,52,225,52,241,52,255,52,9,53,23,53,29,53,45,53,51,53,59,53,65,53,81,53,101,53,111,53,113,53,119,53,123,53,125,53,129,53,141,53,143,53,153,53,155,53,161,53,183,53,189,53,191,53,195,53,213,53,221,53,231,53,239,53,5,54,7,54,17,54,35,54,49,54,53,54,55,54,59,54,77,54,79,54,83,54,89,54,97,54,107,54,109,54,139,54,143,54,173,54,175,54,185,54,187,54,205,54,209,54,227,54,233,54,247,54,1,55,3,55,7,55,27,55,63,55,69,55,73,55,79,55,93,55,97,55,117,55,127,55,141,55,163,55,169,55,171,55,201,55,213,55,223,55,241,55,243,55,247,55,5,56,11,56,33,56,51,56,53,56,65,56,71,56,75,56,83,56,87,56,95,56,101,56,111,56,113,56,125,56,143,56,153,56,167,56,183,56,197,56,201,56,207,56,213,56,215,56,221,56,225,56,227,56,255,56,1,57,29,57,35,57,37,57,41,57,47,57,61,57,65,57,77,57,91,57,107,57,121,57,125,57,131,57,139,57,145,57,149,57,155,57,161,57,167,57,175,57,179,57,187,57,191,57,205,57,221,57,229,57,235,57,239,57,251,57,3,58,19,58,21,58,31,58,39,58,43,58,49,58,75,58,81,58,91,58,99,58,103,58,109,58,121,58,135,58,165,58,169,58,183,58,205,58,213,58,225,58,229,58,235,58,243,58,253,58,3,59,17,59,27,59,33,59,35,59,45,59,57,59,69,59,83,59,89,59,95,59,113,59,123,59,129,59,137,59,155,59,159,59,165,59,167,59,173,59,183,59,185,59,195,59,203,59,209,59,215,59,225,59,227,59,245,59,255,59,1,60,13,60,17,60,23,60,31,60,41,60,53,60,67,60,79,60,83,60,91,60,101,60,107,60,113,60,133,60,137,60,151,60,167,60,181,60,191,60,199,60,209,60,221,60,223,60,241,60,247,60,3,61,13,61,25,61,27,61,31,61,33,61,45,61,51,61,55,61,63,61,67,61,111,61,115,61,117,61,121,61,123,61,133,61,145,61,151,61,157,61,171,61,175,61,181,61,187,61,193,61,201,61,207,61,243,61,5,62,9,62,15,62,17,62,29,62,35,62,41,62,47,62,51,62,65,62,87,62,99,62,101,62,119,62,129,62,135,62,161,62,185,62,189,62,191,62,195,62,197,62,201,62,215,62,219,62,225,62,231,62,239,62,255,62,11,63,13,63,55,63,59,63,61,63,65,63,89,63,95,63,101,63,103,63,121,63,125,63,139,63,145,63,173,63,191,63,205,63,211,63,221,63,233,63,235,63,241,63,253,63,27,64,33,64,37,64,43,64,49,64,63,64,67,64,69,64,93,64,97,64,103,64,109,64,135,64,145,64,163,64,169,64,177,64,183,64,189,64,219,64,223,64,235,64,247,64,249,64,9,65,11,65,17,65,21,65,33,65,51,65,53,65,59,65,63,65,89,65,101,65,107,65,119,65,123,65,147,65,171,65,183,65,189,65,191,65,203,65,231,65,239,65,243,65,249,65,5,66,7,66,25,66,31,66,35,66,41,66,47,66,67,66,83,66,85,66,91,66,97,66,115,66,125,66,131,66,133,66,137,66,145,66,151,66,157,66,181,66,197,66,203,66,211,66,221,66,227,66,241,66,7,67,15,67,31,67,37,67,39,67,51,67,55,67,57,67,79,67,87,67,105,67,139,67,141,67,147,67,165,67,169,67,175,67,181,67,189,67,199,67,207,67,225,67,231,67,235,67,237,67,241,67,249,67,9,68,11,68,23,68,35,68,41,68,59,68,63,68,69,68,75,68,81,68,83,68,89,68,101,68,111,68,131,68,143,68,161,68,165,68,171,68,173,68,189,68,191,68,201,68,215,68,219,68,249,68,251,68,5,69,17,69,19,69,43,69,49,69,65,69,73,69,83,69,85,69,97,69,119,69,125,69,127,69,143,69,163,69,173,69,175,69,187,69,199,69,102,105,112,115,46,99,0,49,50,51,52,53,54,55,56,57,48,49,50,51,52,53,54,55,56,57,48,0,102,105,112,115,95,112,111,115,116,46,99,0,84,121,112,101,61,0,98,110,95,97,100,100,46,99,0,98,110,95,98,108,105,110,100,46,99,0,98,110,95,99,116,120,46,99,0,98,110,95,100,105,118,46,99,0,98,110,95,101,120,112,46,99,0,98,110,95,103,99,100,46,99,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,98,110,95,108,105,98,46,99,0,98,110,95,109,111,110,116,46,99,0,98,110,95,114,97,110,100,46,99,0,98,110,95,114,101,99,112,46,99,0,37,115,40,37,100,41,58,32,79,112,101,110,83,83,76,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,44,32,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,37,115,10,0,101,99,95,107,101,121,46,99,0,101,99,95,108,105,98,46,99,0,101,99,95,109,117,108,116,46,99,0,79,112,101,110,83,83,76,32,69,67,68,83,65,32,109,101,116,104,111,100,0,101,99,115,95,111,115,115,108,46,99,0,69,114,105,99,32,89,111,117,110,103,39,115,32,80,75,67,83,35,49,32,82,83,65,0,114,115,97,95,101,97,121,46,99,0,114,115,97,95,103,101,110,46,99,0,82,83,65,32,80,97,105,114,119,105,115,101,32,67,104,101,99,107,32,68,97,116,97,0,114,115,97,95,99,114,112,116,46,99,0,114,115,97,95,110,111,110,101,46,99,0,114,115,97,95,111,97,101,112,46,99,0,114,115,97,95,112,107,49,46,99,0,114,115,97,95,112,115,115,46,99,0,0,0,0,0,0,0,0,0,114,115,97,95,115,115,108,46,99,0,114,115,97,95,120,57,51,49,46,99,0,0,102,105,112,115,95,114,97,110,100,46,99,0,102,105,112,115,95,114,97,110,100,95,108,105,98,46,99,0,102,105,112,115,95,114,115,97,95,115,105,103,110,46,99,0,48,45,48,13,6,9,96,134,72,1,101,3,4,2,4,5,0,4,28,48,49,48,13,6,9,96,134,72,1,101,3,4,2,1,5,0,4,32,48,65,48,13,6,9,96,134,72,1,101,3,4,2,2,5,0,4,48,48,81,48,13,6,9,96,134,72,1,101,3,4,2,3,5,0,4,64,48,33,48,9,6,5,43,14,3,2,26,5,0,4,20,48,79,48,11,6,9,96,134,72,1,101,3,4,2,3,4,64,48,63,48,11,6,9,96,134,72,1,101,3,4,2,2,4,48,48,47,48,11,6,9,96,134,72,1,101,3,4,2,1,4,32,48,43,48,11,6,9,96,134,72,1,101,3,4,2,4,4,28,48,31,48,7,6,5,43,14,3,2,26,4,20,102,105,112,115,95,114,115,97,95,108,105,98,46,99,0,102,105,112,115,95,109,100,46,99,0,99,116,120,45,62,100,105,103,101,115,116,45,62,109,100,95,115,105,122,101,32,60,61,32,69,86,80,95,77,65,88,95,77,68,95,83,73,90,69,0,68,105,103,101,115,116,32,117,112,100,97,116,101,32,112,114,101,118,105,111,117,115,32,70,73,80,83,32,102,111,114,98,105,100,100,101,110,32,97,108,103,111,114,105,116,104,109,32,101,114,114,111,114,32,105,103,110,111,114,101,100,0,68,105,103,101,115,116,32,70,105,110,97,108,32,112,114,101,118,105,111,117,115,32,70,73,80,83,32,102,111,114,98,105,100,100,101,110,32,97,108,103,111,114,105,116,104,109,32,101,114,114,111,114,32,105,103,110,111,114,101,100,0,68,105,103,101,115,116,32,105,110,105,116,32,112,114,101,118,105,111,117,115,32,70,73,80,83,32,102,111,114,98,105,100,100,101,110,32,97,108,103,111,114,105,116,104,109,32,101,114,114,111,114,32,105,103,110,111,114,101,100,0,102,105,112,115,95,101,99,100,115,97,95,108,105,98,46,99,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  var _BDtoIHigh=true;

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _abort() {
      Module['abort']();
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _BItoD=true;

  
  var PATH=undefined;
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) ___syscall146.buffer = [];
      var buffer = ___syscall146.buffer;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          var curr = HEAPU8[ptr+j];
          if (curr === 0 || curr === 10) {
            Module['print'](UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6,a7);
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiii(index,a1,a2,a3,a4) {
    return Runtime.functionPointers[index](a1,a2,a3,a4);
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiii(index,a1,a2,a3,a4,a5) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_i(index) {
    return Runtime.functionPointers[index]();
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vii(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viii(index,a1,a2,a3) {
    Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    Runtime.functionPointers[index](a1,a2,a3,a4);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiid(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiii(index,a1,a2,a3,a4,a5) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiiiiiii": invoke_iiiiiiii, "jsCall_iiiiiiii": jsCall_iiiiiiii, "invoke_iiiii": invoke_iiiii, "jsCall_iiiii": jsCall_iiiii, "invoke_viiiii": invoke_viiiii, "jsCall_viiiii": jsCall_viiiii, "invoke_i": invoke_i, "jsCall_i": jsCall_i, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "invoke_vii": invoke_vii, "jsCall_vii": jsCall_vii, "invoke_iiiiiii": invoke_iiiiiii, "jsCall_iiiiiii": jsCall_iiiiiii, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_viii": invoke_viii, "jsCall_viii": jsCall_viii, "invoke_viiii": invoke_viiii, "jsCall_viiii": jsCall_viiii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_iiid": invoke_iiid, "jsCall_iiid": jsCall_iiid, "invoke_iiiiii": invoke_iiiiii, "jsCall_iiiiii": jsCall_iiiiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_self": _pthread_self, "_abort": _abort, "___setErrNo": ___setErrNo, "___syscall6": ___syscall6, "_sbrk": _sbrk, "_time": _time, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall140": ___syscall140, "_sysconf": _sysconf, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var jsCall_iiiiiiii=env.jsCall_iiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var jsCall_iiiii=env.jsCall_iiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var jsCall_viiiii=env.jsCall_viiiii;
  var invoke_i=env.invoke_i;
  var jsCall_i=env.jsCall_i;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var invoke_vii=env.invoke_vii;
  var jsCall_vii=env.jsCall_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var jsCall_iiiiiii=env.jsCall_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_viii=env.invoke_viii;
  var jsCall_viii=env.jsCall_viii;
  var invoke_viiii=env.invoke_viiii;
  var jsCall_viiii=env.jsCall_viiii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_iiid=env.invoke_iiid;
  var jsCall_iiid=env.jsCall_iiid;
  var invoke_iiiiii=env.invoke_iiiiii;
  var jsCall_iiiiii=env.jsCall_iiiiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_self=env._pthread_self;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var ___syscall6=env.___syscall6;
  var _sbrk=env._sbrk;
  var _time=env._time;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall140=env.___syscall140;
  var _sysconf=env._sysconf;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _FIPS_module_mode() {
 var $$$i = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cur$i = 0, $phitmp = 0, $ret$0 = 0, $ret$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur$i = sp;
 $0 = HEAP32[8>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $ret$0 = 0;
  } else {
   _FIPS_lock(5,40,6848,369);
   $2 = HEAP32[12>>2]|0;
   $3 = ($2|0)==(0);
   if ($3) {
    $ret$0$i = 0;
   } else {
    _fips_crypto_threadid_current($cur$i);
    $4 = (_fips_crypto_threadid_cmp($cur$i,16)|0);
    $5 = ($4|0)==(0);
    $$$i = $5&1;
    $ret$0$i = $$$i;
   }
   _FIPS_lock(6,40,6848,377);
   $$pre = HEAP32[8>>2]|0;
   $phitmp = ($$pre|0)==(0);
   if ($phitmp) {
    $ret$0 = 0;
   } else {
    $6 = ($ret$0$i|0)==(0);
    if ($6) {
     _FIPS_lock(5,39,6848,110);
     $8 = HEAP32[24>>2]|0;
     _FIPS_lock(6,39,6848,112);
     $ret$0 = $8;
     break;
    } else {
     $7 = HEAP32[24>>2]|0;
     $ret$0 = $7;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($ret$0|0);
}
function _FIPS_selftest_failed() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cur$i = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur$i = sp;
 $0 = HEAP32[8>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $ret$0 = 0;
  STACKTOP = sp;return ($ret$0|0);
 }
 _FIPS_lock(5,40,6848,369);
 $2 = HEAP32[12>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _FIPS_lock(6,40,6848,377);
 } else {
  _fips_crypto_threadid_current($cur$i);
  $4 = (_fips_crypto_threadid_cmp($cur$i,16)|0);
  $5 = ($4|0)==(0);
  _FIPS_lock(6,40,6848,377);
  if ($5) {
   $6 = HEAP32[28>>2]|0;
   $ret$0 = $6;
   STACKTOP = sp;return ($ret$0|0);
  }
 }
 _FIPS_lock(5,39,6848,124);
 $7 = HEAP32[28>>2]|0;
 _FIPS_lock(6,39,6848,126);
 $ret$0 = $7;
 STACKTOP = sp;return ($ret$0|0);
}
function _fips_set_selftest_fail() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[28>>2] = 1;
 return;
}
function _fips_pkey_signature_test($id,$pkey,$tbs,$tbslen,$kat,$katlen,$digest,$pad_mode,$fail_str) {
 $id = $id|0;
 $pkey = $pkey|0;
 $tbs = $tbs|0;
 $tbslen = $tbslen|0;
 $kat = $kat|0;
 $katlen = $katlen|0;
 $digest = $digest|0;
 $pad_mode = $pad_mode|0;
 $fail_str = $fail_str|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $$mux = 0, $$not = 0, $$tbs = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $brmerge = 0;
 var $dsig$0 = 0, $esig$0 = 0, $mctx = 0, $ret$0 = 0, $ret$0712 = 0, $sig$0 = 0, $siglen = 0, $sigsize$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $siglen = sp + 32|0;
 $mctx = sp + 8|0;
 _FIPS_md_ctx_init($mctx);
 $0 = ($tbs|0)==(0|0);
 $$tbs = $0 ? 6855 : $tbs;
 $1 = ($tbslen|0)==(0);
 if ($1) {
  $2 = (_strlen($$tbs)|0);
  $$02 = $2;
 } else {
  $$02 = $tbslen;
 }
 $3 = ($digest|0)==(0|0);
 if ($3) {
  $4 = (_FIPS_evp_sha256()|0);
  $$03 = $4;
 } else {
  $$03 = $digest;
 }
 $5 = HEAP32[$$03>>2]|0;
 $6 = HEAP32[32>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (FUNCTION_TABLE_iiiii[$6 & 31](3,$id,$5,$pkey)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = ($pkey|0)==(0|0);
 if ($10) {
  $sigsize$0 = 64;
  label = 10;
 } else {
  $11 = HEAP32[$pkey>>2]|0;
  $12 = ($11|0)==(6);
  if ($12) {
   $13 = ((($pkey)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_FIPS_rsa_size($14)|0);
   $sigsize$0 = $15;
   label = 10;
  } else {
   $sig$0 = 0;
   label = 12;
  }
 }
 if ((label|0) == 10) {
  $16 = (_FIPS_malloc($sigsize$0,6876,243)|0);
  $17 = ($16|0)==(0|0);
  if ($17) {
   _FIPS_put_error(45,121,65,6876,246);
   (_FIPS_md_ctx_cleanup($mctx)|0);
  } else {
   $sig$0 = $16;
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $18 = (_FIPS_digestinit($mctx,$$03)|0);
  $19 = ($18|0)==(0);
  L19: do {
   if ($19) {
    $ret$0712 = 0;
   } else {
    $20 = (_FIPS_digestupdate($mctx,$$tbs,$$02)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $ret$0712 = 0;
    } else {
     $22 = HEAP32[32>>2]|0;
     $23 = ($22|0)==(0|0);
     if (!($23)) {
      $24 = (FUNCTION_TABLE_iiiii[$22 & 31](6,$id,$5,$pkey)|0);
      $25 = ($24|0)==(0);
      if ($25) {
       $26 = (_FIPS_digestupdate($mctx,$$tbs,1)|0);
       $27 = ($26|0)==(0);
       if ($27) {
        $ret$0712 = 0;
        break;
       }
      }
     }
     L26: do {
      if ($10) {
       $28 = (_FIPS_digestfinal($mctx,$sig$0,$siglen)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        $ret$0712 = 0;
        break L19;
       } else {
        $dsig$0 = 0;$esig$0 = 0;
       }
      } else {
       $30 = HEAP32[$pkey>>2]|0;
       switch ($30|0) {
       case 6:  {
        $31 = ((($pkey)) + 20|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = (_FIPS_rsa_sign_ctx($32,$mctx,$pad_mode,0,0,$sig$0,$siglen)|0);
        $34 = ($33|0)==(0);
        if ($34) {
         $ret$0712 = 0;
         break L19;
        } else {
         $dsig$0 = 0;$esig$0 = 0;
         break L26;
        }
        break;
       }
       case 116:  {
        $35 = ((($pkey)) + 20|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = (_FIPS_dsa_sign_ctx($36,$mctx)|0);
        $38 = ($37|0)==(0|0);
        if ($38) {
         $ret$0712 = 0;
         break L19;
        } else {
         $dsig$0 = $37;$esig$0 = 0;
         break L26;
        }
        break;
       }
       case 408:  {
        $39 = ((($pkey)) + 20|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = (_FIPS_ecdsa_sign_ctx($40,$mctx)|0);
        $42 = ($41|0)==(0|0);
        if ($42) {
         $ret$0712 = 0;
         break L19;
        } else {
         $dsig$0 = 0;$esig$0 = $41;
         break L26;
        }
        break;
       }
       default: {
        $dsig$0 = 0;$esig$0 = 0;
        break L26;
       }
       }
      }
     } while(0);
     $43 = ($kat|0)==(0|0);
     if ($43) {
      if ($10) {
       $ret$0 = 1;
      } else {
       label = 27;
      }
     } else {
      $44 = HEAP32[$siglen>>2]|0;
      $45 = ($44|0)==($katlen|0);
      if ($45) {
       $46 = (_memcmp($kat,$sig$0,$katlen)|0);
       $$not = ($46|0)!=(0);
       $brmerge = $10 | $$not;
       $47 = $$not&1;
       $$mux = $47 ^ 1;
       if ($brmerge) {
        $ret$0 = $$mux;
       } else {
        label = 27;
       }
      } else {
       $ret$0 = 0;
      }
     }
     L38: do {
      if ((label|0) == 27) {
       $48 = (_FIPS_digestinit($mctx,$$03)|0);
       $49 = ($48|0)==(0);
       if ($49) {
        $ret$0 = 0;
       } else {
        $50 = (_FIPS_digestupdate($mctx,$$tbs,$$02)|0);
        $51 = ($50|0)==(0);
        if ($51) {
         $ret$0 = 0;
        } else {
         $52 = HEAP32[$pkey>>2]|0;
         switch ($52|0) {
         case 6:  {
          $53 = ((($pkey)) + 20|0);
          $54 = HEAP32[$53>>2]|0;
          $55 = HEAP32[$siglen>>2]|0;
          $56 = (_FIPS_rsa_verify_ctx($54,$mctx,$pad_mode,0,0,$sig$0,$55)|0);
          $ret$0 = $56;
          break L38;
          break;
         }
         case 116:  {
          $57 = ((($pkey)) + 20|0);
          $58 = HEAP32[$57>>2]|0;
          $59 = (_FIPS_dsa_verify_ctx($58,$mctx,$dsig$0)|0);
          $ret$0 = $59;
          break L38;
          break;
         }
         case 408:  {
          $60 = ((($pkey)) + 20|0);
          $61 = HEAP32[$60>>2]|0;
          $62 = (_FIPS_ecdsa_verify_ctx($61,$mctx,$esig$0)|0);
          $ret$0 = $62;
          break L38;
          break;
         }
         default: {
          $ret$0 = 0;
          break L38;
         }
         }
        }
       }
      }
     } while(0);
     $63 = ($dsig$0|0)==(0|0);
     if (!($63)) {
      _FIPS_dsa_sig_free($dsig$0);
     }
     $64 = ($esig$0|0)==(0|0);
     if ($64) {
      $ret$0712 = $ret$0;
     } else {
      _FIPS_ecdsa_sig_free($esig$0);
      $ret$0712 = $ret$0;
     }
    }
   }
  } while(0);
  $65 = ($sig$0|0)==(0|0);
  if (!($65)) {
   _FIPS_free($sig$0);
  }
  (_FIPS_md_ctx_cleanup($mctx)|0);
  $66 = ($ret$0712|0)==(1);
  if ($66) {
   $70 = HEAP32[32>>2]|0;
   $71 = ($70|0)==(0|0);
   if ($71) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $72 = (FUNCTION_TABLE_iiiii[$70 & 31](4,$id,$5,$pkey)|0);
   $$0 = $72;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _FIPS_put_error(45,121,137,6876,334);
 $67 = ($fail_str|0)==(0|0);
 if (!($67)) {
  HEAP32[$vararg_buffer>>2] = 6888;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $fail_str;
  _FIPS_add_error_data(2,$vararg_buffer);
 }
 HEAP32[36>>2] = 1;
 $68 = HEAP32[32>>2]|0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (FUNCTION_TABLE_iiiii[$68 & 31](5,$id,$5,$pkey)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _fips_bn_add($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$b = 0, $b$a = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $14 = (_fips_bn_uadd($r,$a,$b)|0);
  $15 = ((($r)) + 12|0);
  HEAP32[$15>>2] = $1;
  $$0 = $14;
  return ($$0|0);
 }
 $5 = ($1|0)==(0);
 $b$a = $5 ? $b : $a;
 $a$b = $5 ? $a : $b;
 $6 = (_fips_bn_ucmp($a$b,$b$a)|0);
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = (_fips_bn_usub($r,$b$a,$a$b)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
  $10 = ((($r)) + 12|0);
  HEAP32[$10>>2] = 1;
  $$0 = 1;
  return ($$0|0);
 } else {
  $11 = (_fips_bn_usub($r,$a$b,$b$a)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = 0;
   return ($$0|0);
  }
  $13 = ((($r)) + 12|0);
  HEAP32[$13>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_bn_usub($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $ap$017 = 0, $ap$1 = 0, $ap$2 = 0, $ap$311 = 0, $bp$018 = 0, $carry$021 = 0, $carry$1 = 0, $carry$1$v = 0, $dif$0 = 0, $dif$1 = 0, $dif$210 = 0, $ftl$06 = 0, $i$020 = 0, $not$ = 0, $or$cond = 0;
 var $or$cond38 = 0, $rp$019 = 0, $rp$1 = 0, $rp$2 = 0, $rp$312 = 0, $scevgep = 0, $scevgep33 = 0, $t1$0 = 0, $tmp_top$0$lcssa = 0, $tmp_top$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4|0)<(0);
 if ($5) {
  _FIPS_put_error(3,115,100,6894,186);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($r)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($1|0)>($7|0);
 if ($8) {
  $9 = (_fips_bn_expand2($r,$1)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $11 = HEAP32[$a>>2]|0;
 $12 = HEAP32[$r>>2]|0;
 $13 = ($3|0)==(0);
 if ($13) {
  $ap$2 = $11;$dif$1 = $4;$rp$2 = $12;
 } else {
  $14 = HEAP32[$b>>2]|0;
  $scevgep = (($12) + ($3<<2)|0);
  $ap$017 = $11;$bp$018 = $14;$carry$021 = 0;$i$020 = $3;$rp$019 = $12;
  while(1) {
   $15 = ((($ap$017)) + 4|0);
   $16 = HEAP32[$ap$017>>2]|0;
   $17 = ((($bp$018)) + 4|0);
   $18 = HEAP32[$bp$018>>2]|0;
   $19 = ($carry$021|0)==(0);
   $20 = ($16>>>0)<=($18>>>0);
   $21 = ($16>>>0)<($18>>>0);
   $not$ = $19 ^ 1;
   $22 = $not$ << 31 >> 31;
   $$pn = (($16) + ($22))|0;
   $carry$1$v = $19 ? $21 : $20;
   $carry$1 = $carry$1$v&1;
   $t1$0 = (($$pn) - ($18))|0;
   $23 = ((($rp$019)) + 4|0);
   HEAP32[$rp$019>>2] = $t1$0;
   $24 = (($i$020) + -1)|0;
   $25 = ($24|0)==(0);
   if ($25) {
    break;
   } else {
    $ap$017 = $15;$bp$018 = $17;$carry$021 = $carry$1;$i$020 = $24;$rp$019 = $23;
   }
  }
  $scevgep33 = (($11) + ($3<<2)|0);
  if ($carry$1$v) {
   $26 = ($1|0)==($3|0);
   if ($26) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $ap$1 = $scevgep33;$dif$0 = $4;$rp$1 = $scevgep;
    while(1) {
     $27 = (($dif$0) + -1)|0;
     $28 = ((($ap$1)) + 4|0);
     $29 = HEAP32[$ap$1>>2]|0;
     $30 = (($29) + -1)|0;
     $31 = ((($rp$1)) + 4|0);
     HEAP32[$rp$1>>2] = $30;
     $32 = ($29|0)==(0);
     $33 = ($27|0)!=(0);
     $or$cond = $33 & $32;
     if ($or$cond) {
      $ap$1 = $28;$dif$0 = $27;$rp$1 = $31;
     } else {
      $ap$2 = $28;$dif$1 = $27;$rp$2 = $31;
      break;
     }
    }
   }
  } else {
   $ap$2 = $scevgep33;$dif$1 = $4;$rp$2 = $scevgep;
  }
 }
 $34 = ($rp$2|0)==($ap$2|0);
 $35 = ($dif$1|0)==(0);
 $or$cond38 = $34 | $35;
 L20: do {
  if (!($or$cond38)) {
   $ap$311 = $ap$2;$dif$210 = $dif$1;$rp$312 = $rp$2;
   while(1) {
    $36 = HEAP32[$ap$311>>2]|0;
    HEAP32[$rp$312>>2] = $36;
    $37 = ($dif$210|0)==(1);
    if ($37) {
     break L20;
    }
    $38 = ((($ap$311)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($rp$312)) + 4|0);
    HEAP32[$40>>2] = $39;
    $41 = ($dif$210|0)==(2);
    if ($41) {
     break L20;
    }
    $42 = ((($ap$311)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($rp$312)) + 8|0);
    HEAP32[$44>>2] = $43;
    $45 = ($dif$210|0)==(3);
    if ($45) {
     break L20;
    }
    $46 = (($dif$210) + -4)|0;
    $47 = ((($ap$311)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($rp$312)) + 12|0);
    HEAP32[$49>>2] = $48;
    $50 = ((($rp$312)) + 16|0);
    $51 = ((($ap$311)) + 16|0);
    $52 = ($46|0)==(0);
    if ($52) {
     break;
    } else {
     $ap$311 = $51;$dif$210 = $46;$rp$312 = $50;
    }
   }
  }
 } while(0);
 $53 = ((($r)) + 4|0);
 HEAP32[$53>>2] = $1;
 $54 = ((($r)) + 12|0);
 HEAP32[$54>>2] = 0;
 $55 = ($1|0)>(0);
 if (!($55)) {
  $$0 = 1;
  return ($$0|0);
 }
 $56 = (($1) + -1)|0;
 $57 = (($12) + ($56<<2)|0);
 $ftl$06 = $57;$tmp_top$07 = $1;
 while(1) {
  $58 = HEAP32[$ftl$06>>2]|0;
  $59 = ($58|0)==(0);
  if (!($59)) {
   $tmp_top$0$lcssa = $tmp_top$07;
   break;
  }
  $60 = ((($ftl$06)) + -4|0);
  $61 = (($tmp_top$07) + -1)|0;
  $62 = ($tmp_top$07|0)>(1);
  if ($62) {
   $ftl$06 = $60;$tmp_top$07 = $61;
  } else {
   $tmp_top$0$lcssa = $61;
   break;
  }
 }
 HEAP32[$53>>2] = $tmp_top$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _fips_bn_uadd($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a$b = 0, $ap$0 = 0, $ap$2 = 0, $ap$310 = 0, $b$a = 0, $dif$0 = 0, $dif$2 = 0, $dif$311 = 0, $or$cond = 0, $rp$0 = 0, $rp$0$lcssa = 0, $rp$2 = 0, $rp$312 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 $a$b = $4 ? $a : $b;
 $b$a = $4 ? $b : $a;
 $5 = ((($b$a)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($a$b)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) - ($8))|0;
 $10 = ((($r)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($6|0)<($11|0);
 if (!($12)) {
  $13 = (($6) + 1)|0;
  $14 = (_fips_bn_expand2($r,$13)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $16 = ((($r)) + 4|0);
 HEAP32[$16>>2] = $6;
 $17 = HEAP32[$b$a>>2]|0;
 $18 = HEAP32[$a$b>>2]|0;
 $19 = HEAP32[$r>>2]|0;
 $20 = (_fips_bn_add_words($19,$17,$18,$8)|0);
 $21 = (($19) + ($8<<2)|0);
 $22 = (($17) + ($8<<2)|0);
 $23 = ($20|0)==(0);
 L5: do {
  if ($23) {
   $ap$2 = $22;$dif$2 = $9;$rp$2 = $21;
   label = 7;
  } else {
   $ap$0 = $22;$dif$0 = $9;$rp$0 = $21;
   while(1) {
    $24 = ($dif$0|0)==(0);
    if ($24) {
     $rp$0$lcssa = $rp$0;
     break;
    }
    $25 = (($dif$0) + -1)|0;
    $26 = ((($ap$0)) + 4|0);
    $27 = HEAP32[$ap$0>>2]|0;
    $28 = (($27) + 1)|0;
    $29 = ((($rp$0)) + 4|0);
    HEAP32[$rp$0>>2] = $28;
    $30 = ($28|0)==(0);
    if ($30) {
     $ap$0 = $26;$dif$0 = $25;$rp$0 = $29;
    } else {
     $ap$2 = $26;$dif$2 = $25;$rp$2 = $29;
     label = 7;
     break L5;
    }
   }
   HEAP32[$rp$0$lcssa>>2] = 1;
   $31 = HEAP32[$16>>2]|0;
   $32 = (($31) + 1)|0;
   HEAP32[$16>>2] = $32;
  }
 } while(0);
 if ((label|0) == 7) {
  $33 = ($dif$2|0)==(0);
  $34 = ($rp$2|0)==($ap$2|0);
  $or$cond = $33 | $34;
  if (!($or$cond)) {
   $ap$310 = $ap$2;$dif$311 = $dif$2;$rp$312 = $rp$2;
   while(1) {
    $35 = (($dif$311) + -1)|0;
    $36 = ((($ap$310)) + 4|0);
    $37 = HEAP32[$ap$310>>2]|0;
    $38 = ((($rp$312)) + 4|0);
    HEAP32[$rp$312>>2] = $37;
    $39 = ($35|0)==(0);
    if ($39) {
     break;
    } else {
     $ap$310 = $36;$dif$311 = $35;$rp$312 = $38;
    }
   }
  }
 }
 $40 = ((($r)) + 12|0);
 HEAP32[$40>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _fips_bn_sub($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$026 = 0, $$027 = 0, $$3 = 0, $$5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$b = 0, $b$a = 0, $neg$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = ((($b)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($2) {
  if ($5) {
   $$018 = $a;$$026 = $b;$neg$010 = 0;
   label = 4;
  } else {
   $$019 = $a;$$027 = $b;
  }
 } else {
  $a$b = $5 ? $a : $b;
  $b$a = $5 ? $b : $a;
  $6 = $5&1;
  $$3 = $6 ^ 1;
  if ($5) {
   $$019 = $b$a;$$027 = $a$b;
  } else {
   $$018 = $b$a;$$026 = $a$b;$neg$010 = $$3;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $7 = (_fips_bn_uadd($r,$$018,$$026)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
  $9 = ((($r)) + 12|0);
  HEAP32[$9>>2] = $neg$010;
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ((($$019)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($$027)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)>($13|0);
 $$5 = $14 ? $11 : $13;
 $15 = ((($r)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($$5|0)>($16|0);
 if ($17) {
  $18 = (_fips_bn_expand2($r,$$5)|0);
  $19 = ($18|0)==(0|0);
  if ($19) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $20 = (_fips_bn_ucmp($$019,$$027)|0);
 $21 = ($20|0)<(0);
 if ($21) {
  $22 = (_fips_bn_usub($r,$$027,$$019)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $$0 = 0;
   return ($$0|0);
  }
  $24 = ((($r)) + 12|0);
  HEAP32[$24>>2] = 1;
  $$0 = 1;
  return ($$0|0);
 } else {
  $25 = (_fips_bn_usub($r,$$019,$$027)|0);
  $26 = ($25|0)==(0);
  if ($26) {
   $$0 = 0;
   return ($$0|0);
  }
  $27 = ((($r)) + 12|0);
  HEAP32[$27>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_bn_blinding_new($A,$Ai,$mod) {
 $A = $A|0;
 $Ai = $Ai|0;
 $mod = $mod|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_FIPS_malloc(44,6903,145)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _FIPS_put_error(3,102,65,6903,147);
  $$0 = 0;
  return ($$0|0);
 }
 dest=$0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = ($A|0)==(0|0);
 if ($2) {
  label = 5;
 } else {
  $3 = (_fips_bn_dup($A)|0);
  HEAP32[$0>>2] = $3;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $5 = ($Ai|0)==(0|0);
   if (!($5)) {
    $6 = (_fips_bn_dup($Ai)|0);
    $7 = ((($0)) + 4|0);
    HEAP32[$7>>2] = $6;
    $8 = ($6|0)==(0|0);
    if ($8) {
     break;
    }
   }
   $9 = (_fips_bn_dup($mod)|0);
   $10 = ((($0)) + 12|0);
   HEAP32[$10>>2] = $9;
   $11 = ($9|0)==(0|0);
   if (!($11)) {
    $12 = ((($mod)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 & 4;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = ((($9)) + 16|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $17 | 4;
     HEAP32[$16>>2] = $18;
    }
    $19 = ((($0)) + 28|0);
    HEAP32[$19>>2] = -1;
    $20 = ((($0)) + 20|0);
    _fips_crypto_threadid_current($20);
    $$0 = $0;
    return ($$0|0);
   }
  }
 } while(0);
 $21 = HEAP32[$0>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _FIPS_bn_free($21);
 }
 $23 = ((($0)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _FIPS_bn_free($24);
 }
 $26 = ((($0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _FIPS_bn_free($27);
 }
 $29 = ((($0)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  _FIPS_bn_free($30);
 }
 _FIPS_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _fips_bn_blinding_free($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$r>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _FIPS_bn_free($1);
 }
 $3 = ((($r)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _FIPS_bn_free($4);
 }
 $6 = ((($r)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _FIPS_bn_free($7);
 }
 $9 = ((($r)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  _FIPS_bn_free($10);
 }
 _FIPS_free($r);
 return;
}
function _fips_bn_blinding_update($b,$ctx) {
 $b = $b|0;
 $ctx = $ctx|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   label = 3;
  } else {
   $2 = ((($b)) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    label = 3;
   } else {
    $5 = ((($b)) + 28|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(-1);
    if ($7) {
     HEAP32[$5>>2] = 1;
     label = 10;
    } else {
     $8 = (($6) + 1)|0;
     HEAP32[$5>>2] = $8;
     $9 = ($8|0)==(32);
     if ($9) {
      $10 = ((($b)) + 8|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($11|0)==(0|0);
      if ($12) {
       label = 10;
      } else {
       $13 = ((($b)) + 32|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = $14 & 2;
       $16 = ($15|0)==(0);
       if ($16) {
        $17 = (_fips_bn_blinding_create_param($b,0,0,$ctx,0,0)|0);
        $18 = ($17|0)==(0|0);
        if ($18) {
         $$pre$phiZ2D = $5;$ret$0 = 0;
         break;
        }
       } else {
        label = 10;
       }
      }
     } else {
      label = 10;
     }
    }
    if ((label|0) == 10) {
     $19 = ((($b)) + 32|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = $20 & 1;
     $22 = ($21|0)==(0);
     if ($22) {
      $23 = ((($b)) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (_fips_bn_mod_mul($0,$0,$0,$24,$ctx)|0);
      $26 = ($25|0)==(0);
      if ($26) {
       $$pre$phiZ2D = $5;$ret$0 = 0;
       break;
      }
      $27 = HEAP32[$2>>2]|0;
      $28 = HEAP32[$23>>2]|0;
      $29 = (_fips_bn_mod_mul($27,$27,$27,$28,$ctx)|0);
      $30 = ($29|0)==(0);
      if ($30) {
       $$pre$phiZ2D = $5;$ret$0 = 0;
       break;
      }
     }
    }
    $$pre$phiZ2D = $5;$ret$0 = 1;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  _FIPS_put_error(3,103,107,6903,194);
  $$pre = ((($b)) + 28|0);
  $$pre$phiZ2D = $$pre;$ret$0 = 0;
 }
 $31 = HEAP32[$$pre$phiZ2D>>2]|0;
 $32 = ($31|0)==(32);
 if (!($32)) {
  return ($ret$0|0);
 }
 HEAP32[$$pre$phiZ2D>>2] = 0;
 return ($ret$0|0);
}
function _fips_bn_blinding_create_param($b,$e,$m,$ctx,$bn_mod_exp,$m_ctx) {
 $b = $b|0;
 $e = $e|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $bn_mod_exp = $bn_mod_exp|0;
 $m_ctx = $m_ctx|0;
 var $$0 = 0, $$old3 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$old$old = 0, $or$cond2 = 0, $or$cond4 = 0, $ret$05 = 0, $retry_counter$0 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rv = sp;
 $0 = ($b|0)==(0|0);
 if ($0) {
  $1 = (_fips_bn_blinding_new(0,0,$m)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $ret$05 = $1;
  }
 } else {
  $ret$05 = $b;
 }
 $3 = HEAP32[$ret$05>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_FIPS_bn_new()|0);
  HEAP32[$ret$05>>2] = $5;
  $6 = ($5|0)==(0|0);
  if ($6) {
   label = 26;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 L7: do {
  if ((label|0) == 5) {
   $7 = ((($ret$05)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $10 = (_FIPS_bn_new()|0);
    HEAP32[$7>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     label = 26;
     break;
    }
   }
   $12 = ($e|0)==(0|0);
   $$phi$trans$insert = ((($ret$05)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($12) {
    $16 = $$pre;
   } else {
    $13 = ($$pre|0)==(0|0);
    if (!($13)) {
     _FIPS_bn_free($$pre);
    }
    $14 = (_fips_bn_dup($e)|0);
    HEAP32[$$phi$trans$insert>>2] = $14;
    $16 = $14;
   }
   $15 = ($16|0)==(0|0);
   if ($15) {
    label = 26;
   } else {
    $17 = ($bn_mod_exp|0)==(0|0);
    if (!($17)) {
     $18 = ((($ret$05)) + 40|0);
     HEAP32[$18>>2] = $bn_mod_exp;
    }
    $19 = ($m_ctx|0)==(0|0);
    if (!($19)) {
     $20 = ((($ret$05)) + 36|0);
     HEAP32[$20>>2] = $m_ctx;
    }
    $21 = ((($ret$05)) + 12|0);
    $retry_counter$0 = 32;
    while(1) {
     $22 = HEAP32[$ret$05>>2]|0;
     $23 = HEAP32[$21>>2]|0;
     $24 = (_FIPS_bn_rand_range($22,$23)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      label = 26;
      break L7;
     }
     $26 = HEAP32[$7>>2]|0;
     $27 = HEAP32[$ret$05>>2]|0;
     $28 = HEAP32[$21>>2]|0;
     $29 = (_fips_int_bn_mod_inverse($26,$27,$28,$ctx,$rv)|0);
     $30 = ($29|0)==(0|0);
     if (!($30)) {
      break;
     }
     $31 = HEAP32[$rv>>2]|0;
     $32 = ($31|0)==(0);
     if ($32) {
      label = 26;
      break L7;
     }
     $33 = (($retry_counter$0) + -1)|0;
     $34 = ($retry_counter$0|0)==(0);
     if ($34) {
      label = 21;
      break;
     } else {
      $retry_counter$0 = $33;
     }
    }
    if ((label|0) == 21) {
     _FIPS_put_error(3,128,113,6903,355);
     label = 26;
     break;
    }
    $35 = ((($ret$05)) + 40|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = ((($ret$05)) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if (!($40)) {
      $41 = HEAP32[$ret$05>>2]|0;
      $42 = HEAP32[$$phi$trans$insert>>2]|0;
      $43 = HEAP32[$21>>2]|0;
      $44 = (FUNCTION_TABLE_iiiiiii[$36 & 31]($41,$41,$42,$43,$ctx,$39)|0);
      $45 = ($44|0)==(0);
      $or$cond2 = $0 & $45;
      if ($or$cond2) {
       break;
      } else {
       $$0 = $ret$05;
      }
      STACKTOP = sp;return ($$0|0);
     }
    }
    $46 = HEAP32[$ret$05>>2]|0;
    $47 = HEAP32[$$phi$trans$insert>>2]|0;
    $48 = HEAP32[$21>>2]|0;
    $49 = (_fips_bn_mod_exp($46,$46,$47,$48,$ctx)|0);
    $50 = ($49|0)==(0);
    $or$cond4 = $0 & $50;
    if (!($or$cond4)) {
     $$0 = $ret$05;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $$old3 = ($ret$05|0)!=(0|0);
  $or$cond$old$old = $0 & $$old3;
  if (!($or$cond$old$old)) {
   $$0 = $ret$05;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $51 = HEAP32[$ret$05>>2]|0;
 $52 = ($51|0)==(0|0);
 if (!($52)) {
  _FIPS_bn_free($51);
 }
 $53 = ((($ret$05)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0|0);
 if (!($55)) {
  _FIPS_bn_free($54);
 }
 $56 = ((($ret$05)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if (!($58)) {
  _FIPS_bn_free($57);
 }
 $59 = ((($ret$05)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 if (!($61)) {
  _FIPS_bn_free($60);
 }
 _FIPS_free($ret$05);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _fips_bn_blinding_convert_ex($n,$r,$b,$ctx) {
 $n = $n|0;
 $r = $r|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$ret$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $not$ = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$b>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($b)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($b)) + 28|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    HEAP32[$5>>2] = 0;
   } else {
    $8 = (_fips_bn_blinding_update($b,$ctx)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   $10 = ($r|0)==(0|0);
   if ($10) {
    $ret$0 = 1;
   } else {
    $11 = HEAP32[$2>>2]|0;
    $12 = (_fips_bn_copy($r,$11)|0);
    $not$ = ($12|0)!=(0|0);
    $$ = $not$&1;
    $ret$0 = $$;
   }
   $13 = HEAP32[$b>>2]|0;
   $14 = ((($b)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_fips_bn_mod_mul($n,$n,$13,$15,$ctx)|0);
   $17 = ($16|0)==(0);
   $$ret$0 = $17 ? 0 : $ret$0;
   $$0 = $$ret$0;
   return ($$0|0);
  }
 }
 _FIPS_put_error(3,100,107,6903,234);
 $$0 = 0;
 return ($$0|0);
}
function _fips_bn_blinding_invert_ex($n,$r,$b,$ctx) {
 $n = $n|0;
 $r = $r|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if (!($0)) {
  $1 = ((($b)) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_fips_bn_mod_mul($n,$n,$r,$2,$ctx)|0);
  $$0 = $3;
  return ($$0|0);
 }
 $4 = ((($b)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _FIPS_put_error(3,101,107,6903,271);
  $$0 = 0;
  return ($$0|0);
 } else {
  $7 = ((($b)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_fips_bn_mod_mul($n,$n,$5,$8,$ctx)|0);
  $$0 = $9;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_bn_blinding_thread_id($b) {
 $b = $b|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 20|0);
 return ($0|0);
}
function _fips_bn_ctx_new() {
 var $$0 = 0, $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_FIPS_malloc(44,6914,218)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _FIPS_put_error(3,106,65,6914,221);
  $$0 = 0;
  return ($$0|0);
 } else {
  dest=$0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_bn_ctx_free($ctx) {
 $ctx = $ctx|0;
 var $$cast$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($ctx)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($ctx)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  _FIPS_free($5);
 }
 $6 = HEAP32[$ctx>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($ctx)) + 4|0);
  $10 = $6;
  while(1) {
   $9 = HEAP32[$10>>2]|0;
   $11 = ($9|0)==(0|0);
   if (!($11)) {
    _FIPS_bn_clear_free($10);
   }
   $12 = ((($10)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    _FIPS_bn_clear_free($12);
   }
   $15 = ((($10)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    _FIPS_bn_clear_free($15);
   }
   $18 = ((($10)) + 60|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    _FIPS_bn_clear_free($18);
   }
   $21 = ((($10)) + 80|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    _FIPS_bn_clear_free($21);
   }
   $24 = ((($10)) + 100|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    _FIPS_bn_clear_free($24);
   }
   $27 = ((($10)) + 120|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    _FIPS_bn_clear_free($27);
   }
   $30 = ((($10)) + 140|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    _FIPS_bn_clear_free($30);
   }
   $33 = ((($10)) + 160|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if (!($35)) {
    _FIPS_bn_clear_free($33);
   }
   $36 = ((($10)) + 180|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    _FIPS_bn_clear_free($36);
   }
   $39 = ((($10)) + 200|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0|0);
   if (!($41)) {
    _FIPS_bn_clear_free($39);
   }
   $42 = ((($10)) + 220|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(0|0);
   if (!($44)) {
    _FIPS_bn_clear_free($42);
   }
   $45 = ((($10)) + 240|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0|0);
   if (!($47)) {
    _FIPS_bn_clear_free($45);
   }
   $48 = ((($10)) + 260|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0|0);
   if (!($50)) {
    _FIPS_bn_clear_free($48);
   }
   $51 = ((($10)) + 280|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   if (!($53)) {
    _FIPS_bn_clear_free($51);
   }
   $54 = ((($10)) + 300|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   if (!($56)) {
    _FIPS_bn_clear_free($54);
   }
   $57 = HEAP32[$ctx>>2]|0;
   $58 = ((($57)) + 324|0);
   $59 = HEAP32[$58>>2]|0;
   HEAP32[$8>>2] = $59;
   _FIPS_free($57);
   $60 = HEAP32[$8>>2]|0;
   HEAP32[$ctx>>2] = $60;
   $$cast$i = $60;
   $61 = ($60|0)==(0);
   if ($61) {
    break;
   } else {
    $10 = $$cast$i;
   }
  }
 }
 _FIPS_free($ctx);
 return;
}
function _fips_bn_ctx_start($ctx) {
 $ctx = $ctx|0;
 var $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($ctx)) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $7 = ((($ctx)) + 20|0);
   $8 = ((($ctx)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($ctx)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($ctx)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = ($11|0)==(0);
    $16 = ($11*3)|0;
    $17 = $16 >>> 1;
    $18 = $15 ? 32 : $17;
    $19 = $18 << 2;
    $20 = (_FIPS_malloc($19,6914,340)|0);
    $21 = ($20|0)==(0|0);
    if ($21) {
     _FIPS_put_error(3,129,109,6914,266);
     $33 = HEAP32[$0>>2]|0;
     $34 = (($33) + 1)|0;
     HEAP32[$0>>2] = $34;
     return;
    }
    $22 = HEAP32[$10>>2]|0;
    $23 = ($22|0)==(0);
    if (!($23)) {
     $24 = HEAP32[$7>>2]|0;
     $25 = $22 << 2;
     _memcpy(($20|0),($24|0),($25|0))|0;
    }
    $26 = HEAP32[$12>>2]|0;
    $27 = ($26|0)==(0);
    if (!($27)) {
     $28 = HEAP32[$7>>2]|0;
     _FIPS_free($28);
    }
    HEAP32[$7>>2] = $20;
    HEAP32[$12>>2] = $18;
    $$pre$i = HEAP32[$10>>2]|0;
    $30 = $$pre$i;$32 = $20;
   } else {
    $$pre1$i = HEAP32[$7>>2]|0;
    $30 = $11;$32 = $$pre1$i;
   }
   $29 = (($30) + 1)|0;
   HEAP32[$10>>2] = $29;
   $31 = (($32) + ($30<<2)|0);
   HEAP32[$31>>2] = $9;
   return;
  }
 }
 $6 = (($1) + 1)|0;
 HEAP32[$0>>2] = $6;
 return;
}
function _fips_bn_ctx_end($ctx) {
 $ctx = $ctx|0;
 var $$in$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset$0$be$i = 0, $offset$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($1) + -1)|0;
  HEAP32[$0>>2] = $3;
  return;
 }
 $4 = ((($ctx)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($ctx)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($ctx)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12>>>0)>($10>>>0);
 if ($13) {
  $14 = (($12) - ($10))|0;
  $15 = ((($ctx)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - ($14))|0;
  HEAP32[$15>>2] = $17;
  $18 = ($12|0)==($10|0);
  if (!($18)) {
   $19 = (($16) + 15)|0;
   $20 = $19 & 15;
   $21 = ((($ctx)) + 4|0);
   $$in$i = $14;$offset$01$i = $20;
   while(1) {
    $22 = (($$in$i) + -1)|0;
    $23 = ($offset$01$i|0)==(0);
    if ($23) {
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 320|0);
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$21>>2] = $26;
     $offset$0$be$i = 15;
    } else {
     $27 = (($offset$01$i) + -1)|0;
     $offset$0$be$i = $27;
    }
    $28 = ($22|0)==(0);
    if ($28) {
     break;
    } else {
     $$in$i = $22;$offset$01$i = $offset$0$be$i;
    }
   }
  }
 }
 HEAP32[$11>>2] = $10;
 $29 = ((($ctx)) + 40|0);
 HEAP32[$29>>2] = 0;
 return;
}
function _fips_bn_ctx_get($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $$0$i = 0, $$pre$phi4$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($ctx)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($ctx)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($ctx)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 if ($10) {
  $11 = (_FIPS_malloc(328,6914,411)|0);
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($11)) + 20|0);
   _fips_bn_init($11);
   $14 = ((($11)) + 40|0);
   _fips_bn_init($13);
   $15 = ((($11)) + 60|0);
   _fips_bn_init($14);
   $16 = ((($11)) + 80|0);
   _fips_bn_init($15);
   $17 = ((($11)) + 100|0);
   _fips_bn_init($16);
   $18 = ((($11)) + 120|0);
   _fips_bn_init($17);
   $19 = ((($11)) + 140|0);
   _fips_bn_init($18);
   $20 = ((($11)) + 160|0);
   _fips_bn_init($19);
   $21 = ((($11)) + 180|0);
   _fips_bn_init($20);
   $22 = ((($11)) + 200|0);
   _fips_bn_init($21);
   $23 = ((($11)) + 220|0);
   _fips_bn_init($22);
   $24 = ((($11)) + 240|0);
   _fips_bn_init($23);
   $25 = ((($11)) + 260|0);
   _fips_bn_init($24);
   $26 = ((($11)) + 280|0);
   _fips_bn_init($25);
   $27 = ((($11)) + 300|0);
   _fips_bn_init($26);
   _fips_bn_init($27);
   $28 = ((($ctx)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 320|0);
   HEAP32[$30>>2] = $29;
   $31 = ((($11)) + 324|0);
   HEAP32[$31>>2] = 0;
   $32 = HEAP32[$ctx>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    HEAP32[$28>>2] = $11;
    $34 = ((($ctx)) + 4|0);
    HEAP32[$34>>2] = $11;
    HEAP32[$ctx>>2] = $11;
   } else {
    $35 = $29;
    $36 = ((($35)) + 324|0);
    HEAP32[$36>>2] = $11;
    HEAP32[$28>>2] = $11;
    $37 = ((($ctx)) + 4|0);
    HEAP32[$37>>2] = $11;
   }
   $38 = HEAP32[$8>>2]|0;
   $39 = (($38) + 16)|0;
   HEAP32[$8>>2] = $39;
   $40 = HEAP32[$6>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$6>>2] = $41;
   $$0$i = $11;
   label = 14;
  }
 } else {
  $42 = ($7|0)==(0);
  if ($42) {
   $43 = HEAP32[$ctx>>2]|0;
   $44 = ((($ctx)) + 4|0);
   HEAP32[$44>>2] = $43;
   $45 = $43;
   $$pre$phi4$iZ2D = 0;$55 = $45;
  } else {
   $46 = $7 & 15;
   $47 = ($46|0)==(0);
   $48 = ((($ctx)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   if ($47) {
    $50 = ((($49)) + 324|0);
    $51 = HEAP32[$50>>2]|0;
    HEAP32[$48>>2] = $51;
    $52 = $51;
    $$pre$phi4$iZ2D = 0;$55 = $52;
   } else {
    $$pre$phi4$iZ2D = $46;$55 = $49;
   }
  }
  $53 = (($7) + 1)|0;
  HEAP32[$6>>2] = $53;
  $54 = (($55) + (($$pre$phi4$iZ2D*20)|0)|0);
  $$0$i = $54;
  label = 14;
 }
 if ((label|0) == 14) {
  $56 = ($$0$i|0)==(0|0);
  if (!($56)) {
   (_fips_bn_set_word($$0$i,0)|0);
   $57 = ((($ctx)) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 1)|0;
   HEAP32[$57>>2] = $59;
   $$0 = $$0$i;
   return ($$0|0);
  }
 }
 HEAP32[$3>>2] = 1;
 _FIPS_put_error(3,116,109,6914,300);
 $$0 = 0;
 return ($$0|0);
}
function _fips_bn_div($dv,$rm,$num,$divisor,$ctx) {
 $dv = $dv|0;
 $rm = $rm|0;
 $num = $num|0;
 $divisor = $divisor|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$lcssa = 0, $$pr = 0, $$pre = 0, $$pre$phi52Z2D = 0, $$pre43 = 0, $$pre44 = 0, $$pre51 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ftl$011 = 0, $ftl1$07 = 0, $i$032 = 0;
 var $i$129 = 0, $no_branch$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $q$019 = 0, $q$1 = 0, $q$2 = 0, $rem$020 = 0, $res$0 = 0, $resp$1$ph = 0, $resp$128 = 0, $tmp_top$0$lcssa = 0, $tmp_top$012 = 0, $tmp_top2$0$lcssa = 0, $tmp_top2$08 = 0, $wnum = 0, $wnump$027 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $wnum = sp;
 $0 = ((($num)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($1) + -1)|0;
  $4 = HEAP32[$num>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   _FIPS_put_error(3,107,107,6923,198);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = ((($num)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ((($divisor)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 4;
  $15 = ($14|0)==(0);
  if ($15) {
   $no_branch$0 = 0;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $no_branch$0 = 1;
 }
 $16 = ((($divisor)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  _FIPS_put_error(3,107,103,6923,216);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($no_branch$0|0)!=(0);
 if (!($19)) {
  $20 = (_fips_bn_ucmp($num,$divisor)|0);
  $21 = ($20|0)<(0);
  if ($21) {
   $22 = ($rm|0)==(0|0);
   if (!($22)) {
    $23 = (_fips_bn_copy($rm,$num)|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $25 = ($dv|0)==(0|0);
   if ($25) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   (_fips_bn_set_word($dv,0)|0);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _fips_bn_ctx_start($ctx);
 $26 = (_fips_bn_ctx_get($ctx)|0);
 $27 = (_fips_bn_ctx_get($ctx)|0);
 $28 = (_fips_bn_ctx_get($ctx)|0);
 $29 = ($dv|0)==(0|0);
 if ($29) {
  $30 = (_fips_bn_ctx_get($ctx)|0);
  $res$0 = $30;
 } else {
  $res$0 = $dv;
 }
 $31 = ($28|0)==(0|0);
 $32 = ($res$0|0)==(0|0);
 $or$cond = $31 | $32;
 $33 = ($26|0)==(0|0);
 $or$cond3 = $33 | $or$cond;
 $34 = ($27|0)==(0|0);
 $or$cond5 = $34 | $or$cond3;
 L30: do {
  if (!($or$cond5)) {
   $35 = (_FIPS_bn_num_bits($divisor)|0);
   $36 = (($35|0) % 32)&-1;
   $37 = (32 - ($36))|0;
   $38 = (_fips_bn_lshift($28,$divisor,$37)|0);
   $39 = ($38|0)==(0);
   if (!($39)) {
    $40 = ((($28)) + 12|0);
    HEAP32[$40>>2] = 0;
    $41 = (($37) + 32)|0;
    $42 = (_fips_bn_lshift($27,$num,$41)|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     $44 = ((($27)) + 12|0);
     HEAP32[$44>>2] = 0;
     $45 = ((($27)) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ((($28)) + 4|0);
     do {
      if ($19) {
       $48 = HEAP32[$47>>2]|0;
       $49 = (($48) + 1)|0;
       $50 = ($46|0)>($49|0);
       if ($50) {
        $67 = ((($27)) + 8|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($46|0)<($68|0);
        if ($69) {
         $75 = $46;
        } else {
         $70 = (($46) + 1)|0;
         $71 = (_fips_bn_expand2($27,$70)|0);
         $72 = ($71|0)==(0|0);
         if ($72) {
          break L30;
         }
         $$pre44 = HEAP32[$45>>2]|0;
         $75 = $$pre44;
        }
        $73 = HEAP32[$27>>2]|0;
        $74 = (($73) + ($75<<2)|0);
        HEAP32[$74>>2] = 0;
        $76 = HEAP32[$45>>2]|0;
        $77 = (($76) + 1)|0;
        HEAP32[$45>>2] = $77;
        $$pre$phi52Z2D = $67;$80 = $77;
        break;
       }
       $51 = (($48) + 2)|0;
       $52 = ((($27)) + 8|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($51|0)>($53|0);
       if ($54) {
        $55 = (_fips_bn_expand2($27,$51)|0);
        $56 = ($55|0)==(0|0);
        if ($56) {
         break L30;
        }
        $$pre = HEAP32[$45>>2]|0;
        $$pre43 = HEAP32[$47>>2]|0;
        $58 = $$pre43;$60 = $$pre;
       } else {
        $58 = $48;$60 = $46;
       }
       $57 = (($58) + 2)|0;
       $59 = ($60|0)<($57|0);
       if ($59) {
        $61 = HEAP32[$27>>2]|0;
        $i$032 = $60;
        while(1) {
         $62 = (($61) + ($i$032<<2)|0);
         HEAP32[$62>>2] = 0;
         $63 = (($i$032) + 1)|0;
         $64 = HEAP32[$47>>2]|0;
         $65 = (($64) + 2)|0;
         $66 = ($63|0)<($65|0);
         if ($66) {
          $i$032 = $63;
         } else {
          $$lcssa = $65;
          break;
         }
        }
       } else {
        $$lcssa = $57;
       }
       HEAP32[$45>>2] = $$lcssa;
       $$pre$phi52Z2D = $52;$80 = $$lcssa;
      } else {
       $$pre51 = ((($27)) + 8|0);
       $$pre$phi52Z2D = $$pre51;$80 = $46;
      }
     } while(0);
     $78 = HEAP32[$47>>2]|0;
     $79 = (($80) - ($78))|0;
     $81 = ((($wnum)) + 12|0);
     HEAP32[$81>>2] = 0;
     $82 = HEAP32[$27>>2]|0;
     $83 = (($82) + ($79<<2)|0);
     HEAP32[$wnum>>2] = $83;
     $84 = ((($wnum)) + 4|0);
     HEAP32[$84>>2] = $78;
     $85 = HEAP32[$$pre$phi52Z2D>>2]|0;
     $86 = (($85) - ($79))|0;
     $87 = ((($wnum)) + 8|0);
     HEAP32[$87>>2] = $86;
     $88 = (($78) + -1)|0;
     $89 = HEAP32[$28>>2]|0;
     $90 = (($89) + ($88<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($78|0)==(1);
     if ($92) {
      $139 = 0;$140 = 0;
     } else {
      $93 = (($78) + -2)|0;
      $94 = (($89) + ($93<<2)|0);
      $95 = HEAP32[$94>>2]|0;
      $139 = $95;$140 = 0;
     }
     $96 = (($80) + -1)|0;
     $97 = HEAP32[$27>>2]|0;
     $98 = (($97) + ($96<<2)|0);
     $99 = ((($num)) + 12|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ((($divisor)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $102 ^ $100;
     $104 = ((($res$0)) + 12|0);
     HEAP32[$104>>2] = $103;
     $105 = ((($res$0)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($79|0)<($106|0);
     if (!($107)) {
      $108 = (($79) + 1)|0;
      $109 = (_fips_bn_expand2($res$0,$108)|0);
      $110 = ($109|0)==(0|0);
      if ($110) {
       break;
      }
     }
     $111 = (($79) - ($no_branch$0))|0;
     $112 = ((($res$0)) + 4|0);
     HEAP32[$112>>2] = $111;
     $113 = (($79) + -1)|0;
     $114 = HEAP32[$res$0>>2]|0;
     $115 = (($114) + ($113<<2)|0);
     $116 = (($78) + 1)|0;
     $117 = ((($26)) + 8|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($78|0)<($118|0);
     if (!($119)) {
      $120 = (_fips_bn_expand2($26,$116)|0);
      $121 = ($120|0)==(0|0);
      if ($121) {
       break;
      }
     }
     do {
      if ($19) {
       label = 44;
      } else {
       $122 = (_fips_bn_ucmp($wnum,$28)|0);
       $123 = ($122|0)>(-1);
       if ($123) {
        $124 = HEAP32[$wnum>>2]|0;
        $125 = HEAP32[$28>>2]|0;
        (_fips_bn_sub_words($124,$124,$125,$78)|0);
        HEAP32[$115>>2] = 1;
        label = 44;
        break;
       } else {
        $126 = HEAP32[$112>>2]|0;
        $127 = (($126) + -1)|0;
        HEAP32[$112>>2] = $127;
        $129 = $127;
        break;
       }
      }
     } while(0);
     if ((label|0) == 44) {
      $$pr = HEAP32[$112>>2]|0;
      $129 = $$pr;
     }
     $128 = ($129|0)==(0);
     if ($128) {
      HEAP32[$104>>2] = 0;
      $resp$1$ph = $115;
     } else {
      $$sum = (($79) + -2)|0;
      $130 = (($114) + ($$sum<<2)|0);
      $resp$1$ph = $130;
     }
     $131 = ($79|0)>(1);
     if ($131) {
      $i$129 = 0;$resp$128 = $resp$1$ph;$wnump$027 = $98;
      while(1) {
       $132 = HEAP32[$wnump$027>>2]|0;
       $133 = ((($wnump$027)) + -4|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($132|0)==($91|0);
       L79: do {
        if ($135) {
         $q$1 = -1;
        } else {
         $136 = (_fips_bn_div_words($132,$134,$91)|0);
         $137 = Math_imul($136, $91)|0;
         $138 = (($134) - ($137))|0;
         $141 = (___muldi3(($136|0),0,($139|0),($140|0))|0);
         $142 = tempRet0;
         $143 = ((($wnump$027)) + -8|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($142>>>0)>($138>>>0);
         $146 = ($141>>>0)>($144>>>0);
         $147 = ($142|0)==($138|0);
         $148 = $147 & $146;
         $149 = $145 | $148;
         if ($149) {
          $160 = $141;$161 = $142;$q$019 = $136;$rem$020 = $138;
         } else {
          $q$1 = $136;
          break;
         }
         while(1) {
          $158 = (($q$019) + -1)|0;
          $152 = (($rem$020) + ($91))|0;
          $159 = ($152>>>0)<($91>>>0);
          $154 = (_i64Subtract(($160|0),($161|0),($139|0),($140|0))|0);
          $151 = tempRet0;
          if ($159) {
           $q$1 = $158;
           break L79;
          }
          $150 = ($151>>>0)>($152>>>0);
          $153 = ($154>>>0)>($144>>>0);
          $155 = ($151|0)==($152|0);
          $156 = $155 & $153;
          $157 = $150 | $156;
          if ($157) {
           $160 = $154;$161 = $151;$q$019 = $158;$rem$020 = $152;
          } else {
           $q$1 = $158;
           break;
          }
         }
        }
       } while(0);
       $162 = HEAP32[$26>>2]|0;
       $163 = HEAP32[$28>>2]|0;
       $164 = (_fips_bn_mul_words($162,$163,$78,$q$1)|0);
       $165 = HEAP32[$26>>2]|0;
       $166 = (($165) + ($78<<2)|0);
       HEAP32[$166>>2] = $164;
       $167 = HEAP32[$wnum>>2]|0;
       $168 = ((($167)) + -4|0);
       HEAP32[$wnum>>2] = $168;
       $169 = HEAP32[$26>>2]|0;
       $170 = (_fips_bn_sub_words($168,$168,$169,$116)|0);
       $171 = ($170|0)==(0);
       do {
        if ($171) {
         $q$2 = $q$1;
        } else {
         $172 = (($q$1) + -1)|0;
         $173 = HEAP32[$wnum>>2]|0;
         $174 = HEAP32[$28>>2]|0;
         $175 = (_fips_bn_add_words($173,$173,$174,$78)|0);
         $176 = ($175|0)==(0);
         if ($176) {
          $q$2 = $172;
          break;
         }
         $177 = HEAP32[$wnump$027>>2]|0;
         $178 = (($177) + 1)|0;
         HEAP32[$wnump$027>>2] = $178;
         $q$2 = $172;
        }
       } while(0);
       HEAP32[$resp$128>>2] = $q$2;
       $179 = (($i$129) + 1)|0;
       $180 = ((($resp$128)) + -4|0);
       $181 = ($179|0)<($113|0);
       if ($181) {
        $i$129 = $179;$resp$128 = $180;$wnump$027 = $133;
       } else {
        break;
       }
      }
     }
     $182 = HEAP32[$45>>2]|0;
     $183 = ($182|0)>(0);
     if ($183) {
      $184 = HEAP32[$27>>2]|0;
      $185 = (($182) + -1)|0;
      $186 = (($184) + ($185<<2)|0);
      $ftl$011 = $186;$tmp_top$012 = $182;
      while(1) {
       $187 = HEAP32[$ftl$011>>2]|0;
       $188 = ($187|0)==(0);
       if (!($188)) {
        $tmp_top$0$lcssa = $tmp_top$012;
        break;
       }
       $189 = ((($ftl$011)) + -4|0);
       $190 = (($tmp_top$012) + -1)|0;
       $191 = ($tmp_top$012|0)>(1);
       if ($191) {
        $ftl$011 = $189;$tmp_top$012 = $190;
       } else {
        $tmp_top$0$lcssa = $190;
        break;
       }
      }
      HEAP32[$45>>2] = $tmp_top$0$lcssa;
     }
     $192 = ($rm|0)==(0|0);
     if (!($192)) {
      $193 = HEAP32[$99>>2]|0;
      (_fips_bn_rshift($rm,$27,$41)|0);
      $194 = ((($rm)) + 4|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==(0);
      if (!($196)) {
       $197 = ((($rm)) + 12|0);
       HEAP32[$197>>2] = $193;
      }
     }
     do {
      if ($19) {
       $198 = HEAP32[$112>>2]|0;
       $199 = ($198|0)>(0);
       if (!($199)) {
        break;
       }
       $200 = HEAP32[$res$0>>2]|0;
       $201 = (($198) + -1)|0;
       $202 = (($200) + ($201<<2)|0);
       $ftl1$07 = $202;$tmp_top2$08 = $198;
       while(1) {
        $203 = HEAP32[$ftl1$07>>2]|0;
        $204 = ($203|0)==(0);
        if (!($204)) {
         $tmp_top2$0$lcssa = $tmp_top2$08;
         break;
        }
        $205 = ((($ftl1$07)) + -4|0);
        $206 = (($tmp_top2$08) + -1)|0;
        $207 = ($tmp_top2$08|0)>(1);
        if ($207) {
         $ftl1$07 = $205;$tmp_top2$08 = $206;
        } else {
         $tmp_top2$0$lcssa = $206;
         break;
        }
       }
       HEAP32[$112>>2] = $tmp_top2$0$lcssa;
      }
     } while(0);
     _fips_bn_ctx_end($ctx);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _fips_bn_mod_exp($r,$a,$p,$m,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($m)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = HEAP32[$m>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 1;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = ((($a)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(1);
   if ($9) {
    $10 = ((($a)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0);
    if ($12) {
     $13 = ((($p)) + 16|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = $14 & 4;
     $16 = ($15|0)==(0);
     if ($16) {
      $17 = HEAP32[$a>>2]|0;
      $18 = HEAP32[$17>>2]|0;
      $19 = (_fips_bn_mod_exp_mont_word($r,$18,$p,$m,$ctx,0)|0);
      $ret$0 = $19;
      return ($ret$0|0);
     }
    }
   }
   $20 = (_fips_bn_mod_exp_mont($r,$a,$p,$m,$ctx,0)|0);
   $ret$0 = $20;
   return ($ret$0|0);
  }
 }
 $21 = (_fips_bn_mod_exp_recp($r,$a,$p,$m,$ctx)|0);
 $ret$0 = $21;
 return ($ret$0|0);
}
function _fips_bn_mod_exp_mont_word($rr,$a,$p,$m,$ctx,$in_mont) {
 $rr = $rr|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $in_mont = $in_mont|0;
 var $$0 = 0, $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $b$026 = 0;
 var $mont$0 = 0, $mont$1 = 0, $next_w$010 = 0, $next_w$09 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $r$0$lcssa = 0, $r$029 = 0, $r$211 = 0, $r$212 = 0, $r$5 = 0, $r$617 = 0, $r_is_one$0$lcssa = 0, $r_is_one$027 = 0, $r_is_one$28 = 0, $r_is_one$5 = 0, $ret$0 = 0, $ret$021 = 0, $t$0$lcssa = 0;
 var $t$030 = 0, $t$213 = 0, $t$214 = 0, $t$5 = 0, $w$0$lcssa = 0, $w$028 = 0, $w$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _FIPS_put_error(3,117,66,6932,855);
  $$0 = -1;
  return ($$0|0);
 }
 $4 = ((($m)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[$m>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 1;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = ($5|0)==(1);
   if ($11) {
    $12 = (($a>>>0) % ($8>>>0))&-1;
    $$06 = $12;
   } else {
    $$06 = $a;
   }
   $13 = (_FIPS_bn_num_bits($p)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (_fips_bn_set_word($rr,1)|0);
    $$0 = $15;
    return ($$0|0);
   }
   $16 = ($$06|0)==(0);
   if ($16) {
    (_fips_bn_set_word($rr,0)|0);
    $$0 = 1;
    return ($$0|0);
   }
   _fips_bn_ctx_start($ctx);
   $17 = (_fips_bn_ctx_get($ctx)|0);
   $18 = (_fips_bn_ctx_get($ctx)|0);
   $19 = (_fips_bn_ctx_get($ctx)|0);
   $20 = ($17|0)==(0|0);
   $21 = ($18|0)==(0|0);
   $or$cond = $20 | $21;
   $22 = ($19|0)==(0|0);
   $or$cond3 = $or$cond | $22;
   do {
    if ($or$cond3) {
     $ret$021 = 0;
    } else {
     $23 = ($in_mont|0)==(0|0);
     if ($23) {
      $24 = (_fips_bn_mont_ctx_new()|0);
      $25 = ($24|0)==(0|0);
      if ($25) {
       $ret$021 = 0;
       break;
      }
      $26 = (_fips_bn_mont_ctx_set($24,$m,$ctx)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       $mont$1 = $24;$ret$0 = 0;
      } else {
       $mont$0 = $24;
       label = 16;
      }
     } else {
      $mont$0 = $in_mont;
      label = 16;
     }
     L24: do {
      if ((label|0) == 16) {
       $28 = (($13) + -2)|0;
       $29 = ($28|0)>(-1);
       if ($29) {
        $30 = ((($mont$0)) + 4|0);
        $b$026 = $28;$r$029 = $18;$r_is_one$027 = 1;$t$030 = $19;$w$028 = $$06;
        while(1) {
         $31 = Math_imul($w$028, $w$028)|0;
         $32 = (($31>>>0) / ($w$028>>>0))&-1;
         $33 = ($32|0)==($w$028|0);
         $34 = ($r_is_one$027|0)==(0);
         do {
          if ($33) {
           if ($34) {
            $next_w$09 = $31;$r$211 = $r$029;$t$213 = $t$030;
            label = 25;
           } else {
            $76 = 1;$next_w$010 = $31;$r$212 = $r$029;$r_is_one$28 = $r_is_one$027;$t$214 = $t$030;
           }
          } else {
           if ($34) {
            $39 = (_fips_bn_mul_word($r$029,$w$028)|0);
            $40 = ($39|0)==(0);
            if ($40) {
             $mont$1 = $mont$0;$ret$0 = 0;
             break L24;
            }
            $41 = (_fips_bn_div(0,$t$030,$r$029,$m,$ctx)|0);
            $42 = ($41|0)==(0);
            if ($42) {
             $mont$1 = $mont$0;$ret$0 = 0;
             break L24;
            } else {
             $next_w$09 = 1;$r$211 = $t$030;$t$213 = $r$029;
             label = 25;
             break;
            }
           } else {
            $35 = (_fips_bn_set_word($r$029,$w$028)|0);
            $36 = ($35|0)==(0);
            if ($36) {
             $mont$1 = $mont$0;$ret$0 = 0;
             break L24;
            }
            $37 = (_fips_bn_mod_mul_montgomery($r$029,$r$029,$30,$mont$0,$ctx)|0);
            $38 = ($37|0)==(0);
            if ($38) {
             $mont$1 = $mont$0;$ret$0 = 0;
             break L24;
            } else {
             $next_w$09 = 1;$r$211 = $r$029;$t$213 = $t$030;
             label = 25;
             break;
            }
           }
          }
         } while(0);
         if ((label|0) == 25) {
          label = 0;
          $43 = (_fips_bn_mod_mul_montgomery($r$211,$r$211,$r$211,$mont$0,$ctx)|0);
          $44 = ($43|0)==(0);
          if ($44) {
           $mont$1 = $mont$0;$ret$0 = 0;
           break L24;
          } else {
           $76 = 0;$next_w$010 = $next_w$09;$r$212 = $r$211;$r_is_one$28 = 0;$t$214 = $t$213;
          }
         }
         $45 = (_FIPS_bn_is_bit_set($p,$b$026)|0);
         $46 = ($45|0)==(0);
         do {
          if ($46) {
           $r$5 = $r$212;$r_is_one$5 = $r_is_one$28;$t$5 = $t$214;$w$1 = $next_w$010;
          } else {
           $47 = Math_imul($next_w$010, $$06)|0;
           $48 = (($47>>>0) / ($$06>>>0))&-1;
           $49 = ($48|0)==($next_w$010|0);
           if ($49) {
            $r$5 = $r$212;$r_is_one$5 = $r_is_one$28;$t$5 = $t$214;$w$1 = $47;
           } else {
            if ($76) {
             $50 = (_fips_bn_set_word($r$212,$next_w$010)|0);
             $51 = ($50|0)==(0);
             if ($51) {
              $mont$1 = $mont$0;$ret$0 = 0;
              break L24;
             }
             $52 = (_fips_bn_mod_mul_montgomery($r$212,$r$212,$30,$mont$0,$ctx)|0);
             $53 = ($52|0)==(0);
             if ($53) {
              $mont$1 = $mont$0;$ret$0 = 0;
              break L24;
             } else {
              $r$5 = $r$212;$r_is_one$5 = 0;$t$5 = $t$214;$w$1 = $$06;
              break;
             }
            } else {
             $54 = (_fips_bn_mul_word($r$212,$next_w$010)|0);
             $55 = ($54|0)==(0);
             if ($55) {
              $mont$1 = $mont$0;$ret$0 = 0;
              break L24;
             }
             $56 = (_fips_bn_div(0,$t$214,$r$212,$m,$ctx)|0);
             $57 = ($56|0)==(0);
             if ($57) {
              $mont$1 = $mont$0;$ret$0 = 0;
              break L24;
             } else {
              $r$5 = $t$214;$r_is_one$5 = $r_is_one$28;$t$5 = $r$212;$w$1 = $$06;
              break;
             }
            }
           }
          }
         } while(0);
         $58 = (($b$026) + -1)|0;
         $59 = ($b$026|0)>(0);
         if ($59) {
          $b$026 = $58;$r$029 = $r$5;$r_is_one$027 = $r_is_one$5;$t$030 = $t$5;$w$028 = $w$1;
         } else {
          $r$0$lcssa = $r$5;$r_is_one$0$lcssa = $r_is_one$5;$t$0$lcssa = $t$5;$w$0$lcssa = $w$1;
          break;
         }
        }
       } else {
        $r$0$lcssa = $18;$r_is_one$0$lcssa = 1;$t$0$lcssa = $19;$w$0$lcssa = $$06;
       }
       $60 = ($w$0$lcssa|0)==(1);
       $61 = ($r_is_one$0$lcssa|0)==(0);
       do {
        if ($60) {
         if ($61) {
          $r$617 = $r$0$lcssa;
          label = 42;
         } else {
          $71 = (_fips_bn_set_word($rr,1)|0);
          $72 = ($71|0)==(0);
          if ($72) {
           $mont$1 = $mont$0;$ret$0 = 0;
           break L24;
          }
         }
        } else {
         if ($61) {
          $67 = (_fips_bn_mul_word($r$0$lcssa,$w$0$lcssa)|0);
          $68 = ($67|0)==(0);
          if ($68) {
           $mont$1 = $mont$0;$ret$0 = 0;
           break L24;
          }
          $69 = (_fips_bn_div(0,$t$0$lcssa,$r$0$lcssa,$m,$ctx)|0);
          $70 = ($69|0)==(0);
          if ($70) {
           $mont$1 = $mont$0;$ret$0 = 0;
           break L24;
          } else {
           $r$617 = $t$0$lcssa;
           label = 42;
           break;
          }
         } else {
          $62 = (_fips_bn_set_word($r$0$lcssa,$w$0$lcssa)|0);
          $63 = ($62|0)==(0);
          if ($63) {
           $mont$1 = $mont$0;$ret$0 = 0;
           break L24;
          }
          $64 = ((($mont$0)) + 4|0);
          $65 = (_fips_bn_mod_mul_montgomery($r$0$lcssa,$r$0$lcssa,$64,$mont$0,$ctx)|0);
          $66 = ($65|0)==(0);
          if ($66) {
           $mont$1 = $mont$0;$ret$0 = 0;
           break L24;
          } else {
           $r$617 = $r$0$lcssa;
           label = 42;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 42) {
        $73 = (_fips_bn_from_montgomery($rr,$r$617,$mont$0,$ctx)|0);
        $74 = ($73|0)==(0);
        if ($74) {
         $mont$1 = $mont$0;$ret$0 = 0;
         break;
        }
       }
       $mont$1 = $mont$0;$ret$0 = 1;
      }
     } while(0);
     $75 = ($mont$1|0)!=(0|0);
     $or$cond5 = $23 & $75;
     if ($or$cond5) {
      _fips_bn_mont_ctx_free($mont$1);
      $ret$021 = $ret$0;
     } else {
      $ret$021 = $ret$0;
     }
    }
   } while(0);
   _fips_bn_ctx_end($ctx);
   $$0 = $ret$021;
   return ($$0|0);
  }
 }
 _FIPS_put_error(3,117,102,6932,864);
 $$0 = 0;
 return ($$0|0);
}
function _fips_bn_mod_exp_mont($rr,$a,$p,$m,$ctx,$in_mont) {
 $rr = $rr|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $in_mont = $in_mont|0;
 var $$ = 0, $$0 = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $aa$0 = 0, $i$030 = 0, $i$121 = 0, $i$228 = 0, $mont$0 = 0, $mont$1 = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond4 = 0, $ret$0 = 0, $ret$07 = 0, $start$0$ph = 0, $val = 0;
 var $wend$0$lcssa = 0, $wend$019 = 0, $wend$1 = 0, $wstart$0$lcssa = 0, $wstart$0$ph = 0, $wstart$018 = 0, $wstart$018$us = 0, $wvalue$0$lcssa = 0, $wvalue$020 = 0, $wvalue$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $val = sp;
 $0 = ((($p)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (_fips_bn_mod_exp_mont_consttime($rr,$a,$p,$m,$ctx,$in_mont)|0);
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($m)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = HEAP32[$m>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 1;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = (_FIPS_bn_num_bits($p)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = (_fips_bn_set_word($rr,1)|0);
    $$0 = $14;
    STACKTOP = sp;return ($$0|0);
   }
   _fips_bn_ctx_start($ctx);
   $15 = (_fips_bn_ctx_get($ctx)|0);
   $16 = (_fips_bn_ctx_get($ctx)|0);
   $17 = (_fips_bn_ctx_get($ctx)|0);
   HEAP32[$val>>2] = $17;
   $notlhs = ($15|0)==(0|0);
   $notrhs = ($16|0)==(0|0);
   $or$cond$not = $notlhs | $notrhs;
   $18 = ($17|0)==(0|0);
   $or$cond4 = $or$cond$not | $18;
   do {
    if ($or$cond4) {
     $ret$07 = 0;
    } else {
     $19 = ($in_mont|0)==(0|0);
     if ($19) {
      $20 = (_fips_bn_mont_ctx_new()|0);
      $21 = ($20|0)==(0|0);
      if ($21) {
       $ret$07 = 0;
       break;
      }
      $22 = (_fips_bn_mont_ctx_set($20,$m,$ctx)|0);
      $23 = ($22|0)==(0);
      if ($23) {
       $mont$1 = $20;$ret$0 = 0;
      } else {
       $mont$0 = $20;
       label = 12;
      }
     } else {
      $mont$0 = $in_mont;
      label = 12;
     }
     L17: do {
      if ((label|0) == 12) {
       $24 = ((($a)) + 12|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(0);
       if ($26) {
        $27 = (_fips_bn_ucmp($a,$m)|0);
        $28 = ($27|0)>(-1);
        if ($28) {
         label = 14;
        } else {
         $aa$0 = $a;
        }
       } else {
        label = 14;
       }
       if ((label|0) == 14) {
        $29 = (_fips_bn_nnmod($17,$a,$m,$ctx)|0);
        $30 = ($29|0)==(0);
        if ($30) {
         $mont$1 = $mont$0;$ret$0 = 0;
         break;
        } else {
         $aa$0 = $17;
        }
       }
       $31 = ((($aa$0)) + 4|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($32|0)==(0);
       if ($33) {
        (_fips_bn_set_word($rr,0)|0);
        $mont$1 = $mont$0;$ret$0 = 1;
        break;
       }
       $34 = ((($mont$0)) + 4|0);
       $35 = (_fips_bn_mod_mul_montgomery($17,$aa$0,$34,$mont$0,$ctx)|0);
       $36 = ($35|0)==(0);
       if ($36) {
        $mont$1 = $mont$0;$ret$0 = 0;
       } else {
        $37 = ($12|0)>(671);
        if ($37) {
         $$ph = 6;
         label = 22;
        } else {
         $38 = ($12|0)>(239);
         if ($38) {
          $$ph = 5;
          label = 22;
         } else {
          $39 = ($12|0)>(79);
          if ($39) {
           $$ph = 4;
           label = 22;
          } else {
           $40 = ($12|0)>(23);
           if ($40) {
            $$ph = 3;
            label = 22;
           } else {
            $61 = 1;
           }
          }
         }
        }
        if ((label|0) == 22) {
         $41 = (_fips_bn_mod_mul_montgomery($15,$17,$17,$mont$0,$ctx)|0);
         $42 = ($41|0)==(0);
         if ($42) {
          $mont$1 = $mont$0;$ret$0 = 0;
          break;
         }
         $43 = (($$ph) + -1)|0;
         $44 = 1 << $43;
         $45 = ($44|0)>(1);
         if ($45) {
          $i$030 = 1;
          while(1) {
           $48 = (_fips_bn_ctx_get($ctx)|0);
           $49 = (($val) + ($i$030<<2)|0);
           HEAP32[$49>>2] = $48;
           $50 = ($48|0)==(0|0);
           if ($50) {
            $mont$1 = $mont$0;$ret$0 = 0;
            break L17;
           }
           $51 = (($i$030) + -1)|0;
           $52 = (($val) + ($51<<2)|0);
           $53 = HEAP32[$52>>2]|0;
           $54 = (_fips_bn_mod_mul_montgomery($48,$53,$15,$mont$0,$ctx)|0);
           $55 = ($54|0)==(0);
           $47 = (($i$030) + 1)|0;
           if ($55) {
            $mont$1 = $mont$0;$ret$0 = 0;
            break L17;
           }
           $46 = ($47|0)<($44|0);
           if ($46) {
            $i$030 = $47;
           } else {
            $61 = $$ph;
            break;
           }
          }
         } else {
          $61 = $$ph;
         }
        }
        $56 = (_fips_bn_value_one()|0);
        $57 = (_fips_bn_mod_mul_montgomery($16,$56,$34,$mont$0,$ctx)|0);
        $58 = ($57|0)==(0);
        if ($58) {
         $mont$1 = $mont$0;$ret$0 = 0;
        } else {
         $59 = (($12) + -1)|0;
         $60 = ($61|0)>(1);
         $start$0$ph = 1;$wstart$0$ph = $59;
         L41: while(1) {
          $62 = (_FIPS_bn_is_bit_set($p,$wstart$0$ph)|0);
          $63 = ($62|0)==(0);
          L43: do {
           if ($63) {
            $64 = ($start$0$ph|0)==(0);
            if ($64) {
             $wstart$018$us = $wstart$0$ph;
            } else {
             $wstart$018 = $wstart$0$ph;
             while(1) {
              $71 = ($wstart$018|0)==(0);
              if ($71) {
               break L41;
              }
              $72 = (($wstart$018) + -1)|0;
              $73 = (_FIPS_bn_is_bit_set($p,$72)|0);
              $74 = ($73|0)==(0);
              if ($74) {
               $wstart$018 = $72;
              } else {
               $wstart$0$lcssa = $72;
               break L43;
              }
             }
            }
            while(1) {
             $65 = (_fips_bn_mod_mul_montgomery($16,$16,$16,$mont$0,$ctx)|0);
             $66 = ($65|0)==(0);
             if ($66) {
              $mont$1 = $mont$0;$ret$0 = 0;
              break L17;
             }
             $67 = ($wstart$018$us|0)==(0);
             if ($67) {
              break L41;
             }
             $68 = (($wstart$018$us) + -1)|0;
             $69 = (_FIPS_bn_is_bit_set($p,$68)|0);
             $70 = ($69|0)==(0);
             if ($70) {
              $wstart$018$us = $68;
             } else {
              $wstart$0$lcssa = $68;
              break;
             }
            }
           } else {
            $wstart$0$lcssa = $wstart$0$ph;
           }
          } while(0);
          L54: do {
           if ($60) {
            $i$121 = 1;$wend$019 = 0;$wvalue$020 = 1;
            while(1) {
             $75 = (($wstart$0$lcssa) - ($i$121))|0;
             $76 = ($75|0)<(0);
             if ($76) {
              $wend$0$lcssa = $wend$019;$wvalue$0$lcssa = $wvalue$020;
              break L54;
             }
             $77 = (_FIPS_bn_is_bit_set($p,$75)|0);
             $78 = ($77|0)==(0);
             if ($78) {
              $wend$1 = $wend$019;$wvalue$1 = $wvalue$020;
             } else {
              $79 = (($i$121) - ($wend$019))|0;
              $80 = $wvalue$020 << $79;
              $81 = $80 | 1;
              $wend$1 = $i$121;$wvalue$1 = $81;
             }
             $82 = (($i$121) + 1)|0;
             $83 = ($82|0)<($61|0);
             if ($83) {
              $i$121 = $82;$wend$019 = $wend$1;$wvalue$020 = $wvalue$1;
             } else {
              $wend$0$lcssa = $wend$1;$wvalue$0$lcssa = $wvalue$1;
              break;
             }
            }
           } else {
            $wend$0$lcssa = 0;$wvalue$0$lcssa = 1;
           }
          } while(0);
          $84 = (($wend$0$lcssa) + 1)|0;
          $85 = ($start$0$ph|0)==(0);
          $86 = ($wend$0$lcssa|0)>(-1);
          $or$cond = $85 & $86;
          if ($or$cond) {
           $i$228 = 0;
           while(1) {
            $89 = (_fips_bn_mod_mul_montgomery($16,$16,$16,$mont$0,$ctx)|0);
            $90 = ($89|0)==(0);
            $88 = (($i$228) + 1)|0;
            if ($90) {
             $mont$1 = $mont$0;$ret$0 = 0;
             break L17;
            }
            $87 = ($88|0)<($84|0);
            if ($87) {
             $i$228 = $88;
            } else {
             break;
            }
           }
          }
          $91 = $wvalue$0$lcssa >> 1;
          $92 = (($val) + ($91<<2)|0);
          $93 = HEAP32[$92>>2]|0;
          $94 = (_fips_bn_mod_mul_montgomery($16,$16,$93,$mont$0,$ctx)|0);
          $95 = ($94|0)==(0);
          if ($95) {
           $mont$1 = $mont$0;$ret$0 = 0;
           break L17;
          }
          $96 = (($wstart$0$lcssa) - ($84))|0;
          $97 = ($96|0)<(0);
          if ($97) {
           break;
          } else {
           $start$0$ph = 0;$wstart$0$ph = $96;
          }
         }
         $98 = (_fips_bn_from_montgomery($rr,$16,$mont$0,$ctx)|0);
         $not$ = ($98|0)!=(0);
         $$ = $not$&1;
         $mont$1 = $mont$0;$ret$0 = $$;
        }
       }
      }
     } while(0);
     $99 = ($mont$1|0)!=(0|0);
     $or$cond3 = $19 & $99;
     if ($or$cond3) {
      _fips_bn_mont_ctx_free($mont$1);
      $ret$07 = $ret$0;
     } else {
      $ret$07 = $ret$0;
     }
    }
   } while(0);
   _fips_bn_ctx_end($ctx);
   $$0 = $ret$07;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _FIPS_put_error(3,109,102,6932,407);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _fips_bn_mod_exp_recp($r,$a,$p,$m,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i$022 = 0, $i$112 = 0, $i$220 = 0, $or$cond = 0, $or$cond37 = 0, $recp = 0, $ret$0 = 0, $start$0$ph = 0, $val = 0, $wend$0$lcssa = 0, $wend$011 = 0, $wend$1 = 0;
 var $wstart$0$lcssa = 0, $wstart$0$ph = 0, $wstart$010 = 0, $wstart$010$us = 0, $wvalue$0$lcssa = 0, $wvalue$013 = 0, $wvalue$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $val = sp + 56|0;
 $recp = sp;
 $0 = ((($p)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _FIPS_put_error(3,125,66,6932,265);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_FIPS_bn_num_bits($p)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_fips_bn_set_word($r,1)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 _fips_bn_ctx_start($ctx);
 $7 = (_fips_bn_ctx_get($ctx)|0);
 $8 = (_fips_bn_ctx_get($ctx)|0);
 HEAP32[$val>>2] = $8;
 $9 = ($7|0)==(0|0);
 $10 = ($8|0)==(0|0);
 $or$cond = $9 | $10;
 L9: do {
  if ($or$cond) {
   $ret$0 = 0;
  } else {
   _fips_bn_recp_ctx_init($recp);
   $11 = ((($m)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $19 = (_fips_bn_recp_ctx_set($recp,$m,$ctx)|0);
    $20 = ($19|0)<(1);
    if ($20) {
     $ret$0 = 0;
     break;
    }
   } else {
    $14 = (_fips_bn_copy($7,$m)|0);
    $15 = ($14|0)==(0|0);
    if ($15) {
     $ret$0 = 0;
     break;
    }
    $16 = ((($7)) + 12|0);
    HEAP32[$16>>2] = 0;
    $17 = (_fips_bn_recp_ctx_set($recp,$7,$ctx)|0);
    $18 = ($17|0)<(1);
    if ($18) {
     $ret$0 = 0;
     break;
    }
   }
   $21 = (_fips_bn_nnmod($8,$a,$m,$ctx)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $ret$0 = 0;
   } else {
    $23 = ((($8)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0);
    if ($25) {
     (_fips_bn_set_word($r,0)|0);
     $ret$0 = 1;
     break;
    }
    $26 = ($4|0)>(671);
    if ($26) {
     $$ph = 6;
     label = 17;
    } else {
     $27 = ($4|0)>(239);
     if ($27) {
      $$ph = 5;
      label = 17;
     } else {
      $28 = ($4|0)>(79);
      if ($28) {
       $$ph = 4;
       label = 17;
      } else {
       $29 = ($4|0)>(23);
       if ($29) {
        $$ph = 3;
        label = 17;
       } else {
        $49 = 1;
       }
      }
     }
    }
    if ((label|0) == 17) {
     $30 = (_fips_bn_mod_mul_reciprocal($7,$8,$8,$recp,$ctx)|0);
     $31 = ($30|0)==(0);
     if ($31) {
      $ret$0 = 0;
      break;
     }
     $32 = (($$ph) + -1)|0;
     $33 = 1 << $32;
     $34 = ($33|0)>(1);
     if ($34) {
      $i$022 = 1;
      while(1) {
       $37 = (_fips_bn_ctx_get($ctx)|0);
       $38 = (($val) + ($i$022<<2)|0);
       HEAP32[$38>>2] = $37;
       $39 = ($37|0)==(0|0);
       if ($39) {
        $ret$0 = 0;
        break L9;
       }
       $40 = (($i$022) + -1)|0;
       $41 = (($val) + ($40<<2)|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (_fips_bn_mod_mul_reciprocal($37,$42,$7,$recp,$ctx)|0);
       $44 = ($43|0)==(0);
       $36 = (($i$022) + 1)|0;
       if ($44) {
        $ret$0 = 0;
        break L9;
       }
       $35 = ($36|0)<($33|0);
       if ($35) {
        $i$022 = $36;
       } else {
        $49 = $$ph;
        break;
       }
      }
     } else {
      $49 = $$ph;
     }
    }
    $45 = (_fips_bn_set_word($r,1)|0);
    $46 = ($45|0)==(0);
    if ($46) {
     $ret$0 = 0;
    } else {
     $47 = (($4) + -1)|0;
     $48 = ($49|0)>(1);
     $start$0$ph = 1;$wstart$0$ph = $47;
     while(1) {
      $50 = (_FIPS_bn_is_bit_set($p,$wstart$0$ph)|0);
      $51 = ($50|0)==(0);
      L35: do {
       if ($51) {
        $52 = ($start$0$ph|0)==(0);
        if ($52) {
         $wstart$010$us = $wstart$0$ph;
        } else {
         $wstart$010 = $wstart$0$ph;
         while(1) {
          $59 = ($wstart$010|0)==(0);
          if ($59) {
           $ret$0 = 1;
           break L9;
          }
          $60 = (($wstart$010) + -1)|0;
          $61 = (_FIPS_bn_is_bit_set($p,$60)|0);
          $62 = ($61|0)==(0);
          if ($62) {
           $wstart$010 = $60;
          } else {
           $wstart$0$lcssa = $60;
           break L35;
          }
         }
        }
        while(1) {
         $53 = (_fips_bn_mod_mul_reciprocal($r,$r,$r,$recp,$ctx)|0);
         $54 = ($53|0)==(0);
         if ($54) {
          $ret$0 = 0;
          break L9;
         }
         $55 = ($wstart$010$us|0)==(0);
         if ($55) {
          $ret$0 = 1;
          break L9;
         }
         $56 = (($wstart$010$us) + -1)|0;
         $57 = (_FIPS_bn_is_bit_set($p,$56)|0);
         $58 = ($57|0)==(0);
         if ($58) {
          $wstart$010$us = $56;
         } else {
          $wstart$0$lcssa = $56;
          break;
         }
        }
       } else {
        $wstart$0$lcssa = $wstart$0$ph;
       }
      } while(0);
      L46: do {
       if ($48) {
        $i$112 = 1;$wend$011 = 0;$wvalue$013 = 1;
        while(1) {
         $63 = (($wstart$0$lcssa) - ($i$112))|0;
         $64 = ($63|0)<(0);
         if ($64) {
          $wend$0$lcssa = $wend$011;$wvalue$0$lcssa = $wvalue$013;
          break L46;
         }
         $65 = (_FIPS_bn_is_bit_set($p,$63)|0);
         $66 = ($65|0)==(0);
         if ($66) {
          $wend$1 = $wend$011;$wvalue$1 = $wvalue$013;
         } else {
          $67 = (($i$112) - ($wend$011))|0;
          $68 = $wvalue$013 << $67;
          $69 = $68 | 1;
          $wend$1 = $i$112;$wvalue$1 = $69;
         }
         $70 = (($i$112) + 1)|0;
         $71 = ($70|0)<($49|0);
         if ($71) {
          $i$112 = $70;$wend$011 = $wend$1;$wvalue$013 = $wvalue$1;
         } else {
          $wend$0$lcssa = $wend$1;$wvalue$0$lcssa = $wvalue$1;
          break;
         }
        }
       } else {
        $wend$0$lcssa = 0;$wvalue$0$lcssa = 1;
       }
      } while(0);
      $72 = (($wend$0$lcssa) + 1)|0;
      $73 = ($start$0$ph|0)==(0);
      $74 = ($wend$0$lcssa|0)>(-1);
      $or$cond37 = $73 & $74;
      if ($or$cond37) {
       $i$220 = 0;
       while(1) {
        $77 = (_fips_bn_mod_mul_reciprocal($r,$r,$r,$recp,$ctx)|0);
        $78 = ($77|0)==(0);
        $76 = (($i$220) + 1)|0;
        if ($78) {
         $ret$0 = 0;
         break L9;
        }
        $75 = ($76|0)<($72|0);
        if ($75) {
         $i$220 = $76;
        } else {
         break;
        }
       }
      }
      $79 = $wvalue$0$lcssa >> 1;
      $80 = (($val) + ($79<<2)|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (_fips_bn_mod_mul_reciprocal($r,$r,$81,$recp,$ctx)|0);
      $83 = ($82|0)==(0);
      if ($83) {
       $ret$0 = 0;
       break L9;
      }
      $84 = (($wstart$0$lcssa) - ($72))|0;
      $85 = ($84|0)<(0);
      if ($85) {
       $ret$0 = 1;
       break;
      } else {
       $start$0$ph = 0;$wstart$0$ph = $84;
      }
     }
    }
   }
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 _fips_bn_recp_ctx_free($recp);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _fips_bn_mod_exp_mont_consttime($rr,$a,$p,$m,$ctx,$in_mont) {
 $rr = $rr|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $in_mont = $in_mont|0;
 var $$ = 0, $$0 = 0, $$alloca_mul = 0, $$lcssa = 0, $$lcssa103 = 0, $$lcssa104 = 0, $$lcssa105 = 0, $$mask$i = 0, $$mask$i13 = 0, $$mask$i29 = 0, $$mask$i37 = 0, $$mask$i6 = 0, $$powerbufFree$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum53 = 0, $$sum54 = 0, $$sum55 = 0, $$sum56 = 0;
 var $$sum57 = 0, $$sum58 = 0, $$top$i = 0, $$top$i28 = 0, $$top$i36 = 0, $$top$i5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $am = 0, $bits$0$lcssa = 0, $bits$066 = 0, $bits$1 = 0, $bits$1$us = 0, $bits$263 = 0, $bits$263$us = 0, $exitcond$i = 0, $exitcond$i10 = 0, $exitcond$i18 = 0, $exitcond$i3 = 0, $exitcond$i33 = 0;
 var $exitcond$i41 = 0, $ftl$01$i = 0, $ftl$01$i$us = 0, $ftl$01$i23 = 0, $i$01$i = 0, $i$01$i32 = 0, $i$01$i40 = 0, $i$01$i9 = 0, $i$05$i = 0, $i$05$i17 = 0, $i$070 = 0, $i$168 = 0, $i$265 = 0, $i$265$us = 0, $j$02$i = 0, $j$02$i31 = 0, $j$02$i39 = 0, $j$02$i8 = 0, $j$06$i = 0, $j$06$i16 = 0;
 var $mont$0 = 0, $mont$1 = 0, $not$ = 0, $or$cond = 0, $powerbuf$0 = 0, $powerbufFree$0 = 0, $powerbufFree$2 = 0, $powerbufLen$0 = 0, $ret$0 = 0, $ret$04752 = 0, $tmp = 0, $tmp_top$0$lcssa$i = 0, $tmp_top$0$lcssa$i$us = 0, $tmp_top$0$lcssa$i24 = 0, $tmp_top$02$i = 0, $tmp_top$02$i$us = 0, $tmp_top$02$i22 = 0, $wvalue$0$lcssa = 0, $wvalue$067 = 0, $wvalue$164 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $tmp = sp + 20|0;
 $am = sp;
 $0 = ((($m)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$m>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  _FIPS_put_error(3,124,102,6932,600);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_FIPS_bn_num_bits($p)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (_fips_bn_set_word($rr,1)|0);
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 _fips_bn_ctx_start($ctx);
 $9 = ($in_mont|0)==(0|0);
 if ($9) {
  $10 = (_fips_bn_mont_ctx_new()|0);
  $11 = ($10|0)==(0|0);
  if ($11) {
   $ret$04752 = 0;
  } else {
   $12 = (_fips_bn_mont_ctx_set($10,$m,$ctx)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $mont$1 = $10;$powerbuf$0 = 0;$powerbufFree$2 = 0;$powerbufLen$0 = 0;$ret$0 = 0;
    label = 77;
   } else {
    $mont$0 = $10;
    label = 8;
   }
  }
 } else {
  $mont$0 = $in_mont;
  label = 8;
 }
 L12: do {
  if ((label|0) == 8) {
   $14 = ($6|0)>(937);
   if ($14) {
    $20 = 6;
   } else {
    $15 = ($6|0)>(306);
    if ($15) {
     $20 = 5;
    } else {
     $16 = ($6|0)>(89);
     if ($16) {
      $20 = 4;
     } else {
      $17 = ($6|0)>(22);
      $18 = $17 ? 3 : 1;
      $20 = $18;
     }
    }
   }
   $19 = 1 << $20;
   $21 = $1 << $20;
   $22 = $1 << 1;
   $23 = ($22|0)>($19|0);
   $24 = $23 ? $22 : $19;
   $25 = (($24) + ($21))|0;
   $26 = $25 << 2;
   $27 = ($26|0)<(3072);
   $28 = (($26) + 64)|0;
   if ($27) {
    $$alloca_mul = $28;
    $29 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
    $powerbufFree$0 = $29;
   } else {
    $30 = (_FIPS_malloc($28,6932,640)|0);
    $31 = ($30|0)==(0|0);
    if ($31) {
     $mont$1 = $mont$0;$powerbuf$0 = 0;$powerbufFree$2 = 0;$powerbufLen$0 = $26;$ret$0 = 0;
     label = 77;
     break;
    } else {
     $powerbufFree$0 = $30;
    }
   }
   $32 = $powerbufFree$0;
   $33 = $32 & 63;
   $34 = (64 - ($33))|0;
   $35 = (($powerbufFree$0) + ($34)|0);
   _memset(($35|0),0,($26|0))|0;
   $$powerbufFree$0 = $27 ? 0 : $powerbufFree$0;
   $36 = $1 << 2;
   $37 = $36 << $20;
   $$sum = (($34) + ($37))|0;
   $38 = (($powerbufFree$0) + ($$sum)|0);
   HEAP32[$tmp>>2] = $38;
   $39 = (($38) + ($1<<2)|0);
   HEAP32[$am>>2] = $39;
   $40 = ((($am)) + 4|0);
   HEAP32[$40>>2] = 0;
   $41 = ((($tmp)) + 4|0);
   HEAP32[$41>>2] = 0;
   $42 = ((($am)) + 8|0);
   HEAP32[$42>>2] = $1;
   $43 = ((($tmp)) + 8|0);
   HEAP32[$43>>2] = $1;
   $44 = ((($am)) + 12|0);
   HEAP32[$44>>2] = 0;
   $45 = ((($tmp)) + 12|0);
   HEAP32[$45>>2] = 0;
   $46 = ((($am)) + 16|0);
   HEAP32[$46>>2] = 2;
   $47 = ((($tmp)) + 16|0);
   HEAP32[$47>>2] = 2;
   $48 = (_fips_bn_value_one()|0);
   $49 = ((($mont$0)) + 4|0);
   $50 = (_fips_bn_mod_mul_montgomery($tmp,$48,$49,$mont$0,$ctx)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
    label = 77;
   } else {
    $52 = ((($a)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(0);
    if ($54) {
     $55 = (_fips_bn_ucmp($a,$m)|0);
     $56 = ($55|0)>(-1);
     if ($56) {
      label = 18;
     } else {
      $61 = (_fips_bn_mod_mul_montgomery($am,$a,$49,$mont$0,$ctx)|0);
      $62 = ($61|0)==(0);
      if ($62) {
       $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
       label = 77;
       break;
      }
     }
    } else {
     label = 18;
    }
    if ((label|0) == 18) {
     $57 = (_fips_bn_div(0,$am,$a,$m,$ctx)|0);
     $58 = ($57|0)==(0);
     if ($58) {
      $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
      label = 77;
      break;
     }
     $59 = (_fips_bn_mod_mul_montgomery($am,$am,$49,$mont$0,$ctx)|0);
     $60 = ($59|0)==(0);
     if ($60) {
      $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
      label = 77;
      break;
     }
    }
    $63 = HEAP32[$41>>2]|0;
    $64 = ($63|0)<($1|0);
    $$top$i = $64 ? $63 : $1;
    $$mask$i = $$top$i & 1073741823;
    $65 = ($$mask$i|0)==(0);
    if (!($65)) {
     $66 = $$top$i << 2;
     $67 = $66 ^ -4;
     $68 = (-4 - ($67))|0;
     $i$01$i = 0;$j$02$i = 0;
     while(1) {
      $69 = HEAP32[$tmp>>2]|0;
      $70 = (($69) + ($i$01$i)|0);
      $71 = HEAP8[$70>>0]|0;
      $$sum53 = (($j$02$i) + ($34))|0;
      $72 = (($powerbufFree$0) + ($$sum53)|0);
      HEAP8[$72>>0] = $71;
      $73 = (($i$01$i) + 1)|0;
      $74 = (($j$02$i) + ($19))|0;
      $exitcond$i = ($73|0)==($68|0);
      if ($exitcond$i) {
       break;
      } else {
       $i$01$i = $73;$j$02$i = $74;
      }
     }
    }
    $75 = HEAP32[$40>>2]|0;
    $76 = ($75|0)<($1|0);
    $$top$i5 = $76 ? $75 : $1;
    $$mask$i6 = $$top$i5 & 1073741823;
    $77 = ($$mask$i6|0)==(0);
    if (!($77)) {
     $78 = $$top$i5 << 2;
     $79 = $78 ^ -4;
     $80 = (-4 - ($79))|0;
     $i$01$i9 = 0;$j$02$i8 = 1;
     while(1) {
      $81 = HEAP32[$am>>2]|0;
      $82 = (($81) + ($i$01$i9)|0);
      $83 = HEAP8[$82>>0]|0;
      $$sum54 = (($j$02$i8) + ($34))|0;
      $84 = (($powerbufFree$0) + ($$sum54)|0);
      HEAP8[$84>>0] = $83;
      $85 = (($i$01$i9) + 1)|0;
      $86 = (($j$02$i8) + ($19))|0;
      $exitcond$i10 = ($85|0)==($80|0);
      if ($exitcond$i10) {
       break;
      } else {
       $i$01$i9 = $85;$j$02$i8 = $86;
      }
     }
    }
    $87 = ($20>>>0)>(1);
    if ($87) {
     $88 = (_fips_bn_mod_mul_montgomery($tmp,$am,$am,$mont$0,$ctx)|0);
     $89 = ($88|0)==(0);
     if ($89) {
      $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
      label = 77;
      break;
     }
     $90 = HEAP32[$41>>2]|0;
     $91 = ($90|0)<($1|0);
     $$top$i28 = $91 ? $90 : $1;
     $$mask$i29 = $$top$i28 & 1073741823;
     $92 = ($$mask$i29|0)==(0);
     if (!($92)) {
      $93 = $$top$i28 << 2;
      $94 = $93 ^ -4;
      $95 = (-4 - ($94))|0;
      $i$01$i32 = 0;$j$02$i31 = 2;
      while(1) {
       $96 = HEAP32[$tmp>>2]|0;
       $97 = (($96) + ($i$01$i32)|0);
       $98 = HEAP8[$97>>0]|0;
       $$sum57 = (($j$02$i31) + ($34))|0;
       $99 = (($powerbufFree$0) + ($$sum57)|0);
       HEAP8[$99>>0] = $98;
       $100 = (($i$01$i32) + 1)|0;
       $101 = (($j$02$i31) + ($19))|0;
       $exitcond$i33 = ($100|0)==($95|0);
       if ($exitcond$i33) {
        break;
       } else {
        $i$01$i32 = $100;$j$02$i31 = $101;
       }
      }
     }
     $102 = ($19|0)>(3);
     if ($102) {
      $i$070 = 3;
      while(1) {
       $103 = (_fips_bn_mod_mul_montgomery($tmp,$am,$tmp,$mont$0,$ctx)|0);
       $104 = ($103|0)==(0);
       if ($104) {
        $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
        label = 77;
        break L12;
       }
       $105 = HEAP32[$41>>2]|0;
       $106 = ($105|0)<($1|0);
       $$top$i36 = $106 ? $105 : $1;
       $$mask$i37 = $$top$i36 & 1073741823;
       $107 = ($$mask$i37|0)==(0);
       if (!($107)) {
        $108 = $$top$i36 << 2;
        $109 = $108 ^ -4;
        $110 = (-4 - ($109))|0;
        $i$01$i40 = 0;$j$02$i39 = $i$070;
        while(1) {
         $111 = HEAP32[$tmp>>2]|0;
         $112 = (($111) + ($i$01$i40)|0);
         $113 = HEAP8[$112>>0]|0;
         $$sum58 = (($j$02$i39) + ($34))|0;
         $114 = (($powerbufFree$0) + ($$sum58)|0);
         HEAP8[$114>>0] = $113;
         $115 = (($i$01$i40) + 1)|0;
         $116 = (($j$02$i39) + ($19))|0;
         $exitcond$i41 = ($115|0)==($110|0);
         if ($exitcond$i41) {
          break;
         } else {
          $i$01$i40 = $115;$j$02$i39 = $116;
         }
        }
       }
       $117 = (($i$070) + 1)|0;
       $118 = ($117|0)<($19|0);
       if ($118) {
        $i$070 = $117;
       } else {
        break;
       }
      }
     }
    }
    $119 = (($6) + -1)|0;
    $120 = (($119|0) % ($20|0))&-1;
    $121 = ($120|0)>(-1);
    if ($121) {
     $122 = (($6) + -3)|0;
     $bits$066 = $119;$i$168 = $120;$wvalue$067 = 0;
     while(1) {
      $123 = $wvalue$067 << 1;
      $124 = (_FIPS_bn_is_bit_set($p,$bits$066)|0);
      $125 = (($124) + ($123))|0;
      $126 = (($i$168) + -1)|0;
      $127 = (($bits$066) + -1)|0;
      $128 = ($i$168|0)>(0);
      if ($128) {
       $bits$066 = $127;$i$168 = $126;$wvalue$067 = $125;
      } else {
       $$lcssa105 = $125;
       break;
      }
     }
     $129 = (($122) - ($120))|0;
     $130 = (($129) + 1)|0;
     $bits$0$lcssa = $130;$wvalue$0$lcssa = $$lcssa105;
    } else {
     $bits$0$lcssa = $119;$wvalue$0$lcssa = 0;
    }
    $131 = HEAP32[$43>>2]|0;
    $132 = ($131|0)<($1|0);
    if ($132) {
     $133 = (_fips_bn_expand2($tmp,$1)|0);
     $134 = ($133|0)==(0|0);
     if ($134) {
      $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
      label = 77;
      break;
     }
    }
    $$mask$i13 = $1 & 1073741823;
    $135 = ($$mask$i13|0)==(0);
    if (!($135)) {
     $i$05$i17 = 0;$j$06$i16 = $wvalue$0$lcssa;
     while(1) {
      $$sum55 = (($j$06$i16) + ($34))|0;
      $136 = (($powerbufFree$0) + ($$sum55)|0);
      $137 = HEAP8[$136>>0]|0;
      $138 = HEAP32[$tmp>>2]|0;
      $139 = (($138) + ($i$05$i17)|0);
      HEAP8[$139>>0] = $137;
      $140 = (($i$05$i17) + 1)|0;
      $141 = (($j$06$i16) + ($19))|0;
      $exitcond$i18 = ($140|0)==($36|0);
      if ($exitcond$i18) {
       break;
      } else {
       $i$05$i17 = $140;$j$06$i16 = $141;
      }
     }
    }
    HEAP32[$41>>2] = $1;
    $142 = ($1|0)>(0);
    if ($142) {
     $143 = HEAP32[$tmp>>2]|0;
     $144 = (($1) + -1)|0;
     $145 = (($143) + ($144<<2)|0);
     $ftl$01$i23 = $145;$tmp_top$02$i22 = $1;
     while(1) {
      $146 = HEAP32[$ftl$01$i23>>2]|0;
      $147 = ($146|0)==(0);
      if (!($147)) {
       $tmp_top$0$lcssa$i24 = $tmp_top$02$i22;
       break;
      }
      $148 = ((($ftl$01$i23)) + -4|0);
      $149 = (($tmp_top$02$i22) + -1)|0;
      $150 = ($tmp_top$02$i22|0)>(1);
      if ($150) {
       $ftl$01$i23 = $148;$tmp_top$02$i22 = $149;
      } else {
       $tmp_top$0$lcssa$i24 = $149;
       break;
      }
     }
     HEAP32[$41>>2] = $tmp_top$0$lcssa$i24;
     $$pre$phiZ2D = $144;
    } else {
     $$pre = (($1) + -1)|0;
     $$pre$phiZ2D = $$pre;
    }
    L79: do {
     if ($135) {
      $bits$1$us = $bits$0$lcssa;
      while(1) {
       $151 = ($bits$1$us|0)>(-1);
       if ($151) {
        $bits$263$us = $bits$1$us;$i$265$us = 0;
       } else {
        break L79;
       }
       while(1) {
        $165 = (_fips_bn_mod_mul_montgomery($tmp,$tmp,$tmp,$mont$0,$ctx)|0);
        $166 = ($165|0)==(0);
        if ($166) {
         $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
         label = 77;
         break L12;
        }
        $167 = (($i$265$us) + 1)|0;
        $168 = (($bits$263$us) + -1)|0;
        $169 = ($167|0)<($20|0);
        if ($169) {
         $bits$263$us = $168;$i$265$us = $167;
        } else {
         $$lcssa = $168;
         break;
        }
       }
       $152 = HEAP32[$42>>2]|0;
       $153 = ($152|0)<($1|0);
       if ($153) {
        $154 = (_fips_bn_expand2($am,$1)|0);
        $155 = ($154|0)==(0|0);
        if ($155) {
         $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
         label = 77;
         break L12;
        }
       }
       HEAP32[$40>>2] = $1;
       if ($142) {
        $156 = HEAP32[$am>>2]|0;
        $157 = (($156) + ($$pre$phiZ2D<<2)|0);
        $ftl$01$i$us = $157;$tmp_top$02$i$us = $1;
        while(1) {
         $158 = HEAP32[$ftl$01$i$us>>2]|0;
         $159 = ($158|0)==(0);
         if (!($159)) {
          $tmp_top$0$lcssa$i$us = $tmp_top$02$i$us;
          break;
         }
         $160 = ((($ftl$01$i$us)) + -4|0);
         $161 = (($tmp_top$02$i$us) + -1)|0;
         $162 = ($tmp_top$02$i$us|0)>(1);
         if ($162) {
          $ftl$01$i$us = $160;$tmp_top$02$i$us = $161;
         } else {
          $tmp_top$0$lcssa$i$us = $161;
          break;
         }
        }
        HEAP32[$40>>2] = $tmp_top$0$lcssa$i$us;
       }
       $163 = (_fips_bn_mod_mul_montgomery($tmp,$tmp,$am,$mont$0,$ctx)|0);
       $164 = ($163|0)==(0);
       if ($164) {
        $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
        label = 77;
        break L12;
       } else {
        $bits$1$us = $$lcssa;
       }
      }
     } else {
      $bits$1 = $bits$0$lcssa;
      while(1) {
       $170 = ($bits$1|0)>(-1);
       if ($170) {
        $bits$263 = $bits$1;$i$265 = 0;$wvalue$164 = 0;
       } else {
        break L79;
       }
       while(1) {
        $171 = (_fips_bn_mod_mul_montgomery($tmp,$tmp,$tmp,$mont$0,$ctx)|0);
        $172 = ($171|0)==(0);
        if ($172) {
         $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
         label = 77;
         break L12;
        }
        $173 = $wvalue$164 << 1;
        $174 = (_FIPS_bn_is_bit_set($p,$bits$263)|0);
        $175 = (($174) + ($173))|0;
        $176 = (($i$265) + 1)|0;
        $177 = (($bits$263) + -1)|0;
        $178 = ($176|0)<($20|0);
        if ($178) {
         $bits$263 = $177;$i$265 = $176;$wvalue$164 = $175;
        } else {
         $$lcssa103 = $175;$$lcssa104 = $177;
         break;
        }
       }
       $179 = HEAP32[$42>>2]|0;
       $180 = ($179|0)<($1|0);
       if ($180) {
        $181 = (_fips_bn_expand2($am,$1)|0);
        $182 = ($181|0)==(0|0);
        if ($182) {
         $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
         label = 77;
         break L12;
        } else {
         $i$05$i = 0;$j$06$i = $$lcssa103;
        }
       } else {
        $i$05$i = 0;$j$06$i = $$lcssa103;
       }
       while(1) {
        $$sum56 = (($j$06$i) + ($34))|0;
        $183 = (($powerbufFree$0) + ($$sum56)|0);
        $184 = HEAP8[$183>>0]|0;
        $185 = HEAP32[$am>>2]|0;
        $186 = (($185) + ($i$05$i)|0);
        HEAP8[$186>>0] = $184;
        $187 = (($i$05$i) + 1)|0;
        $188 = (($j$06$i) + ($19))|0;
        $exitcond$i3 = ($187|0)==($36|0);
        if ($exitcond$i3) {
         break;
        } else {
         $i$05$i = $187;$j$06$i = $188;
        }
       }
       HEAP32[$40>>2] = $1;
       if ($142) {
        $189 = HEAP32[$am>>2]|0;
        $190 = (($189) + ($$pre$phiZ2D<<2)|0);
        $ftl$01$i = $190;$tmp_top$02$i = $1;
        while(1) {
         $191 = HEAP32[$ftl$01$i>>2]|0;
         $192 = ($191|0)==(0);
         if (!($192)) {
          $tmp_top$0$lcssa$i = $tmp_top$02$i;
          break;
         }
         $193 = ((($ftl$01$i)) + -4|0);
         $194 = (($tmp_top$02$i) + -1)|0;
         $195 = ($tmp_top$02$i|0)>(1);
         if ($195) {
          $ftl$01$i = $193;$tmp_top$02$i = $194;
         } else {
          $tmp_top$0$lcssa$i = $194;
          break;
         }
        }
        HEAP32[$40>>2] = $tmp_top$0$lcssa$i;
       }
       $196 = (_fips_bn_mod_mul_montgomery($tmp,$tmp,$am,$mont$0,$ctx)|0);
       $197 = ($196|0)==(0);
       if ($197) {
        $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = 0;
        label = 77;
        break L12;
       } else {
        $bits$1 = $$lcssa104;
       }
      }
     }
    } while(0);
    $198 = (_fips_bn_from_montgomery($rr,$tmp,$mont$0,$ctx)|0);
    $not$ = ($198|0)!=(0);
    $$ = $not$&1;
    $mont$1 = $mont$0;$powerbuf$0 = $35;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $26;$ret$0 = $$;
    label = 77;
   }
  }
 } while(0);
 if ((label|0) == 77) {
  $199 = ($mont$1|0)!=(0|0);
  $or$cond = $9 & $199;
  if ($or$cond) {
   _fips_bn_mont_ctx_free($mont$1);
  }
  $200 = ($powerbuf$0|0)==(0|0);
  if ($200) {
   $ret$04752 = $ret$0;
  } else {
   _FIPS_openssl_cleanse($powerbuf$0,$powerbufLen$0);
   $201 = ($powerbufFree$2|0)==(0|0);
   if ($201) {
    $ret$04752 = $ret$0;
   } else {
    _FIPS_free($powerbufFree$2);
    $ret$04752 = $ret$0;
   }
  }
 }
 _fips_bn_ctx_end($ctx);
 $$0 = $ret$04752;
 STACKTOP = sp;return ($$0|0);
}
function _fips_bn_gcd($r,$in_a,$in_b,$ctx) {
 $r = $r|0;
 $in_a = $in_a|0;
 $in_b = $in_b|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0$$01$i = 0, $$0$$013$i = 0, $$0$$015$i = 0, $$0$ph$be$i = 0, $$0$ph22$i = 0, $$01$$0$i = 0, $$01$$04$i = 0, $$01$$06$i = 0, $$01$ph$be$i = 0, $$01$ph$lcssa16$i = 0, $$01$ph21$i = 0, $$02$i = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, $or$cond = 0, $ret$0 = 0, $shifts$0$lcssa$i = 0, $shifts$0$ph23$i = 0, $shifts$017$i = 0, $shifts$017$i$lcssa = 0, $shifts$017$i$lcssa70 = 0, $shifts$017$i73 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fips_bn_ctx_start($ctx);
 $0 = (_fips_bn_ctx_get($ctx)|0);
 $1 = (_fips_bn_ctx_get($ctx)|0);
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 L1: do {
  if ($or$cond) {
   $ret$0 = 0;
  } else {
   $4 = (_fips_bn_copy($0,$in_a)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    $ret$0 = 0;
   } else {
    $6 = (_fips_bn_copy($1,$in_b)|0);
    $7 = ($6|0)==(0|0);
    if ($7) {
     $ret$0 = 0;
    } else {
     $8 = ((($0)) + 12|0);
     HEAP32[$8>>2] = 0;
     $9 = ((($1)) + 12|0);
     HEAP32[$9>>2] = 0;
     $10 = (_fips_bn_cmp($0,$1)|0);
     $11 = ($10|0)<(0);
     $$ = $11 ? $1 : $0;
     $$2 = $11 ? $0 : $1;
     $12 = ((($$2)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$i = $$;
     } else {
      $$0$ph22$i = $$2;$$01$ph21$i = $$;$56 = $12;$63 = $13;$shifts$0$ph23$i = 0;
      L6: while(1) {
       $15 = ((($$01$ph21$i)) + 4|0);
       $41 = $63;$shifts$017$i = $shifts$0$ph23$i;
       while(1) {
        $16 = HEAP32[$15>>2]|0;
        $17 = ($16|0)>(0);
        if ($17) {
         $18 = HEAP32[$$01$ph21$i>>2]|0;
         $19 = HEAP32[$18>>2]|0;
         $20 = $19 & 1;
         $21 = ($20|0)==(0);
         if (!($21)) {
          $$lcssa = $41;$shifts$017$i$lcssa = $shifts$017$i;
          label = 8;
          break;
         }
        }
        $40 = ($41|0)>(0);
        if ($40) {
         $42 = HEAP32[$$0$ph22$i>>2]|0;
         $43 = HEAP32[$42>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if (!($45)) {
          $shifts$017$i$lcssa70 = $shifts$017$i;
          label = 18;
          break;
         }
        }
        $50 = (_fips_bn_rshift1($$01$ph21$i,$$01$ph21$i)|0);
        $51 = ($50|0)==(0);
        if ($51) {
         $ret$0 = 0;
         break L1;
        }
        $52 = (_fips_bn_rshift1($$0$ph22$i,$$0$ph22$i)|0);
        $53 = ($52|0)==(0);
        if ($53) {
         $ret$0 = 0;
         break L1;
        }
        $54 = (($shifts$017$i) + 1)|0;
        $55 = HEAP32[$56>>2]|0;
        $57 = ($55|0)==(0);
        if ($57) {
         $$01$ph$lcssa16$i = $$01$ph21$i;$shifts$0$lcssa$i = $54;
         break L6;
        } else {
         $41 = $55;$shifts$017$i = $54;
        }
       }
       do {
        if ((label|0) == 8) {
         label = 0;
         $22 = ($$lcssa|0)>(0);
         if ($22) {
          $23 = HEAP32[$$0$ph22$i>>2]|0;
          $24 = HEAP32[$23>>2]|0;
          $25 = $24 & 1;
          $26 = ($25|0)==(0);
          if (!($26)) {
           $27 = (_fips_bn_sub($$01$ph21$i,$$01$ph21$i,$$0$ph22$i)|0);
           $28 = ($27|0)==(0);
           if ($28) {
            $ret$0 = 0;
            break L1;
           }
           $29 = (_fips_bn_rshift1($$01$ph21$i,$$01$ph21$i)|0);
           $30 = ($29|0)==(0);
           if ($30) {
            $ret$0 = 0;
            break L1;
           }
           $31 = (_fips_bn_cmp($$01$ph21$i,$$0$ph22$i)|0);
           $32 = ($31|0)<(0);
           $$0$$01$i = $32 ? $$0$ph22$i : $$01$ph21$i;
           $$01$$0$i = $32 ? $$01$ph21$i : $$0$ph22$i;
           $$0$ph$be$i = $$01$$0$i;$$01$ph$be$i = $$0$$01$i;$shifts$017$i73 = $shifts$017$i$lcssa;
           break;
          }
         }
         $36 = (_fips_bn_rshift1($$0$ph22$i,$$0$ph22$i)|0);
         $37 = ($36|0)==(0);
         if ($37) {
          $ret$0 = 0;
          break L1;
         }
         $38 = (_fips_bn_cmp($$01$ph21$i,$$0$ph22$i)|0);
         $39 = ($38|0)<(0);
         $$0$$013$i = $39 ? $$0$ph22$i : $$01$ph21$i;
         $$01$$04$i = $39 ? $$01$ph21$i : $$0$ph22$i;
         $$0$ph$be$i = $$01$$04$i;$$01$ph$be$i = $$0$$013$i;$shifts$017$i73 = $shifts$017$i$lcssa;
        }
        else if ((label|0) == 18) {
         label = 0;
         $46 = (_fips_bn_rshift1($$01$ph21$i,$$01$ph21$i)|0);
         $47 = ($46|0)==(0);
         if ($47) {
          $ret$0 = 0;
          break L1;
         }
         $48 = (_fips_bn_cmp($$01$ph21$i,$$0$ph22$i)|0);
         $49 = ($48|0)<(0);
         $$0$$015$i = $49 ? $$0$ph22$i : $$01$ph21$i;
         $$01$$06$i = $49 ? $$01$ph21$i : $$0$ph22$i;
         $$0$ph$be$i = $$01$$06$i;$$01$ph$be$i = $$0$$015$i;$shifts$017$i73 = $shifts$017$i$lcssa70;
        }
       } while(0);
       $33 = ((($$0$ph$be$i)) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($34|0)==(0);
       if ($35) {
        $$01$ph$lcssa16$i = $$01$ph$be$i;$shifts$0$lcssa$i = $shifts$017$i73;
        break;
       } else {
        $$0$ph22$i = $$0$ph$be$i;$$01$ph21$i = $$01$ph$be$i;$56 = $33;$63 = $34;$shifts$0$ph23$i = $shifts$017$i73;
       }
      }
      $58 = ($shifts$0$lcssa$i|0)==(0);
      if ($58) {
       $$02$i = $$01$ph$lcssa16$i;
      } else {
       $59 = (_fips_bn_lshift($$01$ph$lcssa16$i,$$01$ph$lcssa16$i,$shifts$0$lcssa$i)|0);
       $60 = ($59|0)==(0);
       if ($60) {
        $ret$0 = 0;
        break;
       } else {
        $$02$i = $$01$ph$lcssa16$i;
       }
      }
     }
     $61 = ($$02$i|0)==(0|0);
     if ($61) {
      $ret$0 = 0;
     } else {
      $62 = (_fips_bn_copy($r,$$02$i)|0);
      $not$ = ($62|0)!=(0|0);
      $$3 = $not$&1;
      $ret$0 = $$3;
     }
    }
   }
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 return ($ret$0|0);
}
function _fips_bn_mod_inverse($in,$a,$n,$ctx) {
 $in = $in|0;
 $a = $a|0;
 $n = $n|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $noinv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $noinv = sp;
 $0 = (_fips_int_bn_mod_inverse($in,$a,$n,$ctx,$noinv)|0);
 $1 = HEAP32[$noinv>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return ($0|0);
 }
 _FIPS_put_error(3,110,108,6941,218);
 STACKTOP = sp;return ($0|0);
}
function _fips_int_bn_mod_inverse($in,$a,$n,$ctx,$pnoinv) {
 $in = $in|0;
 $a = $a|0;
 $n = $n|0;
 $ctx = $ctx|0;
 $pnoinv = $pnoinv|0;
 var $$0 = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre19$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A$0$lcssa21$i = 0, $A$0$lcssa22$i = 0, $A$012$i = 0, $A$012$i$phi = 0, $A$035 = 0, $A$035$phi = 0, $A$115 = 0;
 var $A$116 = 0, $B$010$i = 0, $B$010$i$lcssa81 = 0, $B$010$i$phi = 0, $B$034 = 0, $B$034$lcssa77 = 0, $B$034$phi = 0, $M$033 = 0, $M$033$phi = 0, $M$07$i = 0, $M$07$i$phi = 0, $R$02 = 0, $R$02$i = 0, $R$1 = 0, $R$1$i = 0, $X$031 = 0, $X$031$lcssa78 = 0, $X$031$phi = 0, $X$09$i = 0, $X$09$i$lcssa82 = 0;
 var $X$09$i$phi = 0, $Y$0$lcssa23$i = 0, $Y$0$lcssa24$i = 0, $Y$032 = 0, $Y$032$phi = 0, $Y$08$i = 0, $Y$08$i$phi = 0, $Y$113 = 0, $Y$114 = 0, $local_A$i = 0, $local_B$i = 0, $or$cond = 0, $or$cond$i = 0, $phitmp = 0, $phitmp$i = 0, $ret$0 = 0, $ret$0$i = 0, $shift$0 = 0, $shift$1 = 0, $shift$1$lcssa = 0;
 var $sign$011$i = 0, $sign$011$i$lcssa80 = 0, $sign$036 = 0, $sign$036$lcssa76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $local_A$i = sp + 20|0;
 $local_B$i = sp;
 $0 = ($pnoinv|0)!=(0|0);
 if ($0) {
  HEAP32[$pnoinv>>2] = 0;
 }
 $1 = ((($a)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($n)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 4;
  $8 = ($7|0)==(0);
  if ($8) {
   _fips_bn_ctx_start($ctx);
   $98 = (_fips_bn_ctx_get($ctx)|0);
   $99 = (_fips_bn_ctx_get($ctx)|0);
   $100 = (_fips_bn_ctx_get($ctx)|0);
   $101 = (_fips_bn_ctx_get($ctx)|0);
   $102 = (_fips_bn_ctx_get($ctx)|0);
   $103 = (_fips_bn_ctx_get($ctx)|0);
   $104 = (_fips_bn_ctx_get($ctx)|0);
   $105 = ($104|0)==(0|0);
   L7: do {
    if ($105) {
     $R$1 = 0;$ret$0 = 0;
    } else {
     $106 = ($in|0)==(0|0);
     if ($106) {
      $107 = (_FIPS_bn_new()|0);
      $108 = ($107|0)==(0|0);
      if ($108) {
       $R$1 = 0;$ret$0 = 0;
       break;
      } else {
       $R$02 = $107;
      }
     } else {
      $R$02 = $in;
     }
     (_fips_bn_set_word($100,1)|0);
     (_fips_bn_set_word($103,0)|0);
     $109 = (_fips_bn_copy($99,$a)|0);
     $110 = ($109|0)==(0|0);
     if ($110) {
      $R$1 = $R$02;$ret$0 = 0;
     } else {
      $111 = (_fips_bn_copy($98,$n)|0);
      $112 = ($111|0)==(0|0);
      if ($112) {
       $R$1 = $R$02;$ret$0 = 0;
      } else {
       $113 = ((($98)) + 12|0);
       HEAP32[$113>>2] = 0;
       $114 = ((($99)) + 12|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ($115|0)==(0);
       if ($116) {
        $117 = (_fips_bn_ucmp($99,$98)|0);
        $118 = ($117|0)>(-1);
        if ($118) {
         label = 42;
        }
       } else {
        label = 42;
       }
       if ((label|0) == 42) {
        $119 = (_fips_bn_nnmod($99,$99,$98,$ctx)|0);
        $120 = ($119|0)==(0);
        if ($120) {
         $R$1 = $R$02;$ret$0 = 0;
         break;
        }
       }
       $121 = ((($n)) + 4|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = ($122|0)>(0);
       if ($123) {
        $124 = HEAP32[$n>>2]|0;
        $125 = HEAP32[$124>>2]|0;
        $126 = $125 & 1;
        $127 = ($126|0)==(0);
        if ($127) {
         label = 45;
        } else {
         $133 = (_FIPS_bn_num_bits($n)|0);
         $134 = ($133|0)<(2049);
         if ($134) {
          $135 = ((($99)) + 4|0);
          $136 = HEAP32[$135>>2]|0;
          $137 = ($136|0)==(0);
          if ($137) {
           $A$116 = $98;$Y$113 = $103;
           label = 99;
          } else {
           $138 = ((($100)) + 4|0);
           $139 = ((($103)) + 4|0);
           $shift$0 = 0;
           while(1) {
            $140 = (_FIPS_bn_is_bit_set($99,$shift$0)|0);
            $141 = ($140|0)==(0);
            if ($141) {
             $142 = (($shift$0) + 1)|0;
             $143 = HEAP32[$138>>2]|0;
             $144 = ($143|0)>(0);
             do {
              if ($144) {
               $145 = HEAP32[$100>>2]|0;
               $146 = HEAP32[$145>>2]|0;
               $147 = $146 & 1;
               $148 = ($147|0)==(0);
               if ($148) {
                break;
               }
               $149 = (_fips_bn_uadd($100,$100,$n)|0);
               $150 = ($149|0)==(0);
               if ($150) {
                $R$1 = $R$02;$ret$0 = 0;
                break L7;
               }
              }
             } while(0);
             $151 = (_fips_bn_rshift1($100,$100)|0);
             $152 = ($151|0)==(0);
             if ($152) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             } else {
              $shift$0 = $142;
              continue;
             }
            }
            $153 = ($shift$0|0)>(0);
            if ($153) {
             $154 = (_fips_bn_rshift($99,$99,$shift$0)|0);
             $155 = ($154|0)==(0);
             if ($155) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             } else {
              $shift$1 = 0;
             }
            } else {
             $shift$1 = 0;
            }
            while(1) {
             $156 = (_FIPS_bn_is_bit_set($98,$shift$1)|0);
             $157 = ($156|0)==(0);
             if (!($157)) {
              $shift$1$lcssa = $shift$1;
              break;
             }
             $158 = (($shift$1) + 1)|0;
             $159 = HEAP32[$139>>2]|0;
             $160 = ($159|0)>(0);
             do {
              if ($160) {
               $161 = HEAP32[$103>>2]|0;
               $162 = HEAP32[$161>>2]|0;
               $163 = $162 & 1;
               $164 = ($163|0)==(0);
               if ($164) {
                break;
               }
               $165 = (_fips_bn_uadd($103,$103,$n)|0);
               $166 = ($165|0)==(0);
               if ($166) {
                $R$1 = $R$02;$ret$0 = 0;
                break L7;
               }
              }
             } while(0);
             $167 = (_fips_bn_rshift1($103,$103)|0);
             $168 = ($167|0)==(0);
             if ($168) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             } else {
              $shift$1 = $158;
             }
            }
            $169 = ($shift$1$lcssa|0)>(0);
            if ($169) {
             $170 = (_fips_bn_rshift($98,$98,$shift$1$lcssa)|0);
             $171 = ($170|0)==(0);
             if ($171) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             }
            }
            $172 = (_fips_bn_ucmp($99,$98)|0);
            $173 = ($172|0)>(-1);
            if ($173) {
             $174 = (_fips_bn_uadd($100,$100,$103)|0);
             $175 = ($174|0)==(0);
             if ($175) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             }
             $176 = (_fips_bn_usub($99,$99,$98)|0);
             $177 = ($176|0)==(0);
             if ($177) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             }
            } else {
             $178 = (_fips_bn_uadd($103,$103,$100)|0);
             $179 = ($178|0)==(0);
             if ($179) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             }
             $180 = (_fips_bn_usub($98,$98,$99)|0);
             $181 = ($180|0)==(0);
             if ($181) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             }
            }
            $182 = HEAP32[$135>>2]|0;
            $183 = ($182|0)==(0);
            if ($183) {
             $A$116 = $98;$Y$113 = $103;
             label = 99;
             break;
            } else {
             $shift$0 = 0;
            }
           }
          }
         } else {
          label = 45;
         }
        }
       } else {
        label = 45;
       }
       if ((label|0) == 45) {
        $128 = ((($99)) + 4|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = ($129|0)==(0);
        if ($130) {
         $A$116 = $98;$Y$113 = $103;
         label = 99;
        } else {
         $131 = ((($101)) + 4|0);
         $132 = ((($101)) + 12|0);
         $A$035 = $98;$B$034 = $99;$M$033 = $102;$X$031 = $100;$Y$032 = $103;$sign$036 = -1;
         while(1) {
          $184 = (_FIPS_bn_num_bits($A$035)|0);
          $185 = (_FIPS_bn_num_bits($B$034)|0);
          $186 = ($184|0)==($185|0);
          do {
           if ($186) {
            $187 = (_fips_bn_set_word($101,1)|0);
            $188 = ($187|0)==(0);
            if ($188) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            }
            $189 = (_fips_bn_sub($M$033,$A$035,$B$034)|0);
            $190 = ($189|0)==(0);
            if ($190) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            }
           } else {
            $191 = (_FIPS_bn_num_bits($A$035)|0);
            $192 = (_FIPS_bn_num_bits($B$034)|0);
            $193 = (($192) + 1)|0;
            $194 = ($191|0)==($193|0);
            if (!($194)) {
             $215 = (_fips_bn_div($101,$M$033,$A$035,$B$034,$ctx)|0);
             $216 = ($215|0)==(0);
             if ($216) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             } else {
              break;
             }
            }
            $195 = (_fips_bn_lshift1($104,$B$034)|0);
            $196 = ($195|0)==(0);
            if ($196) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            }
            $197 = (_fips_bn_ucmp($A$035,$104)|0);
            $198 = ($197|0)<(0);
            if ($198) {
             $199 = (_fips_bn_set_word($101,1)|0);
             $200 = ($199|0)==(0);
             if ($200) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             }
             $201 = (_fips_bn_sub($M$033,$A$035,$B$034)|0);
             $202 = ($201|0)==(0);
             if ($202) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             } else {
              break;
             }
            }
            $203 = (_fips_bn_sub($M$033,$A$035,$104)|0);
            $204 = ($203|0)==(0);
            if ($204) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            }
            $205 = (_fips_bn_add($101,$104,$B$034)|0);
            $206 = ($205|0)==(0);
            if ($206) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            }
            $207 = (_fips_bn_ucmp($A$035,$101)|0);
            $208 = ($207|0)<(0);
            if ($208) {
             $209 = (_fips_bn_set_word($101,2)|0);
             $210 = ($209|0)==(0);
             if ($210) {
              $R$1 = $R$02;$ret$0 = 0;
              break L7;
             } else {
              break;
             }
            }
            $211 = (_fips_bn_set_word($101,3)|0);
            $212 = ($211|0)==(0);
            if ($212) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            }
            $213 = (_fips_bn_sub($M$033,$M$033,$B$034)|0);
            $214 = ($213|0)==(0);
            if ($214) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            }
           }
          } while(0);
          $217 = HEAP32[$131>>2]|0;
          $218 = ($217|0)==(1);
          L76: do {
           if ($218) {
            $219 = HEAP32[$101>>2]|0;
            $220 = HEAP32[$219>>2]|0;
            switch ($220|0) {
            case 1:  {
             $221 = HEAP32[$132>>2]|0;
             $222 = ($221|0)==(0);
             if ($222) {
              $223 = (_fips_bn_add($A$035,$X$031,$Y$032)|0);
              $224 = ($223|0)==(0);
              if ($224) {
               $R$1 = $R$02;$ret$0 = 0;
               break L7;
              } else {
               break L76;
              }
             }
             break;
            }
            case 2:  {
             $225 = HEAP32[$132>>2]|0;
             $226 = ($225|0)==(0);
             if ($226) {
              $227 = (_fips_bn_lshift1($A$035,$X$031)|0);
              $228 = ($227|0)==(0);
              if ($228) {
               $R$1 = $R$02;$ret$0 = 0;
               break L7;
              } else {
               label = 96;
               break L76;
              }
             }
             break;
            }
            case 4:  {
             $229 = HEAP32[$132>>2]|0;
             $230 = ($229|0)==(0);
             if ($230) {
              $231 = (_fips_bn_lshift($A$035,$X$031,2)|0);
              $232 = ($231|0)==(0);
              if ($232) {
               $R$1 = $R$02;$ret$0 = 0;
               break L7;
              } else {
               label = 96;
               break L76;
              }
             }
             break;
            }
            default: {
            }
            }
            $233 = (_fips_bn_copy($A$035,$X$031)|0);
            $234 = ($233|0)==(0|0);
            if ($234) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            }
            $235 = HEAP32[$101>>2]|0;
            $236 = HEAP32[$235>>2]|0;
            $237 = (_fips_bn_mul_word($A$035,$236)|0);
            $238 = ($237|0)==(0);
            if ($238) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            } else {
             label = 96;
            }
           } else {
            $239 = (_fips_bn_mul($A$035,$101,$X$031,$ctx)|0);
            $240 = ($239|0)==(0);
            if ($240) {
             $R$1 = $R$02;$ret$0 = 0;
             break L7;
            } else {
             label = 96;
            }
           }
          } while(0);
          if ((label|0) == 96) {
           label = 0;
           $241 = (_fips_bn_add($A$035,$A$035,$Y$032)|0);
           $242 = ($241|0)==(0);
           if ($242) {
            $R$1 = $R$02;$ret$0 = 0;
            break L7;
           }
          }
          $243 = (0 - ($sign$036))|0;
          $244 = ((($M$033)) + 4|0);
          $245 = HEAP32[$244>>2]|0;
          $246 = ($245|0)==(0);
          if ($246) {
           $B$034$lcssa77 = $B$034;$X$031$lcssa78 = $X$031;$sign$036$lcssa76 = $sign$036;
           break;
          } else {
           $Y$032$phi = $X$031;$X$031$phi = $A$035;$M$033$phi = $Y$032;$B$034$phi = $M$033;$A$035$phi = $B$034;$sign$036 = $243;$Y$032 = $Y$032$phi;$X$031 = $X$031$phi;$M$033 = $M$033$phi;$B$034 = $B$034$phi;$A$035 = $A$035$phi;
          }
         }
         $phitmp = ($sign$036$lcssa76|0)>(0);
         if ($phitmp) {
          $A$116 = $B$034$lcssa77;$Y$113 = $X$031$lcssa78;
          label = 99;
         } else {
          $A$115 = $B$034$lcssa77;$Y$114 = $X$031$lcssa78;
         }
        }
       }
       if ((label|0) == 99) {
        $247 = (_fips_bn_sub($Y$113,$n,$Y$113)|0);
        $248 = ($247|0)==(0);
        if ($248) {
         $R$1 = $R$02;$ret$0 = 0;
         break;
        } else {
         $A$115 = $A$116;$Y$114 = $Y$113;
        }
       }
       $249 = ((($A$115)) + 4|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = ($250|0)==(1);
       if ($251) {
        $252 = HEAP32[$A$115>>2]|0;
        $253 = HEAP32[$252>>2]|0;
        $254 = ($253|0)==(1);
        if ($254) {
         $255 = ((($A$115)) + 12|0);
         $256 = HEAP32[$255>>2]|0;
         $257 = ($256|0)==(0);
         if ($257) {
          $258 = ((($Y$114)) + 12|0);
          $259 = HEAP32[$258>>2]|0;
          $260 = ($259|0)==(0);
          if ($260) {
           $261 = (_fips_bn_ucmp($Y$114,$n)|0);
           $262 = ($261|0)<(0);
           if ($262) {
            $263 = (_fips_bn_copy($R$02,$Y$114)|0);
            $264 = ($263|0)==(0|0);
            if ($264) {
             $R$1 = $R$02;$ret$0 = 0;
             break;
            }
           } else {
            label = 106;
           }
          } else {
           label = 106;
          }
          if ((label|0) == 106) {
           $265 = (_fips_bn_nnmod($R$02,$Y$114,$n,$ctx)|0);
           $266 = ($265|0)==(0);
           if ($266) {
            $R$1 = $R$02;$ret$0 = 0;
            break;
           }
          }
          $R$1 = $R$02;$ret$0 = $R$02;
          break;
         }
        }
       }
       if ($0) {
        HEAP32[$pnoinv>>2] = 1;
        $R$1 = $R$02;$ret$0 = 0;
       } else {
        $R$1 = $R$02;$ret$0 = 0;
       }
      }
     }
    }
   } while(0);
   $267 = ($ret$0|0)==(0|0);
   $268 = ($in|0)==(0|0);
   $or$cond = $268 & $267;
   if ($or$cond) {
    _FIPS_bn_free($R$1);
   }
   _fips_bn_ctx_end($ctx);
   $$0 = $ret$0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _fips_bn_ctx_start($ctx);
 $9 = (_fips_bn_ctx_get($ctx)|0);
 $10 = (_fips_bn_ctx_get($ctx)|0);
 $11 = (_fips_bn_ctx_get($ctx)|0);
 $12 = (_fips_bn_ctx_get($ctx)|0);
 $13 = (_fips_bn_ctx_get($ctx)|0);
 $14 = (_fips_bn_ctx_get($ctx)|0);
 $15 = (_fips_bn_ctx_get($ctx)|0);
 $16 = ($15|0)==(0|0);
 L113: do {
  if ($16) {
   $R$1$i = 0;$ret$0$i = 0;
  } else {
   $17 = ($in|0)==(0|0);
   if ($17) {
    $18 = (_FIPS_bn_new()|0);
    $19 = ($18|0)==(0|0);
    if ($19) {
     $R$1$i = 0;$ret$0$i = 0;
     break;
    } else {
     $R$02$i = $18;
    }
   } else {
    $R$02$i = $in;
   }
   (_fips_bn_set_word($11,1)|0);
   (_fips_bn_set_word($14,0)|0);
   $20 = (_fips_bn_copy($10,$a)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $R$1$i = $R$02$i;$ret$0$i = 0;
   } else {
    $22 = (_fips_bn_copy($9,$n)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     $R$1$i = $R$02$i;$ret$0$i = 0;
    } else {
     $24 = ((($9)) + 12|0);
     HEAP32[$24>>2] = 0;
     $25 = ((($10)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0);
     do {
      if ($27) {
       $28 = (_fips_bn_ucmp($10,$9)|0);
       $29 = ($28|0)>(-1);
       if ($29) {
        $$pre$i = HEAP32[$25>>2]|0;
        $38 = $$pre$i;
        label = 14;
        break;
       } else {
        $$pre19$i = ((($10)) + 4|0);
        $$pre$phi$iZ2D = $$pre19$i;
        break;
       }
      } else {
       $38 = $26;
       label = 14;
      }
     } while(0);
     if ((label|0) == 14) {
      $30 = HEAP32[$10>>2]|0;
      HEAP32[$local_B$i>>2] = $30;
      $31 = ((($10)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ((($local_B$i)) + 4|0);
      HEAP32[$33>>2] = $32;
      $34 = ((($10)) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($local_B$i)) + 8|0);
      HEAP32[$36>>2] = $35;
      $37 = ((($local_B$i)) + 12|0);
      HEAP32[$37>>2] = $38;
      $39 = ((($local_B$i)) + 16|0);
      $40 = ((($10)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = $41 & -8;
      $43 = $42 | 6;
      HEAP32[$39>>2] = $43;
      $44 = (_fips_bn_nnmod($10,$local_B$i,$9,$ctx)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       $R$1$i = $R$02$i;$ret$0$i = 0;
       break;
      } else {
       $$pre$phi$iZ2D = $31;
      }
     }
     $46 = HEAP32[$$pre$phi$iZ2D>>2]|0;
     $47 = ($46|0)==(0);
     if ($47) {
      $A$0$lcssa22$i = $9;$Y$0$lcssa24$i = $14;
      label = 22;
     } else {
      $48 = ((($local_A$i)) + 4|0);
      $49 = ((($local_A$i)) + 8|0);
      $50 = ((($local_A$i)) + 12|0);
      $51 = ((($local_A$i)) + 16|0);
      $A$012$i = $9;$B$010$i = $10;$M$07$i = $13;$X$09$i = $11;$Y$08$i = $14;$sign$011$i = -1;
      while(1) {
       $52 = HEAP32[$A$012$i>>2]|0;
       HEAP32[$local_A$i>>2] = $52;
       $53 = ((($A$012$i)) + 4|0);
       $54 = HEAP32[$53>>2]|0;
       HEAP32[$48>>2] = $54;
       $55 = ((($A$012$i)) + 8|0);
       $56 = HEAP32[$55>>2]|0;
       HEAP32[$49>>2] = $56;
       $57 = ((($A$012$i)) + 12|0);
       $58 = HEAP32[$57>>2]|0;
       HEAP32[$50>>2] = $58;
       $59 = HEAP32[$51>>2]|0;
       $60 = $59 & 1;
       $61 = ((($A$012$i)) + 16|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = $62 & -8;
       $64 = $60 | $63;
       $65 = $64 | 6;
       HEAP32[$51>>2] = $65;
       $66 = (_fips_bn_div($12,$M$07$i,$local_A$i,$B$010$i,$ctx)|0);
       $67 = ($66|0)==(0);
       if ($67) {
        $R$1$i = $R$02$i;$ret$0$i = 0;
        break L113;
       }
       $68 = (_fips_bn_mul($A$012$i,$12,$X$09$i,$ctx)|0);
       $69 = ($68|0)==(0);
       if ($69) {
        $R$1$i = $R$02$i;$ret$0$i = 0;
        break L113;
       }
       $70 = (_fips_bn_add($A$012$i,$A$012$i,$Y$08$i)|0);
       $71 = ($70|0)==(0);
       if ($71) {
        $R$1$i = $R$02$i;$ret$0$i = 0;
        break L113;
       }
       $72 = (0 - ($sign$011$i))|0;
       $73 = ((($M$07$i)) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($74|0)==(0);
       if ($75) {
        $B$010$i$lcssa81 = $B$010$i;$X$09$i$lcssa82 = $X$09$i;$sign$011$i$lcssa80 = $sign$011$i;
        break;
       } else {
        $Y$08$i$phi = $X$09$i;$X$09$i$phi = $A$012$i;$M$07$i$phi = $Y$08$i;$B$010$i$phi = $M$07$i;$A$012$i$phi = $B$010$i;$sign$011$i = $72;$Y$08$i = $Y$08$i$phi;$X$09$i = $X$09$i$phi;$M$07$i = $M$07$i$phi;$B$010$i = $B$010$i$phi;$A$012$i = $A$012$i$phi;
       }
      }
      $phitmp$i = ($sign$011$i$lcssa80|0)>(0);
      if ($phitmp$i) {
       $A$0$lcssa22$i = $B$010$i$lcssa81;$Y$0$lcssa24$i = $X$09$i$lcssa82;
       label = 22;
      } else {
       $A$0$lcssa21$i = $B$010$i$lcssa81;$Y$0$lcssa23$i = $X$09$i$lcssa82;
      }
     }
     if ((label|0) == 22) {
      $76 = (_fips_bn_sub($Y$0$lcssa24$i,$n,$Y$0$lcssa24$i)|0);
      $77 = ($76|0)==(0);
      if ($77) {
       $R$1$i = $R$02$i;$ret$0$i = 0;
       break;
      } else {
       $A$0$lcssa21$i = $A$0$lcssa22$i;$Y$0$lcssa23$i = $Y$0$lcssa24$i;
      }
     }
     $78 = ((($A$0$lcssa21$i)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==(1);
     if ($80) {
      $81 = HEAP32[$A$0$lcssa21$i>>2]|0;
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)==(1);
      if ($83) {
       $84 = ((($A$0$lcssa21$i)) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)==(0);
       if ($86) {
        $87 = ((($Y$0$lcssa23$i)) + 12|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($88|0)==(0);
        if ($89) {
         $90 = (_fips_bn_ucmp($Y$0$lcssa23$i,$n)|0);
         $91 = ($90|0)<(0);
         if ($91) {
          $92 = (_fips_bn_copy($R$02$i,$Y$0$lcssa23$i)|0);
          $93 = ($92|0)==(0|0);
          if ($93) {
           $R$1$i = $R$02$i;$ret$0$i = 0;
           break;
          }
         } else {
          label = 29;
         }
        } else {
         label = 29;
        }
        if ((label|0) == 29) {
         $94 = (_fips_bn_nnmod($R$02$i,$Y$0$lcssa23$i,$n,$ctx)|0);
         $95 = ($94|0)==(0);
         if ($95) {
          $R$1$i = $R$02$i;$ret$0$i = 0;
          break;
         }
        }
        $R$1$i = $R$02$i;$ret$0$i = $R$02$i;
        break;
       }
      }
     }
     _FIPS_put_error(3,139,108,6941,663);
     $R$1$i = $R$02$i;$ret$0$i = 0;
    }
   }
  }
 } while(0);
 $96 = ($ret$0$i|0)==(0|0);
 $97 = ($in|0)==(0|0);
 $or$cond$i = $97 & $96;
 if ($or$cond$i) {
  _FIPS_bn_free($R$1$i);
 }
 _fips_bn_ctx_end($ctx);
 $$0 = $ret$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _fips_bn_value_one() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (40|0);
}
function _FIPS_bn_num_bits_word($l) {
 $l = $l|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l>>>0)>(65535);
 if ($0) {
  $1 = ($l>>>0)>(16777215);
  if ($1) {
   $2 = $l >>> 24;
   $3 = (6950 + ($2)|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4&255;
   $6 = (($5) + 24)|0;
   $$0 = $6;
   return ($$0|0);
  } else {
   $7 = $l >>> 16;
   $8 = (6950 + ($7)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = (($10) + 16)|0;
   $$0 = $11;
   return ($$0|0);
  }
 } else {
  $12 = $l & 65280;
  $13 = ($12|0)==(0);
  if ($13) {
   $19 = (6950 + ($l)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $$0 = $21;
   return ($$0|0);
  } else {
   $14 = $l >>> 8;
   $15 = (6950 + ($14)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = (($17) + 8)|0;
   $$0 = $18;
   return ($$0|0);
  }
 }
 return (0)|0;
}
function _FIPS_bn_num_bits($a) {
 $a = $a|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = ($1|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $2 << 5;
 $5 = HEAP32[$a>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(65535);
 do {
  if ($8) {
   $9 = ($7>>>0)>(16777215);
   if ($9) {
    $10 = $7 >>> 24;
    $11 = (6950 + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = (($13) + 24)|0;
    $$0$i = $14;
    break;
   } else {
    $15 = $7 >>> 16;
    $16 = (6950 + ($15)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (($18) + 16)|0;
    $$0$i = $19;
    break;
   }
  } else {
   $20 = $7 & 65280;
   $21 = ($20|0)==(0);
   if ($21) {
    $27 = (6950 + ($7)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $$0$i = $29;
    break;
   } else {
    $22 = $7 >>> 8;
    $23 = (6950 + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = (($25) + 8)|0;
    $$0$i = $26;
    break;
   }
  }
 } while(0);
 $30 = (($$0$i) + ($4))|0;
 $$0 = $30;
 return ($$0|0);
}
function _FIPS_bn_clear_free($a) {
 $a = $a|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$a>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$pre = ((($a)) + 16|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $3 = ((($a)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 << 2;
  _FIPS_openssl_cleanse($1,$5);
  $6 = ((($a)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[$a>>2]|0;
   _FIPS_free($10);
   $$pre$phiZ2D = $6;
  } else {
   $$pre$phiZ2D = $6;
  }
 }
 $11 = HEAP32[$$pre$phiZ2D>>2]|0;
 $12 = $11 & 1;
 _FIPS_openssl_cleanse($a,20);
 $13 = ($12|0)==(0);
 if ($13) {
  return;
 }
 _FIPS_free($a);
 return;
}
function _FIPS_bn_free($a) {
 $a = $a|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$a>>2]|0;
 $2 = ($1|0)==(0|0);
 $$pre = ((($a)) + 16|0);
 if (!($2)) {
  $3 = HEAP32[$$pre>>2]|0;
  $4 = $3 & 2;
  $5 = ($4|0)==(0);
  if ($5) {
   _FIPS_free($1);
  }
 }
 $6 = HEAP32[$$pre>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $6 | 32768;
  HEAP32[$$pre>>2] = $9;
  HEAP32[$a>>2] = 0;
  return;
 } else {
  _FIPS_free($a);
  return;
 }
}
function _fips_bn_init($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$a>>2]=0|0;HEAP32[$a+4>>2]=0|0;HEAP32[$a+8>>2]=0|0;HEAP32[$a+12>>2]=0|0;HEAP32[$a+16>>2]=0|0;
 return;
}
function _FIPS_bn_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_malloc(20,7206,287)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _FIPS_put_error(3,113,65,7206,289);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = ((($0)) + 16|0);
  HEAP32[$2>>2] = 1;
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_bn_dup($a) {
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_FIPS_malloc(20,7206,287)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _FIPS_put_error(3,113,65,7206,289);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 16|0);
 HEAP32[$3>>2] = 1;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 $4 = (_fips_bn_copy($1,$a)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $1;
  return ($$0|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = HEAP32[$3>>2]|0;
  $9 = $8 & 2;
  $10 = ($9|0)==(0);
  if ($10) {
   _FIPS_free($6);
  }
 }
 $11 = HEAP32[$3>>2]|0;
 $12 = $11 & 1;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $11 | 32768;
  HEAP32[$3>>2] = $14;
  HEAP32[$1>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 } else {
  _FIPS_free($1);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_bn_expand2($b,$words) {
 $b = $b|0;
 $words = $words|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($words|0);
 if (!($2)) {
  $$0 = $b;
  return ($$0|0);
 }
 $3 = (_bn_expand_internal($b,$words)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[$b>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _FIPS_free($5);
 }
 HEAP32[$b>>2] = $3;
 HEAP32[$0>>2] = $words;
 $$0 = $b;
 return ($$0|0);
}
function _fips_bn_copy($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $$pre = 0, $$pre10 = 0, $$pre11 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $A$0$lcssa = 0, $A$03 = 0, $B$0$lcssa = 0, $B$02 = 0, $i$04 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==($b|0);
 if ($0) {
  $$0 = $a;
  return ($$0|0);
 }
 $1 = ((($b)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($a)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($4|0);
 if ($5) {
  $6 = (_bn_expand_internal($a,$2)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 0;
   return ($$0|0);
  }
  $8 = HEAP32[$a>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   _FIPS_free($8);
  }
  HEAP32[$a>>2] = $6;
  HEAP32[$3>>2] = $2;
  $$pre9 = HEAP32[$1>>2]|0;
  $12 = $$pre9;$29 = $6;
 } else {
  $$pre = HEAP32[$a>>2]|0;
  $12 = $2;$29 = $$pre;
 }
 $10 = HEAP32[$b>>2]|0;
 $11 = $12 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = $11 << 2;
  $scevgep = (($10) + ($14<<2)|0);
  $A$03 = $29;$B$02 = $10;$i$04 = $11;
  while(1) {
   $15 = HEAP32[$B$02>>2]|0;
   $16 = ((($B$02)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($B$02)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($B$02)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$A$03>>2] = $15;
   $22 = ((($A$03)) + 4|0);
   HEAP32[$22>>2] = $17;
   $23 = ((($A$03)) + 8|0);
   HEAP32[$23>>2] = $19;
   $24 = ((($A$03)) + 12|0);
   HEAP32[$24>>2] = $21;
   $25 = (($i$04) + -1)|0;
   $26 = ((($A$03)) + 16|0);
   $27 = ((($B$02)) + 16|0);
   $28 = ($i$04|0)>(1);
   if ($28) {
    $A$03 = $26;$B$02 = $27;$i$04 = $25;
   } else {
    break;
   }
  }
  $scevgep7 = (($29) + ($14<<2)|0);
  $$pre10 = HEAP32[$1>>2]|0;
  $31 = $$pre10;$A$0$lcssa = $scevgep7;$B$0$lcssa = $scevgep;
 } else {
  $31 = $12;$A$0$lcssa = $29;$B$0$lcssa = $10;
 }
 $30 = $31 & 3;
 switch ($30|0) {
 case 3:  {
  $32 = ((($B$0$lcssa)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($A$0$lcssa)) + 8|0);
  HEAP32[$34>>2] = $33;
  label = 14;
  break;
 }
 case 2:  {
  label = 14;
  break;
 }
 case 1:  {
  label = 15;
  break;
 }
 default: {
  $40 = $31;
 }
 }
 if ((label|0) == 14) {
  $35 = ((($B$0$lcssa)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($A$0$lcssa)) + 4|0);
  HEAP32[$37>>2] = $36;
  label = 15;
 }
 if ((label|0) == 15) {
  $38 = HEAP32[$B$0$lcssa>>2]|0;
  HEAP32[$A$0$lcssa>>2] = $38;
  $$pre11 = HEAP32[$1>>2]|0;
  $40 = $$pre11;
 }
 $39 = ((($a)) + 4|0);
 HEAP32[$39>>2] = $40;
 $41 = ((($b)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($a)) + 12|0);
 HEAP32[$43>>2] = $42;
 $$0 = $a;
 return ($$0|0);
}
function _fips_bn_set_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $$pre = HEAP32[$a>>2]|0;
  $8 = $$pre;
 } else {
  $3 = (_bn_expand_internal($a,1)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
   return ($$0|0);
  }
  $5 = HEAP32[$a>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _FIPS_free($5);
  }
  HEAP32[$a>>2] = $3;
  HEAP32[$0>>2] = 1;
  $8 = $3;
 }
 $7 = ((($a)) + 12|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$8>>2] = $w;
 $9 = ($w|0)!=(0);
 $10 = $9&1;
 $11 = ((($a)) + 4|0);
 HEAP32[$11>>2] = $10;
 $$0 = 1;
 return ($$0|0);
}
function _FIPS_bn_bin2bn($s,$len,$ret) {
 $s = $s|0;
 $len = $len|0;
 $ret = $ret|0;
 var $$01 = 0, $$02 = 0, $$02$ph = 0, $$05 = 0, $$lcssa = 0, $$lcssa27 = 0, $$lcssa28 = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bn$06 = 0, $ftl$010 = 0, $i$0$ph = 0, $l$0 = 0, $m$0 = 0, $m$0$ph = 0, $n$0 = 0, $n$0$ph = 0, $or$cond = 0, $tmp_top$0$lcssa = 0, $tmp_top$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ret|0)==(0|0);
 do {
  if ($0) {
   $1 = (_FIPS_malloc(20,7206,287)|0);
   $2 = ($1|0)==(0|0);
   if (!($2)) {
    $3 = ((($1)) + 16|0);
    HEAP32[$3>>2] = 1;
    ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
    $$05 = $1;$bn$06 = $1;
    break;
   }
   _FIPS_put_error(3,113,65,7206,289);
   $$01 = 0;
   return ($$01|0);
  } else {
   $$05 = $ret;$bn$06 = 0;
  }
 } while(0);
 $4 = ($len|0)==(0);
 if ($4) {
  $5 = ((($$05)) + 4|0);
  HEAP32[$5>>2] = 0;
  $$01 = $$05;
  return ($$01|0);
 }
 $6 = (($len) + -1)|0;
 $7 = $6 >>> 2;
 $8 = (($7) + 1)|0;
 $9 = $6 & 3;
 $10 = ((($$05)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($7|0)>=($11|0);
 $13 = ($11|0)<($8|0);
 $or$cond = $12 & $13;
 do {
  if ($or$cond) {
   $14 = (_bn_expand_internal($$05,$8)|0);
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $16 = HEAP32[$$05>>2]|0;
    $17 = ($16|0)==(0|0);
    if (!($17)) {
     _FIPS_free($16);
    }
    HEAP32[$$05>>2] = $14;
    HEAP32[$10>>2] = $8;
    $$pre$phiZ2D = $$05;
    break;
   }
   $18 = ($bn$06|0)==(0|0);
   if ($18) {
    $$01 = 0;
    return ($$01|0);
   }
   $19 = HEAP32[$bn$06>>2]|0;
   $20 = ($19|0)==(0|0);
   $$pre$i = ((($bn$06)) + 16|0);
   if (!($20)) {
    $21 = HEAP32[$$pre$i>>2]|0;
    $22 = $21 & 2;
    $23 = ($22|0)==(0);
    if ($23) {
     _FIPS_free($19);
    }
   }
   $24 = HEAP32[$$pre$i>>2]|0;
   $25 = $24 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = $24 | 32768;
    HEAP32[$$pre$i>>2] = $27;
    HEAP32[$bn$06>>2] = 0;
    $$01 = 0;
    return ($$01|0);
   } else {
    _FIPS_free($bn$06);
    $$01 = 0;
    return ($$01|0);
   }
  } else {
   $$pre$phiZ2D = $$05;
  }
 } while(0);
 $28 = ((($$05)) + 4|0);
 HEAP32[$28>>2] = $8;
 $29 = ((($$05)) + 12|0);
 HEAP32[$29>>2] = 0;
 $$02$ph = $s;$i$0$ph = $8;$m$0$ph = $9;$n$0$ph = $len;
 L34: while(1) {
  $$02 = $$02$ph;$l$0 = 0;$m$0 = $m$0$ph;$n$0 = $n$0$ph;
  while(1) {
   $30 = (($n$0) + -1)|0;
   $31 = ($n$0|0)==(0);
   if ($31) {
    break L34;
   }
   $32 = $l$0 << 8;
   $33 = ((($$02)) + 1|0);
   $34 = HEAP8[$$02>>0]|0;
   $35 = $34&255;
   $36 = $35 | $32;
   $37 = (($m$0) + -1)|0;
   $38 = ($m$0|0)==(0);
   if ($38) {
    $$lcssa = $33;$$lcssa27 = $30;$$lcssa28 = $36;
    break;
   } else {
    $$02 = $33;$l$0 = $36;$m$0 = $37;$n$0 = $30;
   }
  }
  $39 = (($i$0$ph) + -1)|0;
  $40 = HEAP32[$$pre$phiZ2D>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  HEAP32[$41>>2] = $$lcssa28;
  $$02$ph = $$lcssa;$i$0$ph = $39;$m$0$ph = 3;$n$0$ph = $$lcssa27;
 }
 $42 = HEAP32[$28>>2]|0;
 $43 = ($42|0)>(0);
 if (!($43)) {
  $$01 = $$05;
  return ($$01|0);
 }
 $44 = HEAP32[$$pre$phiZ2D>>2]|0;
 $45 = (($42) + -1)|0;
 $46 = (($44) + ($45<<2)|0);
 $ftl$010 = $46;$tmp_top$011 = $42;
 while(1) {
  $47 = HEAP32[$ftl$010>>2]|0;
  $48 = ($47|0)==(0);
  if (!($48)) {
   $tmp_top$0$lcssa = $tmp_top$011;
   break;
  }
  $49 = ((($ftl$010)) + -4|0);
  $50 = (($tmp_top$011) + -1)|0;
  $51 = ($tmp_top$011|0)>(1);
  if ($51) {
   $ftl$010 = $49;$tmp_top$011 = $50;
  } else {
   $tmp_top$0$lcssa = $50;
   break;
  }
 }
 HEAP32[$28>>2] = $tmp_top$0$lcssa;
 $$01 = $$05;
 return ($$01|0);
}
function _FIPS_bn_bn2bin($a,$to) {
 $a = $a|0;
 $to = $to|0;
 var $$0$i$i = 0, $$0$i3 = 0, $$02 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $phitmp$off = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = ($1|0)==(0);
 if ($3) {
  $$0$i3 = 0;
  return ($$0$i3|0);
 }
 $4 = $2 << 5;
 $5 = HEAP32[$a>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(65535);
 do {
  if ($8) {
   $9 = ($7>>>0)>(16777215);
   if ($9) {
    $10 = $7 >>> 24;
    $11 = (6950 + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = (($13) + 24)|0;
    $$0$i$i = $14;
    break;
   } else {
    $15 = $7 >>> 16;
    $16 = (6950 + ($15)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (($18) + 16)|0;
    $$0$i$i = $19;
    break;
   }
  } else {
   $20 = $7 & 65280;
   $21 = ($20|0)==(0);
   if ($21) {
    $27 = (6950 + ($7)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $$0$i$i = $29;
    break;
   } else {
    $22 = $7 >>> 8;
    $23 = (6950 + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = (($25) + 8)|0;
    $$0$i$i = $26;
    break;
   }
  }
 } while(0);
 $30 = $4 | 7;
 $phitmp = (($30) + ($$0$i$i))|0;
 $phitmp1 = (($phitmp|0) / 8)&-1;
 $phitmp$off = (($phitmp) + 7)|0;
 $31 = ($phitmp$off>>>0)<(15);
 if ($31) {
  $$0$i3 = 0;
  return ($$0$i3|0);
 }
 $$02 = $to;$$in = $phitmp1;
 while(1) {
  $32 = (($$in) + -1)|0;
  $33 = (($32|0) / 4)&-1;
  $34 = HEAP32[$a>>2]|0;
  $35 = (($34) + ($33<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($32|0) % 4)&-1;
  $38 = $37 << 3;
  $39 = $36 >>> $38;
  $40 = $39&255;
  $41 = ((($$02)) + 1|0);
  HEAP8[$$02>>0] = $40;
  $42 = ($32|0)==(0);
  if ($42) {
   $$0$i3 = $phitmp1;
   break;
  } else {
   $$02 = $41;$$in = $32;
  }
 }
 return ($$0$i3|0);
}
function _fips_bn_ucmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0;
 var $i$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $5 = (($1) - ($3))|0;
  $$0 = $5;
  return ($$0|0);
 }
 $6 = HEAP32[$a>>2]|0;
 $7 = HEAP32[$b>>2]|0;
 $i$0$in = $1;
 while(1) {
  $i$0 = (($i$0$in) + -1)|0;
  $8 = ($i$0$in|0)>(0);
  if (!($8)) {
   $$0 = 0;
   label = 7;
   break;
  }
  $9 = (($6) + ($i$0<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($i$0<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)==($12|0);
  if ($13) {
   $i$0$in = $i$0;
  } else {
   $$lcssa = $10;$$lcssa6 = $12;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $14 = ($$lcssa>>>0)>($$lcssa6>>>0);
 $15 = $14 ? 1 : -1;
 $$0 = $15;
 return ($$0|0);
}
function _fips_bn_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$$ = 0, $$0 = 0, $$3 = 0, $$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$in = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 $1 = ($b|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $2 = $1&1;
  $$ = $2 ^ 1;
  $$$ = $0 ? $$ : -1;
  return ($$$|0);
 }
 $3 = ((($a)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($b)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 $8 = ($4|0)==(0);
 $$3 = $8 ? 1 : -1;
 if (!($7)) {
  $$0 = $$3;
  return ($$0|0);
 }
 $$4 = $8 ? -1 : 1;
 $9 = ((($a)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($b)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)>($12|0);
 if ($13) {
  $$0 = $$3;
  return ($$0|0);
 }
 $14 = ($10|0)<($12|0);
 if ($14) {
  $$0 = $$4;
  return ($$0|0);
 }
 $i$0$in = $10;
 while(1) {
  $i$0 = (($i$0$in) + -1)|0;
  $15 = ($i$0$in|0)>(0);
  if (!($15)) {
   $$0 = 0;
   label = 10;
   break;
  }
  $16 = HEAP32[$a>>2]|0;
  $17 = (($16) + ($i$0<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$b>>2]|0;
  $20 = (($19) + ($i$0<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18>>>0)>($21>>>0);
  if ($22) {
   $$0 = $$3;
   label = 10;
   break;
  }
  $23 = ($18>>>0)<($21>>>0);
  if ($23) {
   $$0 = $$4;
   label = 10;
   break;
  } else {
   $i$0$in = $i$0;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FIPS_bn_set_bit($a,$n) {
 $a = $a|0;
 $n = $n|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($n|0) / 32)&-1;
 $2 = ((($a)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>($1|0);
 if (!($4)) {
  $5 = (($1) + 1)|0;
  $6 = ((($a)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($1|0)>=($7|0);
  $9 = ($7|0)<($5|0);
  $or$cond = $8 & $9;
  if ($or$cond) {
   $10 = (_bn_expand_internal($a,$5)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$0 = 0;
    return ($$0|0);
   }
   $12 = HEAP32[$a>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    _FIPS_free($12);
   }
   HEAP32[$a>>2] = $10;
   HEAP32[$6>>2] = $5;
   $$pre = HEAP32[$2>>2]|0;
   $15 = $$pre;
  } else {
   $15 = $3;
  }
  $14 = ($1|0)<($15|0);
  if (!($14)) {
   $16 = HEAP32[$a>>2]|0;
   $scevgep = (($16) + ($15<<2)|0);
   $17 = (($5) - ($15))|0;
   $18 = $17 << 2;
   _memset(($scevgep|0),0,($18|0))|0;
  }
  HEAP32[$2>>2] = $5;
 }
 $19 = $n & 31;
 $20 = 1 << $19;
 $21 = HEAP32[$a>>2]|0;
 $22 = (($21) + ($1<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 | $20;
 HEAP32[$22>>2] = $24;
 $$0 = 1;
 return ($$0|0);
}
function _FIPS_bn_is_bit_set($a,$n) {
 $a = $a|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($n|0) / 32)&-1;
 $2 = ((($a)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>($1|0);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[$a>>2]|0;
 $6 = (($5) + ($1<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $n & 31;
 $9 = $7 >>> $8;
 $10 = $9 & 1;
 $$0 = $10;
 return ($$0|0);
}
function _fips_bn_set_negative($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($b|0)==(0);
 if (!($0)) {
  $1 = ((($a)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = ((($a)) + 12|0);
   HEAP32[$4>>2] = 1;
   return;
  }
 }
 $5 = ((($a)) + 12|0);
 HEAP32[$5>>2] = 0;
 return;
}
function _fips_bn_cmp_words($a,$b,$n) {
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + -1)|0;
 $1 = (($a) + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($b) + ($0<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $6 = ($2>>>0)>($4>>>0);
  $7 = $6 ? 1 : -1;
  $$0 = $7;
  return ($$0|0);
 }
 $8 = (($n) + -2)|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $i$02 = $8;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $12 = (($a) + ($i$02<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($b) + ($i$02<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13|0)==($15|0);
  if (!($16)) {
   $$lcssa = $13;$$lcssa16 = $15;
   break;
  }
  $10 = (($i$02) + -1)|0;
  $11 = ($i$02|0)>(0);
  if ($11) {
   $i$02 = $10;
  } else {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $17 = ($$lcssa>>>0)>($$lcssa16>>>0);
 $18 = $17 ? 1 : -1;
 $$0 = $18;
 return ($$0|0);
}
function _fips_bn_cmp_part_words($a,$b,$cl,$dl) {
 $a = $a|0;
 $b = $b|0;
 $cl = $cl|0;
 $dl = $dl|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa30 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$i = 0, $i$09 = 0, $i$18 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($cl) + -1)|0;
 $1 = ($dl|0)<(0);
 L1: do {
  if ($1) {
   $i$09 = $dl;
   while(1) {
    $4 = (($0) - ($i$09))|0;
    $5 = (($b) + ($4<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0);
    if (!($7)) {
     $$0 = -1;
     break;
    }
    $2 = (($i$09) + 1)|0;
    $3 = ($i$09|0)<(-1);
    if ($3) {
     $i$09 = $2;
    } else {
     break L1;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $8 = ($dl|0)>(0);
 L7: do {
  if ($8) {
   $i$18 = $dl;
   while(1) {
    $11 = (($i$18) + ($0))|0;
    $12 = (($a) + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $$0 = 1;
     break;
    }
    $9 = (($i$18) + -1)|0;
    $10 = ($i$18|0)>(1);
    if ($10) {
     $i$18 = $9;
    } else {
     break L7;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $15 = (($a) + ($0<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($b) + ($0<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)==($18|0);
 if (!($19)) {
  $20 = ($16>>>0)>($18>>>0);
  $21 = $20 ? 1 : -1;
  $$0 = $21;
  return ($$0|0);
 }
 $22 = (($cl) + -2)|0;
 $23 = ($22|0)>(-1);
 if ($23) {
  $i$02$i = $22;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $26 = (($a) + ($i$02$i<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($b) + ($i$02$i<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($27|0)==($29|0);
  if (!($30)) {
   $$lcssa = $27;$$lcssa30 = $29;
   break;
  }
  $24 = (($i$02$i) + -1)|0;
  $25 = ($i$02$i|0)>(0);
  if ($25) {
   $i$02$i = $24;
  } else {
   $$0 = 0;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 $31 = ($$lcssa>>>0)>($$lcssa30>>>0);
 $32 = $31 ? 1 : -1;
 $$0 = $32;
 return ($$0|0);
}
function _bn_expand_internal($b,$words) {
 $b = $b|0;
 $words = $words|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $A$0$lcssa = 0, $A$03 = 0, $B$0$lcssa = 0, $B$02 = 0, $i$01 = 0, $scevgep = 0, $scevgep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($words|0)>(16777215);
 if ($0) {
  _FIPS_put_error(3,120,114,7206,313);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($b)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _FIPS_put_error(3,120,105,7206,318);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = $words << 2;
 $6 = (_FIPS_malloc($5,7206,321)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _FIPS_put_error(3,120,65,7206,324);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = HEAP32[$b>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = $6;
  return ($$0|0);
 }
 $10 = ((($b)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >> 2;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = (($12) + -2)|0;
  $15 = $14 << 2;
  $16 = (($15) + 8)|0;
  $17 = $14 << 4;
  $18 = (($17) + 32)|0;
  $scevgep6 = (($6) + ($18)|0);
  $A$03 = $6;$B$02 = $8;$i$01 = $12;
  while(1) {
   $19 = HEAP32[$B$02>>2]|0;
   $20 = ((($B$02)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($B$02)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($B$02)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$A$03>>2] = $19;
   $26 = ((($A$03)) + 4|0);
   HEAP32[$26>>2] = $21;
   $27 = ((($A$03)) + 8|0);
   HEAP32[$27>>2] = $23;
   $28 = ((($A$03)) + 12|0);
   HEAP32[$28>>2] = $25;
   $29 = (($i$01) + -1)|0;
   $30 = ((($A$03)) + 16|0);
   $31 = ((($B$02)) + 16|0);
   $32 = ($i$01|0)>(1);
   if ($32) {
    $A$03 = $30;$B$02 = $31;$i$01 = $29;
   } else {
    break;
   }
  }
  $scevgep = (($8) + ($16<<2)|0);
  $$pre = HEAP32[$10>>2]|0;
  $34 = $$pre;$A$0$lcssa = $scevgep6;$B$0$lcssa = $scevgep;
 } else {
  $34 = $11;$A$0$lcssa = $6;$B$0$lcssa = $8;
 }
 $33 = $34 & 3;
 switch ($33|0) {
 case 3:  {
  $35 = ((($B$0$lcssa)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($A$0$lcssa)) + 8|0);
  HEAP32[$37>>2] = $36;
  label = 14;
  break;
 }
 case 2:  {
  label = 14;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  $$0 = $6;
  return ($$0|0);
 }
 }
 if ((label|0) == 14) {
  $38 = ((($B$0$lcssa)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($A$0$lcssa)) + 4|0);
  HEAP32[$40>>2] = $39;
 }
 $41 = HEAP32[$B$0$lcssa>>2]|0;
 HEAP32[$A$0$lcssa>>2] = $41;
 $$0 = $6;
 return ($$0|0);
}
function _fips_bn_nnmod($r,$m,$d,$ctx) {
 $r = $r|0;
 $m = $m|0;
 $d = $d|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fips_bn_div(0,$r,$m,$d,$ctx)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($r)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ((($d)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7 ? 24 : 25;
 $9 = (FUNCTION_TABLE_iiii[$8 & 31]($r,$r,$d)|0);
 $$0 = $9;
 return ($$0|0);
}
function _fips_bn_mod_add_quick($r,$a,$b,$m) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $m = $m|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fips_bn_uadd($r,$a,$b)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_fips_bn_ucmp($r,$m)|0);
  $3 = ($2|0)>(-1);
  if ($3) {
   $4 = (_fips_bn_usub($r,$r,$m)|0);
   $$0 = $4;
  } else {
   $$0 = 1;
  }
 }
 return ($$0|0);
}
function _fips_bn_mod_mul($r,$a,$b,$m,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $m = $m|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fips_bn_ctx_start($ctx);
 $0 = (_fips_bn_ctx_get($ctx)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $ret$0 = 0;
  } else {
   $2 = ($a|0)==($b|0);
   if ($2) {
    $3 = (_fips_bn_sqr($0,$a,$ctx)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $ret$0 = 0;
     break;
    }
   } else {
    $5 = (_fips_bn_mul($0,$a,$b,$ctx)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $ret$0 = 0;
     break;
    }
   }
   $7 = (_fips_bn_div(0,$r,$0,$m,$ctx)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$0$i = 1;
   } else {
    $9 = ((($r)) + 12|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     $$0$i = 0;
    } else {
     $12 = ((($m)) + 12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)!=(0);
     $15 = $14 ? 24 : 25;
     $16 = (FUNCTION_TABLE_iiii[$15 & 31]($r,$r,$m)|0);
     $phitmp = ($16|0)==(0);
     $$0$i = $phitmp;
    }
   }
   $17 = $$0$i&1;
   $$ = $17 ^ 1;
   $ret$0 = $$;
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 return ($ret$0|0);
}
function _fips_bn_mod_mul_montgomery($r,$a,$b,$mont,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $mont = $mont|0;
 $ctx = $ctx|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fips_bn_ctx_start($ctx);
 $0 = (_fips_bn_ctx_get($ctx)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $ret$0 = 0;
  } else {
   $2 = ($a|0)==($b|0);
   if ($2) {
    $3 = (_fips_bn_sqr($0,$a,$ctx)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $ret$0 = 0;
     break;
    }
   } else {
    $5 = (_fips_bn_mul($0,$a,$b,$ctx)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $ret$0 = 0;
     break;
    }
   }
   $7 = (_BN_from_montgomery_word($r,$0,$mont)|0);
   $not$ = ($7|0)!=(0);
   $$ = $not$&1;
   $ret$0 = $$;
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 return ($ret$0|0);
}
function _fips_bn_from_montgomery($ret,$a,$mont,$ctx) {
 $ret = $ret|0;
 $a = $a|0;
 $mont = $mont|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $retn$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fips_bn_ctx_start($ctx);
 $0 = (_fips_bn_ctx_get($ctx)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $retn$0 = 0;
 } else {
  $2 = (_fips_bn_copy($0,$a)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $retn$0 = 0;
  } else {
   $4 = (_BN_from_montgomery_word($ret,$0,$mont)|0);
   $retn$0 = $4;
  }
 }
 _fips_bn_ctx_end($ctx);
 return ($retn$0|0);
}
function _fips_bn_mont_ctx_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_malloc(76,7215,327)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 _fips_bn_init($2);
 $3 = ((($0)) + 24|0);
 _fips_bn_init($3);
 $4 = ((($0)) + 44|0);
 _fips_bn_init($4);
 $5 = ((($0)) + 68|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 64|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 72|0);
 HEAP32[$7>>2] = 1;
 $$0 = $0;
 return ($$0|0);
}
function _fips_bn_mont_ctx_free($mont) {
 $mont = $mont|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mont|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mont)) + 4|0);
 _FIPS_bn_free($1);
 $2 = ((($mont)) + 24|0);
 _FIPS_bn_free($2);
 $3 = ((($mont)) + 44|0);
 _FIPS_bn_free($3);
 $4 = ((($mont)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 }
 _FIPS_free($mont);
 return;
}
function _fips_bn_mont_ctx_set($mont,$mod,$ctx) {
 $mont = $mont|0;
 $mod = $mod|0;
 $ctx = $ctx|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $not$ = 0, $ret$0 = 0, $tmod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tmod = sp + 8|0;
 $buf = sp;
 _fips_bn_ctx_start($ctx);
 $0 = (_fips_bn_ctx_get($ctx)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $ret$0 = 0;
  } else {
   $2 = ((($mont)) + 4|0);
   $3 = ((($mont)) + 24|0);
   $4 = (_fips_bn_copy($3,$mod)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    $ret$0 = 0;
   } else {
    $6 = ((($mont)) + 36|0);
    HEAP32[$6>>2] = 0;
    _fips_bn_init($tmod);
    HEAP32[$tmod>>2] = $buf;
    $7 = ((($tmod)) + 8|0);
    HEAP32[$7>>2] = 2;
    $8 = ((($tmod)) + 12|0);
    HEAP32[$8>>2] = 0;
    $9 = (_FIPS_bn_num_bits($mod)|0);
    $10 = (($9) + 31)|0;
    $11 = (($10|0) / 32)&-1;
    $12 = $11 << 5;
    HEAP32[$mont>>2] = $12;
    (_fips_bn_set_word($2,0)|0);
    $13 = (_FIPS_bn_set_bit($2,32)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $ret$0 = 0;
    } else {
     $15 = HEAP32[$mod>>2]|0;
     $16 = HEAP32[$15>>2]|0;
     HEAP32[$buf>>2] = $16;
     $17 = ((($buf)) + 4|0);
     HEAP32[$17>>2] = 0;
     $18 = ($16|0)!=(0);
     $19 = $18&1;
     $20 = ((($tmod)) + 4|0);
     HEAP32[$20>>2] = $19;
     $21 = (_fips_bn_mod_inverse($0,$2,$tmod,$ctx)|0);
     $22 = ($21|0)==(0|0);
     if ($22) {
      $ret$0 = 0;
     } else {
      $23 = (_fips_bn_lshift($0,$0,32)|0);
      $24 = ($23|0)==(0);
      if ($24) {
       $ret$0 = 0;
      } else {
       $25 = ((($0)) + 4|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(0);
       if ($27) {
        $30 = (_fips_bn_set_word($0,-1)|0);
        $31 = ($30|0)==(0);
        if ($31) {
         $ret$0 = 0;
         break;
        }
       } else {
        $28 = (_fips_bn_sub_word($0,1)|0);
        $29 = ($28|0)==(0);
        if ($29) {
         $ret$0 = 0;
         break;
        }
       }
       $32 = (_fips_bn_div($0,0,$0,$tmod,$ctx)|0);
       $33 = ($32|0)==(0);
       if ($33) {
        $ret$0 = 0;
       } else {
        $34 = HEAP32[$25>>2]|0;
        $35 = ($34|0)>(0);
        if ($35) {
         $36 = HEAP32[$0>>2]|0;
         $37 = HEAP32[$36>>2]|0;
         $39 = $37;
        } else {
         $39 = 0;
        }
        $38 = ((($mont)) + 64|0);
        HEAP32[$38>>2] = $39;
        $40 = ((($mont)) + 68|0);
        HEAP32[$40>>2] = 0;
        (_fips_bn_set_word($2,0)|0);
        $41 = HEAP32[$mont>>2]|0;
        $42 = $41 << 1;
        $43 = (_FIPS_bn_set_bit($2,$42)|0);
        $44 = ($43|0)==(0);
        if ($44) {
         $ret$0 = 0;
        } else {
         $45 = (_fips_bn_div(0,$2,$2,$3,$ctx)|0);
         $not$ = ($45|0)!=(0);
         $$ = $not$&1;
         $ret$0 = $$;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 STACKTOP = sp;return ($ret$0|0);
}
function _fips_bn_mont_ctx_set_locked($pmont,$lock,$mod,$ctx) {
 $pmont = $pmont|0;
 $lock = $lock|0;
 $mod = $mod|0;
 $ctx = $ctx|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _FIPS_lock(5,$lock,7215,486);
 $0 = HEAP32[$pmont>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _FIPS_lock(6,$lock,7215,508);
  $18 = $0;
  return ($18|0);
 }
 _FIPS_lock(6,$lock,7215,489);
 _FIPS_lock(9,$lock,7215,490);
 $2 = HEAP32[$pmont>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $4 = (_FIPS_malloc(76,7215,327)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0$i1 = 0;
   } else {
    HEAP32[$4>>2] = 0;
    $6 = ((($4)) + 4|0);
    _fips_bn_init($6);
    $7 = ((($4)) + 24|0);
    _fips_bn_init($7);
    $8 = ((($4)) + 44|0);
    _fips_bn_init($8);
    $9 = ((($4)) + 68|0);
    HEAP32[$9>>2] = 0;
    $10 = ((($4)) + 64|0);
    HEAP32[$10>>2] = 0;
    $11 = ((($4)) + 72|0);
    HEAP32[$11>>2] = 1;
    $12 = (_fips_bn_mont_ctx_set($4,$mod,$ctx)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     _FIPS_bn_free($6);
     _FIPS_bn_free($7);
     _FIPS_bn_free($8);
     $14 = HEAP32[$11>>2]|0;
     $15 = $14 & 1;
     $16 = ($15|0)==(0);
     if ($16) {
      break;
     }
     _FIPS_free($4);
     break;
    } else {
     $$0$i1 = $4;
    }
   }
   HEAP32[$pmont>>2] = $$0$i1;
  }
 } while(0);
 $17 = HEAP32[$pmont>>2]|0;
 _FIPS_lock(10,$lock,7215,506);
 $18 = $17;
 return ($18|0);
}
function _BN_from_montgomery_word($ret,$r,$mont) {
 $ret = $ret|0;
 $r = $r|0;
 $mont = $mont|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $carry$0$lcssa = 0;
 var $carry$025 = 0, $exitcond = 0, $exitcond41 = 0, $ftl$010 = 0, $ftl1$06 = 0, $i$124 = 0, $i$2$lcssa = 0, $i$221 = 0, $i$318 = 0, $rp$026 = 0, $scevgep = 0, $tmp_top$0$lcssa = 0, $tmp_top$011 = 0, $tmp_top2$0$lcssa = 0, $tmp_top2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($mont)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($ret)) + 4|0);
  HEAP32[$3>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 $4 = $1 << 1;
 $5 = ((($r)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)>($6|0);
 if ($7) {
  $8 = (_fips_bn_expand2($r,$4)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $10 = ((($mont)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($r)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 ^ $11;
 HEAP32[$12>>2] = $14;
 $15 = ((($mont)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$r>>2]|0;
 $18 = ((($r)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<($4|0);
 if ($20) {
  $scevgep = (($17) + ($19<<2)|0);
  $21 = $1 << 3;
  $22 = $19 << 2;
  $23 = (($21) - ($22))|0;
  _memset(($scevgep|0),0,($23|0))|0;
 }
 HEAP32[$18>>2] = $4;
 $24 = ((($mont)) + 64|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($1|0)>(0);
 if ($26) {
  $carry$025 = 0;$i$124 = 0;$rp$026 = $17;
  while(1) {
   $27 = HEAP32[$rp$026>>2]|0;
   $28 = Math_imul($27, $25)|0;
   $29 = (_fips_bn_mul_add_words($rp$026,$16,$1,$28)|0);
   $30 = (($29) + ($carry$025))|0;
   $31 = (($rp$026) + ($1<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + ($32))|0;
   $34 = ($30|0)!=(0);
   $35 = $34&1;
   $36 = $35 | $carry$025;
   $37 = ($33>>>0)<=($32>>>0);
   $38 = $37&1;
   $39 = $36 & $38;
   HEAP32[$31>>2] = $33;
   $40 = (($i$124) + 1)|0;
   $41 = ((($rp$026)) + 4|0);
   $exitcond41 = ($40|0)==($1|0);
   if ($exitcond41) {
    $carry$0$lcssa = $39;
    break;
   } else {
    $carry$025 = $39;$i$124 = $40;$rp$026 = $41;
   }
  }
 } else {
  $carry$0$lcssa = 0;
 }
 $42 = ((($ret)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($1|0)>($43|0);
 if ($44) {
  $45 = (_fips_bn_expand2($ret,$1)|0);
  $46 = ($45|0)==(0|0);
  if ($46) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $47 = ((($ret)) + 4|0);
 HEAP32[$47>>2] = $1;
 $48 = HEAP32[$12>>2]|0;
 $49 = ((($ret)) + 12|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAP32[$ret>>2]|0;
 $51 = HEAP32[$r>>2]|0;
 $52 = (($51) + ($1<<2)|0);
 $53 = (_fips_bn_sub_words($50,$52,$16,$1)|0);
 $54 = (($carry$0$lcssa) - ($53))|0;
 $55 = $50;
 $56 = $54 ^ -1;
 $57 = $55 & $56;
 $58 = $52;
 $59 = $58 & $54;
 $60 = $57 | $59;
 $61 = $60;
 $62 = (($1) + -4)|0;
 $63 = ($1|0)>(4);
 if ($63) {
  $i$221 = 0;
  while(1) {
   $67 = (($61) + ($i$221<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $i$221 | 1;
   $70 = (($61) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $i$221 | 2;
   $73 = (($61) + ($72<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum1 = (($i$221) + ($1))|0;
   $75 = (($51) + ($$sum1<<2)|0);
   HEAP32[$75>>2] = 0;
   $76 = $i$221 | 3;
   $77 = (($61) + ($76<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $$sum2 = (($69) + ($1))|0;
   $79 = (($51) + ($$sum2<<2)|0);
   HEAP32[$79>>2] = 0;
   $80 = (($50) + ($i$221<<2)|0);
   HEAP32[$80>>2] = $68;
   $$sum3 = (($72) + ($1))|0;
   $81 = (($51) + ($$sum3<<2)|0);
   HEAP32[$81>>2] = 0;
   $82 = (($50) + ($69<<2)|0);
   HEAP32[$82>>2] = $71;
   $$sum4 = (($76) + ($1))|0;
   $83 = (($51) + ($$sum4<<2)|0);
   HEAP32[$83>>2] = 0;
   $84 = (($50) + ($72<<2)|0);
   HEAP32[$84>>2] = $74;
   $85 = (($50) + ($76<<2)|0);
   HEAP32[$85>>2] = $78;
   $86 = (($i$221) + 4)|0;
   $87 = ($86|0)<($62|0);
   if ($87) {
    $i$221 = $86;
   } else {
    break;
   }
  }
  $64 = (($1) + -1)|0;
  $65 = $64 & -4;
  $i$2$lcssa = $65;
 } else {
  $i$2$lcssa = 0;
 }
 $66 = ($i$2$lcssa|0)<($1|0);
 if ($66) {
  $i$318 = $i$2$lcssa;
  while(1) {
   $88 = (($61) + ($i$318<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($50) + ($i$318<<2)|0);
   HEAP32[$90>>2] = $89;
   $$sum = (($i$318) + ($1))|0;
   $91 = (($51) + ($$sum<<2)|0);
   HEAP32[$91>>2] = 0;
   $92 = (($i$318) + 1)|0;
   $exitcond = ($92|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $i$318 = $92;
   }
  }
 }
 $93 = HEAP32[$18>>2]|0;
 $94 = ($93|0)>(0);
 if ($94) {
  $95 = HEAP32[$r>>2]|0;
  $96 = (($93) + -1)|0;
  $97 = (($95) + ($96<<2)|0);
  $ftl$010 = $97;$tmp_top$011 = $93;
  while(1) {
   $98 = HEAP32[$ftl$010>>2]|0;
   $99 = ($98|0)==(0);
   if (!($99)) {
    $tmp_top$0$lcssa = $tmp_top$011;
    break;
   }
   $100 = ((($ftl$010)) + -4|0);
   $101 = (($tmp_top$011) + -1)|0;
   $102 = ($tmp_top$011|0)>(1);
   if ($102) {
    $ftl$010 = $100;$tmp_top$011 = $101;
   } else {
    $tmp_top$0$lcssa = $101;
    break;
   }
  }
  HEAP32[$18>>2] = $tmp_top$0$lcssa;
 }
 $103 = HEAP32[$47>>2]|0;
 $104 = ($103|0)>(0);
 if (!($104)) {
  $$0 = 1;
  return ($$0|0);
 }
 $105 = HEAP32[$ret>>2]|0;
 $106 = (($103) + -1)|0;
 $107 = (($105) + ($106<<2)|0);
 $ftl1$06 = $107;$tmp_top2$07 = $103;
 while(1) {
  $108 = HEAP32[$ftl1$06>>2]|0;
  $109 = ($108|0)==(0);
  if (!($109)) {
   $tmp_top2$0$lcssa = $tmp_top2$07;
   break;
  }
  $110 = ((($ftl1$06)) + -4|0);
  $111 = (($tmp_top2$07) + -1)|0;
  $112 = ($tmp_top2$07|0)>(1);
  if ($112) {
   $ftl1$06 = $110;$tmp_top2$07 = $111;
  } else {
   $tmp_top2$0$lcssa = $111;
   break;
  }
 }
 HEAP32[$47>>2] = $tmp_top2$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _fips_bn_sub_part_words($r,$a,$b,$cl,$dl) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $cl = $cl|0;
 $dl = $dl|0;
 var $$01 = 0, $$0227 = 0, $$028 = 0, $$03$lcssa$ph$ph = 0, $$0344 = 0, $$0626 = 0, $$145 = 0, $$17$lcssa$ph$ph = 0, $$1743 = 0, $$2$ph$ph = 0, $$2537 = 0, $$3936 = 0, $$738 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0;
 var $c$0$ = 0, $c$0$$ = 0, $c$0$$$ = 0, $c$0$$$$ = 0, $c$0$25 = 0, $c$0$29 = 0, $c$5$ = 0, $c$5$$ = 0, $c$5$$$ = 0, $c$5$$$$ = 0, $c$546 = 0, $sum = 0, $sum59 = 0, $sum60 = 0, $sum61 = 0, $sum62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fips_bn_sub_words($r,$a,$b,$cl)|0);
 $1 = ($dl|0)==(0);
 if ($1) {
  $$01 = $0;
  return ($$01|0);
 }
 $2 = (($r) + ($cl<<2)|0);
 $3 = (($b) + ($cl<<2)|0);
 $4 = ($dl|0)<(0);
 if ($4) {
  $5 = HEAP32[$3>>2]|0;
  $sum = (($5) + ($0))|0;
  $6 = (0 - ($sum))|0;
  HEAP32[$2>>2] = $6;
  $7 = ($5|0)==(0);
  $c$0$25 = $7 ? $0 : 1;
  $8 = ($dl|0)>(-2);
  if ($8) {
   $$01 = $c$0$25;
   return ($$01|0);
  } else {
   $$0227 = $3;$$028 = $dl;$$0626 = $2;$c$0$29 = $c$0$25;
  }
  while(1) {
   $9 = ((($$0227)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $sum59 = (($10) + ($c$0$29))|0;
   $11 = (0 - ($sum59))|0;
   $12 = ((($$0626)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = ($10|0)==(0);
   $c$0$$ = $13 ? $c$0$29 : 1;
   $14 = (($$028) + 2)|0;
   $15 = ($14|0)>(-1);
   if ($15) {
    $$01 = $c$0$$;
    label = 19;
    break;
   }
   $16 = ((($$0227)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $sum60 = (($17) + ($c$0$$))|0;
   $18 = (0 - ($sum60))|0;
   $19 = ((($$0626)) + 8|0);
   HEAP32[$19>>2] = $18;
   $20 = ($17|0)==(0);
   $c$0$$$ = $20 ? $c$0$$ : 1;
   $21 = (($$028) + 3)|0;
   $22 = ($21|0)>(-1);
   if ($22) {
    $$01 = $c$0$$$;
    label = 19;
    break;
   }
   $23 = ((($$0227)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $sum61 = (($24) + ($c$0$$$))|0;
   $25 = (0 - ($sum61))|0;
   $26 = ((($$0626)) + 12|0);
   HEAP32[$26>>2] = $25;
   $27 = ($24|0)==(0);
   $c$0$$$$ = $27 ? $c$0$$$ : 1;
   $28 = (($$028) + 4)|0;
   $29 = ($28|0)>(-1);
   if ($29) {
    $$01 = $c$0$$$$;
    label = 19;
    break;
   }
   $30 = ((($$0227)) + 16|0);
   $31 = ((($$0626)) + 16|0);
   $32 = HEAP32[$30>>2]|0;
   $sum62 = (($32) + ($c$0$$$$))|0;
   $33 = (0 - ($sum62))|0;
   HEAP32[$31>>2] = $33;
   $34 = ($32|0)==(0);
   $c$0$ = $34 ? $c$0$$$$ : 1;
   $35 = ($28|0)>(-2);
   if ($35) {
    $$01 = $c$0$;
    label = 19;
    break;
   } else {
    $$0227 = $30;$$028 = $28;$$0626 = $31;$c$0$29 = $c$0$;
   }
  }
  if ((label|0) == 19) {
   return ($$01|0);
  }
 }
 $36 = (($a) + ($cl<<2)|0);
 $37 = ($0|0)==(0);
 L19: do {
  if ($37) {
   $$03$lcssa$ph$ph = $36;$$17$lcssa$ph$ph = $2;$$2$ph$ph = $dl;
  } else {
   $$0344 = $36;$$145 = $dl;$$1743 = $2;$c$546 = $0;
   while(1) {
    $38 = HEAP32[$$0344>>2]|0;
    $39 = (($38) - ($c$546))|0;
    HEAP32[$$1743>>2] = $39;
    $40 = ($38|0)==(0);
    $c$5$ = $40 ? $c$546 : 0;
    $41 = ($$145|0)<(2);
    if ($41) {
     $$01 = $c$5$;
     label = 19;
     break;
    }
    $42 = ((($$0344)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) - ($c$5$))|0;
    $45 = ((($$1743)) + 4|0);
    HEAP32[$45>>2] = $44;
    $46 = ($43|0)==(0);
    $c$5$$ = $46 ? $c$5$ : 0;
    $47 = (($$145) + -2)|0;
    $48 = ($47|0)<(1);
    if ($48) {
     $$01 = $c$5$$;
     label = 19;
     break;
    }
    $49 = ((($$0344)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) - ($c$5$$))|0;
    $52 = ((($$1743)) + 8|0);
    HEAP32[$52>>2] = $51;
    $53 = ($50|0)==(0);
    $c$5$$$ = $53 ? $c$5$$ : 0;
    $54 = (($$145) + -3)|0;
    $55 = ($54|0)<(1);
    if ($55) {
     $$01 = $c$5$$$;
     label = 19;
     break;
    }
    $56 = ((($$0344)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) - ($c$5$$$))|0;
    $59 = ((($$1743)) + 12|0);
    HEAP32[$59>>2] = $58;
    $60 = ($57|0)==(0);
    $c$5$$$$ = $60 ? $c$5$$$ : 0;
    $61 = (($$145) + -4)|0;
    $62 = ($61|0)<(1);
    if ($62) {
     $$01 = $c$5$$$$;
     label = 19;
     break;
    }
    $63 = ((($$0344)) + 16|0);
    $64 = ((($$1743)) + 16|0);
    $65 = ($c$5$$$$|0)==(0);
    if ($65) {
     $$03$lcssa$ph$ph = $63;$$17$lcssa$ph$ph = $64;$$2$ph$ph = $61;
     break L19;
    } else {
     $$0344 = $63;$$145 = $61;$$1743 = $64;$c$546 = $c$5$$$;
    }
   }
   if ((label|0) == 19) {
    return ($$01|0);
   }
  }
 } while(0);
 $66 = HEAP32[$$03$lcssa$ph$ph>>2]|0;
 HEAP32[$$17$lcssa$ph$ph>>2] = $66;
 $67 = ($$2$ph$ph|0)<(2);
 if ($67) {
  $$01 = 0;
  return ($$01|0);
 } else {
  $$2537 = $$03$lcssa$ph$ph;$$3936 = $$17$lcssa$ph$ph;$$738 = $$2$ph$ph;
 }
 while(1) {
  $68 = ((($$2537)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($$3936)) + 4|0);
  HEAP32[$70>>2] = $69;
  $71 = (($$738) + -2)|0;
  $72 = ($71|0)<(1);
  if ($72) {
   $$01 = 0;
   label = 19;
   break;
  }
  $73 = ((($$2537)) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($$3936)) + 8|0);
  HEAP32[$75>>2] = $74;
  $76 = (($$738) + -3)|0;
  $77 = ($76|0)<(1);
  if ($77) {
   $$01 = 0;
   label = 19;
   break;
  }
  $78 = ((($$2537)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($$3936)) + 12|0);
  HEAP32[$80>>2] = $79;
  $81 = (($$738) + -4)|0;
  $82 = ($81|0)<(1);
  if ($82) {
   $$01 = 0;
   label = 19;
   break;
  }
  $83 = ((($$2537)) + 16|0);
  $84 = ((($$3936)) + 16|0);
  $85 = HEAP32[$83>>2]|0;
  HEAP32[$84>>2] = $85;
  $86 = ($81|0)<(2);
  if ($86) {
   $$01 = 0;
   label = 19;
   break;
  } else {
   $$2537 = $83;$$3936 = $84;$$738 = $81;
  }
 }
 if ((label|0) == 19) {
  return ($$01|0);
 }
 return (0)|0;
}
function _fips_bn_mul_recursive($r,$a,$b,$n2,$dna,$dnb,$t) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $n2 = $n2|0;
 $dna = $dna|0;
 $dnb = $dnb|0;
 $t = $t|0;
 var $$pre$phi12Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $c1$0 = 0, $neg$0 = 0, $p$0 = 0, $zero$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($n2|0) / 2)&-1;
 $1 = (($0) + ($dna))|0;
 $2 = (($0) + ($dnb))|0;
 $3 = ($n2|0)==(8);
 $4 = $dnb | $dna;
 $5 = ($4|0)==(0);
 $6 = $3 & $5;
 if ($6) {
  _fips_bn_mul_comba8($r,$a,$b);
  return;
 }
 $7 = ($n2|0)<(16);
 if ($7) {
  $8 = (($dna) + ($n2))|0;
  $9 = (($dnb) + ($n2))|0;
  _fips_bn_mul_normal($r,$a,$8,$b,$9);
  $10 = (($dnb) + ($dna))|0;
  $11 = ($10|0)<(0);
  if (!($11)) {
   return;
  }
  $12 = $n2 << 1;
  $13 = (($12) + ($dna))|0;
  $14 = (($13) + ($dnb))|0;
  $15 = (($r) + ($14<<2)|0);
  $16 = (0 - ($10))|0;
  $17 = $16 << 2;
  _memset(($15|0),0,($17|0))|0;
  return;
 }
 $18 = (($a) + ($0<<2)|0);
 $19 = (0 - ($dna))|0;
 $20 = (_fips_bn_cmp_part_words($a,$18,$1,$19)|0);
 $21 = (($b) + ($0<<2)|0);
 $22 = (_fips_bn_cmp_part_words($21,$b,$2,$dnb)|0);
 $23 = ($20*3)|0;
 $24 = (($23) + ($22))|0;
 switch ($24|0) {
 case -4:  {
  (_fips_bn_sub_part_words($t,$18,$a,$1,$dna)|0);
  $25 = (($t) + ($0<<2)|0);
  $26 = (0 - ($dnb))|0;
  (_fips_bn_sub_part_words($25,$b,$21,$2,$26)|0);
  $neg$0 = 0;$zero$0 = 0;
  break;
 }
 case -3:  {
  $neg$0 = 0;$zero$0 = 1;
  break;
 }
 case -2:  {
  (_fips_bn_sub_part_words($t,$18,$a,$1,$dna)|0);
  $27 = (($t) + ($0<<2)|0);
  (_fips_bn_sub_part_words($27,$21,$b,$2,$dnb)|0);
  $neg$0 = 1;$zero$0 = 0;
  break;
 }
 case 1: case 0: case -1:  {
  $neg$0 = 0;$zero$0 = 1;
  break;
 }
 case 2:  {
  (_fips_bn_sub_part_words($t,$a,$18,$1,$19)|0);
  $28 = (($t) + ($0<<2)|0);
  $29 = (0 - ($dnb))|0;
  (_fips_bn_sub_part_words($28,$b,$21,$2,$29)|0);
  $neg$0 = 1;$zero$0 = 0;
  break;
 }
 case 3:  {
  $neg$0 = 0;$zero$0 = 1;
  break;
 }
 case 4:  {
  (_fips_bn_sub_part_words($t,$a,$18,$1,$19)|0);
  $30 = (($t) + ($0<<2)|0);
  (_fips_bn_sub_part_words($30,$21,$b,$2,$dnb)|0);
  $neg$0 = 0;$zero$0 = 0;
  break;
 }
 default: {
  $neg$0 = 0;$zero$0 = 0;
 }
 }
 $31 = $n2 & -2;
 $32 = ($31|0)==(8);
 $33 = $32 & $5;
 do {
  if ($33) {
   $34 = ($zero$0|0)==(0);
   $35 = (($t) + ($n2<<2)|0);
   if ($34) {
    $36 = (($t) + ($0<<2)|0);
    _fips_bn_mul_comba4($35,$t,$36);
   } else {
    ;HEAP32[$35>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;HEAP32[$35+12>>2]=0|0;HEAP32[$35+16>>2]=0|0;HEAP32[$35+20>>2]=0|0;HEAP32[$35+24>>2]=0|0;HEAP32[$35+28>>2]=0|0;
   }
   _fips_bn_mul_comba4($r,$a,$b);
   $37 = (($r) + ($n2<<2)|0);
   _fips_bn_mul_comba4($37,$18,$21);
   $$pre$phi12Z2D = $35;$$pre$phiZ2D = $37;
  } else {
   $38 = ($31|0)==(16);
   $39 = $38 & $5;
   if ($39) {
    $40 = ($zero$0|0)==(0);
    $41 = (($t) + ($n2<<2)|0);
    if ($40) {
     $42 = (($t) + ($0<<2)|0);
     _fips_bn_mul_comba8($41,$t,$42);
    } else {
     dest=$41; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    }
    _fips_bn_mul_comba8($r,$a,$b);
    $43 = (($r) + ($n2<<2)|0);
    _fips_bn_mul_comba8($43,$18,$21);
    $$pre$phi12Z2D = $41;$$pre$phiZ2D = $43;
    break;
   } else {
    $44 = $n2 << 1;
    $45 = (($t) + ($44<<2)|0);
    $46 = ($zero$0|0)==(0);
    $47 = (($t) + ($n2<<2)|0);
    if ($46) {
     $48 = (($t) + ($0<<2)|0);
     _fips_bn_mul_recursive($47,$t,$48,$0,0,0,$45);
    } else {
     $49 = $n2 << 2;
     _memset(($47|0),0,($49|0))|0;
    }
    _fips_bn_mul_recursive($r,$a,$b,$0,0,0,$45);
    $50 = (($r) + ($n2<<2)|0);
    _fips_bn_mul_recursive($50,$18,$21,$0,$dna,$dnb,$45);
    $$pre$phi12Z2D = $47;$$pre$phiZ2D = $50;
    break;
   }
  }
 } while(0);
 $51 = (_fips_bn_add_words($t,$r,$$pre$phiZ2D,$n2)|0);
 $52 = ($neg$0|0)==(0);
 if ($52) {
  $55 = (_fips_bn_add_words($$pre$phi12Z2D,$$pre$phi12Z2D,$t,$n2)|0);
  $56 = (($55) + ($51))|0;
  $c1$0 = $56;
 } else {
  $53 = (_fips_bn_sub_words($$pre$phi12Z2D,$t,$$pre$phi12Z2D,$n2)|0);
  $54 = (($51) - ($53))|0;
  $c1$0 = $54;
 }
 $57 = (($r) + ($0<<2)|0);
 $58 = (_fips_bn_add_words($57,$57,$$pre$phi12Z2D,$n2)|0);
 $59 = (($58) + ($c1$0))|0;
 $60 = ($59|0)==(0);
 if ($60) {
  return;
 }
 $61 = (($0) + ($n2))|0;
 $62 = (($r) + ($61<<2)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($59))|0;
 HEAP32[$62>>2] = $64;
 $65 = ($64>>>0)<($59>>>0);
 if ($65) {
  $p$0 = $62;
 } else {
  return;
 }
 while(1) {
  $66 = ((($p$0)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 1)|0;
  HEAP32[$66>>2] = $68;
  $69 = ($68|0)==(0);
  if ($69) {
   $p$0 = $66;
  } else {
   break;
  }
 }
 return;
}
function _fips_bn_mul_normal($r,$a,$na,$b,$nb) {
 $r = $r|0;
 $a = $a|0;
 $na = $na|0;
 $b = $b|0;
 $nb = $nb|0;
 var $$09 = 0, $$146 = 0, $$17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$b = 0, $b$a = 0, $na$nb = 0, $nb$na = 0;
 var $rr$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($na|0)<($nb|0);
 $nb$na = $0 ? $nb : $na;
 $a$b = $0 ? $a : $b;
 $na$nb = $0 ? $na : $nb;
 $b$a = $0 ? $b : $a;
 $1 = (($r) + ($nb$na<<2)|0);
 $2 = ($na$nb|0)<(1);
 if ($2) {
  (_fips_bn_mul_words($r,$b$a,$nb$na,0)|0);
  return;
 }
 $3 = HEAP32[$a$b>>2]|0;
 $4 = (_fips_bn_mul_words($r,$b$a,$nb$na,$3)|0);
 HEAP32[$1>>2] = $4;
 $5 = ($na$nb|0)<(2);
 if ($5) {
  return;
 } else {
  $$09 = $r;$$146 = $a$b;$$17 = $na$nb;$rr$08 = $1;
 }
 while(1) {
  $6 = ((($$09)) + 4|0);
  $7 = ((($$146)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_fips_bn_mul_add_words($6,$b$a,$nb$na,$8)|0);
  $10 = ((($rr$08)) + 4|0);
  HEAP32[$10>>2] = $9;
  $11 = (($$17) + -2)|0;
  $12 = ($11|0)<(1);
  if ($12) {
   label = 8;
   break;
  }
  $13 = ((($$09)) + 8|0);
  $14 = ((($$146)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_fips_bn_mul_add_words($13,$b$a,$nb$na,$15)|0);
  $17 = ((($rr$08)) + 8|0);
  HEAP32[$17>>2] = $16;
  $18 = (($$17) + -3)|0;
  $19 = ($18|0)<(1);
  if ($19) {
   label = 8;
   break;
  }
  $20 = ((($$09)) + 12|0);
  $21 = ((($$146)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_fips_bn_mul_add_words($20,$b$a,$nb$na,$22)|0);
  $24 = ((($rr$08)) + 12|0);
  HEAP32[$24>>2] = $23;
  $25 = (($$17) + -4)|0;
  $26 = ($25|0)<(1);
  if ($26) {
   label = 8;
   break;
  }
  $27 = ((($$09)) + 16|0);
  $28 = ((($$146)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_fips_bn_mul_add_words($27,$b$a,$nb$na,$29)|0);
  $31 = ((($rr$08)) + 16|0);
  HEAP32[$31>>2] = $30;
  $32 = ($25|0)<(2);
  if ($32) {
   label = 8;
   break;
  } else {
   $$09 = $27;$$146 = $28;$$17 = $25;$rr$08 = $31;
  }
 }
 if ((label|0) == 8) {
  return;
 }
}
function _fips_bn_mul_part_recursive($r,$a,$b,$n,$tna,$tnb,$t) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 $tna = $tna|0;
 $tnb = $tnb|0;
 $t = $t|0;
 var $$lcssa = 0, $$lcssa11 = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $c1$0 = 0, $i$0 = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $p$0 = 0, $tna$tnb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 1;
 $1 = ($n|0)<(8);
 if ($1) {
  $2 = (($tna) + ($n))|0;
  $3 = (($tnb) + ($n))|0;
  _fips_bn_mul_normal($r,$a,$2,$b,$3);
  return;
 }
 $4 = (($a) + ($n<<2)|0);
 $5 = (($n) - ($tna))|0;
 $6 = (_fips_bn_cmp_part_words($a,$4,$tna,$5)|0);
 $7 = (($b) + ($n<<2)|0);
 $8 = (($tnb) - ($n))|0;
 $9 = (_fips_bn_cmp_part_words($7,$b,$tnb,$8)|0);
 $10 = ($6*3)|0;
 $11 = (($10) + ($9))|0;
 switch ($11|0) {
 case -4:  {
  $12 = (($tna) - ($n))|0;
  (_fips_bn_sub_part_words($t,$4,$a,$tna,$12)|0);
  $13 = (($t) + ($n<<2)|0);
  $14 = (($n) - ($tnb))|0;
  (_fips_bn_sub_part_words($13,$b,$7,$tnb,$14)|0);
  $neg$0 = 0;
  break;
 }
 case -2: case -3:  {
  $15 = (($tna) - ($n))|0;
  (_fips_bn_sub_part_words($t,$4,$a,$tna,$15)|0);
  $16 = (($t) + ($n<<2)|0);
  (_fips_bn_sub_part_words($16,$7,$b,$tnb,$8)|0);
  $neg$0 = 1;
  break;
 }
 case 2: case 1: case 0: case -1:  {
  (_fips_bn_sub_part_words($t,$a,$4,$tna,$5)|0);
  $17 = (($t) + ($n<<2)|0);
  $18 = (($n) - ($tnb))|0;
  (_fips_bn_sub_part_words($17,$b,$7,$tnb,$18)|0);
  $neg$0 = 1;
  break;
 }
 case 4: case 3:  {
  (_fips_bn_sub_part_words($t,$a,$4,$tna,$5)|0);
  $19 = (($t) + ($n<<2)|0);
  (_fips_bn_sub_part_words($19,$7,$b,$tnb,$8)|0);
  $neg$0 = 0;
  break;
 }
 default: {
  $neg$0 = 0;
 }
 }
 $20 = ($n|0)==(8);
 do {
  if ($20) {
   $21 = (($t) + ($0<<2)|0);
   $22 = ((($t)) + 32|0);
   _fips_bn_mul_comba8($21,$t,$22);
   _fips_bn_mul_comba8($r,$a,$b);
   $23 = (($r) + ($0<<2)|0);
   _fips_bn_mul_normal($23,$4,$tna,$7,$tnb);
   $24 = (($0) + ($tna))|0;
   $25 = (($24) + ($tnb))|0;
   $26 = (($r) + ($25<<2)|0);
   $27 = (($0) - ($tna))|0;
   $28 = (($27) - ($tnb))|0;
   $29 = $28 << 2;
   _memset(($26|0),0,($29|0))|0;
   $$pre$phi7Z2D = $21;$$pre$phiZ2D = $23;
  } else {
   $30 = $n << 2;
   $31 = (($t) + ($30<<2)|0);
   $32 = (($t) + ($0<<2)|0);
   $33 = (($t) + ($n<<2)|0);
   _fips_bn_mul_recursive($32,$t,$33,$n,0,0,$31);
   _fips_bn_mul_recursive($r,$a,$b,$n,0,0,$31);
   $34 = (($n|0) / 2)&-1;
   $35 = ($tna|0)>($tnb|0);
   $tna$tnb = $35 ? $tna : $tnb;
   $36 = ($tna$tnb|0)==($34|0);
   if ($36) {
    $37 = (($r) + ($0<<2)|0);
    $38 = (($tna) - ($34))|0;
    $39 = (($tnb) - ($34))|0;
    _fips_bn_mul_recursive($37,$4,$7,$34,$38,$39,$31);
    $40 = $34 << 1;
    $41 = (($40) + ($0))|0;
    $42 = (($r) + ($41<<2)|0);
    $43 = (($0) - ($40))|0;
    $44 = $43 << 2;
    _memset(($42|0),0,($44|0))|0;
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $37;
    break;
   }
   $45 = ($tna$tnb|0)>($34|0);
   $46 = (($r) + ($0<<2)|0);
   if ($45) {
    $47 = (($tna) - ($34))|0;
    $48 = (($tnb) - ($34))|0;
    _fips_bn_mul_part_recursive($46,$4,$7,$34,$47,$48,$31);
    $49 = (($0) + ($tna))|0;
    $50 = (($49) + ($tnb))|0;
    $51 = (($r) + ($50<<2)|0);
    $52 = (($0) - ($tna))|0;
    $53 = (($52) - ($tnb))|0;
    $54 = $53 << 2;
    _memset(($51|0),0,($54|0))|0;
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $46;
    break;
   }
   $55 = $n << 3;
   _memset(($46|0),0,($55|0))|0;
   $56 = ($tna|0)<(16);
   $57 = ($tnb|0)<(16);
   $or$cond = $56 & $57;
   if ($or$cond) {
    _fips_bn_mul_normal($46,$4,$tna,$7,$tnb);
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $46;
    break;
   } else {
    $i$0 = $34;
   }
   while(1) {
    $58 = (($i$0|0) / 2)&-1;
    $59 = ($58|0)<($tna|0);
    $60 = ($58|0)<($tnb|0);
    $or$cond2 = $59 | $60;
    if ($or$cond2) {
     $$lcssa = $58;
     label = 17;
     break;
    }
    $63 = ($58|0)==($tna|0);
    $64 = ($58|0)==($tnb|0);
    $or$cond3 = $63 | $64;
    if ($or$cond3) {
     $$lcssa11 = $58;
     label = 19;
     break;
    } else {
     $i$0 = $58;
    }
   }
   if ((label|0) == 17) {
    $61 = (($tna) - ($$lcssa))|0;
    $62 = (($tnb) - ($$lcssa))|0;
    _fips_bn_mul_part_recursive($46,$4,$7,$$lcssa,$61,$62,$31);
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $46;
    break;
   }
   else if ((label|0) == 19) {
    $65 = (($tna) - ($$lcssa11))|0;
    $66 = (($tnb) - ($$lcssa11))|0;
    _fips_bn_mul_recursive($46,$4,$7,$$lcssa11,$65,$66,$31);
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $46;
    break;
   }
  }
 } while(0);
 $67 = (_fips_bn_add_words($t,$r,$$pre$phiZ2D,$0)|0);
 $68 = ($neg$0|0)==(0);
 if ($68) {
  $71 = (_fips_bn_add_words($$pre$phi7Z2D,$$pre$phi7Z2D,$t,$0)|0);
  $72 = (($71) + ($67))|0;
  $c1$0 = $72;
 } else {
  $69 = (_fips_bn_sub_words($$pre$phi7Z2D,$t,$$pre$phi7Z2D,$0)|0);
  $70 = (($67) - ($69))|0;
  $c1$0 = $70;
 }
 $73 = (($r) + ($n<<2)|0);
 $74 = (_fips_bn_add_words($73,$73,$$pre$phi7Z2D,$0)|0);
 $75 = (($74) + ($c1$0))|0;
 $76 = ($75|0)==(0);
 if ($76) {
  return;
 }
 $77 = ($n*3)|0;
 $78 = (($r) + ($77<<2)|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + ($75))|0;
 HEAP32[$78>>2] = $80;
 $81 = ($80>>>0)<($75>>>0);
 if ($81) {
  $p$0 = $78;
 } else {
  return;
 }
 while(1) {
  $82 = ((($p$0)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[$82>>2] = $84;
  $85 = ($84|0)==(0);
  if ($85) {
   $p$0 = $82;
  } else {
   break;
  }
 }
 return;
}
function _fips_bn_mul($r,$a,$b,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$off = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $ftl$018 = 0, $j$1 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond7 = 0, $or$cond8 = 0, $ret$0 = 0, $rr$0 = 0, $tmp_top$0$lcssa = 0, $tmp_top$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(0);
 $5 = ($3|0)==(0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  (_fips_bn_set_word($r,0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $6 = (($3) + ($1))|0;
 _fips_bn_ctx_start($ctx);
 $7 = ($r|0)==($a|0);
 $8 = ($r|0)==($b|0);
 $or$cond8 = $7 | $8;
 if ($or$cond8) {
  $9 = (_fips_bn_ctx_get($ctx)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $ret$0 = 0;
  } else {
   $rr$0 = $9;
   label = 5;
  }
 } else {
  $rr$0 = $r;
  label = 5;
 }
 L7: do {
  if ((label|0) == 5) {
   $11 = ((($a)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($b)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 ^ $12;
   $16 = ((($rr$0)) + 12|0);
   HEAP32[$16>>2] = $15;
   $17 = (($1) - ($3))|0;
   $18 = ($1|0)==($3|0);
   $19 = ($1|0)==(8);
   $or$cond7 = $19 & $18;
   do {
    if ($or$cond7) {
     $20 = ((($rr$0)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)>(15);
     if (!($22)) {
      $23 = (_fips_bn_expand2($rr$0,16)|0);
      $24 = ($23|0)==(0|0);
      if ($24) {
       $ret$0 = 0;
       break L7;
      }
     }
     $25 = ((($rr$0)) + 4|0);
     HEAP32[$25>>2] = 16;
     $26 = HEAP32[$rr$0>>2]|0;
     $27 = HEAP32[$a>>2]|0;
     $28 = HEAP32[$b>>2]|0;
     _fips_bn_mul_comba8($26,$27,$28);
     $$pre$phiZ2D = $25;
    } else {
     $29 = ($1|0)>(15);
     $30 = ($3|0)>(15);
     $or$cond3 = $29 & $30;
     $$off = (($17) + 1)|0;
     $31 = ($$off>>>0)<(3);
     $or$cond10 = $or$cond3 & $31;
     if (!($or$cond10)) {
      $77 = ((($rr$0)) + 8|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($6|0)>($78|0);
      if ($79) {
       $80 = (_fips_bn_expand2($rr$0,$6)|0);
       $81 = ($80|0)==(0|0);
       if ($81) {
        $ret$0 = 0;
        break L7;
       }
      }
      $82 = ((($rr$0)) + 4|0);
      HEAP32[$82>>2] = $6;
      $83 = HEAP32[$rr$0>>2]|0;
      $84 = HEAP32[$a>>2]|0;
      $85 = HEAP32[$b>>2]|0;
      _fips_bn_mul_normal($83,$84,$1,$85,$3);
      $$pre$phiZ2D = $82;
      break;
     }
     $32 = ($17|0)>(-1);
     if ($32) {
      $33 = (_FIPS_bn_num_bits_word($1)|0);
      $j$1 = $33;
     } else {
      $34 = ($17|0)==(-1);
      if ($34) {
       $35 = (_FIPS_bn_num_bits_word($3)|0);
       $j$1 = $35;
      } else {
       $j$1 = 0;
      }
     }
     $36 = (($j$1) + -1)|0;
     $37 = 1 << $36;
     $38 = (_fips_bn_ctx_get($ctx)|0);
     $39 = ($38|0)==(0|0);
     if ($39) {
      $ret$0 = 0;
      break L7;
     }
     $40 = ($1|0)>($37|0);
     $41 = ($3|0)>($37|0);
     $or$cond11 = $40 | $41;
     if ($or$cond11) {
      $42 = $37 << 3;
      $43 = ((($38)) + 8|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($42|0)>($44|0);
      if ($45) {
       $46 = (_fips_bn_expand2($38,$42)|0);
       $47 = ($46|0)==(0|0);
       if ($47) {
        $ret$0 = 0;
        break L7;
       }
      }
      $48 = ((($rr$0)) + 8|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($42|0)>($49|0);
      if ($50) {
       $51 = (_fips_bn_expand2($rr$0,$42)|0);
       $52 = ($51|0)==(0|0);
       if ($52) {
        $ret$0 = 0;
        break L7;
       }
      }
      $53 = HEAP32[$rr$0>>2]|0;
      $54 = HEAP32[$a>>2]|0;
      $55 = HEAP32[$b>>2]|0;
      $56 = (($1) - ($37))|0;
      $57 = (($3) - ($37))|0;
      $58 = HEAP32[$38>>2]|0;
      _fips_bn_mul_part_recursive($53,$54,$55,$37,$56,$57,$58);
     } else {
      $59 = $37 << 2;
      $60 = ((($38)) + 8|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($59|0)>($61|0);
      if ($62) {
       $63 = (_fips_bn_expand2($38,$59)|0);
       $64 = ($63|0)==(0|0);
       if ($64) {
        $ret$0 = 0;
        break L7;
       }
      }
      $65 = ((($rr$0)) + 8|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($59|0)>($66|0);
      if ($67) {
       $68 = (_fips_bn_expand2($rr$0,$59)|0);
       $69 = ($68|0)==(0|0);
       if ($69) {
        $ret$0 = 0;
        break L7;
       }
      }
      $70 = HEAP32[$rr$0>>2]|0;
      $71 = HEAP32[$a>>2]|0;
      $72 = HEAP32[$b>>2]|0;
      $73 = (($1) - ($37))|0;
      $74 = (($3) - ($37))|0;
      $75 = HEAP32[$38>>2]|0;
      _fips_bn_mul_recursive($70,$71,$72,$37,$73,$74,$75);
     }
     $76 = ((($rr$0)) + 4|0);
     HEAP32[$76>>2] = $6;
     $$pre$phiZ2D = $76;
    }
   } while(0);
   $86 = HEAP32[$$pre$phiZ2D>>2]|0;
   $87 = ($86|0)>(0);
   if ($87) {
    $88 = HEAP32[$rr$0>>2]|0;
    $89 = (($86) + -1)|0;
    $90 = (($88) + ($89<<2)|0);
    $ftl$018 = $90;$tmp_top$019 = $86;
    while(1) {
     $91 = HEAP32[$ftl$018>>2]|0;
     $92 = ($91|0)==(0);
     if (!($92)) {
      $tmp_top$0$lcssa = $tmp_top$019;
      break;
     }
     $93 = ((($ftl$018)) + -4|0);
     $94 = (($tmp_top$019) + -1)|0;
     $95 = ($tmp_top$019|0)>(1);
     if ($95) {
      $ftl$018 = $93;$tmp_top$019 = $94;
     } else {
      $tmp_top$0$lcssa = $94;
      break;
     }
    }
    HEAP32[$$pre$phiZ2D>>2] = $tmp_top$0$lcssa;
   }
   $96 = ($rr$0|0)==($r|0);
   if ($96) {
    $ret$0 = 1;
   } else {
    (_fips_bn_copy($r,$rr$0)|0);
    $ret$0 = 1;
   }
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 $$0 = $ret$0;
 return ($$0|0);
}
function _fips_bn_gencb_call($cb,$a,$b) {
 $cb = $cb|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cb|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = HEAP32[$cb>>2]|0;
   switch ($1|0) {
   case 1:  {
    break;
   }
   case 2:  {
    $7 = ((($cb)) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (FUNCTION_TABLE_iiii[$8 & 31]($a,$b,$cb)|0);
    $$0 = $9;
    break L1;
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $2 = ((($cb)) + 8|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 1;
   } else {
    $5 = ((($cb)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    FUNCTION_TABLE_viii[$3 & 31]($a,$b,$6);
    $$0 = 1;
   }
  }
 } while(0);
 return ($$0|0);
}
function _FIPS_bn_generate_prime_ex($ret,$bits,$safe,$add,$rem,$cb) {
 $ret = $ret|0;
 $bits = $bits|0;
 $safe = $safe|0;
 $add = $add|0;
 $rem = $rem|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$0 = 0, $delta$0$i = 0, $delta$0$i$lcssa = 0, $exitcond$i = 0, $found$015 = 0, $found$017 = 0, $i$01$i = 0, $i$01$i3 = 0, $i$027 = 0, $i$04$i = 0, $i$15$i = 0, $mods$i = 0, $not$$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4096|0;
 $mods$i = sp;
 $0 = ($bits|0)>(1299);
 if ($0) {
  $112 = 2;
 } else {
  $1 = ($bits|0)>(849);
  if ($1) {
   $112 = 3;
  } else {
   $2 = ($bits|0)>(649);
   if ($2) {
    $112 = 4;
   } else {
    $3 = ($bits|0)>(549);
    if ($3) {
     $112 = 5;
    } else {
     $4 = ($bits|0)>(449);
     if ($4) {
      $112 = 6;
     } else {
      $5 = ($bits|0)>(399);
      if ($5) {
       $112 = 7;
      } else {
       $6 = ($bits|0)>(349);
       if ($6) {
        $112 = 8;
       } else {
        $7 = ($bits|0)>(299);
        if ($7) {
         $112 = 9;
        } else {
         $8 = ($bits|0)>(249);
         if ($8) {
          $112 = 12;
         } else {
          $9 = ($bits|0)>(199);
          if ($9) {
           $112 = 15;
          } else {
           $10 = ($bits|0)>(149);
           $11 = $10 ? 18 : 27;
           $112 = $11;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $12 = (_fips_bn_ctx_new()|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $found$015 = 0;
  STACKTOP = sp;return ($found$015|0);
 }
 _fips_bn_ctx_start($12);
 $14 = (_fips_bn_ctx_get($12)|0);
 $15 = ($14|0)==(0|0);
 L16: do {
  if ($15) {
   $found$017 = 0;
  } else {
   $16 = ($add|0)==(0|0);
   $17 = ($cb|0)==(0|0);
   $18 = ($safe|0)==(0);
   $19 = ((($cb)) + 8|0);
   $20 = ((($cb)) + 4|0);
   $21 = ((($cb)) + 8|0);
   $22 = ($rem|0)==(0|0);
   $23 = (($bits) + -1)|0;
   $c1$0 = 0;
   L18: while(1) {
    do {
     if ($16) {
      $24 = (_FIPS_bn_rand($ret,$bits,1,1)|0);
      $25 = ($24|0)==(0);
      if ($25) {
       label = 23;
       break L18;
      } else {
       $i$04$i = 1;
      }
      L22: while(1) {
       $28 = (2752 + ($i$04$i<<1)|0);
       $29 = HEAP16[$28>>1]|0;
       $30 = $29&65535;
       $31 = (_fips_bn_mod_word($ret,$30)|0);
       $32 = $31&65535;
       $33 = (($mods$i) + ($i$04$i<<1)|0);
       HEAP16[$33>>1] = $32;
       $34 = (($i$04$i) + 1)|0;
       $exitcond$i = ($34|0)==(2048);
       if ($exitcond$i) {
        $delta$0$i = 0;
       } else {
        $i$04$i = $34;
        continue;
       }
       while(1) {
        $i$15$i = 1;
        while(1) {
         $37 = (($mods$i) + ($i$15$i<<1)|0);
         $38 = HEAP16[$37>>1]|0;
         $39 = $38&65535;
         $40 = (($39) + ($delta$0$i))|0;
         $41 = (2752 + ($i$15$i<<1)|0);
         $42 = HEAP16[$41>>1]|0;
         $43 = $42&65535;
         $44 = (($40>>>0) % ($43>>>0))&-1;
         $45 = ($44>>>0)<(2);
         $36 = (($i$15$i) + 1)|0;
         if ($45) {
          break;
         }
         $35 = ($36|0)<(2048);
         if ($35) {
          $i$15$i = $36;
         } else {
          $delta$0$i$lcssa = $delta$0$i;
          break L22;
         }
        }
        $46 = (($delta$0$i) + 2)|0;
        $47 = ($46>>>0)>(4294949432);
        if ($47) {
         break;
        } else {
         $delta$0$i = $46;
        }
       }
       $26 = (_FIPS_bn_rand($ret,$bits,1,1)|0);
       $27 = ($26|0)==(0);
       if ($27) {
        label = 23;
        break L18;
       } else {
        $i$04$i = 1;
       }
      }
      $48 = (_fips_bn_add_word($ret,$delta$0$i$lcssa)|0);
      $not$$i = ($48|0)==(0);
      if ($not$$i) {
       $found$017 = 0;
       break L16;
      }
     } else {
      _fips_bn_ctx_start($12);
      $49 = (_fips_bn_ctx_get($12)|0);
      if ($18) {
       $84 = ($49|0)==(0|0);
       if ($84) {
        label = 55;
        break L18;
       }
       $85 = (_FIPS_bn_rand($ret,$bits,0,1)|0);
       $86 = ($85|0)==(0);
       if ($86) {
        label = 55;
        break L18;
       }
       $87 = (_fips_bn_div(0,$49,$ret,$add,$12)|0);
       $88 = ($87|0)==(0);
       if ($88) {
        label = 55;
        break L18;
       }
       $89 = (_fips_bn_sub($ret,$ret,$49)|0);
       $90 = ($89|0)==(0);
       if ($90) {
        label = 55;
        break L18;
       }
       if ($22) {
        $91 = (_fips_bn_add_word($ret,1)|0);
        $92 = ($91|0)==(0);
        if ($92) {
         label = 55;
         break L18;
        } else {
         $i$01$i3 = 1;
        }
       } else {
        $93 = (_fips_bn_add($ret,$ret,$rem)|0);
        $94 = ($93|0)==(0);
        if ($94) {
         label = 55;
         break L18;
        } else {
         $i$01$i3 = 1;
        }
       }
       while(1) {
        $95 = (2752 + ($i$01$i3<<1)|0);
        $96 = HEAP16[$95>>1]|0;
        $97 = $96&65535;
        $98 = (_fips_bn_mod_word($ret,$97)|0);
        $99 = ($98>>>0)<(2);
        if ($99) {
         $100 = (_fips_bn_add($ret,$ret,$add)|0);
         $101 = ($100|0)==(0);
         if ($101) {
          label = 55;
          break L18;
         } else {
          $i$01$i3 = 1;
          continue;
         }
        } else {
         $102 = (($i$01$i3) + 1)|0;
         $103 = ($102|0)<(2048);
         if ($103) {
          $i$01$i3 = $102;
          continue;
         } else {
          break;
         }
        }
       }
       _fips_bn_ctx_end($12);
       break;
      }
      $50 = (_fips_bn_ctx_get($12)|0);
      $51 = (_fips_bn_ctx_get($12)|0);
      $52 = ($51|0)==(0|0);
      if ($52) {
       label = 43;
       break L18;
      }
      $53 = (_fips_bn_rshift1($51,$add)|0);
      $54 = ($53|0)==(0);
      if ($54) {
       label = 43;
       break L18;
      }
      $55 = (_FIPS_bn_rand($50,$23,0,1)|0);
      $56 = ($55|0)==(0);
      if ($56) {
       label = 43;
       break L18;
      }
      $57 = (_fips_bn_div(0,$49,$50,$51,$12)|0);
      $58 = ($57|0)==(0);
      if ($58) {
       label = 43;
       break L18;
      }
      $59 = (_fips_bn_sub($50,$50,$49)|0);
      $60 = ($59|0)==(0);
      if ($60) {
       label = 43;
       break L18;
      }
      if ($22) {
       $61 = (_fips_bn_add_word($50,1)|0);
       $62 = ($61|0)==(0);
       if ($62) {
        label = 43;
        break L18;
       }
      } else {
       $63 = (_fips_bn_rshift1($49,$rem)|0);
       $64 = ($63|0)==(0);
       if ($64) {
        label = 43;
        break L18;
       }
       $65 = (_fips_bn_add($50,$50,$49)|0);
       $66 = ($65|0)==(0);
       if ($66) {
        label = 43;
        break L18;
       }
      }
      $67 = (_fips_bn_lshift1($ret,$50)|0);
      $68 = ($67|0)==(0);
      if ($68) {
       label = 43;
       break L18;
      }
      $69 = (_fips_bn_add_word($ret,1)|0);
      $70 = ($69|0)==(0);
      if ($70) {
       label = 43;
       break L18;
      } else {
       $i$01$i = 1;
      }
      while(1) {
       $71 = (2752 + ($i$01$i<<1)|0);
       $72 = HEAP16[$71>>1]|0;
       $73 = $72&65535;
       $74 = (_fips_bn_mod_word($ret,$73)|0);
       $75 = ($74|0)==(0);
       if (!($75)) {
        $76 = (_fips_bn_mod_word($50,$73)|0);
        $77 = ($76|0)==(0);
        if (!($77)) {
         $82 = (($i$01$i) + 1)|0;
         $83 = ($82|0)<(2048);
         if ($83) {
          $i$01$i = $82;
          continue;
         } else {
          break;
         }
        }
       }
       $78 = (_fips_bn_add($ret,$ret,$add)|0);
       $79 = ($78|0)==(0);
       if ($79) {
        label = 43;
        break L18;
       }
       $80 = (_fips_bn_add($50,$50,$51)|0);
       $81 = ($80|0)==(0);
       if ($81) {
        label = 43;
        break L18;
       } else {
        $i$01$i = 1;
       }
      }
      _fips_bn_ctx_end($12);
     }
    } while(0);
    $104 = (($c1$0) + 1)|0;
    L69: do {
     if (!($17)) {
      $105 = HEAP32[$cb>>2]|0;
      switch ($105|0) {
      case 1:  {
       break;
      }
      case 2:  {
       $109 = HEAP32[$21>>2]|0;
       $110 = (FUNCTION_TABLE_iiii[$109 & 31](0,$c1$0,$cb)|0);
       $111 = ($110|0)==(0);
       if ($111) {
        $found$017 = 0;
        break L16;
       } else {
        break L69;
       }
       break;
      }
      default: {
       $found$017 = 0;
       break L16;
      }
      }
      $106 = HEAP32[$19>>2]|0;
      $107 = ($106|0)==(0|0);
      if (!($107)) {
       $108 = HEAP32[$20>>2]|0;
       FUNCTION_TABLE_viii[$106 & 31](0,$c1$0,$108);
      }
     }
    } while(0);
    if ($18) {
     $113 = (_FIPS_bn_is_prime_fasttest_ex($ret,$112,$12,0,$cb)|0);
     switch ($113|0) {
     case -1:  {
      $found$017 = 0;
      break L16;
      break;
     }
     case 0:  {
      $c1$0 = $104;
      continue L18;
      break;
     }
     default: {
      label = 72;
      break L18;
     }
     }
    }
    $114 = (_fips_bn_rshift1($14,$ret)|0);
    $115 = ($114|0)==(0);
    if ($115) {
     $found$017 = 0;
     break L16;
    } else {
     $i$027 = 0;
    }
    while(1) {
     $116 = (_FIPS_bn_is_prime_fasttest_ex($ret,1,$12,0,$cb)|0);
     switch ($116|0) {
     case -1:  {
      $found$017 = 0;
      break L16;
      break;
     }
     case 0:  {
      $c1$0 = $104;
      continue L18;
      break;
     }
     default: {
     }
     }
     $117 = (_FIPS_bn_is_prime_fasttest_ex($14,1,$12,0,$cb)|0);
     switch ($117|0) {
     case -1:  {
      $found$017 = 0;
      break L16;
      break;
     }
     case 0:  {
      $c1$0 = $104;
      continue L18;
      break;
     }
     default: {
     }
     }
     L83: do {
      if (!($17)) {
       $118 = HEAP32[$cb>>2]|0;
       switch ($118|0) {
       case 1:  {
        break;
       }
       case 2:  {
        $122 = HEAP32[$21>>2]|0;
        $123 = (FUNCTION_TABLE_iiii[$122 & 31](2,$c1$0,$cb)|0);
        $124 = ($123|0)==(0);
        if ($124) {
         $found$017 = 0;
         break L16;
        } else {
         break L83;
        }
        break;
       }
       default: {
        $found$017 = 0;
        break L16;
       }
       }
       $119 = HEAP32[$19>>2]|0;
       $120 = ($119|0)==(0|0);
       if (!($120)) {
        $121 = HEAP32[$20>>2]|0;
        FUNCTION_TABLE_viii[$119 & 31](2,$c1$0,$121);
       }
      }
     } while(0);
     $125 = (($i$027) + 1)|0;
     $126 = ($125|0)<($112|0);
     if ($126) {
      $i$027 = $125;
     } else {
      $found$017 = 1;
      break L16;
     }
    }
   }
   if ((label|0) == 23) {
    $found$017 = 0;
    break;
   }
   else if ((label|0) == 43) {
    _fips_bn_ctx_end($12);
    $found$017 = 0;
    break;
   }
   else if ((label|0) == 55) {
    _fips_bn_ctx_end($12);
    $found$017 = 0;
    break;
   }
   else if ((label|0) == 72) {
    $found$017 = 1;
    break;
   }
  }
 } while(0);
 _fips_bn_ctx_end($12);
 _fips_bn_ctx_free($12);
 $found$015 = $found$017;
 STACKTOP = sp;return ($found$015|0);
}
function _FIPS_bn_is_prime_fasttest_ex($a,$checks,$ctx_passed,$do_trial_division,$cb) {
 $a = $a|0;
 $checks = $checks|0;
 $ctx_passed = $ctx_passed|0;
 $do_trial_division = $do_trial_division|0;
 $cb = $cb|0;
 var $$0 = 0, $$01 = 0, $$01$i = 0, $$01$i$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A$0 = 0, $ctx$0 = 0, $i$031 = 0, $i$121 = 0, $i$121$us = 0, $k$0 = 0, $k$0$lcssa = 0, $mont$0 = 0, $mont$012 = 0, $mont$013 = 0, $or$cond = 0;
 var $ret$0 = 0, $ret$010 = 0, $ret$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fips_bn_value_one()|0);
 $1 = (_fips_bn_cmp($a,$0)|0);
 $2 = ($1|0)<(1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($checks|0)==(0);
 if ($3) {
  $4 = (_FIPS_bn_num_bits($a)|0);
  $5 = ($4|0)>(1299);
  if ($5) {
   $$01 = 2;
  } else {
   $6 = (_FIPS_bn_num_bits($a)|0);
   $7 = ($6|0)>(849);
   if ($7) {
    $$01 = 3;
   } else {
    $8 = (_FIPS_bn_num_bits($a)|0);
    $9 = ($8|0)>(649);
    if ($9) {
     $$01 = 4;
    } else {
     $10 = (_FIPS_bn_num_bits($a)|0);
     $11 = ($10|0)>(549);
     if ($11) {
      $$01 = 5;
     } else {
      $12 = (_FIPS_bn_num_bits($a)|0);
      $13 = ($12|0)>(449);
      if ($13) {
       $$01 = 6;
      } else {
       $14 = (_FIPS_bn_num_bits($a)|0);
       $15 = ($14|0)>(399);
       if ($15) {
        $$01 = 7;
       } else {
        $16 = (_FIPS_bn_num_bits($a)|0);
        $17 = ($16|0)>(349);
        if ($17) {
         $$01 = 8;
        } else {
         $18 = (_FIPS_bn_num_bits($a)|0);
         $19 = ($18|0)>(299);
         if ($19) {
          $$01 = 9;
         } else {
          $20 = (_FIPS_bn_num_bits($a)|0);
          $21 = ($20|0)>(249);
          if ($21) {
           $$01 = 12;
          } else {
           $22 = (_FIPS_bn_num_bits($a)|0);
           $23 = ($22|0)>(199);
           if ($23) {
            $$01 = 15;
           } else {
            $24 = (_FIPS_bn_num_bits($a)|0);
            $25 = ($24|0)>(149);
            $26 = $25 ? 18 : 27;
            $$01 = $26;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } else {
  $$01 = $checks;
 }
 $27 = ((($a)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)>(0);
 do {
  if ($29) {
   $30 = HEAP32[$a>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & 1;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = ($28|0)==(1);
    $35 = ($31|0)==(2);
    $or$cond = $34 & $35;
    if (!($or$cond)) {
     $40 = 0;
     break;
    }
    $36 = ((($a)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0);
    $40 = $38;
    break;
   }
   $41 = ($do_trial_division|0)==(0);
   L23: do {
    if (!($41)) {
     $i$031 = 1;
     while(1) {
      $44 = (2752 + ($i$031<<1)|0);
      $45 = HEAP16[$44>>1]|0;
      $46 = $45&65535;
      $47 = (_fips_bn_mod_word($a,$46)|0);
      $48 = ($47|0)==(0);
      $43 = (($i$031) + 1)|0;
      if ($48) {
       $$0 = 0;
       label = 79;
       break;
      }
      $42 = ($43|0)<(2048);
      if ($42) {
       $i$031 = $43;
      } else {
       break;
      }
     }
     if ((label|0) == 79) {
      return ($$0|0);
     }
     $49 = ($cb|0)==(0|0);
     if (!($49)) {
      $50 = HEAP32[$cb>>2]|0;
      switch ($50|0) {
      case 1:  {
       $51 = ((($cb)) + 8|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(0|0);
       if ($53) {
        break L23;
       }
       $54 = ((($cb)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       FUNCTION_TABLE_viii[$52 & 31](1,-1,$55);
       break L23;
       break;
      }
      case 2:  {
       $56 = ((($cb)) + 8|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (FUNCTION_TABLE_iiii[$57 & 31](1,-1,$cb)|0);
       $59 = ($58|0)==(0);
       if ($59) {
        $$0 = -1;
       } else {
        break L23;
       }
       return ($$0|0);
       break;
      }
      default: {
       $$0 = -1;
       return ($$0|0);
      }
      }
     }
    }
   } while(0);
   $60 = ($ctx_passed|0)==(0|0);
   if ($60) {
    $61 = (_fips_bn_ctx_new()|0);
    $62 = ($61|0)==(0|0);
    if ($62) {
     $$0 = -1;
     return ($$0|0);
    } else {
     $ctx$0 = $61;
    }
   } else {
    $ctx$0 = $ctx_passed;
   }
   _fips_bn_ctx_start($ctx$0);
   $63 = ((($a)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0);
   if ($65) {
    $A$0 = $a;
    label = 32;
   } else {
    $66 = (_fips_bn_ctx_get($ctx$0)|0);
    $67 = ($66|0)==(0|0);
    if ($67) {
     $mont$012 = 0;$ret$010 = -1;
     label = 75;
    } else {
     (_fips_bn_copy($66,$a)|0);
     $68 = ((($66)) + 12|0);
     HEAP32[$68>>2] = 0;
     $A$0 = $66;
     label = 32;
    }
   }
   if ((label|0) == 32) {
    $69 = (_fips_bn_ctx_get($ctx$0)|0);
    $70 = (_fips_bn_ctx_get($ctx$0)|0);
    $71 = (_fips_bn_ctx_get($ctx$0)|0);
    $72 = ($71|0)==(0|0);
    if ($72) {
     $mont$012 = 0;$ret$010 = -1;
     label = 75;
    } else {
     $73 = (_fips_bn_copy($69,$A$0)|0);
     $74 = ($73|0)==(0|0);
     if ($74) {
      $mont$012 = 0;$ret$010 = -1;
      label = 75;
     } else {
      $75 = (_fips_bn_sub_word($69,1)|0);
      $76 = ($75|0)==(0);
      if ($76) {
       $mont$012 = 0;$ret$010 = -1;
       label = 75;
      } else {
       $77 = ((($69)) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==(0);
       if ($79) {
        $mont$012 = 0;$ret$010 = 0;
        label = 75;
       } else {
        $k$0 = 1;
        while(1) {
         $80 = (_FIPS_bn_is_bit_set($69,$k$0)|0);
         $81 = ($80|0)==(0);
         $82 = (($k$0) + 1)|0;
         if ($81) {
          $k$0 = $82;
         } else {
          $k$0$lcssa = $k$0;
          break;
         }
        }
        $83 = (_fips_bn_rshift($70,$69,$k$0$lcssa)|0);
        $84 = ($83|0)==(0);
        L53: do {
         if ($84) {
          $mont$0 = 0;$ret$0 = -1;
         } else {
          $85 = (_fips_bn_mont_ctx_new()|0);
          $86 = ($85|0)==(0|0);
          if ($86) {
           $mont$0 = 0;$ret$0 = -1;
          } else {
           $87 = (_fips_bn_mont_ctx_set($85,$A$0,$ctx$0)|0);
           $88 = ($87|0)==(0);
           if ($88) {
            $mont$0 = $85;$ret$0 = -1;
           } else {
            $89 = ($$01|0)>(0);
            if ($89) {
             $90 = ((($71)) + 4|0);
             $91 = ((($71)) + 12|0);
             $92 = ($cb|0)==(0|0);
             $93 = ((($cb)) + 8|0);
             $94 = ((($cb)) + 4|0);
             $95 = ((($cb)) + 8|0);
             if ($92) {
              $i$121$us = 0;
              while(1) {
               $96 = (_FIPS_bn_pseudo_rand_range($71,$69)|0);
               $97 = ($96|0)==(0);
               if ($97) {
                $mont$0 = $85;$ret$0 = -1;
                break L53;
               }
               $98 = (_fips_bn_add_word($71,1)|0);
               $99 = ($98|0)==(0);
               if ($99) {
                $mont$0 = $85;$ret$0 = -1;
                break L53;
               }
               $100 = (_fips_bn_mod_exp_mont($71,$71,$70,$A$0,$ctx$0,$85)|0);
               $101 = ($100|0)==(0);
               if ($101) {
                $mont$0 = $85;$ret$0 = -1;
                break L53;
               }
               $102 = HEAP32[$90>>2]|0;
               $103 = ($102|0)==(1);
               do {
                if ($103) {
                 $104 = HEAP32[$71>>2]|0;
                 $105 = HEAP32[$104>>2]|0;
                 $106 = ($105|0)==(1);
                 if (!($106)) {
                  label = 48;
                  break;
                 }
                 $107 = HEAP32[$91>>2]|0;
                 $108 = ($107|0)==(0);
                 if (!($108)) {
                  label = 48;
                 }
                } else {
                 label = 48;
                }
               } while(0);
               do {
                if ((label|0) == 48) {
                 label = 0;
                 $109 = (_fips_bn_cmp($71,$69)|0);
                 $110 = ($109|0)==(0);
                 if ($110) {
                  break;
                 } else {
                  $$01$i$us = $k$0$lcssa;
                 }
                 while(1) {
                  $111 = (($$01$i$us) + -1)|0;
                  $112 = ($111|0)==(0);
                  if ($112) {
                   $mont$0 = $85;$ret$0 = 0;
                   break L53;
                  }
                  $113 = (_fips_bn_mod_mul($71,$71,$71,$A$0,$ctx$0)|0);
                  $114 = ($113|0)==(0);
                  if ($114) {
                   $mont$0 = $85;$ret$0 = -1;
                   break L53;
                  }
                  $115 = HEAP32[$90>>2]|0;
                  $116 = ($115|0)==(1);
                  do {
                   if ($116) {
                    $117 = HEAP32[$71>>2]|0;
                    $118 = HEAP32[$117>>2]|0;
                    $119 = ($118|0)==(1);
                    if (!($119)) {
                     break;
                    }
                    $120 = HEAP32[$91>>2]|0;
                    $121 = ($120|0)==(0);
                    if ($121) {
                     $mont$0 = $85;$ret$0 = 0;
                     break L53;
                    }
                   }
                  } while(0);
                  $122 = (_fips_bn_cmp($71,$69)|0);
                  $123 = ($122|0)==(0);
                  if ($123) {
                   break;
                  } else {
                   $$01$i$us = $111;
                  }
                 }
                }
               } while(0);
               $124 = (($i$121$us) + 1)|0;
               $125 = ($124|0)<($$01|0);
               if ($125) {
                $i$121$us = $124;
               } else {
                $mont$0 = $85;$ret$0 = 1;
                break L53;
               }
              }
             } else {
              $i$121 = 0;
             }
             while(1) {
              $126 = (_FIPS_bn_pseudo_rand_range($71,$69)|0);
              $127 = ($126|0)==(0);
              if ($127) {
               $mont$0 = $85;$ret$0 = -1;
               break L53;
              }
              $128 = (_fips_bn_add_word($71,1)|0);
              $129 = ($128|0)==(0);
              if ($129) {
               $mont$0 = $85;$ret$0 = -1;
               break L53;
              }
              $130 = (_fips_bn_mod_exp_mont($71,$71,$70,$A$0,$ctx$0,$85)|0);
              $131 = ($130|0)==(0);
              if ($131) {
               $mont$0 = $85;$ret$0 = -1;
               break L53;
              }
              $132 = HEAP32[$90>>2]|0;
              $133 = ($132|0)==(1);
              do {
               if ($133) {
                $134 = HEAP32[$71>>2]|0;
                $135 = HEAP32[$134>>2]|0;
                $136 = ($135|0)==(1);
                if (!($136)) {
                 label = 62;
                 break;
                }
                $137 = HEAP32[$91>>2]|0;
                $138 = ($137|0)==(0);
                if (!($138)) {
                 label = 62;
                }
               } else {
                label = 62;
               }
              } while(0);
              do {
               if ((label|0) == 62) {
                label = 0;
                $139 = (_fips_bn_cmp($71,$69)|0);
                $140 = ($139|0)==(0);
                if ($140) {
                 break;
                } else {
                 $$01$i = $k$0$lcssa;
                }
                while(1) {
                 $141 = (($$01$i) + -1)|0;
                 $142 = ($141|0)==(0);
                 if ($142) {
                  $mont$0 = $85;$ret$0 = 0;
                  break L53;
                 }
                 $143 = (_fips_bn_mod_mul($71,$71,$71,$A$0,$ctx$0)|0);
                 $144 = ($143|0)==(0);
                 if ($144) {
                  $mont$0 = $85;$ret$0 = -1;
                  break L53;
                 }
                 $145 = HEAP32[$90>>2]|0;
                 $146 = ($145|0)==(1);
                 do {
                  if ($146) {
                   $147 = HEAP32[$71>>2]|0;
                   $148 = HEAP32[$147>>2]|0;
                   $149 = ($148|0)==(1);
                   if (!($149)) {
                    break;
                   }
                   $150 = HEAP32[$91>>2]|0;
                   $151 = ($150|0)==(0);
                   if ($151) {
                    $mont$0 = $85;$ret$0 = 0;
                    break L53;
                   }
                  }
                 } while(0);
                 $152 = (_fips_bn_cmp($71,$69)|0);
                 $153 = ($152|0)==(0);
                 if ($153) {
                  break;
                 } else {
                  $$01$i = $141;
                 }
                }
               }
              } while(0);
              $154 = HEAP32[$cb>>2]|0;
              L97: do {
               switch ($154|0) {
               case 1:  {
                $155 = HEAP32[$93>>2]|0;
                $156 = ($155|0)==(0|0);
                if ($156) {
                 break L97;
                }
                $157 = HEAP32[$94>>2]|0;
                FUNCTION_TABLE_viii[$155 & 31](1,$i$121,$157);
                break;
               }
               case 2:  {
                $158 = HEAP32[$95>>2]|0;
                $159 = (FUNCTION_TABLE_iiii[$158 & 31](1,$i$121,$cb)|0);
                $160 = ($159|0)==(0);
                if ($160) {
                 $mont$0 = $85;$ret$0 = -1;
                 break L53;
                }
                break;
               }
               default: {
                $mont$0 = $85;$ret$0 = -1;
                break L53;
               }
               }
              } while(0);
              $161 = (($i$121) + 1)|0;
              $162 = ($161|0)<($$01|0);
              if ($162) {
               $i$121 = $161;
              } else {
               $mont$0 = $85;$ret$0 = 1;
               break L53;
              }
             }
            } else {
             $mont$0 = $85;$ret$0 = 1;
            }
           }
          }
         }
        } while(0);
        $163 = ($ctx$0|0)==(0|0);
        if ($163) {
         $mont$013 = $mont$0;$ret$011 = $ret$0;
        } else {
         $mont$012 = $mont$0;$ret$010 = $ret$0;
         label = 75;
        }
       }
      }
     }
    }
   }
   if ((label|0) == 75) {
    _fips_bn_ctx_end($ctx$0);
    if ($60) {
     _fips_bn_ctx_free($ctx$0);
     $mont$013 = $mont$012;$ret$011 = $ret$010;
    } else {
     $mont$013 = $mont$012;$ret$011 = $ret$010;
    }
   }
   $164 = ($mont$013|0)==(0|0);
   if ($164) {
    $$0 = $ret$011;
    return ($$0|0);
   }
   _fips_bn_mont_ctx_free($mont$013);
   $$0 = $ret$011;
   return ($$0|0);
  } else {
   $40 = 0;
  }
 } while(0);
 $39 = $40&1;
 $$0 = $39;
 return ($$0|0);
}
function _FIPS_bn_rand($rnd,$bits,$top,$bottom) {
 $rnd = $rnd|0;
 $bits = $bits|0;
 $top = $top|0;
 $bottom = $bottom|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bnrand(0,$rnd,$bits,$top,$bottom)|0);
 return ($0|0);
}
function _FIPS_bn_pseudo_rand($rnd,$bits,$top,$bottom) {
 $rnd = $rnd|0;
 $bits = $bits|0;
 $top = $top|0;
 $bottom = $bottom|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bnrand(1,$rnd,$bits,$top,$bottom)|0);
 return ($0|0);
}
function _FIPS_bn_rand_range($r,$range) {
 $r = $r|0;
 $range = $range|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bn_rand_range(0,$r,$range)|0);
 return ($0|0);
}
function _FIPS_bn_pseudo_rand_range($r,$range) {
 $r = $r|0;
 $range = $range|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bn_rand_range(1,$r,$range)|0);
 return ($0|0);
}
function _bnrand($pseudorand,$rnd,$bits,$top,$bottom) {
 $pseudorand = $pseudorand|0;
 $rnd = $rnd|0;
 $bits = $bits|0;
 $top = $top|0;
 $bottom = $bottom|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $i$05 = 0, $not$ = 0, $or$cond = 0, $or$cond6 = 0, $ret$03 = 0, $tim = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tim = sp;
 $c = sp + 4|0;
 $0 = ($bits|0)==(0);
 if ($0) {
  (_fips_bn_set_word($rnd,0)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($bits) + 7)|0;
 $2 = (($1|0) / 8)&-1;
 $3 = (($bits) + -1)|0;
 $4 = (($3|0) % 8)&-1;
 $5 = (($4) + 1)|0;
 $6 = 255 << $5;
 $7 = (_FIPS_malloc($2,7225,136)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  _FIPS_put_error(3,127,65,7225,139);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_time(($tim|0))|0);
 _FIPS_rand_add($tim,4,+0);
 $9 = ($pseudorand|0)==(0);
 if ($9) {
  $12 = (_FIPS_rand_bytes($7,$2)|0);
  $13 = ($12|0)<(1);
  if ($13) {
   $ret$03 = 0;
  } else {
   label = 16;
  }
 } else {
  $10 = (_FIPS_rand_pseudo_bytes($7,$2)|0);
  $11 = ($10|0)==(-1);
  if ($11) {
   $ret$03 = 0;
  } else {
   $14 = ($pseudorand|0)==(2);
   $15 = ($bits|0)>(0);
   $or$cond6 = $14 & $15;
   if ($or$cond6) {
    $i$05 = 0;
    while(1) {
     (_FIPS_rand_pseudo_bytes($c,1)|0);
     $16 = HEAP8[$c>>0]|0;
     $17 = ($16<<24>>24)<(0);
     $18 = ($i$05|0)>(0);
     $or$cond = $18 & $17;
     do {
      if ($or$cond) {
       $19 = (($i$05) + -1)|0;
       $20 = (($7) + ($19)|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = (($7) + ($i$05)|0);
       HEAP8[$22>>0] = $21;
      } else {
       $23 = ($16&255)<(42);
       if ($23) {
        $24 = (($7) + ($i$05)|0);
        HEAP8[$24>>0] = 0;
        break;
       }
       $25 = ($16&255)<(84);
       if ($25) {
        $26 = (($7) + ($i$05)|0);
        HEAP8[$26>>0] = -1;
       }
      }
     } while(0);
     $27 = (($i$05) + 1)|0;
     $28 = ($27|0)<($2|0);
     if ($28) {
      $i$05 = $27;
     } else {
      label = 16;
      break;
     }
    }
   } else {
    label = 16;
   }
  }
 }
 if ((label|0) == 16) {
  L25: do {
   switch ($top|0) {
   case -1:  {
    $$pre = HEAP8[$7>>0]|0;
    $48 = $$pre;
    break;
   }
   case 0:  {
    $41 = 1 << $4;
    $42 = HEAP8[$7>>0]|0;
    $43 = $42&255;
    $44 = $43 | $41;
    $45 = $44&255;
    HEAP8[$7>>0] = $45;
    $48 = $45;
    break;
   }
   default: {
    $29 = ($4|0)==(0);
    if ($29) {
     HEAP8[$7>>0] = 1;
     $30 = ((($7)) + 1|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $32 | 128;
     $34 = $33&255;
     HEAP8[$30>>0] = $34;
     $48 = 1;
     break L25;
    } else {
     $35 = (($4) + -1)|0;
     $36 = 3 << $35;
     $37 = HEAP8[$7>>0]|0;
     $38 = $37&255;
     $39 = $38 | $36;
     $40 = $39&255;
     HEAP8[$7>>0] = $40;
     $48 = $40;
     break L25;
    }
   }
   }
  } while(0);
  $46 = $6 ^ 255;
  $47 = $48&255;
  $49 = $47 & $46;
  $50 = $49&255;
  HEAP8[$7>>0] = $50;
  $51 = ($bottom|0)==(0);
  if (!($51)) {
   $52 = (($2) + -1)|0;
   $53 = (($7) + ($52)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 | 1;
   $57 = $56&255;
   HEAP8[$53>>0] = $57;
  }
  $58 = (_FIPS_bn_bin2bn($7,$2,$rnd)|0);
  $not$ = ($58|0)!=(0|0);
  $$ = $not$&1;
  $ret$03 = $$;
 }
 _FIPS_openssl_cleanse($7,$2);
 _FIPS_free($7);
 $$0 = $ret$03;
 STACKTOP = sp;return ($$0|0);
}
function _bn_rand_range($pseudo,$r,$range) {
 $pseudo = $pseudo|0;
 $r = $r|0;
 $range = $range|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $count$0 = 0, $count$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pseudo|0)!=(0);
 $1 = $0 ? 21 : 22;
 $2 = ((($range)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($range)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = (_FIPS_bn_num_bits($range)|0);
   $9 = ($8|0)==(1);
   if ($9) {
    (_fips_bn_set_word($r,0)|0);
    $$0 = 1;
    return ($$0|0);
   }
   $10 = (_FIPS_module_mode()|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = (($8) + -2)|0;
    $13 = (_FIPS_bn_is_bit_set($range,$12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = (($8) + -3)|0;
     $16 = (_FIPS_bn_is_bit_set($range,$15)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      $18 = (($8) + 1)|0;
      $count$0 = 100;
      while(1) {
       $19 = (FUNCTION_TABLE_iiiii[$1 & 31]($r,$18,-1,0)|0);
       $20 = ($19|0)==(0);
       if ($20) {
        $$0 = 0;
        label = 22;
        break;
       }
       $21 = (_fips_bn_cmp($r,$range)|0);
       $22 = ($21|0)>(-1);
       if ($22) {
        $23 = (_fips_bn_sub($r,$r,$range)|0);
        $24 = ($23|0)==(0);
        if ($24) {
         $$0 = 0;
         label = 22;
         break;
        }
        $25 = (_fips_bn_cmp($r,$range)|0);
        $26 = ($25|0)>(-1);
        if ($26) {
         $27 = (_fips_bn_sub($r,$r,$range)|0);
         $28 = ($27|0)==(0);
         if ($28) {
          $$0 = 0;
          label = 22;
          break;
         }
        }
       }
       $29 = (($count$0) + -1)|0;
       $30 = ($29|0)==(0);
       if ($30) {
        label = 16;
        break;
       }
       $31 = (_fips_bn_cmp($r,$range)|0);
       $32 = ($31|0)>(-1);
       if ($32) {
        $count$0 = $29;
       } else {
        $$0 = 1;
        label = 22;
        break;
       }
      }
      if ((label|0) == 16) {
       _FIPS_put_error(3,122,113,7225,279);
       $$0 = 0;
       return ($$0|0);
      }
      else if ((label|0) == 22) {
       return ($$0|0);
      }
     } else {
      $count$1 = 100;
     }
    } else {
     $count$1 = 100;
    }
   } else {
    $count$1 = 100;
   }
   while(1) {
    $33 = (FUNCTION_TABLE_iiiii[$1 & 31]($r,$8,-1,0)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     $$0 = 0;
     label = 22;
     break;
    }
    $35 = (($count$1) + -1)|0;
    $36 = ($35|0)==(0);
    if ($36) {
     label = 20;
     break;
    }
    $37 = (_fips_bn_cmp($r,$range)|0);
    $38 = ($37|0)>(-1);
    if ($38) {
     $count$1 = $35;
    } else {
     $$0 = 1;
     label = 22;
     break;
    }
   }
   if ((label|0) == 20) {
    _FIPS_put_error(3,122,113,7225,295);
    $$0 = 0;
    return ($$0|0);
   }
   else if ((label|0) == 22) {
    return ($$0|0);
   }
  }
 }
 _FIPS_put_error(3,122,115,7225,240);
 $$0 = 0;
 return ($$0|0);
}
function _fips_bn_recp_ctx_init($recp) {
 $recp = $recp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fips_bn_init($recp);
 $0 = ((($recp)) + 20|0);
 _fips_bn_init($0);
 $1 = ((($recp)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($recp)) + 48|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _fips_bn_recp_ctx_free($recp) {
 $recp = $recp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($recp|0)==(0|0);
 if ($0) {
  return;
 }
 _FIPS_bn_free($recp);
 $1 = ((($recp)) + 20|0);
 _FIPS_bn_free($1);
 $2 = ((($recp)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 _FIPS_free($recp);
 return;
}
function _fips_bn_recp_ctx_set($recp,$d,$ctx) {
 $recp = $recp|0;
 $d = $d|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fips_bn_copy($recp,$d)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($recp)) + 20|0);
 (_fips_bn_set_word($2,0)|0);
 $3 = (_FIPS_bn_num_bits($d)|0);
 $4 = ((($recp)) + 40|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($recp)) + 44|0);
 HEAP32[$5>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _fips_bn_mod_mul_reciprocal($r,$x,$y,$recp,$ctx) {
 $r = $r|0;
 $x = $x|0;
 $y = $y|0;
 $recp = $recp|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ca$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fips_bn_ctx_start($ctx);
 $0 = (_fips_bn_ctx_get($ctx)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $ret$0 = 0;
  } else {
   $2 = ($y|0)==(0|0);
   do {
    if ($2) {
     $ca$0 = $x;
    } else {
     $3 = ($x|0)==($y|0);
     if ($3) {
      $4 = (_fips_bn_sqr($0,$y,$ctx)|0);
      $5 = ($4|0)==(0);
      if ($5) {
       $ret$0 = 0;
       break L1;
      } else {
       $ca$0 = $0;
       break;
      }
     } else {
      $6 = (_fips_bn_mul($0,$x,$y,$ctx)|0);
      $7 = ($6|0)==(0);
      if ($7) {
       $ret$0 = 0;
       break L1;
      } else {
       $ca$0 = $0;
       break;
      }
     }
    }
   } while(0);
   $8 = (_fips_bn_div_recp(0,$r,$ca$0,$recp,$ctx)|0);
   $ret$0 = $8;
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 return ($ret$0|0);
}
function _fips_bn_div_recp($dv,$rem,$m,$recp,$ctx) {
 $dv = $dv|0;
 $rem = $rem|0;
 $m = $m|0;
 $recp = $recp|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$len$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $d$0 = 0, $j$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $r$0 = 0, $ret$0 = 0, $ret$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fips_bn_ctx_start($ctx);
 $0 = (_fips_bn_ctx_get($ctx)|0);
 $1 = (_fips_bn_ctx_get($ctx)|0);
 $2 = ($dv|0)==(0|0);
 if ($2) {
  $3 = (_fips_bn_ctx_get($ctx)|0);
  $d$0 = $3;
 } else {
  $d$0 = $dv;
 }
 $4 = ($rem|0)==(0|0);
 if ($4) {
  $5 = (_fips_bn_ctx_get($ctx)|0);
  $r$0 = $5;
 } else {
  $r$0 = $rem;
 }
 $6 = ($0|0)==(0|0);
 $7 = ($1|0)==(0|0);
 $or$cond = $6 | $7;
 $8 = ($d$0|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 $9 = ($r$0|0)==(0|0);
 $or$cond5 = $or$cond3 | $9;
 L7: do {
  if ($or$cond5) {
   $ret$0 = 0;
  } else {
   $10 = (_fips_bn_ucmp($m,$recp)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    (_fips_bn_set_word($d$0,0)|0);
    $12 = (_fips_bn_copy($r$0,$m)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$0 = 0;
     return ($$0|0);
    }
    _fips_bn_ctx_end($ctx);
    $$0 = 1;
    return ($$0|0);
   }
   $14 = (_FIPS_bn_num_bits($m)|0);
   $15 = ((($recp)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 << 1;
   $18 = ($17|0)>($14|0);
   $$ = $18 ? $17 : $14;
   $19 = ((($recp)) + 44|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($$|0)==($20|0);
   if ($21) {
    $30 = $$;
   } else {
    $22 = ((($recp)) + 20|0);
    _fips_bn_ctx_start($ctx);
    $23 = (_fips_bn_ctx_get($ctx)|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     $ret$0$i = -1;
    } else {
     $25 = (_FIPS_bn_set_bit($23,$$)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      $ret$0$i = -1;
     } else {
      $27 = (_fips_bn_div($22,0,$23,$recp,$ctx)|0);
      $28 = ($27|0)==(0);
      $$len$i = $28 ? -1 : $$;
      $ret$0$i = $$len$i;
     }
    }
    _fips_bn_ctx_end($ctx);
    HEAP32[$19>>2] = $ret$0$i;
    $30 = $ret$0$i;
   }
   $29 = ($30|0)==(-1);
   if ($29) {
    $ret$0 = 0;
   } else {
    $31 = HEAP32[$15>>2]|0;
    $32 = (_fips_bn_rshift($0,$m,$31)|0);
    $33 = ($32|0)==(0);
    if ($33) {
     $ret$0 = 0;
    } else {
     $34 = ((($recp)) + 20|0);
     $35 = (_fips_bn_mul($1,$0,$34,$ctx)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      $ret$0 = 0;
     } else {
      $37 = HEAP32[$15>>2]|0;
      $38 = (($$) - ($37))|0;
      $39 = (_fips_bn_rshift($d$0,$1,$38)|0);
      $40 = ($39|0)==(0);
      if ($40) {
       $ret$0 = 0;
      } else {
       $41 = ((($d$0)) + 12|0);
       HEAP32[$41>>2] = 0;
       $42 = (_fips_bn_mul($1,$recp,$d$0,$ctx)|0);
       $43 = ($42|0)==(0);
       if ($43) {
        $ret$0 = 0;
       } else {
        $44 = (_fips_bn_usub($r$0,$m,$1)|0);
        $45 = ($44|0)==(0);
        if ($45) {
         $ret$0 = 0;
        } else {
         $46 = ((($r$0)) + 12|0);
         HEAP32[$46>>2] = 0;
         $j$0 = 0;
         while(1) {
          $47 = (_fips_bn_ucmp($r$0,$recp)|0);
          $48 = ($47|0)>(-1);
          if (!($48)) {
           break;
          }
          $49 = (($j$0) + 1)|0;
          $50 = ($j$0|0)>(2);
          if ($50) {
           label = 23;
           break;
          }
          $51 = (_fips_bn_usub($r$0,$r$0,$recp)|0);
          $52 = ($51|0)==(0);
          if ($52) {
           $ret$0 = 0;
           break L7;
          }
          $53 = (_fips_bn_add_word($d$0,1)|0);
          $54 = ($53|0)==(0);
          if ($54) {
           $ret$0 = 0;
           break L7;
          } else {
           $j$0 = $49;
          }
         }
         if ((label|0) == 23) {
          _FIPS_put_error(3,130,101,7235,197);
          $ret$0 = 0;
          break;
         }
         $55 = ((($r$0)) + 4|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = ($56|0)==(0);
         $$pre = ((($m)) + 12|0);
         if ($57) {
          $59 = 0;
         } else {
          $58 = HEAP32[$$pre>>2]|0;
          $59 = $58;
         }
         HEAP32[$46>>2] = $59;
         $60 = HEAP32[$$pre>>2]|0;
         $61 = ((($recp)) + 12|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = $62 ^ $60;
         HEAP32[$41>>2] = $63;
         $ret$0 = 1;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 $$0 = $ret$0;
 return ($$0|0);
}
function _fips_bn_lshift1($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$0 = 0, $$lcssa = 0, $$lobit = 0, $$lobit$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ap$02 = 0, $c$04 = 0, $i$05 = 0, $phitmp = 0, $rp$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==($a|0);
 if ($0) {
  $14 = ((($r)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($r)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)<($17|0);
  if (!($18)) {
   $19 = (($15) + 1)|0;
   $20 = (_fips_bn_expand2($r,$19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 } else {
  $1 = ((($a)) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($r)) + 12|0);
  HEAP32[$3>>2] = $2;
  $4 = ((($a)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($r)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  do {
   if ($8) {
    $13 = $5;
   } else {
    $9 = (($5) + 1)|0;
    $10 = (_fips_bn_expand2($r,$9)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $$pre = HEAP32[$4>>2]|0;
     $13 = $$pre;
     break;
    }
   }
  } while(0);
  $12 = ((($r)) + 4|0);
  HEAP32[$12>>2] = $13;
 }
 $22 = ((($a)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)>(0);
 if (!($24)) {
  $$0 = 1;
  return ($$0|0);
 }
 $25 = HEAP32[$r>>2]|0;
 $26 = HEAP32[$a>>2]|0;
 $ap$02 = $26;$c$04 = 0;$i$05 = 0;$rp$03 = $25;
 while(1) {
  $27 = ((($ap$02)) + 4|0);
  $28 = HEAP32[$ap$02>>2]|0;
  $29 = $28 << 1;
  $30 = $29 | $c$04;
  $31 = ((($rp$03)) + 4|0);
  HEAP32[$rp$03>>2] = $30;
  $$lobit = $28 >>> 31;
  $32 = (($i$05) + 1)|0;
  $33 = HEAP32[$22>>2]|0;
  $34 = ($32|0)<($33|0);
  if ($34) {
   $ap$02 = $27;$c$04 = $$lobit;$i$05 = $32;$rp$03 = $31;
  } else {
   $$lcssa = $31;$$lobit$lcssa = $$lobit;
   break;
  }
 }
 $phitmp = ($$lobit$lcssa|0)==(0);
 if ($phitmp) {
  $$0 = 1;
  return ($$0|0);
 }
 HEAP32[$$lcssa>>2] = 1;
 $35 = ((($r)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[$35>>2] = $37;
 $$0 = 1;
 return ($$0|0);
}
function _fips_bn_rshift1($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$01 = 0, $c$01$in = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  (_fips_bn_set_word($r,0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $3 = HEAP32[$a>>2]|0;
 $4 = (($1) + -1)|0;
 $5 = (($3) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1);
 $8 = $7&1;
 $9 = (($1) - ($8))|0;
 $10 = ($a|0)==($r|0);
 if ($10) {
  $21 = $6;
 } else {
  $11 = ((($r)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)>($12|0);
  if ($13) {
   $14 = (_fips_bn_expand2($r,$9)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $16 = ((($a)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($r)) + 12|0);
  HEAP32[$18>>2] = $17;
  $$pre = HEAP32[$5>>2]|0;
  $21 = $$pre;
 }
 $19 = HEAP32[$r>>2]|0;
 $20 = $21 >>> 1;
 $22 = ($20|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($4<<2)|0);
  HEAP32[$23>>2] = $20;
 }
 $24 = ($1|0)>(1);
 if ($24) {
  $c$01$in = $21;$i$02 = $4;
  while(1) {
   $c$01 = $c$01$in << 31;
   $25 = (($i$02) + -1)|0;
   $26 = (($3) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 >>> 1;
   $29 = $28 | $c$01;
   $30 = (($19) + ($25<<2)|0);
   HEAP32[$30>>2] = $29;
   $31 = ($i$02|0)>(1);
   if ($31) {
    $c$01$in = $27;$i$02 = $25;
   } else {
    break;
   }
  }
 }
 $32 = ((($r)) + 4|0);
 HEAP32[$32>>2] = $9;
 $$0 = 1;
 return ($$0|0);
}
function _fips_bn_lshift($r,$a,$n) {
 $r = $r|0;
 $a = $a|0;
 $n = $n|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ftl$03 = 0, $i$07 = 0, $i$19 = 0;
 var $tmp_top$0$lcssa = 0, $tmp_top$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($r)) + 12|0);
 HEAP32[$2>>2] = $1;
 $3 = (($n|0) / 32)&-1;
 $4 = ((($a)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 $7 = ((($r)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)<($8|0);
 do {
  if ($9) {
   $18 = $5;
  } else {
   $10 = (($6) + 1)|0;
   $11 = (_fips_bn_expand2($r,$10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$pre = HEAP32[$4>>2]|0;
    $18 = $$pre;
    break;
   }
  }
 } while(0);
 $13 = (($n|0) % 32)&-1;
 $14 = (32 - ($13))|0;
 $15 = HEAP32[$a>>2]|0;
 $16 = HEAP32[$r>>2]|0;
 $17 = (($18) + ($3))|0;
 $19 = (($16) + ($17<<2)|0);
 HEAP32[$19>>2] = 0;
 $20 = ($13|0)==(0);
 $21 = HEAP32[$4>>2]|0;
 $22 = (($21) + -1)|0;
 $23 = ($21|0)>(0);
 if ($20) {
  if ($23) {
   $i$07 = $22;
   while(1) {
    $24 = (($15) + ($i$07<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($i$07) + ($3))|0;
    $27 = (($16) + ($26<<2)|0);
    HEAP32[$27>>2] = $25;
    $28 = (($i$07) + -1)|0;
    $29 = ($i$07|0)>(0);
    if ($29) {
     $i$07 = $28;
    } else {
     break;
    }
   }
  }
 } else {
  if ($23) {
   $i$19 = $22;
   while(1) {
    $30 = (($15) + ($i$19<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 >>> $14;
    $33 = (($i$19) + ($3))|0;
    $34 = (($33) + 1)|0;
    $35 = (($16) + ($34<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $36 | $32;
    HEAP32[$35>>2] = $37;
    $38 = $31 << $13;
    $39 = (($16) + ($33<<2)|0);
    HEAP32[$39>>2] = $38;
    $40 = (($i$19) + -1)|0;
    $41 = ($i$19|0)>(0);
    if ($41) {
     $i$19 = $40;
    } else {
     break;
    }
   }
  }
 }
 $42 = $3 << 2;
 _memset(($16|0),0,($42|0))|0;
 $43 = HEAP32[$4>>2]|0;
 $44 = (($43) + ($3))|0;
 $45 = (($44) + 1)|0;
 $46 = ((($r)) + 4|0);
 HEAP32[$46>>2] = $45;
 $47 = ($44|0)>(-1);
 if (!($47)) {
  $$0 = 1;
  return ($$0|0);
 }
 $48 = HEAP32[$r>>2]|0;
 $49 = (($48) + ($44<<2)|0);
 $ftl$03 = $49;$tmp_top$04 = $45;
 while(1) {
  $50 = HEAP32[$ftl$03>>2]|0;
  $51 = ($50|0)==(0);
  if (!($51)) {
   $tmp_top$0$lcssa = $tmp_top$04;
   break;
  }
  $52 = ((($ftl$03)) + -4|0);
  $53 = (($tmp_top$04) + -1)|0;
  $54 = ($tmp_top$04|0)>(1);
  if ($54) {
   $ftl$03 = $52;$tmp_top$04 = $53;
  } else {
   $tmp_top$0$lcssa = $53;
   break;
  }
 }
 HEAP32[$46>>2] = $tmp_top$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _fips_bn_rshift($r,$a,$n) {
 $r = $r|0;
 $a = $a|0;
 $n = $n|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa15 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$03 = 0, $f$16 = 0, $i$01 = 0, $i$1 = 0, $i$14 = 0, $i$17 = 0, $or$cond = 0;
 var $scevgep = 0, $t$02 = 0, $t$1$lcssa = 0, $t$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n|0) / 32)&-1;
 $1 = (($n|0) % 32)&-1;
 $2 = (32 - ($1))|0;
 $3 = ((($a)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($0|0)>=($4|0);
 $6 = ($4|0)==(0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  (_fips_bn_set_word($r,0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $7 = (_FIPS_bn_num_bits($a)|0);
 $8 = (31 - ($n))|0;
 $9 = (($8) + ($7))|0;
 $10 = (($9|0) / 32)&-1;
 $11 = ($r|0)==($a|0);
 if ($11) {
  $20 = ($n|0)==(0);
  if ($20) {
   $$0 = 1;
   return ($$0|0);
  }
 } else {
  $12 = ((($a)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($r)) + 12|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($r)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($10|0)>($16|0);
  if ($17) {
   $18 = (_fips_bn_expand2($r,$10)|0);
   $19 = ($18|0)==(0|0);
   if ($19) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 $21 = HEAP32[$a>>2]|0;
 $22 = (($21) + ($0<<2)|0);
 $23 = HEAP32[$r>>2]|0;
 $24 = HEAP32[$3>>2]|0;
 $25 = (($24) - ($0))|0;
 $26 = ((($r)) + 4|0);
 HEAP32[$26>>2] = $10;
 $27 = ($1|0)==(0);
 if ($27) {
  $28 = ($24|0)==($0|0);
  if ($28) {
   $$0 = 1;
   return ($$0|0);
  } else {
   $f$03 = $22;$i$01 = $25;$t$02 = $23;
  }
  while(1) {
   $29 = ((($f$03)) + 4|0);
   $30 = HEAP32[$f$03>>2]|0;
   $31 = ((($t$02)) + 4|0);
   HEAP32[$t$02>>2] = $30;
   $32 = (($i$01) + -1)|0;
   $33 = ($32|0)==(0);
   if ($33) {
    $$0 = 1;
    break;
   } else {
    $f$03 = $29;$i$01 = $32;$t$02 = $31;
   }
  }
  return ($$0|0);
 }
 $34 = HEAP32[$22>>2]|0;
 $i$14 = (($25) + -1)|0;
 $35 = ($i$14|0)==(0);
 $36 = $34 >>> $1;
 if ($35) {
  $$lcssa = $36;$t$1$lcssa = $23;
 } else {
  $$sum = (($0) + 1)|0;
  $37 = (($21) + ($$sum<<2)|0);
  $38 = (($24) + -1)|0;
  $39 = (($38) - ($0))|0;
  $44 = $36;$f$16 = $37;$i$17 = $i$14;$t$15 = $23;
  while(1) {
   $40 = ((($f$16)) + 4|0);
   $41 = HEAP32[$f$16>>2]|0;
   $42 = $41 << $2;
   $43 = $42 | $44;
   $45 = ((($t$15)) + 4|0);
   HEAP32[$t$15>>2] = $43;
   $i$1 = (($i$17) + -1)|0;
   $46 = ($i$1|0)==(0);
   $47 = $41 >>> $1;
   if ($46) {
    $$lcssa15 = $47;
    break;
   } else {
    $44 = $47;$f$16 = $40;$i$17 = $i$1;$t$15 = $45;
   }
  }
  $scevgep = (($23) + ($39<<2)|0);
  $$lcssa = $$lcssa15;$t$1$lcssa = $scevgep;
 }
 $48 = ($$lcssa|0)==(0);
 if ($48) {
  $$0 = 1;
  return ($$0|0);
 }
 HEAP32[$t$1$lcssa>>2] = $$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _fips_bn_sqr($r,$a,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, $t = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $t = sp;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(1);
 if ($2) {
  $3 = ((($r)) + 4|0);
  HEAP32[$3>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _fips_bn_ctx_start($ctx);
 $4 = ($a|0)==($r|0);
 if ($4) {
  $5 = (_fips_bn_ctx_get($ctx)|0);
  $8 = $5;
 } else {
  $8 = $r;
 }
 $6 = (_fips_bn_ctx_get($ctx)|0);
 $7 = ($8|0)!=(0|0);
 $9 = ($6|0)!=(0|0);
 $or$cond = $7 & $9;
 L8: do {
  if ($or$cond) {
   $10 = $1 << 1;
   $11 = ((($8)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)>($12|0);
   if ($13) {
    $14 = (_fips_bn_expand2($8,$10)|0);
    $15 = ($14|0)==(0|0);
    if ($15) {
     $ret$0 = 0;
     break;
    }
   }
   L13: do {
    switch ($1|0) {
    case 4:  {
     $16 = HEAP32[$8>>2]|0;
     $17 = HEAP32[$a>>2]|0;
     _fips_bn_sqr_comba4($16,$17);
     $$pre$phiZ2D = $a;
     break;
    }
    case 8:  {
     $18 = HEAP32[$8>>2]|0;
     $19 = HEAP32[$a>>2]|0;
     _fips_bn_sqr_comba8($18,$19);
     $$pre$phiZ2D = $a;
     break;
    }
    default: {
     $20 = ($1|0)<(16);
     if ($20) {
      $21 = HEAP32[$8>>2]|0;
      $22 = HEAP32[$a>>2]|0;
      _fips_bn_sqr_normal($21,$22,$1,$t);
      $$pre$phiZ2D = $a;
      break L13;
     }
     $23 = (_FIPS_bn_num_bits_word($1)|0);
     $24 = (($23) + -1)|0;
     $25 = 1 << $24;
     $26 = ($1|0)==($25|0);
     if ($26) {
      $27 = $1 << 2;
      $28 = ((($6)) + 8|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($27|0)>($29|0);
      if ($30) {
       $31 = (_fips_bn_expand2($6,$27)|0);
       $32 = ($31|0)==(0|0);
       if ($32) {
        $ret$0 = 0;
        break L8;
       }
      }
      $33 = HEAP32[$8>>2]|0;
      $34 = HEAP32[$a>>2]|0;
      $35 = HEAP32[$6>>2]|0;
      _fips_bn_sqr_recursive($33,$34,$1,$35);
      $$pre$phiZ2D = $a;
      break L13;
     } else {
      $36 = ((($6)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($10|0)>($37|0);
      if ($38) {
       $39 = (_fips_bn_expand2($6,$10)|0);
       $40 = ($39|0)==(0|0);
       if ($40) {
        $ret$0 = 0;
        break L8;
       }
      }
      $41 = HEAP32[$8>>2]|0;
      $42 = HEAP32[$a>>2]|0;
      $43 = HEAP32[$6>>2]|0;
      _fips_bn_sqr_normal($41,$42,$1,$43);
      $$pre$phiZ2D = $a;
      break L13;
     }
    }
    }
   } while(0);
   $44 = ((($8)) + 12|0);
   HEAP32[$44>>2] = 0;
   $45 = (($1) + -1)|0;
   $46 = HEAP32[$$pre$phiZ2D>>2]|0;
   $47 = (($46) + ($45<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 & 65535;
   $50 = ($48|0)==($49|0);
   $51 = $50 << 31 >> 31;
   $$ = (($10) + ($51))|0;
   $52 = ((($8)) + 4|0);
   HEAP32[$52>>2] = $$;
   $53 = ($8|0)==($r|0);
   if ($53) {
    $ret$0 = 1;
   } else {
    (_fips_bn_copy($r,$8)|0);
    $ret$0 = 1;
   }
  } else {
   $ret$0 = 0;
  }
 } while(0);
 _fips_bn_ctx_end($ctx);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _fips_bn_sqr_normal($r,$a,$n,$tmp) {
 $r = $r|0;
 $a = $a|0;
 $n = $n|0;
 $tmp = $tmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ap$13 = 0, $i$02 = 0, $j$01 = 0, $rp$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 1;
 $1 = (($0) + -1)|0;
 $2 = (($r) + ($1<<2)|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$r>>2] = 0;
 $3 = (($n) + -1)|0;
 $4 = ($n|0)>(1);
 if ($4) {
  $5 = ((($r)) + 4|0);
  $6 = ((($a)) + 4|0);
  $7 = HEAP32[$a>>2]|0;
  $8 = (_fips_bn_mul_words($5,$6,$3,$7)|0);
  $9 = (($r) + ($n<<2)|0);
  HEAP32[$9>>2] = $8;
  $10 = ($n|0)>(2);
  if ($10) {
   $11 = ((($r)) + 12|0);
   $12 = (($n) + -2)|0;
   $ap$13 = $6;$i$02 = $12;$j$01 = $3;$rp$14 = $11;
   while(1) {
    $13 = (($j$01) + -1)|0;
    $14 = ((($ap$13)) + 4|0);
    $15 = HEAP32[$ap$13>>2]|0;
    $16 = (_fips_bn_mul_add_words($rp$14,$14,$13,$15)|0);
    $17 = (($rp$14) + ($13<<2)|0);
    HEAP32[$17>>2] = $16;
    $18 = ((($rp$14)) + 8|0);
    $19 = (($i$02) + -1)|0;
    $20 = ($i$02|0)>(1);
    if ($20) {
     $ap$13 = $14;$i$02 = $19;$j$01 = $13;$rp$14 = $18;
    } else {
     break;
    }
   }
  }
 }
 (_fips_bn_add_words($r,$r,$r,$0)|0);
 _fips_bn_sqr_words($tmp,$a,$n);
 (_fips_bn_add_words($r,$r,$tmp,$0)|0);
 return;
}
function _fips_bn_sqr_recursive($r,$a,$n2,$t) {
 $r = $r|0;
 $a = $a|0;
 $n2 = $n2|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n2|0) / 2)&-1;
 switch ($n2|0) {
 case 4:  {
  _fips_bn_sqr_comba4($r,$a);
  return;
  break;
 }
 case 8:  {
  _fips_bn_sqr_comba8($r,$a);
  return;
  break;
 }
 default: {
  $1 = ($n2|0)<(16);
  if ($1) {
   _fips_bn_sqr_normal($r,$a,$n2,$t);
   return;
  }
  $2 = (($a) + ($0<<2)|0);
  $3 = (_fips_bn_cmp_words($a,$2,$0)|0);
  $4 = ($3|0)>(0);
  do {
   if ($4) {
    (_fips_bn_sub_words($t,$a,$2,$0)|0);
    label = 10;
   } else {
    $5 = ($3|0)<(0);
    if ($5) {
     (_fips_bn_sub_words($t,$2,$a,$0)|0);
     label = 10;
     break;
    } else {
     $9 = $n2 << 1;
     $10 = (($t) + ($9<<2)|0);
     $11 = (($t) + ($n2<<2)|0);
     $12 = $n2 << 2;
     _memset(($11|0),0,($12|0))|0;
     $13 = $10;$16 = $11;
     break;
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $6 = $n2 << 1;
   $7 = (($t) + ($6<<2)|0);
   $8 = (($t) + ($n2<<2)|0);
   _fips_bn_sqr_recursive($8,$t,$0,$7);
   $13 = $7;$16 = $8;
  }
  _fips_bn_sqr_recursive($r,$a,$0,$13);
  $14 = (($r) + ($n2<<2)|0);
  _fips_bn_sqr_recursive($14,$2,$0,$13);
  $15 = (_fips_bn_add_words($t,$r,$14,$n2)|0);
  $17 = (_fips_bn_sub_words($16,$t,$16,$n2)|0);
  $18 = (($15) - ($17))|0;
  $19 = (($r) + ($0<<2)|0);
  $20 = (_fips_bn_add_words($19,$19,$16,$n2)|0);
  $21 = (($18) + ($20))|0;
  $22 = ($21|0)==(0);
  if ($22) {
   return;
  }
  $23 = (($0) + ($n2))|0;
  $24 = (($r) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($21))|0;
  HEAP32[$24>>2] = $26;
  $27 = ($26>>>0)<($21>>>0);
  if ($27) {
   $p$0 = $24;
  } else {
   return;
  }
  while(1) {
   $28 = ((($p$0)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$28>>2] = $30;
   $31 = ($30|0)==(0);
   if ($31) {
    $p$0 = $28;
   } else {
    break;
   }
  }
  return;
 }
 }
}
function _fips_bn_mod_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$a>>2]|0;
 $11 = 0;$7 = 0;$i$03$in = $2;
 while(1) {
  $i$03 = (($i$03$in) + -1)|0;
  $5 = (($4) + ($i$03<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = (___uremdi3(($6|0),($7|0),($w|0),0)|0);
  $9 = tempRet0;
  $10 = ($i$03$in|0)>(1);
  if ($10) {
   $11 = $9;$7 = $8;$i$03$in = $i$03;
  } else {
   $12 = $8;$13 = $9;
   break;
  }
 }
 $$0 = $12;
 return ($$0|0);
}
function _fips_bn_add_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0;
 var $i$0$lcssa = 0, $l$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(0);
 if ($0) {
  $$01 = 1;
  return ($$01|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_fips_bn_set_word($a,$w)|0);
  $$01 = $4;
  return ($$01|0);
 }
 $5 = ((($a)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  HEAP32[$5>>2] = 0;
  $8 = (_fips_bn_sub_word($a,$w)|0);
  $9 = HEAP32[$1>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $$01 = $8;
   return ($$01|0);
  }
  $11 = HEAP32[$5>>2]|0;
  $12 = ($11|0)==(0);
  $13 = $12&1;
  HEAP32[$5>>2] = $13;
  $$01 = $8;
  return ($$01|0);
 }
 $14 = (($2) + -1)|0;
 $15 = HEAP32[$a>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(-1);
 do {
  if ($18) {
   $19 = ((($a)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($2|0)<($20|0);
   if ($21) {
    $28 = $15;
   } else {
    $22 = (($2) + 1)|0;
    $23 = (_fips_bn_expand2($a,$22)|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     $$01 = 0;
     return ($$01|0);
    } else {
     $$pre = HEAP32[$a>>2]|0;
     $28 = $$pre;
     break;
    }
   }
  } else {
   $28 = $15;
  }
 } while(0);
 $$0 = $w;$i$0 = 0;
 while(1) {
  $25 = HEAP32[$1>>2]|0;
  $26 = ($i$0|0)<($25|0);
  $27 = (($28) + ($i$0<<2)|0);
  if ($26) {
   $29 = HEAP32[$27>>2]|0;
   $30 = (($29) + ($$0))|0;
   $l$0 = $30;
  } else {
   $l$0 = $$0;
  }
  HEAP32[$27>>2] = $l$0;
  $31 = ($$0>>>0)>($l$0>>>0);
  $32 = (($i$0) + 1)|0;
  if ($31) {
   $$0 = 1;$i$0 = $32;
  } else {
   $i$0$lcssa = $i$0;
   break;
  }
 }
 $33 = HEAP32[$1>>2]|0;
 $34 = ($i$0$lcssa|0)<($33|0);
 if ($34) {
  $$01 = 1;
  return ($$01|0);
 }
 $35 = (($33) + 1)|0;
 HEAP32[$1>>2] = $35;
 $$01 = 1;
 return ($$01|0);
}
function _fips_bn_sub_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $$0$lcssa = 0, $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(0);
 if ($0) {
  $$01 = 1;
  return ($$01|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_fips_bn_set_word($a,$w)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$01 = 0;
   return ($$01|0);
  }
  _fips_bn_set_negative($a,1);
  $$01 = $4;
  return ($$01|0);
 }
 $6 = ((($a)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  HEAP32[$6>>2] = 0;
  $9 = (_fips_bn_add_word($a,$w)|0);
  HEAP32[$6>>2] = 1;
  $$01 = $9;
  return ($$01|0);
 }
 $10 = ($2|0)==(1);
 $11 = HEAP32[$a>>2]|0;
 if ($10) {
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)<($w>>>0);
  if ($13) {
   $14 = (($w) - ($12))|0;
   HEAP32[$11>>2] = $14;
   HEAP32[$6>>2] = 1;
   $$01 = 1;
   return ($$01|0);
  } else {
   $$0 = $w;$i$0 = 0;
  }
 } else {
  $$0 = $w;$i$0 = 0;
 }
 while(1) {
  $15 = (($11) + ($i$0<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16>>>0)<($$0>>>0);
  $18 = (($16) - ($$0))|0;
  HEAP32[$15>>2] = $18;
  $19 = (($i$0) + 1)|0;
  if ($17) {
   $$0 = 1;$i$0 = $19;
  } else {
   $$0$lcssa = $$0;$$lcssa = $16;$i$0$lcssa = $i$0;
   break;
  }
 }
 $20 = ($$lcssa|0)==($$0$lcssa|0);
 if (!($20)) {
  $$01 = 1;
  return ($$01|0);
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + -1)|0;
 $23 = ($i$0$lcssa|0)==($22|0);
 if (!($23)) {
  $$01 = 1;
  return ($$01|0);
 }
 HEAP32[$1>>2] = $i$0$lcssa;
 $$01 = 1;
 return ($$01|0);
}
function _fips_bn_mul_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($w|0)==(0);
 if ($3) {
  (_fips_bn_set_word($a,0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $4 = HEAP32[$a>>2]|0;
 $5 = (_fips_bn_mul_words($4,$4,$1,$w)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($a)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)<($9|0);
 do {
  if ($10) {
   $15 = $7;
  } else {
   $11 = (($7) + 1)|0;
   $12 = (_fips_bn_expand2($a,$11)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$pre = HEAP32[$0>>2]|0;
    $15 = $$pre;
    break;
   }
  }
 } while(0);
 $14 = (($15) + 1)|0;
 HEAP32[$0>>2] = $14;
 $16 = HEAP32[$a>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 HEAP32[$17>>2] = $5;
 $$0 = 1;
 return ($$0|0);
}
function _FIPS_openssl_showfatal($fmta,$varargs) {
 $fmta = $fmta|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[2136>>2]|0;
 (_vfprintf($0,$fmta,$ap)|0);
 STACKTOP = sp;return;
}
function _FIPS_openssldie($file,$line,$assertion) {
 $file = $file|0;
 $line = $line|0;
 $assertion = $assertion|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $file;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $line;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $assertion;
 _FIPS_openssl_showfatal(7245,$vararg_buffer);
 _abort();
 // unreachable;
}
function _fips_check_ec_prng($ec) {
 $ec = $ec|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $strength$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_module_mode()|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = ((($ec)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 3;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = ((($ec)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 1;
  return ($$0|0);
 }
 $9 = ((($7)) + 8|0);
 $10 = (_FIPS_bn_num_bits($9)|0);
 $11 = ($10|0)<(160);
 if ($11) {
  _FIPS_put_error(45,152,124,7299,276);
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ($10|0)>(511);
 if ($12) {
  $strength$0 = 256;
 } else {
  $13 = ($10|0)>(383);
  if ($13) {
   $strength$0 = 192;
  } else {
   $14 = ($10|0)>(255);
   if ($14) {
    $strength$0 = 128;
   } else {
    $15 = ($10|0)>(223);
    $$ = $15 ? 112 : 80;
    $strength$0 = $$;
   }
  }
 }
 $16 = (_FIPS_rand_strength()|0);
 $17 = ($16|0)<($strength$0|0);
 if (!($17)) {
  $$0 = 1;
  return ($$0|0);
 }
 _FIPS_put_error(45,152,143,7299,295);
 $$0 = 0;
 return ($$0|0);
}
function _FIPS_ec_key_get0_group($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _FIPS_ec_key_get0_private_key($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _FIPS_ec_key_get0_public_key($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _FIPS_ec_point_free($point) {
 $point = $point|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($point|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$point>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  FUNCTION_TABLE_vi[$3 & 31]($point);
 }
 _FIPS_free($point);
 return;
}
function _FIPS_ec_point_clear_free($point) {
 $point = $point|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($point|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$point>>2]|0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($1)) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   FUNCTION_TABLE_vi[$6 & 31]($point);
  }
 } else {
  FUNCTION_TABLE_vi[$3 & 31]($point);
 }
 _FIPS_openssl_cleanse($point,68);
 _FIPS_free($point);
 return;
}
function _FIPS_ec_point_new($group) {
 $group = $group|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($group|0)==(0|0);
 if ($0) {
  _FIPS_put_error(16,121,67,7308,702);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$group>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _FIPS_put_error(16,121,66,7308,707);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_FIPS_malloc(68,7308,711)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _FIPS_put_error(16,121,65,7308,714);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$group>>2]|0;
 HEAP32[$5>>2] = $7;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 31]($5)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = $5;
  return ($$0|0);
 }
 _FIPS_free($5);
 $$0 = 0;
 return ($$0|0);
}
function _fips_ec_point_copy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dest>>2]|0;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _FIPS_put_error(16,114,66,7308,757);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$src>>2]|0;
 $5 = ($0|0)==($4|0);
 if (!($5)) {
  _FIPS_put_error(16,114,101,7308,762);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($dest|0)==($src|0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = (FUNCTION_TABLE_iii[$2 & 31]($dest,$src)|0);
 $$0 = $7;
 return ($$0|0);
}
function _FIPS_ec_group_method_of($group) {
 $group = $group|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 return ($0|0);
}
function _FIPS_ec_method_get_field_type($meth) {
 $meth = $meth|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($meth)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _FIPS_ec_group_get0_generator($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _FIPS_ec_group_get_order($group,$order,$ctx) {
 $group = $group|0;
 $order = $order|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 8|0);
 $1 = (_fips_bn_copy($order,$0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($order)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $5&1;
 $$0 = $6;
 return ($$0|0);
}
function _fips_ec_point_cmp($group,$a,$b,$ctx) {
 $group = $group|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 108|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _FIPS_put_error(16,113,66,7308,998);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$a>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = HEAP32[$b>>2]|0;
  $7 = ($0|0)==($6|0);
  if ($7) {
   $8 = (FUNCTION_TABLE_iiiii[$2 & 31]($group,$a,$b,$ctx)|0);
   $$0 = $8;
   return ($$0|0);
  }
 }
 _FIPS_put_error(16,113,101,7308,1003);
 $$0 = 0;
 return ($$0|0);
}
function _fips_ec_ex_data_get_data($ex_data,$dup_func,$free_func,$clear_free_func) {
 $ex_data = $ex_data|0;
 $dup_func = $dup_func|0;
 $free_func = $free_func|0;
 $clear_free_func = $clear_free_func|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d$02 = 0, $d$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ex_data|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $d$02 = $ex_data;
 }
 while(1) {
  $1 = ((($d$02)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==($dup_func|0);
  if ($3) {
   $4 = ((($d$02)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==($free_func|0);
   if ($6) {
    $7 = ((($d$02)) + 16|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($clear_free_func|0);
    if ($9) {
     $d$02$lcssa = $d$02;
     break;
    }
   }
  }
  $12 = HEAP32[$d$02>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$0 = 0;
   label = 7;
   break;
  } else {
   $d$02 = $12;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $10 = ((($d$02$lcssa)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $$0 = $11;
 return ($$0|0);
}
function _FIPS_ec_point_set_to_infinity($group,$point) {
 $group = $group|0;
 $point = $point|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _FIPS_put_error(16,127,66,7308,800);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$point>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = (FUNCTION_TABLE_iii[$2 & 31]($group,$point)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  _FIPS_put_error(16,127,101,7308,805);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _FIPS_ec_point_get_affine_coordinates_gfp($group,$point,$x,$y,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x = $x|0;
 $y = $y|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _FIPS_put_error(16,116,66,7308,885);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$point>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = (FUNCTION_TABLE_iiiiii[$2 & 31]($group,$point,$x,$y,$ctx)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  _FIPS_put_error(16,116,101,7308,890);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_ec_point_add($group,$r,$a,$b,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _FIPS_put_error(16,112,66,7308,918);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$r>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = HEAP32[$a>>2]|0;
  $7 = ($0|0)==($6|0);
  if ($7) {
   $8 = HEAP32[$b>>2]|0;
   $9 = ($0|0)==($8|0);
   if ($9) {
    $10 = (FUNCTION_TABLE_iiiiii[$2 & 31]($group,$r,$a,$b,$ctx)|0);
    $$0 = $10;
    return ($$0|0);
   }
  }
 }
 _FIPS_put_error(16,112,101,7308,923);
 $$0 = 0;
 return ($$0|0);
}
function _fips_ec_point_dbl($group,$r,$a,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _FIPS_put_error(16,115,66,7308,934);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$r>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = HEAP32[$a>>2]|0;
  $7 = ($0|0)==($6|0);
  if ($7) {
   $8 = (FUNCTION_TABLE_iiiii[$2 & 31]($group,$r,$a,$ctx)|0);
   $$0 = $8;
   return ($$0|0);
  }
 }
 _FIPS_put_error(16,115,101,7308,939);
 $$0 = 0;
 return ($$0|0);
}
function _fips_ec_point_invert($group,$a,$ctx) {
 $group = $group|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _FIPS_put_error(16,210,66,7308,950);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$a>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = ((($0)) + 96|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_iiii[$7 & 31]($group,$a,$ctx)|0);
  $$0 = $8;
  return ($$0|0);
 } else {
  _FIPS_put_error(16,210,101,7308,955);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _FIPS_ec_points_make_affine($group,$num,$points,$ctx) {
 $group = $group|0;
 $num = $num|0;
 $points = $points|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 116|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _FIPS_put_error(16,136,66,7308,1032);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($num|0)==(0);
 L5: do {
  if (!($4)) {
   $i$02 = 0;
   while(1) {
    $7 = (($points) + ($i$02<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP32[$8>>2]|0;
    $10 = ($0|0)==($9|0);
    $6 = (($i$02) + 1)|0;
    if (!($10)) {
     break;
    }
    $5 = ($6>>>0)<($num>>>0);
    if ($5) {
     $i$02 = $6;
    } else {
     break L5;
    }
   }
   _FIPS_put_error(16,136,101,7308,1039);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $11 = (FUNCTION_TABLE_iiiii[$2 & 31]($group,$num,$points,$ctx)|0);
 $$0 = $11;
 return ($$0|0);
}
function _FIPS_ec_point_mul($group,$r,$g_scalar,$point,$p_scalar,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $g_scalar = $g_scalar|0;
 $point = $point|0;
 $p_scalar = $p_scalar|0;
 $ctx = $ctx|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $points = 0, $scalars = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $points = sp + 4|0;
 $scalars = sp;
 HEAP32[$points>>2] = $point;
 HEAP32[$scalars>>2] = $p_scalar;
 $0 = ($point|0)!=(0|0);
 $1 = ($p_scalar|0)!=(0|0);
 $2 = $0 & $1;
 $3 = $2&1;
 $4 = HEAP32[$group>>2]|0;
 $5 = ((($4)) + 120|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_fips_ec_wnaf_mul($group,$r,$g_scalar,$3,$points,$scalars,$ctx)|0);
  $$0$i = $8;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  $9 = (FUNCTION_TABLE_iiiiiiii[$6 & 31]($group,$r,$g_scalar,$3,$points,$scalars,$ctx)|0);
  $$0$i = $9;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function _fips_ec_wnaf_mul($group,$r,$scalar,$num,$points,$scalars,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $scalar = $scalar|0;
 $num = $num|0;
 $points = $points|0;
 $scalars = $scalars|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$08 = 0, $$10$us = 0, $$lcssa153 = 0, $$lobit$us = 0, $$max_len$0 = 0, $$max_len$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blocksize$0 = 0, $generator$0 = 0, $i$0120 = 0, $i$1111 = 0, $i$2103 = 0, $i$397 = 0, $i$492 = 0, $i$576$us = 0, $j$095 = 0, $j$190 = 0, $k$0 = 0, $k$0$us = 0, $k$082 = 0, $k$085 = 0, $k$085$us = 0, $max_len$0$lcssa = 0;
 var $max_len$0112 = 0, $max_len$3$lcssa = 0, $max_len$3104 = 0, $max_len$5 = 0, $new_ctx$0 = 0, $num_scalar$0 = 0, $num_val$0$lcssa = 0, $num_val$0113 = 0, $numblocks$1 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $pp$0105 = 0, $pre_comp$0 = 0, $pre_points_per_block$0 = 0, $r_is_at_infinity$084$us = 0, $r_is_at_infinity$179$us = 0, $r_is_at_infinity$2$us = 0, $r_is_at_infinity$2$us$lcssa = 0;
 var $r_is_inverted$083$us = 0, $r_is_inverted$178$us = 0, $r_is_inverted$2$us = 0, $r_is_inverted$3$us = 0, $r_is_inverted$3$us$lcssa = 0, $ret$0 = 0, $tmp$0 = 0, $tmp_len = 0, $tmp_points$0106 = 0, $totalnum$0 = 0, $totalnum$1 = 0, $v$0$lcssa = 0, $v$098 = 0, $v$196 = 0, $v$272 = 0, $val$0 = 0, $val_sub$0 = 0, $w$073 = 0, $wNAF$0 = 0, $wNAF_len$0 = 0;
 var $wsize$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp_len = sp;
 $0 = HEAP32[$group>>2]|0;
 $1 = HEAP32[$r>>2]|0;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  _FIPS_put_error(16,187,101,7317,376);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($scalar|0)==(0|0);
 $4 = ($num|0)==(0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $5 = (_FIPS_ec_point_set_to_infinity($group,$r)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 L9: do {
  if (!($4)) {
   $i$0120 = 0;
   while(1) {
    $8 = (($points) + ($i$0120<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$9>>2]|0;
    $11 = ($0|0)==($10|0);
    $7 = (($i$0120) + 1)|0;
    if (!($11)) {
     break;
    }
    $6 = ($7>>>0)<($num>>>0);
    if ($6) {
     $i$0120 = $7;
    } else {
     break L9;
    }
   }
   _FIPS_put_error(16,187,101,7317,389);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $12 = ($ctx|0)==(0|0);
 if ($12) {
  $13 = (_fips_bn_ctx_new()|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$08 = $13;$new_ctx$0 = $13;
  }
 } else {
  $$08 = $ctx;$new_ctx$0 = 0;
 }
 do {
  if ($3) {
   $blocksize$0 = 0;$generator$0 = 0;$num_scalar$0 = 0;$numblocks$1 = 0;$pre_comp$0 = 0;$pre_points_per_block$0 = 0;
   label = 19;
  } else {
   $15 = (_FIPS_ec_group_get0_generator($group)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    _FIPS_put_error(16,187,113,7317,406);
    $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = 0;$wNAF$0 = 0;$wNAF_len$0 = 0;$wsize$0 = 0;
    break;
   }
   $17 = ((($group)) + 68|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_fips_ec_ex_data_get_data($18,24,19,20)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    $blocksize$0 = 0;$generator$0 = $15;$num_scalar$0 = 1;$numblocks$1 = 1;$pre_comp$0 = 0;$pre_points_per_block$0 = 0;
    label = 19;
   } else {
    $21 = ((($19)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0);
    if ($23) {
     $blocksize$0 = 0;$generator$0 = $15;$num_scalar$0 = 1;$numblocks$1 = 1;$pre_comp$0 = 0;$pre_points_per_block$0 = 0;
     label = 19;
    } else {
     $24 = ((($19)) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = (_fips_ec_point_cmp($group,$15,$26,$$08)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $29 = ((($19)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_FIPS_bn_num_bits($scalar)|0);
      $32 = (($31>>>0) / ($30>>>0))&-1;
      $33 = (($32) + 1)|0;
      $34 = HEAP32[$21>>2]|0;
      $35 = ($33>>>0)>($34>>>0);
      $$ = $35 ? $34 : $33;
      $36 = ((($19)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($37) + -1)|0;
      $39 = 1 << $38;
      $40 = ((($19)) + 20|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = $34 << $38;
      $43 = ($41|0)==($42|0);
      if ($43) {
       $blocksize$0 = $30;$generator$0 = $15;$num_scalar$0 = 0;$numblocks$1 = $$;$pre_comp$0 = $19;$pre_points_per_block$0 = $39;
       label = 19;
      } else {
       _FIPS_put_error(16,187,68,7317,431);
       $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = 0;$wNAF$0 = 0;$wNAF_len$0 = 0;$wsize$0 = 0;
      }
     } else {
      $blocksize$0 = 0;$generator$0 = $15;$num_scalar$0 = 1;$numblocks$1 = 1;$pre_comp$0 = 0;$pre_points_per_block$0 = 0;
      label = 19;
     }
    }
   }
  }
 } while(0);
 L29: do {
  if ((label|0) == 19) {
   $44 = (($numblocks$1) + ($num))|0;
   $45 = $44 << 2;
   $46 = (_FIPS_malloc($45,7317,446)|0);
   $47 = (_FIPS_malloc($45,7317,447)|0);
   $48 = (($45) + 4)|0;
   $49 = (_FIPS_malloc($48,7317,448)|0);
   $50 = (_FIPS_malloc($45,7317,449)|0);
   $51 = ($46|0)!=(0|0);
   $52 = ($47|0)!=(0|0);
   $or$cond3 = $51 & $52;
   $53 = ($49|0)!=(0|0);
   $or$cond5 = $or$cond3 & $53;
   $54 = ($50|0)!=(0|0);
   $or$cond7 = $or$cond5 & $54;
   if (!($or$cond7)) {
    _FIPS_put_error(16,187,65,7317,453);
    $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
    break;
   }
   HEAP32[$49>>2] = 0;
   $55 = (($num_scalar$0) + ($num))|0;
   $56 = ($55|0)==(0);
   if ($56) {
    $max_len$0$lcssa = 0;$num_val$0$lcssa = 0;
   } else {
    $i$1111 = 0;$max_len$0112 = 0;$num_val$0113 = 0;
    while(1) {
     $57 = ($i$1111>>>0)<($num>>>0);
     if ($57) {
      $58 = (($scalars) + ($i$1111<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (_FIPS_bn_num_bits($59)|0);
      $63 = $60;
     } else {
      $61 = (_FIPS_bn_num_bits($scalar)|0);
      $63 = $61;
     }
     $62 = ($63>>>0)>(1999);
     if ($62) {
      $70 = 6;
     } else {
      $64 = ($63>>>0)>(799);
      if ($64) {
       $70 = 5;
      } else {
       $65 = ($63>>>0)>(299);
       if ($65) {
        $70 = 4;
       } else {
        $66 = ($63>>>0)>(69);
        if ($66) {
         $70 = 3;
        } else {
         $67 = ($63>>>0)>(19);
         $68 = $67 ? 2 : 1;
         $70 = $68;
        }
       }
      }
     }
     $69 = (($46) + ($i$1111<<2)|0);
     HEAP32[$69>>2] = $70;
     $71 = (($70) + -1)|0;
     $72 = 1 << $71;
     $73 = (($72) + ($num_val$0113))|0;
     $74 = (($i$1111) + 1)|0;
     $75 = (($49) + ($74<<2)|0);
     HEAP32[$75>>2] = 0;
     if ($57) {
      $76 = (($scalars) + ($i$1111<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      $79 = $77;
     } else {
      $79 = $scalar;
     }
     $78 = (($47) + ($i$1111<<2)|0);
     $80 = (_compute_wNAF($79,$70,$78)|0);
     $81 = (($49) + ($i$1111<<2)|0);
     HEAP32[$81>>2] = $80;
     $82 = ($80|0)==(0|0);
     if ($82) {
      $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
      break L29;
     }
     $83 = HEAP32[$78>>2]|0;
     $84 = ($83>>>0)>($max_len$0112>>>0);
     $$max_len$0 = $84 ? $83 : $max_len$0112;
     $85 = ($74>>>0)<($55>>>0);
     if ($85) {
      $i$1111 = $74;$max_len$0112 = $$max_len$0;$num_val$0113 = $73;
     } else {
      $max_len$0$lcssa = $$max_len$0;$num_val$0$lcssa = $73;
      break;
     }
    }
   }
   $86 = ($numblocks$1|0)==(0);
   do {
    if ($86) {
     $max_len$5 = $max_len$0$lcssa;$totalnum$1 = $44;
    } else {
     $87 = ($pre_comp$0|0)==(0|0);
     if ($87) {
      $88 = ($num_scalar$0|0)==(1);
      if ($88) {
       $max_len$5 = $max_len$0$lcssa;$totalnum$1 = $44;
       break;
      }
      _FIPS_put_error(16,187,68,7317,485);
      $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
      break L29;
     }
     HEAP32[$tmp_len>>2] = 0;
     $89 = ($num_scalar$0|0)==(0);
     if (!($89)) {
      _FIPS_put_error(16,187,68,7317,497);
      $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
      break L29;
     }
     $90 = ((($pre_comp$0)) + 12|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (($46) + ($num<<2)|0);
     HEAP32[$92>>2] = $91;
     $93 = (_compute_wNAF($scalar,$91,$tmp_len)|0);
     $94 = ($93|0)==(0|0);
     if ($94) {
      $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
      break L29;
     }
     $95 = HEAP32[$tmp_len>>2]|0;
     $96 = ($95>>>0)>($max_len$0$lcssa>>>0);
     if (!($96)) {
      $97 = (($num) + 1)|0;
      $98 = (($49) + ($num<<2)|0);
      HEAP32[$98>>2] = $93;
      $99 = (($49) + ($97<<2)|0);
      HEAP32[$99>>2] = 0;
      $100 = (($47) + ($num<<2)|0);
      HEAP32[$100>>2] = $95;
      $101 = ((($pre_comp$0)) + 16|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (($50) + ($num<<2)|0);
      HEAP32[$103>>2] = $102;
      $max_len$5 = $max_len$0$lcssa;$totalnum$1 = $97;
      break;
     }
     $104 = Math_imul($numblocks$1, $blocksize$0)|0;
     $105 = ($95>>>0)<($104>>>0);
     do {
      if ($105) {
       $106 = (($blocksize$0) + -1)|0;
       $107 = (($106) + ($95))|0;
       $108 = (($107>>>0) / ($blocksize$0>>>0))&-1;
       $109 = ((($pre_comp$0)) + 8|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($108>>>0)>($110>>>0);
       if ($111) {
        _FIPS_put_error(16,187,68,7317,537);
        $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       } else {
        $112 = (($108) + ($num))|0;
        $totalnum$0 = $112;
        break;
       }
      } else {
       $totalnum$0 = $44;
      }
     } while(0);
     $113 = ($totalnum$0>>>0)>($num>>>0);
     L71: do {
      if ($113) {
       $114 = ((($pre_comp$0)) + 16|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = (($totalnum$0) + -1)|0;
       $120 = $95;$i$2103 = $num;$max_len$3104 = $max_len$0$lcssa;$pp$0105 = $93;$tmp_points$0106 = $115;
       while(1) {
        $117 = ($i$2103>>>0)<($116>>>0);
        $118 = (($47) + ($i$2103<<2)|0);
        if ($117) {
         HEAP32[$118>>2] = $blocksize$0;
         $119 = ($120>>>0)<($blocksize$0>>>0);
         if ($119) {
          label = 51;
          break;
         }
         $121 = (($120) - ($blocksize$0))|0;
         HEAP32[$tmp_len>>2] = $121;
         $124 = $blocksize$0;$254 = $121;
        } else {
         HEAP32[$118>>2] = $120;
         $124 = $120;$254 = $120;
        }
        $122 = (($i$2103) + 1)|0;
        $123 = (($49) + ($122<<2)|0);
        HEAP32[$123>>2] = 0;
        $125 = (_FIPS_malloc($124,7317,565)|0);
        $126 = (($49) + ($i$2103<<2)|0);
        HEAP32[$126>>2] = $125;
        $127 = ($125|0)==(0|0);
        if ($127) {
         label = 55;
         break;
        }
        $128 = HEAP32[$118>>2]|0;
        _memcpy(($125|0),($pp$0105|0),($128|0))|0;
        $129 = HEAP32[$118>>2]|0;
        $130 = HEAP32[$tmp_points$0106>>2]|0;
        $131 = ($130|0)==(0|0);
        if ($131) {
         label = 57;
         break;
        }
        $132 = ($129>>>0)>($max_len$3104>>>0);
        $$max_len$3 = $132 ? $129 : $max_len$3104;
        $133 = (($50) + ($i$2103<<2)|0);
        HEAP32[$133>>2] = $tmp_points$0106;
        $134 = (($tmp_points$0106) + ($pre_points_per_block$0<<2)|0);
        $135 = (($pp$0105) + ($blocksize$0)|0);
        $136 = ($122>>>0)<($totalnum$0>>>0);
        if ($136) {
         $120 = $254;$i$2103 = $122;$max_len$3104 = $$max_len$3;$pp$0105 = $135;$tmp_points$0106 = $134;
        } else {
         $max_len$3$lcssa = $$max_len$3;
         break L71;
        }
       }
       if ((label|0) == 51) {
        _FIPS_put_error(16,187,68,7317,554);
        $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
       else if ((label|0) == 55) {
        _FIPS_put_error(16,187,65,7317,568);
        _FIPS_free($93);
        $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
       else if ((label|0) == 57) {
        _FIPS_put_error(16,187,68,7317,578);
        _FIPS_free($93);
        $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
      } else {
       $max_len$3$lcssa = $max_len$0$lcssa;
      }
     } while(0);
     _FIPS_free($93);
     $max_len$5 = $max_len$3$lcssa;$totalnum$1 = $totalnum$0;
    }
   } while(0);
   $137 = $num_val$0$lcssa << 2;
   $138 = (($137) + 4)|0;
   $139 = (_FIPS_malloc($138,7317,594)|0);
   $140 = ($139|0)==(0|0);
   if ($140) {
    _FIPS_put_error(16,187,65,7317,597);
    $ret$0 = 0;$tmp$0 = 0;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
    break;
   }
   $141 = (($139) + ($num_val$0$lcssa<<2)|0);
   HEAP32[$141>>2] = 0;
   if ($56) {
    $v$0$lcssa = $139;
   } else {
    $i$397 = 0;$v$098 = $139;
    while(1) {
     $142 = (($50) + ($i$397<<2)|0);
     HEAP32[$142>>2] = $v$098;
     $143 = (($46) + ($i$397<<2)|0);
     $j$095 = 0;$v$196 = $v$098;
     while(1) {
      $144 = (_FIPS_ec_point_new($group)|0);
      HEAP32[$v$196>>2] = $144;
      $145 = ($144|0)==(0|0);
      if ($145) {
       $ret$0 = 0;$tmp$0 = 0;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
       break L29;
      }
      $146 = ((($v$196)) + 4|0);
      $147 = (($j$095) + 1)|0;
      $148 = HEAP32[$143>>2]|0;
      $149 = (($148) + -1)|0;
      $150 = 1 << $149;
      $151 = ($147>>>0)<($150>>>0);
      if ($151) {
       $j$095 = $147;$v$196 = $146;
      } else {
       $$lcssa153 = $146;
       break;
      }
     }
     $152 = (($i$397) + 1)|0;
     $153 = ($152>>>0)<($55>>>0);
     if ($153) {
      $i$397 = $152;$v$098 = $$lcssa153;
     } else {
      $v$0$lcssa = $$lcssa153;
      break;
     }
    }
   }
   $154 = ($v$0$lcssa|0)==($141|0);
   if (!($154)) {
    _FIPS_put_error(16,187,68,7317,616);
    $ret$0 = 0;$tmp$0 = 0;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
    break;
   }
   $155 = (_FIPS_ec_point_new($group)|0);
   $156 = ($155|0)==(0|0);
   if ($156) {
    $ret$0 = 0;$tmp$0 = 0;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
   } else {
    if (!($56)) {
     $i$492 = 0;
     while(1) {
      $157 = ($i$492>>>0)<($num>>>0);
      $158 = (($50) + ($i$492<<2)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = HEAP32[$159>>2]|0;
      if ($157) {
       $161 = (($points) + ($i$492<<2)|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = (_fips_ec_point_copy($160,$162)|0);
       $164 = ($163|0)==(0);
       if ($164) {
        $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
      } else {
       $165 = (_fips_ec_point_copy($160,$generator$0)|0);
       $166 = ($165|0)==(0);
       if ($166) {
        $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
      }
      $167 = (($46) + ($i$492<<2)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168>>>0)>(1);
      do {
       if ($169) {
        $170 = HEAP32[$158>>2]|0;
        $171 = HEAP32[$170>>2]|0;
        $172 = (_fips_ec_point_dbl($group,$155,$171,$$08)|0);
        $173 = ($172|0)==(0);
        if ($173) {
         $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
         break L29;
        }
        $174 = HEAP32[$167>>2]|0;
        $175 = ($174|0)==(1);
        if ($175) {
         break;
        } else {
         $j$190 = 1;
        }
        while(1) {
         $181 = HEAP32[$158>>2]|0;
         $182 = (($181) + ($j$190<<2)|0);
         $183 = HEAP32[$182>>2]|0;
         $184 = (($j$190) + -1)|0;
         $185 = (($181) + ($184<<2)|0);
         $186 = HEAP32[$185>>2]|0;
         $187 = (_fips_ec_point_add($group,$183,$186,$155,$$08)|0);
         $188 = ($187|0)==(0);
         $180 = (($j$190) + 1)|0;
         if ($188) {
          $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
          break L29;
         }
         $176 = HEAP32[$167>>2]|0;
         $177 = (($176) + -1)|0;
         $178 = 1 << $177;
         $179 = ($180>>>0)<($178>>>0);
         if ($179) {
          $j$190 = $180;
         } else {
          break;
         }
        }
       }
      } while(0);
      $189 = (($i$492) + 1)|0;
      $190 = ($189>>>0)<($55>>>0);
      if ($190) {
       $i$492 = $189;
      } else {
       break;
      }
     }
    }
    $191 = (_FIPS_ec_points_make_affine($group,$num_val$0$lcssa,$139,$$08)|0);
    $192 = ($191|0)==(0);
    if ($192) {
     $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
    } else {
     $k$082 = (($max_len$5) + -1)|0;
     $193 = ($k$082|0)>(-1);
     L119: do {
      if ($193) {
       $194 = ($totalnum$1|0)==(0);
       if ($194) {
        $k$085 = $k$082;
        while(1) {
         $k$0 = (($k$085) + -1)|0;
         $229 = ($k$0|0)>(-1);
         if ($229) {
          $k$085 = $k$0;
         } else {
          label = 98;
          break L119;
         }
        }
       } else {
        $255 = 1;$k$085$us = $k$082;$r_is_at_infinity$084$us = 1;$r_is_inverted$083$us = 0;
       }
       while(1) {
        if ($255) {
         $i$576$us = 0;$r_is_at_infinity$179$us = $r_is_at_infinity$084$us;$r_is_inverted$178$us = $r_is_inverted$083$us;
        } else {
         $195 = (_fips_ec_point_dbl($group,$r,$r,$$08)|0);
         $196 = ($195|0)==(0);
         if ($196) {
          $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
          break L29;
         } else {
          $i$576$us = 0;$r_is_at_infinity$179$us = 0;$r_is_inverted$178$us = $r_is_inverted$083$us;
         }
        }
        while(1) {
         $197 = (($47) + ($i$576$us<<2)|0);
         $198 = HEAP32[$197>>2]|0;
         $199 = ($198>>>0)>($k$085$us>>>0);
         do {
          if ($199) {
           $200 = (($49) + ($i$576$us<<2)|0);
           $201 = HEAP32[$200>>2]|0;
           $202 = (($201) + ($k$085$us)|0);
           $203 = HEAP8[$202>>0]|0;
           $204 = $203 << 24 >> 24;
           $205 = ($203<<24>>24)==(0);
           if ($205) {
            $r_is_at_infinity$2$us = $r_is_at_infinity$179$us;$r_is_inverted$3$us = $r_is_inverted$178$us;
            break;
           }
           $206 = ($203<<24>>24)<(0);
           $$lobit$us = ($203&255) >>> 7;
           $207 = $$lobit$us&255;
           $208 = (0 - ($204))|0;
           $$10$us = $206 ? $208 : $204;
           $209 = ($207|0)==($r_is_inverted$178$us|0);
           if ($209) {
            $r_is_inverted$2$us = $r_is_inverted$178$us;
           } else {
            $210 = ($r_is_at_infinity$179$us|0)==(0);
            if ($210) {
             $211 = (_fips_ec_point_invert($group,$r,$$08)|0);
             $212 = ($211|0)==(0);
             if ($212) {
              $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
              break L29;
             }
            }
            $213 = ($r_is_inverted$178$us|0)==(0);
            $214 = $213&1;
            $r_is_inverted$2$us = $214;
           }
           $215 = ($r_is_at_infinity$179$us|0)==(0);
           $216 = $$10$us >> 1;
           $217 = (($50) + ($i$576$us<<2)|0);
           $218 = HEAP32[$217>>2]|0;
           $219 = (($218) + ($216<<2)|0);
           $220 = HEAP32[$219>>2]|0;
           if ($215) {
            $223 = (_fips_ec_point_add($group,$r,$r,$220,$$08)|0);
            $224 = ($223|0)==(0);
            if ($224) {
             $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
             break L29;
            } else {
             $r_is_at_infinity$2$us = 0;$r_is_inverted$3$us = $r_is_inverted$2$us;
             break;
            }
           } else {
            $221 = (_fips_ec_point_copy($r,$220)|0);
            $222 = ($221|0)==(0);
            if ($222) {
             $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
             break L29;
            } else {
             $r_is_at_infinity$2$us = 0;$r_is_inverted$3$us = $r_is_inverted$2$us;
             break;
            }
           }
          } else {
           $r_is_at_infinity$2$us = $r_is_at_infinity$179$us;$r_is_inverted$3$us = $r_is_inverted$178$us;
          }
         } while(0);
         $225 = (($i$576$us) + 1)|0;
         $226 = ($225>>>0)<($totalnum$1>>>0);
         if ($226) {
          $i$576$us = $225;$r_is_at_infinity$179$us = $r_is_at_infinity$2$us;$r_is_inverted$178$us = $r_is_inverted$3$us;
         } else {
          $r_is_at_infinity$2$us$lcssa = $r_is_at_infinity$2$us;$r_is_inverted$3$us$lcssa = $r_is_inverted$3$us;
          break;
         }
        }
        $k$0$us = (($k$085$us) + -1)|0;
        $227 = ($k$0$us|0)>(-1);
        $228 = ($r_is_at_infinity$2$us$lcssa|0)!=(0);
        if ($227) {
         $255 = $228;$k$085$us = $k$0$us;$r_is_at_infinity$084$us = $r_is_at_infinity$2$us$lcssa;$r_is_inverted$083$us = $r_is_inverted$3$us$lcssa;
        } else {
         break;
        }
       }
       if ($228) {
        label = 98;
       } else {
        $232 = ($r_is_inverted$3$us$lcssa|0)==(0);
        if (!($232)) {
         $233 = (_fips_ec_point_invert($group,$r,$$08)|0);
         $234 = ($233|0)==(0);
         if ($234) {
          $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
          break L29;
         }
        }
       }
      } else {
       label = 98;
      }
     } while(0);
     if ((label|0) == 98) {
      $230 = (_FIPS_ec_point_set_to_infinity($group,$r)|0);
      $231 = ($230|0)==(0);
      if ($231) {
       $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
       break;
      }
     }
     $ret$0 = 1;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
    }
   }
  }
 } while(0);
 $235 = ($new_ctx$0|0)==(0|0);
 if (!($235)) {
  _fips_bn_ctx_free($new_ctx$0);
 }
 $236 = ($tmp$0|0)==(0|0);
 if (!($236)) {
  _FIPS_ec_point_free($tmp$0);
 }
 $237 = ($wsize$0|0)==(0|0);
 if (!($237)) {
  _FIPS_free($wsize$0);
 }
 $238 = ($wNAF_len$0|0)==(0|0);
 if (!($238)) {
  _FIPS_free($wNAF_len$0);
 }
 $239 = ($wNAF$0|0)==(0|0);
 if (!($239)) {
  $240 = HEAP32[$wNAF$0>>2]|0;
  $241 = ($240|0)==(0|0);
  if (!($241)) {
   $242 = $240;$w$073 = $wNAF$0;
   while(1) {
    _FIPS_free($242);
    $243 = ((($w$073)) + 4|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = ($244|0)==(0|0);
    if ($245) {
     break;
    } else {
     $242 = $244;$w$073 = $243;
    }
   }
  }
  _FIPS_free($wNAF$0);
 }
 $246 = ($val$0|0)==(0|0);
 if (!($246)) {
  $247 = HEAP32[$val$0>>2]|0;
  $248 = ($247|0)==(0|0);
  if (!($248)) {
   $249 = $247;$v$272 = $val$0;
   while(1) {
    _FIPS_ec_point_clear_free($249);
    $250 = ((($v$272)) + 4|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ($251|0)==(0|0);
    if ($252) {
     break;
    } else {
     $249 = $251;$v$272 = $250;
    }
   }
  }
  _FIPS_free($val$0);
 }
 $253 = ($val_sub$0|0)==(0|0);
 if ($253) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 _FIPS_free($val_sub$0);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _ec_pre_comp_dup($src_) {
 $src_ = $src_|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($src_)) + 24|0);
 (_FIPS_add_lock($0,1,36,7317,129)|0);
 return ($src_|0);
}
function _ec_pre_comp_free($pre_) {
 $pre_ = $pre_|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pre_|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($pre_)) + 24|0);
 $2 = (_FIPS_add_lock($1,-1,36,7317,142)|0);
 $3 = ($2|0)>(0);
 if ($3) {
  return;
 }
 $4 = ((($pre_)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $13 = $5;
  } else {
   $9 = $7;$p$01 = $5;
   while(1) {
    _FIPS_ec_point_free($9);
    $10 = ((($p$01)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    } else {
     $9 = $11;$p$01 = $10;
    }
   }
   $$pre = HEAP32[$4>>2]|0;
   $13 = $$pre;
  }
  _FIPS_free($13);
 }
 _FIPS_free($pre_);
 return;
}
function _ec_pre_comp_clear_free($pre_) {
 $pre_ = $pre_|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pre_|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($pre_)) + 24|0);
 $2 = (_FIPS_add_lock($1,-1,36,7317,165)|0);
 $3 = ($2|0)>(0);
 if ($3) {
  return;
 }
 $4 = ((($pre_)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $13 = $5;
  } else {
   $9 = $7;$p$01 = $5;
   while(1) {
    _FIPS_ec_point_clear_free($9);
    _FIPS_openssl_cleanse($p$01,4);
    $10 = ((($p$01)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    } else {
     $9 = $11;$p$01 = $10;
    }
   }
   $$pre = HEAP32[$4>>2]|0;
   $13 = $$pre;
  }
  _FIPS_free($13);
 }
 _FIPS_openssl_cleanse($pre_,28);
 _FIPS_free($pre_);
 return;
}
function _compute_wNAF($scalar,$w,$ret_len) {
 $scalar = $scalar|0;
 $w = $w|0;
 $ret_len = $ret_len|0;
 var $$ = 0, $$0 = 0, $$22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $digit$0 = 0, $digit$1 = 0, $j$0 = 0, $j$0$lcssa30 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $r$0$ph = 0, $w$off = 0, $window_val$0 = 0, $window_val$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($scalar)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $3 = (_FIPS_malloc(1,7317,206)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    _FIPS_put_error(16,143,65,7317,209);
    $r$0$ph = 0;
    break;
   }
   HEAP8[$3>>0] = 0;
   HEAP32[$ret_len>>2] = 1;
   $$0 = $3;
   return ($$0|0);
  } else {
   $w$off = (($w) + -1)|0;
   $5 = ($w$off>>>0)>(6);
   if ($5) {
    _FIPS_put_error(16,143,68,7317,219);
    $r$0$ph = 0;
    break;
   }
   $6 = 1 << $w;
   $7 = $6 << 1;
   $8 = (($7) + -1)|0;
   $9 = ((($scalar)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   $$ = $11 ? 1 : -1;
   $12 = HEAP32[$scalar>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    _FIPS_put_error(16,143,68,7317,233);
    $r$0$ph = 0;
    break;
   }
   $14 = (_FIPS_bn_num_bits($scalar)|0);
   $15 = (($14) + 1)|0;
   $16 = (_FIPS_malloc($15,7317,238)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    _FIPS_put_error(16,143,65,7317,243);
    $r$0$ph = 0;
    break;
   }
   $18 = HEAP32[$scalar>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & $8;
   $21 = (($w) + 1)|0;
   $22 = (0 - ($6))|0;
   $23 = $8 >> 1;
   $j$0 = 0;$window_val$0 = $20;
   while(1) {
    $24 = ($window_val$0|0)==(0);
    if ($24) {
     $25 = (($21) + ($j$0))|0;
     $26 = ($25>>>0)<($14>>>0);
     if ($26) {
      $digit$1 = 0;$window_val$1 = 0;
     } else {
      $j$0$lcssa30 = $j$0;
      label = 23;
      break;
     }
    } else {
     $27 = $window_val$0 & 1;
     $28 = ($27|0)==(0);
     if ($28) {
      $digit$1 = 0;$window_val$1 = $window_val$0;
     } else {
      $29 = $window_val$0 & $6;
      $30 = ($29|0)==(0);
      if ($30) {
       $digit$0 = $window_val$0;
      } else {
       $31 = (($window_val$0) - ($7))|0;
       $32 = (($21) + ($j$0))|0;
       $33 = ($32>>>0)<($14>>>0);
       $34 = $window_val$0 & $23;
       $$22 = $33 ? $31 : $34;
       $digit$0 = $$22;
      }
      $notlhs = ($digit$0|0)<=($22|0);
      $notrhs = ($digit$0|0)>=($6|0);
      $or$cond$not = $notrhs | $notlhs;
      $35 = $digit$0 & 1;
      $36 = ($35|0)==(0);
      $or$cond3 = $or$cond$not | $36;
      if ($or$cond3) {
       label = 18;
       break;
      }
      $37 = (($window_val$0) - ($digit$0))|0;
      $38 = ($window_val$0|0)==($digit$0|0);
      $39 = ($37|0)==($7|0);
      $or$cond4 = $38 | $39;
      $40 = ($37|0)==($6|0);
      $or$cond5 = $40 | $or$cond4;
      if ($or$cond5) {
       $digit$1 = $digit$0;$window_val$1 = $37;
      } else {
       label = 20;
       break;
      }
     }
    }
    $41 = Math_imul($digit$1, $$)|0;
    $42 = $41&255;
    $43 = (($j$0) + 1)|0;
    $44 = (($16) + ($j$0)|0);
    HEAP8[$44>>0] = $42;
    $45 = $window_val$1 >> 1;
    $46 = (($43) + ($w))|0;
    $47 = (_FIPS_bn_is_bit_set($scalar,$46)|0);
    $48 = $47 << $w;
    $49 = (($48) + ($45))|0;
    $50 = ($49|0)>($7|0);
    if ($50) {
     label = 22;
     break;
    } else {
     $j$0 = $43;$window_val$0 = $49;
    }
   }
   if ((label|0) == 18) {
    _FIPS_put_error(16,143,68,7317,281);
    $r$0$ph = $16;
    break;
   }
   else if ((label|0) == 20) {
    _FIPS_put_error(16,143,68,7317,292);
    $r$0$ph = $16;
    break;
   }
   else if ((label|0) == 22) {
    _FIPS_put_error(16,143,68,7317,304);
    $r$0$ph = $16;
    break;
   }
   else if ((label|0) == 23) {
    $51 = ($j$0$lcssa30>>>0)>($15>>>0);
    if ($51) {
     _FIPS_put_error(16,143,68,7317,311);
     $r$0$ph = $16;
     break;
    }
    HEAP32[$ret_len>>2] = $j$0$lcssa30;
    $$0 = $16;
    return ($$0|0);
   }
  }
 } while(0);
 _FIPS_free($r$0$ph);
 $$0 = 0;
 return ($$0|0);
}
function _FIPS_ecdsa_verify_digest($key,$dig,$dlen,$s) {
 $key = $key|0;
 $dig = $dig|0;
 $dlen = $dlen|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(100)>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiiii[$2 & 31]($dig,$dlen,$s,$key)|0);
 return ($3|0);
}
function _FIPS_ecdsa_sign_digest($key,$dig,$dlen) {
 $key = $key|0;
 $dig = $dig|0;
 $dlen = $dlen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(100)>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiiiii[$2 & 31]($dig,$dlen,0,0,$key)|0);
 return ($3|0);
}
function _ecdsa_do_sign($dgst,$dgst_len,$in_kinv,$in_r,$eckey) {
 $dgst = $dgst|0;
 $dgst_len = $dgst_len|0;
 $in_kinv = $in_kinv|0;
 $in_r = $in_r|0;
 $eckey = $eckey|0;
 var $$0 = 0, $$08 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $kinv = 0, $m$1$ph = 0, $m$110 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $order$0 = 0, $order$1$ph = 0, $order$114 = 0, $ret$0 = 0, $tmp$0 = 0, $tmp$1$ph = 0, $tmp$112 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kinv = sp;
 HEAP32[$kinv>>2] = 0;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _FIPS_put_error(45,164,115,7348,244);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_FIPS_ec_key_get0_group($eckey)|0);
 $3 = (_FIPS_ec_key_get0_private_key($eckey)|0);
 $4 = ($2|0)==(0|0);
 $5 = ($3|0)==(0|0);
 $or$cond3 = $4 | $5;
 if ($or$cond3) {
  _FIPS_put_error(42,101,67,7348,255);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_fips_check_ec_prng($eckey)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_FIPS_ecdsa_sig_new()|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  _FIPS_put_error(42,101,65,7348,267);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($8)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_fips_bn_ctx_new()|0);
 $13 = ($12|0)==(0|0);
 L16: do {
  if ($13) {
   $order$0 = 0;$tmp$0 = 0;
   label = 12;
  } else {
   $14 = (_FIPS_bn_new()|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $order$0 = 0;$tmp$0 = 0;
    label = 12;
   } else {
    $16 = (_FIPS_bn_new()|0);
    $17 = ($16|0)==(0|0);
    if ($17) {
     $order$0 = $14;$tmp$0 = 0;
     label = 12;
    } else {
     $18 = (_FIPS_bn_new()|0);
     $19 = ($18|0)==(0|0);
     if ($19) {
      $order$0 = $14;$tmp$0 = $16;
      label = 12;
     } else {
      $20 = (_FIPS_ec_group_get_order($2,$14,$12)|0);
      $21 = ($20|0)==(0);
      if ($21) {
       _FIPS_put_error(42,101,16,7348,281);
       $m$1$ph = $18;$order$1$ph = $14;$tmp$1$ph = $16;
       label = 44;
       break;
      }
      $22 = (_FIPS_bn_num_bits($14)|0);
      $23 = $dgst_len << 3;
      $24 = ($23|0)>($22|0);
      $25 = (($22) + 7)|0;
      $26 = (($25|0) / 8)&-1;
      $$08 = $24 ? $26 : $dgst_len;
      $27 = (_FIPS_bn_bin2bn($dgst,$$08,$18)|0);
      $28 = ($27|0)==(0|0);
      if ($28) {
       _FIPS_put_error(42,101,3,7348,292);
       $m$1$ph = $18;$order$1$ph = $14;$tmp$1$ph = $16;
       label = 44;
       break;
      }
      $29 = $$08 << 3;
      $30 = ($29|0)>($22|0);
      if ($30) {
       $31 = $22 & 7;
       $32 = (8 - ($31))|0;
       $33 = (_fips_bn_rshift($18,$18,$32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        _FIPS_put_error(42,101,3,7348,298);
        $m$1$ph = $18;$order$1$ph = $14;$tmp$1$ph = $16;
        label = 44;
        break;
       }
      }
      $35 = ($in_kinv|0)==(0|0);
      $36 = ($in_r|0)==(0|0);
      $or$cond5 = $35 | $36;
      $37 = ((($11)) + 4|0);
      $38 = ($in_kinv|0)!=(0|0);
      $39 = ($in_r|0)!=(0|0);
      $or$cond7 = $38 & $39;
      L31: do {
       if ($or$cond5) {
        while(1) {
         $40 = HEAP32[(100)>>2]|0;
         $41 = ((($40)) + 8|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = (FUNCTION_TABLE_iiiii[$42 & 31]($eckey,$12,$kinv,$8)|0);
         $44 = ($43|0)==(0);
         if ($44) {
          break;
         }
         $45 = HEAP32[$kinv>>2]|0;
         $46 = HEAP32[$8>>2]|0;
         $47 = (_fips_bn_mod_mul($16,$3,$46,$14,$12)|0);
         $48 = ($47|0)==(0);
         if ($48) {
          label = 37;
          break L31;
         }
         $49 = (_fips_bn_mod_add_quick($11,$16,$18,$14)|0);
         $50 = ($49|0)==(0);
         if ($50) {
          label = 39;
          break L31;
         }
         $51 = (_fips_bn_mod_mul($11,$11,$45,$14,$12)|0);
         $52 = ($51|0)==(0);
         if ($52) {
          label = 41;
          break L31;
         }
         $53 = HEAP32[$37>>2]|0;
         $54 = ($53|0)==(0);
         if (!($54)) {
          $m$110 = $18;$order$114 = $14;$ret$0 = $8;$tmp$112 = $16;
          break L16;
         }
         if ($or$cond7) {
          label = 43;
          break L31;
         }
        }
        _FIPS_put_error(42,101,42,7348,308);
        $m$1$ph = $18;$order$1$ph = $14;$tmp$1$ph = $16;
        label = 44;
        break L16;
       } else {
        L41: do {
         if ($or$cond7) {
          $55 = HEAP32[$8>>2]|0;
          $56 = (_fips_bn_copy($55,$in_r)|0);
          $57 = ($56|0)==(0|0);
          if (!($57)) {
           $58 = HEAP32[$8>>2]|0;
           $59 = (_fips_bn_mod_mul($16,$3,$58,$14,$12)|0);
           $60 = ($59|0)==(0);
           if ($60) {
            label = 37;
            break L31;
           }
           $61 = (_fips_bn_mod_add_quick($11,$16,$18,$14)|0);
           $62 = ($61|0)==(0);
           if ($62) {
            label = 39;
            break L31;
           }
           $63 = (_fips_bn_mod_mul($11,$11,$in_kinv,$14,$12)|0);
           $64 = ($63|0)==(0);
           if ($64) {
            label = 41;
            break L31;
           }
           $65 = HEAP32[$37>>2]|0;
           $66 = ($65|0)==(0);
           if ($66) {
            label = 43;
            break L31;
           } else {
            $m$110 = $18;$order$114 = $14;$ret$0 = $8;$tmp$112 = $16;
            break L16;
           }
          }
         } else {
          while(1) {
           $67 = HEAP32[$8>>2]|0;
           $68 = (_fips_bn_copy($67,$in_r)|0);
           $69 = ($68|0)==(0|0);
           if ($69) {
            break L41;
           }
           $70 = HEAP32[$8>>2]|0;
           $71 = (_fips_bn_mod_mul($16,$3,$70,$14,$12)|0);
           $72 = ($71|0)==(0);
           if ($72) {
            label = 37;
            break L31;
           }
           $73 = (_fips_bn_mod_add_quick($11,$16,$18,$14)|0);
           $74 = ($73|0)==(0);
           if ($74) {
            label = 39;
            break L31;
           }
           $75 = (_fips_bn_mod_mul($11,$11,$in_kinv,$14,$12)|0);
           $76 = ($75|0)==(0);
           if ($76) {
            label = 41;
            break L31;
           }
           $77 = HEAP32[$37>>2]|0;
           $78 = ($77|0)==(0);
           if (!($78)) {
            $m$110 = $18;$order$114 = $14;$ret$0 = $8;$tmp$112 = $16;
            break L16;
           }
          }
         }
        } while(0);
        _FIPS_put_error(42,101,65,7348,318);
        $m$1$ph = $18;$order$1$ph = $14;$tmp$1$ph = $16;
        label = 44;
        break L16;
       }
      } while(0);
      if ((label|0) == 37) {
       _FIPS_put_error(42,101,3,7348,325);
       $m$1$ph = $18;$order$1$ph = $14;$tmp$1$ph = $16;
       label = 44;
       break;
      }
      else if ((label|0) == 39) {
       _FIPS_put_error(42,101,3,7348,330);
       $m$1$ph = $18;$order$1$ph = $14;$tmp$1$ph = $16;
       label = 44;
       break;
      }
      else if ((label|0) == 41) {
       _FIPS_put_error(42,101,3,7348,335);
       $m$1$ph = $18;$order$1$ph = $14;$tmp$1$ph = $16;
       label = 44;
       break;
      }
      else if ((label|0) == 43) {
       _FIPS_put_error(42,101,106,7348,344);
       $m$1$ph = $18;$order$1$ph = $14;$tmp$1$ph = $16;
       label = 44;
       break;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  _FIPS_put_error(42,101,65,7348,275);
  $m$1$ph = 0;$order$1$ph = $order$0;$tmp$1$ph = $tmp$0;
  label = 44;
 }
 if ((label|0) == 44) {
  _FIPS_ecdsa_sig_free($8);
  $m$110 = $m$1$ph;$order$114 = $order$1$ph;$ret$0 = 0;$tmp$112 = $tmp$1$ph;
 }
 if (!($13)) {
  _fips_bn_ctx_free($12);
 }
 $79 = ($m$110|0)==(0|0);
 if (!($79)) {
  _FIPS_bn_clear_free($m$110);
 }
 $80 = ($tmp$112|0)==(0|0);
 if (!($80)) {
  _FIPS_bn_clear_free($tmp$112);
 }
 $81 = ($order$114|0)==(0|0);
 if (!($81)) {
  _FIPS_bn_free($order$114);
 }
 $82 = HEAP32[$kinv>>2]|0;
 $83 = ($82|0)==(0|0);
 if ($83) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 _FIPS_bn_clear_free($82);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _ecdsa_sign_setup($eckey,$ctx_in,$kinvp,$rp) {
 $eckey = $eckey|0;
 $ctx_in = $ctx_in|0;
 $kinvp = $kinvp|0;
 $rp = $rp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $ret$08 = 0, $tmp_point$0$ph = 0;
 var $tmp_point$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($eckey|0)==(0|0);
 if (!($0)) {
  $1 = (_FIPS_ec_key_get0_group($eckey)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ($ctx_in|0)==(0|0);
   if ($3) {
    $4 = (_fips_bn_ctx_new()|0);
    $5 = ($4|0)==(0|0);
    if ($5) {
     _FIPS_put_error(42,103,65,7348,110);
     $$0 = 0;
     return ($$0|0);
    } else {
     $ctx$0 = $4;
    }
   } else {
    $ctx$0 = $ctx_in;
   }
   $6 = (_FIPS_bn_new()|0);
   $7 = (_FIPS_bn_new()|0);
   $8 = (_FIPS_bn_new()|0);
   $9 = (_FIPS_bn_new()|0);
   $10 = ($6|0)!=(0|0);
   $11 = ($7|0)!=(0|0);
   $or$cond = $10 & $11;
   $12 = ($8|0)!=(0|0);
   $or$cond3 = $or$cond & $12;
   $13 = ($9|0)!=(0|0);
   $or$cond5 = $or$cond3 & $13;
   L9: do {
    if ($or$cond5) {
     $14 = (_FIPS_ec_point_new($1)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      _FIPS_put_error(42,103,16,7348,128);
      $tmp_point$0$ph = 0;
      label = 37;
      break;
     }
     $16 = (_FIPS_ec_group_get_order($1,$8,$ctx$0)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      _FIPS_put_error(42,103,16,7348,133);
      $tmp_point$0$ph = $14;
      label = 37;
      break;
     }
     $18 = (_fips_check_ec_prng($eckey)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $tmp_point$0$ph = $14;
      label = 37;
     } else {
      $20 = (_FIPS_bn_rand_range($6,$8)|0);
      $21 = ($20|0)==(0);
      L18: do {
       if (!($21)) {
        $22 = ((($6)) + 4|0);
        $23 = ((($7)) + 4|0);
        while(1) {
         $24 = HEAP32[$22>>2]|0;
         $25 = ($24|0)==(0);
         if (!($25)) {
          $28 = (_fips_bn_add($6,$6,$8)|0);
          $29 = ($28|0)==(0);
          if ($29) {
           $tmp_point$0$ph = $14;
           label = 37;
           break L9;
          }
          $30 = (_FIPS_bn_num_bits($6)|0);
          $31 = (_FIPS_bn_num_bits($8)|0);
          $32 = ($30|0)>($31|0);
          if (!($32)) {
           $33 = (_fips_bn_add($6,$6,$8)|0);
           $34 = ($33|0)==(0);
           if ($34) {
            $tmp_point$0$ph = $14;
            label = 37;
            break L9;
           }
          }
          $35 = (_FIPS_ec_point_mul($1,$14,$6,0,0,$ctx$0)|0);
          $36 = ($35|0)==(0);
          if ($36) {
           label = 23;
           break;
          }
          $37 = (_FIPS_ec_group_method_of($1)|0);
          $38 = (_FIPS_ec_method_get_field_type($37)|0);
          $39 = ($38|0)==(406);
          if ($39) {
           $40 = (_FIPS_ec_point_get_affine_coordinates_gfp($1,$14,$9,0,$ctx$0)|0);
           $41 = ($40|0)==(0);
           if ($41) {
            label = 26;
            break;
           }
          }
          $42 = (_fips_bn_nnmod($7,$9,$8,$ctx$0)|0);
          $43 = ($42|0)==(0);
          if ($43) {
           label = 28;
           break;
          }
          $44 = HEAP32[$23>>2]|0;
          $45 = ($44|0)==(0);
          if (!($45)) {
           label = 30;
           break;
          }
         }
         $26 = (_FIPS_bn_rand_range($6,$8)|0);
         $27 = ($26|0)==(0);
         if ($27) {
          break L18;
         }
        }
        if ((label|0) == 23) {
         _FIPS_put_error(42,103,16,7348,165);
         $tmp_point$0$ph = $14;
         label = 37;
         break L9;
        }
        else if ((label|0) == 26) {
         _FIPS_put_error(42,103,16,7348,173);
         $tmp_point$0$ph = $14;
         label = 37;
         break L9;
        }
        else if ((label|0) == 28) {
         _FIPS_put_error(42,103,3,7348,190);
         $tmp_point$0$ph = $14;
         label = 37;
         break L9;
        }
        else if ((label|0) == 30) {
         $46 = (_fips_bn_mod_inverse($6,$6,$8,$ctx$0)|0);
         $47 = ($46|0)==(0|0);
         if ($47) {
          _FIPS_put_error(42,103,3,7348,199);
          $tmp_point$0$ph = $14;
          label = 37;
          break L9;
         }
         $48 = HEAP32[$rp>>2]|0;
         $49 = ($48|0)==(0|0);
         if (!($49)) {
          _FIPS_bn_clear_free($48);
         }
         $50 = HEAP32[$kinvp>>2]|0;
         $51 = ($50|0)==(0|0);
         if (!($51)) {
          _FIPS_bn_clear_free($50);
         }
         HEAP32[$rp>>2] = $7;
         HEAP32[$kinvp>>2] = $6;
         $ret$08 = 1;$tmp_point$06 = $14;
         break L9;
        }
       }
      } while(0);
      _FIPS_put_error(42,103,104,7348,149);
      $tmp_point$0$ph = $14;
      label = 37;
     }
    } else {
     _FIPS_put_error(42,103,65,7348,123);
     $tmp_point$0$ph = 0;
     label = 37;
    }
   } while(0);
   if ((label|0) == 37) {
    if ($10) {
     _FIPS_bn_clear_free($6);
    }
    if ($11) {
     _FIPS_bn_clear_free($7);
     $ret$08 = 0;$tmp_point$06 = $tmp_point$0$ph;
    } else {
     $ret$08 = 0;$tmp_point$06 = $tmp_point$0$ph;
    }
   }
   if ($3) {
    _fips_bn_ctx_free($ctx$0);
   }
   if ($12) {
    _FIPS_bn_free($8);
   }
   $52 = ($tmp_point$06|0)==(0|0);
   if (!($52)) {
    _FIPS_ec_point_free($tmp_point$06);
   }
   if (!($13)) {
    $$0 = $ret$08;
    return ($$0|0);
   }
   _FIPS_bn_clear_free($9);
   $$0 = $ret$08;
   return ($$0|0);
  }
 }
 _FIPS_put_error(42,103,67,7348,102);
 $$0 = 0;
 return ($$0|0);
}
function _ecdsa_do_verify($dgst,$dgst_len,$sig,$eckey) {
 $dgst = $dgst|0;
 $dgst_len = $dgst_len|0;
 $sig = $sig|0;
 $eckey = $eckey|0;
 var $$0 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0, $point$0 = 0, $ret$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _FIPS_put_error(45,165,115,7348,387);
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ($eckey|0)==(0|0);
 if (!($2)) {
  $3 = (_FIPS_ec_key_get0_group($eckey)|0);
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (_FIPS_ec_key_get0_public_key($eckey)|0);
   $6 = ($5|0)==(0|0);
   $7 = ($sig|0)==(0|0);
   $or$cond = $7 | $6;
   if (!($or$cond)) {
    $8 = (_fips_bn_ctx_new()|0);
    $9 = ($8|0)==(0|0);
    if ($9) {
     _FIPS_put_error(42,102,65,7348,403);
     $$0 = -1;
     return ($$0|0);
    }
    _fips_bn_ctx_start($8);
    $10 = (_fips_bn_ctx_get($8)|0);
    $11 = (_fips_bn_ctx_get($8)|0);
    $12 = (_fips_bn_ctx_get($8)|0);
    $13 = (_fips_bn_ctx_get($8)|0);
    $14 = (_fips_bn_ctx_get($8)|0);
    $15 = ($14|0)==(0|0);
    L13: do {
     if ($15) {
      _FIPS_put_error(42,102,3,7348,414);
      $point$0 = 0;$ret$0 = -1;
     } else {
      $16 = (_FIPS_ec_group_get_order($3,$10,$8)|0);
      $17 = ($16|0)==(0);
      if ($17) {
       _FIPS_put_error(42,102,16,7348,420);
       $point$0 = 0;$ret$0 = -1;
       break;
      }
      $18 = HEAP32[$sig>>2]|0;
      $19 = ((($18)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0);
      if (!($21)) {
       $22 = ((($18)) + 12|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)==(0);
       if ($24) {
        $25 = (_fips_bn_ucmp($18,$10)|0);
        $26 = ($25|0)>(-1);
        if (!($26)) {
         $27 = ((($sig)) + 4|0);
         $28 = HEAP32[$27>>2]|0;
         $29 = ((($28)) + 4|0);
         $30 = HEAP32[$29>>2]|0;
         $31 = ($30|0)==(0);
         if (!($31)) {
          $32 = ((($28)) + 12|0);
          $33 = HEAP32[$32>>2]|0;
          $34 = ($33|0)==(0);
          if ($34) {
           $35 = (_fips_bn_ucmp($28,$10)|0);
           $36 = ($35|0)>(-1);
           if (!($36)) {
            $37 = HEAP32[$27>>2]|0;
            $38 = (_fips_bn_mod_inverse($12,$37,$10,$8)|0);
            $39 = ($38|0)==(0|0);
            if ($39) {
             _FIPS_put_error(42,102,3,7348,435);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $40 = (_FIPS_bn_num_bits($10)|0);
            $41 = $dgst_len << 3;
            $42 = ($41|0)>($40|0);
            $43 = (($40) + 7)|0;
            $44 = (($43|0) / 8)&-1;
            $$02 = $42 ? $44 : $dgst_len;
            $45 = (_FIPS_bn_bin2bn($dgst,$$02,$13)|0);
            $46 = ($45|0)==(0|0);
            if ($46) {
             _FIPS_put_error(42,102,3,7348,447);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $47 = $$02 << 3;
            $48 = ($47|0)>($40|0);
            do {
             if ($48) {
              $49 = $40 & 7;
              $50 = (8 - ($49))|0;
              $51 = (_fips_bn_rshift($13,$13,$50)|0);
              $52 = ($51|0)==(0);
              if (!($52)) {
               break;
              }
              _FIPS_put_error(42,102,3,7348,453);
              $point$0 = 0;$ret$0 = -1;
              break L13;
             }
            } while(0);
            $53 = (_fips_bn_mod_mul($11,$13,$12,$10,$8)|0);
            $54 = ($53|0)==(0);
            if ($54) {
             _FIPS_put_error(42,102,3,7348,459);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $55 = HEAP32[$sig>>2]|0;
            $56 = (_fips_bn_mod_mul($12,$55,$12,$10,$8)|0);
            $57 = ($56|0)==(0);
            if ($57) {
             _FIPS_put_error(42,102,3,7348,465);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $58 = (_FIPS_ec_point_new($3)|0);
            $59 = ($58|0)==(0|0);
            if ($59) {
             _FIPS_put_error(42,102,65,7348,471);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $60 = (_FIPS_ec_point_mul($3,$58,$11,$5,$12,$8)|0);
            $61 = ($60|0)==(0);
            if ($61) {
             _FIPS_put_error(42,102,16,7348,476);
             $point$0 = $58;$ret$0 = -1;
             break;
            }
            $62 = (_FIPS_ec_group_method_of($3)|0);
            $63 = (_FIPS_ec_method_get_field_type($62)|0);
            $64 = ($63|0)==(406);
            do {
             if ($64) {
              $65 = (_FIPS_ec_point_get_affine_coordinates_gfp($3,$58,$14,0,$8)|0);
              $66 = ($65|0)==(0);
              if (!($66)) {
               break;
              }
              _FIPS_put_error(42,102,16,7348,484);
              $point$0 = $58;$ret$0 = -1;
              break L13;
             }
            } while(0);
            $67 = (_fips_bn_nnmod($11,$14,$10,$8)|0);
            $68 = ($67|0)==(0);
            if ($68) {
             _FIPS_put_error(42,102,3,7348,501);
             $point$0 = $58;$ret$0 = -1;
             break;
            } else {
             $69 = HEAP32[$sig>>2]|0;
             $70 = (_fips_bn_ucmp($11,$69)|0);
             $71 = ($70|0)==(0);
             $72 = $71&1;
             $point$0 = $58;$ret$0 = $72;
             break;
            }
           }
          }
         }
        }
       }
      }
      _FIPS_put_error(42,102,100,7348,428);
      $point$0 = 0;$ret$0 = 0;
     }
    } while(0);
    _fips_bn_ctx_end($8);
    _fips_bn_ctx_free($8);
    $73 = ($point$0|0)==(0|0);
    if ($73) {
     $$0 = $ret$0;
     return ($$0|0);
    }
    _FIPS_ec_point_free($point$0);
    $$0 = $ret$0;
    return ($$0|0);
   }
  }
 }
 _FIPS_put_error(42,102,103,7348,396);
 $$0 = -1;
 return ($$0|0);
}
function _FIPS_evp_sha1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (112|0);
}
function _FIPS_evp_sha256() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (188|0);
}
function _init256($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fips_sha256_init($1)|0);
 return ($2|0);
}
function _update256($ctx,$data,$count) {
 $ctx = $ctx|0;
 $data = $data|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fips_sha256_update($1,$data,$count)|0);
 return ($2|0);
}
function _final256($ctx,$md) {
 $ctx = $ctx|0;
 $md = $md|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fips_sha256_final($md,$1)|0);
 return ($2|0);
}
function _init($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fips_sha1_init($1)|0);
 return ($2|0);
}
function _update($ctx,$data,$count) {
 $ctx = $ctx|0;
 $data = $data|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fips_sha1_update($1,$data,$count)|0);
 return ($2|0);
}
function _final($ctx,$md) {
 $ctx = $ctx|0;
 $md = $md|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fips_sha1_final($md,$1)|0);
 return ($2|0);
}
function _FIPS_rsa_pkcs1_ssleay() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (264|0);
}
function _RSA_eay_public_encrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $i$0 = 0, $or$cond = 0, $or$cond3 = 0, $r$06 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _FIPS_put_error(45,142,115,7383,169);
  $$0 = -1;
  return ($$0|0);
 }
 $2 = (_FIPS_module_mode()|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($rsa)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 1024;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = ((($rsa)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_FIPS_bn_num_bits($9)|0);
   $11 = ($10|0)<(1024);
   if ($11) {
    _FIPS_put_error(4,104,120,7383,176);
    $$0 = -1;
    return ($$0|0);
   }
  }
 }
 $12 = ((($rsa)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_FIPS_bn_num_bits($13)|0);
 $15 = ($14|0)>(16384);
 if ($15) {
  _FIPS_put_error(4,104,105,7383,183);
  $$0 = -1;
  return ($$0|0);
 }
 $16 = HEAP32[$12>>2]|0;
 $17 = ((($rsa)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_fips_bn_ucmp($16,$18)|0);
 $20 = ($19|0)<(1);
 if ($20) {
  _FIPS_put_error(4,104,101,7383,189);
  $$0 = -1;
  return ($$0|0);
 }
 $21 = HEAP32[$12>>2]|0;
 $22 = (_FIPS_bn_num_bits($21)|0);
 $23 = ($22|0)>(3072);
 if ($23) {
  $24 = HEAP32[$17>>2]|0;
  $25 = (_FIPS_bn_num_bits($24)|0);
  $26 = ($25|0)>(64);
  if ($26) {
   _FIPS_put_error(4,104,101,7383,198);
   $$0 = -1;
   return ($$0|0);
  }
 }
 $27 = (_fips_bn_ctx_new()|0);
 $28 = ($27|0)==(0|0);
 if ($28) {
  $$0 = -1;
  return ($$0|0);
 }
 _fips_bn_ctx_start($27);
 $29 = (_fips_bn_ctx_get($27)|0);
 $30 = (_fips_bn_ctx_get($27)|0);
 $31 = HEAP32[$12>>2]|0;
 $32 = (_FIPS_bn_num_bits($31)|0);
 $33 = (($32) + 7)|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (_FIPS_malloc($34,7383,208)|0);
 $36 = ($29|0)!=(0|0);
 $37 = ($30|0)!=(0|0);
 $or$cond = $36 & $37;
 $38 = ($35|0)!=(0|0);
 $or$cond3 = $or$cond & $38;
 L27: do {
  if ($or$cond3) {
   switch ($padding|0) {
   case 1:  {
    $39 = (_fips_rsa_padding_add_pkcs1_type_2($35,$34,$from,$flen)|0);
    $i$0 = $39;
    break;
   }
   case 4:  {
    $40 = (_fips_rsa_padding_add_pkcs1_oaep($35,$34,$from,$flen,0,0)|0);
    $i$0 = $40;
    break;
   }
   case 2:  {
    $41 = (_fips_rsa_padding_add_sslv23($35,$34,$from,$flen)|0);
    $i$0 = $41;
    break;
   }
   case 3:  {
    $42 = (_fips_rsa_padding_add_none($35,$34,$from,$flen)|0);
    $i$0 = $42;
    break;
   }
   default: {
    _FIPS_put_error(4,104,118,7383,232);
    $r$06 = -1;
    break L27;
   }
   }
   $43 = ($i$0|0)<(1);
   if ($43) {
    $r$06 = -1;
   } else {
    $44 = (_FIPS_bn_bin2bn($35,$34,$29)|0);
    $45 = ($44|0)==(0|0);
    if ($45) {
     $r$06 = -1;
    } else {
     $46 = HEAP32[$12>>2]|0;
     $47 = (_fips_bn_ucmp($29,$46)|0);
     $48 = ($47|0)>(-1);
     if ($48) {
      _FIPS_put_error(4,104,132,7383,242);
      $r$06 = -1;
      break;
     }
     $49 = ((($rsa)) + 60|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50 & 2;
     $52 = ($51|0)==(0);
     $$pre = ((($rsa)) + 64|0);
     if (!($52)) {
      $53 = HEAP32[$12>>2]|0;
      $54 = (_fips_bn_mont_ctx_set_locked($$pre,9,$53,$27)|0);
      $55 = ($54|0)==(0|0);
      if ($55) {
       $r$06 = -1;
       break;
      }
     }
     $56 = ((($rsa)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($57)) + 24|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$17>>2]|0;
     $61 = HEAP32[$12>>2]|0;
     $62 = HEAP32[$$pre>>2]|0;
     $63 = (FUNCTION_TABLE_iiiiiii[$59 & 31]($30,$29,$60,$61,$27,$62)|0);
     $64 = ($63|0)==(0);
     if ($64) {
      $r$06 = -1;
     } else {
      $65 = (_FIPS_bn_num_bits($30)|0);
      $66 = (($65) + 7)|0;
      $67 = (($66|0) / 8)&-1;
      $68 = (($34) - ($67))|0;
      $69 = (($to) + ($68)|0);
      $70 = (_FIPS_bn_bn2bin($30,$69)|0);
      $71 = (($34) - ($70))|0;
      $72 = ($71|0)>(0);
      if ($72) {
       _memset(($to|0),0,($71|0))|0;
       $r$06 = $34;
      } else {
       $r$06 = $34;
      }
     }
    }
   }
  } else {
   _FIPS_put_error(4,104,65,7383,211);
   $r$06 = -1;
  }
 } while(0);
 _fips_bn_ctx_end($27);
 _fips_bn_ctx_free($27);
 $73 = ($35|0)==(0|0);
 if ($73) {
  $$0 = $r$06;
  return ($$0|0);
 }
 _FIPS_openssl_cleanse($35,$34);
 _FIPS_free($35);
 $$0 = $r$06;
 return ($$0|0);
}
function _RSA_eay_public_decrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $r$0 = 0, $r$18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _FIPS_put_error(45,141,115,7383,695);
  $$0 = -1;
  return ($$0|0);
 }
 $2 = (_FIPS_module_mode()|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($rsa)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 1024;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = ((($rsa)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_FIPS_bn_num_bits($9)|0);
   $11 = ($10|0)<(1024);
   if ($11) {
    _FIPS_put_error(4,103,120,7383,702);
    $$0 = -1;
    return ($$0|0);
   }
  }
 }
 $12 = ((($rsa)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_FIPS_bn_num_bits($13)|0);
 $15 = ($14|0)>(16384);
 if ($15) {
  _FIPS_put_error(4,103,105,7383,709);
  $$0 = -1;
  return ($$0|0);
 }
 $16 = HEAP32[$12>>2]|0;
 $17 = ((($rsa)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_fips_bn_ucmp($16,$18)|0);
 $20 = ($19|0)<(1);
 if ($20) {
  _FIPS_put_error(4,103,101,7383,715);
  $$0 = -1;
  return ($$0|0);
 }
 $21 = HEAP32[$12>>2]|0;
 $22 = (_FIPS_bn_num_bits($21)|0);
 $23 = ($22|0)>(3072);
 if ($23) {
  $24 = HEAP32[$17>>2]|0;
  $25 = (_FIPS_bn_num_bits($24)|0);
  $26 = ($25|0)>(64);
  if ($26) {
   _FIPS_put_error(4,103,101,7383,724);
   $$0 = -1;
   return ($$0|0);
  }
 }
 $27 = (_fips_bn_ctx_new()|0);
 $28 = ($27|0)==(0|0);
 if ($28) {
  $$0 = -1;
  return ($$0|0);
 }
 _fips_bn_ctx_start($27);
 $29 = (_fips_bn_ctx_get($27)|0);
 $30 = (_fips_bn_ctx_get($27)|0);
 $31 = HEAP32[$12>>2]|0;
 $32 = (_FIPS_bn_num_bits($31)|0);
 $33 = (($32) + 7)|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (_FIPS_malloc($34,7383,734)|0);
 $36 = ($29|0)!=(0|0);
 $37 = ($30|0)!=(0|0);
 $or$cond = $36 & $37;
 $38 = ($35|0)!=(0|0);
 $or$cond3 = $or$cond & $38;
 L27: do {
  if ($or$cond3) {
   $39 = ($34|0)<($flen|0);
   if ($39) {
    _FIPS_put_error(4,103,108,7383,745);
    $r$18 = -1;
    break;
   }
   $40 = (_FIPS_bn_bin2bn($from,$flen,$29)|0);
   $41 = ($40|0)==(0|0);
   if ($41) {
    $r$18 = -1;
   } else {
    $42 = HEAP32[$12>>2]|0;
    $43 = (_fips_bn_ucmp($29,$42)|0);
    $44 = ($43|0)>(-1);
    if ($44) {
     _FIPS_put_error(4,103,132,7383,753);
     $r$18 = -1;
     break;
    }
    $45 = ((($rsa)) + 60|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 & 2;
    $48 = ($47|0)==(0);
    $$pre = ((($rsa)) + 64|0);
    if (!($48)) {
     $49 = HEAP32[$12>>2]|0;
     $50 = (_fips_bn_mont_ctx_set_locked($$pre,9,$49,$27)|0);
     $51 = ($50|0)==(0|0);
     if ($51) {
      $r$18 = -1;
      break;
     }
    }
    $52 = ((($rsa)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 24|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$17>>2]|0;
    $57 = HEAP32[$12>>2]|0;
    $58 = HEAP32[$$pre>>2]|0;
    $59 = (FUNCTION_TABLE_iiiiiii[$55 & 31]($30,$29,$56,$57,$27,$58)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     $r$18 = -1;
    } else {
     $61 = ($padding|0)==(5);
     L40: do {
      if ($61) {
       $62 = HEAP32[$30>>2]|0;
       $63 = HEAP32[$62>>2]|0;
       $64 = $63 & 15;
       $65 = ($64|0)==(12);
       if (!($65)) {
        $66 = HEAP32[$12>>2]|0;
        $67 = (_fips_bn_sub($30,$66,$30)|0);
        $68 = ($67|0)==(0);
        if ($68) {
         $r$18 = -1;
         break L27;
        }
       }
       $69 = (_FIPS_bn_bn2bin($30,$35)|0);
       $70 = (_fips_rsa_padding_check_x931($to,$34,$35,$69,$34)|0);
       $r$0 = $70;
      } else {
       $71 = (_FIPS_bn_bn2bin($30,$35)|0);
       switch ($padding|0) {
       case 1:  {
        $72 = (_fips_rsa_padding_check_pkcs1_type_1($to,$34,$35,$71,$34)|0);
        $r$0 = $72;
        break L40;
        break;
       }
       case 3:  {
        $73 = (_fips_rsa_padding_check_none($to,$34,$35,$71,$34)|0);
        $r$0 = $73;
        break L40;
        break;
       }
       default: {
        _FIPS_put_error(4,103,118,7383,782);
        $r$18 = -1;
        break L27;
       }
       }
      }
     } while(0);
     $74 = ($r$0|0)<(0);
     if ($74) {
      _FIPS_put_error(4,103,114,7383,786);
      $r$18 = $r$0;
     } else {
      $r$18 = $r$0;
     }
    }
   }
  } else {
   _FIPS_put_error(4,103,65,7383,737);
   $r$18 = -1;
  }
 } while(0);
 _fips_bn_ctx_end($27);
 _fips_bn_ctx_free($27);
 $75 = ($35|0)==(0|0);
 if ($75) {
  $$0 = $r$18;
  return ($$0|0);
 }
 _FIPS_openssl_cleanse($35,$34);
 _FIPS_free($35);
 $$0 = $r$18;
 return ($$0|0);
}
function _RSA_eay_private_encrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pre = 0, $$pre22 = 0, $$pre24 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blinding$05 = 0, $d$0 = 0, $i$0 = 0, $local_blinding = 0, $local_d = 0, $or$cond = 0, $or$cond3 = 0, $r$013 = 0, $res$0 = 0;
 var $unblind$07 = 0, $unblind$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $local_blinding = sp + 20|0;
 $local_d = sp;
 HEAP32[$local_blinding>>2] = 0;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _FIPS_put_error(45,140,115,7383,387);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_FIPS_module_mode()|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($rsa)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 1024;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = ((($rsa)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_FIPS_bn_num_bits($9)|0);
   $11 = ($10|0)<(1024);
   if ($11) {
    _FIPS_put_error(4,102,120,7383,394);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $12 = (_fips_bn_ctx_new()|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _fips_bn_ctx_start($12);
 $14 = (_fips_bn_ctx_get($12)|0);
 $15 = (_fips_bn_ctx_get($12)|0);
 $16 = ((($rsa)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_FIPS_bn_num_bits($17)|0);
 $19 = (($18) + 7)|0;
 $20 = (($19|0) / 8)&-1;
 $21 = (_FIPS_malloc($20,7383,404)|0);
 $22 = ($14|0)!=(0|0);
 $23 = ($15|0)!=(0|0);
 $or$cond = $22 & $23;
 $24 = ($21|0)!=(0|0);
 $or$cond3 = $or$cond & $24;
 L14: do {
  if ($or$cond3) {
   switch ($padding|0) {
   case 1:  {
    $25 = (_fips_rsa_padding_add_pkcs1_type_1($21,$20,$from,$flen)|0);
    $i$0 = $25;
    break;
   }
   case 5:  {
    $26 = (_fips_rsa_padding_add_x931($21,$20,$from,$flen)|0);
    $i$0 = $26;
    break;
   }
   case 3:  {
    $27 = (_fips_rsa_padding_add_none($21,$20,$from,$flen)|0);
    $i$0 = $27;
    break;
   }
   default: {
    _FIPS_put_error(4,102,118,7383,424);
    $r$013 = -1;
    break L14;
   }
   }
   $28 = ($i$0|0)<(1);
   if ($28) {
    $r$013 = -1;
   } else {
    $29 = (_FIPS_bn_bin2bn($21,$20,$14)|0);
    $30 = ($29|0)==(0|0);
    if ($30) {
     $r$013 = -1;
    } else {
     $31 = HEAP32[$16>>2]|0;
     $32 = (_fips_bn_ucmp($14,$31)|0);
     $33 = ($32|0)>(-1);
     if ($33) {
      _FIPS_put_error(4,102,132,7383,434);
      $r$013 = -1;
      break;
     }
     $34 = ((($rsa)) + 60|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $35 & 128;
     $37 = ($36|0)==(0);
     if ($37) {
      $38 = (_rsa_get_blinding($rsa,$local_blinding,$12)|0);
      $39 = ($38|0)==(0|0);
      if ($39) {
       _FIPS_put_error(4,102,68,7383,443);
       $r$013 = -1;
       break;
      }
      $40 = HEAP32[$local_blinding>>2]|0;
      $41 = ($40|0)==(0);
      do {
       if ($41) {
        $42 = (_fips_bn_ctx_get($12)|0);
        $43 = ($42|0)==(0|0);
        if ($43) {
         _FIPS_put_error(4,102,65,7383,452);
         $r$013 = -1;
         break L14;
        } else {
         _FIPS_lock(9,25,7383,349);
         $45 = (_fips_bn_blinding_convert_ex($14,$42,$38,$12)|0);
         _FIPS_lock(10,25,7383,351);
         $$0$i = $45;$unblind$07 = $42;
         break;
        }
       } else {
        $44 = (_fips_bn_blinding_convert_ex($14,0,$38,$12)|0);
        $$0$i = $44;$unblind$07 = 0;
       }
      } while(0);
      $46 = ($$0$i|0)==(0);
      if ($46) {
       $r$013 = -1;
       break;
      }
      $$pre = HEAP32[$34>>2]|0;
      $124 = 1;$48 = $$pre;$blinding$05 = $38;$unblind$1 = $unblind$07;
     } else {
      $124 = 0;$48 = $35;$blinding$05 = 0;$unblind$1 = 0;
     }
     $47 = $48 & 32;
     $49 = ($47|0)==(0);
     do {
      if ($49) {
       $50 = ((($rsa)) + 28|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if (!($52)) {
        $53 = ((($rsa)) + 32|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0|0);
        if (!($55)) {
         $56 = ((($rsa)) + 36|0);
         $57 = HEAP32[$56>>2]|0;
         $58 = ($57|0)==(0|0);
         if (!($58)) {
          $59 = ((($rsa)) + 40|0);
          $60 = HEAP32[$59>>2]|0;
          $61 = ($60|0)==(0|0);
          if (!($61)) {
           $62 = ((($rsa)) + 44|0);
           $63 = HEAP32[$62>>2]|0;
           $64 = ($63|0)==(0|0);
           if (!($64)) {
            label = 35;
            break;
           }
          }
         }
        }
       }
       $71 = $48 & 256;
       $72 = ($71|0)==(0);
       if ($72) {
        _fips_bn_init($local_d);
        $73 = ((($rsa)) + 24|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = HEAP32[$74>>2]|0;
        HEAP32[$local_d>>2] = $75;
        $76 = ((($74)) + 4|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ((($local_d)) + 4|0);
        HEAP32[$78>>2] = $77;
        $79 = ((($74)) + 8|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = ((($local_d)) + 8|0);
        HEAP32[$81>>2] = $80;
        $82 = ((($74)) + 12|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ((($local_d)) + 12|0);
        HEAP32[$84>>2] = $83;
        $85 = ((($local_d)) + 16|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = $86 & 1;
        $88 = ((($74)) + 16|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = $89 & -8;
        $91 = $87 | $90;
        $92 = $91 | 6;
        HEAP32[$85>>2] = $92;
        $$pre22 = HEAP32[$34>>2]|0;
        $96 = $$pre22;$d$0 = $local_d;
       } else {
        $93 = ((($rsa)) + 24|0);
        $94 = HEAP32[$93>>2]|0;
        $96 = $48;$d$0 = $94;
       }
       $95 = $96 & 2;
       $97 = ($95|0)==(0);
       $$pre24 = ((($rsa)) + 64|0);
       if (!($97)) {
        $98 = HEAP32[$16>>2]|0;
        $99 = (_fips_bn_mont_ctx_set_locked($$pre24,9,$98,$12)|0);
        $100 = ($99|0)==(0|0);
        if ($100) {
         $r$013 = -1;
         break L14;
        }
       }
       $101 = ((($rsa)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ((($102)) + 24|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = HEAP32[$16>>2]|0;
       $106 = HEAP32[$$pre24>>2]|0;
       $107 = (FUNCTION_TABLE_iiiiiii[$104 & 31]($15,$14,$d$0,$105,$12,$106)|0);
       $108 = ($107|0)==(0);
       if ($108) {
        $r$013 = -1;
        break L14;
       }
      } else {
       label = 35;
      }
     } while(0);
     if ((label|0) == 35) {
      $65 = ((($rsa)) + 8|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($66)) + 20|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (FUNCTION_TABLE_iiiii[$68 & 31]($15,$14,$rsa,$12)|0);
      $70 = ($69|0)==(0);
      if ($70) {
       $r$013 = -1;
       break;
      }
     }
     if ($124) {
      $109 = (_fips_bn_blinding_invert_ex($15,$unblind$1,$blinding$05,$12)|0);
      $110 = ($109|0)==(0);
      if ($110) {
       $r$013 = -1;
       break;
      }
     }
     $111 = ($padding|0)==(5);
     if ($111) {
      $112 = HEAP32[$16>>2]|0;
      (_fips_bn_sub($14,$112,$15)|0);
      $113 = (_fips_bn_cmp($15,$14)|0);
      $114 = ($113|0)==(0);
      $$ = $114 ? $15 : $14;
      $res$0 = $$;
     } else {
      $res$0 = $15;
     }
     $115 = (_FIPS_bn_num_bits($res$0)|0);
     $116 = (($115) + 7)|0;
     $117 = (($116|0) / 8)&-1;
     $118 = (($20) - ($117))|0;
     $119 = (($to) + ($118)|0);
     $120 = (_FIPS_bn_bn2bin($res$0,$119)|0);
     $121 = (($20) - ($120))|0;
     $122 = ($121|0)>(0);
     if ($122) {
      _memset(($to|0),0,($121|0))|0;
      $r$013 = $20;
     } else {
      $r$013 = $20;
     }
    }
   }
  } else {
   _FIPS_put_error(4,102,65,7383,407);
   $r$013 = -1;
  }
 } while(0);
 _fips_bn_ctx_end($12);
 _fips_bn_ctx_free($12);
 $123 = ($21|0)==(0|0);
 if ($123) {
  $$0 = $r$013;
  STACKTOP = sp;return ($$0|0);
 }
 _FIPS_openssl_cleanse($21,$20);
 _FIPS_free($21);
 $$0 = $r$013;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_eay_private_decrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $$0 = 0, $$0$i = 0, $$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blinding$05 = 0, $d$0 = 0;
 var $local_blinding = 0, $local_d = 0, $or$cond = 0, $or$cond3 = 0, $r$0 = 0, $r$1$ph = 0, $unblind$07 = 0, $unblind$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $local_blinding = sp + 20|0;
 $local_d = sp;
 HEAP32[$local_blinding>>2] = 0;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _FIPS_put_error(45,139,115,7383,545);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_FIPS_module_mode()|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($rsa)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 1024;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = ((($rsa)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_FIPS_bn_num_bits($9)|0);
   $11 = ($10|0)<(1024);
   if ($11) {
    _FIPS_put_error(4,101,120,7383,552);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $12 = (_fips_bn_ctx_new()|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _fips_bn_ctx_start($12);
 $14 = (_fips_bn_ctx_get($12)|0);
 $15 = (_fips_bn_ctx_get($12)|0);
 $16 = ((($rsa)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_FIPS_bn_num_bits($17)|0);
 $19 = (($18) + 7)|0;
 $20 = (($19|0) / 8)&-1;
 $21 = (_FIPS_malloc($20,7383,562)|0);
 $22 = ($14|0)!=(0|0);
 $23 = ($15|0)!=(0|0);
 $or$cond = $22 & $23;
 $24 = ($21|0)!=(0|0);
 $or$cond3 = $or$cond & $24;
 L14: do {
  if ($or$cond3) {
   $25 = ($20|0)<($flen|0);
   if ($25) {
    _FIPS_put_error(4,101,108,7383,573);
    $r$1$ph = -1;
    break;
   }
   $26 = (_FIPS_bn_bin2bn($from,$flen,$14)|0);
   $27 = ($26|0)==(0|0);
   if ($27) {
    $r$1$ph = -1;
   } else {
    $28 = HEAP32[$16>>2]|0;
    $29 = (_fips_bn_ucmp($14,$28)|0);
    $30 = ($29|0)>(-1);
    if ($30) {
     _FIPS_put_error(4,101,132,7383,582);
     $r$1$ph = -1;
     break;
    }
    $31 = ((($rsa)) + 60|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 & 128;
    $34 = ($33|0)==(0);
    if ($34) {
     $35 = (_rsa_get_blinding($rsa,$local_blinding,$12)|0);
     $36 = ($35|0)==(0|0);
     if ($36) {
      _FIPS_put_error(4,101,68,7383,591);
      $r$1$ph = -1;
      break;
     }
     $37 = HEAP32[$local_blinding>>2]|0;
     $38 = ($37|0)==(0);
     do {
      if ($38) {
       $39 = (_fips_bn_ctx_get($12)|0);
       $40 = ($39|0)==(0|0);
       if ($40) {
        _FIPS_put_error(4,101,65,7383,600);
        $r$1$ph = -1;
        break L14;
       } else {
        _FIPS_lock(9,25,7383,349);
        $42 = (_fips_bn_blinding_convert_ex($14,$39,$35,$12)|0);
        _FIPS_lock(10,25,7383,351);
        $$0$i = $42;$unblind$07 = $39;
        break;
       }
      } else {
       $41 = (_fips_bn_blinding_convert_ex($14,0,$35,$12)|0);
       $$0$i = $41;$unblind$07 = 0;
      }
     } while(0);
     $43 = ($$0$i|0)==(0);
     if ($43) {
      $r$1$ph = -1;
      break;
     }
     $$pre = HEAP32[$31>>2]|0;
     $113 = 1;$45 = $$pre;$blinding$05 = $35;$unblind$1 = $unblind$07;
    } else {
     $113 = 0;$45 = $32;$blinding$05 = 0;$unblind$1 = 0;
    }
    $44 = $45 & 32;
    $46 = ($44|0)==(0);
    do {
     if ($46) {
      $47 = ((($rsa)) + 28|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $50 = ((($rsa)) + 32|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if (!($52)) {
        $53 = ((($rsa)) + 36|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0|0);
        if (!($55)) {
         $56 = ((($rsa)) + 40|0);
         $57 = HEAP32[$56>>2]|0;
         $58 = ($57|0)==(0|0);
         if (!($58)) {
          $59 = ((($rsa)) + 44|0);
          $60 = HEAP32[$59>>2]|0;
          $61 = ($60|0)==(0|0);
          if (!($61)) {
           label = 31;
           break;
          }
         }
        }
       }
      }
      $68 = $45 & 256;
      $69 = ($68|0)==(0);
      $70 = ((($rsa)) + 24|0);
      if ($69) {
       $71 = HEAP32[$70>>2]|0;
       $72 = HEAP32[$71>>2]|0;
       HEAP32[$local_d>>2] = $72;
       $73 = ((($71)) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ((($local_d)) + 4|0);
       HEAP32[$75>>2] = $74;
       $76 = ((($71)) + 8|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = ((($local_d)) + 8|0);
       HEAP32[$78>>2] = $77;
       $79 = ((($71)) + 12|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = ((($local_d)) + 12|0);
       HEAP32[$81>>2] = $80;
       $82 = ((($local_d)) + 16|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $83 & 1;
       $85 = ((($71)) + 16|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = $86 & -8;
       $88 = $84 | $87;
       $89 = $88 | 6;
       HEAP32[$82>>2] = $89;
       $d$0 = $local_d;
      } else {
       $90 = HEAP32[$70>>2]|0;
       $d$0 = $90;
      }
      $91 = $45 & 2;
      $92 = ($91|0)==(0);
      $$pre20 = ((($rsa)) + 64|0);
      if (!($92)) {
       $93 = HEAP32[$16>>2]|0;
       $94 = (_fips_bn_mont_ctx_set_locked($$pre20,9,$93,$12)|0);
       $95 = ($94|0)==(0|0);
       if ($95) {
        $r$1$ph = -1;
        break L14;
       }
      }
      $96 = ((($rsa)) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($97)) + 24|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = HEAP32[$16>>2]|0;
      $101 = HEAP32[$$pre20>>2]|0;
      $102 = (FUNCTION_TABLE_iiiiiii[$99 & 31]($15,$14,$d$0,$100,$12,$101)|0);
      $103 = ($102|0)==(0);
      if ($103) {
       $r$1$ph = -1;
       break L14;
      }
     } else {
      label = 31;
     }
    } while(0);
    if ((label|0) == 31) {
     $62 = ((($rsa)) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ((($63)) + 20|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (FUNCTION_TABLE_iiiii[$65 & 31]($15,$14,$rsa,$12)|0);
     $67 = ($66|0)==(0);
     if ($67) {
      $r$1$ph = -1;
      break;
     }
    }
    if ($113) {
     $104 = (_fips_bn_blinding_invert_ex($15,$unblind$1,$blinding$05,$12)|0);
     $105 = ($104|0)==(0);
     if ($105) {
      $r$1$ph = -1;
      break;
     }
    }
    $106 = (_FIPS_bn_bn2bin($15,$21)|0);
    switch ($padding|0) {
    case 1:  {
     $107 = (_fips_rsa_padding_check_pkcs1_type_2($to,$20,$21,$106,$20)|0);
     $r$0 = $107;
     break;
    }
    case 4:  {
     $108 = (_fips_rsa_padding_check_pkcs1_oaep($to,$20,$21,$106,$20,0,0)|0);
     $r$0 = $108;
     break;
    }
    case 2:  {
     $109 = (_fips_rsa_padding_check_sslv23($to,$20,$21,$106,$20)|0);
     $r$0 = $109;
     break;
    }
    case 3:  {
     $110 = (_fips_rsa_padding_check_none($to,$20,$21,$106,$20)|0);
     $r$0 = $110;
     break;
    }
    default: {
     _FIPS_put_error(4,101,118,7383,662);
     $r$1$ph = -1;
     break L14;
    }
    }
    $111 = ($r$0|0)<(0);
    if ($111) {
     _FIPS_put_error(4,101,114,7383,666);
     $r$1$ph = $r$0;
    } else {
     $r$1$ph = $r$0;
    }
   }
  } else {
   _FIPS_put_error(4,101,65,7383,565);
   $r$1$ph = -1;
  }
 } while(0);
 _fips_bn_ctx_end($12);
 _fips_bn_ctx_free($12);
 $112 = ($21|0)==(0|0);
 if ($112) {
  $$0 = $r$1$ph;
  STACKTOP = sp;return ($$0|0);
 }
 _FIPS_openssl_cleanse($21,$20);
 _FIPS_free($21);
 $$0 = $r$1$ph;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_eay_mod_exp($r0,$I,$rsa,$ctx) {
 $r0 = $r0|0;
 $I = $I|0;
 $rsa = $rsa|0;
 $ctx = $ctx|0;
 var $$pre = 0, $$pre1 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $d$0 = 0, $dmp1$0 = 0, $dmq1$0 = 0, $local_c = 0, $local_d = 0, $local_dmp1 = 0, $local_dmq1 = 0, $local_p = 0, $local_q = 0, $local_r1 = 0, $p$0 = 0, $pr1$0 = 0, $q$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $local_dmp1 = sp + 120|0;
 $local_dmq1 = sp + 100|0;
 $local_c = sp + 80|0;
 $local_r1 = sp + 60|0;
 $local_p = sp + 40|0;
 $local_q = sp + 20|0;
 $local_d = sp;
 _fips_bn_ctx_start($ctx);
 $0 = (_fips_bn_ctx_get($ctx)|0);
 $1 = (_fips_bn_ctx_get($ctx)|0);
 $2 = (_fips_bn_ctx_get($ctx)|0);
 $3 = ((($rsa)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 256;
 $6 = ($5|0)==(0);
 if ($6) {
  _fips_bn_init($local_p);
  $7 = ((($rsa)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$local_p>>2] = $9;
  $10 = ((($8)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($local_p)) + 4|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($8)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($local_p)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($8)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($local_p)) + 12|0);
  HEAP32[$18>>2] = $17;
  $19 = ((($local_p)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 1;
  $22 = ((($8)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & -8;
  $25 = $21 | $24;
  $26 = $25 | 6;
  HEAP32[$19>>2] = $26;
  _fips_bn_init($local_q);
  $27 = ((($rsa)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$local_q>>2] = $29;
  $30 = ((($28)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($local_q)) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = ((($28)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($local_q)) + 8|0);
  HEAP32[$35>>2] = $34;
  $36 = ((($28)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($local_q)) + 12|0);
  HEAP32[$38>>2] = $37;
  $39 = ((($local_q)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 & 1;
  $42 = ((($28)) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 & -8;
  $45 = $41 | $44;
  $46 = $45 | 6;
  HEAP32[$39>>2] = $46;
  $$pre = HEAP32[$3>>2]|0;
  $52 = $$pre;$p$0 = $local_p;$q$0 = $local_q;
 } else {
  $47 = ((($rsa)) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($rsa)) + 32|0);
  $50 = HEAP32[$49>>2]|0;
  $52 = $4;$p$0 = $48;$q$0 = $50;
 }
 $51 = $52 & 4;
 $53 = ($51|0)==(0);
 do {
  if ($53) {
   $61 = $52;
  } else {
   $54 = ((($rsa)) + 68|0);
   $55 = (_fips_bn_mont_ctx_set_locked($54,9,$p$0,$ctx)|0);
   $56 = ($55|0)==(0|0);
   if ($56) {
    $ret$0 = 0;
    _fips_bn_ctx_end($ctx);
    STACKTOP = sp;return ($ret$0|0);
   }
   $57 = ((($rsa)) + 72|0);
   $58 = (_fips_bn_mont_ctx_set_locked($57,9,$q$0,$ctx)|0);
   $59 = ($58|0)==(0|0);
   if ($59) {
    $ret$0 = 0;
    _fips_bn_ctx_end($ctx);
    STACKTOP = sp;return ($ret$0|0);
   } else {
    $$pre1 = HEAP32[$3>>2]|0;
    $61 = $$pre1;
    break;
   }
  }
 } while(0);
 $60 = $61 & 2;
 $62 = ($60|0)==(0);
 do {
  if ($62) {
   $69 = $61;
  } else {
   $63 = ((($rsa)) + 64|0);
   $64 = ((($rsa)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (_fips_bn_mont_ctx_set_locked($63,9,$65,$ctx)|0);
   $67 = ($66|0)==(0|0);
   if ($67) {
    $ret$0 = 0;
    _fips_bn_ctx_end($ctx);
    STACKTOP = sp;return ($ret$0|0);
   } else {
    $$pre3 = HEAP32[$3>>2]|0;
    $69 = $$pre3;
    break;
   }
  }
 } while(0);
 $68 = $69 & 256;
 $70 = ($68|0)==(0);
 if ($70) {
  $71 = HEAP32[$I>>2]|0;
  HEAP32[$local_c>>2] = $71;
  $72 = ((($I)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($local_c)) + 4|0);
  HEAP32[$74>>2] = $73;
  $75 = ((($I)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($local_c)) + 8|0);
  HEAP32[$77>>2] = $76;
  $78 = ((($I)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($local_c)) + 12|0);
  HEAP32[$80>>2] = $79;
  $81 = ((($local_c)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 & 1;
  $84 = ((($I)) + 16|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $85 & -8;
  $87 = $83 | $86;
  $88 = $87 | 6;
  HEAP32[$81>>2] = $88;
  $89 = ((($rsa)) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (_fips_bn_div(0,$0,$local_c,$90,$ctx)|0);
  $92 = ($91|0)==(0);
  if ($92) {
   $ret$0 = 0;
   _fips_bn_ctx_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 } else {
  $93 = ((($rsa)) + 32|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (_fips_bn_div(0,$0,$I,$94,$ctx)|0);
  $96 = ($95|0)==(0);
  if ($96) {
   $ret$0 = 0;
   _fips_bn_ctx_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 }
 $97 = HEAP32[$3>>2]|0;
 $98 = $97 & 256;
 $99 = ($98|0)==(0);
 $100 = ((($rsa)) + 40|0);
 if ($99) {
  $101 = HEAP32[$100>>2]|0;
  $102 = HEAP32[$101>>2]|0;
  HEAP32[$local_dmq1>>2] = $102;
  $103 = ((($101)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($local_dmq1)) + 4|0);
  HEAP32[$105>>2] = $104;
  $106 = ((($101)) + 8|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($local_dmq1)) + 8|0);
  HEAP32[$108>>2] = $107;
  $109 = ((($101)) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($local_dmq1)) + 12|0);
  HEAP32[$111>>2] = $110;
  $112 = ((($local_dmq1)) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $113 & 1;
  $115 = ((($101)) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 & -8;
  $118 = $114 | $117;
  $119 = $118 | 6;
  HEAP32[$112>>2] = $119;
  $dmq1$0 = $local_dmq1;
 } else {
  $120 = HEAP32[$100>>2]|0;
  $dmq1$0 = $120;
 }
 $121 = ((($rsa)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 24|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($rsa)) + 32|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ((($rsa)) + 72|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (FUNCTION_TABLE_iiiiiii[$124 & 31]($1,$0,$dmq1$0,$126,$ctx,$128)|0);
 $130 = ($129|0)==(0);
 if ($130) {
  $ret$0 = 0;
  _fips_bn_ctx_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $131 = HEAP32[$3>>2]|0;
 $132 = $131 & 256;
 $133 = ($132|0)==(0);
 if ($133) {
  $134 = HEAP32[$I>>2]|0;
  HEAP32[$local_c>>2] = $134;
  $135 = ((($I)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ((($local_c)) + 4|0);
  HEAP32[$137>>2] = $136;
  $138 = ((($I)) + 8|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ((($local_c)) + 8|0);
  HEAP32[$140>>2] = $139;
  $141 = ((($I)) + 12|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = ((($local_c)) + 12|0);
  HEAP32[$143>>2] = $142;
  $144 = ((($local_c)) + 16|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 & 1;
  $147 = ((($I)) + 16|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $148 & -8;
  $150 = $146 | $149;
  $151 = $150 | 6;
  HEAP32[$144>>2] = $151;
  $152 = ((($rsa)) + 28|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (_fips_bn_div(0,$0,$local_c,$153,$ctx)|0);
  $155 = ($154|0)==(0);
  if ($155) {
   $ret$0 = 0;
   _fips_bn_ctx_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 } else {
  $156 = ((($rsa)) + 28|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (_fips_bn_div(0,$0,$I,$157,$ctx)|0);
  $159 = ($158|0)==(0);
  if ($159) {
   $ret$0 = 0;
   _fips_bn_ctx_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 }
 $160 = HEAP32[$3>>2]|0;
 $161 = $160 & 256;
 $162 = ($161|0)==(0);
 $163 = ((($rsa)) + 36|0);
 if ($162) {
  $164 = HEAP32[$163>>2]|0;
  $165 = HEAP32[$164>>2]|0;
  HEAP32[$local_dmp1>>2] = $165;
  $166 = ((($164)) + 4|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ((($local_dmp1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = ((($164)) + 8|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ((($local_dmp1)) + 8|0);
  HEAP32[$171>>2] = $170;
  $172 = ((($164)) + 12|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ((($local_dmp1)) + 12|0);
  HEAP32[$174>>2] = $173;
  $175 = ((($local_dmp1)) + 16|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 & 1;
  $178 = ((($164)) + 16|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179 & -8;
  $181 = $177 | $180;
  $182 = $181 | 6;
  HEAP32[$175>>2] = $182;
  $dmp1$0 = $local_dmp1;
 } else {
  $183 = HEAP32[$163>>2]|0;
  $dmp1$0 = $183;
 }
 $184 = HEAP32[$121>>2]|0;
 $185 = ((($184)) + 24|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ((($rsa)) + 28|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ((($rsa)) + 68|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = (FUNCTION_TABLE_iiiiiii[$186 & 31]($r0,$0,$dmp1$0,$188,$ctx,$190)|0);
 $192 = ($191|0)==(0);
 if ($192) {
  $ret$0 = 0;
  _fips_bn_ctx_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $193 = (_fips_bn_sub($r0,$r0,$1)|0);
 $194 = ($193|0)==(0);
 if ($194) {
  $ret$0 = 0;
  _fips_bn_ctx_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $195 = ((($r0)) + 12|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ($196|0)==(0);
 if (!($197)) {
  $198 = HEAP32[$187>>2]|0;
  $199 = (_fips_bn_add($r0,$r0,$198)|0);
  $200 = ($199|0)==(0);
  if ($200) {
   $ret$0 = 0;
   _fips_bn_ctx_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 }
 $201 = ((($rsa)) + 44|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (_fips_bn_mul($0,$r0,$202,$ctx)|0);
 $204 = ($203|0)==(0);
 if ($204) {
  $ret$0 = 0;
  _fips_bn_ctx_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $205 = HEAP32[$3>>2]|0;
 $206 = $205 & 256;
 $207 = ($206|0)==(0);
 if ($207) {
  $208 = HEAP32[$0>>2]|0;
  HEAP32[$local_r1>>2] = $208;
  $209 = ((($0)) + 4|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ((($local_r1)) + 4|0);
  HEAP32[$211>>2] = $210;
  $212 = ((($0)) + 8|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ((($local_r1)) + 8|0);
  HEAP32[$214>>2] = $213;
  $215 = ((($0)) + 12|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($local_r1)) + 12|0);
  HEAP32[$217>>2] = $216;
  $218 = ((($local_r1)) + 16|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $219 & 1;
  $221 = ((($0)) + 16|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = $222 & -8;
  $224 = $220 | $223;
  $225 = $224 | 6;
  HEAP32[$218>>2] = $225;
  $pr1$0 = $local_r1;
 } else {
  $pr1$0 = $0;
 }
 $226 = HEAP32[$187>>2]|0;
 $227 = (_fips_bn_div(0,$r0,$pr1$0,$226,$ctx)|0);
 $228 = ($227|0)==(0);
 if ($228) {
  $ret$0 = 0;
  _fips_bn_ctx_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $229 = HEAP32[$195>>2]|0;
 $230 = ($229|0)==(0);
 if (!($230)) {
  $231 = HEAP32[$187>>2]|0;
  $232 = (_fips_bn_add($r0,$r0,$231)|0);
  $233 = ($232|0)==(0);
  if ($233) {
   $ret$0 = 0;
   _fips_bn_ctx_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 }
 $234 = HEAP32[$125>>2]|0;
 $235 = (_fips_bn_mul($0,$r0,$234,$ctx)|0);
 $236 = ($235|0)==(0);
 if ($236) {
  $ret$0 = 0;
  _fips_bn_ctx_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $237 = (_fips_bn_add($r0,$0,$1)|0);
 $238 = ($237|0)==(0);
 if ($238) {
  $ret$0 = 0;
  _fips_bn_ctx_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $239 = ((($rsa)) + 20|0);
 $240 = HEAP32[$239>>2]|0;
 $241 = ($240|0)==(0|0);
 do {
  if (!($241)) {
   $242 = ((($rsa)) + 16|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = ($243|0)==(0|0);
   if (!($244)) {
    $245 = HEAP32[$121>>2]|0;
    $246 = ((($245)) + 24|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = ((($rsa)) + 64|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = (FUNCTION_TABLE_iiiiiii[$247 & 31]($2,$r0,$240,$243,$ctx,$249)|0);
    $251 = ($250|0)==(0);
    if ($251) {
     $ret$0 = 0;
     _fips_bn_ctx_end($ctx);
     STACKTOP = sp;return ($ret$0|0);
    }
    $252 = (_fips_bn_sub($2,$2,$I)|0);
    $253 = ($252|0)==(0);
    if ($253) {
     $ret$0 = 0;
     _fips_bn_ctx_end($ctx);
     STACKTOP = sp;return ($ret$0|0);
    }
    $254 = HEAP32[$242>>2]|0;
    $255 = (_fips_bn_div(0,$2,$2,$254,$ctx)|0);
    $256 = ($255|0)==(0);
    if ($256) {
     $ret$0 = 0;
     _fips_bn_ctx_end($ctx);
     STACKTOP = sp;return ($ret$0|0);
    }
    $257 = ((($2)) + 12|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ($258|0)==(0);
    do {
     if (!($259)) {
      $260 = HEAP32[$242>>2]|0;
      $261 = (_fips_bn_add($2,$2,$260)|0);
      $262 = ($261|0)==(0);
      if ($262) {
       $ret$0 = 0;
      } else {
       break;
      }
      _fips_bn_ctx_end($ctx);
      STACKTOP = sp;return ($ret$0|0);
     }
    } while(0);
    $263 = ((($2)) + 4|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = ($264|0)==(0);
    if ($265) {
     break;
    }
    $266 = HEAP32[$3>>2]|0;
    $267 = $266 & 256;
    $268 = ($267|0)==(0);
    $269 = ((($rsa)) + 24|0);
    if ($268) {
     $270 = HEAP32[$269>>2]|0;
     $271 = HEAP32[$270>>2]|0;
     HEAP32[$local_d>>2] = $271;
     $272 = ((($270)) + 4|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = ((($local_d)) + 4|0);
     HEAP32[$274>>2] = $273;
     $275 = ((($270)) + 8|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ((($local_d)) + 8|0);
     HEAP32[$277>>2] = $276;
     $278 = ((($270)) + 12|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ((($local_d)) + 12|0);
     HEAP32[$280>>2] = $279;
     $281 = ((($local_d)) + 16|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = $282 & 1;
     $284 = ((($270)) + 16|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = $285 & -8;
     $287 = $283 | $286;
     $288 = $287 | 6;
     HEAP32[$281>>2] = $288;
     $d$0 = $local_d;
    } else {
     $289 = HEAP32[$269>>2]|0;
     $d$0 = $289;
    }
    $290 = HEAP32[$121>>2]|0;
    $291 = ((($290)) + 24|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = HEAP32[$242>>2]|0;
    $294 = HEAP32[$248>>2]|0;
    $295 = (FUNCTION_TABLE_iiiiiii[$292 & 31]($r0,$I,$d$0,$293,$ctx,$294)|0);
    $296 = ($295|0)==(0);
    if ($296) {
     $ret$0 = 0;
    } else {
     break;
    }
    _fips_bn_ctx_end($ctx);
    STACKTOP = sp;return ($ret$0|0);
   }
  }
 } while(0);
 $ret$0 = 1;
 _fips_bn_ctx_end($ctx);
 STACKTOP = sp;return ($ret$0|0);
}
function _RSA_eay_init($rsa) {
 $rsa = $rsa|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = ((($rsa)) + 60|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 | 6;
  HEAP32[$2>>2] = $4;
  $$0 = 1;
  return ($$0|0);
 } else {
  _FIPS_put_error(45,149,115,7383,968);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _RSA_eay_finish($rsa) {
 $rsa = $rsa|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _fips_bn_mont_ctx_free($1);
 }
 $3 = ((($rsa)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _fips_bn_mont_ctx_free($4);
 }
 $6 = ((($rsa)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  return 1;
 }
 _fips_bn_mont_ctx_free($7);
 return 1;
}
function _rsa_get_blinding($rsa,$local,$ctx) {
 $rsa = $rsa|0;
 $local = $local|0;
 $ctx = $ctx|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0;
 var $got_write_lock$01 = 0, $ret$0 = 0, $ret$03 = 0, $ret$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 _FIPS_lock(5,9,7383,281);
 $0 = ((($rsa)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _FIPS_lock(6,9,7383,285);
  _FIPS_lock(9,9,7383,286);
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $5 = (_fips_rsa_setup_blinding($rsa,$ctx)|0);
   HEAP32[$0>>2] = $5;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $ret$04 = 0;
   } else {
    $7 = $5;$got_write_lock$01 = 1;
    label = 4;
   }
  } else {
   $7 = $3;$got_write_lock$01 = 1;
   label = 4;
  }
 } else {
  $7 = $1;$got_write_lock$01 = 0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   _fips_crypto_threadid_current($cur);
   $8 = (_fips_bn_blinding_thread_id($7)|0);
   $9 = (_fips_crypto_threadid_cmp($cur,$8)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    HEAP32[$local>>2] = 1;
    $ret$0 = $7;
   } else {
    HEAP32[$local>>2] = 0;
    $11 = ((($rsa)) + 84|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $14 = ($got_write_lock$01|0)==(0);
     if ($14) {
      _FIPS_lock(6,9,7383,318);
      _FIPS_lock(9,9,7383,319);
      $$pre = HEAP32[$11>>2]|0;
      $15 = ($$pre|0)==(0|0);
      if (!($15)) {
       $ret$04 = $$pre;
       break;
      }
     }
     $16 = (_fips_rsa_setup_blinding($rsa,$ctx)|0);
     HEAP32[$11>>2] = $16;
     $ret$04 = $16;
     break;
    } else {
     $ret$0 = $12;
    }
   }
   $17 = ($got_write_lock$01|0)==(0);
   if ($17) {
    _FIPS_lock(6,9,7383,333);
    $ret$03 = $ret$0;
    STACKTOP = sp;return ($ret$03|0);
   } else {
    $ret$04 = $ret$0;
   }
  }
 } while(0);
 _FIPS_lock(10,9,7383,331);
 $ret$03 = $ret$04;
 STACKTOP = sp;return ($ret$03|0);
}
function _fips_check_rsa_prng($rsa,$bits) {
 $rsa = $rsa|0;
 $bits = $bits|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $strength$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_module_mode()|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$01 = 1;
  return ($$01|0);
 }
 $2 = ((($rsa)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 3072;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$01 = 1;
  return ($$01|0);
 }
 $6 = ($bits|0)==(0);
 if ($6) {
  $7 = ((($rsa)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_FIPS_bn_num_bits($8)|0);
  $$0 = $9;
 } else {
  $$0 = $bits;
 }
 $10 = ($$0|0)<(1024);
 if ($10) {
  _FIPS_put_error(45,150,124,7393,97);
  $$01 = 0;
  return ($$01|0);
 }
 $11 = ($$0|0)<(2048);
 if ($11) {
  $strength$0 = 80;
 } else {
  $12 = ($$0|0)<(3072);
  if ($12) {
   $strength$0 = 112;
  } else {
   $13 = ($$0|0)<(7680);
   if ($13) {
    $strength$0 = 128;
   } else {
    $14 = ($$0|0)<(15360);
    $$ = $14 ? 192 : 256;
    $strength$0 = $$;
   }
  }
 }
 $15 = (_FIPS_rand_strength()|0);
 $16 = ($15|0)<($strength$0|0);
 if (!($16)) {
  $$01 = 1;
  return ($$01|0);
 }
 _FIPS_put_error(45,150,143,7393,115);
 $$01 = 0;
 return ($$01|0);
}
function _fips_check_rsa($rsa) {
 $rsa = $rsa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctbuf$0$ph = 0, $ctbuf$01 = 0, $pk = 0, $ptbuf$0$ph = 0, $ptbuf$03 = 0, $ret$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pk = sp;
 HEAP32[$pk>>2] = 6;
 $0 = ((($pk)) + 20|0);
 HEAP32[$0>>2] = $rsa;
 $1 = (_fips_pkey_signature_test(12,$pk,7403,0,0,0,0,1,0)|0);
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $ctbuf$0$ph = 0;$ptbuf$0$ph = 0;
   label = 11;
  } else {
   $3 = (_fips_pkey_signature_test(12,$pk,7403,0,0,0,0,5,0)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $ctbuf$0$ph = 0;$ptbuf$0$ph = 0;
    label = 11;
   } else {
    $5 = (_fips_pkey_signature_test(12,$pk,7403,0,0,0,0,6,0)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $ctbuf$0$ph = 0;$ptbuf$0$ph = 0;
     label = 11;
    } else {
     $7 = (_FIPS_rsa_size($rsa)|0);
     $8 = (_FIPS_malloc($7,7393,138)|0);
     $9 = ($8|0)==(0|0);
     if ($9) {
      $ctbuf$0$ph = 0;$ptbuf$0$ph = 0;
      label = 11;
     } else {
      $10 = (_FIPS_rsa_public_encrypt(23,7403,$8,$rsa,1)|0);
      $11 = ($10|0)<(1);
      if ($11) {
       $ctbuf$0$ph = $8;$ptbuf$0$ph = 0;
       label = 11;
      } else {
       $12 = ($10|0)==(23);
       if ($12) {
        $13 = (_memcmp(7403,$8,23)|0);
        $14 = ($13|0)==(0);
        if ($14) {
         $ctbuf$0$ph = $8;$ptbuf$0$ph = 0;
         label = 11;
         break;
        }
       }
       $15 = (_FIPS_rsa_size($rsa)|0);
       $16 = (_FIPS_malloc($15,7393,148)|0);
       $17 = ($16|0)==(0|0);
       if ($17) {
        $ctbuf$0$ph = $8;$ptbuf$0$ph = 0;
        label = 11;
       } else {
        $18 = (_FIPS_rsa_private_decrypt($10,$8,$16,$rsa,1)|0);
        $19 = ($18|0)==(23);
        if ($19) {
         $20 = (_memcmp($16,7403,23)|0);
         $21 = ($20|0)==(0);
         if ($21) {
          $ctbuf$01 = $8;$ptbuf$03 = $16;$ret$05 = 1;
         } else {
          $ctbuf$0$ph = $8;$ptbuf$0$ph = $16;
          label = 11;
         }
        } else {
         $ctbuf$0$ph = $8;$ptbuf$0$ph = $16;
         label = 11;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 11) {
  _fips_set_selftest_fail();
  _FIPS_put_error(45,108,127,7393,167);
  $ctbuf$01 = $ctbuf$0$ph;$ptbuf$03 = $ptbuf$0$ph;$ret$05 = 0;
 }
 $22 = ($ctbuf$01|0)==(0|0);
 if (!($22)) {
  _FIPS_free($ctbuf$01);
 }
 $23 = ($ptbuf$03|0)==(0|0);
 if ($23) {
  STACKTOP = sp;return ($ret$05|0);
 }
 _FIPS_free($ptbuf$03);
 STACKTOP = sp;return ($ret$05|0);
}
function _FIPS_rsa_generate_key_ex($rsa,$bits,$e_value,$cb) {
 $rsa = $rsa|0;
 $bits = $bits|0;
 $e_value = $e_value|0;
 $cb = $cb|0;
 var $$0 = 0, $$0$i = 0, $$pre$i = 0, $$pre12$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d$0$i = 0, $local_d$i = 0, $local_p$i = 0, $local_r0$i = 0, $n$0$i = 0, $n$0$i$lcssa10 = 0;
 var $n$1$i = 0, $ok$1$i = 0, $or$cond$i = 0, $p$0$i = 0, $pr0$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $local_r0$i = sp + 40|0;
 $local_d$i = sp + 20|0;
 $local_p$i = sp;
 $0 = ((($rsa)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = (FUNCTION_TABLE_iiiii[$3 & 31]($rsa,$bits,$e_value,$cb)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_FIPS_selftest_failed()|0);
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = (_FIPS_module_mode()|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = ((($rsa)) + 60|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 1024;
    $13 = ($12|0)==(0);
    $14 = ($bits|0)<(1024);
    $or$cond$i = $14 & $13;
    if ($or$cond$i) {
     _FIPS_put_error(45,138,124,7393,211);
     $$0$i = 0;
     break;
    }
   }
   $15 = (_fips_check_rsa_prng($rsa,$bits)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$i = 0;
   } else {
    $17 = (_fips_bn_ctx_new()|0);
    $18 = ($17|0)==(0|0);
    L12: do {
     if ($18) {
      label = 67;
     } else {
      _fips_bn_ctx_start($17);
      $19 = (_fips_bn_ctx_get($17)|0);
      $20 = (_fips_bn_ctx_get($17)|0);
      $21 = (_fips_bn_ctx_get($17)|0);
      $22 = (_fips_bn_ctx_get($17)|0);
      $23 = ($22|0)==(0|0);
      if ($23) {
       label = 67;
      } else {
       $24 = (($bits) + 1)|0;
       $25 = (($24|0) / 2)&-1;
       $26 = (($bits) - ($25))|0;
       $27 = ((($rsa)) + 16|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)==(0|0);
       if ($29) {
        $30 = (_FIPS_bn_new()|0);
        HEAP32[$27>>2] = $30;
        $31 = ($30|0)==(0|0);
        if ($31) {
         label = 67;
         break;
        }
       }
       $32 = ((($rsa)) + 24|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(0|0);
       if ($34) {
        $35 = (_FIPS_bn_new()|0);
        HEAP32[$32>>2] = $35;
        $36 = ($35|0)==(0|0);
        if ($36) {
         label = 67;
         break;
        }
       }
       $37 = ((($rsa)) + 20|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0|0);
       if ($39) {
        $40 = (_FIPS_bn_new()|0);
        HEAP32[$37>>2] = $40;
        $41 = ($40|0)==(0|0);
        if ($41) {
         label = 67;
         break;
        }
       }
       $42 = ((($rsa)) + 28|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ($43|0)==(0|0);
       if ($44) {
        $45 = (_FIPS_bn_new()|0);
        HEAP32[$42>>2] = $45;
        $46 = ($45|0)==(0|0);
        if ($46) {
         label = 67;
         break;
        }
       }
       $47 = ((($rsa)) + 32|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ($48|0)==(0|0);
       if ($49) {
        $50 = (_FIPS_bn_new()|0);
        HEAP32[$47>>2] = $50;
        $51 = ($50|0)==(0|0);
        if ($51) {
         label = 67;
         break;
        }
       }
       $52 = ((($rsa)) + 36|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($53|0)==(0|0);
       if ($54) {
        $55 = (_FIPS_bn_new()|0);
        HEAP32[$52>>2] = $55;
        $56 = ($55|0)==(0|0);
        if ($56) {
         label = 67;
         break;
        }
       }
       $57 = ((($rsa)) + 40|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ($58|0)==(0|0);
       if ($59) {
        $60 = (_FIPS_bn_new()|0);
        HEAP32[$57>>2] = $60;
        $61 = ($60|0)==(0|0);
        if ($61) {
         label = 67;
         break;
        }
       }
       $62 = ((($rsa)) + 44|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $65 = (_FIPS_bn_new()|0);
        HEAP32[$62>>2] = $65;
        $66 = ($65|0)==(0|0);
        if ($66) {
         label = 67;
         break;
        }
       }
       $67 = HEAP32[$37>>2]|0;
       (_fips_bn_copy($67,$e_value)|0);
       $68 = ((($20)) + 4|0);
       $69 = ((($20)) + 12|0);
       $n$0$i = 0;
       L39: while(1) {
        $70 = HEAP32[$42>>2]|0;
        $71 = (_FIPS_bn_generate_prime_ex($70,$25,0,0,0,$cb)|0);
        $72 = ($71|0)==(0);
        if ($72) {
         label = 67;
         break L12;
        }
        $73 = HEAP32[$42>>2]|0;
        $74 = (_fips_bn_value_one()|0);
        $75 = (_fips_bn_sub($21,$73,$74)|0);
        $76 = ($75|0)==(0);
        if ($76) {
         label = 67;
         break L12;
        }
        $77 = HEAP32[$37>>2]|0;
        $78 = (_fips_bn_gcd($20,$21,$77,$17)|0);
        $79 = ($78|0)==(0);
        if ($79) {
         label = 67;
         break L12;
        }
        $80 = HEAP32[$68>>2]|0;
        $81 = ($80|0)==(1);
        do {
         if ($81) {
          $82 = HEAP32[$20>>2]|0;
          $83 = HEAP32[$82>>2]|0;
          $84 = ($83|0)==(1);
          if (!($84)) {
           break;
          }
          $85 = HEAP32[$69>>2]|0;
          $86 = ($85|0)==(0);
          if ($86) {
           $n$0$i$lcssa10 = $n$0$i;
           break L39;
          }
         }
        } while(0);
        $87 = (($n$0$i) + 1)|0;
        $88 = (_fips_bn_gencb_call($cb,2,$n$0$i)|0);
        $89 = ($88|0)==(0);
        if ($89) {
         label = 67;
         break L12;
        } else {
         $n$0$i = $87;
        }
       }
       $90 = (_fips_bn_gencb_call($cb,3,0)|0);
       $91 = ($90|0)==(0);
       if ($91) {
        label = 67;
       } else {
        $n$1$i = $n$0$i$lcssa10;
        L49: while(1) {
         $92 = HEAP32[$47>>2]|0;
         $93 = (_FIPS_bn_generate_prime_ex($92,$26,0,0,0,$cb)|0);
         $94 = ($93|0)==(0);
         if ($94) {
          label = 67;
          break L12;
         }
         $95 = HEAP32[$42>>2]|0;
         $96 = HEAP32[$47>>2]|0;
         $97 = (_fips_bn_cmp($95,$96)|0);
         $98 = ($97|0)==(0);
         do {
          if ($98) {
           $99 = HEAP32[$47>>2]|0;
           $100 = (_FIPS_bn_generate_prime_ex($99,$26,0,0,0,$cb)|0);
           $101 = ($100|0)==(0);
           if ($101) {
            label = 67;
            break L12;
           }
           $219 = HEAP32[$42>>2]|0;
           $220 = HEAP32[$47>>2]|0;
           $221 = (_fips_bn_cmp($219,$220)|0);
           $222 = ($221|0)==(0);
           if (!($222)) {
            break;
           }
           $223 = HEAP32[$47>>2]|0;
           $224 = (_FIPS_bn_generate_prime_ex($223,$26,0,0,0,$cb)|0);
           $225 = ($224|0)==(0);
           if ($225) {
            label = 67;
            break L12;
           }
           $226 = HEAP32[$42>>2]|0;
           $227 = HEAP32[$47>>2]|0;
           $228 = (_fips_bn_cmp($226,$227)|0);
           $229 = ($228|0)==(0);
           if ($229) {
            label = 39;
            break L49;
           }
          }
         } while(0);
         $102 = HEAP32[$47>>2]|0;
         $103 = (_fips_bn_value_one()|0);
         $104 = (_fips_bn_sub($21,$102,$103)|0);
         $105 = ($104|0)==(0);
         if ($105) {
          label = 67;
          break L12;
         }
         $106 = HEAP32[$37>>2]|0;
         $107 = (_fips_bn_gcd($20,$21,$106,$17)|0);
         $108 = ($107|0)==(0);
         if ($108) {
          label = 67;
          break L12;
         }
         $109 = HEAP32[$68>>2]|0;
         $110 = ($109|0)==(1);
         do {
          if ($110) {
           $111 = HEAP32[$20>>2]|0;
           $112 = HEAP32[$111>>2]|0;
           $113 = ($112|0)==(1);
           if (!($113)) {
            break;
           }
           $114 = HEAP32[$69>>2]|0;
           $115 = ($114|0)==(0);
           if ($115) {
            break L49;
           }
          }
         } while(0);
         $116 = (($n$1$i) + 1)|0;
         $117 = (_fips_bn_gencb_call($cb,2,$n$1$i)|0);
         $118 = ($117|0)==(0);
         if ($118) {
          label = 67;
          break L12;
         } else {
          $n$1$i = $116;
         }
        }
        if ((label|0) == 39) {
         _FIPS_put_error(4,129,120,7393,269);
         $ok$1$i = 0;
         break;
        }
        $119 = (_fips_bn_gencb_call($cb,3,1)|0);
        $120 = ($119|0)==(0);
        if ($120) {
         label = 67;
        } else {
         $121 = HEAP32[$42>>2]|0;
         $122 = HEAP32[$47>>2]|0;
         $123 = (_fips_bn_cmp($121,$122)|0);
         $124 = ($123|0)<(0);
         if ($124) {
          $125 = HEAP32[$42>>2]|0;
          $126 = HEAP32[$47>>2]|0;
          HEAP32[$42>>2] = $126;
          HEAP32[$47>>2] = $125;
          $127 = $126;
          $128 = $125;
          $130 = $127;$131 = $128;
         } else {
          $$pre$i = HEAP32[$42>>2]|0;
          $$pre12$i = HEAP32[$47>>2]|0;
          $130 = $$pre$i;$131 = $$pre12$i;
         }
         $129 = HEAP32[$27>>2]|0;
         $132 = (_fips_bn_mul($129,$130,$131,$17)|0);
         $133 = ($132|0)==(0);
         if ($133) {
          label = 67;
         } else {
          $134 = HEAP32[$42>>2]|0;
          $135 = (_fips_bn_value_one()|0);
          $136 = (_fips_bn_sub($20,$134,$135)|0);
          $137 = ($136|0)==(0);
          if ($137) {
           label = 67;
           break;
          }
          $138 = HEAP32[$47>>2]|0;
          $139 = (_fips_bn_value_one()|0);
          $140 = (_fips_bn_sub($21,$138,$139)|0);
          $141 = ($140|0)==(0);
          if ($141) {
           label = 67;
           break;
          }
          $142 = (_fips_bn_mul($19,$20,$21,$17)|0);
          $143 = ($142|0)==(0);
          if ($143) {
           label = 67;
           break;
          }
          $144 = ((($rsa)) + 60|0);
          $145 = HEAP32[$144>>2]|0;
          $146 = $145 & 256;
          $147 = ($146|0)==(0);
          if ($147) {
           $148 = HEAP32[$19>>2]|0;
           HEAP32[$local_r0$i>>2] = $148;
           $149 = ((($19)) + 4|0);
           $150 = HEAP32[$149>>2]|0;
           $151 = ((($local_r0$i)) + 4|0);
           HEAP32[$151>>2] = $150;
           $152 = ((($19)) + 8|0);
           $153 = HEAP32[$152>>2]|0;
           $154 = ((($local_r0$i)) + 8|0);
           HEAP32[$154>>2] = $153;
           $155 = ((($19)) + 12|0);
           $156 = HEAP32[$155>>2]|0;
           $157 = ((($local_r0$i)) + 12|0);
           HEAP32[$157>>2] = $156;
           $158 = ((($local_r0$i)) + 16|0);
           $159 = ((($19)) + 16|0);
           $160 = HEAP32[$159>>2]|0;
           $161 = $160 & -8;
           $162 = $161 | 6;
           HEAP32[$158>>2] = $162;
           $pr0$0$i = $local_r0$i;
          } else {
           $pr0$0$i = $19;
          }
          $163 = HEAP32[$32>>2]|0;
          $164 = HEAP32[$37>>2]|0;
          $165 = (_fips_bn_mod_inverse($163,$164,$pr0$0$i,$17)|0);
          $166 = ($165|0)==(0|0);
          if ($166) {
           label = 67;
           break;
          }
          $167 = HEAP32[$144>>2]|0;
          $168 = $167 & 256;
          $169 = ($168|0)==(0);
          if ($169) {
           $170 = HEAP32[$32>>2]|0;
           $171 = HEAP32[$170>>2]|0;
           HEAP32[$local_d$i>>2] = $171;
           $172 = ((($170)) + 4|0);
           $173 = HEAP32[$172>>2]|0;
           $174 = ((($local_d$i)) + 4|0);
           HEAP32[$174>>2] = $173;
           $175 = ((($170)) + 8|0);
           $176 = HEAP32[$175>>2]|0;
           $177 = ((($local_d$i)) + 8|0);
           HEAP32[$177>>2] = $176;
           $178 = ((($170)) + 12|0);
           $179 = HEAP32[$178>>2]|0;
           $180 = ((($local_d$i)) + 12|0);
           HEAP32[$180>>2] = $179;
           $181 = ((($local_d$i)) + 16|0);
           $182 = ((($170)) + 16|0);
           $183 = HEAP32[$182>>2]|0;
           $184 = $183 & -8;
           $185 = $184 | 6;
           HEAP32[$181>>2] = $185;
           $d$0$i = $local_d$i;
          } else {
           $186 = HEAP32[$32>>2]|0;
           $d$0$i = $186;
          }
          $187 = HEAP32[$52>>2]|0;
          $188 = (_fips_bn_div(0,$187,$d$0$i,$20,$17)|0);
          $189 = ($188|0)==(0);
          if ($189) {
           label = 67;
           break;
          }
          $190 = HEAP32[$57>>2]|0;
          $191 = (_fips_bn_div(0,$190,$d$0$i,$21,$17)|0);
          $192 = ($191|0)==(0);
          if ($192) {
           label = 67;
           break;
          }
          $193 = HEAP32[$144>>2]|0;
          $194 = $193 & 256;
          $195 = ($194|0)==(0);
          if ($195) {
           $196 = HEAP32[$42>>2]|0;
           $197 = HEAP32[$196>>2]|0;
           HEAP32[$local_p$i>>2] = $197;
           $198 = ((($196)) + 4|0);
           $199 = HEAP32[$198>>2]|0;
           $200 = ((($local_p$i)) + 4|0);
           HEAP32[$200>>2] = $199;
           $201 = ((($196)) + 8|0);
           $202 = HEAP32[$201>>2]|0;
           $203 = ((($local_p$i)) + 8|0);
           HEAP32[$203>>2] = $202;
           $204 = ((($196)) + 12|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = ((($local_p$i)) + 12|0);
           HEAP32[$206>>2] = $205;
           $207 = ((($local_p$i)) + 16|0);
           $208 = ((($196)) + 16|0);
           $209 = HEAP32[$208>>2]|0;
           $210 = $209 & -8;
           $211 = $210 | 6;
           HEAP32[$207>>2] = $211;
           $p$0$i = $local_p$i;
          } else {
           $212 = HEAP32[$42>>2]|0;
           $p$0$i = $212;
          }
          $213 = HEAP32[$62>>2]|0;
          $214 = HEAP32[$47>>2]|0;
          $215 = (_fips_bn_mod_inverse($213,$214,$p$0$i,$17)|0);
          $216 = ($215|0)==(0|0);
          if ($216) {
           label = 67;
           break;
          }
          $217 = (_fips_check_rsa($rsa)|0);
          $218 = ($217|0)==(0);
          if ($218) {
           label = 67;
          } else {
           $ok$1$i = 1;
          }
         }
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 67) {
     _FIPS_put_error(4,129,3,7393,338);
     $ok$1$i = 0;
    }
    if ($18) {
     $$0$i = $ok$1$i;
    } else {
     _fips_bn_ctx_end($17);
     _fips_bn_ctx_free($17);
     $$0$i = $ok$1$i;
    }
   }
  } else {
   _FIPS_put_error(45,138,115,7393,204);
   $$0$i = 0;
  }
 } while(0);
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _FIPS_rsa_size($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_FIPS_bn_num_bits($1)|0);
 $3 = (($2) + 7)|0;
 $4 = (($3|0) / 8)&-1;
 return ($4|0);
}
function _FIPS_rsa_public_encrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiiii[$3 & 31]($flen,$from,$to,$rsa,$padding)|0);
 return ($4|0);
}
function _FIPS_rsa_private_decrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiiii[$3 & 31]($flen,$from,$to,$rsa,$padding)|0);
 return ($4|0);
}
function _fips_rsa_setup_blinding($rsa,$in_ctx) {
 $rsa = $rsa|0;
 $in_ctx = $in_ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $ctx$0 = 0, $e$0 = 0, $e$1 = 0, $local_n = 0;
 var $n$0 = 0, $or$cond$i = 0, $or$cond3$i = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $local_n = sp;
 $0 = ($in_ctx|0)==(0|0);
 if ($0) {
  $1 = (_fips_bn_ctx_new()|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $ctx$0 = $1;
  }
 } else {
  $ctx$0 = $in_ctx;
 }
 _fips_bn_ctx_start($ctx$0);
 $3 = (_fips_bn_ctx_get($ctx$0)|0);
 $4 = ($3|0)==(0|0);
 L5: do {
  if ($4) {
   _FIPS_put_error(4,136,65,7427,175);
   $e$1 = 0;$ret$0 = 0;
  } else {
   $5 = ((($rsa)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   L8: do {
    if ($7) {
     $8 = ((($rsa)) + 24|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($rsa)) + 28|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($rsa)) + 32|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($9|0)==(0|0);
     $15 = ($11|0)==(0|0);
     $or$cond$i = $14 | $15;
     $16 = ($13|0)==(0|0);
     $or$cond3$i = $or$cond$i | $16;
     do {
      if (!($or$cond3$i)) {
       _fips_bn_ctx_start($ctx$0);
       $17 = (_fips_bn_ctx_get($ctx$0)|0);
       $18 = (_fips_bn_ctx_get($ctx$0)|0);
       $19 = (_fips_bn_ctx_get($ctx$0)|0);
       $20 = ($19|0)==(0|0);
       if (!($20)) {
        $21 = (_fips_bn_value_one()|0);
        $22 = (_fips_bn_sub($18,$11,$21)|0);
        $23 = ($22|0)==(0);
        if (!($23)) {
         $24 = (_fips_bn_value_one()|0);
         $25 = (_fips_bn_sub($19,$13,$24)|0);
         $26 = ($25|0)==(0);
         if (!($26)) {
          $27 = (_fips_bn_mul($17,$18,$19,$ctx$0)|0);
          $28 = ($27|0)==(0);
          if (!($28)) {
           $29 = (_fips_bn_mod_inverse(0,$9,$17,$ctx$0)|0);
           _fips_bn_ctx_end($ctx$0);
           $30 = ($29|0)==(0|0);
           if ($30) {
            break;
           } else {
            $e$0 = $29;
            break L8;
           }
          }
         }
        }
       }
       _fips_bn_ctx_end($ctx$0);
      }
     } while(0);
     _FIPS_put_error(4,136,140,7427,184);
     $e$1 = 0;$ret$0 = 0;
     break L5;
    } else {
     $e$0 = $6;
    }
   } while(0);
   $31 = (_FIPS_rand_status()|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = ((($rsa)) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $36 = HEAP32[$34>>2]|0;
     $37 = ($36|0)==(0|0);
     if (!($37)) {
      $38 = ((($34)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $39 << 2;
      _FIPS_rand_add($36,$40,+0);
     }
    }
   }
   $41 = ((($rsa)) + 60|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 & 256;
   $44 = ($43|0)==(0);
   $45 = ((($rsa)) + 16|0);
   if ($44) {
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$local_n>>2] = $47;
    $48 = ((($46)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($local_n)) + 4|0);
    HEAP32[$50>>2] = $49;
    $51 = ((($46)) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($local_n)) + 8|0);
    HEAP32[$53>>2] = $52;
    $54 = ((($46)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($local_n)) + 12|0);
    HEAP32[$56>>2] = $55;
    $57 = ((($local_n)) + 16|0);
    $58 = ((($46)) + 16|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 & -8;
    $61 = $60 | 6;
    HEAP32[$57>>2] = $61;
    $n$0 = $local_n;
   } else {
    $62 = HEAP32[$45>>2]|0;
    $n$0 = $62;
   }
   $63 = ((($rsa)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 24|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($rsa)) + 64|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (_fips_bn_blinding_create_param(0,$e$0,$n$0,$ctx$0,$66,$68)|0);
   $70 = ($69|0)==(0|0);
   if ($70) {
    _FIPS_put_error(4,136,3,7427,212);
    $e$1 = $e$0;$ret$0 = 0;
    break;
   } else {
    $71 = (_fips_bn_blinding_thread_id($69)|0);
    _fips_crypto_threadid_current($71);
    $e$1 = $e$0;$ret$0 = $69;
    break;
   }
  }
 } while(0);
 _fips_bn_ctx_end($ctx$0);
 if ($0) {
  _fips_bn_ctx_free($ctx$0);
 }
 $72 = ((($rsa)) + 20|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0|0);
 if (!($74)) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 _FIPS_bn_free($e$1);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _fips_rsa_padding_add_none($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($flen|0)>($tlen|0);
 if ($0) {
  _FIPS_put_error(4,107,110,7438,72);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($flen|0)<($tlen|0);
 if ($1) {
  _FIPS_put_error(4,107,122,7438,78);
  $$0 = 0;
  return ($$0|0);
 } else {
  _memcpy(($to|0),($from|0),($flen|0))|0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_rsa_padding_check_none($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($tlen|0)<($flen|0);
 if ($0) {
  _FIPS_put_error(4,111,109,7438,92);
  $$0 = -1;
  return ($$0|0);
 } else {
  $1 = (($tlen) - ($flen))|0;
  _memset(($to|0),0,($1|0))|0;
  $2 = (($to) + ($1)|0);
  _memcpy(($2|0),($from|0),($flen|0))|0;
  $$0 = $tlen;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_rsa_padding_add_pkcs1_oaep($to,$tlen,$from,$flen,$param,$plen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $param = $param|0;
 $plen = $plen|0;
 var $$0 = 0, $$sum2 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond8 = 0, $i$07 = 0, $seedmask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $seedmask = sp;
 $0 = (($tlen) + -1)|0;
 $1 = (($tlen) + -42)|0;
 $2 = ($1|0)<($flen|0);
 if ($2) {
  _FIPS_put_error(4,121,110,7449,47);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($tlen|0)<(42);
 if ($3) {
  _FIPS_put_error(4,121,120,7449,53);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$to>>0] = 0;
 $4 = ((($to)) + 1|0);
 $5 = ((($to)) + 21|0);
 $6 = (_FIPS_evp_sha1()|0);
 $7 = (_FIPS_digest($param,$plen,$5,0,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($to)) + 41|0);
 $10 = (($0) - ($flen))|0;
 $11 = (($10) + -41)|0;
 _memset(($9|0),0,($11|0))|0;
 $12 = (($to) + ($10)|0);
 HEAP8[$12>>0] = 1;
 $$sum2 = (($tlen) - ($flen))|0;
 $13 = (($to) + ($$sum2)|0);
 _memcpy(($13|0),($from|0),($flen|0))|0;
 $14 = (_FIPS_rand_bytes($4,20)|0);
 $15 = ($14|0)<(1);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($tlen) + -21)|0;
 $17 = (_FIPS_malloc($16,7449,75)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  _FIPS_put_error(4,121,65,7449,78);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (_FIPS_evp_sha1()|0);
 $20 = (_fips_pkcs1_mgf1($17,$16,$4,20,$19)|0);
 $21 = ($20|0)<(0);
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$07 = 0;
 }
 while(1) {
  $22 = (($17) + ($i$07)|0);
  $23 = HEAP8[$22>>0]|0;
  $$sum4 = (($i$07) + 21)|0;
  $24 = (($to) + ($$sum4)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 ^ $23;
  HEAP8[$24>>0] = $26;
  $27 = (($i$07) + 1)|0;
  $exitcond8 = ($27|0)==($16|0);
  if ($exitcond8) {
   break;
  } else {
   $i$07 = $27;
  }
 }
 $28 = (_FIPS_evp_sha1()|0);
 $29 = (_fips_pkcs1_mgf1($seedmask,20,$5,$16,$28)|0);
 $30 = ($29|0)<(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = HEAP8[$seedmask>>0]|0;
 $32 = ((($to)) + 1|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33 ^ $31;
 HEAP8[$32>>0] = $34;
 $35 = ((($seedmask)) + 1|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = ((($to)) + 2|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38 ^ $36;
 HEAP8[$37>>0] = $39;
 $40 = ((($seedmask)) + 2|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = ((($to)) + 3|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43 ^ $41;
 HEAP8[$42>>0] = $44;
 $45 = ((($seedmask)) + 3|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ((($to)) + 4|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48 ^ $46;
 HEAP8[$47>>0] = $49;
 $50 = ((($seedmask)) + 4|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = ((($to)) + 5|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53 ^ $51;
 HEAP8[$52>>0] = $54;
 $55 = ((($seedmask)) + 5|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ((($to)) + 6|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58 ^ $56;
 HEAP8[$57>>0] = $59;
 $60 = ((($seedmask)) + 6|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = ((($to)) + 7|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63 ^ $61;
 HEAP8[$62>>0] = $64;
 $65 = ((($seedmask)) + 7|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = ((($to)) + 8|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68 ^ $66;
 HEAP8[$67>>0] = $69;
 $70 = ((($seedmask)) + 8|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = ((($to)) + 9|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73 ^ $71;
 HEAP8[$72>>0] = $74;
 $75 = ((($seedmask)) + 9|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = ((($to)) + 10|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78 ^ $76;
 HEAP8[$77>>0] = $79;
 $80 = ((($seedmask)) + 10|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = ((($to)) + 11|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83 ^ $81;
 HEAP8[$82>>0] = $84;
 $85 = ((($seedmask)) + 11|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = ((($to)) + 12|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88 ^ $86;
 HEAP8[$87>>0] = $89;
 $90 = ((($seedmask)) + 12|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = ((($to)) + 13|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93 ^ $91;
 HEAP8[$92>>0] = $94;
 $95 = ((($seedmask)) + 13|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = ((($to)) + 14|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98 ^ $96;
 HEAP8[$97>>0] = $99;
 $100 = ((($seedmask)) + 14|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = ((($to)) + 15|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103 ^ $101;
 HEAP8[$102>>0] = $104;
 $105 = ((($seedmask)) + 15|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = ((($to)) + 16|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108 ^ $106;
 HEAP8[$107>>0] = $109;
 $110 = ((($seedmask)) + 16|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = ((($to)) + 17|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113 ^ $111;
 HEAP8[$112>>0] = $114;
 $115 = ((($seedmask)) + 17|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = ((($to)) + 18|0);
 $118 = HEAP8[$117>>0]|0;
 $119 = $118 ^ $116;
 HEAP8[$117>>0] = $119;
 $120 = ((($seedmask)) + 18|0);
 $121 = HEAP8[$120>>0]|0;
 $122 = ((($to)) + 19|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = $123 ^ $121;
 HEAP8[$122>>0] = $124;
 $125 = ((($seedmask)) + 19|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = ((($to)) + 20|0);
 $128 = HEAP8[$127>>0]|0;
 $129 = $128 ^ $126;
 HEAP8[$127>>0] = $129;
 _FIPS_free($17);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _fips_rsa_padding_check_pkcs1_oaep($to,$tlen,$from,$flen,$num,$param,$plen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 $param = $param|0;
 $plen = $plen|0;
 var $$ = 0, $$0 = 0, $$flen = 0, $$lobit = 0, $$sum = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond19 = 0, $i$017 = 0;
 var $i$114 = 0, $i$2$lcssa = 0, $i$211 = 0, $mlen$0 = 0, $phash = 0, $seed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $seed = sp + 20|0;
 $phash = sp;
 $0 = (($num) + -1)|0;
 $1 = ($num|0)<(42);
 if ($1) {
  _FIPS_put_error(4,122,121,7449,183);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($0) - ($flen))|0;
 $3 = ($2|0)<(0);
 $$ = $3 ? 0 : $2;
 $$lobit = $2 >>> 31;
 $4 = (($num) + -21)|0;
 $5 = (($4) + ($0))|0;
 $6 = (_FIPS_malloc($5,7449,126)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _FIPS_put_error(4,122,65,7449,129);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $$flen = $3 ? $0 : $flen;
 $8 = (($6) + ($4)|0);
 _memset(($8|0),0,($$|0))|0;
 $$sum = (($$) + ($4))|0;
 $9 = (($6) + ($$sum)|0);
 _memcpy(($9|0),($from|0),($$flen|0))|0;
 $10 = (($6) + ($0)|0);
 $11 = (_FIPS_evp_sha1()|0);
 $12 = (_fips_pkcs1_mgf1($seed,20,$10,$4,$11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $i$017 = 0;
 } else {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $$sum5 = (($i$017) + ($4))|0;
  $14 = (($6) + ($$sum5)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = (($seed) + ($i$017)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 ^ $15;
  HEAP8[$16>>0] = $18;
  $19 = (($i$017) + 1)|0;
  $exitcond19 = ($19|0)==(20);
  if ($exitcond19) {
   break;
  } else {
   $i$017 = $19;
  }
 }
 $20 = (_FIPS_evp_sha1()|0);
 $21 = (_fips_pkcs1_mgf1($6,$4,$seed,20,$20)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = ($num|0)>(21);
 if ($23) {
  $i$114 = 0;
  while(1) {
   $$sum4 = (($i$114) + ($0))|0;
   $24 = (($6) + ($$sum4)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = (($6) + ($i$114)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 ^ $25;
   HEAP8[$26>>0] = $28;
   $29 = (($i$114) + 1)|0;
   $exitcond = ($29|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $i$114 = $29;
   }
  }
 }
 $30 = (_FIPS_evp_sha1()|0);
 $31 = (_FIPS_digest($param,$plen,$phash,0,$30)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = (_memcmp($6,$phash,20)|0);
 $34 = $33 | $$lobit;
 $35 = ($34|0)==(0);
 do {
  if ($35) {
   $36 = ($4|0)>(20);
   L26: do {
    if ($36) {
     $i$211 = 20;
     while(1) {
      $37 = (($6) + ($i$211)|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = ($38<<24>>24)==(0);
      if (!($39)) {
       $i$2$lcssa = $i$211;
       break L26;
      }
      $40 = (($i$211) + 1)|0;
      $41 = ($40|0)<($4|0);
      if ($41) {
       $i$211 = $40;
      } else {
       $i$2$lcssa = $40;
       break;
      }
     }
    } else {
     $i$2$lcssa = 20;
    }
   } while(0);
   $42 = ($i$2$lcssa|0)==($4|0);
   if ($42) {
    _FIPS_put_error(4,122,121,7449,183);
    break;
   }
   $43 = (($6) + ($i$2$lcssa)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(1);
   if ($45) {
    $46 = (($i$2$lcssa) + 1)|0;
    $47 = (($4) - ($46))|0;
    $48 = ($47|0)>($tlen|0);
    if ($48) {
     _FIPS_put_error(4,122,109,7449,170);
     $mlen$0 = -1;
    } else {
     $49 = (($6) + ($46)|0);
     _memcpy(($to|0),($49|0),($47|0))|0;
     $mlen$0 = $47;
    }
    _FIPS_free($6);
    $$0 = $mlen$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    label = 21;
   }
  } else {
   label = 21;
  }
 } while(0);
 if ((label|0) == 21) {
  _FIPS_put_error(4,122,121,7449,183);
 }
 _FIPS_free($6);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _fips_pkcs1_mgf1($mask,$len,$seed,$seedlen,$dgst) {
 $mask = $mask|0;
 $len = $len|0;
 $seed = $seed|0;
 $seedlen = $seedlen|0;
 $dgst = $dgst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $cnt = 0, $i$02 = 0, $md = 0, $outlen$01 = 0, $outlen$01$lcssa16 = 0, $rv$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $cnt = sp + 88|0;
 $c = sp;
 $md = sp + 24|0;
 _FIPS_md_ctx_init($c);
 $0 = ((($dgst)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 L1: do {
  if ($2) {
   $rv$0 = -1;
  } else {
   $3 = ($len|0)>(0);
   if ($3) {
    $4 = ((($cnt)) + 1|0);
    $5 = ((($cnt)) + 2|0);
    $6 = ((($cnt)) + 3|0);
    $i$02 = 0;$outlen$01 = 0;
    while(1) {
     $7 = $i$02 >>> 24;
     $8 = $7&255;
     HEAP8[$cnt>>0] = $8;
     $9 = $i$02 >>> 16;
     $10 = $9&255;
     HEAP8[$4>>0] = $10;
     $11 = $i$02 >>> 8;
     $12 = $11&255;
     HEAP8[$5>>0] = $12;
     $13 = $i$02&255;
     HEAP8[$6>>0] = $13;
     $14 = (_FIPS_digestinit($c,$dgst)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $rv$0 = -1;
      break L1;
     }
     $16 = (_FIPS_digestupdate($c,$seed,$seedlen)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      $rv$0 = -1;
      break L1;
     }
     $18 = (_FIPS_digestupdate($c,$cnt,4)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $rv$0 = -1;
      break L1;
     }
     $20 = (($outlen$01) + ($1))|0;
     $21 = ($20|0)>($len|0);
     if ($21) {
      $outlen$01$lcssa16 = $outlen$01;
      break;
     }
     $22 = (($mask) + ($outlen$01)|0);
     $23 = (_FIPS_digestfinal($c,$22,0)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $rv$0 = -1;
      break L1;
     }
     $29 = (($i$02) + 1)|0;
     $30 = ($20|0)<($len|0);
     if ($30) {
      $i$02 = $29;$outlen$01 = $20;
     } else {
      $rv$0 = 0;
      break L1;
     }
    }
    $25 = (_FIPS_digestfinal($c,$md,0)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $rv$0 = -1;
    } else {
     $27 = (($mask) + ($outlen$01$lcssa16)|0);
     $28 = (($len) - ($outlen$01$lcssa16))|0;
     _memcpy(($27|0),($md|0),($28|0))|0;
     $rv$0 = 0;
    }
   } else {
    $rv$0 = 0;
   }
  }
 } while(0);
 (_FIPS_md_ctx_cleanup($c)|0);
 STACKTOP = sp;return ($rv$0|0);
}
function _fips_rsa_padding_add_pkcs1_type_1($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($tlen) + -11)|0;
 $1 = ($0|0)<($flen|0);
 if ($1) {
  _FIPS_put_error(4,108,110,7460,75);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = ((($to)) + 1|0);
  HEAP8[$to>>0] = 0;
  $3 = ((($to)) + 2|0);
  HEAP8[$2>>0] = 1;
  $4 = (($tlen) + -3)|0;
  $5 = (($4) - ($flen))|0;
  _memset(($3|0),-1,($5|0))|0;
  $$sum = (($5) + 2)|0;
  $6 = (($to) + ($$sum)|0);
  $$sum1 = (($5) + 3)|0;
  $7 = (($to) + ($$sum1)|0);
  HEAP8[$6>>0] = 0;
  _memcpy(($7|0),($from|0),($flen|0))|0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _fips_rsa_padding_check_pkcs1_type_1($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $from$pn10 = 0, $from$pn10$lcssa30 = 0, $from$pn10$phi = 0, $i$03 = 0;
 var $i$09 = 0, $i$09$lcssa32 = 0, $p$0 = 0, $p$011 = 0, $p$08 = 0, $p$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($flen) + 1)|0;
 $1 = ($0|0)==($num|0);
 if ($1) {
  $2 = HEAP8[$from>>0]|0;
  $3 = ($2<<24>>24)==(1);
  if ($3) {
   $4 = (($flen) + -1)|0;
   $p$08 = ((($from)) + 1|0);
   $5 = ($flen|0)>(1);
   L4: do {
    if ($5) {
     $from$pn10 = $from;$i$09 = 0;$p$011 = $p$08;
     L5: while(1) {
      $6 = HEAP8[$p$011>>0]|0;
      switch ($6<<24>>24) {
      case 0:  {
       $from$pn10$lcssa30 = $from$pn10;$i$09$lcssa32 = $i$09;
       label = 6;
       break L5;
       break;
      }
      case -1:  {
       break;
      }
      default: {
       break L5;
      }
      }
      $8 = (($i$09) + 1)|0;
      $p$0 = ((($p$011)) + 1|0);
      $9 = ($8|0)<($4|0);
      if ($9) {
       $from$pn10$phi = $p$011;$i$09 = $8;$p$011 = $p$0;$from$pn10 = $from$pn10$phi;
      } else {
       $i$03 = $8;$p$1 = $p$0;
       break L4;
      }
     }
     if ((label|0) == 6) {
      $7 = ((($from$pn10$lcssa30)) + 2|0);
      $i$03 = $i$09$lcssa32;$p$1 = $7;
      break;
     }
     _FIPS_put_error(4,112,102,7460,115);
     $$0 = -1;
     return ($$0|0);
    } else {
     $i$03 = 0;$p$1 = $p$08;
    }
   } while(0);
   $10 = ($i$03|0)==($4|0);
   if ($10) {
    _FIPS_put_error(4,112,113,7460,124);
    $$0 = -1;
    return ($$0|0);
   }
   $11 = ($i$03|0)<(8);
   if ($11) {
    _FIPS_put_error(4,112,103,7460,130);
    $$0 = -1;
    return ($$0|0);
   }
   $$neg = (($flen) + -2)|0;
   $12 = (($$neg) - ($i$03))|0;
   $13 = ($12|0)>($tlen|0);
   if ($13) {
    _FIPS_put_error(4,112,109,7460,137);
    $$0 = -1;
    return ($$0|0);
   } else {
    _memcpy(($to|0),($p$1|0),($12|0))|0;
    $$0 = $12;
    return ($$0|0);
   }
  }
 }
 _FIPS_put_error(4,112,106,7460,102);
 $$0 = -1;
 return ($$0|0);
}
function _fips_rsa_padding_add_pkcs1_type_2($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$04 = 0, $p$0$lcssa = 0, $p$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($tlen) + -11)|0;
 $1 = ($0|0)<($flen|0);
 if ($1) {
  _FIPS_put_error(4,109,110,7460,153);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($to)) + 1|0);
 HEAP8[$to>>0] = 0;
 $3 = ((($to)) + 2|0);
 HEAP8[$2>>0] = 2;
 $4 = (($tlen) + -3)|0;
 $5 = (($4) - ($flen))|0;
 $6 = (_FIPS_rand_bytes($3,$5)|0);
 $7 = ($6|0)<(1);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ($5|0)>(0);
 L8: do {
  if ($8) {
   $i$04 = 0;$p$05 = $3;
   L9: while(1) {
    $9 = HEAP8[$p$05>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     while(1) {
      $11 = (_FIPS_rand_bytes($p$05,1)|0);
      $12 = ($11|0)<(1);
      if ($12) {
       $$0 = 0;
       break L9;
      }
      $13 = HEAP8[$p$05>>0]|0;
      $14 = ($13<<24>>24)==(0);
      if (!($14)) {
       break;
      }
     }
    }
    $15 = ((($p$05)) + 1|0);
    $16 = (($i$04) + 1)|0;
    $17 = ($16|0)<($5|0);
    if ($17) {
     $i$04 = $16;$p$05 = $15;
    } else {
     $p$0$lcssa = $15;
     break L8;
    }
   }
   return ($$0|0);
  } else {
   $p$0$lcssa = $3;
  }
 } while(0);
 $18 = ((($p$0$lcssa)) + 1|0);
 HEAP8[$p$0$lcssa>>0] = 0;
 _memcpy(($18|0),($from|0),($flen|0))|0;
 $$0 = 1;
 return ($$0|0);
}
function _fips_rsa_padding_check_pkcs1_type_2($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0;
 var $p$02 = 0, $p$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($flen) + 1)|0;
 $1 = ($0|0)==($num|0);
 if ($1) {
  $2 = HEAP8[$from>>0]|0;
  $3 = ($2<<24>>24)==(2);
  if ($3) {
   $4 = ((($from)) + 1|0);
   $5 = (($flen) + -1)|0;
   $6 = ($flen|0)>(1);
   L4: do {
    if ($6) {
     $i$01 = 0;$p$02 = $4;
     while(1) {
      $7 = ((($p$02)) + 1|0);
      $8 = HEAP8[$p$02>>0]|0;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $i$0$lcssa = $i$01;$p$1 = $7;
       break L4;
      }
      $10 = (($i$01) + 1)|0;
      $11 = ($10|0)<($5|0);
      if ($11) {
       $i$01 = $10;$p$02 = $7;
      } else {
       $i$0$lcssa = $10;$p$1 = $7;
       break;
      }
     }
    } else {
     $i$0$lcssa = 0;$p$1 = $4;
    }
   } while(0);
   $12 = ($i$0$lcssa|0)==($5|0);
   if ($12) {
    _FIPS_put_error(4,113,113,7460,206);
    $$0 = -1;
    return ($$0|0);
   }
   $13 = ($i$0$lcssa|0)<(8);
   if ($13) {
    _FIPS_put_error(4,113,103,7460,212);
    $$0 = -1;
    return ($$0|0);
   }
   $$neg = (($flen) + -2)|0;
   $14 = (($$neg) - ($i$0$lcssa))|0;
   $15 = ($14|0)>($tlen|0);
   if ($15) {
    _FIPS_put_error(4,113,109,7460,219);
    $$0 = -1;
    return ($$0|0);
   } else {
    _memcpy(($to|0),($p$1|0),($14|0))|0;
    $$0 = $14;
    return ($$0|0);
   }
  }
 }
 _FIPS_put_error(4,113,107,7460,192);
 $$0 = -1;
 return ($$0|0);
}
function _fips_rsa_verify_pkcs1_pss_mgf1($rsa,$mHash,$Hash,$mgf1Hash,$EM,$sLen) {
 $rsa = $rsa|0;
 $mHash = $mHash|0;
 $Hash = $Hash|0;
 $mgf1Hash = $mgf1Hash|0;
 $EM = $EM|0;
 $sLen = $sLen|0;
 var $$01 = 0, $$02 = 0, $$lcssa = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $H_ = 0, $Hash$mgf1Hash = 0, $ctx = 0, $emLen$0 = 0, $i$013 = 0;
 var $i$1 = 0, $or$cond = 0, $or$cond5 = 0, $ret$0$ph = 0, $ret$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $ctx = sp;
 $H_ = sp + 24|0;
 _FIPS_md_ctx_init($ctx);
 $0 = ($mgf1Hash|0)==(0|0);
 $Hash$mgf1Hash = $0 ? $Hash : $mgf1Hash;
 $1 = ((($Hash)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  $ret$07 = 0;
  (_FIPS_md_ctx_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 switch ($sLen|0) {
 case -1:  {
  $$02 = $2;
  break;
 }
 case -2:  {
  $$02 = -2;
  break;
 }
 default: {
  $4 = ($sLen|0)<(-2);
  if ($4) {
   _FIPS_put_error(4,126,136,7470,116);
   $ret$07 = 0;
   (_FIPS_md_ctx_cleanup($ctx)|0);
   STACKTOP = sp;return ($ret$07|0);
  } else {
   $$02 = $sLen;
  }
 }
 }
 $5 = ((($rsa)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_FIPS_bn_num_bits($6)|0);
 $8 = (($7) + 7)|0;
 $9 = $8 & 7;
 $10 = (_FIPS_rsa_size($rsa)|0);
 $11 = HEAP8[$EM>>0]|0;
 $12 = $11&255;
 $13 = 255 << $9;
 $14 = $12 & $13;
 $15 = ($14|0)==(0);
 if (!($15)) {
  _FIPS_put_error(4,126,133,7470,124);
  $ret$07 = 0;
  (_FIPS_md_ctx_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 $16 = ($9|0)==(0);
 $17 = ((($EM)) + 1|0);
 $18 = $16 << 31 >> 31;
 $emLen$0 = (($18) + ($10))|0;
 $$01 = $16 ? $17 : $EM;
 $19 = (($2) + 2)|0;
 $20 = (($19) + ($$02))|0;
 $21 = ($emLen$0|0)<($20|0);
 if ($21) {
  _FIPS_put_error(4,126,109,7470,134);
  $ret$07 = 0;
  (_FIPS_md_ctx_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 $22 = (($emLen$0) + -1)|0;
 $23 = (($$01) + ($22)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24<<24>>24)==(-68);
 if (!($25)) {
  _FIPS_put_error(4,126,134,7470,139);
  $ret$07 = 0;
  (_FIPS_md_ctx_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 $26 = (($emLen$0) - ($2))|0;
 $27 = (($26) + -1)|0;
 $28 = (($$01) + ($27)|0);
 $29 = (_FIPS_malloc($27,7470,144)|0);
 $30 = ($29|0)==(0|0);
 if ($30) {
  _FIPS_put_error(4,126,65,7470,147);
  $ret$07 = 0;
  (_FIPS_md_ctx_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 $31 = (_fips_pkcs1_mgf1($29,$27,$28,$2,$Hash$mgf1Hash)|0);
 $32 = ($31|0)<(0);
 do {
  if ($32) {
   $ret$0$ph = 0;
  } else {
   $33 = ($26|0)>(1);
   if ($33) {
    $i$013 = 0;
    while(1) {
     $34 = (($$01) + ($i$013)|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = (($29) + ($i$013)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37 ^ $35;
     HEAP8[$36>>0] = $38;
     $39 = (($i$013) + 1)|0;
     $40 = ($39|0)<($27|0);
     if ($40) {
      $i$013 = $39;
     } else {
      break;
     }
    }
   }
   if (!($16)) {
    $41 = (8 - ($9))|0;
    $42 = 255 >>> $41;
    $43 = HEAP8[$29>>0]|0;
    $44 = $43&255;
    $45 = $44 & $42;
    $46 = $45&255;
    HEAP8[$29>>0] = $46;
   }
   $47 = (($26) + -2)|0;
   $i$1 = 0;
   while(1) {
    $48 = (($29) + ($i$1)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ($49<<24>>24)==(0);
    $51 = ($i$1|0)<($47|0);
    $or$cond = $51 & $50;
    $52 = (($i$1) + 1)|0;
    if ($or$cond) {
     $i$1 = $52;
    } else {
     $$lcssa = $49;$$lcssa18 = $52;
     break;
    }
   }
   $53 = ($$lcssa<<24>>24)==(1);
   if (!($53)) {
    _FIPS_put_error(4,126,135,7470,159);
    $ret$0$ph = 0;
    break;
   }
   $54 = ($$02|0)<(0);
   $55 = (($27) - ($$lcssa18))|0;
   $56 = ($55|0)==($$02|0);
   $or$cond5 = $54 | $56;
   if (!($or$cond5)) {
    _FIPS_put_error(4,126,136,7470,164);
    $ret$0$ph = 0;
    break;
   }
   $57 = (_FIPS_digestinit($ctx,$Hash)|0);
   $58 = ($57|0)==(0);
   if ($58) {
    $ret$0$ph = 0;
   } else {
    $59 = (_FIPS_digestupdate($ctx,7480,8)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     $ret$0$ph = 0;
    } else {
     $61 = (_FIPS_digestupdate($ctx,$mHash,$2)|0);
     $62 = ($61|0)==(0);
     if ($62) {
      $ret$0$ph = 0;
     } else {
      $63 = ($27|0)==($$lcssa18|0);
      if (!($63)) {
       $64 = (($29) + ($$lcssa18)|0);
       $65 = (_FIPS_digestupdate($ctx,$64,$55)|0);
       $66 = ($65|0)==(0);
       if ($66) {
        $ret$0$ph = 0;
        break;
       }
      }
      $67 = (_FIPS_digestfinal($ctx,$H_,0)|0);
      $68 = ($67|0)==(0);
      if ($68) {
       $ret$0$ph = 0;
      } else {
       $69 = (_memcmp($H_,$28,$2)|0);
       $70 = ($69|0)==(0);
       if ($70) {
        $ret$0$ph = 1;
       } else {
        _FIPS_put_error(4,126,104,7470,180);
        $ret$0$ph = 0;
       }
      }
     }
    }
   }
  }
 } while(0);
 _FIPS_free($29);
 $ret$07 = $ret$0$ph;
 (_FIPS_md_ctx_cleanup($ctx)|0);
 STACKTOP = sp;return ($ret$07|0);
}
function _fips_rsa_padding_add_pkcs1_pss_mgf1($rsa,$EM,$mHash,$Hash,$mgf1Hash,$sLen) {
 $rsa = $rsa|0;
 $EM = $EM|0;
 $mHash = $mHash|0;
 $Hash = $Hash|0;
 $mgf1Hash = $mgf1Hash|0;
 $sLen = $sLen|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $Hash$mgf1Hash = 0, $ctx = 0, $emLen$0 = 0, $exitcond = 0, $i$07 = 0, $p$08 = 0, $ret$0 = 0, $ret$03 = 0, $ret$05 = 0, $salt$0 = 0, $salt$16 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ctx = sp;
 $0 = ($mgf1Hash|0)==(0|0);
 $Hash$mgf1Hash = $0 ? $Hash : $mgf1Hash;
 $1 = ((($Hash)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  $ret$03 = 0;
  STACKTOP = sp;return ($ret$03|0);
 }
 switch ($sLen|0) {
 case -1:  {
  $$02 = $2;
  break;
 }
 case -2:  {
  $$02 = -2;
  break;
 }
 default: {
  $4 = ($sLen|0)<(-2);
  if ($4) {
   _FIPS_put_error(4,152,136,7470,228);
   $ret$03 = 0;
   STACKTOP = sp;return ($ret$03|0);
  } else {
   $$02 = $sLen;
  }
 }
 }
 $5 = ((($rsa)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_FIPS_bn_num_bits($6)|0);
 $8 = (($7) + 7)|0;
 $9 = $8 & 7;
 $10 = (_FIPS_rsa_size($rsa)|0);
 $11 = ($9|0)==(0);
 if ($11) {
  $12 = ((($EM)) + 1|0);
  HEAP8[$EM>>0] = 0;
  $13 = (($10) + -1)|0;
  $$0 = $12;$emLen$0 = $13;
 } else {
  $$0 = $EM;$emLen$0 = $10;
 }
 $14 = ($$02|0)==(-2);
 if ($14) {
  $15 = (-2 - ($2))|0;
  $16 = (($15) + ($emLen$0))|0;
  $$1 = $16;
 } else {
  $17 = (($2) + 2)|0;
  $18 = (($17) + ($$02))|0;
  $19 = ($emLen$0|0)<($18|0);
  if ($19) {
   _FIPS_put_error(4,152,110,7470,245);
   $ret$03 = 0;
   STACKTOP = sp;return ($ret$03|0);
  } else {
   $$1 = $$02;
  }
 }
 $20 = ($$1|0)>(0);
 do {
  if ($20) {
   $21 = (_FIPS_malloc($$1,7470,250)|0);
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    $23 = (_FIPS_rand_bytes($21,$$1)|0);
    $24 = ($23|0)<(1);
    if ($24) {
     $ret$05 = 0;$salt$16 = $21;
     break;
    } else {
     $salt$0 = $21;
     label = 16;
     break;
    }
   }
   _FIPS_put_error(4,152,65,7470,253);
   $ret$03 = 0;
   STACKTOP = sp;return ($ret$03|0);
  } else {
   $salt$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $25 = (($emLen$0) - ($2))|0;
  $26 = (($25) + -1)|0;
  $27 = (($$0) + ($26)|0);
  _FIPS_md_ctx_init($ctx);
  $28 = (_FIPS_digestinit($ctx,$Hash)|0);
  $29 = ($28|0)==(0);
  do {
   if ($29) {
    $ret$0 = 0;
   } else {
    $30 = (_FIPS_digestupdate($ctx,7480,8)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $ret$0 = 0;
    } else {
     $32 = (_FIPS_digestupdate($ctx,$mHash,$2)|0);
     $33 = ($32|0)==(0);
     if ($33) {
      $ret$0 = 0;
     } else {
      $34 = ($$1|0)==(0);
      if (!($34)) {
       $35 = (_FIPS_digestupdate($ctx,$salt$0,$$1)|0);
       $36 = ($35|0)==(0);
       if ($36) {
        $ret$0 = 0;
        break;
       }
      }
      $37 = (_FIPS_digestfinal($ctx,$27,0)|0);
      $38 = ($37|0)==(0);
      if ($38) {
       $ret$0 = 0;
      } else {
       (_FIPS_md_ctx_cleanup($ctx)|0);
       $39 = (_fips_pkcs1_mgf1($$0,$26,$27,$2,$Hash$mgf1Hash)|0);
       $40 = ($39|0)==(0);
       if ($40) {
        $41 = (($emLen$0) - ($$1))|0;
        $42 = (($41) - ($2))|0;
        $43 = (($42) + -2)|0;
        $44 = (($$0) + ($43)|0);
        $45 = HEAP8[$44>>0]|0;
        $46 = $45&255;
        $47 = $46 ^ 1;
        $48 = $47&255;
        HEAP8[$44>>0] = $48;
        if ($20) {
         $$sum = (($42) + -1)|0;
         $49 = (($$0) + ($$sum)|0);
         $i$07 = 0;$p$08 = $49;
         while(1) {
          $50 = (($salt$0) + ($i$07)|0);
          $51 = HEAP8[$50>>0]|0;
          $52 = ((($p$08)) + 1|0);
          $53 = HEAP8[$p$08>>0]|0;
          $54 = $53 ^ $51;
          HEAP8[$p$08>>0] = $54;
          $55 = (($i$07) + 1)|0;
          $exitcond = ($55|0)==($$1|0);
          if ($exitcond) {
           break;
          } else {
           $i$07 = $55;$p$08 = $52;
          }
         }
        }
        if (!($11)) {
         $56 = (8 - ($9))|0;
         $57 = 255 >>> $56;
         $58 = HEAP8[$$0>>0]|0;
         $59 = $58&255;
         $60 = $59 & $57;
         $61 = $60&255;
         HEAP8[$$0>>0] = $61;
        }
        $62 = (($emLen$0) + -1)|0;
        $63 = (($$0) + ($62)|0);
        HEAP8[$63>>0] = -68;
        $ret$0 = 1;
       } else {
        $ret$0 = 0;
       }
      }
     }
    }
   }
  } while(0);
  $64 = ($salt$0|0)==(0|0);
  if ($64) {
   $ret$03 = $ret$0;
   STACKTOP = sp;return ($ret$03|0);
  } else {
   $ret$05 = $ret$0;$salt$16 = $salt$0;
  }
 }
 _FIPS_free($salt$16);
 $ret$03 = $ret$05;
 STACKTOP = sp;return ($ret$03|0);
}
function _fips_rsa_padding_add_sslv23($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $p$0$lcssa = 0, $p$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($tlen) + -11)|0;
 $1 = ($0|0)<($flen|0);
 if ($1) {
  _FIPS_put_error(4,110,110,7488,75);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($to)) + 1|0);
 HEAP8[$to>>0] = 0;
 $3 = ((($to)) + 2|0);
 HEAP8[$2>>0] = 2;
 $4 = (($0) - ($flen))|0;
 $5 = (_FIPS_rand_bytes($3,$4)|0);
 $6 = ($5|0)<(1);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($4|0)>(0);
 L8: do {
  if ($7) {
   $i$04 = 0;$p$05 = $3;
   L9: while(1) {
    $8 = HEAP8[$p$05>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     while(1) {
      $10 = (_FIPS_rand_bytes($p$05,1)|0);
      $11 = ($10|0)<(1);
      if ($11) {
       $$0 = 0;
       break L9;
      }
      $12 = HEAP8[$p$05>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if (!($13)) {
       break;
      }
     }
    }
    $14 = ((($p$05)) + 1|0);
    $15 = (($i$04) + 1)|0;
    $16 = ($15|0)<($4|0);
    if ($16) {
     $i$04 = $15;$p$05 = $14;
    } else {
     $p$0$lcssa = $14;
     break L8;
    }
   }
   return ($$0|0);
  } else {
   $p$0$lcssa = $3;
  }
 } while(0);
 $17 = $p$0$lcssa;
 $18 = $17;
 HEAP8[$18>>0]=50529027&255;HEAP8[$18+1>>0]=(50529027>>8)&255;HEAP8[$18+2>>0]=(50529027>>16)&255;HEAP8[$18+3>>0]=50529027>>24;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP8[$20>>0]=50529027&255;HEAP8[$20+1>>0]=(50529027>>8)&255;HEAP8[$20+2>>0]=(50529027>>16)&255;HEAP8[$20+3>>0]=50529027>>24;
 $21 = ((($p$0$lcssa)) + 8|0);
 $22 = ((($p$0$lcssa)) + 9|0);
 HEAP8[$21>>0] = 0;
 _memcpy(($22|0),($from|0),($flen|0))|0;
 $$0 = 1;
 return ($$0|0);
}
function _fips_rsa_padding_check_sslv23($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa24 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $39$phi = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$04 = 0, $or$cond = 0, $p$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($flen|0)<(10);
 if ($0) {
  _FIPS_put_error(4,114,111,7488,116);
  $$0 = -1;
  return ($$0|0);
 }
 $1 = (($flen) + 1)|0;
 $2 = ($1|0)==($num|0);
 if ($2) {
  $3 = HEAP8[$from>>0]|0;
  $4 = ($3<<24>>24)==(2);
  if ($4) {
   $5 = ((($from)) + 1|0);
   $6 = (($flen) + -1)|0;
   $39 = $from;$i$04 = 0;$p$05 = $5;
   while(1) {
    $7 = ((($p$05)) + 1|0);
    $8 = HEAP8[$p$05>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$lcssa = $39;$$lcssa24 = $7;$i$0$lcssa = $i$04;
     break;
    }
    $10 = (($i$04) + 1)|0;
    $11 = ($10|0)<($6|0);
    if ($11) {
     $39$phi = $p$05;$i$04 = $10;$p$05 = $7;$39 = $39$phi;
    } else {
     $$lcssa = $39;$$lcssa24 = $7;$i$0$lcssa = $10;
     break;
    }
   }
   $12 = ($i$0$lcssa|0)==($6|0);
   $13 = ($i$0$lcssa|0)<(8);
   $or$cond = $12 | $13;
   if ($or$cond) {
    _FIPS_put_error(4,114,113,7488,132);
    $$0 = -1;
    return ($$0|0);
   }
   $14 = ((($$lcssa)) + -7|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(3);
   if ($16) {
    $17 = ((($$lcssa)) + -6|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(3);
    if ($19) {
     $22 = ((($$lcssa)) + -5|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = ($23<<24>>24)==(3);
     if ($24) {
      $25 = ((($$lcssa)) + -4|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = ($26<<24>>24)==(3);
      if ($27) {
       $28 = ((($$lcssa)) + -3|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = ($29<<24>>24)==(3);
       if ($30) {
        $31 = ((($$lcssa)) + -2|0);
        $32 = HEAP8[$31>>0]|0;
        $33 = ($32<<24>>24)==(3);
        if ($33) {
         $34 = ((($$lcssa)) + -1|0);
         $35 = HEAP8[$34>>0]|0;
         $36 = ($35<<24>>24)==(3);
         if ($36) {
          $37 = HEAP8[$$lcssa>>0]|0;
          $38 = ($37<<24>>24)==(3);
          if ($38) {
           _FIPS_put_error(4,114,115,7488,141);
           $$0 = -1;
           return ($$0|0);
          }
         }
        }
       }
      }
     }
    }
   }
   $$neg = (($flen) + -2)|0;
   $20 = (($$neg) - ($i$0$lcssa))|0;
   $21 = ($20|0)>($tlen|0);
   if ($21) {
    _FIPS_put_error(4,114,109,7488,149);
    $$0 = -1;
    return ($$0|0);
   } else {
    _memcpy(($to|0),($$lcssa24|0),($20|0))|0;
    $$0 = $20;
    return ($$0|0);
   }
  }
 }
 _FIPS_put_error(4,114,107,7488,121);
 $$0 = -1;
 return ($$0|0);
}
function _fips_rsa_padding_add_x931($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$1 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($tlen) - ($flen))|0;
 $1 = (($0) + -2)|0;
 $2 = ($0|0)<(2);
 if ($2) {
  _FIPS_put_error(4,127,110,7498,82);
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ($1|0)==(0);
 $4 = ((($to)) + 1|0);
 if ($3) {
  HEAP8[$to>>0] = 106;
  $11 = $to;$p$1 = $4;
 } else {
  HEAP8[$to>>0] = 107;
  $5 = ($1|0)>(1);
  if ($5) {
   $6 = (($0) + -3)|0;
   _memset(($4|0),-69,($6|0))|0;
   $7 = (($to) + ($1)|0);
   $phitmp = (($0) + -1)|0;
   $9 = $phitmp;$p$0 = $7;
  } else {
   $9 = 2;$p$0 = $4;
  }
  $8 = (($to) + ($9)|0);
  HEAP8[$p$0>>0] = -70;
  $11 = $p$0;$p$1 = $8;
 }
 _memcpy(($p$1|0),($from|0),($flen|0))|0;
 $$sum = (($flen) + 1)|0;
 $10 = (($11) + ($$sum)|0);
 HEAP8[$10>>0] = -52;
 $$0 = 1;
 return ($$0|0);
}
function _fips_rsa_padding_check_x931($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $$lcssa18 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$0$lcssa = 0, $i$02 = 0, $j$0 = 0, $p$03 = 0, $p$03$lcssa17 = 0, $p$2 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)==($flen|0);
 if ($0) {
  $1 = HEAP8[$from>>0]|0;
  $2 = $1 & -2;
  $switch = ($2<<24>>24)==(106);
  if ($switch) {
   $3 = ((($from)) + 1|0);
   $4 = ($1<<24>>24)==(107);
   L4: do {
    if ($4) {
     $5 = (($num) + -3)|0;
     $6 = ($num|0)>(3);
     do {
      if ($6) {
       $i$02 = 0;$p$03 = $3;
       L7: while(1) {
        $7 = ((($p$03)) + 1|0);
        $8 = HEAP8[$p$03>>0]|0;
        switch ($8<<24>>24) {
        case -70:  {
         $$lcssa18 = $7;$i$0$lcssa = $i$02;$p$03$lcssa17 = $p$03;
         label = 9;
         break L7;
         break;
        }
        case -69:  {
         break;
        }
        default: {
         break L7;
        }
        }
        $9 = (($i$02) + 1)|0;
        $10 = ($5|0)>($9|0);
        if ($10) {
         $i$02 = $9;$p$03 = $7;
        } else {
         $$lcssa18 = $7;$i$0$lcssa = $9;$p$03$lcssa17 = $p$03;
         label = 9;
         break;
        }
       }
       if ((label|0) == 9) {
        $11 = (($5) - ($i$0$lcssa))|0;
        $12 = ($i$0$lcssa|0)==(0);
        if ($12) {
         break;
        } else {
         $15 = $p$03$lcssa17;$j$0 = $11;$p$2 = $$lcssa18;
         break L4;
        }
       }
       _FIPS_put_error(4,128,138,7498,131);
       $$0 = -1;
       return ($$0|0);
      }
     } while(0);
     _FIPS_put_error(4,128,138,7498,140);
     $$0 = -1;
     return ($$0|0);
    } else {
     $13 = (($num) + -2)|0;
     $15 = $from;$j$0 = $13;$p$2 = $3;
    }
   } while(0);
   $$sum = (($j$0) + 1)|0;
   $14 = (($15) + ($$sum)|0);
   $16 = HEAP8[$14>>0]|0;
   $17 = ($16<<24>>24)==(-52);
   if ($17) {
    _memcpy(($to|0),($p$2|0),($j$0|0))|0;
    $$0 = $j$0;
    return ($$0|0);
   } else {
    _FIPS_put_error(4,128,139,7498,149);
    $$0 = -1;
    return ($$0|0);
   }
  }
 }
 _FIPS_put_error(4,128,137,7498,116);
 $$0 = -1;
 return ($$0|0);
}
function _fips_rsa_x931_hash_id($nid) {
 $nid = $nid|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($nid|0) {
 case 64:  {
  $$0 = 51;
  break;
 }
 case 672:  {
  $$0 = 52;
  break;
 }
 case 673:  {
  $$0 = 54;
  break;
 }
 case 674:  {
  $$0 = 53;
  break;
 }
 default: {
  $$0 = -1;
 }
 }
 return ($$0|0);
}
function _fips_sha1_update($c,$data_,$len) {
 $c = $c|0;
 $data_ = $data_|0;
 $len = $len|0;
 var $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$0 = 0, $data$1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  return 1;
 }
 $1 = ((($c)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $len << 3;
 $4 = (($2) + ($3))|0;
 $5 = ($4>>>0)<($2>>>0);
 $6 = ((($c)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  $11 = $8;
 } else {
  $11 = $7;
 }
 $9 = $len >>> 29;
 $10 = (($11) + ($9))|0;
 HEAP32[$6>>2] = $10;
 HEAP32[$1>>2] = $4;
 $12 = ((($c)) + 92|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $$01 = $len;$data$0 = $data_;
  } else {
   $15 = ((($c)) + 28|0);
   $16 = (($13) + ($len))|0;
   $17 = $16 | $len;
   $18 = ($17>>>0)>(63);
   $19 = (($15) + ($13)|0);
   if ($18) {
    $20 = (64 - ($13))|0;
    _memcpy(($19|0),($data_|0),($20|0))|0;
    _fips_sha1_block_data_order($c,$15,1);
    $21 = (($data_) + ($20)|0);
    $22 = (($len) - ($20))|0;
    dest=$15; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$01 = $22;$data$0 = $21;
    break;
   }
   _memcpy(($19|0),($data_|0),($len|0))|0;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($23) + ($len))|0;
   HEAP32[$12>>2] = $24;
   return 1;
  }
 } while(0);
 $25 = $$01 >>> 6;
 $26 = ($25|0)==(0);
 if ($26) {
  $$1 = $$01;$data$1 = $data$0;
 } else {
  _fips_sha1_block_data_order($c,$data$0,$25);
  $27 = $25 << 6;
  $28 = (($data$0) + ($27)|0);
  $29 = (($$01) - ($27))|0;
  $$1 = $29;$data$1 = $28;
 }
 $30 = ($$1|0)==(0);
 if ($30) {
  return 1;
 }
 $31 = ((($c)) + 28|0);
 HEAP32[$12>>2] = $$1;
 _memcpy(($31|0),($data$1|0),($$1|0))|0;
 return 1;
}
function _fips_sha1_final($md,$c) {
 $md = $md|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $n$0 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 28|0);
 $1 = ((($c)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2)|0);
 HEAP8[$3>>0] = -128;
 $4 = (($2) + 1)|0;
 $5 = ($4>>>0)>(56);
 if ($5) {
  $6 = (($0) + ($4)|0);
  $7 = (63 - ($2))|0;
  _memset(($6|0),0,($7|0))|0;
  _fips_sha1_block_data_order($c,$0,1);
  $n$0 = 0;
 } else {
  $n$0 = $4;
 }
 $8 = (($0) + ($n$0)|0);
 $9 = (56 - ($n$0))|0;
 _memset(($8|0),0,($9|0))|0;
 $10 = ((($c)) + 84|0);
 $11 = ((($c)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 24;
 $14 = $13&255;
 $15 = ((($10)) + 1|0);
 HEAP8[$10>>0] = $14;
 $16 = $12 >>> 16;
 $17 = $16&255;
 $18 = ((($10)) + 2|0);
 HEAP8[$15>>0] = $17;
 $19 = $12 >>> 8;
 $20 = $19&255;
 $21 = ((($10)) + 3|0);
 HEAP8[$18>>0] = $20;
 $22 = $12&255;
 $23 = ((($c)) + 88|0);
 HEAP8[$21>>0] = $22;
 $24 = ((($c)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 >>> 24;
 $27 = $26&255;
 $28 = ((($23)) + 1|0);
 HEAP8[$23>>0] = $27;
 $29 = $25 >>> 16;
 $30 = $29&255;
 $31 = ((($23)) + 2|0);
 HEAP8[$28>>0] = $30;
 $32 = $25 >>> 8;
 $33 = $32&255;
 $34 = ((($23)) + 3|0);
 HEAP8[$31>>0] = $33;
 $35 = $25&255;
 HEAP8[$34>>0] = $35;
 _fips_sha1_block_data_order($c,$0,1);
 dest=$0; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $36 = HEAP32[$c>>2]|0;
 $37 = $36 >>> 24;
 $38 = $37&255;
 $39 = ((($md)) + 1|0);
 HEAP8[$md>>0] = $38;
 $40 = $36 >>> 16;
 $41 = $40&255;
 $42 = ((($md)) + 2|0);
 HEAP8[$39>>0] = $41;
 $43 = $36 >>> 8;
 $44 = $43&255;
 $45 = ((($md)) + 3|0);
 HEAP8[$42>>0] = $44;
 $46 = $36&255;
 $47 = ((($md)) + 4|0);
 HEAP8[$45>>0] = $46;
 $48 = ((($c)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 24;
 $51 = $50&255;
 $52 = ((($md)) + 5|0);
 HEAP8[$47>>0] = $51;
 $53 = $49 >>> 16;
 $54 = $53&255;
 $55 = ((($md)) + 6|0);
 HEAP8[$52>>0] = $54;
 $56 = $49 >>> 8;
 $57 = $56&255;
 $58 = ((($md)) + 7|0);
 HEAP8[$55>>0] = $57;
 $59 = $49&255;
 $60 = ((($md)) + 8|0);
 HEAP8[$58>>0] = $59;
 $61 = ((($c)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 >>> 24;
 $64 = $63&255;
 $65 = ((($md)) + 9|0);
 HEAP8[$60>>0] = $64;
 $66 = $62 >>> 16;
 $67 = $66&255;
 $68 = ((($md)) + 10|0);
 HEAP8[$65>>0] = $67;
 $69 = $62 >>> 8;
 $70 = $69&255;
 $71 = ((($md)) + 11|0);
 HEAP8[$68>>0] = $70;
 $72 = $62&255;
 $73 = ((($md)) + 12|0);
 HEAP8[$71>>0] = $72;
 $74 = ((($c)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 >>> 24;
 $77 = $76&255;
 $78 = ((($md)) + 13|0);
 HEAP8[$73>>0] = $77;
 $79 = $75 >>> 16;
 $80 = $79&255;
 $81 = ((($md)) + 14|0);
 HEAP8[$78>>0] = $80;
 $82 = $75 >>> 8;
 $83 = $82&255;
 $84 = ((($md)) + 15|0);
 HEAP8[$81>>0] = $83;
 $85 = $75&255;
 $86 = ((($md)) + 16|0);
 HEAP8[$84>>0] = $85;
 $87 = ((($c)) + 16|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 >>> 24;
 $90 = $89&255;
 $91 = ((($md)) + 17|0);
 HEAP8[$86>>0] = $90;
 $92 = $88 >>> 16;
 $93 = $92&255;
 $94 = ((($md)) + 18|0);
 HEAP8[$91>>0] = $93;
 $95 = $88 >>> 8;
 $96 = $95&255;
 $97 = ((($md)) + 19|0);
 HEAP8[$94>>0] = $96;
 $98 = $88&255;
 HEAP8[$97>>0] = $98;
 return 1;
}
function _fips_sha1_init($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$c; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$c>>2] = 1732584193;
 $0 = ((($c)) + 4|0);
 HEAP32[$0>>2] = -271733879;
 $1 = ((($c)) + 8|0);
 HEAP32[$1>>2] = -1732584194;
 $2 = ((($c)) + 12|0);
 HEAP32[$2>>2] = 271733878;
 $3 = ((($c)) + 16|0);
 HEAP32[$3>>2] = -1009589776;
 return 1;
}
function _fips_sha1_block_data_order($c,$p,$num) {
 $c = $c|0;
 $p = $p|0;
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $A$0 = 0, $A$0$pre = 0, $B$0 = 0, $B$0$pre = 0, $C$0 = 0, $C$0$pre = 0, $D$0 = 0, $D$0$pre = 0, $E$0 = 0, $data$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 4|0);
 $1 = ((($c)) + 8|0);
 $2 = ((($c)) + 12|0);
 $3 = ((($c)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $D$0$pre = HEAP32[$2>>2]|0;
 $C$0$pre = HEAP32[$1>>2]|0;
 $B$0$pre = HEAP32[$0>>2]|0;
 $A$0$pre = HEAP32[$c>>2]|0;
 $$0 = $num;$A$0 = $A$0$pre;$B$0 = $B$0$pre;$C$0 = $C$0$pre;$D$0 = $D$0$pre;$E$0 = $4;$data$0 = $p;
 while(1) {
  $5 = ((($data$0)) + 1|0);
  $6 = HEAP8[$data$0>>0]|0;
  $7 = $6&255;
  $8 = $7 << 24;
  $9 = ((($data$0)) + 2|0);
  $10 = HEAP8[$5>>0]|0;
  $11 = $10&255;
  $12 = $11 << 16;
  $13 = $12 | $8;
  $14 = ((($data$0)) + 3|0);
  $15 = HEAP8[$9>>0]|0;
  $16 = $15&255;
  $17 = $16 << 8;
  $18 = $13 | $17;
  $19 = ((($data$0)) + 4|0);
  $20 = HEAP8[$14>>0]|0;
  $21 = $20&255;
  $22 = $18 | $21;
  $23 = ((($data$0)) + 5|0);
  $24 = HEAP8[$19>>0]|0;
  $25 = $24&255;
  $26 = $25 << 24;
  $27 = ((($data$0)) + 6|0);
  $28 = HEAP8[$23>>0]|0;
  $29 = $28&255;
  $30 = $29 << 16;
  $31 = $30 | $26;
  $32 = ((($data$0)) + 7|0);
  $33 = HEAP8[$27>>0]|0;
  $34 = $33&255;
  $35 = $34 << 8;
  $36 = $31 | $35;
  $37 = ((($data$0)) + 8|0);
  $38 = HEAP8[$32>>0]|0;
  $39 = $38&255;
  $40 = $36 | $39;
  $41 = $A$0 << 5;
  $42 = $A$0 >>> 27;
  $43 = $41 | $42;
  $44 = $C$0 ^ $D$0;
  $45 = $44 & $B$0;
  $46 = $45 ^ $D$0;
  $47 = (($E$0) + 1518500249)|0;
  $48 = (($47) + ($46))|0;
  $49 = (($48) + ($43))|0;
  $50 = (($49) + ($22))|0;
  $51 = $B$0 << 30;
  $52 = $B$0 >>> 2;
  $53 = $51 | $52;
  $54 = ((($data$0)) + 9|0);
  $55 = HEAP8[$37>>0]|0;
  $56 = $55&255;
  $57 = $56 << 24;
  $58 = ((($data$0)) + 10|0);
  $59 = HEAP8[$54>>0]|0;
  $60 = $59&255;
  $61 = $60 << 16;
  $62 = $61 | $57;
  $63 = ((($data$0)) + 11|0);
  $64 = HEAP8[$58>>0]|0;
  $65 = $64&255;
  $66 = $65 << 8;
  $67 = $62 | $66;
  $68 = ((($data$0)) + 12|0);
  $69 = HEAP8[$63>>0]|0;
  $70 = $69&255;
  $71 = $67 | $70;
  $72 = $50 << 5;
  $73 = $50 >>> 27;
  $74 = $72 | $73;
  $75 = $53 ^ $C$0;
  $76 = $75 & $A$0;
  $77 = $76 ^ $C$0;
  $78 = (($D$0) + 1518500249)|0;
  $79 = (($78) + ($77))|0;
  $80 = (($79) + ($40))|0;
  $81 = (($80) + ($74))|0;
  $82 = $A$0 << 30;
  $83 = $A$0 >>> 2;
  $84 = $82 | $83;
  $85 = ((($data$0)) + 13|0);
  $86 = HEAP8[$68>>0]|0;
  $87 = $86&255;
  $88 = $87 << 24;
  $89 = ((($data$0)) + 14|0);
  $90 = HEAP8[$85>>0]|0;
  $91 = $90&255;
  $92 = $91 << 16;
  $93 = $92 | $88;
  $94 = ((($data$0)) + 15|0);
  $95 = HEAP8[$89>>0]|0;
  $96 = $95&255;
  $97 = $96 << 8;
  $98 = $93 | $97;
  $99 = ((($data$0)) + 16|0);
  $100 = HEAP8[$94>>0]|0;
  $101 = $100&255;
  $102 = $98 | $101;
  $103 = $81 << 5;
  $104 = $81 >>> 27;
  $105 = $103 | $104;
  $106 = $84 ^ $53;
  $107 = $50 & $106;
  $108 = $107 ^ $53;
  $109 = (($C$0) + 1518500249)|0;
  $110 = (($109) + ($108))|0;
  $111 = (($110) + ($71))|0;
  $112 = (($111) + ($105))|0;
  $113 = $50 << 30;
  $114 = $50 >>> 2;
  $115 = $113 | $114;
  $116 = ((($data$0)) + 17|0);
  $117 = HEAP8[$99>>0]|0;
  $118 = $117&255;
  $119 = $118 << 24;
  $120 = ((($data$0)) + 18|0);
  $121 = HEAP8[$116>>0]|0;
  $122 = $121&255;
  $123 = $122 << 16;
  $124 = $123 | $119;
  $125 = ((($data$0)) + 19|0);
  $126 = HEAP8[$120>>0]|0;
  $127 = $126&255;
  $128 = $127 << 8;
  $129 = $124 | $128;
  $130 = ((($data$0)) + 20|0);
  $131 = HEAP8[$125>>0]|0;
  $132 = $131&255;
  $133 = $129 | $132;
  $134 = $112 << 5;
  $135 = $112 >>> 27;
  $136 = $134 | $135;
  $137 = $115 ^ $84;
  $138 = $81 & $137;
  $139 = $138 ^ $84;
  $140 = (($53) + 1518500249)|0;
  $141 = (($140) + ($139))|0;
  $142 = (($141) + ($102))|0;
  $143 = (($142) + ($136))|0;
  $144 = $81 << 30;
  $145 = $81 >>> 2;
  $146 = $144 | $145;
  $147 = ((($data$0)) + 21|0);
  $148 = HEAP8[$130>>0]|0;
  $149 = $148&255;
  $150 = $149 << 24;
  $151 = ((($data$0)) + 22|0);
  $152 = HEAP8[$147>>0]|0;
  $153 = $152&255;
  $154 = $153 << 16;
  $155 = $154 | $150;
  $156 = ((($data$0)) + 23|0);
  $157 = HEAP8[$151>>0]|0;
  $158 = $157&255;
  $159 = $158 << 8;
  $160 = $155 | $159;
  $161 = ((($data$0)) + 24|0);
  $162 = HEAP8[$156>>0]|0;
  $163 = $162&255;
  $164 = $160 | $163;
  $165 = $143 << 5;
  $166 = $143 >>> 27;
  $167 = $165 | $166;
  $168 = $146 ^ $115;
  $169 = $112 & $168;
  $170 = $169 ^ $115;
  $171 = (($84) + 1518500249)|0;
  $172 = (($171) + ($170))|0;
  $173 = (($172) + ($133))|0;
  $174 = (($173) + ($167))|0;
  $175 = $112 << 30;
  $176 = $112 >>> 2;
  $177 = $175 | $176;
  $178 = ((($data$0)) + 25|0);
  $179 = HEAP8[$161>>0]|0;
  $180 = $179&255;
  $181 = $180 << 24;
  $182 = ((($data$0)) + 26|0);
  $183 = HEAP8[$178>>0]|0;
  $184 = $183&255;
  $185 = $184 << 16;
  $186 = $185 | $181;
  $187 = ((($data$0)) + 27|0);
  $188 = HEAP8[$182>>0]|0;
  $189 = $188&255;
  $190 = $189 << 8;
  $191 = $186 | $190;
  $192 = ((($data$0)) + 28|0);
  $193 = HEAP8[$187>>0]|0;
  $194 = $193&255;
  $195 = $191 | $194;
  $196 = $174 << 5;
  $197 = $174 >>> 27;
  $198 = $196 | $197;
  $199 = $177 ^ $146;
  $200 = $143 & $199;
  $201 = $200 ^ $146;
  $202 = (($115) + 1518500249)|0;
  $203 = (($202) + ($201))|0;
  $204 = (($203) + ($164))|0;
  $205 = (($204) + ($198))|0;
  $206 = $143 << 30;
  $207 = $143 >>> 2;
  $208 = $206 | $207;
  $209 = ((($data$0)) + 29|0);
  $210 = HEAP8[$192>>0]|0;
  $211 = $210&255;
  $212 = $211 << 24;
  $213 = ((($data$0)) + 30|0);
  $214 = HEAP8[$209>>0]|0;
  $215 = $214&255;
  $216 = $215 << 16;
  $217 = $216 | $212;
  $218 = ((($data$0)) + 31|0);
  $219 = HEAP8[$213>>0]|0;
  $220 = $219&255;
  $221 = $220 << 8;
  $222 = $217 | $221;
  $223 = ((($data$0)) + 32|0);
  $224 = HEAP8[$218>>0]|0;
  $225 = $224&255;
  $226 = $222 | $225;
  $227 = $205 << 5;
  $228 = $205 >>> 27;
  $229 = $227 | $228;
  $230 = $208 ^ $177;
  $231 = $174 & $230;
  $232 = $231 ^ $177;
  $233 = (($146) + 1518500249)|0;
  $234 = (($233) + ($232))|0;
  $235 = (($234) + ($195))|0;
  $236 = (($235) + ($229))|0;
  $237 = $174 << 30;
  $238 = $174 >>> 2;
  $239 = $237 | $238;
  $240 = ((($data$0)) + 33|0);
  $241 = HEAP8[$223>>0]|0;
  $242 = $241&255;
  $243 = $242 << 24;
  $244 = ((($data$0)) + 34|0);
  $245 = HEAP8[$240>>0]|0;
  $246 = $245&255;
  $247 = $246 << 16;
  $248 = $247 | $243;
  $249 = ((($data$0)) + 35|0);
  $250 = HEAP8[$244>>0]|0;
  $251 = $250&255;
  $252 = $251 << 8;
  $253 = $248 | $252;
  $254 = ((($data$0)) + 36|0);
  $255 = HEAP8[$249>>0]|0;
  $256 = $255&255;
  $257 = $253 | $256;
  $258 = $236 << 5;
  $259 = $236 >>> 27;
  $260 = $258 | $259;
  $261 = $239 ^ $208;
  $262 = $205 & $261;
  $263 = $262 ^ $208;
  $264 = (($177) + 1518500249)|0;
  $265 = (($264) + ($263))|0;
  $266 = (($265) + ($226))|0;
  $267 = (($266) + ($260))|0;
  $268 = $205 << 30;
  $269 = $205 >>> 2;
  $270 = $268 | $269;
  $271 = ((($data$0)) + 37|0);
  $272 = HEAP8[$254>>0]|0;
  $273 = $272&255;
  $274 = $273 << 24;
  $275 = ((($data$0)) + 38|0);
  $276 = HEAP8[$271>>0]|0;
  $277 = $276&255;
  $278 = $277 << 16;
  $279 = $278 | $274;
  $280 = ((($data$0)) + 39|0);
  $281 = HEAP8[$275>>0]|0;
  $282 = $281&255;
  $283 = $282 << 8;
  $284 = $279 | $283;
  $285 = ((($data$0)) + 40|0);
  $286 = HEAP8[$280>>0]|0;
  $287 = $286&255;
  $288 = $284 | $287;
  $289 = $267 << 5;
  $290 = $267 >>> 27;
  $291 = $289 | $290;
  $292 = $270 ^ $239;
  $293 = $236 & $292;
  $294 = $293 ^ $239;
  $295 = (($208) + 1518500249)|0;
  $296 = (($295) + ($294))|0;
  $297 = (($296) + ($257))|0;
  $298 = (($297) + ($291))|0;
  $299 = $236 << 30;
  $300 = $236 >>> 2;
  $301 = $299 | $300;
  $302 = ((($data$0)) + 41|0);
  $303 = HEAP8[$285>>0]|0;
  $304 = $303&255;
  $305 = $304 << 24;
  $306 = ((($data$0)) + 42|0);
  $307 = HEAP8[$302>>0]|0;
  $308 = $307&255;
  $309 = $308 << 16;
  $310 = $309 | $305;
  $311 = ((($data$0)) + 43|0);
  $312 = HEAP8[$306>>0]|0;
  $313 = $312&255;
  $314 = $313 << 8;
  $315 = $310 | $314;
  $316 = ((($data$0)) + 44|0);
  $317 = HEAP8[$311>>0]|0;
  $318 = $317&255;
  $319 = $315 | $318;
  $320 = $298 << 5;
  $321 = $298 >>> 27;
  $322 = $320 | $321;
  $323 = $301 ^ $270;
  $324 = $267 & $323;
  $325 = $324 ^ $270;
  $326 = (($239) + 1518500249)|0;
  $327 = (($326) + ($325))|0;
  $328 = (($327) + ($288))|0;
  $329 = (($328) + ($322))|0;
  $330 = $267 << 30;
  $331 = $267 >>> 2;
  $332 = $330 | $331;
  $333 = ((($data$0)) + 45|0);
  $334 = HEAP8[$316>>0]|0;
  $335 = $334&255;
  $336 = $335 << 24;
  $337 = ((($data$0)) + 46|0);
  $338 = HEAP8[$333>>0]|0;
  $339 = $338&255;
  $340 = $339 << 16;
  $341 = $340 | $336;
  $342 = ((($data$0)) + 47|0);
  $343 = HEAP8[$337>>0]|0;
  $344 = $343&255;
  $345 = $344 << 8;
  $346 = $341 | $345;
  $347 = ((($data$0)) + 48|0);
  $348 = HEAP8[$342>>0]|0;
  $349 = $348&255;
  $350 = $346 | $349;
  $351 = $329 << 5;
  $352 = $329 >>> 27;
  $353 = $351 | $352;
  $354 = $332 ^ $301;
  $355 = $298 & $354;
  $356 = $355 ^ $301;
  $357 = (($270) + 1518500249)|0;
  $358 = (($357) + ($356))|0;
  $359 = (($358) + ($319))|0;
  $360 = (($359) + ($353))|0;
  $361 = $298 << 30;
  $362 = $298 >>> 2;
  $363 = $361 | $362;
  $364 = ((($data$0)) + 49|0);
  $365 = HEAP8[$347>>0]|0;
  $366 = $365&255;
  $367 = $366 << 24;
  $368 = ((($data$0)) + 50|0);
  $369 = HEAP8[$364>>0]|0;
  $370 = $369&255;
  $371 = $370 << 16;
  $372 = $371 | $367;
  $373 = ((($data$0)) + 51|0);
  $374 = HEAP8[$368>>0]|0;
  $375 = $374&255;
  $376 = $375 << 8;
  $377 = $372 | $376;
  $378 = ((($data$0)) + 52|0);
  $379 = HEAP8[$373>>0]|0;
  $380 = $379&255;
  $381 = $377 | $380;
  $382 = $360 << 5;
  $383 = $360 >>> 27;
  $384 = $382 | $383;
  $385 = $363 ^ $332;
  $386 = $329 & $385;
  $387 = $386 ^ $332;
  $388 = (($301) + 1518500249)|0;
  $389 = (($388) + ($387))|0;
  $390 = (($389) + ($350))|0;
  $391 = (($390) + ($384))|0;
  $392 = $329 << 30;
  $393 = $329 >>> 2;
  $394 = $392 | $393;
  $395 = ((($data$0)) + 53|0);
  $396 = HEAP8[$378>>0]|0;
  $397 = $396&255;
  $398 = $397 << 24;
  $399 = ((($data$0)) + 54|0);
  $400 = HEAP8[$395>>0]|0;
  $401 = $400&255;
  $402 = $401 << 16;
  $403 = $402 | $398;
  $404 = ((($data$0)) + 55|0);
  $405 = HEAP8[$399>>0]|0;
  $406 = $405&255;
  $407 = $406 << 8;
  $408 = $403 | $407;
  $409 = ((($data$0)) + 56|0);
  $410 = HEAP8[$404>>0]|0;
  $411 = $410&255;
  $412 = $408 | $411;
  $413 = $391 << 5;
  $414 = $391 >>> 27;
  $415 = $413 | $414;
  $416 = $394 ^ $363;
  $417 = $360 & $416;
  $418 = $417 ^ $363;
  $419 = (($332) + 1518500249)|0;
  $420 = (($419) + ($418))|0;
  $421 = (($420) + ($381))|0;
  $422 = (($421) + ($415))|0;
  $423 = $360 << 30;
  $424 = $360 >>> 2;
  $425 = $423 | $424;
  $426 = ((($data$0)) + 57|0);
  $427 = HEAP8[$409>>0]|0;
  $428 = $427&255;
  $429 = $428 << 24;
  $430 = ((($data$0)) + 58|0);
  $431 = HEAP8[$426>>0]|0;
  $432 = $431&255;
  $433 = $432 << 16;
  $434 = $433 | $429;
  $435 = ((($data$0)) + 59|0);
  $436 = HEAP8[$430>>0]|0;
  $437 = $436&255;
  $438 = $437 << 8;
  $439 = $434 | $438;
  $440 = ((($data$0)) + 60|0);
  $441 = HEAP8[$435>>0]|0;
  $442 = $441&255;
  $443 = $439 | $442;
  $444 = $422 << 5;
  $445 = $422 >>> 27;
  $446 = $444 | $445;
  $447 = $425 ^ $394;
  $448 = $391 & $447;
  $449 = $448 ^ $394;
  $450 = (($363) + 1518500249)|0;
  $451 = (($450) + ($449))|0;
  $452 = (($451) + ($412))|0;
  $453 = (($452) + ($446))|0;
  $454 = $391 << 30;
  $455 = $391 >>> 2;
  $456 = $454 | $455;
  $457 = ((($data$0)) + 61|0);
  $458 = HEAP8[$440>>0]|0;
  $459 = $458&255;
  $460 = $459 << 24;
  $461 = ((($data$0)) + 62|0);
  $462 = HEAP8[$457>>0]|0;
  $463 = $462&255;
  $464 = $463 << 16;
  $465 = $464 | $460;
  $466 = ((($data$0)) + 63|0);
  $467 = HEAP8[$461>>0]|0;
  $468 = $467&255;
  $469 = $468 << 8;
  $470 = $465 | $469;
  $471 = ((($data$0)) + 64|0);
  $472 = HEAP8[$466>>0]|0;
  $473 = $472&255;
  $474 = $470 | $473;
  $475 = $453 << 5;
  $476 = $453 >>> 27;
  $477 = $475 | $476;
  $478 = $456 ^ $425;
  $479 = $422 & $478;
  $480 = $479 ^ $425;
  $481 = (($394) + 1518500249)|0;
  $482 = (($481) + ($480))|0;
  $483 = (($482) + ($443))|0;
  $484 = (($483) + ($477))|0;
  $485 = $422 << 30;
  $486 = $422 >>> 2;
  $487 = $485 | $486;
  $488 = $484 << 5;
  $489 = $484 >>> 27;
  $490 = $488 | $489;
  $491 = $487 ^ $456;
  $492 = $453 & $491;
  $493 = $492 ^ $456;
  $494 = (($425) + 1518500249)|0;
  $495 = (($494) + ($493))|0;
  $496 = (($495) + ($474))|0;
  $497 = (($496) + ($490))|0;
  $498 = $453 << 30;
  $499 = $453 >>> 2;
  $500 = $498 | $499;
  $501 = $71 ^ $22;
  $502 = $501 ^ $257;
  $503 = $502 ^ $412;
  $504 = $503 << 1;
  $505 = $503 >>> 31;
  $506 = $504 | $505;
  $507 = (($456) + 1518500249)|0;
  $508 = $497 << 5;
  $509 = $497 >>> 27;
  $510 = $508 | $509;
  $511 = $500 ^ $487;
  $512 = $484 & $511;
  $513 = $512 ^ $487;
  $514 = (($507) + ($506))|0;
  $515 = (($514) + ($513))|0;
  $516 = (($515) + ($510))|0;
  $517 = $484 << 30;
  $518 = $484 >>> 2;
  $519 = $517 | $518;
  $520 = $102 ^ $40;
  $521 = $520 ^ $288;
  $522 = $521 ^ $443;
  $523 = $522 << 1;
  $524 = $522 >>> 31;
  $525 = $523 | $524;
  $526 = (($487) + 1518500249)|0;
  $527 = $516 << 5;
  $528 = $516 >>> 27;
  $529 = $527 | $528;
  $530 = $519 ^ $500;
  $531 = $497 & $530;
  $532 = $531 ^ $500;
  $533 = (($526) + ($525))|0;
  $534 = (($533) + ($532))|0;
  $535 = (($534) + ($529))|0;
  $536 = $497 << 30;
  $537 = $497 >>> 2;
  $538 = $536 | $537;
  $539 = $133 ^ $71;
  $540 = $539 ^ $319;
  $541 = $540 ^ $474;
  $542 = $541 << 1;
  $543 = $541 >>> 31;
  $544 = $542 | $543;
  $545 = (($500) + 1518500249)|0;
  $546 = $535 << 5;
  $547 = $535 >>> 27;
  $548 = $546 | $547;
  $549 = $538 ^ $519;
  $550 = $516 & $549;
  $551 = $550 ^ $519;
  $552 = (($545) + ($544))|0;
  $553 = (($552) + ($551))|0;
  $554 = (($553) + ($548))|0;
  $555 = $516 << 30;
  $556 = $516 >>> 2;
  $557 = $555 | $556;
  $558 = $164 ^ $102;
  $559 = $558 ^ $350;
  $560 = $559 ^ $506;
  $561 = $560 << 1;
  $562 = $560 >>> 31;
  $563 = $561 | $562;
  $564 = $554 << 5;
  $565 = $554 >>> 27;
  $566 = $564 | $565;
  $567 = $557 ^ $538;
  $568 = $535 & $567;
  $569 = $568 ^ $538;
  $570 = (($563) + 1518500249)|0;
  $571 = (($570) + ($519))|0;
  $572 = (($571) + ($569))|0;
  $573 = (($572) + ($566))|0;
  $574 = $535 << 30;
  $575 = $535 >>> 2;
  $576 = $574 | $575;
  $577 = $195 ^ $133;
  $578 = $577 ^ $381;
  $579 = $578 ^ $525;
  $580 = $579 << 1;
  $581 = $579 >>> 31;
  $582 = $580 | $581;
  $583 = $573 << 5;
  $584 = $573 >>> 27;
  $585 = $583 | $584;
  $586 = $576 ^ $557;
  $587 = $586 ^ $554;
  $588 = (($582) + 1859775393)|0;
  $589 = (($588) + ($538))|0;
  $590 = (($589) + ($587))|0;
  $591 = (($590) + ($585))|0;
  $592 = $554 << 30;
  $593 = $554 >>> 2;
  $594 = $592 | $593;
  $595 = $226 ^ $164;
  $596 = $595 ^ $412;
  $597 = $596 ^ $544;
  $598 = $597 << 1;
  $599 = $597 >>> 31;
  $600 = $598 | $599;
  $601 = $591 << 5;
  $602 = $591 >>> 27;
  $603 = $601 | $602;
  $604 = $594 ^ $576;
  $605 = $604 ^ $573;
  $606 = (($600) + 1859775393)|0;
  $607 = (($606) + ($557))|0;
  $608 = (($607) + ($605))|0;
  $609 = (($608) + ($603))|0;
  $610 = $573 << 30;
  $611 = $573 >>> 2;
  $612 = $610 | $611;
  $613 = $257 ^ $195;
  $614 = $613 ^ $443;
  $615 = $614 ^ $563;
  $616 = $615 << 1;
  $617 = $615 >>> 31;
  $618 = $616 | $617;
  $619 = $609 << 5;
  $620 = $609 >>> 27;
  $621 = $619 | $620;
  $622 = $612 ^ $594;
  $623 = $622 ^ $591;
  $624 = (($618) + 1859775393)|0;
  $625 = (($624) + ($576))|0;
  $626 = (($625) + ($623))|0;
  $627 = (($626) + ($621))|0;
  $628 = $591 << 30;
  $629 = $591 >>> 2;
  $630 = $628 | $629;
  $631 = $288 ^ $226;
  $632 = $631 ^ $474;
  $633 = $632 ^ $582;
  $634 = $633 << 1;
  $635 = $633 >>> 31;
  $636 = $634 | $635;
  $637 = $627 << 5;
  $638 = $627 >>> 27;
  $639 = $637 | $638;
  $640 = $630 ^ $612;
  $641 = $640 ^ $609;
  $642 = (($636) + 1859775393)|0;
  $643 = (($642) + ($594))|0;
  $644 = (($643) + ($641))|0;
  $645 = (($644) + ($639))|0;
  $646 = $609 << 30;
  $647 = $609 >>> 2;
  $648 = $646 | $647;
  $649 = $319 ^ $257;
  $650 = $649 ^ $506;
  $651 = $650 ^ $600;
  $652 = $651 << 1;
  $653 = $651 >>> 31;
  $654 = $652 | $653;
  $655 = $645 << 5;
  $656 = $645 >>> 27;
  $657 = $655 | $656;
  $658 = $648 ^ $630;
  $659 = $658 ^ $627;
  $660 = (($654) + 1859775393)|0;
  $661 = (($660) + ($612))|0;
  $662 = (($661) + ($659))|0;
  $663 = (($662) + ($657))|0;
  $664 = $627 << 30;
  $665 = $627 >>> 2;
  $666 = $664 | $665;
  $667 = $350 ^ $288;
  $668 = $667 ^ $525;
  $669 = $668 ^ $618;
  $670 = $669 << 1;
  $671 = $669 >>> 31;
  $672 = $670 | $671;
  $673 = $663 << 5;
  $674 = $663 >>> 27;
  $675 = $673 | $674;
  $676 = $666 ^ $648;
  $677 = $676 ^ $645;
  $678 = (($672) + 1859775393)|0;
  $679 = (($678) + ($630))|0;
  $680 = (($679) + ($677))|0;
  $681 = (($680) + ($675))|0;
  $682 = $645 << 30;
  $683 = $645 >>> 2;
  $684 = $682 | $683;
  $685 = $381 ^ $319;
  $686 = $685 ^ $544;
  $687 = $686 ^ $636;
  $688 = $687 << 1;
  $689 = $687 >>> 31;
  $690 = $688 | $689;
  $691 = $681 << 5;
  $692 = $681 >>> 27;
  $693 = $691 | $692;
  $694 = $684 ^ $666;
  $695 = $694 ^ $663;
  $696 = (($690) + 1859775393)|0;
  $697 = (($696) + ($648))|0;
  $698 = (($697) + ($695))|0;
  $699 = (($698) + ($693))|0;
  $700 = $663 << 30;
  $701 = $663 >>> 2;
  $702 = $700 | $701;
  $703 = $412 ^ $350;
  $704 = $703 ^ $563;
  $705 = $704 ^ $654;
  $706 = $705 << 1;
  $707 = $705 >>> 31;
  $708 = $706 | $707;
  $709 = $699 << 5;
  $710 = $699 >>> 27;
  $711 = $709 | $710;
  $712 = $702 ^ $684;
  $713 = $712 ^ $681;
  $714 = (($708) + 1859775393)|0;
  $715 = (($714) + ($666))|0;
  $716 = (($715) + ($713))|0;
  $717 = (($716) + ($711))|0;
  $718 = $681 << 30;
  $719 = $681 >>> 2;
  $720 = $718 | $719;
  $721 = $443 ^ $381;
  $722 = $721 ^ $582;
  $723 = $722 ^ $672;
  $724 = $723 << 1;
  $725 = $723 >>> 31;
  $726 = $724 | $725;
  $727 = $717 << 5;
  $728 = $717 >>> 27;
  $729 = $727 | $728;
  $730 = $720 ^ $702;
  $731 = $730 ^ $699;
  $732 = (($726) + 1859775393)|0;
  $733 = (($732) + ($684))|0;
  $734 = (($733) + ($731))|0;
  $735 = (($734) + ($729))|0;
  $736 = $699 << 30;
  $737 = $699 >>> 2;
  $738 = $736 | $737;
  $739 = $474 ^ $412;
  $740 = $739 ^ $600;
  $741 = $740 ^ $690;
  $742 = $741 << 1;
  $743 = $741 >>> 31;
  $744 = $742 | $743;
  $745 = $735 << 5;
  $746 = $735 >>> 27;
  $747 = $745 | $746;
  $748 = $738 ^ $720;
  $749 = $748 ^ $717;
  $750 = (($744) + 1859775393)|0;
  $751 = (($750) + ($702))|0;
  $752 = (($751) + ($749))|0;
  $753 = (($752) + ($747))|0;
  $754 = $717 << 30;
  $755 = $717 >>> 2;
  $756 = $754 | $755;
  $757 = $443 ^ $506;
  $758 = $757 ^ $618;
  $759 = $758 ^ $708;
  $760 = $759 << 1;
  $761 = $759 >>> 31;
  $762 = $760 | $761;
  $763 = $753 << 5;
  $764 = $753 >>> 27;
  $765 = $763 | $764;
  $766 = $756 ^ $738;
  $767 = $766 ^ $735;
  $768 = (($762) + 1859775393)|0;
  $769 = (($768) + ($720))|0;
  $770 = (($769) + ($767))|0;
  $771 = (($770) + ($765))|0;
  $772 = $735 << 30;
  $773 = $735 >>> 2;
  $774 = $772 | $773;
  $775 = $474 ^ $525;
  $776 = $775 ^ $636;
  $777 = $776 ^ $726;
  $778 = $777 << 1;
  $779 = $777 >>> 31;
  $780 = $778 | $779;
  $781 = $771 << 5;
  $782 = $771 >>> 27;
  $783 = $781 | $782;
  $784 = $774 ^ $756;
  $785 = $784 ^ $753;
  $786 = (($780) + 1859775393)|0;
  $787 = (($786) + ($738))|0;
  $788 = (($787) + ($785))|0;
  $789 = (($788) + ($783))|0;
  $790 = $753 << 30;
  $791 = $753 >>> 2;
  $792 = $790 | $791;
  $793 = $544 ^ $506;
  $794 = $793 ^ $654;
  $795 = $794 ^ $744;
  $796 = $795 << 1;
  $797 = $795 >>> 31;
  $798 = $796 | $797;
  $799 = $789 << 5;
  $800 = $789 >>> 27;
  $801 = $799 | $800;
  $802 = $792 ^ $774;
  $803 = $802 ^ $771;
  $804 = (($798) + 1859775393)|0;
  $805 = (($804) + ($756))|0;
  $806 = (($805) + ($803))|0;
  $807 = (($806) + ($801))|0;
  $808 = $771 << 30;
  $809 = $771 >>> 2;
  $810 = $808 | $809;
  $811 = $525 ^ $563;
  $812 = $811 ^ $672;
  $813 = $812 ^ $762;
  $814 = $813 << 1;
  $815 = $813 >>> 31;
  $816 = $814 | $815;
  $817 = $807 << 5;
  $818 = $807 >>> 27;
  $819 = $817 | $818;
  $820 = $810 ^ $792;
  $821 = $820 ^ $789;
  $822 = (($816) + 1859775393)|0;
  $823 = (($822) + ($774))|0;
  $824 = (($823) + ($821))|0;
  $825 = (($824) + ($819))|0;
  $826 = $789 << 30;
  $827 = $789 >>> 2;
  $828 = $826 | $827;
  $829 = $544 ^ $582;
  $830 = $829 ^ $690;
  $831 = $830 ^ $780;
  $832 = $831 << 1;
  $833 = $831 >>> 31;
  $834 = $832 | $833;
  $835 = $825 << 5;
  $836 = $825 >>> 27;
  $837 = $835 | $836;
  $838 = $828 ^ $810;
  $839 = $838 ^ $807;
  $840 = (($834) + 1859775393)|0;
  $841 = (($840) + ($792))|0;
  $842 = (($841) + ($839))|0;
  $843 = (($842) + ($837))|0;
  $844 = $807 << 30;
  $845 = $807 >>> 2;
  $846 = $844 | $845;
  $847 = $600 ^ $563;
  $848 = $847 ^ $708;
  $849 = $848 ^ $798;
  $850 = $849 << 1;
  $851 = $849 >>> 31;
  $852 = $850 | $851;
  $853 = $843 << 5;
  $854 = $843 >>> 27;
  $855 = $853 | $854;
  $856 = $846 ^ $828;
  $857 = $856 ^ $825;
  $858 = (($852) + 1859775393)|0;
  $859 = (($858) + ($810))|0;
  $860 = (($859) + ($857))|0;
  $861 = (($860) + ($855))|0;
  $862 = $825 << 30;
  $863 = $825 >>> 2;
  $864 = $862 | $863;
  $865 = $582 ^ $618;
  $866 = $865 ^ $726;
  $867 = $866 ^ $816;
  $868 = $867 << 1;
  $869 = $867 >>> 31;
  $870 = $868 | $869;
  $871 = $861 << 5;
  $872 = $861 >>> 27;
  $873 = $871 | $872;
  $874 = $864 ^ $846;
  $875 = $874 ^ $843;
  $876 = (($870) + 1859775393)|0;
  $877 = (($876) + ($828))|0;
  $878 = (($877) + ($875))|0;
  $879 = (($878) + ($873))|0;
  $880 = $843 << 30;
  $881 = $843 >>> 2;
  $882 = $880 | $881;
  $883 = $600 ^ $636;
  $884 = $883 ^ $744;
  $885 = $884 ^ $834;
  $886 = $885 << 1;
  $887 = $885 >>> 31;
  $888 = $886 | $887;
  $889 = $879 << 5;
  $890 = $879 >>> 27;
  $891 = $889 | $890;
  $892 = $882 ^ $864;
  $893 = $892 ^ $861;
  $894 = (($888) + 1859775393)|0;
  $895 = (($894) + ($846))|0;
  $896 = (($895) + ($893))|0;
  $897 = (($896) + ($891))|0;
  $898 = $861 << 30;
  $899 = $861 >>> 2;
  $900 = $898 | $899;
  $901 = $654 ^ $618;
  $902 = $901 ^ $762;
  $903 = $902 ^ $852;
  $904 = $903 << 1;
  $905 = $903 >>> 31;
  $906 = $904 | $905;
  $907 = $897 << 5;
  $908 = $897 >>> 27;
  $909 = $907 | $908;
  $910 = $900 ^ $882;
  $911 = $910 ^ $879;
  $912 = (($906) + 1859775393)|0;
  $913 = (($912) + ($864))|0;
  $914 = (($913) + ($911))|0;
  $915 = (($914) + ($909))|0;
  $916 = $879 << 30;
  $917 = $879 >>> 2;
  $918 = $916 | $917;
  $919 = $636 ^ $672;
  $920 = $919 ^ $780;
  $921 = $920 ^ $870;
  $922 = $921 << 1;
  $923 = $921 >>> 31;
  $924 = $922 | $923;
  $925 = $915 << 5;
  $926 = $915 >>> 27;
  $927 = $925 | $926;
  $928 = $918 ^ $900;
  $929 = $928 ^ $897;
  $930 = (($924) + 1859775393)|0;
  $931 = (($930) + ($882))|0;
  $932 = (($931) + ($929))|0;
  $933 = (($932) + ($927))|0;
  $934 = $897 << 30;
  $935 = $897 >>> 2;
  $936 = $934 | $935;
  $937 = $654 ^ $690;
  $938 = $937 ^ $798;
  $939 = $938 ^ $888;
  $940 = $939 << 1;
  $941 = $939 >>> 31;
  $942 = $940 | $941;
  $943 = $933 << 5;
  $944 = $933 >>> 27;
  $945 = $943 | $944;
  $946 = $915 & $936;
  $947 = $915 | $936;
  $948 = $947 & $918;
  $949 = $948 | $946;
  $950 = (($942) + -1894007588)|0;
  $951 = (($950) + ($900))|0;
  $952 = (($951) + ($949))|0;
  $953 = (($952) + ($945))|0;
  $954 = $915 << 30;
  $955 = $915 >>> 2;
  $956 = $954 | $955;
  $957 = $708 ^ $672;
  $958 = $957 ^ $816;
  $959 = $958 ^ $906;
  $960 = $959 << 1;
  $961 = $959 >>> 31;
  $962 = $960 | $961;
  $963 = $953 << 5;
  $964 = $953 >>> 27;
  $965 = $963 | $964;
  $966 = $933 & $956;
  $967 = $933 | $956;
  $968 = $967 & $936;
  $969 = $968 | $966;
  $970 = (($962) + -1894007588)|0;
  $971 = (($970) + ($918))|0;
  $972 = (($971) + ($969))|0;
  $973 = (($972) + ($965))|0;
  $974 = $933 << 30;
  $975 = $933 >>> 2;
  $976 = $974 | $975;
  $977 = $690 ^ $726;
  $978 = $977 ^ $834;
  $979 = $978 ^ $924;
  $980 = $979 << 1;
  $981 = $979 >>> 31;
  $982 = $980 | $981;
  $983 = $973 << 5;
  $984 = $973 >>> 27;
  $985 = $983 | $984;
  $986 = $953 & $976;
  $987 = $953 | $976;
  $988 = $987 & $956;
  $989 = $988 | $986;
  $990 = (($982) + -1894007588)|0;
  $991 = (($990) + ($936))|0;
  $992 = (($991) + ($989))|0;
  $993 = (($992) + ($985))|0;
  $994 = $953 << 30;
  $995 = $953 >>> 2;
  $996 = $994 | $995;
  $997 = $708 ^ $744;
  $998 = $997 ^ $852;
  $999 = $998 ^ $942;
  $1000 = $999 << 1;
  $1001 = $999 >>> 31;
  $1002 = $1000 | $1001;
  $1003 = $993 << 5;
  $1004 = $993 >>> 27;
  $1005 = $1003 | $1004;
  $1006 = $973 & $996;
  $1007 = $973 | $996;
  $1008 = $1007 & $976;
  $1009 = $1008 | $1006;
  $1010 = (($1002) + -1894007588)|0;
  $1011 = (($1010) + ($956))|0;
  $1012 = (($1011) + ($1009))|0;
  $1013 = (($1012) + ($1005))|0;
  $1014 = $973 << 30;
  $1015 = $973 >>> 2;
  $1016 = $1014 | $1015;
  $1017 = $762 ^ $726;
  $1018 = $1017 ^ $870;
  $1019 = $1018 ^ $962;
  $1020 = $1019 << 1;
  $1021 = $1019 >>> 31;
  $1022 = $1020 | $1021;
  $1023 = $1013 << 5;
  $1024 = $1013 >>> 27;
  $1025 = $1023 | $1024;
  $1026 = $993 & $1016;
  $1027 = $993 | $1016;
  $1028 = $1027 & $996;
  $1029 = $1028 | $1026;
  $1030 = (($1022) + -1894007588)|0;
  $1031 = (($1030) + ($976))|0;
  $1032 = (($1031) + ($1029))|0;
  $1033 = (($1032) + ($1025))|0;
  $1034 = $993 << 30;
  $1035 = $993 >>> 2;
  $1036 = $1034 | $1035;
  $1037 = $744 ^ $780;
  $1038 = $1037 ^ $888;
  $1039 = $1038 ^ $982;
  $1040 = $1039 << 1;
  $1041 = $1039 >>> 31;
  $1042 = $1040 | $1041;
  $1043 = $1033 << 5;
  $1044 = $1033 >>> 27;
  $1045 = $1043 | $1044;
  $1046 = $1013 & $1036;
  $1047 = $1013 | $1036;
  $1048 = $1047 & $1016;
  $1049 = $1048 | $1046;
  $1050 = (($1042) + -1894007588)|0;
  $1051 = (($1050) + ($996))|0;
  $1052 = (($1051) + ($1049))|0;
  $1053 = (($1052) + ($1045))|0;
  $1054 = $1013 << 30;
  $1055 = $1013 >>> 2;
  $1056 = $1054 | $1055;
  $1057 = $762 ^ $798;
  $1058 = $1057 ^ $906;
  $1059 = $1058 ^ $1002;
  $1060 = $1059 << 1;
  $1061 = $1059 >>> 31;
  $1062 = $1060 | $1061;
  $1063 = $1053 << 5;
  $1064 = $1053 >>> 27;
  $1065 = $1063 | $1064;
  $1066 = $1033 & $1056;
  $1067 = $1033 | $1056;
  $1068 = $1067 & $1036;
  $1069 = $1068 | $1066;
  $1070 = (($1062) + -1894007588)|0;
  $1071 = (($1070) + ($1016))|0;
  $1072 = (($1071) + ($1069))|0;
  $1073 = (($1072) + ($1065))|0;
  $1074 = $1033 << 30;
  $1075 = $1033 >>> 2;
  $1076 = $1074 | $1075;
  $1077 = $816 ^ $780;
  $1078 = $1077 ^ $924;
  $1079 = $1078 ^ $1022;
  $1080 = $1079 << 1;
  $1081 = $1079 >>> 31;
  $1082 = $1080 | $1081;
  $1083 = $1073 << 5;
  $1084 = $1073 >>> 27;
  $1085 = $1083 | $1084;
  $1086 = $1053 & $1076;
  $1087 = $1053 | $1076;
  $1088 = $1087 & $1056;
  $1089 = $1088 | $1086;
  $1090 = (($1082) + -1894007588)|0;
  $1091 = (($1090) + ($1036))|0;
  $1092 = (($1091) + ($1089))|0;
  $1093 = (($1092) + ($1085))|0;
  $1094 = $1053 << 30;
  $1095 = $1053 >>> 2;
  $1096 = $1094 | $1095;
  $1097 = $798 ^ $834;
  $1098 = $1097 ^ $942;
  $1099 = $1098 ^ $1042;
  $1100 = $1099 << 1;
  $1101 = $1099 >>> 31;
  $1102 = $1100 | $1101;
  $1103 = $1093 << 5;
  $1104 = $1093 >>> 27;
  $1105 = $1103 | $1104;
  $1106 = $1073 & $1096;
  $1107 = $1073 | $1096;
  $1108 = $1107 & $1076;
  $1109 = $1108 | $1106;
  $1110 = (($1102) + -1894007588)|0;
  $1111 = (($1110) + ($1056))|0;
  $1112 = (($1111) + ($1109))|0;
  $1113 = (($1112) + ($1105))|0;
  $1114 = $1073 << 30;
  $1115 = $1073 >>> 2;
  $1116 = $1114 | $1115;
  $1117 = $816 ^ $852;
  $1118 = $1117 ^ $962;
  $1119 = $1118 ^ $1062;
  $1120 = $1119 << 1;
  $1121 = $1119 >>> 31;
  $1122 = $1120 | $1121;
  $1123 = $1113 << 5;
  $1124 = $1113 >>> 27;
  $1125 = $1123 | $1124;
  $1126 = $1093 & $1116;
  $1127 = $1093 | $1116;
  $1128 = $1127 & $1096;
  $1129 = $1128 | $1126;
  $1130 = (($1122) + -1894007588)|0;
  $1131 = (($1130) + ($1076))|0;
  $1132 = (($1131) + ($1129))|0;
  $1133 = (($1132) + ($1125))|0;
  $1134 = $1093 << 30;
  $1135 = $1093 >>> 2;
  $1136 = $1134 | $1135;
  $1137 = $870 ^ $834;
  $1138 = $1137 ^ $982;
  $1139 = $1138 ^ $1082;
  $1140 = $1139 << 1;
  $1141 = $1139 >>> 31;
  $1142 = $1140 | $1141;
  $1143 = $1133 << 5;
  $1144 = $1133 >>> 27;
  $1145 = $1143 | $1144;
  $1146 = $1113 & $1136;
  $1147 = $1113 | $1136;
  $1148 = $1147 & $1116;
  $1149 = $1148 | $1146;
  $1150 = (($1142) + -1894007588)|0;
  $1151 = (($1150) + ($1096))|0;
  $1152 = (($1151) + ($1149))|0;
  $1153 = (($1152) + ($1145))|0;
  $1154 = $1113 << 30;
  $1155 = $1113 >>> 2;
  $1156 = $1154 | $1155;
  $1157 = $852 ^ $888;
  $1158 = $1157 ^ $1002;
  $1159 = $1158 ^ $1102;
  $1160 = $1159 << 1;
  $1161 = $1159 >>> 31;
  $1162 = $1160 | $1161;
  $1163 = $1153 << 5;
  $1164 = $1153 >>> 27;
  $1165 = $1163 | $1164;
  $1166 = $1133 & $1156;
  $1167 = $1133 | $1156;
  $1168 = $1167 & $1136;
  $1169 = $1168 | $1166;
  $1170 = (($1162) + -1894007588)|0;
  $1171 = (($1170) + ($1116))|0;
  $1172 = (($1171) + ($1169))|0;
  $1173 = (($1172) + ($1165))|0;
  $1174 = $1133 << 30;
  $1175 = $1133 >>> 2;
  $1176 = $1174 | $1175;
  $1177 = $870 ^ $906;
  $1178 = $1177 ^ $1022;
  $1179 = $1178 ^ $1122;
  $1180 = $1179 << 1;
  $1181 = $1179 >>> 31;
  $1182 = $1180 | $1181;
  $1183 = $1173 << 5;
  $1184 = $1173 >>> 27;
  $1185 = $1183 | $1184;
  $1186 = $1153 & $1176;
  $1187 = $1153 | $1176;
  $1188 = $1187 & $1156;
  $1189 = $1188 | $1186;
  $1190 = (($1182) + -1894007588)|0;
  $1191 = (($1190) + ($1136))|0;
  $1192 = (($1191) + ($1189))|0;
  $1193 = (($1192) + ($1185))|0;
  $1194 = $1153 << 30;
  $1195 = $1153 >>> 2;
  $1196 = $1194 | $1195;
  $1197 = $924 ^ $888;
  $1198 = $1197 ^ $1042;
  $1199 = $1198 ^ $1142;
  $1200 = $1199 << 1;
  $1201 = $1199 >>> 31;
  $1202 = $1200 | $1201;
  $1203 = $1193 << 5;
  $1204 = $1193 >>> 27;
  $1205 = $1203 | $1204;
  $1206 = $1173 & $1196;
  $1207 = $1173 | $1196;
  $1208 = $1207 & $1176;
  $1209 = $1208 | $1206;
  $1210 = (($1202) + -1894007588)|0;
  $1211 = (($1210) + ($1156))|0;
  $1212 = (($1211) + ($1209))|0;
  $1213 = (($1212) + ($1205))|0;
  $1214 = $1173 << 30;
  $1215 = $1173 >>> 2;
  $1216 = $1214 | $1215;
  $1217 = $906 ^ $942;
  $1218 = $1217 ^ $1062;
  $1219 = $1218 ^ $1162;
  $1220 = $1219 << 1;
  $1221 = $1219 >>> 31;
  $1222 = $1220 | $1221;
  $1223 = $1213 << 5;
  $1224 = $1213 >>> 27;
  $1225 = $1223 | $1224;
  $1226 = $1193 & $1216;
  $1227 = $1193 | $1216;
  $1228 = $1227 & $1196;
  $1229 = $1228 | $1226;
  $1230 = (($1222) + -1894007588)|0;
  $1231 = (($1230) + ($1176))|0;
  $1232 = (($1231) + ($1229))|0;
  $1233 = (($1232) + ($1225))|0;
  $1234 = $1193 << 30;
  $1235 = $1193 >>> 2;
  $1236 = $1234 | $1235;
  $1237 = $924 ^ $962;
  $1238 = $1237 ^ $1082;
  $1239 = $1238 ^ $1182;
  $1240 = $1239 << 1;
  $1241 = $1239 >>> 31;
  $1242 = $1240 | $1241;
  $1243 = $1233 << 5;
  $1244 = $1233 >>> 27;
  $1245 = $1243 | $1244;
  $1246 = $1213 & $1236;
  $1247 = $1213 | $1236;
  $1248 = $1247 & $1216;
  $1249 = $1248 | $1246;
  $1250 = (($1242) + -1894007588)|0;
  $1251 = (($1250) + ($1196))|0;
  $1252 = (($1251) + ($1249))|0;
  $1253 = (($1252) + ($1245))|0;
  $1254 = $1213 << 30;
  $1255 = $1213 >>> 2;
  $1256 = $1254 | $1255;
  $1257 = $982 ^ $942;
  $1258 = $1257 ^ $1102;
  $1259 = $1258 ^ $1202;
  $1260 = $1259 << 1;
  $1261 = $1259 >>> 31;
  $1262 = $1260 | $1261;
  $1263 = $1253 << 5;
  $1264 = $1253 >>> 27;
  $1265 = $1263 | $1264;
  $1266 = $1233 & $1256;
  $1267 = $1233 | $1256;
  $1268 = $1267 & $1236;
  $1269 = $1268 | $1266;
  $1270 = (($1262) + -1894007588)|0;
  $1271 = (($1270) + ($1216))|0;
  $1272 = (($1271) + ($1269))|0;
  $1273 = (($1272) + ($1265))|0;
  $1274 = $1233 << 30;
  $1275 = $1233 >>> 2;
  $1276 = $1274 | $1275;
  $1277 = $962 ^ $1002;
  $1278 = $1277 ^ $1122;
  $1279 = $1278 ^ $1222;
  $1280 = $1279 << 1;
  $1281 = $1279 >>> 31;
  $1282 = $1280 | $1281;
  $1283 = $1273 << 5;
  $1284 = $1273 >>> 27;
  $1285 = $1283 | $1284;
  $1286 = $1253 & $1276;
  $1287 = $1253 | $1276;
  $1288 = $1287 & $1256;
  $1289 = $1288 | $1286;
  $1290 = (($1282) + -1894007588)|0;
  $1291 = (($1290) + ($1236))|0;
  $1292 = (($1291) + ($1289))|0;
  $1293 = (($1292) + ($1285))|0;
  $1294 = $1253 << 30;
  $1295 = $1253 >>> 2;
  $1296 = $1294 | $1295;
  $1297 = $982 ^ $1022;
  $1298 = $1297 ^ $1142;
  $1299 = $1298 ^ $1242;
  $1300 = $1299 << 1;
  $1301 = $1299 >>> 31;
  $1302 = $1300 | $1301;
  $1303 = $1293 << 5;
  $1304 = $1293 >>> 27;
  $1305 = $1303 | $1304;
  $1306 = $1273 & $1296;
  $1307 = $1273 | $1296;
  $1308 = $1307 & $1276;
  $1309 = $1308 | $1306;
  $1310 = (($1302) + -1894007588)|0;
  $1311 = (($1310) + ($1256))|0;
  $1312 = (($1311) + ($1309))|0;
  $1313 = (($1312) + ($1305))|0;
  $1314 = $1273 << 30;
  $1315 = $1273 >>> 2;
  $1316 = $1314 | $1315;
  $1317 = $1042 ^ $1002;
  $1318 = $1317 ^ $1162;
  $1319 = $1318 ^ $1262;
  $1320 = $1319 << 1;
  $1321 = $1319 >>> 31;
  $1322 = $1320 | $1321;
  $1323 = $1313 << 5;
  $1324 = $1313 >>> 27;
  $1325 = $1323 | $1324;
  $1326 = $1293 & $1316;
  $1327 = $1293 | $1316;
  $1328 = $1327 & $1296;
  $1329 = $1328 | $1326;
  $1330 = (($1322) + -1894007588)|0;
  $1331 = (($1330) + ($1276))|0;
  $1332 = (($1331) + ($1329))|0;
  $1333 = (($1332) + ($1325))|0;
  $1334 = $1293 << 30;
  $1335 = $1293 >>> 2;
  $1336 = $1334 | $1335;
  $1337 = $1022 ^ $1062;
  $1338 = $1337 ^ $1182;
  $1339 = $1338 ^ $1282;
  $1340 = $1339 << 1;
  $1341 = $1339 >>> 31;
  $1342 = $1340 | $1341;
  $1343 = $1333 << 5;
  $1344 = $1333 >>> 27;
  $1345 = $1343 | $1344;
  $1346 = $1336 ^ $1316;
  $1347 = $1346 ^ $1313;
  $1348 = (($1342) + -899497514)|0;
  $1349 = (($1348) + ($1296))|0;
  $1350 = (($1349) + ($1347))|0;
  $1351 = (($1350) + ($1345))|0;
  $1352 = $1313 << 30;
  $1353 = $1313 >>> 2;
  $1354 = $1352 | $1353;
  $1355 = $1042 ^ $1082;
  $1356 = $1355 ^ $1202;
  $1357 = $1356 ^ $1302;
  $1358 = $1357 << 1;
  $1359 = $1357 >>> 31;
  $1360 = $1358 | $1359;
  $1361 = $1351 << 5;
  $1362 = $1351 >>> 27;
  $1363 = $1361 | $1362;
  $1364 = $1354 ^ $1336;
  $1365 = $1364 ^ $1333;
  $1366 = (($1360) + -899497514)|0;
  $1367 = (($1366) + ($1316))|0;
  $1368 = (($1367) + ($1365))|0;
  $1369 = (($1368) + ($1363))|0;
  $1370 = $1333 << 30;
  $1371 = $1333 >>> 2;
  $1372 = $1370 | $1371;
  $1373 = $1102 ^ $1062;
  $1374 = $1373 ^ $1222;
  $1375 = $1374 ^ $1322;
  $1376 = $1375 << 1;
  $1377 = $1375 >>> 31;
  $1378 = $1376 | $1377;
  $1379 = $1369 << 5;
  $1380 = $1369 >>> 27;
  $1381 = $1379 | $1380;
  $1382 = $1372 ^ $1354;
  $1383 = $1382 ^ $1351;
  $1384 = (($1378) + -899497514)|0;
  $1385 = (($1384) + ($1336))|0;
  $1386 = (($1385) + ($1383))|0;
  $1387 = (($1386) + ($1381))|0;
  $1388 = $1351 << 30;
  $1389 = $1351 >>> 2;
  $1390 = $1388 | $1389;
  $1391 = $1082 ^ $1122;
  $1392 = $1391 ^ $1242;
  $1393 = $1392 ^ $1342;
  $1394 = $1393 << 1;
  $1395 = $1393 >>> 31;
  $1396 = $1394 | $1395;
  $1397 = $1387 << 5;
  $1398 = $1387 >>> 27;
  $1399 = $1397 | $1398;
  $1400 = $1390 ^ $1372;
  $1401 = $1400 ^ $1369;
  $1402 = (($1396) + -899497514)|0;
  $1403 = (($1402) + ($1354))|0;
  $1404 = (($1403) + ($1401))|0;
  $1405 = (($1404) + ($1399))|0;
  $1406 = $1369 << 30;
  $1407 = $1369 >>> 2;
  $1408 = $1406 | $1407;
  $1409 = $1102 ^ $1142;
  $1410 = $1409 ^ $1262;
  $1411 = $1410 ^ $1360;
  $1412 = $1411 << 1;
  $1413 = $1411 >>> 31;
  $1414 = $1412 | $1413;
  $1415 = $1405 << 5;
  $1416 = $1405 >>> 27;
  $1417 = $1415 | $1416;
  $1418 = $1408 ^ $1390;
  $1419 = $1418 ^ $1387;
  $1420 = (($1414) + -899497514)|0;
  $1421 = (($1420) + ($1372))|0;
  $1422 = (($1421) + ($1419))|0;
  $1423 = (($1422) + ($1417))|0;
  $1424 = $1387 << 30;
  $1425 = $1387 >>> 2;
  $1426 = $1424 | $1425;
  $1427 = $1162 ^ $1122;
  $1428 = $1427 ^ $1282;
  $1429 = $1428 ^ $1378;
  $1430 = $1429 << 1;
  $1431 = $1429 >>> 31;
  $1432 = $1430 | $1431;
  $1433 = $1423 << 5;
  $1434 = $1423 >>> 27;
  $1435 = $1433 | $1434;
  $1436 = $1426 ^ $1408;
  $1437 = $1436 ^ $1405;
  $1438 = (($1432) + -899497514)|0;
  $1439 = (($1438) + ($1390))|0;
  $1440 = (($1439) + ($1437))|0;
  $1441 = (($1440) + ($1435))|0;
  $1442 = $1405 << 30;
  $1443 = $1405 >>> 2;
  $1444 = $1442 | $1443;
  $1445 = $1142 ^ $1182;
  $1446 = $1445 ^ $1302;
  $1447 = $1446 ^ $1396;
  $1448 = $1447 << 1;
  $1449 = $1447 >>> 31;
  $1450 = $1448 | $1449;
  $1451 = $1441 << 5;
  $1452 = $1441 >>> 27;
  $1453 = $1451 | $1452;
  $1454 = $1444 ^ $1426;
  $1455 = $1454 ^ $1423;
  $1456 = (($1450) + -899497514)|0;
  $1457 = (($1456) + ($1408))|0;
  $1458 = (($1457) + ($1455))|0;
  $1459 = (($1458) + ($1453))|0;
  $1460 = $1423 << 30;
  $1461 = $1423 >>> 2;
  $1462 = $1460 | $1461;
  $1463 = $1162 ^ $1202;
  $1464 = $1463 ^ $1322;
  $1465 = $1464 ^ $1414;
  $1466 = $1465 << 1;
  $1467 = $1465 >>> 31;
  $1468 = $1466 | $1467;
  $1469 = $1459 << 5;
  $1470 = $1459 >>> 27;
  $1471 = $1469 | $1470;
  $1472 = $1462 ^ $1444;
  $1473 = $1472 ^ $1441;
  $1474 = (($1468) + -899497514)|0;
  $1475 = (($1474) + ($1426))|0;
  $1476 = (($1475) + ($1473))|0;
  $1477 = (($1476) + ($1471))|0;
  $1478 = $1441 << 30;
  $1479 = $1441 >>> 2;
  $1480 = $1478 | $1479;
  $1481 = $1222 ^ $1182;
  $1482 = $1481 ^ $1342;
  $1483 = $1482 ^ $1432;
  $1484 = $1483 << 1;
  $1485 = $1483 >>> 31;
  $1486 = $1484 | $1485;
  $1487 = $1477 << 5;
  $1488 = $1477 >>> 27;
  $1489 = $1487 | $1488;
  $1490 = $1480 ^ $1462;
  $1491 = $1490 ^ $1459;
  $1492 = (($1486) + -899497514)|0;
  $1493 = (($1492) + ($1444))|0;
  $1494 = (($1493) + ($1491))|0;
  $1495 = (($1494) + ($1489))|0;
  $1496 = $1459 << 30;
  $1497 = $1459 >>> 2;
  $1498 = $1496 | $1497;
  $1499 = $1202 ^ $1242;
  $1500 = $1499 ^ $1360;
  $1501 = $1500 ^ $1450;
  $1502 = $1501 << 1;
  $1503 = $1501 >>> 31;
  $1504 = $1502 | $1503;
  $1505 = $1495 << 5;
  $1506 = $1495 >>> 27;
  $1507 = $1505 | $1506;
  $1508 = $1498 ^ $1480;
  $1509 = $1508 ^ $1477;
  $1510 = (($1504) + -899497514)|0;
  $1511 = (($1510) + ($1462))|0;
  $1512 = (($1511) + ($1509))|0;
  $1513 = (($1512) + ($1507))|0;
  $1514 = $1477 << 30;
  $1515 = $1477 >>> 2;
  $1516 = $1514 | $1515;
  $1517 = $1222 ^ $1262;
  $1518 = $1517 ^ $1378;
  $1519 = $1518 ^ $1468;
  $1520 = $1519 << 1;
  $1521 = $1519 >>> 31;
  $1522 = $1520 | $1521;
  $1523 = $1513 << 5;
  $1524 = $1513 >>> 27;
  $1525 = $1523 | $1524;
  $1526 = $1516 ^ $1498;
  $1527 = $1526 ^ $1495;
  $1528 = (($1522) + -899497514)|0;
  $1529 = (($1528) + ($1480))|0;
  $1530 = (($1529) + ($1527))|0;
  $1531 = (($1530) + ($1525))|0;
  $1532 = $1495 << 30;
  $1533 = $1495 >>> 2;
  $1534 = $1532 | $1533;
  $1535 = $1282 ^ $1242;
  $1536 = $1535 ^ $1396;
  $1537 = $1536 ^ $1486;
  $1538 = $1537 << 1;
  $1539 = $1537 >>> 31;
  $1540 = $1538 | $1539;
  $1541 = $1531 << 5;
  $1542 = $1531 >>> 27;
  $1543 = $1541 | $1542;
  $1544 = $1534 ^ $1516;
  $1545 = $1544 ^ $1513;
  $1546 = (($1540) + -899497514)|0;
  $1547 = (($1546) + ($1498))|0;
  $1548 = (($1547) + ($1545))|0;
  $1549 = (($1548) + ($1543))|0;
  $1550 = $1513 << 30;
  $1551 = $1513 >>> 2;
  $1552 = $1550 | $1551;
  $1553 = $1262 ^ $1302;
  $1554 = $1553 ^ $1414;
  $1555 = $1554 ^ $1504;
  $1556 = $1555 << 1;
  $1557 = $1555 >>> 31;
  $1558 = $1556 | $1557;
  $1559 = $1549 << 5;
  $1560 = $1549 >>> 27;
  $1561 = $1559 | $1560;
  $1562 = $1552 ^ $1534;
  $1563 = $1562 ^ $1531;
  $1564 = (($1558) + -899497514)|0;
  $1565 = (($1564) + ($1516))|0;
  $1566 = (($1565) + ($1563))|0;
  $1567 = (($1566) + ($1561))|0;
  $1568 = $1531 << 30;
  $1569 = $1531 >>> 2;
  $1570 = $1568 | $1569;
  $1571 = $1282 ^ $1322;
  $1572 = $1571 ^ $1432;
  $1573 = $1572 ^ $1522;
  $1574 = $1573 << 1;
  $1575 = $1573 >>> 31;
  $1576 = $1574 | $1575;
  $1577 = $1567 << 5;
  $1578 = $1567 >>> 27;
  $1579 = $1577 | $1578;
  $1580 = $1570 ^ $1552;
  $1581 = $1580 ^ $1549;
  $1582 = (($1576) + -899497514)|0;
  $1583 = (($1582) + ($1534))|0;
  $1584 = (($1583) + ($1581))|0;
  $1585 = (($1584) + ($1579))|0;
  $1586 = $1549 << 30;
  $1587 = $1549 >>> 2;
  $1588 = $1586 | $1587;
  $1589 = $1342 ^ $1302;
  $1590 = $1589 ^ $1450;
  $1591 = $1590 ^ $1540;
  $1592 = $1591 << 1;
  $1593 = $1591 >>> 31;
  $1594 = $1592 | $1593;
  $1595 = $1585 << 5;
  $1596 = $1585 >>> 27;
  $1597 = $1595 | $1596;
  $1598 = $1588 ^ $1570;
  $1599 = $1598 ^ $1567;
  $1600 = (($1594) + -899497514)|0;
  $1601 = (($1600) + ($1552))|0;
  $1602 = (($1601) + ($1599))|0;
  $1603 = (($1602) + ($1597))|0;
  $1604 = $1567 << 30;
  $1605 = $1567 >>> 2;
  $1606 = $1604 | $1605;
  $1607 = $1322 ^ $1360;
  $1608 = $1607 ^ $1468;
  $1609 = $1608 ^ $1558;
  $1610 = $1609 << 1;
  $1611 = $1609 >>> 31;
  $1612 = $1610 | $1611;
  $1613 = $1603 << 5;
  $1614 = $1603 >>> 27;
  $1615 = $1613 | $1614;
  $1616 = $1606 ^ $1588;
  $1617 = $1616 ^ $1585;
  $1618 = (($1612) + -899497514)|0;
  $1619 = (($1618) + ($1570))|0;
  $1620 = (($1619) + ($1617))|0;
  $1621 = (($1620) + ($1615))|0;
  $1622 = $1585 << 30;
  $1623 = $1585 >>> 2;
  $1624 = $1622 | $1623;
  $1625 = $1342 ^ $1378;
  $1626 = $1625 ^ $1486;
  $1627 = $1626 ^ $1576;
  $1628 = $1627 << 1;
  $1629 = $1627 >>> 31;
  $1630 = $1628 | $1629;
  $1631 = $1621 << 5;
  $1632 = $1621 >>> 27;
  $1633 = $1631 | $1632;
  $1634 = $1624 ^ $1606;
  $1635 = $1634 ^ $1603;
  $1636 = (($1630) + -899497514)|0;
  $1637 = (($1636) + ($1588))|0;
  $1638 = (($1637) + ($1635))|0;
  $1639 = (($1638) + ($1633))|0;
  $1640 = $1603 << 30;
  $1641 = $1603 >>> 2;
  $1642 = $1640 | $1641;
  $1643 = $1396 ^ $1360;
  $1644 = $1643 ^ $1504;
  $1645 = $1644 ^ $1594;
  $1646 = $1645 << 1;
  $1647 = $1645 >>> 31;
  $1648 = $1646 | $1647;
  $1649 = $1639 << 5;
  $1650 = $1639 >>> 27;
  $1651 = $1649 | $1650;
  $1652 = $1642 ^ $1624;
  $1653 = $1652 ^ $1621;
  $1654 = (($1648) + -899497514)|0;
  $1655 = (($1654) + ($1606))|0;
  $1656 = (($1655) + ($1653))|0;
  $1657 = (($1656) + ($1651))|0;
  $1658 = $1621 << 30;
  $1659 = $1621 >>> 2;
  $1660 = $1658 | $1659;
  $1661 = $1378 ^ $1414;
  $1662 = $1661 ^ $1522;
  $1663 = $1662 ^ $1612;
  $1664 = $1663 << 1;
  $1665 = $1663 >>> 31;
  $1666 = $1664 | $1665;
  $1667 = $1657 << 5;
  $1668 = $1657 >>> 27;
  $1669 = $1667 | $1668;
  $1670 = $1660 ^ $1642;
  $1671 = $1670 ^ $1639;
  $1672 = (($1666) + -899497514)|0;
  $1673 = (($1672) + ($1624))|0;
  $1674 = (($1673) + ($1671))|0;
  $1675 = (($1674) + ($1669))|0;
  $1676 = $1639 << 30;
  $1677 = $1639 >>> 2;
  $1678 = $1676 | $1677;
  $1679 = $1396 ^ $1432;
  $1680 = $1679 ^ $1540;
  $1681 = $1680 ^ $1630;
  $1682 = $1681 << 1;
  $1683 = $1681 >>> 31;
  $1684 = $1682 | $1683;
  $1685 = $1675 << 5;
  $1686 = $1675 >>> 27;
  $1687 = $1685 | $1686;
  $1688 = $1678 ^ $1660;
  $1689 = $1688 ^ $1657;
  $1690 = $1657 << 30;
  $1691 = $1657 >>> 2;
  $1692 = $1690 | $1691;
  $1693 = (($A$0) + -899497514)|0;
  $1694 = (($1693) + ($1684))|0;
  $1695 = (($1694) + ($1642))|0;
  $1696 = (($1695) + ($1689))|0;
  $1697 = (($1696) + ($1687))|0;
  HEAP32[$c>>2] = $1697;
  $1698 = HEAP32[$0>>2]|0;
  $1699 = (($1675) + ($1698))|0;
  HEAP32[$0>>2] = $1699;
  $1700 = HEAP32[$1>>2]|0;
  $1701 = (($1692) + ($1700))|0;
  HEAP32[$1>>2] = $1701;
  $1702 = HEAP32[$2>>2]|0;
  $1703 = (($1678) + ($1702))|0;
  HEAP32[$2>>2] = $1703;
  $1704 = HEAP32[$3>>2]|0;
  $1705 = (($1660) + ($1704))|0;
  HEAP32[$3>>2] = $1705;
  $1706 = (($$0) + -1)|0;
  $1707 = ($1706|0)==(0);
  if ($1707) {
   break;
  } else {
   $$0 = $1706;$A$0 = $1697;$B$0 = $1699;$C$0 = $1701;$D$0 = $1703;$E$0 = $1705;$data$0 = $471;
  }
 }
 return;
}
function _fips_sha256_init($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$c; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$c>>2] = 1779033703;
 $0 = ((($c)) + 4|0);
 HEAP32[$0>>2] = -1150833019;
 $1 = ((($c)) + 8|0);
 HEAP32[$1>>2] = 1013904242;
 $2 = ((($c)) + 12|0);
 HEAP32[$2>>2] = -1521486534;
 $3 = ((($c)) + 16|0);
 HEAP32[$3>>2] = 1359893119;
 $4 = ((($c)) + 20|0);
 HEAP32[$4>>2] = -1694144372;
 $5 = ((($c)) + 24|0);
 HEAP32[$5>>2] = 528734635;
 $6 = ((($c)) + 28|0);
 HEAP32[$6>>2] = 1541459225;
 $7 = ((($c)) + 108|0);
 HEAP32[$7>>2] = 32;
 return 1;
}
function _fips_sha256_update($c,$data_,$len) {
 $c = $c|0;
 $data_ = $data_|0;
 $len = $len|0;
 var $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$0 = 0, $data$1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  return 1;
 }
 $1 = ((($c)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $len << 3;
 $4 = (($2) + ($3))|0;
 $5 = ($4>>>0)<($2>>>0);
 $6 = ((($c)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  $11 = $8;
 } else {
  $11 = $7;
 }
 $9 = $len >>> 29;
 $10 = (($11) + ($9))|0;
 HEAP32[$6>>2] = $10;
 HEAP32[$1>>2] = $4;
 $12 = ((($c)) + 104|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $$01 = $len;$data$0 = $data_;
  } else {
   $15 = ((($c)) + 40|0);
   $16 = (($13) + ($len))|0;
   $17 = $16 | $len;
   $18 = ($17>>>0)>(63);
   $19 = (($15) + ($13)|0);
   if ($18) {
    $20 = (64 - ($13))|0;
    _memcpy(($19|0),($data_|0),($20|0))|0;
    _fips_sha256_block_data_order($c,$15,1);
    $21 = (($data_) + ($20)|0);
    $22 = (($len) - ($20))|0;
    dest=$15; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$01 = $22;$data$0 = $21;
    break;
   }
   _memcpy(($19|0),($data_|0),($len|0))|0;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($23) + ($len))|0;
   HEAP32[$12>>2] = $24;
   return 1;
  }
 } while(0);
 $25 = $$01 >>> 6;
 $26 = ($25|0)==(0);
 if ($26) {
  $$1 = $$01;$data$1 = $data$0;
 } else {
  _fips_sha256_block_data_order($c,$data$0,$25);
  $27 = $25 << 6;
  $28 = (($data$0) + ($27)|0);
  $29 = (($$01) - ($27))|0;
  $$1 = $29;$data$1 = $28;
 }
 $30 = ($$1|0)==(0);
 if ($30) {
  return 1;
 }
 $31 = ((($c)) + 40|0);
 HEAP32[$12>>2] = $$1;
 _memcpy(($31|0),($data$1|0),($$1|0))|0;
 return 1;
}
function _fips_sha256_final($md,$c) {
 $md = $md|0;
 $c = $c|0;
 var $$0 = 0, $$26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n$0 = 0, $nn$27 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 40|0);
 $1 = ((($c)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2)|0);
 HEAP8[$3>>0] = -128;
 $4 = (($2) + 1)|0;
 $5 = ($4>>>0)>(56);
 if ($5) {
  $6 = (($0) + ($4)|0);
  $7 = (63 - ($2))|0;
  _memset(($6|0),0,($7|0))|0;
  _fips_sha256_block_data_order($c,$0,1);
  $n$0 = 0;
 } else {
  $n$0 = $4;
 }
 $8 = (($0) + ($n$0)|0);
 $9 = (56 - ($n$0))|0;
 _memset(($8|0),0,($9|0))|0;
 $10 = ((($c)) + 96|0);
 $11 = ((($c)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 24;
 $14 = $13&255;
 $15 = ((($10)) + 1|0);
 HEAP8[$10>>0] = $14;
 $16 = $12 >>> 16;
 $17 = $16&255;
 $18 = ((($10)) + 2|0);
 HEAP8[$15>>0] = $17;
 $19 = $12 >>> 8;
 $20 = $19&255;
 $21 = ((($10)) + 3|0);
 HEAP8[$18>>0] = $20;
 $22 = $12&255;
 $23 = ((($c)) + 100|0);
 HEAP8[$21>>0] = $22;
 $24 = ((($c)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 >>> 24;
 $27 = $26&255;
 $28 = ((($23)) + 1|0);
 HEAP8[$23>>0] = $27;
 $29 = $25 >>> 16;
 $30 = $29&255;
 $31 = ((($23)) + 2|0);
 HEAP8[$28>>0] = $30;
 $32 = $25 >>> 8;
 $33 = $32&255;
 $34 = ((($23)) + 3|0);
 HEAP8[$31>>0] = $33;
 $35 = $25&255;
 HEAP8[$34>>0] = $35;
 _fips_sha256_block_data_order($c,$0,1);
 $36 = ((($c)) + 108|0);
 dest=$0; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $37 = HEAP32[$36>>2]|0;
 switch ($37|0) {
 case 28:  {
  $140 = HEAP32[$c>>2]|0;
  $141 = $140 >>> 24;
  $142 = $141&255;
  $143 = ((($md)) + 1|0);
  HEAP8[$md>>0] = $142;
  $144 = $140 >>> 16;
  $145 = $144&255;
  $146 = ((($md)) + 2|0);
  HEAP8[$143>>0] = $145;
  $147 = $140 >>> 8;
  $148 = $147&255;
  $149 = ((($md)) + 3|0);
  HEAP8[$146>>0] = $148;
  $150 = $140&255;
  $151 = ((($md)) + 4|0);
  HEAP8[$149>>0] = $150;
  $152 = ((($c)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $153 >>> 24;
  $155 = $154&255;
  $156 = ((($md)) + 5|0);
  HEAP8[$151>>0] = $155;
  $157 = $153 >>> 16;
  $158 = $157&255;
  $159 = ((($md)) + 6|0);
  HEAP8[$156>>0] = $158;
  $160 = $153 >>> 8;
  $161 = $160&255;
  $162 = ((($md)) + 7|0);
  HEAP8[$159>>0] = $161;
  $163 = $153&255;
  $164 = ((($md)) + 8|0);
  HEAP8[$162>>0] = $163;
  $165 = ((($c)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 >>> 24;
  $168 = $167&255;
  $169 = ((($md)) + 9|0);
  HEAP8[$164>>0] = $168;
  $170 = $166 >>> 16;
  $171 = $170&255;
  $172 = ((($md)) + 10|0);
  HEAP8[$169>>0] = $171;
  $173 = $166 >>> 8;
  $174 = $173&255;
  $175 = ((($md)) + 11|0);
  HEAP8[$172>>0] = $174;
  $176 = $166&255;
  $177 = ((($md)) + 12|0);
  HEAP8[$175>>0] = $176;
  $178 = ((($c)) + 12|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179 >>> 24;
  $181 = $180&255;
  $182 = ((($md)) + 13|0);
  HEAP8[$177>>0] = $181;
  $183 = $179 >>> 16;
  $184 = $183&255;
  $185 = ((($md)) + 14|0);
  HEAP8[$182>>0] = $184;
  $186 = $179 >>> 8;
  $187 = $186&255;
  $188 = ((($md)) + 15|0);
  HEAP8[$185>>0] = $187;
  $189 = $179&255;
  $190 = ((($md)) + 16|0);
  HEAP8[$188>>0] = $189;
  $191 = ((($c)) + 16|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $192 >>> 24;
  $194 = $193&255;
  $195 = ((($md)) + 17|0);
  HEAP8[$190>>0] = $194;
  $196 = $192 >>> 16;
  $197 = $196&255;
  $198 = ((($md)) + 18|0);
  HEAP8[$195>>0] = $197;
  $199 = $192 >>> 8;
  $200 = $199&255;
  $201 = ((($md)) + 19|0);
  HEAP8[$198>>0] = $200;
  $202 = $192&255;
  $203 = ((($md)) + 20|0);
  HEAP8[$201>>0] = $202;
  $204 = ((($c)) + 20|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $205 >>> 24;
  $207 = $206&255;
  $208 = ((($md)) + 21|0);
  HEAP8[$203>>0] = $207;
  $209 = $205 >>> 16;
  $210 = $209&255;
  $211 = ((($md)) + 22|0);
  HEAP8[$208>>0] = $210;
  $212 = $205 >>> 8;
  $213 = $212&255;
  $214 = ((($md)) + 23|0);
  HEAP8[$211>>0] = $213;
  $215 = $205&255;
  $216 = ((($md)) + 24|0);
  HEAP8[$214>>0] = $215;
  $217 = ((($c)) + 24|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $218 >>> 24;
  $220 = $219&255;
  $221 = ((($md)) + 25|0);
  HEAP8[$216>>0] = $220;
  $222 = $218 >>> 16;
  $223 = $222&255;
  $224 = ((($md)) + 26|0);
  HEAP8[$221>>0] = $223;
  $225 = $218 >>> 8;
  $226 = $225&255;
  $227 = ((($md)) + 27|0);
  HEAP8[$224>>0] = $226;
  $228 = $218&255;
  HEAP8[$227>>0] = $228;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 32:  {
  $38 = HEAP32[$c>>2]|0;
  $39 = $38 >>> 24;
  $40 = $39&255;
  $41 = ((($md)) + 1|0);
  HEAP8[$md>>0] = $40;
  $42 = $38 >>> 16;
  $43 = $42&255;
  $44 = ((($md)) + 2|0);
  HEAP8[$41>>0] = $43;
  $45 = $38 >>> 8;
  $46 = $45&255;
  $47 = ((($md)) + 3|0);
  HEAP8[$44>>0] = $46;
  $48 = $38&255;
  $49 = ((($md)) + 4|0);
  HEAP8[$47>>0] = $48;
  $50 = ((($c)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 >>> 24;
  $53 = $52&255;
  $54 = ((($md)) + 5|0);
  HEAP8[$49>>0] = $53;
  $55 = $51 >>> 16;
  $56 = $55&255;
  $57 = ((($md)) + 6|0);
  HEAP8[$54>>0] = $56;
  $58 = $51 >>> 8;
  $59 = $58&255;
  $60 = ((($md)) + 7|0);
  HEAP8[$57>>0] = $59;
  $61 = $51&255;
  $62 = ((($md)) + 8|0);
  HEAP8[$60>>0] = $61;
  $63 = ((($c)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64 >>> 24;
  $66 = $65&255;
  $67 = ((($md)) + 9|0);
  HEAP8[$62>>0] = $66;
  $68 = $64 >>> 16;
  $69 = $68&255;
  $70 = ((($md)) + 10|0);
  HEAP8[$67>>0] = $69;
  $71 = $64 >>> 8;
  $72 = $71&255;
  $73 = ((($md)) + 11|0);
  HEAP8[$70>>0] = $72;
  $74 = $64&255;
  $75 = ((($md)) + 12|0);
  HEAP8[$73>>0] = $74;
  $76 = ((($c)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 >>> 24;
  $79 = $78&255;
  $80 = ((($md)) + 13|0);
  HEAP8[$75>>0] = $79;
  $81 = $77 >>> 16;
  $82 = $81&255;
  $83 = ((($md)) + 14|0);
  HEAP8[$80>>0] = $82;
  $84 = $77 >>> 8;
  $85 = $84&255;
  $86 = ((($md)) + 15|0);
  HEAP8[$83>>0] = $85;
  $87 = $77&255;
  $88 = ((($md)) + 16|0);
  HEAP8[$86>>0] = $87;
  $89 = ((($c)) + 16|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90 >>> 24;
  $92 = $91&255;
  $93 = ((($md)) + 17|0);
  HEAP8[$88>>0] = $92;
  $94 = $90 >>> 16;
  $95 = $94&255;
  $96 = ((($md)) + 18|0);
  HEAP8[$93>>0] = $95;
  $97 = $90 >>> 8;
  $98 = $97&255;
  $99 = ((($md)) + 19|0);
  HEAP8[$96>>0] = $98;
  $100 = $90&255;
  $101 = ((($md)) + 20|0);
  HEAP8[$99>>0] = $100;
  $102 = ((($c)) + 20|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $103 >>> 24;
  $105 = $104&255;
  $106 = ((($md)) + 21|0);
  HEAP8[$101>>0] = $105;
  $107 = $103 >>> 16;
  $108 = $107&255;
  $109 = ((($md)) + 22|0);
  HEAP8[$106>>0] = $108;
  $110 = $103 >>> 8;
  $111 = $110&255;
  $112 = ((($md)) + 23|0);
  HEAP8[$109>>0] = $111;
  $113 = $103&255;
  $114 = ((($md)) + 24|0);
  HEAP8[$112>>0] = $113;
  $115 = ((($c)) + 24|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 >>> 24;
  $118 = $117&255;
  $119 = ((($md)) + 25|0);
  HEAP8[$114>>0] = $118;
  $120 = $116 >>> 16;
  $121 = $120&255;
  $122 = ((($md)) + 26|0);
  HEAP8[$119>>0] = $121;
  $123 = $116 >>> 8;
  $124 = $123&255;
  $125 = ((($md)) + 27|0);
  HEAP8[$122>>0] = $124;
  $126 = $116&255;
  $127 = ((($md)) + 28|0);
  HEAP8[$125>>0] = $126;
  $128 = ((($c)) + 28|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $129 >>> 24;
  $131 = $130&255;
  $132 = ((($md)) + 29|0);
  HEAP8[$127>>0] = $131;
  $133 = $129 >>> 16;
  $134 = $133&255;
  $135 = ((($md)) + 30|0);
  HEAP8[$132>>0] = $134;
  $136 = $129 >>> 8;
  $137 = $136&255;
  $138 = ((($md)) + 31|0);
  HEAP8[$135>>0] = $137;
  $139 = $129&255;
  HEAP8[$138>>0] = $139;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $229 = ($37>>>0)>(32);
  if ($229) {
   $$0 = 0;
   return ($$0|0);
  }
  $230 = ($37>>>0)>(3);
  if ($230) {
   $$26 = $md;$nn$27 = 0;
  } else {
   $$0 = 1;
   return ($$0|0);
  }
  while(1) {
   $231 = (($c) + ($nn$27<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $232 >>> 24;
   $234 = $233&255;
   $235 = ((($$26)) + 1|0);
   HEAP8[$$26>>0] = $234;
   $236 = $232 >>> 16;
   $237 = $236&255;
   $238 = ((($$26)) + 2|0);
   HEAP8[$235>>0] = $237;
   $239 = $232 >>> 8;
   $240 = $239&255;
   $241 = ((($$26)) + 3|0);
   HEAP8[$238>>0] = $240;
   $242 = $232&255;
   $243 = ((($$26)) + 4|0);
   HEAP8[$241>>0] = $242;
   $244 = (($nn$27) + 1)|0;
   $245 = HEAP32[$36>>2]|0;
   $246 = $245 >>> 2;
   $247 = ($244>>>0)<($246>>>0);
   if ($247) {
    $$26 = $243;$nn$27 = $244;
   } else {
    $$0 = 1;
    break;
   }
  }
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _fips_sha256_block_data_order($ctx,$in,$num) {
 $ctx = $ctx|0;
 $in = $in|0;
 $num = $num|0;
 var $$in = 0, $$lcssa = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $$lcssa50 = 0, $$lcssa51 = 0, $$lcssa52 = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $$pre24 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
 var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0;
 var $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0;
 var $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0;
 var $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0;
 var $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0;
 var $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0;
 var $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0;
 var $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0;
 var $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0;
 var $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0;
 var $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0;
 var $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0;
 var $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0;
 var $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0;
 var $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0;
 var $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0;
 var $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $X = 0, $a$19 = 0, $b$17 = 0, $c$16 = 0, $d$11 = 0, $data$010 = 0, $e$12 = 0, $f$13 = 0, $g$14 = 0, $h$15 = 0, $i$08 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $X = sp;
 $0 = ($num|0)==(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ((($ctx)) + 4|0);
 $2 = ((($ctx)) + 8|0);
 $3 = ((($ctx)) + 12|0);
 $4 = ((($ctx)) + 16|0);
 $5 = ((($ctx)) + 20|0);
 $6 = ((($ctx)) + 24|0);
 $7 = ((($ctx)) + 28|0);
 $8 = ((($X)) + 4|0);
 $9 = ((($X)) + 8|0);
 $10 = ((($X)) + 12|0);
 $11 = ((($X)) + 16|0);
 $12 = ((($X)) + 20|0);
 $13 = ((($X)) + 24|0);
 $14 = ((($X)) + 28|0);
 $15 = ((($X)) + 32|0);
 $16 = ((($X)) + 36|0);
 $17 = ((($X)) + 40|0);
 $18 = ((($X)) + 44|0);
 $19 = ((($X)) + 48|0);
 $20 = ((($X)) + 52|0);
 $21 = ((($X)) + 56|0);
 $22 = ((($X)) + 60|0);
 $$pre = HEAP32[$ctx>>2]|0;
 $$pre18 = HEAP32[$1>>2]|0;
 $$pre19 = HEAP32[$2>>2]|0;
 $$pre20 = HEAP32[$4>>2]|0;
 $$pre21 = HEAP32[$5>>2]|0;
 $$pre22 = HEAP32[$6>>2]|0;
 $$pre23 = HEAP32[$7>>2]|0;
 $$pre24 = HEAP32[$3>>2]|0;
 $$in = $num;$42 = $$pre20;$54 = $$pre21;$57 = $$pre22;$60 = $$pre23;$65 = $$pre;$77 = $$pre18;$79 = $$pre19;$85 = $$pre24;$data$010 = $in;
 while(1) {
  $23 = ((($data$010)) + 1|0);
  $24 = HEAP8[$data$010>>0]|0;
  $25 = $24&255;
  $26 = $25 << 24;
  $27 = ((($data$010)) + 2|0);
  $28 = HEAP8[$23>>0]|0;
  $29 = $28&255;
  $30 = $29 << 16;
  $31 = $30 | $26;
  $32 = ((($data$010)) + 3|0);
  $33 = HEAP8[$27>>0]|0;
  $34 = $33&255;
  $35 = $34 << 8;
  $36 = $31 | $35;
  $37 = ((($data$010)) + 4|0);
  $38 = HEAP8[$32>>0]|0;
  $39 = $38&255;
  $40 = $36 | $39;
  HEAP32[$X>>2] = $40;
  $41 = $42 << 26;
  $43 = $42 >>> 6;
  $44 = $41 | $43;
  $45 = $42 << 21;
  $46 = $42 >>> 11;
  $47 = $45 | $46;
  $48 = $44 ^ $47;
  $49 = $42 << 7;
  $50 = $42 >>> 25;
  $51 = $49 | $50;
  $52 = $48 ^ $51;
  $53 = $54 & $42;
  $55 = $42 ^ -1;
  $56 = $57 & $55;
  $58 = $56 ^ $53;
  $59 = (($60) + 1116352408)|0;
  $61 = (($59) + ($52))|0;
  $62 = (($61) + ($58))|0;
  $63 = (($62) + ($40))|0;
  $64 = $65 << 30;
  $66 = $65 >>> 2;
  $67 = $64 | $66;
  $68 = $65 << 19;
  $69 = $65 >>> 13;
  $70 = $68 | $69;
  $71 = $67 ^ $70;
  $72 = $65 << 10;
  $73 = $65 >>> 22;
  $74 = $72 | $73;
  $75 = $71 ^ $74;
  $76 = $77 & $65;
  $78 = $79 & $65;
  $80 = $78 ^ $76;
  $81 = $79 & $77;
  $82 = $80 ^ $81;
  $83 = (($82) + ($75))|0;
  $84 = (($63) + ($85))|0;
  $86 = (($83) + ($63))|0;
  $87 = ((($data$010)) + 5|0);
  $88 = HEAP8[$37>>0]|0;
  $89 = $88&255;
  $90 = $89 << 24;
  $91 = ((($data$010)) + 6|0);
  $92 = HEAP8[$87>>0]|0;
  $93 = $92&255;
  $94 = $93 << 16;
  $95 = $94 | $90;
  $96 = ((($data$010)) + 7|0);
  $97 = HEAP8[$91>>0]|0;
  $98 = $97&255;
  $99 = $98 << 8;
  $100 = $95 | $99;
  $101 = ((($data$010)) + 8|0);
  $102 = HEAP8[$96>>0]|0;
  $103 = $102&255;
  $104 = $100 | $103;
  HEAP32[$8>>2] = $104;
  $105 = $84 << 26;
  $106 = $84 >>> 6;
  $107 = $105 | $106;
  $108 = $84 << 21;
  $109 = $84 >>> 11;
  $110 = $108 | $109;
  $111 = $107 ^ $110;
  $112 = $84 << 7;
  $113 = $84 >>> 25;
  $114 = $112 | $113;
  $115 = $111 ^ $114;
  $116 = $84 & $42;
  $117 = $84 ^ -1;
  $118 = $54 & $117;
  $119 = $116 ^ $118;
  $120 = (($57) + 1899447441)|0;
  $121 = (($120) + ($119))|0;
  $122 = (($121) + ($104))|0;
  $123 = (($122) + ($115))|0;
  $124 = $86 << 30;
  $125 = $86 >>> 2;
  $126 = $124 | $125;
  $127 = $86 << 19;
  $128 = $86 >>> 13;
  $129 = $127 | $128;
  $130 = $126 ^ $129;
  $131 = $86 << 10;
  $132 = $86 >>> 22;
  $133 = $131 | $132;
  $134 = $130 ^ $133;
  $135 = $86 & $65;
  $136 = $86 & $77;
  $137 = $136 ^ $76;
  $138 = $137 ^ $135;
  $139 = (($134) + ($138))|0;
  $140 = (($123) + ($79))|0;
  $141 = (($139) + ($123))|0;
  $142 = ((($data$010)) + 9|0);
  $143 = HEAP8[$101>>0]|0;
  $144 = $143&255;
  $145 = $144 << 24;
  $146 = ((($data$010)) + 10|0);
  $147 = HEAP8[$142>>0]|0;
  $148 = $147&255;
  $149 = $148 << 16;
  $150 = $149 | $145;
  $151 = ((($data$010)) + 11|0);
  $152 = HEAP8[$146>>0]|0;
  $153 = $152&255;
  $154 = $153 << 8;
  $155 = $150 | $154;
  $156 = ((($data$010)) + 12|0);
  $157 = HEAP8[$151>>0]|0;
  $158 = $157&255;
  $159 = $155 | $158;
  HEAP32[$9>>2] = $159;
  $160 = $140 << 26;
  $161 = $140 >>> 6;
  $162 = $160 | $161;
  $163 = $140 << 21;
  $164 = $140 >>> 11;
  $165 = $163 | $164;
  $166 = $162 ^ $165;
  $167 = $140 << 7;
  $168 = $140 >>> 25;
  $169 = $167 | $168;
  $170 = $166 ^ $169;
  $171 = $140 & $84;
  $172 = $140 ^ -1;
  $173 = $42 & $172;
  $174 = $171 ^ $173;
  $175 = (($54) + -1245643825)|0;
  $176 = (($175) + ($159))|0;
  $177 = (($176) + ($174))|0;
  $178 = (($177) + ($170))|0;
  $179 = $141 << 30;
  $180 = $141 >>> 2;
  $181 = $179 | $180;
  $182 = $141 << 19;
  $183 = $141 >>> 13;
  $184 = $182 | $183;
  $185 = $181 ^ $184;
  $186 = $141 << 10;
  $187 = $141 >>> 22;
  $188 = $186 | $187;
  $189 = $185 ^ $188;
  $190 = $141 & $86;
  $191 = $141 & $65;
  $192 = $191 ^ $135;
  $193 = $192 ^ $190;
  $194 = (($189) + ($193))|0;
  $195 = (($178) + ($77))|0;
  $196 = (($194) + ($178))|0;
  $197 = ((($data$010)) + 13|0);
  $198 = HEAP8[$156>>0]|0;
  $199 = $198&255;
  $200 = $199 << 24;
  $201 = ((($data$010)) + 14|0);
  $202 = HEAP8[$197>>0]|0;
  $203 = $202&255;
  $204 = $203 << 16;
  $205 = $204 | $200;
  $206 = ((($data$010)) + 15|0);
  $207 = HEAP8[$201>>0]|0;
  $208 = $207&255;
  $209 = $208 << 8;
  $210 = $205 | $209;
  $211 = ((($data$010)) + 16|0);
  $212 = HEAP8[$206>>0]|0;
  $213 = $212&255;
  $214 = $210 | $213;
  HEAP32[$10>>2] = $214;
  $215 = $195 << 26;
  $216 = $195 >>> 6;
  $217 = $215 | $216;
  $218 = $195 << 21;
  $219 = $195 >>> 11;
  $220 = $218 | $219;
  $221 = $217 ^ $220;
  $222 = $195 << 7;
  $223 = $195 >>> 25;
  $224 = $222 | $223;
  $225 = $221 ^ $224;
  $226 = $195 & $140;
  $227 = $195 ^ -1;
  $228 = $84 & $227;
  $229 = $226 ^ $228;
  $230 = (($42) + -373957723)|0;
  $231 = (($230) + ($214))|0;
  $232 = (($231) + ($229))|0;
  $233 = (($232) + ($225))|0;
  $234 = $196 << 30;
  $235 = $196 >>> 2;
  $236 = $234 | $235;
  $237 = $196 << 19;
  $238 = $196 >>> 13;
  $239 = $237 | $238;
  $240 = $236 ^ $239;
  $241 = $196 << 10;
  $242 = $196 >>> 22;
  $243 = $241 | $242;
  $244 = $240 ^ $243;
  $245 = $196 & $141;
  $246 = $196 & $86;
  $247 = $246 ^ $190;
  $248 = $247 ^ $245;
  $249 = (($244) + ($248))|0;
  $250 = (($233) + ($65))|0;
  $251 = (($249) + ($233))|0;
  $252 = ((($data$010)) + 17|0);
  $253 = HEAP8[$211>>0]|0;
  $254 = $253&255;
  $255 = $254 << 24;
  $256 = ((($data$010)) + 18|0);
  $257 = HEAP8[$252>>0]|0;
  $258 = $257&255;
  $259 = $258 << 16;
  $260 = $259 | $255;
  $261 = ((($data$010)) + 19|0);
  $262 = HEAP8[$256>>0]|0;
  $263 = $262&255;
  $264 = $263 << 8;
  $265 = $260 | $264;
  $266 = ((($data$010)) + 20|0);
  $267 = HEAP8[$261>>0]|0;
  $268 = $267&255;
  $269 = $265 | $268;
  HEAP32[$11>>2] = $269;
  $270 = $250 << 26;
  $271 = $250 >>> 6;
  $272 = $270 | $271;
  $273 = $250 << 21;
  $274 = $250 >>> 11;
  $275 = $273 | $274;
  $276 = $272 ^ $275;
  $277 = $250 << 7;
  $278 = $250 >>> 25;
  $279 = $277 | $278;
  $280 = $276 ^ $279;
  $281 = $250 & $195;
  $282 = $250 ^ -1;
  $283 = $140 & $282;
  $284 = $281 ^ $283;
  $285 = (($84) + 961987163)|0;
  $286 = (($285) + ($269))|0;
  $287 = (($286) + ($284))|0;
  $288 = (($287) + ($280))|0;
  $289 = $251 << 30;
  $290 = $251 >>> 2;
  $291 = $289 | $290;
  $292 = $251 << 19;
  $293 = $251 >>> 13;
  $294 = $292 | $293;
  $295 = $291 ^ $294;
  $296 = $251 << 10;
  $297 = $251 >>> 22;
  $298 = $296 | $297;
  $299 = $295 ^ $298;
  $300 = $251 & $196;
  $301 = $251 & $141;
  $302 = $301 ^ $245;
  $303 = $302 ^ $300;
  $304 = (($299) + ($303))|0;
  $305 = (($288) + ($86))|0;
  $306 = (($304) + ($288))|0;
  $307 = ((($data$010)) + 21|0);
  $308 = HEAP8[$266>>0]|0;
  $309 = $308&255;
  $310 = $309 << 24;
  $311 = ((($data$010)) + 22|0);
  $312 = HEAP8[$307>>0]|0;
  $313 = $312&255;
  $314 = $313 << 16;
  $315 = $314 | $310;
  $316 = ((($data$010)) + 23|0);
  $317 = HEAP8[$311>>0]|0;
  $318 = $317&255;
  $319 = $318 << 8;
  $320 = $315 | $319;
  $321 = ((($data$010)) + 24|0);
  $322 = HEAP8[$316>>0]|0;
  $323 = $322&255;
  $324 = $320 | $323;
  HEAP32[$12>>2] = $324;
  $325 = $305 << 26;
  $326 = $305 >>> 6;
  $327 = $325 | $326;
  $328 = $305 << 21;
  $329 = $305 >>> 11;
  $330 = $328 | $329;
  $331 = $327 ^ $330;
  $332 = $305 << 7;
  $333 = $305 >>> 25;
  $334 = $332 | $333;
  $335 = $331 ^ $334;
  $336 = $305 & $250;
  $337 = $305 ^ -1;
  $338 = $195 & $337;
  $339 = $336 ^ $338;
  $340 = (($140) + 1508970993)|0;
  $341 = (($340) + ($324))|0;
  $342 = (($341) + ($339))|0;
  $343 = (($342) + ($335))|0;
  $344 = $306 << 30;
  $345 = $306 >>> 2;
  $346 = $344 | $345;
  $347 = $306 << 19;
  $348 = $306 >>> 13;
  $349 = $347 | $348;
  $350 = $346 ^ $349;
  $351 = $306 << 10;
  $352 = $306 >>> 22;
  $353 = $351 | $352;
  $354 = $350 ^ $353;
  $355 = $306 & $251;
  $356 = $306 & $196;
  $357 = $356 ^ $300;
  $358 = $357 ^ $355;
  $359 = (($354) + ($358))|0;
  $360 = (($343) + ($141))|0;
  $361 = (($359) + ($343))|0;
  $362 = ((($data$010)) + 25|0);
  $363 = HEAP8[$321>>0]|0;
  $364 = $363&255;
  $365 = $364 << 24;
  $366 = ((($data$010)) + 26|0);
  $367 = HEAP8[$362>>0]|0;
  $368 = $367&255;
  $369 = $368 << 16;
  $370 = $369 | $365;
  $371 = ((($data$010)) + 27|0);
  $372 = HEAP8[$366>>0]|0;
  $373 = $372&255;
  $374 = $373 << 8;
  $375 = $370 | $374;
  $376 = ((($data$010)) + 28|0);
  $377 = HEAP8[$371>>0]|0;
  $378 = $377&255;
  $379 = $375 | $378;
  HEAP32[$13>>2] = $379;
  $380 = $360 << 26;
  $381 = $360 >>> 6;
  $382 = $380 | $381;
  $383 = $360 << 21;
  $384 = $360 >>> 11;
  $385 = $383 | $384;
  $386 = $382 ^ $385;
  $387 = $360 << 7;
  $388 = $360 >>> 25;
  $389 = $387 | $388;
  $390 = $386 ^ $389;
  $391 = $360 & $305;
  $392 = $360 ^ -1;
  $393 = $250 & $392;
  $394 = $391 ^ $393;
  $395 = (($195) + -1841331548)|0;
  $396 = (($395) + ($379))|0;
  $397 = (($396) + ($394))|0;
  $398 = (($397) + ($390))|0;
  $399 = $361 << 30;
  $400 = $361 >>> 2;
  $401 = $399 | $400;
  $402 = $361 << 19;
  $403 = $361 >>> 13;
  $404 = $402 | $403;
  $405 = $401 ^ $404;
  $406 = $361 << 10;
  $407 = $361 >>> 22;
  $408 = $406 | $407;
  $409 = $405 ^ $408;
  $410 = $361 & $306;
  $411 = $361 & $251;
  $412 = $411 ^ $355;
  $413 = $412 ^ $410;
  $414 = (($409) + ($413))|0;
  $415 = (($398) + ($196))|0;
  $416 = (($414) + ($398))|0;
  $417 = ((($data$010)) + 29|0);
  $418 = HEAP8[$376>>0]|0;
  $419 = $418&255;
  $420 = $419 << 24;
  $421 = ((($data$010)) + 30|0);
  $422 = HEAP8[$417>>0]|0;
  $423 = $422&255;
  $424 = $423 << 16;
  $425 = $424 | $420;
  $426 = ((($data$010)) + 31|0);
  $427 = HEAP8[$421>>0]|0;
  $428 = $427&255;
  $429 = $428 << 8;
  $430 = $425 | $429;
  $431 = ((($data$010)) + 32|0);
  $432 = HEAP8[$426>>0]|0;
  $433 = $432&255;
  $434 = $430 | $433;
  HEAP32[$14>>2] = $434;
  $435 = $415 << 26;
  $436 = $415 >>> 6;
  $437 = $435 | $436;
  $438 = $415 << 21;
  $439 = $415 >>> 11;
  $440 = $438 | $439;
  $441 = $437 ^ $440;
  $442 = $415 << 7;
  $443 = $415 >>> 25;
  $444 = $442 | $443;
  $445 = $441 ^ $444;
  $446 = $415 & $360;
  $447 = $415 ^ -1;
  $448 = $305 & $447;
  $449 = $446 ^ $448;
  $450 = (($434) + -1424204075)|0;
  $451 = (($450) + ($250))|0;
  $452 = (($451) + ($449))|0;
  $453 = (($452) + ($445))|0;
  $454 = $416 << 30;
  $455 = $416 >>> 2;
  $456 = $454 | $455;
  $457 = $416 << 19;
  $458 = $416 >>> 13;
  $459 = $457 | $458;
  $460 = $456 ^ $459;
  $461 = $416 << 10;
  $462 = $416 >>> 22;
  $463 = $461 | $462;
  $464 = $460 ^ $463;
  $465 = $416 & $361;
  $466 = $416 & $306;
  $467 = $466 ^ $410;
  $468 = $467 ^ $465;
  $469 = (($464) + ($468))|0;
  $470 = (($453) + ($251))|0;
  $471 = (($469) + ($453))|0;
  $472 = ((($data$010)) + 33|0);
  $473 = HEAP8[$431>>0]|0;
  $474 = $473&255;
  $475 = $474 << 24;
  $476 = ((($data$010)) + 34|0);
  $477 = HEAP8[$472>>0]|0;
  $478 = $477&255;
  $479 = $478 << 16;
  $480 = $479 | $475;
  $481 = ((($data$010)) + 35|0);
  $482 = HEAP8[$476>>0]|0;
  $483 = $482&255;
  $484 = $483 << 8;
  $485 = $480 | $484;
  $486 = ((($data$010)) + 36|0);
  $487 = HEAP8[$481>>0]|0;
  $488 = $487&255;
  $489 = $485 | $488;
  HEAP32[$15>>2] = $489;
  $490 = $470 << 26;
  $491 = $470 >>> 6;
  $492 = $490 | $491;
  $493 = $470 << 21;
  $494 = $470 >>> 11;
  $495 = $493 | $494;
  $496 = $492 ^ $495;
  $497 = $470 << 7;
  $498 = $470 >>> 25;
  $499 = $497 | $498;
  $500 = $496 ^ $499;
  $501 = $470 & $415;
  $502 = $470 ^ -1;
  $503 = $360 & $502;
  $504 = $501 ^ $503;
  $505 = (($489) + -670586216)|0;
  $506 = (($505) + ($305))|0;
  $507 = (($506) + ($504))|0;
  $508 = (($507) + ($500))|0;
  $509 = $471 << 30;
  $510 = $471 >>> 2;
  $511 = $509 | $510;
  $512 = $471 << 19;
  $513 = $471 >>> 13;
  $514 = $512 | $513;
  $515 = $511 ^ $514;
  $516 = $471 << 10;
  $517 = $471 >>> 22;
  $518 = $516 | $517;
  $519 = $515 ^ $518;
  $520 = $471 & $416;
  $521 = $471 & $361;
  $522 = $521 ^ $465;
  $523 = $522 ^ $520;
  $524 = (($519) + ($523))|0;
  $525 = (($508) + ($306))|0;
  $526 = (($524) + ($508))|0;
  $527 = ((($data$010)) + 37|0);
  $528 = HEAP8[$486>>0]|0;
  $529 = $528&255;
  $530 = $529 << 24;
  $531 = ((($data$010)) + 38|0);
  $532 = HEAP8[$527>>0]|0;
  $533 = $532&255;
  $534 = $533 << 16;
  $535 = $534 | $530;
  $536 = ((($data$010)) + 39|0);
  $537 = HEAP8[$531>>0]|0;
  $538 = $537&255;
  $539 = $538 << 8;
  $540 = $535 | $539;
  $541 = ((($data$010)) + 40|0);
  $542 = HEAP8[$536>>0]|0;
  $543 = $542&255;
  $544 = $540 | $543;
  HEAP32[$16>>2] = $544;
  $545 = $525 << 26;
  $546 = $525 >>> 6;
  $547 = $545 | $546;
  $548 = $525 << 21;
  $549 = $525 >>> 11;
  $550 = $548 | $549;
  $551 = $547 ^ $550;
  $552 = $525 << 7;
  $553 = $525 >>> 25;
  $554 = $552 | $553;
  $555 = $551 ^ $554;
  $556 = $525 & $470;
  $557 = $525 ^ -1;
  $558 = $415 & $557;
  $559 = $556 ^ $558;
  $560 = (($544) + 310598401)|0;
  $561 = (($560) + ($360))|0;
  $562 = (($561) + ($559))|0;
  $563 = (($562) + ($555))|0;
  $564 = $526 << 30;
  $565 = $526 >>> 2;
  $566 = $564 | $565;
  $567 = $526 << 19;
  $568 = $526 >>> 13;
  $569 = $567 | $568;
  $570 = $566 ^ $569;
  $571 = $526 << 10;
  $572 = $526 >>> 22;
  $573 = $571 | $572;
  $574 = $570 ^ $573;
  $575 = $526 & $471;
  $576 = $526 & $416;
  $577 = $576 ^ $520;
  $578 = $577 ^ $575;
  $579 = (($574) + ($578))|0;
  $580 = (($563) + ($361))|0;
  $581 = (($579) + ($563))|0;
  $582 = ((($data$010)) + 41|0);
  $583 = HEAP8[$541>>0]|0;
  $584 = $583&255;
  $585 = $584 << 24;
  $586 = ((($data$010)) + 42|0);
  $587 = HEAP8[$582>>0]|0;
  $588 = $587&255;
  $589 = $588 << 16;
  $590 = $589 | $585;
  $591 = ((($data$010)) + 43|0);
  $592 = HEAP8[$586>>0]|0;
  $593 = $592&255;
  $594 = $593 << 8;
  $595 = $590 | $594;
  $596 = ((($data$010)) + 44|0);
  $597 = HEAP8[$591>>0]|0;
  $598 = $597&255;
  $599 = $595 | $598;
  HEAP32[$17>>2] = $599;
  $600 = $580 << 26;
  $601 = $580 >>> 6;
  $602 = $600 | $601;
  $603 = $580 << 21;
  $604 = $580 >>> 11;
  $605 = $603 | $604;
  $606 = $602 ^ $605;
  $607 = $580 << 7;
  $608 = $580 >>> 25;
  $609 = $607 | $608;
  $610 = $606 ^ $609;
  $611 = $580 & $525;
  $612 = $580 ^ -1;
  $613 = $470 & $612;
  $614 = $611 ^ $613;
  $615 = (($599) + 607225278)|0;
  $616 = (($615) + ($415))|0;
  $617 = (($616) + ($614))|0;
  $618 = (($617) + ($610))|0;
  $619 = $581 << 30;
  $620 = $581 >>> 2;
  $621 = $619 | $620;
  $622 = $581 << 19;
  $623 = $581 >>> 13;
  $624 = $622 | $623;
  $625 = $621 ^ $624;
  $626 = $581 << 10;
  $627 = $581 >>> 22;
  $628 = $626 | $627;
  $629 = $625 ^ $628;
  $630 = $581 & $526;
  $631 = $581 & $471;
  $632 = $631 ^ $575;
  $633 = $632 ^ $630;
  $634 = (($629) + ($633))|0;
  $635 = (($618) + ($416))|0;
  $636 = (($634) + ($618))|0;
  $637 = ((($data$010)) + 45|0);
  $638 = HEAP8[$596>>0]|0;
  $639 = $638&255;
  $640 = $639 << 24;
  $641 = ((($data$010)) + 46|0);
  $642 = HEAP8[$637>>0]|0;
  $643 = $642&255;
  $644 = $643 << 16;
  $645 = $644 | $640;
  $646 = ((($data$010)) + 47|0);
  $647 = HEAP8[$641>>0]|0;
  $648 = $647&255;
  $649 = $648 << 8;
  $650 = $645 | $649;
  $651 = ((($data$010)) + 48|0);
  $652 = HEAP8[$646>>0]|0;
  $653 = $652&255;
  $654 = $650 | $653;
  HEAP32[$18>>2] = $654;
  $655 = $635 << 26;
  $656 = $635 >>> 6;
  $657 = $655 | $656;
  $658 = $635 << 21;
  $659 = $635 >>> 11;
  $660 = $658 | $659;
  $661 = $657 ^ $660;
  $662 = $635 << 7;
  $663 = $635 >>> 25;
  $664 = $662 | $663;
  $665 = $661 ^ $664;
  $666 = $635 & $580;
  $667 = $635 ^ -1;
  $668 = $525 & $667;
  $669 = $666 ^ $668;
  $670 = (($654) + 1426881987)|0;
  $671 = (($670) + ($470))|0;
  $672 = (($671) + ($669))|0;
  $673 = (($672) + ($665))|0;
  $674 = $636 << 30;
  $675 = $636 >>> 2;
  $676 = $674 | $675;
  $677 = $636 << 19;
  $678 = $636 >>> 13;
  $679 = $677 | $678;
  $680 = $676 ^ $679;
  $681 = $636 << 10;
  $682 = $636 >>> 22;
  $683 = $681 | $682;
  $684 = $680 ^ $683;
  $685 = $636 & $581;
  $686 = $636 & $526;
  $687 = $686 ^ $630;
  $688 = $687 ^ $685;
  $689 = (($684) + ($688))|0;
  $690 = (($673) + ($471))|0;
  $691 = (($689) + ($673))|0;
  $692 = ((($data$010)) + 49|0);
  $693 = HEAP8[$651>>0]|0;
  $694 = $693&255;
  $695 = $694 << 24;
  $696 = ((($data$010)) + 50|0);
  $697 = HEAP8[$692>>0]|0;
  $698 = $697&255;
  $699 = $698 << 16;
  $700 = $699 | $695;
  $701 = ((($data$010)) + 51|0);
  $702 = HEAP8[$696>>0]|0;
  $703 = $702&255;
  $704 = $703 << 8;
  $705 = $700 | $704;
  $706 = ((($data$010)) + 52|0);
  $707 = HEAP8[$701>>0]|0;
  $708 = $707&255;
  $709 = $705 | $708;
  HEAP32[$19>>2] = $709;
  $710 = $690 << 26;
  $711 = $690 >>> 6;
  $712 = $710 | $711;
  $713 = $690 << 21;
  $714 = $690 >>> 11;
  $715 = $713 | $714;
  $716 = $712 ^ $715;
  $717 = $690 << 7;
  $718 = $690 >>> 25;
  $719 = $717 | $718;
  $720 = $716 ^ $719;
  $721 = $690 & $635;
  $722 = $690 ^ -1;
  $723 = $580 & $722;
  $724 = $721 ^ $723;
  $725 = (($709) + 1925078388)|0;
  $726 = (($725) + ($525))|0;
  $727 = (($726) + ($724))|0;
  $728 = (($727) + ($720))|0;
  $729 = $691 << 30;
  $730 = $691 >>> 2;
  $731 = $729 | $730;
  $732 = $691 << 19;
  $733 = $691 >>> 13;
  $734 = $732 | $733;
  $735 = $731 ^ $734;
  $736 = $691 << 10;
  $737 = $691 >>> 22;
  $738 = $736 | $737;
  $739 = $735 ^ $738;
  $740 = $691 & $636;
  $741 = $691 & $581;
  $742 = $741 ^ $685;
  $743 = $742 ^ $740;
  $744 = (($739) + ($743))|0;
  $745 = (($728) + ($526))|0;
  $746 = (($744) + ($728))|0;
  $747 = ((($data$010)) + 53|0);
  $748 = HEAP8[$706>>0]|0;
  $749 = $748&255;
  $750 = $749 << 24;
  $751 = ((($data$010)) + 54|0);
  $752 = HEAP8[$747>>0]|0;
  $753 = $752&255;
  $754 = $753 << 16;
  $755 = $754 | $750;
  $756 = ((($data$010)) + 55|0);
  $757 = HEAP8[$751>>0]|0;
  $758 = $757&255;
  $759 = $758 << 8;
  $760 = $755 | $759;
  $761 = ((($data$010)) + 56|0);
  $762 = HEAP8[$756>>0]|0;
  $763 = $762&255;
  $764 = $760 | $763;
  HEAP32[$20>>2] = $764;
  $765 = $745 << 26;
  $766 = $745 >>> 6;
  $767 = $765 | $766;
  $768 = $745 << 21;
  $769 = $745 >>> 11;
  $770 = $768 | $769;
  $771 = $767 ^ $770;
  $772 = $745 << 7;
  $773 = $745 >>> 25;
  $774 = $772 | $773;
  $775 = $771 ^ $774;
  $776 = $745 & $690;
  $777 = $745 ^ -1;
  $778 = $635 & $777;
  $779 = $776 ^ $778;
  $780 = (($764) + -2132889090)|0;
  $781 = (($780) + ($580))|0;
  $782 = (($781) + ($779))|0;
  $783 = (($782) + ($775))|0;
  $784 = $746 << 30;
  $785 = $746 >>> 2;
  $786 = $784 | $785;
  $787 = $746 << 19;
  $788 = $746 >>> 13;
  $789 = $787 | $788;
  $790 = $786 ^ $789;
  $791 = $746 << 10;
  $792 = $746 >>> 22;
  $793 = $791 | $792;
  $794 = $790 ^ $793;
  $795 = $746 & $691;
  $796 = $746 & $636;
  $797 = $796 ^ $740;
  $798 = $797 ^ $795;
  $799 = (($794) + ($798))|0;
  $800 = (($783) + ($581))|0;
  $801 = (($799) + ($783))|0;
  $802 = ((($data$010)) + 57|0);
  $803 = HEAP8[$761>>0]|0;
  $804 = $803&255;
  $805 = $804 << 24;
  $806 = ((($data$010)) + 58|0);
  $807 = HEAP8[$802>>0]|0;
  $808 = $807&255;
  $809 = $808 << 16;
  $810 = $809 | $805;
  $811 = ((($data$010)) + 59|0);
  $812 = HEAP8[$806>>0]|0;
  $813 = $812&255;
  $814 = $813 << 8;
  $815 = $810 | $814;
  $816 = ((($data$010)) + 60|0);
  $817 = HEAP8[$811>>0]|0;
  $818 = $817&255;
  $819 = $815 | $818;
  HEAP32[$21>>2] = $819;
  $820 = $800 << 26;
  $821 = $800 >>> 6;
  $822 = $820 | $821;
  $823 = $800 << 21;
  $824 = $800 >>> 11;
  $825 = $823 | $824;
  $826 = $822 ^ $825;
  $827 = $800 << 7;
  $828 = $800 >>> 25;
  $829 = $827 | $828;
  $830 = $826 ^ $829;
  $831 = $800 & $745;
  $832 = $800 ^ -1;
  $833 = $690 & $832;
  $834 = $831 ^ $833;
  $835 = (($819) + -1680079193)|0;
  $836 = (($835) + ($635))|0;
  $837 = (($836) + ($834))|0;
  $838 = (($837) + ($830))|0;
  $839 = $801 << 30;
  $840 = $801 >>> 2;
  $841 = $839 | $840;
  $842 = $801 << 19;
  $843 = $801 >>> 13;
  $844 = $842 | $843;
  $845 = $841 ^ $844;
  $846 = $801 << 10;
  $847 = $801 >>> 22;
  $848 = $846 | $847;
  $849 = $845 ^ $848;
  $850 = $801 & $746;
  $851 = $801 & $691;
  $852 = $851 ^ $795;
  $853 = $852 ^ $850;
  $854 = (($849) + ($853))|0;
  $855 = (($838) + ($636))|0;
  $856 = (($854) + ($838))|0;
  $857 = ((($data$010)) + 61|0);
  $858 = HEAP8[$816>>0]|0;
  $859 = $858&255;
  $860 = $859 << 24;
  $861 = ((($data$010)) + 62|0);
  $862 = HEAP8[$857>>0]|0;
  $863 = $862&255;
  $864 = $863 << 16;
  $865 = $864 | $860;
  $866 = ((($data$010)) + 63|0);
  $867 = HEAP8[$861>>0]|0;
  $868 = $867&255;
  $869 = $868 << 8;
  $870 = $865 | $869;
  $871 = HEAP8[$866>>0]|0;
  $872 = $871&255;
  $873 = $870 | $872;
  HEAP32[$22>>2] = $873;
  $874 = $855 << 26;
  $875 = $855 >>> 6;
  $876 = $874 | $875;
  $877 = $855 << 21;
  $878 = $855 >>> 11;
  $879 = $877 | $878;
  $880 = $876 ^ $879;
  $881 = $855 << 7;
  $882 = $855 >>> 25;
  $883 = $881 | $882;
  $884 = $880 ^ $883;
  $885 = $855 & $800;
  $886 = $855 ^ -1;
  $887 = $745 & $886;
  $888 = $885 ^ $887;
  $889 = (($873) + -1046744716)|0;
  $890 = (($889) + ($690))|0;
  $891 = (($890) + ($888))|0;
  $892 = (($891) + ($884))|0;
  $893 = $856 << 30;
  $894 = $856 >>> 2;
  $895 = $893 | $894;
  $896 = $856 << 19;
  $897 = $856 >>> 13;
  $898 = $896 | $897;
  $899 = $895 ^ $898;
  $900 = $856 << 10;
  $901 = $856 >>> 22;
  $902 = $900 | $901;
  $903 = $899 ^ $902;
  $904 = $801 ^ $746;
  $905 = $856 & $904;
  $906 = $905 ^ $850;
  $907 = (($903) + ($906))|0;
  $908 = (($907) + ($892))|0;
  $909 = (($892) + ($691))|0;
  $a$19 = $908;$b$17 = $856;$c$16 = $801;$d$11 = $746;$e$12 = $909;$f$13 = $855;$g$14 = $800;$h$15 = $745;$i$08 = 16;
  while(1) {
   $910 = $i$08 | 1;
   $911 = $910 & 9;
   $912 = (($X) + ($911<<2)|0);
   $913 = HEAP32[$912>>2]|0;
   $914 = $913 << 25;
   $915 = $913 >>> 7;
   $916 = $914 | $915;
   $917 = $913 << 14;
   $918 = $913 >>> 18;
   $919 = $917 | $918;
   $920 = $913 >>> 3;
   $921 = $919 ^ $920;
   $922 = $921 ^ $916;
   $923 = (($i$08) + 14)|0;
   $924 = $923 & 14;
   $925 = (($X) + ($924<<2)|0);
   $926 = HEAP32[$925>>2]|0;
   $927 = $926 << 15;
   $928 = $926 >>> 17;
   $929 = $927 | $928;
   $930 = $926 << 13;
   $931 = $926 >>> 19;
   $932 = $930 | $931;
   $933 = $926 >>> 10;
   $934 = $932 ^ $933;
   $935 = $934 ^ $929;
   $936 = (($i$08) + 9)|0;
   $937 = $936 & 9;
   $938 = (($X) + ($937<<2)|0);
   $939 = HEAP32[$938>>2]|0;
   $940 = $i$08 & 8;
   $941 = (($X) + ($940<<2)|0);
   $942 = HEAP32[$941>>2]|0;
   $943 = (($942) + ($939))|0;
   $944 = (($943) + ($922))|0;
   $945 = (($944) + ($935))|0;
   HEAP32[$941>>2] = $945;
   $946 = $e$12 << 26;
   $947 = $e$12 >>> 6;
   $948 = $946 | $947;
   $949 = $e$12 << 21;
   $950 = $e$12 >>> 11;
   $951 = $949 | $950;
   $952 = $948 ^ $951;
   $953 = $e$12 << 7;
   $954 = $e$12 >>> 25;
   $955 = $953 | $954;
   $956 = $952 ^ $955;
   $957 = (($956) + ($h$15))|0;
   $958 = $f$13 & $e$12;
   $959 = $e$12 ^ -1;
   $960 = $g$14 & $959;
   $961 = $960 ^ $958;
   $962 = (($957) + ($961))|0;
   $963 = (320 + ($i$08<<2)|0);
   $964 = HEAP32[$963>>2]|0;
   $965 = (($962) + ($964))|0;
   $966 = (($965) + ($945))|0;
   $967 = $a$19 << 30;
   $968 = $a$19 >>> 2;
   $969 = $967 | $968;
   $970 = $a$19 << 19;
   $971 = $a$19 >>> 13;
   $972 = $970 | $971;
   $973 = $969 ^ $972;
   $974 = $a$19 << 10;
   $975 = $a$19 >>> 22;
   $976 = $974 | $975;
   $977 = $973 ^ $976;
   $978 = $a$19 & $b$17;
   $979 = $a$19 ^ $b$17;
   $980 = $979 & $c$16;
   $981 = $980 ^ $978;
   $982 = (($977) + ($981))|0;
   $983 = (($966) + ($d$11))|0;
   $984 = (($982) + ($966))|0;
   $985 = (($910) + 1)|0;
   $986 = $985 & 11;
   $987 = (($X) + ($986<<2)|0);
   $988 = HEAP32[$987>>2]|0;
   $989 = $988 << 25;
   $990 = $988 >>> 7;
   $991 = $989 | $990;
   $992 = $988 << 14;
   $993 = $988 >>> 18;
   $994 = $992 | $993;
   $995 = $988 >>> 3;
   $996 = $994 ^ $995;
   $997 = $996 ^ $991;
   $998 = (($910) + 14)|0;
   $999 = $998 & 15;
   $1000 = (($X) + ($999<<2)|0);
   $1001 = HEAP32[$1000>>2]|0;
   $1002 = $1001 << 15;
   $1003 = $1001 >>> 17;
   $1004 = $1002 | $1003;
   $1005 = $1001 << 13;
   $1006 = $1001 >>> 19;
   $1007 = $1005 | $1006;
   $1008 = $1001 >>> 10;
   $1009 = $1007 ^ $1008;
   $1010 = $1009 ^ $1004;
   $1011 = (($910) + 9)|0;
   $1012 = $1011 & 11;
   $1013 = (($X) + ($1012<<2)|0);
   $1014 = HEAP32[$1013>>2]|0;
   $1015 = HEAP32[$912>>2]|0;
   $1016 = (($1015) + ($1014))|0;
   $1017 = (($1016) + ($997))|0;
   $1018 = (($1017) + ($1010))|0;
   HEAP32[$912>>2] = $1018;
   $1019 = $983 << 26;
   $1020 = $983 >>> 6;
   $1021 = $1019 | $1020;
   $1022 = $983 << 21;
   $1023 = $983 >>> 11;
   $1024 = $1022 | $1023;
   $1025 = $1021 ^ $1024;
   $1026 = $983 << 7;
   $1027 = $983 >>> 25;
   $1028 = $1026 | $1027;
   $1029 = $1025 ^ $1028;
   $1030 = $983 & $e$12;
   $1031 = $983 ^ -1;
   $1032 = $f$13 & $1031;
   $1033 = $1030 ^ $1032;
   $1034 = (320 + ($910<<2)|0);
   $1035 = HEAP32[$1034>>2]|0;
   $1036 = (($1035) + ($g$14))|0;
   $1037 = (($1036) + ($1033))|0;
   $1038 = (($1037) + ($1018))|0;
   $1039 = (($1038) + ($1029))|0;
   $1040 = $984 << 30;
   $1041 = $984 >>> 2;
   $1042 = $1040 | $1041;
   $1043 = $984 << 19;
   $1044 = $984 >>> 13;
   $1045 = $1043 | $1044;
   $1046 = $1042 ^ $1045;
   $1047 = $984 << 10;
   $1048 = $984 >>> 22;
   $1049 = $1047 | $1048;
   $1050 = $1046 ^ $1049;
   $1051 = $984 & $a$19;
   $1052 = $984 & $b$17;
   $1053 = $1052 ^ $978;
   $1054 = $1053 ^ $1051;
   $1055 = (($1050) + ($1054))|0;
   $1056 = (($1039) + ($c$16))|0;
   $1057 = (($1055) + ($1039))|0;
   $1058 = $i$08 | 2;
   $1059 = $940 | 3;
   $1060 = (($X) + ($1059<<2)|0);
   $1061 = HEAP32[$1060>>2]|0;
   $1062 = $1061 << 25;
   $1063 = $1061 >>> 7;
   $1064 = $1062 | $1063;
   $1065 = $1061 << 14;
   $1066 = $1061 >>> 18;
   $1067 = $1065 | $1066;
   $1068 = $1061 >>> 3;
   $1069 = $1067 ^ $1068;
   $1070 = $1069 ^ $1064;
   $1071 = (($1058) + 14)|0;
   $1072 = $1071 & 14;
   $1073 = (($X) + ($1072<<2)|0);
   $1074 = HEAP32[$1073>>2]|0;
   $1075 = $1074 << 15;
   $1076 = $1074 >>> 17;
   $1077 = $1075 | $1076;
   $1078 = $1074 << 13;
   $1079 = $1074 >>> 19;
   $1080 = $1078 | $1079;
   $1081 = $1074 >>> 10;
   $1082 = $1080 ^ $1081;
   $1083 = $1082 ^ $1077;
   $1084 = (($1058) + 9)|0;
   $1085 = $1084 & 11;
   $1086 = (($X) + ($1085<<2)|0);
   $1087 = HEAP32[$1086>>2]|0;
   $1088 = $1058 & 10;
   $1089 = (($X) + ($1088<<2)|0);
   $1090 = HEAP32[$1089>>2]|0;
   $1091 = (($1090) + ($1087))|0;
   $1092 = (($1091) + ($1070))|0;
   $1093 = (($1092) + ($1083))|0;
   HEAP32[$1089>>2] = $1093;
   $1094 = $1056 << 26;
   $1095 = $1056 >>> 6;
   $1096 = $1094 | $1095;
   $1097 = $1056 << 21;
   $1098 = $1056 >>> 11;
   $1099 = $1097 | $1098;
   $1100 = $1096 ^ $1099;
   $1101 = $1056 << 7;
   $1102 = $1056 >>> 25;
   $1103 = $1101 | $1102;
   $1104 = $1100 ^ $1103;
   $1105 = $1056 & $983;
   $1106 = $1056 ^ -1;
   $1107 = $e$12 & $1106;
   $1108 = $1105 ^ $1107;
   $1109 = (320 + ($1058<<2)|0);
   $1110 = HEAP32[$1109>>2]|0;
   $1111 = (($1110) + ($f$13))|0;
   $1112 = (($1111) + ($1093))|0;
   $1113 = (($1112) + ($1108))|0;
   $1114 = (($1113) + ($1104))|0;
   $1115 = $1057 << 30;
   $1116 = $1057 >>> 2;
   $1117 = $1115 | $1116;
   $1118 = $1057 << 19;
   $1119 = $1057 >>> 13;
   $1120 = $1118 | $1119;
   $1121 = $1117 ^ $1120;
   $1122 = $1057 << 10;
   $1123 = $1057 >>> 22;
   $1124 = $1122 | $1123;
   $1125 = $1121 ^ $1124;
   $1126 = $1057 & $984;
   $1127 = $1057 & $a$19;
   $1128 = $1127 ^ $1051;
   $1129 = $1128 ^ $1126;
   $1130 = (($1125) + ($1129))|0;
   $1131 = (($1114) + ($b$17))|0;
   $1132 = (($1130) + ($1114))|0;
   $1133 = $i$08 | 3;
   $1134 = (($1133) + 1)|0;
   $1135 = $1134 & 15;
   $1136 = (($X) + ($1135<<2)|0);
   $1137 = HEAP32[$1136>>2]|0;
   $1138 = $1137 << 25;
   $1139 = $1137 >>> 7;
   $1140 = $1138 | $1139;
   $1141 = $1137 << 14;
   $1142 = $1137 >>> 18;
   $1143 = $1141 | $1142;
   $1144 = $1137 >>> 3;
   $1145 = $1143 ^ $1144;
   $1146 = $1145 ^ $1140;
   $1147 = (($1133) + 14)|0;
   $1148 = $1147 & 15;
   $1149 = (($X) + ($1148<<2)|0);
   $1150 = HEAP32[$1149>>2]|0;
   $1151 = $1150 << 15;
   $1152 = $1150 >>> 17;
   $1153 = $1151 | $1152;
   $1154 = $1150 << 13;
   $1155 = $1150 >>> 19;
   $1156 = $1154 | $1155;
   $1157 = $1150 >>> 10;
   $1158 = $1156 ^ $1157;
   $1159 = $1158 ^ $1153;
   $1160 = (($1133) + 9)|0;
   $1161 = $1160 & 15;
   $1162 = (($X) + ($1161<<2)|0);
   $1163 = HEAP32[$1162>>2]|0;
   $1164 = $1133 & 11;
   $1165 = (($X) + ($1164<<2)|0);
   $1166 = HEAP32[$1165>>2]|0;
   $1167 = (($1166) + ($1163))|0;
   $1168 = (($1167) + ($1146))|0;
   $1169 = (($1168) + ($1159))|0;
   HEAP32[$1165>>2] = $1169;
   $1170 = $1131 << 26;
   $1171 = $1131 >>> 6;
   $1172 = $1170 | $1171;
   $1173 = $1131 << 21;
   $1174 = $1131 >>> 11;
   $1175 = $1173 | $1174;
   $1176 = $1172 ^ $1175;
   $1177 = $1131 << 7;
   $1178 = $1131 >>> 25;
   $1179 = $1177 | $1178;
   $1180 = $1176 ^ $1179;
   $1181 = $1131 & $1056;
   $1182 = $1131 ^ -1;
   $1183 = $983 & $1182;
   $1184 = $1181 ^ $1183;
   $1185 = (320 + ($1133<<2)|0);
   $1186 = HEAP32[$1185>>2]|0;
   $1187 = (($1186) + ($e$12))|0;
   $1188 = (($1187) + ($1169))|0;
   $1189 = (($1188) + ($1184))|0;
   $1190 = (($1189) + ($1180))|0;
   $1191 = $1132 << 30;
   $1192 = $1132 >>> 2;
   $1193 = $1191 | $1192;
   $1194 = $1132 << 19;
   $1195 = $1132 >>> 13;
   $1196 = $1194 | $1195;
   $1197 = $1193 ^ $1196;
   $1198 = $1132 << 10;
   $1199 = $1132 >>> 22;
   $1200 = $1198 | $1199;
   $1201 = $1197 ^ $1200;
   $1202 = $1132 & $1057;
   $1203 = $1132 & $984;
   $1204 = $1203 ^ $1126;
   $1205 = $1204 ^ $1202;
   $1206 = (($1201) + ($1205))|0;
   $1207 = (($1190) + ($a$19))|0;
   $1208 = (($1206) + ($1190))|0;
   $1209 = $i$08 | 4;
   $1210 = $940 | 5;
   $1211 = (($X) + ($1210<<2)|0);
   $1212 = HEAP32[$1211>>2]|0;
   $1213 = $1212 << 25;
   $1214 = $1212 >>> 7;
   $1215 = $1213 | $1214;
   $1216 = $1212 << 14;
   $1217 = $1212 >>> 18;
   $1218 = $1216 | $1217;
   $1219 = $1212 >>> 3;
   $1220 = $1218 ^ $1219;
   $1221 = $1220 ^ $1215;
   $1222 = (($1209) + 14)|0;
   $1223 = $1222 & 14;
   $1224 = (($X) + ($1223<<2)|0);
   $1225 = HEAP32[$1224>>2]|0;
   $1226 = $1225 << 15;
   $1227 = $1225 >>> 17;
   $1228 = $1226 | $1227;
   $1229 = $1225 << 13;
   $1230 = $1225 >>> 19;
   $1231 = $1229 | $1230;
   $1232 = $1225 >>> 10;
   $1233 = $1231 ^ $1232;
   $1234 = $1233 ^ $1228;
   $1235 = (($1209) + 9)|0;
   $1236 = $1235 & 13;
   $1237 = (($X) + ($1236<<2)|0);
   $1238 = HEAP32[$1237>>2]|0;
   $1239 = $1209 & 12;
   $1240 = (($X) + ($1239<<2)|0);
   $1241 = HEAP32[$1240>>2]|0;
   $1242 = (($1241) + ($1238))|0;
   $1243 = (($1242) + ($1221))|0;
   $1244 = (($1243) + ($1234))|0;
   HEAP32[$1240>>2] = $1244;
   $1245 = $1207 << 26;
   $1246 = $1207 >>> 6;
   $1247 = $1245 | $1246;
   $1248 = $1207 << 21;
   $1249 = $1207 >>> 11;
   $1250 = $1248 | $1249;
   $1251 = $1247 ^ $1250;
   $1252 = $1207 << 7;
   $1253 = $1207 >>> 25;
   $1254 = $1252 | $1253;
   $1255 = $1251 ^ $1254;
   $1256 = $1207 & $1131;
   $1257 = $1207 ^ -1;
   $1258 = $1056 & $1257;
   $1259 = $1256 ^ $1258;
   $1260 = (320 + ($1209<<2)|0);
   $1261 = HEAP32[$1260>>2]|0;
   $1262 = (($1261) + ($983))|0;
   $1263 = (($1262) + ($1244))|0;
   $1264 = (($1263) + ($1259))|0;
   $1265 = (($1264) + ($1255))|0;
   $1266 = $1208 << 30;
   $1267 = $1208 >>> 2;
   $1268 = $1266 | $1267;
   $1269 = $1208 << 19;
   $1270 = $1208 >>> 13;
   $1271 = $1269 | $1270;
   $1272 = $1268 ^ $1271;
   $1273 = $1208 << 10;
   $1274 = $1208 >>> 22;
   $1275 = $1273 | $1274;
   $1276 = $1272 ^ $1275;
   $1277 = $1208 & $1132;
   $1278 = $1208 & $1057;
   $1279 = $1278 ^ $1202;
   $1280 = $1279 ^ $1277;
   $1281 = (($1276) + ($1280))|0;
   $1282 = (($1265) + ($984))|0;
   $1283 = (($1281) + ($1265))|0;
   $1284 = $i$08 | 5;
   $1285 = (($1284) + 1)|0;
   $1286 = $1285 & 15;
   $1287 = (($X) + ($1286<<2)|0);
   $1288 = HEAP32[$1287>>2]|0;
   $1289 = $1288 << 25;
   $1290 = $1288 >>> 7;
   $1291 = $1289 | $1290;
   $1292 = $1288 << 14;
   $1293 = $1288 >>> 18;
   $1294 = $1292 | $1293;
   $1295 = $1288 >>> 3;
   $1296 = $1294 ^ $1295;
   $1297 = $1296 ^ $1291;
   $1298 = (($1284) + 14)|0;
   $1299 = $1298 & 15;
   $1300 = (($X) + ($1299<<2)|0);
   $1301 = HEAP32[$1300>>2]|0;
   $1302 = $1301 << 15;
   $1303 = $1301 >>> 17;
   $1304 = $1302 | $1303;
   $1305 = $1301 << 13;
   $1306 = $1301 >>> 19;
   $1307 = $1305 | $1306;
   $1308 = $1301 >>> 10;
   $1309 = $1307 ^ $1308;
   $1310 = $1309 ^ $1304;
   $1311 = (($1284) + 9)|0;
   $1312 = $1311 & 15;
   $1313 = (($X) + ($1312<<2)|0);
   $1314 = HEAP32[$1313>>2]|0;
   $1315 = $1284 & 13;
   $1316 = (($X) + ($1315<<2)|0);
   $1317 = HEAP32[$1316>>2]|0;
   $1318 = (($1317) + ($1314))|0;
   $1319 = (($1318) + ($1297))|0;
   $1320 = (($1319) + ($1310))|0;
   HEAP32[$1316>>2] = $1320;
   $1321 = $1282 << 26;
   $1322 = $1282 >>> 6;
   $1323 = $1321 | $1322;
   $1324 = $1282 << 21;
   $1325 = $1282 >>> 11;
   $1326 = $1324 | $1325;
   $1327 = $1323 ^ $1326;
   $1328 = $1282 << 7;
   $1329 = $1282 >>> 25;
   $1330 = $1328 | $1329;
   $1331 = $1327 ^ $1330;
   $1332 = $1282 & $1207;
   $1333 = $1282 ^ -1;
   $1334 = $1131 & $1333;
   $1335 = $1332 ^ $1334;
   $1336 = (320 + ($1284<<2)|0);
   $1337 = HEAP32[$1336>>2]|0;
   $1338 = (($1337) + ($1056))|0;
   $1339 = (($1338) + ($1320))|0;
   $1340 = (($1339) + ($1335))|0;
   $1341 = (($1340) + ($1331))|0;
   $1342 = $1283 << 30;
   $1343 = $1283 >>> 2;
   $1344 = $1342 | $1343;
   $1345 = $1283 << 19;
   $1346 = $1283 >>> 13;
   $1347 = $1345 | $1346;
   $1348 = $1344 ^ $1347;
   $1349 = $1283 << 10;
   $1350 = $1283 >>> 22;
   $1351 = $1349 | $1350;
   $1352 = $1348 ^ $1351;
   $1353 = $1283 & $1208;
   $1354 = $1283 & $1132;
   $1355 = $1354 ^ $1277;
   $1356 = $1355 ^ $1353;
   $1357 = (($1352) + ($1356))|0;
   $1358 = (($1341) + ($1057))|0;
   $1359 = (($1357) + ($1341))|0;
   $1360 = $i$08 | 6;
   $1361 = $940 | 7;
   $1362 = (($X) + ($1361<<2)|0);
   $1363 = HEAP32[$1362>>2]|0;
   $1364 = $1363 << 25;
   $1365 = $1363 >>> 7;
   $1366 = $1364 | $1365;
   $1367 = $1363 << 14;
   $1368 = $1363 >>> 18;
   $1369 = $1367 | $1368;
   $1370 = $1363 >>> 3;
   $1371 = $1369 ^ $1370;
   $1372 = $1371 ^ $1366;
   $1373 = (($1360) + 14)|0;
   $1374 = $1373 & 14;
   $1375 = (($X) + ($1374<<2)|0);
   $1376 = HEAP32[$1375>>2]|0;
   $1377 = $1376 << 15;
   $1378 = $1376 >>> 17;
   $1379 = $1377 | $1378;
   $1380 = $1376 << 13;
   $1381 = $1376 >>> 19;
   $1382 = $1380 | $1381;
   $1383 = $1376 >>> 10;
   $1384 = $1382 ^ $1383;
   $1385 = $1384 ^ $1379;
   $1386 = (($1360) + 9)|0;
   $1387 = $1386 & 15;
   $1388 = (($X) + ($1387<<2)|0);
   $1389 = HEAP32[$1388>>2]|0;
   $1390 = $1360 & 14;
   $1391 = (($X) + ($1390<<2)|0);
   $1392 = HEAP32[$1391>>2]|0;
   $1393 = (($1392) + ($1389))|0;
   $1394 = (($1393) + ($1372))|0;
   $1395 = (($1394) + ($1385))|0;
   HEAP32[$1391>>2] = $1395;
   $1396 = $1358 << 26;
   $1397 = $1358 >>> 6;
   $1398 = $1396 | $1397;
   $1399 = $1358 << 21;
   $1400 = $1358 >>> 11;
   $1401 = $1399 | $1400;
   $1402 = $1398 ^ $1401;
   $1403 = $1358 << 7;
   $1404 = $1358 >>> 25;
   $1405 = $1403 | $1404;
   $1406 = $1402 ^ $1405;
   $1407 = $1358 & $1282;
   $1408 = $1358 ^ -1;
   $1409 = $1207 & $1408;
   $1410 = $1407 ^ $1409;
   $1411 = (320 + ($1360<<2)|0);
   $1412 = HEAP32[$1411>>2]|0;
   $1413 = (($1412) + ($1131))|0;
   $1414 = (($1413) + ($1395))|0;
   $1415 = (($1414) + ($1410))|0;
   $1416 = (($1415) + ($1406))|0;
   $1417 = $1359 << 30;
   $1418 = $1359 >>> 2;
   $1419 = $1417 | $1418;
   $1420 = $1359 << 19;
   $1421 = $1359 >>> 13;
   $1422 = $1420 | $1421;
   $1423 = $1419 ^ $1422;
   $1424 = $1359 << 10;
   $1425 = $1359 >>> 22;
   $1426 = $1424 | $1425;
   $1427 = $1423 ^ $1426;
   $1428 = $1359 & $1283;
   $1429 = $1359 & $1208;
   $1430 = $1429 ^ $1353;
   $1431 = $1430 ^ $1428;
   $1432 = (($1427) + ($1431))|0;
   $1433 = (($1416) + ($1132))|0;
   $1434 = (($1432) + ($1416))|0;
   $1435 = $i$08 | 7;
   $1436 = (($1435) + 1)|0;
   $1437 = $1436 & 15;
   $1438 = (($X) + ($1437<<2)|0);
   $1439 = HEAP32[$1438>>2]|0;
   $1440 = $1439 << 25;
   $1441 = $1439 >>> 7;
   $1442 = $1440 | $1441;
   $1443 = $1439 << 14;
   $1444 = $1439 >>> 18;
   $1445 = $1443 | $1444;
   $1446 = $1439 >>> 3;
   $1447 = $1445 ^ $1446;
   $1448 = $1447 ^ $1442;
   $1449 = (($1435) + 14)|0;
   $1450 = $1449 & 15;
   $1451 = (($X) + ($1450<<2)|0);
   $1452 = HEAP32[$1451>>2]|0;
   $1453 = $1452 << 15;
   $1454 = $1452 >>> 17;
   $1455 = $1453 | $1454;
   $1456 = $1452 << 13;
   $1457 = $1452 >>> 19;
   $1458 = $1456 | $1457;
   $1459 = $1452 >>> 10;
   $1460 = $1458 ^ $1459;
   $1461 = $1460 ^ $1455;
   $1462 = (($1435) + 9)|0;
   $1463 = $1462 & 15;
   $1464 = (($X) + ($1463<<2)|0);
   $1465 = HEAP32[$1464>>2]|0;
   $1466 = $1435 & 15;
   $1467 = (($X) + ($1466<<2)|0);
   $1468 = HEAP32[$1467>>2]|0;
   $1469 = (($1468) + ($1465))|0;
   $1470 = (($1469) + ($1448))|0;
   $1471 = (($1470) + ($1461))|0;
   HEAP32[$1467>>2] = $1471;
   $1472 = $1433 << 26;
   $1473 = $1433 >>> 6;
   $1474 = $1472 | $1473;
   $1475 = $1433 << 21;
   $1476 = $1433 >>> 11;
   $1477 = $1475 | $1476;
   $1478 = $1474 ^ $1477;
   $1479 = $1433 << 7;
   $1480 = $1433 >>> 25;
   $1481 = $1479 | $1480;
   $1482 = $1478 ^ $1481;
   $1483 = $1433 & $1358;
   $1484 = $1433 ^ -1;
   $1485 = $1282 & $1484;
   $1486 = $1483 ^ $1485;
   $1487 = (320 + ($1435<<2)|0);
   $1488 = HEAP32[$1487>>2]|0;
   $1489 = (($1488) + ($1207))|0;
   $1490 = (($1489) + ($1471))|0;
   $1491 = (($1490) + ($1486))|0;
   $1492 = (($1491) + ($1482))|0;
   $1493 = $1434 << 30;
   $1494 = $1434 >>> 2;
   $1495 = $1493 | $1494;
   $1496 = $1434 << 19;
   $1497 = $1434 >>> 13;
   $1498 = $1496 | $1497;
   $1499 = $1495 ^ $1498;
   $1500 = $1434 << 10;
   $1501 = $1434 >>> 22;
   $1502 = $1500 | $1501;
   $1503 = $1499 ^ $1502;
   $1504 = $1359 ^ $1283;
   $1505 = $1434 & $1504;
   $1506 = $1505 ^ $1428;
   $1507 = (($1503) + ($1506))|0;
   $1508 = (($1492) + ($1208))|0;
   $1509 = (($1507) + ($1492))|0;
   $1510 = (($i$08) + 8)|0;
   $1511 = ($1510|0)<(64);
   if ($1511) {
    $a$19 = $1509;$b$17 = $1434;$c$16 = $1359;$d$11 = $1283;$e$12 = $1508;$f$13 = $1433;$g$14 = $1358;$h$15 = $1282;$i$08 = $1510;
   } else {
    $$lcssa = $1282;$$lcssa46 = $1283;$$lcssa47 = $1358;$$lcssa48 = $1359;$$lcssa49 = $1433;$$lcssa50 = $1434;$$lcssa51 = $1508;$$lcssa52 = $1509;
    break;
   }
  }
  $1512 = (($$in) + -1)|0;
  $1513 = ((($data$010)) + 64|0);
  $1514 = HEAP32[$ctx>>2]|0;
  $1515 = (($1514) + ($$lcssa52))|0;
  HEAP32[$ctx>>2] = $1515;
  $1516 = HEAP32[$1>>2]|0;
  $1517 = (($1516) + ($$lcssa50))|0;
  HEAP32[$1>>2] = $1517;
  $1518 = HEAP32[$2>>2]|0;
  $1519 = (($1518) + ($$lcssa48))|0;
  HEAP32[$2>>2] = $1519;
  $1520 = HEAP32[$3>>2]|0;
  $1521 = (($1520) + ($$lcssa46))|0;
  HEAP32[$3>>2] = $1521;
  $1522 = HEAP32[$4>>2]|0;
  $1523 = (($1522) + ($$lcssa51))|0;
  HEAP32[$4>>2] = $1523;
  $1524 = HEAP32[$5>>2]|0;
  $1525 = (($1524) + ($$lcssa49))|0;
  HEAP32[$5>>2] = $1525;
  $1526 = HEAP32[$6>>2]|0;
  $1527 = (($1526) + ($$lcssa47))|0;
  HEAP32[$6>>2] = $1527;
  $1528 = HEAP32[$7>>2]|0;
  $1529 = (($1528) + ($$lcssa))|0;
  HEAP32[$7>>2] = $1529;
  $1530 = ($1512|0)==(0);
  if ($1530) {
   break;
  } else {
   $$in = $1512;$42 = $1523;$54 = $1525;$57 = $1527;$60 = $1529;$65 = $1515;$77 = $1517;$79 = $1519;$85 = $1521;$data$010 = $1513;
  }
 }
 STACKTOP = sp;return;
}
function _fips_crypto_threadid_current($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[576>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  FUNCTION_TABLE_vi[$0 & 31]($id);
  return;
 }
 $2 = HEAP32[580>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $10 = (___errno_location()|0);
  $11 = ((($id)) + 4|0);
  $12 = $id;
  $13 = $12;
  HEAP32[$13>>2] = 0;
  $14 = (($12) + 4)|0;
  $15 = $14;
  HEAP32[$15>>2] = 0;
  HEAP32[$id>>2] = $10;
  $16 = $10;
  HEAP32[$11>>2] = $16;
  return;
 } else {
  $4 = (FUNCTION_TABLE_i[$2 & 31]()|0);
  $5 = $id;
  $6 = $5;
  HEAP32[$6>>2] = 0;
  $7 = (($5) + 4)|0;
  $8 = $7;
  HEAP32[$8>>2] = 0;
  $9 = ((($id)) + 4|0);
  HEAP32[$9>>2] = $4;
  return;
 }
}
function _fips_crypto_threadid_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($a,$b,8)|0);
 return ($0|0);
}
function _FIPS_openssl_cleanse($ptr,$len) {
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctr$0$lcssa = 0, $ctr$03 = 0;
 var $ctr$1 = 0, $loop$02 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7509>>0]|0;
 $1 = $0&255;
 $2 = ($len|0)==(0);
 if ($2) {
  $ctr$0$lcssa = $1;
 } else {
  $ctr$03 = $1;$loop$02 = $len;$p$01 = $ptr;
  while(1) {
   $3 = (($loop$02) + -1)|0;
   $4 = $ctr$03&255;
   $5 = ((($p$01)) + 1|0);
   HEAP8[$p$01>>0] = $4;
   $6 = $5;
   $7 = $6 & 15;
   $8 = (($ctr$03) + 17)|0;
   $9 = (($8) + ($7))|0;
   $10 = ($3|0)==(0);
   if ($10) {
    $ctr$0$lcssa = $9;
    break;
   } else {
    $ctr$03 = $9;$loop$02 = $3;$p$01 = $5;
   }
  }
 }
 $11 = $ctr$0$lcssa & 255;
 $12 = (_memchr($ptr,$11,$len)|0);
 $13 = ($12|0)==(0|0);
 $14 = $12;
 $15 = (($14) + 63)|0;
 $16 = $13 ? 0 : $15;
 $ctr$1 = (($16) + ($ctr$0$lcssa))|0;
 $17 = $ctr$1&255;
 HEAP8[7509>>0] = $17;
 return;
}
function _fips_bn_mul_add_words($rp,$ap,$num,$w) {
 $rp = $rp|0;
 $ap = $ap|0;
 $num = $num|0;
 $w = $w|0;
 var $$0 = 0, $$01$lcssa25 = 0, $$0114 = 0, $$02$lcssa26 = 0, $$0213 = 0, $$04$lcssa27 = 0, $$0412 = 0, $$110 = 0, $$139 = 0, $$158 = 0, $$lcssa32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $c1$0$lcssa28 = 0, $c1$011 = 0, $c1$17 = 0, $scevgep = 0, $scevgep24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)<(1);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($num>>>0)>(3);
 if ($1) {
  $2 = (($num) + -4)|0;
  $3 = $2 & -4;
  $4 = (($3) + 4)|0;
  $scevgep = (($rp) + ($4<<2)|0);
  $$0114 = $rp;$$0213 = $ap;$$0412 = $num;$c1$011 = 0;
  while(1) {
   $7 = HEAP32[$$0213>>2]|0;
   $8 = (___muldi3(($7|0),0,($w|0),0)|0);
   $9 = tempRet0;
   $10 = HEAP32[$$0114>>2]|0;
   $11 = (_i64Add(($10|0),0,($c1$011|0),0)|0);
   $12 = tempRet0;
   $13 = (_i64Add(($11|0),($12|0),($8|0),($9|0))|0);
   $14 = tempRet0;
   HEAP32[$$0114>>2] = $13;
   $15 = ((($$0213)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (___muldi3(($16|0),0,($w|0),0)|0);
   $18 = tempRet0;
   $19 = ((($$0114)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_i64Add(($17|0),($18|0),($20|0),0)|0);
   $22 = tempRet0;
   $23 = (_i64Add(($21|0),($22|0),($14|0),0)|0);
   $24 = tempRet0;
   HEAP32[$19>>2] = $23;
   $25 = ((($$0213)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (___muldi3(($26|0),0,($w|0),0)|0);
   $28 = tempRet0;
   $29 = ((($$0114)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_i64Add(($27|0),($28|0),($30|0),0)|0);
   $32 = tempRet0;
   $33 = (_i64Add(($31|0),($32|0),($24|0),0)|0);
   $34 = tempRet0;
   HEAP32[$29>>2] = $33;
   $35 = ((($$0213)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (___muldi3(($36|0),0,($w|0),0)|0);
   $38 = tempRet0;
   $39 = ((($$0114)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_i64Add(($37|0),($38|0),($40|0),0)|0);
   $42 = tempRet0;
   $43 = (_i64Add(($41|0),($42|0),($34|0),0)|0);
   $44 = tempRet0;
   HEAP32[$39>>2] = $43;
   $45 = ((($$0213)) + 16|0);
   $46 = ((($$0114)) + 16|0);
   $47 = (($$0412) + -4)|0;
   $48 = ($47>>>0)>(3);
   if ($48) {
    $$0114 = $46;$$0213 = $45;$$0412 = $47;$c1$011 = $44;
   } else {
    $$lcssa32 = $44;
    break;
   }
  }
  $5 = (($2) - ($3))|0;
  $scevgep24 = (($ap) + ($4<<2)|0);
  $6 = ($2|0)==($3|0);
  if ($6) {
   $$0 = $$lcssa32;
   return ($$0|0);
  } else {
   $$01$lcssa25 = $scevgep;$$02$lcssa26 = $scevgep24;$$04$lcssa27 = $5;$c1$0$lcssa28 = $$lcssa32;
  }
 } else {
  $$01$lcssa25 = $rp;$$02$lcssa26 = $ap;$$04$lcssa27 = $num;$c1$0$lcssa28 = 0;
 }
 $$110 = $$01$lcssa25;$$139 = $$02$lcssa26;$$158 = $$04$lcssa27;$c1$17 = $c1$0$lcssa28;
 while(1) {
  $49 = HEAP32[$$139>>2]|0;
  $50 = (___muldi3(($49|0),0,($w|0),0)|0);
  $51 = tempRet0;
  $52 = HEAP32[$$110>>2]|0;
  $53 = (_i64Add(($52|0),0,($c1$17|0),0)|0);
  $54 = tempRet0;
  $55 = (_i64Add(($53|0),($54|0),($50|0),($51|0))|0);
  $56 = tempRet0;
  HEAP32[$$110>>2] = $55;
  $57 = ((($$139)) + 4|0);
  $58 = ((($$110)) + 4|0);
  $59 = (($$158) + -1)|0;
  $60 = ($59|0)==(0);
  if ($60) {
   $$0 = $56;
   break;
  } else {
   $$110 = $58;$$139 = $57;$$158 = $59;$c1$17 = $56;
  }
 }
 return ($$0|0);
}
function _fips_bn_mul_words($rp,$ap,$num,$w) {
 $rp = $rp|0;
 $ap = $ap|0;
 $num = $num|0;
 $w = $w|0;
 var $$0 = 0, $$01$lcssa25 = 0, $$0114 = 0, $$02$lcssa26 = 0, $$0213 = 0, $$04$lcssa27 = 0, $$0412 = 0, $$110 = 0, $$139 = 0, $$158 = 0, $$lcssa32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c1$0$lcssa28 = 0, $c1$011 = 0, $c1$17 = 0;
 var $scevgep = 0, $scevgep24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)<(1);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($num>>>0)>(3);
 if ($1) {
  $2 = (($num) + -4)|0;
  $3 = $2 & -4;
  $4 = (($3) + 4)|0;
  $scevgep = (($rp) + ($4<<2)|0);
  $$0114 = $rp;$$0213 = $ap;$$0412 = $num;$c1$011 = 0;
  while(1) {
   $7 = HEAP32[$$0213>>2]|0;
   $8 = (___muldi3(($7|0),0,($w|0),0)|0);
   $9 = tempRet0;
   $10 = (_i64Add(($8|0),($9|0),($c1$011|0),0)|0);
   $11 = tempRet0;
   HEAP32[$$0114>>2] = $10;
   $12 = ((($$0213)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (___muldi3(($13|0),0,($w|0),0)|0);
   $15 = tempRet0;
   $16 = (_i64Add(($11|0),0,($14|0),($15|0))|0);
   $17 = tempRet0;
   $18 = ((($$0114)) + 4|0);
   HEAP32[$18>>2] = $16;
   $19 = ((($$0213)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (___muldi3(($20|0),0,($w|0),0)|0);
   $22 = tempRet0;
   $23 = (_i64Add(($17|0),0,($21|0),($22|0))|0);
   $24 = tempRet0;
   $25 = ((($$0114)) + 8|0);
   HEAP32[$25>>2] = $23;
   $26 = ((($$0213)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (___muldi3(($27|0),0,($w|0),0)|0);
   $29 = tempRet0;
   $30 = (_i64Add(($24|0),0,($28|0),($29|0))|0);
   $31 = tempRet0;
   $32 = ((($$0114)) + 12|0);
   HEAP32[$32>>2] = $30;
   $33 = ((($$0213)) + 16|0);
   $34 = ((($$0114)) + 16|0);
   $35 = (($$0412) + -4)|0;
   $36 = ($35>>>0)>(3);
   if ($36) {
    $$0114 = $34;$$0213 = $33;$$0412 = $35;$c1$011 = $31;
   } else {
    $$lcssa32 = $31;
    break;
   }
  }
  $5 = (($2) - ($3))|0;
  $scevgep24 = (($ap) + ($4<<2)|0);
  $6 = ($2|0)==($3|0);
  if ($6) {
   $$0 = $$lcssa32;
   return ($$0|0);
  } else {
   $$01$lcssa25 = $scevgep;$$02$lcssa26 = $scevgep24;$$04$lcssa27 = $5;$c1$0$lcssa28 = $$lcssa32;
  }
 } else {
  $$01$lcssa25 = $rp;$$02$lcssa26 = $ap;$$04$lcssa27 = $num;$c1$0$lcssa28 = 0;
 }
 $$110 = $$01$lcssa25;$$139 = $$02$lcssa26;$$158 = $$04$lcssa27;$c1$17 = $c1$0$lcssa28;
 while(1) {
  $37 = HEAP32[$$139>>2]|0;
  $38 = (___muldi3(($37|0),0,($w|0),0)|0);
  $39 = tempRet0;
  $40 = (_i64Add(($38|0),($39|0),($c1$17|0),0)|0);
  $41 = tempRet0;
  HEAP32[$$110>>2] = $40;
  $42 = ((($$139)) + 4|0);
  $43 = ((($$110)) + 4|0);
  $44 = (($$158) + -1)|0;
  $45 = ($44|0)==(0);
  if ($45) {
   $$0 = $41;
   break;
  } else {
   $$110 = $43;$$139 = $42;$$158 = $44;$c1$17 = $41;
  }
 }
 return ($$0|0);
}
function _fips_bn_sqr_words($r,$a,$n) {
 $r = $r|0;
 $a = $a|0;
 $n = $n|0;
 var $$011 = 0, $$0110 = 0, $$039 = 0, $$127 = 0, $$146 = 0, $$18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(1);
 if ($0) {
  return;
 }
 $1 = ($n>>>0)>(3);
 if ($1) {
  $2 = (($n) + -4)|0;
  $3 = $2 >>> 2;
  $4 = $3 << 2;
  $5 = $3 << 3;
  $6 = (($5) + 8)|0;
  $7 = (($4) + 4)|0;
  $$011 = $r;$$0110 = $a;$$039 = $n;
  while(1) {
   $10 = HEAP32[$$0110>>2]|0;
   $11 = (___muldi3(($10|0),0,($10|0),0)|0);
   $12 = tempRet0;
   HEAP32[$$011>>2] = $11;
   $13 = ((($$011)) + 4|0);
   HEAP32[$13>>2] = $12;
   $14 = ((($$0110)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (___muldi3(($15|0),0,($15|0),0)|0);
   $17 = tempRet0;
   $18 = ((($$011)) + 8|0);
   HEAP32[$18>>2] = $16;
   $19 = ((($$011)) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = ((($$0110)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (___muldi3(($21|0),0,($21|0),0)|0);
   $23 = tempRet0;
   $24 = ((($$011)) + 16|0);
   HEAP32[$24>>2] = $22;
   $25 = ((($$011)) + 20|0);
   HEAP32[$25>>2] = $23;
   $26 = ((($$0110)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (___muldi3(($27|0),0,($27|0),0)|0);
   $29 = tempRet0;
   $30 = ((($$011)) + 24|0);
   HEAP32[$30>>2] = $28;
   $31 = ((($$011)) + 28|0);
   HEAP32[$31>>2] = $29;
   $32 = ((($$0110)) + 16|0);
   $33 = ((($$011)) + 32|0);
   $34 = (($$039) + -4)|0;
   $35 = ($34>>>0)>(3);
   if ($35) {
    $$011 = $33;$$0110 = $32;$$039 = $34;
   } else {
    break;
   }
  }
  $8 = (($2) - ($4))|0;
  $scevgep = (($r) + ($6<<2)|0);
  $scevgep17 = (($a) + ($7<<2)|0);
  $9 = ($2|0)==($4|0);
  if ($9) {
   return;
  } else {
   $$127 = $scevgep17;$$146 = $8;$$18 = $scevgep;
  }
 } else {
  $$127 = $a;$$146 = $n;$$18 = $r;
 }
 while(1) {
  $36 = HEAP32[$$127>>2]|0;
  $37 = (___muldi3(($36|0),0,($36|0),0)|0);
  $38 = tempRet0;
  HEAP32[$$18>>2] = $37;
  $39 = ((($$18)) + 4|0);
  HEAP32[$39>>2] = $38;
  $40 = ((($$127)) + 4|0);
  $41 = ((($$18)) + 8|0);
  $42 = (($$146) + -1)|0;
  $43 = ($42|0)==(0);
  if ($43) {
   break;
  } else {
   $$127 = $40;$$146 = $42;$$18 = $41;
  }
 }
 return;
}
function _fips_bn_div_words($h,$l,$d) {
 $h = $h|0;
 $l = $l|0;
 $d = $d|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $h$ = 0, $q$0 = 0, $q$1$lcssa = 0;
 var $q$15 = 0, $q$2 = 0, $q$2$lcssa = 0, $ret$0 = 0, $ret$0$lcssa = 0, $th$0$lcssa = 0, $th$06 = 0, $tl$0$lcssa = 0, $tl$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($d|0)==(0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = (_FIPS_bn_num_bits_word($d)|0);
 $2 = (32 - ($1))|0;
 $3 = ($h>>>0)<($d>>>0);
 $4 = $3 ? 0 : $d;
 $h$ = (($h) - ($4))|0;
 $5 = ($2|0)==(0);
 if ($5) {
  $$02 = $d;$$03 = $l;$$1 = $h$;
 } else {
  $6 = $d << $2;
  $7 = $h$ << $2;
  $8 = $l >>> $1;
  $9 = $7 | $8;
  $10 = $l << $2;
  $$02 = $6;$$03 = $10;$$1 = $9;
 }
 $11 = $$02 >>> 16;
 $12 = $$02 & 65535;
 $$14 = $$03;$$2 = $$1;$count$0 = 2;$ret$0 = 0;
 while(1) {
  $13 = $$2 >>> 16;
  $14 = ($13|0)==($11|0);
  if ($14) {
   $q$0 = 65535;
  } else {
   $15 = (($$2>>>0) / ($11>>>0))&-1;
   $q$0 = $15;
  }
  $16 = Math_imul($q$0, $11)|0;
  $17 = Math_imul($q$0, $12)|0;
  $18 = (($$2) - ($16))|0;
  $19 = ($18>>>0)>(65535);
  L12: do {
   if ($19) {
    $q$1$lcssa = $q$0;$th$0$lcssa = $16;$tl$0$lcssa = $17;
   } else {
    $20 = $$14 >>> 16;
    $22 = $18;$q$15 = $q$0;$th$06 = $16;$tl$07 = $17;
    while(1) {
     $21 = $22 << 16;
     $23 = $21 | $20;
     $24 = ($tl$07>>>0)>($23>>>0);
     if (!($24)) {
      $q$1$lcssa = $q$15;$th$0$lcssa = $th$06;$tl$0$lcssa = $tl$07;
      break L12;
     }
     $25 = (($q$15) + -1)|0;
     $26 = (($th$06) - ($11))|0;
     $27 = (($tl$07) - ($12))|0;
     $28 = (($$2) - ($26))|0;
     $29 = ($28>>>0)>(65535);
     if ($29) {
      $q$1$lcssa = $25;$th$0$lcssa = $26;$tl$0$lcssa = $27;
      break;
     } else {
      $22 = $28;$q$15 = $25;$th$06 = $26;$tl$07 = $27;
     }
    }
   }
  } while(0);
  $30 = $tl$0$lcssa >>> 16;
  $31 = $tl$0$lcssa << 16;
  $32 = (($30) + ($th$0$lcssa))|0;
  $33 = ($$14>>>0)<($31>>>0);
  $34 = $33&1;
  $$ = (($32) + ($34))|0;
  $35 = (($$14) - ($31))|0;
  $36 = ($$2>>>0)<($$>>>0);
  $37 = $36 << 31 >> 31;
  $q$2 = (($37) + ($q$1$lcssa))|0;
  $38 = (($count$0) + -1)|0;
  $39 = ($38|0)==(0);
  if ($39) {
   $q$2$lcssa = $q$2;$ret$0$lcssa = $ret$0;
   break;
  }
  $40 = $36 ? $$02 : 0;
  $$3 = (($$2) - ($$))|0;
  $41 = (($$3) + ($40))|0;
  $42 = $q$2 << 16;
  $43 = $41 << 16;
  $44 = $35 >>> 16;
  $45 = $43 | $44;
  $46 = $35 << 16;
  $$14 = $46;$$2 = $45;$count$0 = $38;$ret$0 = $42;
 }
 $47 = $q$2$lcssa | $ret$0$lcssa;
 $$0 = $47;
 return ($$0|0);
}
function _fips_bn_add_words($r,$a,$b,$n) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0116 = 0, $$017 = 0, $$0315 = 0, $$0514 = 0, $$07 = 0, $$112 = 0, $$1211 = 0, $$1410 = 0, $$169 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep31 = 0, $scevgep32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(1);
 if ($0) {
  $$07 = 0;
  return ($$07|0);
 }
 $1 = ($n>>>0)>(3);
 if ($1) {
  $2 = (($n) + -4)|0;
  $3 = $2 & -4;
  $4 = (($3) + 4)|0;
  $scevgep31 = (($b) + ($4<<2)|0);
  $$0116 = $b;$$017 = $n;$$0315 = $a;$$0514 = $r;$10 = 0;$9 = 0;
  while(1) {
   $7 = HEAP32[$$0315>>2]|0;
   $8 = HEAP32[$$0116>>2]|0;
   $11 = (_i64Add(($7|0),0,($9|0),($10|0))|0);
   $12 = tempRet0;
   $13 = (_i64Add(($11|0),($12|0),($8|0),0)|0);
   $14 = tempRet0;
   HEAP32[$$0514>>2] = $13;
   $15 = ((($$0315)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($$0116)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_i64Add(($18|0),0,($16|0),0)|0);
   $20 = tempRet0;
   $21 = (_i64Add(($19|0),($20|0),($14|0),0)|0);
   $22 = tempRet0;
   $23 = ((($$0514)) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = ((($$0315)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($$0116)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_i64Add(($27|0),0,($25|0),0)|0);
   $29 = tempRet0;
   $30 = (_i64Add(($28|0),($29|0),($22|0),0)|0);
   $31 = tempRet0;
   $32 = ((($$0514)) + 8|0);
   HEAP32[$32>>2] = $30;
   $33 = ((($$0315)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($$0116)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_i64Add(($36|0),0,($34|0),0)|0);
   $38 = tempRet0;
   $39 = (_i64Add(($37|0),($38|0),($31|0),0)|0);
   $40 = tempRet0;
   $41 = ((($$0514)) + 12|0);
   HEAP32[$41>>2] = $39;
   $42 = ((($$0315)) + 16|0);
   $43 = ((($$0116)) + 16|0);
   $44 = ((($$0514)) + 16|0);
   $45 = (($$017) + -4)|0;
   $46 = ($45>>>0)>(3);
   if ($46) {
    $$0116 = $43;$$017 = $45;$$0315 = $42;$$0514 = $44;$10 = 0;$9 = $40;
   } else {
    $60 = $40;$61 = 0;
    break;
   }
  }
  $5 = (($2) - ($3))|0;
  $scevgep = (($r) + ($4<<2)|0);
  $scevgep32 = (($a) + ($4<<2)|0);
  $6 = ($2|0)==($3|0);
  if ($6) {
   $$07 = $60;
   return ($$07|0);
  } else {
   $$112 = $5;$$1211 = $scevgep31;$$1410 = $scevgep32;$$169 = $scevgep;$49 = $60;$50 = $61;
  }
 } else {
  $$112 = $n;$$1211 = $b;$$1410 = $a;$$169 = $r;$49 = 0;$50 = 0;
 }
 while(1) {
  $47 = HEAP32[$$1410>>2]|0;
  $48 = HEAP32[$$1211>>2]|0;
  $51 = (_i64Add(($47|0),0,($49|0),($50|0))|0);
  $52 = tempRet0;
  $53 = (_i64Add(($51|0),($52|0),($48|0),0)|0);
  $54 = tempRet0;
  HEAP32[$$169>>2] = $53;
  $55 = ((($$1410)) + 4|0);
  $56 = ((($$1211)) + 4|0);
  $57 = ((($$169)) + 4|0);
  $58 = (($$112) + -1)|0;
  $59 = ($58|0)==(0);
  if ($59) {
   $62 = $54;$63 = 0;
   break;
  } else {
   $$112 = $58;$$1211 = $56;$$1410 = $55;$$169 = $57;$49 = $54;$50 = 0;
  }
 }
 $$07 = $62;
 return ($$07|0);
}
function _fips_bn_sub_words($r,$a,$b,$n) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0120 = 0, $$021 = 0, $$0319 = 0, $$0518 = 0, $$07 = 0, $$116 = 0, $$1215 = 0, $$1414 = 0, $$1613 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $c$022 = 0, $c$1 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$4$lcssa = 0, $c$517 = 0, $c$6 = 0, $scevgep = 0, $scevgep32 = 0;
 var $scevgep33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(1);
 if ($0) {
  $$07 = 0;
  return ($$07|0);
 }
 $1 = ($n>>>0)>(3);
 if ($1) {
  $2 = (($n) + -4)|0;
  $3 = $2 & -4;
  $4 = (($3) + 4)|0;
  $scevgep32 = (($b) + ($4<<2)|0);
  $$0120 = $b;$$021 = $n;$$0319 = $a;$$0518 = $r;$c$022 = 0;
  while(1) {
   $7 = HEAP32[$$0319>>2]|0;
   $8 = HEAP32[$$0120>>2]|0;
   $9 = (($7) - ($c$022))|0;
   $10 = (($9) - ($8))|0;
   HEAP32[$$0518>>2] = $10;
   $11 = ($7|0)==($8|0);
   $12 = ($7>>>0)<($8>>>0);
   $13 = $12&1;
   $c$1 = $11 ? $c$022 : $13;
   $14 = ((($$0319)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($$0120)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($15) - ($17))|0;
   $19 = (($18) - ($c$1))|0;
   $20 = ((($$0518)) + 4|0);
   HEAP32[$20>>2] = $19;
   $21 = ($15|0)==($17|0);
   $22 = ($15>>>0)<($17>>>0);
   $23 = $22&1;
   $c$2 = $21 ? $c$1 : $23;
   $24 = ((($$0319)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($$0120)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) - ($27))|0;
   $29 = (($28) - ($c$2))|0;
   $30 = ((($$0518)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = ($25|0)==($27|0);
   $32 = ($25>>>0)<($27>>>0);
   $33 = $32&1;
   $c$3 = $31 ? $c$2 : $33;
   $34 = ((($$0319)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($$0120)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($35) - ($37))|0;
   $39 = (($38) - ($c$3))|0;
   $40 = ((($$0518)) + 12|0);
   HEAP32[$40>>2] = $39;
   $41 = ($35|0)==($37|0);
   $42 = ($35>>>0)<($37>>>0);
   $43 = $42&1;
   $c$4 = $41 ? $c$3 : $43;
   $44 = ((($$0319)) + 16|0);
   $45 = ((($$0120)) + 16|0);
   $46 = ((($$0518)) + 16|0);
   $47 = (($$021) + -4)|0;
   $48 = ($47>>>0)>(3);
   if ($48) {
    $$0120 = $45;$$021 = $47;$$0319 = $44;$$0518 = $46;$c$022 = $c$4;
   } else {
    $c$4$lcssa = $c$4;
    break;
   }
  }
  $5 = (($2) - ($3))|0;
  $scevgep = (($r) + ($4<<2)|0);
  $scevgep33 = (($a) + ($4<<2)|0);
  $6 = ($2|0)==($3|0);
  if ($6) {
   $$07 = $c$4$lcssa;
   return ($$07|0);
  } else {
   $$116 = $5;$$1215 = $scevgep32;$$1414 = $scevgep33;$$1613 = $scevgep;$c$517 = $c$4$lcssa;
  }
 } else {
  $$116 = $n;$$1215 = $b;$$1414 = $a;$$1613 = $r;$c$517 = 0;
 }
 while(1) {
  $49 = HEAP32[$$1414>>2]|0;
  $50 = HEAP32[$$1215>>2]|0;
  $51 = (($49) - ($c$517))|0;
  $52 = (($51) - ($50))|0;
  HEAP32[$$1613>>2] = $52;
  $53 = ($49|0)==($50|0);
  $54 = ($49>>>0)<($50>>>0);
  $55 = $54&1;
  $c$6 = $53 ? $c$517 : $55;
  $56 = ((($$1414)) + 4|0);
  $57 = ((($$1215)) + 4|0);
  $58 = ((($$1613)) + 4|0);
  $59 = (($$116) + -1)|0;
  $60 = ($59|0)==(0);
  if ($60) {
   $$07 = $c$6;
   break;
  } else {
   $$116 = $59;$$1215 = $57;$$1414 = $56;$$1613 = $58;$c$517 = $c$6;
  }
 }
 return ($$07|0);
}
function _fips_bn_mul_comba8($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$19 = 0, $$2 = 0, $$20 = 0, $$21 = 0, $$22 = 0, $$23 = 0, $$24 = 0, $$25 = 0, $$26 = 0;
 var $$27 = 0, $$28 = 0, $$29 = 0, $$3 = 0, $$30 = 0, $$31 = 0, $$32 = 0, $$33 = 0, $$34 = 0, $$35 = 0, $$36 = 0, $$37 = 0, $$38 = 0, $$39 = 0, $$4 = 0, $$40 = 0, $$41 = 0, $$42 = 0, $$43 = 0, $$44 = 0;
 var $$45 = 0, $$46 = 0, $$47 = 0, $$48 = 0, $$49 = 0, $$5 = 0, $$50 = 0, $$51 = 0, $$52 = 0, $$53 = 0, $$54 = 0, $$55 = 0, $$56 = 0, $$57 = 0, $$58 = 0, $$59 = 0, $$6 = 0, $$60 = 0, $$61 = 0, $$7 = 0;
 var $$8 = 0, $$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$1 = 0, $c1$10 = 0, $c1$11 = 0, $c1$12 = 0, $c1$13 = 0, $c1$14 = 0, $c1$15 = 0, $c1$16 = 0, $c1$17 = 0, $c1$18 = 0, $c1$19 = 0, $c1$2 = 0, $c1$20 = 0;
 var $c1$21 = 0, $c1$3 = 0, $c1$4 = 0, $c1$5 = 0, $c1$6 = 0, $c1$7 = 0, $c1$8 = 0, $c1$9 = 0, $c2$0 = 0, $c2$1 = 0, $c2$10 = 0, $c2$11 = 0, $c2$12 = 0, $c2$13 = 0, $c2$14 = 0, $c2$15 = 0, $c2$16 = 0, $c2$17 = 0, $c2$18 = 0, $c2$19 = 0;
 var $c2$2 = 0, $c2$3 = 0, $c2$4 = 0, $c2$5 = 0, $c2$6 = 0, $c2$7 = 0, $c2$8 = 0, $c2$9 = 0, $c3$1 = 0, $c3$10 = 0, $c3$11 = 0, $c3$12 = 0, $c3$13 = 0, $c3$14 = 0, $c3$15 = 0, $c3$16 = 0, $c3$17 = 0, $c3$18 = 0, $c3$19 = 0, $c3$2 = 0;
 var $c3$20 = 0, $c3$3 = 0, $c3$4 = 0, $c3$5 = 0, $c3$6 = 0, $c3$7 = 0, $c3$8 = 0, $c3$9 = 0, $t2$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = (___muldi3(($1|0),0,($0|0),0)|0);
 $3 = tempRet0;
 HEAP32[$r>>2] = $2;
 $4 = HEAP32[$a>>2]|0;
 $5 = ((($b)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___muldi3(($6|0),0,($4|0),0)|0);
 $8 = tempRet0;
 $9 = (($7) + ($3))|0;
 $10 = ($9>>>0)<($7>>>0);
 $11 = $10&1;
 $t2$1 = (($11) + ($8))|0;
 $12 = ((($a)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$b>>2]|0;
 $15 = (___muldi3(($14|0),0,($13|0),0)|0);
 $16 = tempRet0;
 $17 = (($15) + ($9))|0;
 $18 = ($17>>>0)<($15>>>0);
 $19 = $18&1;
 $$ = (($19) + ($16))|0;
 $20 = (($t2$1) + ($$))|0;
 $21 = ($20>>>0)<($$>>>0);
 $c1$1 = $21&1;
 $22 = ((($r)) + 4|0);
 HEAP32[$22>>2] = $17;
 $23 = ((($a)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$b>>2]|0;
 $26 = (___muldi3(($25|0),0,($24|0),0)|0);
 $27 = tempRet0;
 $28 = (($20) + ($26))|0;
 $29 = ($28>>>0)<($26>>>0);
 $30 = $29&1;
 $$1 = (($30) + ($27))|0;
 $31 = (($$1) + ($c1$1))|0;
 $32 = ($31>>>0)<($$1>>>0);
 $c2$0 = $32&1;
 $33 = HEAP32[$12>>2]|0;
 $34 = HEAP32[$5>>2]|0;
 $35 = (___muldi3(($34|0),0,($33|0),0)|0);
 $36 = tempRet0;
 $37 = (($28) + ($35))|0;
 $38 = ($37>>>0)<($35>>>0);
 $39 = $38&1;
 $$2 = (($39) + ($36))|0;
 $40 = (($31) + ($$2))|0;
 $41 = ($40>>>0)<($$2>>>0);
 $42 = $32 ? 2 : 1;
 $c2$1 = $41 ? $42 : $c2$0;
 $43 = HEAP32[$a>>2]|0;
 $44 = ((($b)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (___muldi3(($45|0),0,($43|0),0)|0);
 $47 = tempRet0;
 $48 = (($37) + ($46))|0;
 $49 = ($48>>>0)<($46>>>0);
 $50 = $49&1;
 $$3 = (($50) + ($47))|0;
 $51 = (($40) + ($$3))|0;
 $52 = ($51>>>0)<($$3>>>0);
 $53 = $52&1;
 $c2$2 = (($53) + ($c2$1))|0;
 $54 = ((($r)) + 8|0);
 HEAP32[$54>>2] = $48;
 $55 = HEAP32[$a>>2]|0;
 $56 = ((($b)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (___muldi3(($57|0),0,($55|0),0)|0);
 $59 = tempRet0;
 $60 = (($51) + ($58))|0;
 $61 = ($60>>>0)<($58>>>0);
 $62 = $61&1;
 $$4 = (($62) + ($59))|0;
 $63 = (($c2$2) + ($$4))|0;
 $64 = ($63>>>0)<($$4>>>0);
 $c3$1 = $64&1;
 $65 = HEAP32[$12>>2]|0;
 $66 = HEAP32[$44>>2]|0;
 $67 = (___muldi3(($66|0),0,($65|0),0)|0);
 $68 = tempRet0;
 $69 = (($60) + ($67))|0;
 $70 = ($69>>>0)<($67>>>0);
 $71 = $70&1;
 $$5 = (($71) + ($68))|0;
 $72 = (($63) + ($$5))|0;
 $73 = ($72>>>0)<($$5>>>0);
 $74 = $64 ? 2 : 1;
 $c3$2 = $73 ? $74 : $c3$1;
 $75 = HEAP32[$23>>2]|0;
 $76 = HEAP32[$5>>2]|0;
 $77 = (___muldi3(($76|0),0,($75|0),0)|0);
 $78 = tempRet0;
 $79 = (($69) + ($77))|0;
 $80 = ($79>>>0)<($77>>>0);
 $81 = $80&1;
 $$6 = (($81) + ($78))|0;
 $82 = (($72) + ($$6))|0;
 $83 = ($82>>>0)<($$6>>>0);
 $84 = $83&1;
 $c3$3 = (($84) + ($c3$2))|0;
 $85 = ((($a)) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$b>>2]|0;
 $88 = (___muldi3(($87|0),0,($86|0),0)|0);
 $89 = tempRet0;
 $90 = (($79) + ($88))|0;
 $91 = ($90>>>0)<($88>>>0);
 $92 = $91&1;
 $$7 = (($92) + ($89))|0;
 $93 = (($82) + ($$7))|0;
 $94 = ($93>>>0)<($$7>>>0);
 $95 = $94&1;
 $c3$4 = (($c3$3) + ($95))|0;
 $96 = ((($r)) + 12|0);
 HEAP32[$96>>2] = $90;
 $97 = ((($a)) + 16|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = HEAP32[$b>>2]|0;
 $100 = (___muldi3(($99|0),0,($98|0),0)|0);
 $101 = tempRet0;
 $102 = (($93) + ($100))|0;
 $103 = ($102>>>0)<($100>>>0);
 $104 = $103&1;
 $$8 = (($104) + ($101))|0;
 $105 = (($c3$4) + ($$8))|0;
 $106 = ($105>>>0)<($$8>>>0);
 $c1$2 = $106&1;
 $107 = HEAP32[$85>>2]|0;
 $108 = HEAP32[$5>>2]|0;
 $109 = (___muldi3(($108|0),0,($107|0),0)|0);
 $110 = tempRet0;
 $111 = (($102) + ($109))|0;
 $112 = ($111>>>0)<($109>>>0);
 $113 = $112&1;
 $$9 = (($113) + ($110))|0;
 $114 = (($105) + ($$9))|0;
 $115 = ($114>>>0)<($$9>>>0);
 $116 = $106 ? 2 : 1;
 $c1$3 = $115 ? $116 : $c1$2;
 $117 = HEAP32[$23>>2]|0;
 $118 = HEAP32[$44>>2]|0;
 $119 = (___muldi3(($118|0),0,($117|0),0)|0);
 $120 = tempRet0;
 $121 = (($111) + ($119))|0;
 $122 = ($121>>>0)<($119>>>0);
 $123 = $122&1;
 $$10 = (($123) + ($120))|0;
 $124 = (($114) + ($$10))|0;
 $125 = ($124>>>0)<($$10>>>0);
 $126 = $125&1;
 $c1$4 = (($126) + ($c1$3))|0;
 $127 = HEAP32[$12>>2]|0;
 $128 = HEAP32[$56>>2]|0;
 $129 = (___muldi3(($128|0),0,($127|0),0)|0);
 $130 = tempRet0;
 $131 = (($121) + ($129))|0;
 $132 = ($131>>>0)<($129>>>0);
 $133 = $132&1;
 $$11 = (($133) + ($130))|0;
 $134 = (($124) + ($$11))|0;
 $135 = ($134>>>0)<($$11>>>0);
 $136 = $135&1;
 $c1$5 = (($c1$4) + ($136))|0;
 $137 = HEAP32[$a>>2]|0;
 $138 = ((($b)) + 16|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (___muldi3(($139|0),0,($137|0),0)|0);
 $141 = tempRet0;
 $142 = (($131) + ($140))|0;
 $143 = ($142>>>0)<($140>>>0);
 $144 = $143&1;
 $$12 = (($144) + ($141))|0;
 $145 = (($134) + ($$12))|0;
 $146 = ($145>>>0)<($$12>>>0);
 $147 = $146&1;
 $c1$6 = (($c1$5) + ($147))|0;
 $148 = ((($r)) + 16|0);
 HEAP32[$148>>2] = $142;
 $149 = HEAP32[$a>>2]|0;
 $150 = ((($b)) + 20|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (___muldi3(($151|0),0,($149|0),0)|0);
 $153 = tempRet0;
 $154 = (($145) + ($152))|0;
 $155 = ($154>>>0)<($152>>>0);
 $156 = $155&1;
 $$13 = (($156) + ($153))|0;
 $157 = (($c1$6) + ($$13))|0;
 $158 = ($157>>>0)<($$13>>>0);
 $c2$3 = $158&1;
 $159 = HEAP32[$12>>2]|0;
 $160 = HEAP32[$138>>2]|0;
 $161 = (___muldi3(($160|0),0,($159|0),0)|0);
 $162 = tempRet0;
 $163 = (($154) + ($161))|0;
 $164 = ($163>>>0)<($161>>>0);
 $165 = $164&1;
 $$14 = (($165) + ($162))|0;
 $166 = (($157) + ($$14))|0;
 $167 = ($166>>>0)<($$14>>>0);
 $168 = $158 ? 2 : 1;
 $c2$4 = $167 ? $168 : $c2$3;
 $169 = HEAP32[$23>>2]|0;
 $170 = HEAP32[$56>>2]|0;
 $171 = (___muldi3(($170|0),0,($169|0),0)|0);
 $172 = tempRet0;
 $173 = (($163) + ($171))|0;
 $174 = ($173>>>0)<($171>>>0);
 $175 = $174&1;
 $$15 = (($175) + ($172))|0;
 $176 = (($166) + ($$15))|0;
 $177 = ($176>>>0)<($$15>>>0);
 $178 = $177&1;
 $c2$5 = (($178) + ($c2$4))|0;
 $179 = HEAP32[$85>>2]|0;
 $180 = HEAP32[$44>>2]|0;
 $181 = (___muldi3(($180|0),0,($179|0),0)|0);
 $182 = tempRet0;
 $183 = (($173) + ($181))|0;
 $184 = ($183>>>0)<($181>>>0);
 $185 = $184&1;
 $$16 = (($185) + ($182))|0;
 $186 = (($176) + ($$16))|0;
 $187 = ($186>>>0)<($$16>>>0);
 $188 = $187&1;
 $c2$6 = (($c2$5) + ($188))|0;
 $189 = HEAP32[$97>>2]|0;
 $190 = HEAP32[$5>>2]|0;
 $191 = (___muldi3(($190|0),0,($189|0),0)|0);
 $192 = tempRet0;
 $193 = (($191) + ($183))|0;
 $194 = ($193>>>0)<($191>>>0);
 $195 = $194&1;
 $$17 = (($195) + ($192))|0;
 $196 = (($$17) + ($186))|0;
 $197 = ($196>>>0)<($$17>>>0);
 $198 = $197&1;
 $c2$7 = (($c2$6) + ($198))|0;
 $199 = ((($a)) + 20|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = HEAP32[$b>>2]|0;
 $202 = (___muldi3(($201|0),0,($200|0),0)|0);
 $203 = tempRet0;
 $204 = (($202) + ($193))|0;
 $205 = ($204>>>0)<($202>>>0);
 $206 = $205&1;
 $$18 = (($206) + ($203))|0;
 $207 = (($$18) + ($196))|0;
 $208 = ($207>>>0)<($$18>>>0);
 $209 = $208&1;
 $c2$8 = (($c2$7) + ($209))|0;
 $210 = ((($r)) + 20|0);
 HEAP32[$210>>2] = $204;
 $211 = ((($a)) + 24|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = HEAP32[$b>>2]|0;
 $214 = (___muldi3(($213|0),0,($212|0),0)|0);
 $215 = tempRet0;
 $216 = (($207) + ($214))|0;
 $217 = ($216>>>0)<($214>>>0);
 $218 = $217&1;
 $$19 = (($218) + ($215))|0;
 $219 = (($c2$8) + ($$19))|0;
 $220 = ($219>>>0)<($$19>>>0);
 $c3$5 = $220&1;
 $221 = HEAP32[$199>>2]|0;
 $222 = HEAP32[$5>>2]|0;
 $223 = (___muldi3(($222|0),0,($221|0),0)|0);
 $224 = tempRet0;
 $225 = (($216) + ($223))|0;
 $226 = ($225>>>0)<($223>>>0);
 $227 = $226&1;
 $$20 = (($227) + ($224))|0;
 $228 = (($219) + ($$20))|0;
 $229 = ($228>>>0)<($$20>>>0);
 $230 = $220 ? 2 : 1;
 $c3$6 = $229 ? $230 : $c3$5;
 $231 = HEAP32[$97>>2]|0;
 $232 = HEAP32[$44>>2]|0;
 $233 = (___muldi3(($232|0),0,($231|0),0)|0);
 $234 = tempRet0;
 $235 = (($225) + ($233))|0;
 $236 = ($235>>>0)<($233>>>0);
 $237 = $236&1;
 $$21 = (($237) + ($234))|0;
 $238 = (($228) + ($$21))|0;
 $239 = ($238>>>0)<($$21>>>0);
 $240 = $239&1;
 $c3$7 = (($240) + ($c3$6))|0;
 $241 = HEAP32[$85>>2]|0;
 $242 = HEAP32[$56>>2]|0;
 $243 = (___muldi3(($242|0),0,($241|0),0)|0);
 $244 = tempRet0;
 $245 = (($235) + ($243))|0;
 $246 = ($245>>>0)<($243>>>0);
 $247 = $246&1;
 $$22 = (($247) + ($244))|0;
 $248 = (($238) + ($$22))|0;
 $249 = ($248>>>0)<($$22>>>0);
 $250 = $249&1;
 $c3$8 = (($c3$7) + ($250))|0;
 $251 = HEAP32[$23>>2]|0;
 $252 = HEAP32[$138>>2]|0;
 $253 = (___muldi3(($252|0),0,($251|0),0)|0);
 $254 = tempRet0;
 $255 = (($253) + ($245))|0;
 $256 = ($255>>>0)<($253>>>0);
 $257 = $256&1;
 $$23 = (($257) + ($254))|0;
 $258 = (($$23) + ($248))|0;
 $259 = ($258>>>0)<($$23>>>0);
 $260 = $259&1;
 $c3$9 = (($c3$8) + ($260))|0;
 $261 = HEAP32[$12>>2]|0;
 $262 = HEAP32[$150>>2]|0;
 $263 = (___muldi3(($262|0),0,($261|0),0)|0);
 $264 = tempRet0;
 $265 = (($263) + ($255))|0;
 $266 = ($265>>>0)<($263>>>0);
 $267 = $266&1;
 $$24 = (($267) + ($264))|0;
 $268 = (($$24) + ($258))|0;
 $269 = ($268>>>0)<($$24>>>0);
 $270 = $269&1;
 $c3$10 = (($c3$9) + ($270))|0;
 $271 = HEAP32[$a>>2]|0;
 $272 = ((($b)) + 24|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = (___muldi3(($273|0),0,($271|0),0)|0);
 $275 = tempRet0;
 $276 = (($274) + ($265))|0;
 $277 = ($276>>>0)<($274>>>0);
 $278 = $277&1;
 $$25 = (($278) + ($275))|0;
 $279 = (($$25) + ($268))|0;
 $280 = ($279>>>0)<($$25>>>0);
 $281 = $280&1;
 $c3$11 = (($c3$10) + ($281))|0;
 $282 = ((($r)) + 24|0);
 HEAP32[$282>>2] = $276;
 $283 = HEAP32[$a>>2]|0;
 $284 = ((($b)) + 28|0);
 $285 = HEAP32[$284>>2]|0;
 $286 = (___muldi3(($285|0),0,($283|0),0)|0);
 $287 = tempRet0;
 $288 = (($279) + ($286))|0;
 $289 = ($288>>>0)<($286>>>0);
 $290 = $289&1;
 $$26 = (($290) + ($287))|0;
 $291 = (($c3$11) + ($$26))|0;
 $292 = ($291>>>0)<($$26>>>0);
 $c1$7 = $292&1;
 $293 = HEAP32[$12>>2]|0;
 $294 = HEAP32[$272>>2]|0;
 $295 = (___muldi3(($294|0),0,($293|0),0)|0);
 $296 = tempRet0;
 $297 = (($288) + ($295))|0;
 $298 = ($297>>>0)<($295>>>0);
 $299 = $298&1;
 $$27 = (($299) + ($296))|0;
 $300 = (($291) + ($$27))|0;
 $301 = ($300>>>0)<($$27>>>0);
 $302 = $292 ? 2 : 1;
 $c1$8 = $301 ? $302 : $c1$7;
 $303 = HEAP32[$23>>2]|0;
 $304 = HEAP32[$150>>2]|0;
 $305 = (___muldi3(($304|0),0,($303|0),0)|0);
 $306 = tempRet0;
 $307 = (($297) + ($305))|0;
 $308 = ($307>>>0)<($305>>>0);
 $309 = $308&1;
 $$28 = (($309) + ($306))|0;
 $310 = (($300) + ($$28))|0;
 $311 = ($310>>>0)<($$28>>>0);
 $312 = $311&1;
 $c1$9 = (($312) + ($c1$8))|0;
 $313 = HEAP32[$85>>2]|0;
 $314 = HEAP32[$138>>2]|0;
 $315 = (___muldi3(($314|0),0,($313|0),0)|0);
 $316 = tempRet0;
 $317 = (($307) + ($315))|0;
 $318 = ($317>>>0)<($315>>>0);
 $319 = $318&1;
 $$29 = (($319) + ($316))|0;
 $320 = (($310) + ($$29))|0;
 $321 = ($320>>>0)<($$29>>>0);
 $322 = $321&1;
 $c1$10 = (($c1$9) + ($322))|0;
 $323 = HEAP32[$97>>2]|0;
 $324 = HEAP32[$56>>2]|0;
 $325 = (___muldi3(($324|0),0,($323|0),0)|0);
 $326 = tempRet0;
 $327 = (($325) + ($317))|0;
 $328 = ($327>>>0)<($325>>>0);
 $329 = $328&1;
 $$30 = (($329) + ($326))|0;
 $330 = (($$30) + ($320))|0;
 $331 = ($330>>>0)<($$30>>>0);
 $332 = $331&1;
 $c1$11 = (($c1$10) + ($332))|0;
 $333 = HEAP32[$199>>2]|0;
 $334 = HEAP32[$44>>2]|0;
 $335 = (___muldi3(($334|0),0,($333|0),0)|0);
 $336 = tempRet0;
 $337 = (($335) + ($327))|0;
 $338 = ($337>>>0)<($335>>>0);
 $339 = $338&1;
 $$31 = (($339) + ($336))|0;
 $340 = (($$31) + ($330))|0;
 $341 = ($340>>>0)<($$31>>>0);
 $342 = $341&1;
 $c1$12 = (($c1$11) + ($342))|0;
 $343 = HEAP32[$211>>2]|0;
 $344 = HEAP32[$5>>2]|0;
 $345 = (___muldi3(($344|0),0,($343|0),0)|0);
 $346 = tempRet0;
 $347 = (($345) + ($337))|0;
 $348 = ($347>>>0)<($345>>>0);
 $349 = $348&1;
 $$32 = (($349) + ($346))|0;
 $350 = (($$32) + ($340))|0;
 $351 = ($350>>>0)<($$32>>>0);
 $352 = $351&1;
 $c1$13 = (($c1$12) + ($352))|0;
 $353 = ((($a)) + 28|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = HEAP32[$b>>2]|0;
 $356 = (___muldi3(($355|0),0,($354|0),0)|0);
 $357 = tempRet0;
 $358 = (($356) + ($347))|0;
 $359 = ($358>>>0)<($356>>>0);
 $360 = $359&1;
 $$33 = (($360) + ($357))|0;
 $361 = (($$33) + ($350))|0;
 $362 = ($361>>>0)<($$33>>>0);
 $363 = $362&1;
 $c1$14 = (($c1$13) + ($363))|0;
 $364 = ((($r)) + 28|0);
 HEAP32[$364>>2] = $358;
 $365 = HEAP32[$353>>2]|0;
 $366 = HEAP32[$5>>2]|0;
 $367 = (___muldi3(($366|0),0,($365|0),0)|0);
 $368 = tempRet0;
 $369 = (($361) + ($367))|0;
 $370 = ($369>>>0)<($367>>>0);
 $371 = $370&1;
 $$34 = (($371) + ($368))|0;
 $372 = (($c1$14) + ($$34))|0;
 $373 = ($372>>>0)<($$34>>>0);
 $c2$9 = $373&1;
 $374 = HEAP32[$211>>2]|0;
 $375 = HEAP32[$44>>2]|0;
 $376 = (___muldi3(($375|0),0,($374|0),0)|0);
 $377 = tempRet0;
 $378 = (($369) + ($376))|0;
 $379 = ($378>>>0)<($376>>>0);
 $380 = $379&1;
 $$35 = (($380) + ($377))|0;
 $381 = (($372) + ($$35))|0;
 $382 = ($381>>>0)<($$35>>>0);
 $383 = $373 ? 2 : 1;
 $c2$10 = $382 ? $383 : $c2$9;
 $384 = HEAP32[$199>>2]|0;
 $385 = HEAP32[$56>>2]|0;
 $386 = (___muldi3(($385|0),0,($384|0),0)|0);
 $387 = tempRet0;
 $388 = (($378) + ($386))|0;
 $389 = ($388>>>0)<($386>>>0);
 $390 = $389&1;
 $$36 = (($390) + ($387))|0;
 $391 = (($381) + ($$36))|0;
 $392 = ($391>>>0)<($$36>>>0);
 $393 = $392&1;
 $c2$11 = (($393) + ($c2$10))|0;
 $394 = HEAP32[$97>>2]|0;
 $395 = HEAP32[$138>>2]|0;
 $396 = (___muldi3(($395|0),0,($394|0),0)|0);
 $397 = tempRet0;
 $398 = (($388) + ($396))|0;
 $399 = ($398>>>0)<($396>>>0);
 $400 = $399&1;
 $$37 = (($400) + ($397))|0;
 $401 = (($391) + ($$37))|0;
 $402 = ($401>>>0)<($$37>>>0);
 $403 = $402&1;
 $c2$12 = (($c2$11) + ($403))|0;
 $404 = HEAP32[$85>>2]|0;
 $405 = HEAP32[$150>>2]|0;
 $406 = (___muldi3(($405|0),0,($404|0),0)|0);
 $407 = tempRet0;
 $408 = (($406) + ($398))|0;
 $409 = ($408>>>0)<($406>>>0);
 $410 = $409&1;
 $$38 = (($410) + ($407))|0;
 $411 = (($$38) + ($401))|0;
 $412 = ($411>>>0)<($$38>>>0);
 $413 = $412&1;
 $c2$13 = (($c2$12) + ($413))|0;
 $414 = HEAP32[$23>>2]|0;
 $415 = HEAP32[$272>>2]|0;
 $416 = (___muldi3(($415|0),0,($414|0),0)|0);
 $417 = tempRet0;
 $418 = (($416) + ($408))|0;
 $419 = ($418>>>0)<($416>>>0);
 $420 = $419&1;
 $$39 = (($420) + ($417))|0;
 $421 = (($$39) + ($411))|0;
 $422 = ($421>>>0)<($$39>>>0);
 $423 = $422&1;
 $c2$14 = (($c2$13) + ($423))|0;
 $424 = HEAP32[$12>>2]|0;
 $425 = HEAP32[$284>>2]|0;
 $426 = (___muldi3(($425|0),0,($424|0),0)|0);
 $427 = tempRet0;
 $428 = (($426) + ($418))|0;
 $429 = ($428>>>0)<($426>>>0);
 $430 = $429&1;
 $$40 = (($430) + ($427))|0;
 $431 = (($$40) + ($421))|0;
 $432 = ($431>>>0)<($$40>>>0);
 $433 = $432&1;
 $c2$15 = (($c2$14) + ($433))|0;
 $434 = ((($r)) + 32|0);
 HEAP32[$434>>2] = $428;
 $435 = HEAP32[$23>>2]|0;
 $436 = HEAP32[$284>>2]|0;
 $437 = (___muldi3(($436|0),0,($435|0),0)|0);
 $438 = tempRet0;
 $439 = (($431) + ($437))|0;
 $440 = ($439>>>0)<($437>>>0);
 $441 = $440&1;
 $$41 = (($441) + ($438))|0;
 $442 = (($c2$15) + ($$41))|0;
 $443 = ($442>>>0)<($$41>>>0);
 $c3$12 = $443&1;
 $444 = HEAP32[$85>>2]|0;
 $445 = HEAP32[$272>>2]|0;
 $446 = (___muldi3(($445|0),0,($444|0),0)|0);
 $447 = tempRet0;
 $448 = (($439) + ($446))|0;
 $449 = ($448>>>0)<($446>>>0);
 $450 = $449&1;
 $$42 = (($450) + ($447))|0;
 $451 = (($442) + ($$42))|0;
 $452 = ($451>>>0)<($$42>>>0);
 $453 = $443 ? 2 : 1;
 $c3$13 = $452 ? $453 : $c3$12;
 $454 = HEAP32[$97>>2]|0;
 $455 = HEAP32[$150>>2]|0;
 $456 = (___muldi3(($455|0),0,($454|0),0)|0);
 $457 = tempRet0;
 $458 = (($448) + ($456))|0;
 $459 = ($458>>>0)<($456>>>0);
 $460 = $459&1;
 $$43 = (($460) + ($457))|0;
 $461 = (($451) + ($$43))|0;
 $462 = ($461>>>0)<($$43>>>0);
 $463 = $462&1;
 $c3$14 = (($463) + ($c3$13))|0;
 $464 = HEAP32[$199>>2]|0;
 $465 = HEAP32[$138>>2]|0;
 $466 = (___muldi3(($465|0),0,($464|0),0)|0);
 $467 = tempRet0;
 $468 = (($458) + ($466))|0;
 $469 = ($468>>>0)<($466>>>0);
 $470 = $469&1;
 $$44 = (($470) + ($467))|0;
 $471 = (($461) + ($$44))|0;
 $472 = ($471>>>0)<($$44>>>0);
 $473 = $472&1;
 $c3$15 = (($c3$14) + ($473))|0;
 $474 = HEAP32[$211>>2]|0;
 $475 = HEAP32[$56>>2]|0;
 $476 = (___muldi3(($475|0),0,($474|0),0)|0);
 $477 = tempRet0;
 $478 = (($476) + ($468))|0;
 $479 = ($478>>>0)<($476>>>0);
 $480 = $479&1;
 $$45 = (($480) + ($477))|0;
 $481 = (($$45) + ($471))|0;
 $482 = ($481>>>0)<($$45>>>0);
 $483 = $482&1;
 $c3$16 = (($c3$15) + ($483))|0;
 $484 = HEAP32[$353>>2]|0;
 $485 = HEAP32[$44>>2]|0;
 $486 = (___muldi3(($485|0),0,($484|0),0)|0);
 $487 = tempRet0;
 $488 = (($486) + ($478))|0;
 $489 = ($488>>>0)<($486>>>0);
 $490 = $489&1;
 $$46 = (($490) + ($487))|0;
 $491 = (($$46) + ($481))|0;
 $492 = ($491>>>0)<($$46>>>0);
 $493 = $492&1;
 $c3$17 = (($c3$16) + ($493))|0;
 $494 = ((($r)) + 36|0);
 HEAP32[$494>>2] = $488;
 $495 = HEAP32[$353>>2]|0;
 $496 = HEAP32[$56>>2]|0;
 $497 = (___muldi3(($496|0),0,($495|0),0)|0);
 $498 = tempRet0;
 $499 = (($491) + ($497))|0;
 $500 = ($499>>>0)<($497>>>0);
 $501 = $500&1;
 $$47 = (($501) + ($498))|0;
 $502 = (($c3$17) + ($$47))|0;
 $503 = ($502>>>0)<($$47>>>0);
 $c1$15 = $503&1;
 $504 = HEAP32[$211>>2]|0;
 $505 = HEAP32[$138>>2]|0;
 $506 = (___muldi3(($505|0),0,($504|0),0)|0);
 $507 = tempRet0;
 $508 = (($499) + ($506))|0;
 $509 = ($508>>>0)<($506>>>0);
 $510 = $509&1;
 $$48 = (($510) + ($507))|0;
 $511 = (($502) + ($$48))|0;
 $512 = ($511>>>0)<($$48>>>0);
 $513 = $503 ? 2 : 1;
 $c1$16 = $512 ? $513 : $c1$15;
 $514 = HEAP32[$199>>2]|0;
 $515 = HEAP32[$150>>2]|0;
 $516 = (___muldi3(($515|0),0,($514|0),0)|0);
 $517 = tempRet0;
 $518 = (($508) + ($516))|0;
 $519 = ($518>>>0)<($516>>>0);
 $520 = $519&1;
 $$49 = (($520) + ($517))|0;
 $521 = (($511) + ($$49))|0;
 $522 = ($521>>>0)<($$49>>>0);
 $523 = $522&1;
 $c1$17 = (($523) + ($c1$16))|0;
 $524 = HEAP32[$97>>2]|0;
 $525 = HEAP32[$272>>2]|0;
 $526 = (___muldi3(($525|0),0,($524|0),0)|0);
 $527 = tempRet0;
 $528 = (($518) + ($526))|0;
 $529 = ($528>>>0)<($526>>>0);
 $530 = $529&1;
 $$50 = (($530) + ($527))|0;
 $531 = (($521) + ($$50))|0;
 $532 = ($531>>>0)<($$50>>>0);
 $533 = $532&1;
 $c1$18 = (($c1$17) + ($533))|0;
 $534 = HEAP32[$85>>2]|0;
 $535 = HEAP32[$284>>2]|0;
 $536 = (___muldi3(($535|0),0,($534|0),0)|0);
 $537 = tempRet0;
 $538 = (($536) + ($528))|0;
 $539 = ($538>>>0)<($536>>>0);
 $540 = $539&1;
 $$51 = (($540) + ($537))|0;
 $541 = (($$51) + ($531))|0;
 $542 = ($541>>>0)<($$51>>>0);
 $543 = $542&1;
 $c1$19 = (($c1$18) + ($543))|0;
 $544 = ((($r)) + 40|0);
 HEAP32[$544>>2] = $538;
 $545 = HEAP32[$97>>2]|0;
 $546 = HEAP32[$284>>2]|0;
 $547 = (___muldi3(($546|0),0,($545|0),0)|0);
 $548 = tempRet0;
 $549 = (($541) + ($547))|0;
 $550 = ($549>>>0)<($547>>>0);
 $551 = $550&1;
 $$52 = (($551) + ($548))|0;
 $552 = (($c1$19) + ($$52))|0;
 $553 = ($552>>>0)<($$52>>>0);
 $c2$16 = $553&1;
 $554 = HEAP32[$199>>2]|0;
 $555 = HEAP32[$272>>2]|0;
 $556 = (___muldi3(($555|0),0,($554|0),0)|0);
 $557 = tempRet0;
 $558 = (($549) + ($556))|0;
 $559 = ($558>>>0)<($556>>>0);
 $560 = $559&1;
 $$53 = (($560) + ($557))|0;
 $561 = (($552) + ($$53))|0;
 $562 = ($561>>>0)<($$53>>>0);
 $563 = $553 ? 2 : 1;
 $c2$17 = $562 ? $563 : $c2$16;
 $564 = HEAP32[$211>>2]|0;
 $565 = HEAP32[$150>>2]|0;
 $566 = (___muldi3(($565|0),0,($564|0),0)|0);
 $567 = tempRet0;
 $568 = (($558) + ($566))|0;
 $569 = ($568>>>0)<($566>>>0);
 $570 = $569&1;
 $$54 = (($570) + ($567))|0;
 $571 = (($561) + ($$54))|0;
 $572 = ($571>>>0)<($$54>>>0);
 $573 = $572&1;
 $c2$18 = (($573) + ($c2$17))|0;
 $574 = HEAP32[$353>>2]|0;
 $575 = HEAP32[$138>>2]|0;
 $576 = (___muldi3(($575|0),0,($574|0),0)|0);
 $577 = tempRet0;
 $578 = (($568) + ($576))|0;
 $579 = ($578>>>0)<($576>>>0);
 $580 = $579&1;
 $$55 = (($580) + ($577))|0;
 $581 = (($571) + ($$55))|0;
 $582 = ($581>>>0)<($$55>>>0);
 $583 = $582&1;
 $c2$19 = (($c2$18) + ($583))|0;
 $584 = ((($r)) + 44|0);
 HEAP32[$584>>2] = $578;
 $585 = HEAP32[$353>>2]|0;
 $586 = HEAP32[$150>>2]|0;
 $587 = (___muldi3(($586|0),0,($585|0),0)|0);
 $588 = tempRet0;
 $589 = (($581) + ($587))|0;
 $590 = ($589>>>0)<($587>>>0);
 $591 = $590&1;
 $$56 = (($591) + ($588))|0;
 $592 = (($c2$19) + ($$56))|0;
 $593 = ($592>>>0)<($$56>>>0);
 $c3$18 = $593&1;
 $594 = HEAP32[$211>>2]|0;
 $595 = HEAP32[$272>>2]|0;
 $596 = (___muldi3(($595|0),0,($594|0),0)|0);
 $597 = tempRet0;
 $598 = (($589) + ($596))|0;
 $599 = ($598>>>0)<($596>>>0);
 $600 = $599&1;
 $$57 = (($600) + ($597))|0;
 $601 = (($592) + ($$57))|0;
 $602 = ($601>>>0)<($$57>>>0);
 $603 = $593 ? 2 : 1;
 $c3$19 = $602 ? $603 : $c3$18;
 $604 = HEAP32[$199>>2]|0;
 $605 = HEAP32[$284>>2]|0;
 $606 = (___muldi3(($605|0),0,($604|0),0)|0);
 $607 = tempRet0;
 $608 = (($598) + ($606))|0;
 $609 = ($608>>>0)<($606>>>0);
 $610 = $609&1;
 $$58 = (($610) + ($607))|0;
 $611 = (($601) + ($$58))|0;
 $612 = ($611>>>0)<($$58>>>0);
 $613 = $612&1;
 $c3$20 = (($613) + ($c3$19))|0;
 $614 = ((($r)) + 48|0);
 HEAP32[$614>>2] = $608;
 $615 = HEAP32[$211>>2]|0;
 $616 = HEAP32[$284>>2]|0;
 $617 = (___muldi3(($616|0),0,($615|0),0)|0);
 $618 = tempRet0;
 $619 = (($611) + ($617))|0;
 $620 = ($619>>>0)<($617>>>0);
 $621 = $620&1;
 $$59 = (($621) + ($618))|0;
 $622 = (($c3$20) + ($$59))|0;
 $623 = ($622>>>0)<($$59>>>0);
 $c1$20 = $623&1;
 $624 = HEAP32[$353>>2]|0;
 $625 = HEAP32[$272>>2]|0;
 $626 = (___muldi3(($625|0),0,($624|0),0)|0);
 $627 = tempRet0;
 $628 = (($619) + ($626))|0;
 $629 = ($628>>>0)<($626>>>0);
 $630 = $629&1;
 $$60 = (($630) + ($627))|0;
 $631 = (($622) + ($$60))|0;
 $632 = ($631>>>0)<($$60>>>0);
 $633 = $623 ? 2 : 1;
 $c1$21 = $632 ? $633 : $c1$20;
 $634 = ((($r)) + 52|0);
 HEAP32[$634>>2] = $628;
 $635 = HEAP32[$353>>2]|0;
 $636 = HEAP32[$284>>2]|0;
 $637 = (___muldi3(($636|0),0,($635|0),0)|0);
 $638 = tempRet0;
 $639 = (($631) + ($637))|0;
 $640 = ($639>>>0)<($637>>>0);
 $641 = $640&1;
 $$61 = (($c1$21) + ($638))|0;
 $642 = (($$61) + ($641))|0;
 $643 = ((($r)) + 56|0);
 HEAP32[$643>>2] = $639;
 $644 = ((($r)) + 60|0);
 HEAP32[$644>>2] = $642;
 return;
}
function _fips_bn_mul_comba4($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$1 = 0, $c1$2 = 0, $c1$3 = 0, $c1$4 = 0, $c2$0 = 0, $c2$1 = 0, $c2$2 = 0, $c2$3 = 0, $c2$4 = 0;
 var $c3$1 = 0, $c3$2 = 0, $c3$3 = 0, $c3$4 = 0, $t2$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = (___muldi3(($1|0),0,($0|0),0)|0);
 $3 = tempRet0;
 HEAP32[$r>>2] = $2;
 $4 = HEAP32[$a>>2]|0;
 $5 = ((($b)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___muldi3(($6|0),0,($4|0),0)|0);
 $8 = tempRet0;
 $9 = (($7) + ($3))|0;
 $10 = ($9>>>0)<($7>>>0);
 $11 = $10&1;
 $t2$1 = (($11) + ($8))|0;
 $12 = ((($a)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$b>>2]|0;
 $15 = (___muldi3(($14|0),0,($13|0),0)|0);
 $16 = tempRet0;
 $17 = (($15) + ($9))|0;
 $18 = ($17>>>0)<($15>>>0);
 $19 = $18&1;
 $$ = (($19) + ($16))|0;
 $20 = (($t2$1) + ($$))|0;
 $21 = ($20>>>0)<($$>>>0);
 $c1$1 = $21&1;
 $22 = ((($r)) + 4|0);
 HEAP32[$22>>2] = $17;
 $23 = ((($a)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$b>>2]|0;
 $26 = (___muldi3(($25|0),0,($24|0),0)|0);
 $27 = tempRet0;
 $28 = (($20) + ($26))|0;
 $29 = ($28>>>0)<($26>>>0);
 $30 = $29&1;
 $$1 = (($30) + ($27))|0;
 $31 = (($$1) + ($c1$1))|0;
 $32 = ($31>>>0)<($$1>>>0);
 $c2$0 = $32&1;
 $33 = HEAP32[$12>>2]|0;
 $34 = HEAP32[$5>>2]|0;
 $35 = (___muldi3(($34|0),0,($33|0),0)|0);
 $36 = tempRet0;
 $37 = (($28) + ($35))|0;
 $38 = ($37>>>0)<($35>>>0);
 $39 = $38&1;
 $$2 = (($39) + ($36))|0;
 $40 = (($31) + ($$2))|0;
 $41 = ($40>>>0)<($$2>>>0);
 $42 = $32 ? 2 : 1;
 $c2$1 = $41 ? $42 : $c2$0;
 $43 = HEAP32[$a>>2]|0;
 $44 = ((($b)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (___muldi3(($45|0),0,($43|0),0)|0);
 $47 = tempRet0;
 $48 = (($37) + ($46))|0;
 $49 = ($48>>>0)<($46>>>0);
 $50 = $49&1;
 $$3 = (($50) + ($47))|0;
 $51 = (($40) + ($$3))|0;
 $52 = ($51>>>0)<($$3>>>0);
 $53 = $52&1;
 $c2$2 = (($53) + ($c2$1))|0;
 $54 = ((($r)) + 8|0);
 HEAP32[$54>>2] = $48;
 $55 = HEAP32[$a>>2]|0;
 $56 = ((($b)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (___muldi3(($57|0),0,($55|0),0)|0);
 $59 = tempRet0;
 $60 = (($51) + ($58))|0;
 $61 = ($60>>>0)<($58>>>0);
 $62 = $61&1;
 $$4 = (($62) + ($59))|0;
 $63 = (($c2$2) + ($$4))|0;
 $64 = ($63>>>0)<($$4>>>0);
 $c3$1 = $64&1;
 $65 = HEAP32[$12>>2]|0;
 $66 = HEAP32[$44>>2]|0;
 $67 = (___muldi3(($66|0),0,($65|0),0)|0);
 $68 = tempRet0;
 $69 = (($60) + ($67))|0;
 $70 = ($69>>>0)<($67>>>0);
 $71 = $70&1;
 $$5 = (($71) + ($68))|0;
 $72 = (($63) + ($$5))|0;
 $73 = ($72>>>0)<($$5>>>0);
 $74 = $64 ? 2 : 1;
 $c3$2 = $73 ? $74 : $c3$1;
 $75 = HEAP32[$23>>2]|0;
 $76 = HEAP32[$5>>2]|0;
 $77 = (___muldi3(($76|0),0,($75|0),0)|0);
 $78 = tempRet0;
 $79 = (($69) + ($77))|0;
 $80 = ($79>>>0)<($77>>>0);
 $81 = $80&1;
 $$6 = (($81) + ($78))|0;
 $82 = (($72) + ($$6))|0;
 $83 = ($82>>>0)<($$6>>>0);
 $84 = $83&1;
 $c3$3 = (($84) + ($c3$2))|0;
 $85 = ((($a)) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$b>>2]|0;
 $88 = (___muldi3(($87|0),0,($86|0),0)|0);
 $89 = tempRet0;
 $90 = (($79) + ($88))|0;
 $91 = ($90>>>0)<($88>>>0);
 $92 = $91&1;
 $$7 = (($92) + ($89))|0;
 $93 = (($82) + ($$7))|0;
 $94 = ($93>>>0)<($$7>>>0);
 $95 = $94&1;
 $c3$4 = (($c3$3) + ($95))|0;
 $96 = ((($r)) + 12|0);
 HEAP32[$96>>2] = $90;
 $97 = HEAP32[$85>>2]|0;
 $98 = HEAP32[$5>>2]|0;
 $99 = (___muldi3(($98|0),0,($97|0),0)|0);
 $100 = tempRet0;
 $101 = (($93) + ($99))|0;
 $102 = ($101>>>0)<($99>>>0);
 $103 = $102&1;
 $$8 = (($103) + ($100))|0;
 $104 = (($c3$4) + ($$8))|0;
 $105 = ($104>>>0)<($$8>>>0);
 $c1$2 = $105&1;
 $106 = HEAP32[$23>>2]|0;
 $107 = HEAP32[$44>>2]|0;
 $108 = (___muldi3(($107|0),0,($106|0),0)|0);
 $109 = tempRet0;
 $110 = (($101) + ($108))|0;
 $111 = ($110>>>0)<($108>>>0);
 $112 = $111&1;
 $$9 = (($112) + ($109))|0;
 $113 = (($104) + ($$9))|0;
 $114 = ($113>>>0)<($$9>>>0);
 $115 = $105 ? 2 : 1;
 $c1$3 = $114 ? $115 : $c1$2;
 $116 = HEAP32[$12>>2]|0;
 $117 = HEAP32[$56>>2]|0;
 $118 = (___muldi3(($117|0),0,($116|0),0)|0);
 $119 = tempRet0;
 $120 = (($110) + ($118))|0;
 $121 = ($120>>>0)<($118>>>0);
 $122 = $121&1;
 $$10 = (($122) + ($119))|0;
 $123 = (($113) + ($$10))|0;
 $124 = ($123>>>0)<($$10>>>0);
 $125 = $124&1;
 $c1$4 = (($125) + ($c1$3))|0;
 $126 = ((($r)) + 16|0);
 HEAP32[$126>>2] = $120;
 $127 = HEAP32[$23>>2]|0;
 $128 = HEAP32[$56>>2]|0;
 $129 = (___muldi3(($128|0),0,($127|0),0)|0);
 $130 = tempRet0;
 $131 = (($123) + ($129))|0;
 $132 = ($131>>>0)<($129>>>0);
 $133 = $132&1;
 $$11 = (($133) + ($130))|0;
 $134 = (($c1$4) + ($$11))|0;
 $135 = ($134>>>0)<($$11>>>0);
 $c2$3 = $135&1;
 $136 = HEAP32[$85>>2]|0;
 $137 = HEAP32[$44>>2]|0;
 $138 = (___muldi3(($137|0),0,($136|0),0)|0);
 $139 = tempRet0;
 $140 = (($131) + ($138))|0;
 $141 = ($140>>>0)<($138>>>0);
 $142 = $141&1;
 $$12 = (($142) + ($139))|0;
 $143 = (($134) + ($$12))|0;
 $144 = ($143>>>0)<($$12>>>0);
 $145 = $135 ? 2 : 1;
 $c2$4 = $144 ? $145 : $c2$3;
 $146 = ((($r)) + 20|0);
 HEAP32[$146>>2] = $140;
 $147 = HEAP32[$85>>2]|0;
 $148 = HEAP32[$56>>2]|0;
 $149 = (___muldi3(($148|0),0,($147|0),0)|0);
 $150 = tempRet0;
 $151 = (($143) + ($149))|0;
 $152 = ($151>>>0)<($149>>>0);
 $153 = $152&1;
 $$13 = (($c2$4) + ($150))|0;
 $154 = (($$13) + ($153))|0;
 $155 = ((($r)) + 24|0);
 HEAP32[$155>>2] = $151;
 $156 = ((($r)) + 28|0);
 HEAP32[$156>>2] = $154;
 return;
}
function _fips_bn_sqr_comba8($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$ = 0, $$$c2$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$c1$0 = 0, $$c1$10 = 0, $$c1$11 = 0, $$c1$13 = 0, $$c1$14 = 0, $$c1$16 = 0, $$c1$17 = 0, $$c1$19 = 0, $$c1$20 = 0, $$c1$23 = 0, $$c1$24 = 0, $$c1$26 = 0, $$c1$27 = 0;
 var $$c1$29 = 0, $$c1$30 = 0, $$c1$4 = 0, $$c1$5 = 0, $$c1$7 = 0, $$c1$8 = 0, $$c2$0 = 0, $$c2$10 = 0, $$c2$11 = 0, $$c2$14 = 0, $$c2$15 = 0, $$c2$17 = 0, $$c2$18 = 0, $$c2$2 = 0, $$c2$20 = 0, $$c2$21 = 0, $$c2$23 = 0, $$c2$24 = 0, $$c2$26 = 0, $$c2$27 = 0;
 var $$c2$4 = 0, $$c2$5 = 0, $$c2$7 = 0, $$c2$8 = 0, $$c3$1 = 0, $$c3$11 = 0, $$c3$12 = 0, $$c3$14 = 0, $$c3$15 = 0, $$c3$17 = 0, $$c3$18 = 0, $$c3$2 = 0, $$c3$20 = 0, $$c3$21 = 0, $$c3$23 = 0, $$c3$24 = 0, $$c3$27 = 0, $$c3$28 = 0, $$c3$4 = 0, $$c3$5 = 0;
 var $$c3$8 = 0, $$c3$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$0 = 0, $c1$1 = 0, $c1$10 = 0, $c1$11 = 0, $c1$13 = 0, $c1$14 = 0, $c1$16 = 0, $c1$17 = 0, $c1$19 = 0, $c1$20 = 0, $c1$23 = 0, $c1$24 = 0;
 var $c1$26 = 0, $c1$27 = 0, $c1$29 = 0, $c1$30 = 0, $c1$4 = 0, $c1$5 = 0, $c1$7 = 0, $c1$8 = 0, $c2$0 = 0, $c2$10 = 0, $c2$11 = 0, $c2$14 = 0, $c2$15 = 0, $c2$17 = 0, $c2$18 = 0, $c2$2 = 0, $c2$20 = 0, $c2$21 = 0, $c2$23 = 0, $c2$24 = 0;
 var $c2$26 = 0, $c2$27 = 0, $c2$4 = 0, $c2$5 = 0, $c2$7 = 0, $c2$8 = 0, $c3$1 = 0, $c3$11 = 0, $c3$12 = 0, $c3$14 = 0, $c3$15 = 0, $c3$17 = 0, $c3$18 = 0, $c3$2 = 0, $c3$20 = 0, $c3$21 = 0, $c3$23 = 0, $c3$24 = 0, $c3$27 = 0, $c3$28 = 0;
 var $c3$4 = 0, $c3$5 = 0, $c3$8 = 0, $c3$9 = 0, $t2$1 = 0, $t2$10 = 0, $t2$11 = 0, $t2$12 = 0, $t2$13 = 0, $t2$14 = 0, $t2$15 = 0, $t2$16 = 0, $t2$17 = 0, $t2$18 = 0, $t2$19 = 0, $t2$20 = 0, $t2$21 = 0, $t2$22 = 0, $t2$23 = 0, $t2$24 = 0;
 var $t2$25 = 0, $t2$26 = 0, $t2$27 = 0, $t2$28 = 0, $t2$29 = 0, $t2$3 = 0, $t2$30 = 0, $t2$31 = 0, $t2$32 = 0, $t2$33 = 0, $t2$34 = 0, $t2$35 = 0, $t2$4 = 0, $t2$5 = 0, $t2$6 = 0, $t2$7 = 0, $t2$8 = 0, $t2$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = (___muldi3(($0|0),0,($0|0),0)|0);
 $2 = tempRet0;
 HEAP32[$r>>2] = $1;
 $3 = ((($a)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$a>>2]|0;
 $6 = (___muldi3(($5|0),0,($4|0),0)|0);
 $7 = tempRet0;
 $8 = (_bitshift64Shl(($6|0),($7|0),1)|0);
 $9 = tempRet0;
 $10 = ($9>>>0)<($7>>>0);
 $11 = ($8>>>0)<($6>>>0);
 $12 = ($9|0)==($7|0);
 $13 = $12 & $11;
 $14 = $10 | $13;
 $c1$0 = $14&1;
 $15 = (_bitshift64Lshr(($6|0),($7|0),31)|0);
 $16 = tempRet0;
 $17 = (($8) + ($2))|0;
 $18 = ($17>>>0)<($8>>>0);
 if ($18) {
  $19 = (($15) + 1)|0;
  $20 = ($19|0)==(0);
  $21 = $14 ? 2 : 1;
  $$c1$0 = $20 ? $21 : $c1$0;
  $c1$1 = $$c1$0;$t2$1 = $19;
 } else {
  $c1$1 = $c1$0;$t2$1 = $15;
 }
 $22 = ((($r)) + 4|0);
 HEAP32[$22>>2] = $17;
 $23 = HEAP32[$3>>2]|0;
 $24 = (___muldi3(($23|0),0,($23|0),0)|0);
 $25 = tempRet0;
 $26 = (($24) + ($t2$1))|0;
 $27 = ($26>>>0)<($24>>>0);
 $28 = $27&1;
 $$ = (($28) + ($25))|0;
 $29 = (($$) + ($c1$1))|0;
 $30 = ($29>>>0)<($$>>>0);
 $c2$0 = $30&1;
 $31 = ((($a)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$a>>2]|0;
 $34 = (___muldi3(($33|0),0,($32|0),0)|0);
 $35 = tempRet0;
 $36 = (_bitshift64Shl(($34|0),($35|0),1)|0);
 $37 = tempRet0;
 $38 = ($37>>>0)<($35>>>0);
 $39 = ($36>>>0)<($34>>>0);
 $40 = ($37|0)==($35|0);
 $41 = $40 & $39;
 $42 = $38 | $41;
 $43 = $30 ? 2 : 1;
 $$c2$0 = $42 ? $43 : $c2$0;
 $44 = (_bitshift64Lshr(($34|0),($35|0),31)|0);
 $45 = tempRet0;
 $46 = (($36) + ($26))|0;
 $47 = ($46>>>0)<($36>>>0);
 if ($47) {
  $48 = (($44) + 1)|0;
  $49 = ($48|0)==(0);
  $50 = $49&1;
  $$$c2$0 = (($$c2$0) + ($50))|0;
  $c2$2 = $$$c2$0;$t2$3 = $48;
 } else {
  $c2$2 = $$c2$0;$t2$3 = $44;
 }
 $51 = (($t2$3) + ($29))|0;
 $52 = ($51>>>0)<($t2$3>>>0);
 $53 = $52&1;
 $$c2$2 = (($53) + ($c2$2))|0;
 $54 = ((($r)) + 8|0);
 HEAP32[$54>>2] = $46;
 $55 = ((($a)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$a>>2]|0;
 $58 = (___muldi3(($57|0),0,($56|0),0)|0);
 $59 = tempRet0;
 $60 = (_bitshift64Shl(($58|0),($59|0),1)|0);
 $61 = tempRet0;
 $62 = ($61>>>0)<($59>>>0);
 $63 = ($60>>>0)<($58>>>0);
 $64 = ($61|0)==($59|0);
 $65 = $64 & $63;
 $66 = $62 | $65;
 $c3$1 = $66&1;
 $67 = (_bitshift64Lshr(($58|0),($59|0),31)|0);
 $68 = tempRet0;
 $69 = (($60) + ($51))|0;
 $70 = ($69>>>0)<($60>>>0);
 if ($70) {
  $71 = (($67) + 1)|0;
  $72 = ($71|0)==(0);
  $73 = $66 ? 2 : 1;
  $$c3$1 = $72 ? $73 : $c3$1;
  $c3$2 = $$c3$1;$t2$4 = $71;
 } else {
  $c3$2 = $c3$1;$t2$4 = $67;
 }
 $74 = (($$c2$2) + ($t2$4))|0;
 $75 = ($74>>>0)<($t2$4>>>0);
 $76 = $75&1;
 $$c3$2 = (($76) + ($c3$2))|0;
 $77 = HEAP32[$31>>2]|0;
 $78 = HEAP32[$3>>2]|0;
 $79 = (___muldi3(($78|0),0,($77|0),0)|0);
 $80 = tempRet0;
 $81 = (_bitshift64Shl(($79|0),($80|0),1)|0);
 $82 = tempRet0;
 $83 = ($82>>>0)<($80>>>0);
 $84 = ($81>>>0)<($79>>>0);
 $85 = ($82|0)==($80|0);
 $86 = $85 & $84;
 $87 = $83 | $86;
 $88 = $87&1;
 $c3$4 = (($$c3$2) + ($88))|0;
 $89 = (_bitshift64Lshr(($79|0),($80|0),31)|0);
 $90 = tempRet0;
 $91 = (($81) + ($69))|0;
 $92 = ($91>>>0)<($81>>>0);
 if ($92) {
  $93 = (($89) + 1)|0;
  $94 = ($93|0)==(0);
  $95 = $94&1;
  $$c3$4 = (($95) + ($c3$4))|0;
  $c3$5 = $$c3$4;$t2$5 = $93;
 } else {
  $c3$5 = $c3$4;$t2$5 = $89;
 }
 $96 = (($t2$5) + ($74))|0;
 $97 = ($96>>>0)<($t2$5>>>0);
 $98 = $97&1;
 $$c3$5 = (($98) + ($c3$5))|0;
 $99 = ((($r)) + 12|0);
 HEAP32[$99>>2] = $91;
 $100 = HEAP32[$31>>2]|0;
 $101 = (___muldi3(($100|0),0,($100|0),0)|0);
 $102 = tempRet0;
 $103 = (($101) + ($96))|0;
 $104 = ($103>>>0)<($101>>>0);
 $105 = $104&1;
 $t2$6 = (($105) + ($102))|0;
 $106 = (($$c3$5) + ($t2$6))|0;
 $107 = ($106>>>0)<($t2$6>>>0);
 $$1 = $107&1;
 $108 = HEAP32[$55>>2]|0;
 $109 = HEAP32[$3>>2]|0;
 $110 = (___muldi3(($109|0),0,($108|0),0)|0);
 $111 = tempRet0;
 $112 = (_bitshift64Shl(($110|0),($111|0),1)|0);
 $113 = tempRet0;
 $114 = ($113>>>0)<($111>>>0);
 $115 = ($112>>>0)<($110>>>0);
 $116 = ($113|0)==($111|0);
 $117 = $116 & $115;
 $118 = $114 | $117;
 $119 = $107 ? 2 : 1;
 $c1$4 = $118 ? $119 : $$1;
 $120 = (_bitshift64Lshr(($110|0),($111|0),31)|0);
 $121 = tempRet0;
 $122 = (($112) + ($103))|0;
 $123 = ($122>>>0)<($112>>>0);
 if ($123) {
  $124 = (($120) + 1)|0;
  $125 = ($124|0)==(0);
  $126 = $125&1;
  $$c1$4 = (($c1$4) + ($126))|0;
  $c1$5 = $$c1$4;$t2$7 = $124;
 } else {
  $c1$5 = $c1$4;$t2$7 = $120;
 }
 $127 = (($t2$7) + ($106))|0;
 $128 = ($127>>>0)<($t2$7>>>0);
 $129 = $128&1;
 $$c1$5 = (($129) + ($c1$5))|0;
 $130 = ((($a)) + 16|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = HEAP32[$a>>2]|0;
 $133 = (___muldi3(($132|0),0,($131|0),0)|0);
 $134 = tempRet0;
 $135 = (_bitshift64Shl(($133|0),($134|0),1)|0);
 $136 = tempRet0;
 $137 = ($136>>>0)<($134>>>0);
 $138 = ($135>>>0)<($133>>>0);
 $139 = ($136|0)==($134|0);
 $140 = $139 & $138;
 $141 = $137 | $140;
 $142 = $141&1;
 $c1$7 = (($$c1$5) + ($142))|0;
 $143 = (_bitshift64Lshr(($133|0),($134|0),31)|0);
 $144 = tempRet0;
 $145 = (($135) + ($122))|0;
 $146 = ($145>>>0)<($135>>>0);
 if ($146) {
  $147 = (($143) + 1)|0;
  $148 = ($147|0)==(0);
  $149 = $148&1;
  $$c1$7 = (($149) + ($c1$7))|0;
  $c1$8 = $$c1$7;$t2$8 = $147;
 } else {
  $c1$8 = $c1$7;$t2$8 = $143;
 }
 $150 = (($t2$8) + ($127))|0;
 $151 = ($150>>>0)<($t2$8>>>0);
 $152 = $151&1;
 $$c1$8 = (($152) + ($c1$8))|0;
 $153 = ((($r)) + 16|0);
 HEAP32[$153>>2] = $145;
 $154 = ((($a)) + 20|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$a>>2]|0;
 $157 = (___muldi3(($156|0),0,($155|0),0)|0);
 $158 = tempRet0;
 $159 = (_bitshift64Shl(($157|0),($158|0),1)|0);
 $160 = tempRet0;
 $161 = ($160>>>0)<($158>>>0);
 $162 = ($159>>>0)<($157>>>0);
 $163 = ($160|0)==($158|0);
 $164 = $163 & $162;
 $165 = $161 | $164;
 $c2$4 = $165&1;
 $166 = (_bitshift64Lshr(($157|0),($158|0),31)|0);
 $167 = tempRet0;
 $168 = (($159) + ($150))|0;
 $169 = ($168>>>0)<($159>>>0);
 if ($169) {
  $170 = (($166) + 1)|0;
  $171 = ($170|0)==(0);
  $172 = $165 ? 2 : 1;
  $$c2$4 = $171 ? $172 : $c2$4;
  $c2$5 = $$c2$4;$t2$9 = $170;
 } else {
  $c2$5 = $c2$4;$t2$9 = $166;
 }
 $173 = (($$c1$8) + ($t2$9))|0;
 $174 = ($173>>>0)<($t2$9>>>0);
 $175 = $174&1;
 $$c2$5 = (($175) + ($c2$5))|0;
 $176 = HEAP32[$130>>2]|0;
 $177 = HEAP32[$3>>2]|0;
 $178 = (___muldi3(($177|0),0,($176|0),0)|0);
 $179 = tempRet0;
 $180 = (_bitshift64Shl(($178|0),($179|0),1)|0);
 $181 = tempRet0;
 $182 = ($181>>>0)<($179>>>0);
 $183 = ($180>>>0)<($178>>>0);
 $184 = ($181|0)==($179|0);
 $185 = $184 & $183;
 $186 = $182 | $185;
 $187 = $186&1;
 $c2$7 = (($$c2$5) + ($187))|0;
 $188 = (_bitshift64Lshr(($178|0),($179|0),31)|0);
 $189 = tempRet0;
 $190 = (($180) + ($168))|0;
 $191 = ($190>>>0)<($180>>>0);
 if ($191) {
  $192 = (($188) + 1)|0;
  $193 = ($192|0)==(0);
  $194 = $193&1;
  $$c2$7 = (($194) + ($c2$7))|0;
  $c2$8 = $$c2$7;$t2$10 = $192;
 } else {
  $c2$8 = $c2$7;$t2$10 = $188;
 }
 $195 = (($t2$10) + ($173))|0;
 $196 = ($195>>>0)<($t2$10>>>0);
 $197 = $196&1;
 $$c2$8 = (($197) + ($c2$8))|0;
 $198 = HEAP32[$55>>2]|0;
 $199 = HEAP32[$31>>2]|0;
 $200 = (___muldi3(($199|0),0,($198|0),0)|0);
 $201 = tempRet0;
 $202 = (_bitshift64Shl(($200|0),($201|0),1)|0);
 $203 = tempRet0;
 $204 = ($203>>>0)<($201>>>0);
 $205 = ($202>>>0)<($200>>>0);
 $206 = ($203|0)==($201|0);
 $207 = $206 & $205;
 $208 = $204 | $207;
 $209 = $208&1;
 $c2$10 = (($$c2$8) + ($209))|0;
 $210 = (_bitshift64Lshr(($200|0),($201|0),31)|0);
 $211 = tempRet0;
 $212 = (($202) + ($190))|0;
 $213 = ($212>>>0)<($202>>>0);
 if ($213) {
  $214 = (($210) + 1)|0;
  $215 = ($214|0)==(0);
  $216 = $215&1;
  $$c2$10 = (($216) + ($c2$10))|0;
  $c2$11 = $$c2$10;$t2$11 = $214;
 } else {
  $c2$11 = $c2$10;$t2$11 = $210;
 }
 $217 = (($t2$11) + ($195))|0;
 $218 = ($217>>>0)<($t2$11>>>0);
 $219 = $218&1;
 $$c2$11 = (($219) + ($c2$11))|0;
 $220 = ((($r)) + 20|0);
 HEAP32[$220>>2] = $212;
 $221 = HEAP32[$55>>2]|0;
 $222 = (___muldi3(($221|0),0,($221|0),0)|0);
 $223 = tempRet0;
 $224 = (($222) + ($217))|0;
 $225 = ($224>>>0)<($222>>>0);
 $226 = $225&1;
 $t2$12 = (($226) + ($223))|0;
 $227 = (($$c2$11) + ($t2$12))|0;
 $228 = ($227>>>0)<($t2$12>>>0);
 $$2 = $228&1;
 $229 = HEAP32[$130>>2]|0;
 $230 = HEAP32[$31>>2]|0;
 $231 = (___muldi3(($230|0),0,($229|0),0)|0);
 $232 = tempRet0;
 $233 = (_bitshift64Shl(($231|0),($232|0),1)|0);
 $234 = tempRet0;
 $235 = ($234>>>0)<($232>>>0);
 $236 = ($233>>>0)<($231>>>0);
 $237 = ($234|0)==($232|0);
 $238 = $237 & $236;
 $239 = $235 | $238;
 $240 = $228 ? 2 : 1;
 $c3$8 = $239 ? $240 : $$2;
 $241 = (_bitshift64Lshr(($231|0),($232|0),31)|0);
 $242 = tempRet0;
 $243 = (($233) + ($224))|0;
 $244 = ($243>>>0)<($233>>>0);
 if ($244) {
  $245 = (($241) + 1)|0;
  $246 = ($245|0)==(0);
  $247 = $246&1;
  $$c3$8 = (($c3$8) + ($247))|0;
  $c3$9 = $$c3$8;$t2$13 = $245;
 } else {
  $c3$9 = $c3$8;$t2$13 = $241;
 }
 $248 = (($t2$13) + ($227))|0;
 $249 = ($248>>>0)<($t2$13>>>0);
 $250 = $249&1;
 $$c3$9 = (($250) + ($c3$9))|0;
 $251 = HEAP32[$154>>2]|0;
 $252 = HEAP32[$3>>2]|0;
 $253 = (___muldi3(($252|0),0,($251|0),0)|0);
 $254 = tempRet0;
 $255 = (_bitshift64Shl(($253|0),($254|0),1)|0);
 $256 = tempRet0;
 $257 = ($256>>>0)<($254>>>0);
 $258 = ($255>>>0)<($253>>>0);
 $259 = ($256|0)==($254|0);
 $260 = $259 & $258;
 $261 = $257 | $260;
 $262 = $261&1;
 $c3$11 = (($$c3$9) + ($262))|0;
 $263 = (_bitshift64Lshr(($253|0),($254|0),31)|0);
 $264 = tempRet0;
 $265 = (($255) + ($243))|0;
 $266 = ($265>>>0)<($255>>>0);
 if ($266) {
  $267 = (($263) + 1)|0;
  $268 = ($267|0)==(0);
  $269 = $268&1;
  $$c3$11 = (($269) + ($c3$11))|0;
  $c3$12 = $$c3$11;$t2$14 = $267;
 } else {
  $c3$12 = $c3$11;$t2$14 = $263;
 }
 $270 = (($t2$14) + ($248))|0;
 $271 = ($270>>>0)<($t2$14>>>0);
 $272 = $271&1;
 $$c3$12 = (($272) + ($c3$12))|0;
 $273 = ((($a)) + 24|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = HEAP32[$a>>2]|0;
 $276 = (___muldi3(($275|0),0,($274|0),0)|0);
 $277 = tempRet0;
 $278 = (_bitshift64Shl(($276|0),($277|0),1)|0);
 $279 = tempRet0;
 $280 = ($279>>>0)<($277>>>0);
 $281 = ($278>>>0)<($276>>>0);
 $282 = ($279|0)==($277|0);
 $283 = $282 & $281;
 $284 = $280 | $283;
 $285 = $284&1;
 $c3$14 = (($$c3$12) + ($285))|0;
 $286 = (_bitshift64Lshr(($276|0),($277|0),31)|0);
 $287 = tempRet0;
 $288 = (($278) + ($265))|0;
 $289 = ($288>>>0)<($278>>>0);
 if ($289) {
  $290 = (($286) + 1)|0;
  $291 = ($290|0)==(0);
  $292 = $291&1;
  $$c3$14 = (($292) + ($c3$14))|0;
  $c3$15 = $$c3$14;$t2$15 = $290;
 } else {
  $c3$15 = $c3$14;$t2$15 = $286;
 }
 $293 = (($t2$15) + ($270))|0;
 $294 = ($293>>>0)<($t2$15>>>0);
 $295 = $294&1;
 $$c3$15 = (($295) + ($c3$15))|0;
 $296 = ((($r)) + 24|0);
 HEAP32[$296>>2] = $288;
 $297 = ((($a)) + 28|0);
 $298 = HEAP32[$297>>2]|0;
 $299 = HEAP32[$a>>2]|0;
 $300 = (___muldi3(($299|0),0,($298|0),0)|0);
 $301 = tempRet0;
 $302 = (_bitshift64Shl(($300|0),($301|0),1)|0);
 $303 = tempRet0;
 $304 = ($303>>>0)<($301>>>0);
 $305 = ($302>>>0)<($300>>>0);
 $306 = ($303|0)==($301|0);
 $307 = $306 & $305;
 $308 = $304 | $307;
 $c1$10 = $308&1;
 $309 = (_bitshift64Lshr(($300|0),($301|0),31)|0);
 $310 = tempRet0;
 $311 = (($302) + ($293))|0;
 $312 = ($311>>>0)<($302>>>0);
 if ($312) {
  $313 = (($309) + 1)|0;
  $314 = ($313|0)==(0);
  $315 = $308 ? 2 : 1;
  $$c1$10 = $314 ? $315 : $c1$10;
  $c1$11 = $$c1$10;$t2$16 = $313;
 } else {
  $c1$11 = $c1$10;$t2$16 = $309;
 }
 $316 = (($$c3$15) + ($t2$16))|0;
 $317 = ($316>>>0)<($t2$16>>>0);
 $318 = $317&1;
 $$c1$11 = (($318) + ($c1$11))|0;
 $319 = HEAP32[$273>>2]|0;
 $320 = HEAP32[$3>>2]|0;
 $321 = (___muldi3(($320|0),0,($319|0),0)|0);
 $322 = tempRet0;
 $323 = (_bitshift64Shl(($321|0),($322|0),1)|0);
 $324 = tempRet0;
 $325 = ($324>>>0)<($322>>>0);
 $326 = ($323>>>0)<($321>>>0);
 $327 = ($324|0)==($322|0);
 $328 = $327 & $326;
 $329 = $325 | $328;
 $330 = $329&1;
 $c1$13 = (($$c1$11) + ($330))|0;
 $331 = (_bitshift64Lshr(($321|0),($322|0),31)|0);
 $332 = tempRet0;
 $333 = (($323) + ($311))|0;
 $334 = ($333>>>0)<($323>>>0);
 if ($334) {
  $335 = (($331) + 1)|0;
  $336 = ($335|0)==(0);
  $337 = $336&1;
  $$c1$13 = (($337) + ($c1$13))|0;
  $c1$14 = $$c1$13;$t2$17 = $335;
 } else {
  $c1$14 = $c1$13;$t2$17 = $331;
 }
 $338 = (($t2$17) + ($316))|0;
 $339 = ($338>>>0)<($t2$17>>>0);
 $340 = $339&1;
 $$c1$14 = (($340) + ($c1$14))|0;
 $341 = HEAP32[$154>>2]|0;
 $342 = HEAP32[$31>>2]|0;
 $343 = (___muldi3(($342|0),0,($341|0),0)|0);
 $344 = tempRet0;
 $345 = (_bitshift64Shl(($343|0),($344|0),1)|0);
 $346 = tempRet0;
 $347 = ($346>>>0)<($344>>>0);
 $348 = ($345>>>0)<($343>>>0);
 $349 = ($346|0)==($344|0);
 $350 = $349 & $348;
 $351 = $347 | $350;
 $352 = $351&1;
 $c1$16 = (($$c1$14) + ($352))|0;
 $353 = (_bitshift64Lshr(($343|0),($344|0),31)|0);
 $354 = tempRet0;
 $355 = (($345) + ($333))|0;
 $356 = ($355>>>0)<($345>>>0);
 if ($356) {
  $357 = (($353) + 1)|0;
  $358 = ($357|0)==(0);
  $359 = $358&1;
  $$c1$16 = (($359) + ($c1$16))|0;
  $c1$17 = $$c1$16;$t2$18 = $357;
 } else {
  $c1$17 = $c1$16;$t2$18 = $353;
 }
 $360 = (($t2$18) + ($338))|0;
 $361 = ($360>>>0)<($t2$18>>>0);
 $362 = $361&1;
 $$c1$17 = (($362) + ($c1$17))|0;
 $363 = HEAP32[$130>>2]|0;
 $364 = HEAP32[$55>>2]|0;
 $365 = (___muldi3(($364|0),0,($363|0),0)|0);
 $366 = tempRet0;
 $367 = (_bitshift64Shl(($365|0),($366|0),1)|0);
 $368 = tempRet0;
 $369 = ($368>>>0)<($366>>>0);
 $370 = ($367>>>0)<($365>>>0);
 $371 = ($368|0)==($366|0);
 $372 = $371 & $370;
 $373 = $369 | $372;
 $374 = $373&1;
 $c1$19 = (($$c1$17) + ($374))|0;
 $375 = (_bitshift64Lshr(($365|0),($366|0),31)|0);
 $376 = tempRet0;
 $377 = (($367) + ($355))|0;
 $378 = ($377>>>0)<($367>>>0);
 if ($378) {
  $379 = (($375) + 1)|0;
  $380 = ($379|0)==(0);
  $381 = $380&1;
  $$c1$19 = (($381) + ($c1$19))|0;
  $c1$20 = $$c1$19;$t2$19 = $379;
 } else {
  $c1$20 = $c1$19;$t2$19 = $375;
 }
 $382 = (($t2$19) + ($360))|0;
 $383 = ($382>>>0)<($t2$19>>>0);
 $384 = $383&1;
 $$c1$20 = (($384) + ($c1$20))|0;
 $385 = ((($r)) + 28|0);
 HEAP32[$385>>2] = $377;
 $386 = HEAP32[$130>>2]|0;
 $387 = (___muldi3(($386|0),0,($386|0),0)|0);
 $388 = tempRet0;
 $389 = (($387) + ($382))|0;
 $390 = ($389>>>0)<($387>>>0);
 $391 = $390&1;
 $t2$20 = (($391) + ($388))|0;
 $392 = (($$c1$20) + ($t2$20))|0;
 $393 = ($392>>>0)<($t2$20>>>0);
 $$3 = $393&1;
 $394 = HEAP32[$154>>2]|0;
 $395 = HEAP32[$55>>2]|0;
 $396 = (___muldi3(($395|0),0,($394|0),0)|0);
 $397 = tempRet0;
 $398 = (_bitshift64Shl(($396|0),($397|0),1)|0);
 $399 = tempRet0;
 $400 = ($399>>>0)<($397>>>0);
 $401 = ($398>>>0)<($396>>>0);
 $402 = ($399|0)==($397|0);
 $403 = $402 & $401;
 $404 = $400 | $403;
 $405 = $393 ? 2 : 1;
 $c2$14 = $404 ? $405 : $$3;
 $406 = (_bitshift64Lshr(($396|0),($397|0),31)|0);
 $407 = tempRet0;
 $408 = (($398) + ($389))|0;
 $409 = ($408>>>0)<($398>>>0);
 if ($409) {
  $410 = (($406) + 1)|0;
  $411 = ($410|0)==(0);
  $412 = $411&1;
  $$c2$14 = (($c2$14) + ($412))|0;
  $c2$15 = $$c2$14;$t2$21 = $410;
 } else {
  $c2$15 = $c2$14;$t2$21 = $406;
 }
 $413 = (($t2$21) + ($392))|0;
 $414 = ($413>>>0)<($t2$21>>>0);
 $415 = $414&1;
 $$c2$15 = (($415) + ($c2$15))|0;
 $416 = HEAP32[$273>>2]|0;
 $417 = HEAP32[$31>>2]|0;
 $418 = (___muldi3(($417|0),0,($416|0),0)|0);
 $419 = tempRet0;
 $420 = (_bitshift64Shl(($418|0),($419|0),1)|0);
 $421 = tempRet0;
 $422 = ($421>>>0)<($419>>>0);
 $423 = ($420>>>0)<($418>>>0);
 $424 = ($421|0)==($419|0);
 $425 = $424 & $423;
 $426 = $422 | $425;
 $427 = $426&1;
 $c2$17 = (($$c2$15) + ($427))|0;
 $428 = (_bitshift64Lshr(($418|0),($419|0),31)|0);
 $429 = tempRet0;
 $430 = (($420) + ($408))|0;
 $431 = ($430>>>0)<($420>>>0);
 if ($431) {
  $432 = (($428) + 1)|0;
  $433 = ($432|0)==(0);
  $434 = $433&1;
  $$c2$17 = (($434) + ($c2$17))|0;
  $c2$18 = $$c2$17;$t2$22 = $432;
 } else {
  $c2$18 = $c2$17;$t2$22 = $428;
 }
 $435 = (($t2$22) + ($413))|0;
 $436 = ($435>>>0)<($t2$22>>>0);
 $437 = $436&1;
 $$c2$18 = (($437) + ($c2$18))|0;
 $438 = HEAP32[$297>>2]|0;
 $439 = HEAP32[$3>>2]|0;
 $440 = (___muldi3(($439|0),0,($438|0),0)|0);
 $441 = tempRet0;
 $442 = (_bitshift64Shl(($440|0),($441|0),1)|0);
 $443 = tempRet0;
 $444 = ($443>>>0)<($441>>>0);
 $445 = ($442>>>0)<($440>>>0);
 $446 = ($443|0)==($441|0);
 $447 = $446 & $445;
 $448 = $444 | $447;
 $449 = $448&1;
 $c2$20 = (($$c2$18) + ($449))|0;
 $450 = (_bitshift64Lshr(($440|0),($441|0),31)|0);
 $451 = tempRet0;
 $452 = (($442) + ($430))|0;
 $453 = ($452>>>0)<($442>>>0);
 if ($453) {
  $454 = (($450) + 1)|0;
  $455 = ($454|0)==(0);
  $456 = $455&1;
  $$c2$20 = (($456) + ($c2$20))|0;
  $c2$21 = $$c2$20;$t2$23 = $454;
 } else {
  $c2$21 = $c2$20;$t2$23 = $450;
 }
 $457 = (($t2$23) + ($435))|0;
 $458 = ($457>>>0)<($t2$23>>>0);
 $459 = $458&1;
 $$c2$21 = (($459) + ($c2$21))|0;
 $460 = ((($r)) + 32|0);
 HEAP32[$460>>2] = $452;
 $461 = HEAP32[$297>>2]|0;
 $462 = HEAP32[$31>>2]|0;
 $463 = (___muldi3(($462|0),0,($461|0),0)|0);
 $464 = tempRet0;
 $465 = (_bitshift64Shl(($463|0),($464|0),1)|0);
 $466 = tempRet0;
 $467 = ($466>>>0)<($464>>>0);
 $468 = ($465>>>0)<($463>>>0);
 $469 = ($466|0)==($464|0);
 $470 = $469 & $468;
 $471 = $467 | $470;
 $c3$17 = $471&1;
 $472 = (_bitshift64Lshr(($463|0),($464|0),31)|0);
 $473 = tempRet0;
 $474 = (($465) + ($457))|0;
 $475 = ($474>>>0)<($465>>>0);
 if ($475) {
  $476 = (($472) + 1)|0;
  $477 = ($476|0)==(0);
  $478 = $471 ? 2 : 1;
  $$c3$17 = $477 ? $478 : $c3$17;
  $c3$18 = $$c3$17;$t2$24 = $476;
 } else {
  $c3$18 = $c3$17;$t2$24 = $472;
 }
 $479 = (($$c2$21) + ($t2$24))|0;
 $480 = ($479>>>0)<($t2$24>>>0);
 $481 = $480&1;
 $$c3$18 = (($481) + ($c3$18))|0;
 $482 = HEAP32[$273>>2]|0;
 $483 = HEAP32[$55>>2]|0;
 $484 = (___muldi3(($483|0),0,($482|0),0)|0);
 $485 = tempRet0;
 $486 = (_bitshift64Shl(($484|0),($485|0),1)|0);
 $487 = tempRet0;
 $488 = ($487>>>0)<($485>>>0);
 $489 = ($486>>>0)<($484>>>0);
 $490 = ($487|0)==($485|0);
 $491 = $490 & $489;
 $492 = $488 | $491;
 $493 = $492&1;
 $c3$20 = (($$c3$18) + ($493))|0;
 $494 = (_bitshift64Lshr(($484|0),($485|0),31)|0);
 $495 = tempRet0;
 $496 = (($486) + ($474))|0;
 $497 = ($496>>>0)<($486>>>0);
 if ($497) {
  $498 = (($494) + 1)|0;
  $499 = ($498|0)==(0);
  $500 = $499&1;
  $$c3$20 = (($500) + ($c3$20))|0;
  $c3$21 = $$c3$20;$t2$25 = $498;
 } else {
  $c3$21 = $c3$20;$t2$25 = $494;
 }
 $501 = (($t2$25) + ($479))|0;
 $502 = ($501>>>0)<($t2$25>>>0);
 $503 = $502&1;
 $$c3$21 = (($503) + ($c3$21))|0;
 $504 = HEAP32[$154>>2]|0;
 $505 = HEAP32[$130>>2]|0;
 $506 = (___muldi3(($505|0),0,($504|0),0)|0);
 $507 = tempRet0;
 $508 = (_bitshift64Shl(($506|0),($507|0),1)|0);
 $509 = tempRet0;
 $510 = ($509>>>0)<($507>>>0);
 $511 = ($508>>>0)<($506>>>0);
 $512 = ($509|0)==($507|0);
 $513 = $512 & $511;
 $514 = $510 | $513;
 $515 = $514&1;
 $c3$23 = (($$c3$21) + ($515))|0;
 $516 = (_bitshift64Lshr(($506|0),($507|0),31)|0);
 $517 = tempRet0;
 $518 = (($508) + ($496))|0;
 $519 = ($518>>>0)<($508>>>0);
 if ($519) {
  $520 = (($516) + 1)|0;
  $521 = ($520|0)==(0);
  $522 = $521&1;
  $$c3$23 = (($522) + ($c3$23))|0;
  $c3$24 = $$c3$23;$t2$26 = $520;
 } else {
  $c3$24 = $c3$23;$t2$26 = $516;
 }
 $523 = (($t2$26) + ($501))|0;
 $524 = ($523>>>0)<($t2$26>>>0);
 $525 = $524&1;
 $$c3$24 = (($525) + ($c3$24))|0;
 $526 = ((($r)) + 36|0);
 HEAP32[$526>>2] = $518;
 $527 = HEAP32[$154>>2]|0;
 $528 = (___muldi3(($527|0),0,($527|0),0)|0);
 $529 = tempRet0;
 $530 = (($528) + ($523))|0;
 $531 = ($530>>>0)<($528>>>0);
 $532 = $531&1;
 $t2$27 = (($532) + ($529))|0;
 $533 = (($$c3$24) + ($t2$27))|0;
 $534 = ($533>>>0)<($t2$27>>>0);
 $$4 = $534&1;
 $535 = HEAP32[$273>>2]|0;
 $536 = HEAP32[$130>>2]|0;
 $537 = (___muldi3(($536|0),0,($535|0),0)|0);
 $538 = tempRet0;
 $539 = (_bitshift64Shl(($537|0),($538|0),1)|0);
 $540 = tempRet0;
 $541 = ($540>>>0)<($538>>>0);
 $542 = ($539>>>0)<($537>>>0);
 $543 = ($540|0)==($538|0);
 $544 = $543 & $542;
 $545 = $541 | $544;
 $546 = $534 ? 2 : 1;
 $c1$23 = $545 ? $546 : $$4;
 $547 = (_bitshift64Lshr(($537|0),($538|0),31)|0);
 $548 = tempRet0;
 $549 = (($539) + ($530))|0;
 $550 = ($549>>>0)<($539>>>0);
 if ($550) {
  $551 = (($547) + 1)|0;
  $552 = ($551|0)==(0);
  $553 = $552&1;
  $$c1$23 = (($c1$23) + ($553))|0;
  $c1$24 = $$c1$23;$t2$28 = $551;
 } else {
  $c1$24 = $c1$23;$t2$28 = $547;
 }
 $554 = (($t2$28) + ($533))|0;
 $555 = ($554>>>0)<($t2$28>>>0);
 $556 = $555&1;
 $$c1$24 = (($556) + ($c1$24))|0;
 $557 = HEAP32[$297>>2]|0;
 $558 = HEAP32[$55>>2]|0;
 $559 = (___muldi3(($558|0),0,($557|0),0)|0);
 $560 = tempRet0;
 $561 = (_bitshift64Shl(($559|0),($560|0),1)|0);
 $562 = tempRet0;
 $563 = ($562>>>0)<($560>>>0);
 $564 = ($561>>>0)<($559>>>0);
 $565 = ($562|0)==($560|0);
 $566 = $565 & $564;
 $567 = $563 | $566;
 $568 = $567&1;
 $c1$26 = (($$c1$24) + ($568))|0;
 $569 = (_bitshift64Lshr(($559|0),($560|0),31)|0);
 $570 = tempRet0;
 $571 = (($561) + ($549))|0;
 $572 = ($571>>>0)<($561>>>0);
 if ($572) {
  $573 = (($569) + 1)|0;
  $574 = ($573|0)==(0);
  $575 = $574&1;
  $$c1$26 = (($575) + ($c1$26))|0;
  $c1$27 = $$c1$26;$t2$29 = $573;
 } else {
  $c1$27 = $c1$26;$t2$29 = $569;
 }
 $576 = (($t2$29) + ($554))|0;
 $577 = ($576>>>0)<($t2$29>>>0);
 $578 = $577&1;
 $$c1$27 = (($578) + ($c1$27))|0;
 $579 = ((($r)) + 40|0);
 HEAP32[$579>>2] = $571;
 $580 = HEAP32[$297>>2]|0;
 $581 = HEAP32[$130>>2]|0;
 $582 = (___muldi3(($581|0),0,($580|0),0)|0);
 $583 = tempRet0;
 $584 = (_bitshift64Shl(($582|0),($583|0),1)|0);
 $585 = tempRet0;
 $586 = ($585>>>0)<($583>>>0);
 $587 = ($584>>>0)<($582>>>0);
 $588 = ($585|0)==($583|0);
 $589 = $588 & $587;
 $590 = $586 | $589;
 $c2$23 = $590&1;
 $591 = (_bitshift64Lshr(($582|0),($583|0),31)|0);
 $592 = tempRet0;
 $593 = (($584) + ($576))|0;
 $594 = ($593>>>0)<($584>>>0);
 if ($594) {
  $595 = (($591) + 1)|0;
  $596 = ($595|0)==(0);
  $597 = $590 ? 2 : 1;
  $$c2$23 = $596 ? $597 : $c2$23;
  $c2$24 = $$c2$23;$t2$30 = $595;
 } else {
  $c2$24 = $c2$23;$t2$30 = $591;
 }
 $598 = (($$c1$27) + ($t2$30))|0;
 $599 = ($598>>>0)<($t2$30>>>0);
 $600 = $599&1;
 $$c2$24 = (($600) + ($c2$24))|0;
 $601 = HEAP32[$273>>2]|0;
 $602 = HEAP32[$154>>2]|0;
 $603 = (___muldi3(($602|0),0,($601|0),0)|0);
 $604 = tempRet0;
 $605 = (_bitshift64Shl(($603|0),($604|0),1)|0);
 $606 = tempRet0;
 $607 = ($606>>>0)<($604>>>0);
 $608 = ($605>>>0)<($603>>>0);
 $609 = ($606|0)==($604|0);
 $610 = $609 & $608;
 $611 = $607 | $610;
 $612 = $611&1;
 $c2$26 = (($$c2$24) + ($612))|0;
 $613 = (_bitshift64Lshr(($603|0),($604|0),31)|0);
 $614 = tempRet0;
 $615 = (($605) + ($593))|0;
 $616 = ($615>>>0)<($605>>>0);
 if ($616) {
  $617 = (($613) + 1)|0;
  $618 = ($617|0)==(0);
  $619 = $618&1;
  $$c2$26 = (($619) + ($c2$26))|0;
  $c2$27 = $$c2$26;$t2$31 = $617;
 } else {
  $c2$27 = $c2$26;$t2$31 = $613;
 }
 $620 = (($t2$31) + ($598))|0;
 $621 = ($620>>>0)<($t2$31>>>0);
 $622 = $621&1;
 $$c2$27 = (($622) + ($c2$27))|0;
 $623 = ((($r)) + 44|0);
 HEAP32[$623>>2] = $615;
 $624 = HEAP32[$273>>2]|0;
 $625 = (___muldi3(($624|0),0,($624|0),0)|0);
 $626 = tempRet0;
 $627 = (($625) + ($620))|0;
 $628 = ($627>>>0)<($625>>>0);
 $629 = $628&1;
 $t2$32 = (($629) + ($626))|0;
 $630 = (($$c2$27) + ($t2$32))|0;
 $631 = ($630>>>0)<($t2$32>>>0);
 $$5 = $631&1;
 $632 = HEAP32[$297>>2]|0;
 $633 = HEAP32[$154>>2]|0;
 $634 = (___muldi3(($633|0),0,($632|0),0)|0);
 $635 = tempRet0;
 $636 = (_bitshift64Shl(($634|0),($635|0),1)|0);
 $637 = tempRet0;
 $638 = ($637>>>0)<($635>>>0);
 $639 = ($636>>>0)<($634>>>0);
 $640 = ($637|0)==($635|0);
 $641 = $640 & $639;
 $642 = $638 | $641;
 $643 = $631 ? 2 : 1;
 $c3$27 = $642 ? $643 : $$5;
 $644 = (_bitshift64Lshr(($634|0),($635|0),31)|0);
 $645 = tempRet0;
 $646 = (($636) + ($627))|0;
 $647 = ($646>>>0)<($636>>>0);
 if ($647) {
  $648 = (($644) + 1)|0;
  $649 = ($648|0)==(0);
  $650 = $649&1;
  $$c3$27 = (($c3$27) + ($650))|0;
  $c3$28 = $$c3$27;$t2$33 = $648;
 } else {
  $c3$28 = $c3$27;$t2$33 = $644;
 }
 $651 = (($t2$33) + ($630))|0;
 $652 = ($651>>>0)<($t2$33>>>0);
 $653 = $652&1;
 $$c3$28 = (($653) + ($c3$28))|0;
 $654 = ((($r)) + 48|0);
 HEAP32[$654>>2] = $646;
 $655 = HEAP32[$297>>2]|0;
 $656 = HEAP32[$273>>2]|0;
 $657 = (___muldi3(($656|0),0,($655|0),0)|0);
 $658 = tempRet0;
 $659 = (_bitshift64Shl(($657|0),($658|0),1)|0);
 $660 = tempRet0;
 $661 = ($660>>>0)<($658>>>0);
 $662 = ($659>>>0)<($657>>>0);
 $663 = ($660|0)==($658|0);
 $664 = $663 & $662;
 $665 = $661 | $664;
 $c1$29 = $665&1;
 $666 = (_bitshift64Lshr(($657|0),($658|0),31)|0);
 $667 = tempRet0;
 $668 = (($659) + ($651))|0;
 $669 = ($668>>>0)<($659>>>0);
 if (!($669)) {
  $c1$30 = $c1$29;$t2$34 = $666;
  $673 = (($$c3$28) + ($t2$34))|0;
  $674 = ($673>>>0)<($t2$34>>>0);
  $675 = $674&1;
  $676 = ((($r)) + 52|0);
  HEAP32[$676>>2] = $668;
  $677 = HEAP32[$297>>2]|0;
  $678 = (___muldi3(($677|0),0,($677|0),0)|0);
  $679 = tempRet0;
  $680 = (($678) + ($673))|0;
  $681 = ($680>>>0)<($678>>>0);
  $682 = $681&1;
  $t2$35 = (($675) + ($c1$30))|0;
  $$c1$30 = (($t2$35) + ($679))|0;
  $683 = (($$c1$30) + ($682))|0;
  $684 = ((($r)) + 56|0);
  HEAP32[$684>>2] = $680;
  $685 = ((($r)) + 60|0);
  HEAP32[$685>>2] = $683;
  return;
 }
 $670 = (($666) + 1)|0;
 $671 = ($670|0)==(0);
 $672 = $665 ? 2 : 1;
 $$c1$29 = $671 ? $672 : $c1$29;
 $c1$30 = $$c1$29;$t2$34 = $670;
 $673 = (($$c3$28) + ($t2$34))|0;
 $674 = ($673>>>0)<($t2$34>>>0);
 $675 = $674&1;
 $676 = ((($r)) + 52|0);
 HEAP32[$676>>2] = $668;
 $677 = HEAP32[$297>>2]|0;
 $678 = (___muldi3(($677|0),0,($677|0),0)|0);
 $679 = tempRet0;
 $680 = (($678) + ($673))|0;
 $681 = ($680>>>0)<($678>>>0);
 $682 = $681&1;
 $t2$35 = (($675) + ($c1$30))|0;
 $$c1$30 = (($t2$35) + ($679))|0;
 $683 = (($$c1$30) + ($682))|0;
 $684 = ((($r)) + 56|0);
 HEAP32[$684>>2] = $680;
 $685 = ((($r)) + 60|0);
 HEAP32[$685>>2] = $683;
 return;
}
function _fips_bn_sqr_comba4($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$ = 0, $$$c2$0 = 0, $$1 = 0, $$c1$0 = 0, $$c1$4 = 0, $$c1$5 = 0, $$c2$0 = 0, $$c2$2 = 0, $$c2$4 = 0, $$c2$5 = 0, $$c3$1 = 0, $$c3$2 = 0, $$c3$4 = 0, $$c3$5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$0 = 0, $c1$1 = 0, $c1$4 = 0, $c1$5 = 0;
 var $c2$0 = 0, $c2$2 = 0, $c2$4 = 0, $c2$5 = 0, $c3$1 = 0, $c3$2 = 0, $c3$4 = 0, $c3$5 = 0, $t2$1 = 0, $t2$3 = 0, $t2$4 = 0, $t2$5 = 0, $t2$6 = 0, $t2$7 = 0, $t2$8 = 0, $t2$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = (___muldi3(($0|0),0,($0|0),0)|0);
 $2 = tempRet0;
 HEAP32[$r>>2] = $1;
 $3 = ((($a)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$a>>2]|0;
 $6 = (___muldi3(($5|0),0,($4|0),0)|0);
 $7 = tempRet0;
 $8 = (_bitshift64Shl(($6|0),($7|0),1)|0);
 $9 = tempRet0;
 $10 = ($9>>>0)<($7>>>0);
 $11 = ($8>>>0)<($6>>>0);
 $12 = ($9|0)==($7|0);
 $13 = $12 & $11;
 $14 = $10 | $13;
 $c1$0 = $14&1;
 $15 = (_bitshift64Lshr(($6|0),($7|0),31)|0);
 $16 = tempRet0;
 $17 = (($8) + ($2))|0;
 $18 = ($17>>>0)<($8>>>0);
 if ($18) {
  $19 = (($15) + 1)|0;
  $20 = ($19|0)==(0);
  $21 = $14 ? 2 : 1;
  $$c1$0 = $20 ? $21 : $c1$0;
  $c1$1 = $$c1$0;$t2$1 = $19;
 } else {
  $c1$1 = $c1$0;$t2$1 = $15;
 }
 $22 = ((($r)) + 4|0);
 HEAP32[$22>>2] = $17;
 $23 = HEAP32[$3>>2]|0;
 $24 = (___muldi3(($23|0),0,($23|0),0)|0);
 $25 = tempRet0;
 $26 = (($24) + ($t2$1))|0;
 $27 = ($26>>>0)<($24>>>0);
 $28 = $27&1;
 $$ = (($28) + ($25))|0;
 $29 = (($$) + ($c1$1))|0;
 $30 = ($29>>>0)<($$>>>0);
 $c2$0 = $30&1;
 $31 = ((($a)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$a>>2]|0;
 $34 = (___muldi3(($33|0),0,($32|0),0)|0);
 $35 = tempRet0;
 $36 = (_bitshift64Shl(($34|0),($35|0),1)|0);
 $37 = tempRet0;
 $38 = ($37>>>0)<($35>>>0);
 $39 = ($36>>>0)<($34>>>0);
 $40 = ($37|0)==($35|0);
 $41 = $40 & $39;
 $42 = $38 | $41;
 $43 = $30 ? 2 : 1;
 $$c2$0 = $42 ? $43 : $c2$0;
 $44 = (_bitshift64Lshr(($34|0),($35|0),31)|0);
 $45 = tempRet0;
 $46 = (($36) + ($26))|0;
 $47 = ($46>>>0)<($36>>>0);
 if ($47) {
  $48 = (($44) + 1)|0;
  $49 = ($48|0)==(0);
  $50 = $49&1;
  $$$c2$0 = (($$c2$0) + ($50))|0;
  $c2$2 = $$$c2$0;$t2$3 = $48;
 } else {
  $c2$2 = $$c2$0;$t2$3 = $44;
 }
 $51 = (($t2$3) + ($29))|0;
 $52 = ($51>>>0)<($t2$3>>>0);
 $53 = $52&1;
 $$c2$2 = (($53) + ($c2$2))|0;
 $54 = ((($r)) + 8|0);
 HEAP32[$54>>2] = $46;
 $55 = ((($a)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$a>>2]|0;
 $58 = (___muldi3(($57|0),0,($56|0),0)|0);
 $59 = tempRet0;
 $60 = (_bitshift64Shl(($58|0),($59|0),1)|0);
 $61 = tempRet0;
 $62 = ($61>>>0)<($59>>>0);
 $63 = ($60>>>0)<($58>>>0);
 $64 = ($61|0)==($59|0);
 $65 = $64 & $63;
 $66 = $62 | $65;
 $c3$1 = $66&1;
 $67 = (_bitshift64Lshr(($58|0),($59|0),31)|0);
 $68 = tempRet0;
 $69 = (($60) + ($51))|0;
 $70 = ($69>>>0)<($60>>>0);
 if ($70) {
  $71 = (($67) + 1)|0;
  $72 = ($71|0)==(0);
  $73 = $66 ? 2 : 1;
  $$c3$1 = $72 ? $73 : $c3$1;
  $c3$2 = $$c3$1;$t2$4 = $71;
 } else {
  $c3$2 = $c3$1;$t2$4 = $67;
 }
 $74 = (($$c2$2) + ($t2$4))|0;
 $75 = ($74>>>0)<($t2$4>>>0);
 $76 = $75&1;
 $$c3$2 = (($76) + ($c3$2))|0;
 $77 = HEAP32[$31>>2]|0;
 $78 = HEAP32[$3>>2]|0;
 $79 = (___muldi3(($78|0),0,($77|0),0)|0);
 $80 = tempRet0;
 $81 = (_bitshift64Shl(($79|0),($80|0),1)|0);
 $82 = tempRet0;
 $83 = ($82>>>0)<($80>>>0);
 $84 = ($81>>>0)<($79>>>0);
 $85 = ($82|0)==($80|0);
 $86 = $85 & $84;
 $87 = $83 | $86;
 $88 = $87&1;
 $c3$4 = (($$c3$2) + ($88))|0;
 $89 = (_bitshift64Lshr(($79|0),($80|0),31)|0);
 $90 = tempRet0;
 $91 = (($81) + ($69))|0;
 $92 = ($91>>>0)<($81>>>0);
 if ($92) {
  $93 = (($89) + 1)|0;
  $94 = ($93|0)==(0);
  $95 = $94&1;
  $$c3$4 = (($95) + ($c3$4))|0;
  $c3$5 = $$c3$4;$t2$5 = $93;
 } else {
  $c3$5 = $c3$4;$t2$5 = $89;
 }
 $96 = (($t2$5) + ($74))|0;
 $97 = ($96>>>0)<($t2$5>>>0);
 $98 = $97&1;
 $$c3$5 = (($98) + ($c3$5))|0;
 $99 = ((($r)) + 12|0);
 HEAP32[$99>>2] = $91;
 $100 = HEAP32[$31>>2]|0;
 $101 = (___muldi3(($100|0),0,($100|0),0)|0);
 $102 = tempRet0;
 $103 = (($101) + ($96))|0;
 $104 = ($103>>>0)<($101>>>0);
 $105 = $104&1;
 $t2$6 = (($105) + ($102))|0;
 $106 = (($$c3$5) + ($t2$6))|0;
 $107 = ($106>>>0)<($t2$6>>>0);
 $$1 = $107&1;
 $108 = HEAP32[$55>>2]|0;
 $109 = HEAP32[$3>>2]|0;
 $110 = (___muldi3(($109|0),0,($108|0),0)|0);
 $111 = tempRet0;
 $112 = (_bitshift64Shl(($110|0),($111|0),1)|0);
 $113 = tempRet0;
 $114 = ($113>>>0)<($111>>>0);
 $115 = ($112>>>0)<($110>>>0);
 $116 = ($113|0)==($111|0);
 $117 = $116 & $115;
 $118 = $114 | $117;
 $119 = $107 ? 2 : 1;
 $c1$4 = $118 ? $119 : $$1;
 $120 = (_bitshift64Lshr(($110|0),($111|0),31)|0);
 $121 = tempRet0;
 $122 = (($112) + ($103))|0;
 $123 = ($122>>>0)<($112>>>0);
 if ($123) {
  $124 = (($120) + 1)|0;
  $125 = ($124|0)==(0);
  $126 = $125&1;
  $$c1$4 = (($c1$4) + ($126))|0;
  $c1$5 = $$c1$4;$t2$7 = $124;
 } else {
  $c1$5 = $c1$4;$t2$7 = $120;
 }
 $127 = (($t2$7) + ($106))|0;
 $128 = ($127>>>0)<($t2$7>>>0);
 $129 = $128&1;
 $$c1$5 = (($129) + ($c1$5))|0;
 $130 = ((($r)) + 16|0);
 HEAP32[$130>>2] = $122;
 $131 = HEAP32[$55>>2]|0;
 $132 = HEAP32[$31>>2]|0;
 $133 = (___muldi3(($132|0),0,($131|0),0)|0);
 $134 = tempRet0;
 $135 = (_bitshift64Shl(($133|0),($134|0),1)|0);
 $136 = tempRet0;
 $137 = ($136>>>0)<($134>>>0);
 $138 = ($135>>>0)<($133>>>0);
 $139 = ($136|0)==($134|0);
 $140 = $139 & $138;
 $141 = $137 | $140;
 $c2$4 = $141&1;
 $142 = (_bitshift64Lshr(($133|0),($134|0),31)|0);
 $143 = tempRet0;
 $144 = (($135) + ($127))|0;
 $145 = ($144>>>0)<($135>>>0);
 if (!($145)) {
  $c2$5 = $c2$4;$t2$8 = $142;
  $149 = (($$c1$5) + ($t2$8))|0;
  $150 = ($149>>>0)<($t2$8>>>0);
  $151 = $150&1;
  $152 = ((($r)) + 20|0);
  HEAP32[$152>>2] = $144;
  $153 = HEAP32[$55>>2]|0;
  $154 = (___muldi3(($153|0),0,($153|0),0)|0);
  $155 = tempRet0;
  $156 = (($154) + ($149))|0;
  $157 = ($156>>>0)<($154>>>0);
  $158 = $157&1;
  $t2$9 = (($151) + ($c2$5))|0;
  $$c2$5 = (($t2$9) + ($155))|0;
  $159 = (($$c2$5) + ($158))|0;
  $160 = ((($r)) + 24|0);
  HEAP32[$160>>2] = $156;
  $161 = ((($r)) + 28|0);
  HEAP32[$161>>2] = $159;
  return;
 }
 $146 = (($142) + 1)|0;
 $147 = ($146|0)==(0);
 $148 = $141 ? 2 : 1;
 $$c2$4 = $147 ? $148 : $c2$4;
 $c2$5 = $$c2$4;$t2$8 = $146;
 $149 = (($$c1$5) + ($t2$8))|0;
 $150 = ($149>>>0)<($t2$8>>>0);
 $151 = $150&1;
 $152 = ((($r)) + 20|0);
 HEAP32[$152>>2] = $144;
 $153 = HEAP32[$55>>2]|0;
 $154 = (___muldi3(($153|0),0,($153|0),0)|0);
 $155 = tempRet0;
 $156 = (($154) + ($149))|0;
 $157 = ($156>>>0)<($154>>>0);
 $158 = $157&1;
 $t2$9 = (($151) + ($c2$5))|0;
 $$c2$5 = (($t2$9) + ($155))|0;
 $159 = (($$c2$5) + ($158))|0;
 $160 = ((($r)) + 24|0);
 HEAP32[$160>>2] = $156;
 $161 = ((($r)) + 28|0);
 HEAP32[$161>>2] = $159;
 return;
}
function _FIPS_x931_seed($seed,$seedlen) {
 $seed = $seed|0;
 $seedlen = $seedlen|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 _FIPS_lock(9,18,7510,392);
 $0 = HEAP32[(588)>>2]|0;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $$0$i = 0;
  } else {
   $2 = HEAP32[(592)>>2]|0;
   $3 = ($2|0)==(0);
   if (!($3)) {
    $5 = ($seedlen|0)==(16);
    if (!($5)) {
     $$0$i = 0;
     break;
    }
    dest=(872); src=$seed; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    HEAP32[584>>2] = 1;
    $$0$i = 1;
    break;
   }
   $4 = ($seedlen|0)==(0);
   if ($4) {
    $$0$i = 1;
   } else {
    $i$01$i = 0;
    while(1) {
     $6 = (($seed) + ($i$01$i)|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = HEAP32[(852)>>2]|0;
     $9 = (($8) + 1)|0;
     HEAP32[(852)>>2] = $9;
     $10 = (872 + ($8)|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = $11 ^ $7;
     HEAP8[$10>>0] = $12;
     $13 = HEAP32[(852)>>2]|0;
     $14 = ($13|0)==(16);
     if ($14) {
      HEAP32[(852)>>2] = 0;
      $15 = HEAP32[(588)>>2]|0;
      $16 = ($15|0)==(2);
      if ($16) {
       $17 = (_memcmp((856),(872),16)|0);
       $18 = ($17|0)==(0);
       if ($18) {
        break;
       }
       _FIPS_openssl_cleanse((856),16);
       HEAP32[(588)>>2] = 1;
      }
      HEAP32[584>>2] = 1;
     }
     $19 = (($i$01$i) + 1)|0;
     $20 = ($19>>>0)<($seedlen>>>0);
     if ($20) {
      $i$01$i = $19;
     } else {
      $$0$i = 1;
      break L1;
     }
    }
    _FIPS_put_error(36,104,105,7510,192);
    $$0$i = 0;
   }
  }
 } while(0);
 _FIPS_lock(10,18,7510,394);
 return ($$0$i|0);
}
function _FIPS_drbg_get_strength($dctx) {
 $dctx = $dctx|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _FIPS_get_default_drbg() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (920|0);
}
function _FIPS_rand_add($buf,$num,$entropy) {
 $buf = $buf|0;
 $num = $num|0;
 $entropy = +$entropy;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1976>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_FIPS_module_mode()|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   _FIPS_put_error(45,122,125,7522,116);
   return;
  }
 }
 $4 = HEAP32[1980>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = ((($4)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  return;
 }
 (FUNCTION_TABLE_iiid[$7 & 31]($buf,$num,$entropy)|0);
 return;
}
function _FIPS_rand_bytes($buf,$num) {
 $buf = $buf|0;
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1976>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_FIPS_module_mode()|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   _FIPS_put_error(45,123,125,7522,127);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $4 = HEAP32[1980>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (FUNCTION_TABLE_iii[$7 & 31]($buf,$num)|0);
 $$0 = $9;
 return ($$0|0);
}
function _FIPS_rand_pseudo_bytes($buf,$num) {
 $buf = $buf|0;
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1976>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_FIPS_module_mode()|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   _FIPS_put_error(45,124,125,7522,139);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $4 = HEAP32[1980>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -1;
  return ($$0|0);
 }
 $6 = ((($4)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -1;
  return ($$0|0);
 }
 $9 = (FUNCTION_TABLE_iii[$7 & 31]($buf,$num)|0);
 $$0 = $9;
 return ($$0|0);
}
function _FIPS_rand_status() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1976>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_FIPS_module_mode()|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   _FIPS_put_error(45,127,125,7522,151);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $4 = HEAP32[1980>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($4)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (FUNCTION_TABLE_i[$7 & 31]()|0);
 $$0 = $9;
 return ($$0|0);
}
function _FIPS_rand_strength() {
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1972>>2]|0;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $2 = HEAP32[1976>>2]|0;
   switch ($2|0) {
   case 2:  {
    $$0 = 80;
    break L1;
    break;
   }
   case 1:  {
    $3 = (_FIPS_get_default_drbg()|0);
    $4 = (_FIPS_drbg_get_strength($3)|0);
    $$0 = $4;
    break L1;
    break;
   }
   case 0:  {
    $5 = (_FIPS_module_mode()|0);
    $6 = ($5|0)==(0);
    $$ = $6 ? 256 : 0;
    $$0 = $$;
    break L1;
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
  } else {
   $$0 = $0;
  }
 } while(0);
 return ($$0|0);
}
function _FIPS_dsa_sig_free($sig) {
 $sig = $sig|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sig|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$sig>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _FIPS_bn_free($1);
 }
 $3 = ((($sig)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _FIPS_bn_free($4);
 }
 _FIPS_free($sig);
 return;
}
function _FIPS_dsa_sign_ctx($dsa,$ctx) {
 $dsa = $dsa|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $dig = 0, $dlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $dig = sp + 8|0;
 $dlen = sp;
 (_FIPS_digestfinal($ctx,$dig,$dlen)|0);
 $0 = ((($dsa)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$dlen>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$3 & 31]($dig,$4,$dsa)|0);
 $6 = HEAP32[$dlen>>2]|0;
 _FIPS_openssl_cleanse($dig,$6);
 STACKTOP = sp;return ($5|0);
}
function _FIPS_dsa_verify_ctx($dsa,$ctx,$s) {
 $dsa = $dsa|0;
 $ctx = $ctx|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $dig = 0, $dlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $dig = sp + 8|0;
 $dlen = sp;
 (_FIPS_digestfinal($ctx,$dig,$dlen)|0);
 $0 = ((($dsa)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$dlen>>2]|0;
 $5 = (FUNCTION_TABLE_iiiii[$3 & 31]($dig,$4,$s,$dsa)|0);
 $6 = HEAP32[$dlen>>2]|0;
 _FIPS_openssl_cleanse($dig,$6);
 STACKTOP = sp;return ($5|0);
}
function _FIPS_rsa_sign_ctx($rsa,$ctx,$rsa_pad_mode,$saltlen,$mgf1Hash,$sigret,$siglen) {
 $rsa = $rsa|0;
 $ctx = $ctx|0;
 $rsa_pad_mode = $rsa_pad_mode|0;
 $saltlen = $saltlen|0;
 $mgf1Hash = $mgf1Hash|0;
 $sigret = $sigret|0;
 $siglen = $siglen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $md = 0, $md_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $md_len = sp;
 $md = sp + 8|0;
 (_FIPS_digestfinal($ctx,$md,$md_len)|0);
 $0 = HEAP32[$md_len>>2]|0;
 $1 = HEAP32[$ctx>>2]|0;
 $2 = (_FIPS_rsa_sign_digest($rsa,$md,$0,$1,$rsa_pad_mode,$saltlen,$mgf1Hash,$sigret,$siglen)|0);
 $3 = HEAP32[$md_len>>2]|0;
 _FIPS_openssl_cleanse($md,$3);
 STACKTOP = sp;return ($2|0);
}
function _FIPS_rsa_sign_digest($rsa,$md,$md_len,$mhash,$rsa_pad_mode,$saltlen,$mgf1Hash,$sigret,$siglen) {
 $rsa = $rsa|0;
 $md = $md|0;
 $md_len = $md_len|0;
 $mhash = $mhash|0;
 $rsa_pad_mode = $rsa_pad_mode|0;
 $saltlen = $saltlen|0;
 $mgf1Hash = $mgf1Hash|0;
 $sigret = $sigret|0;
 $siglen = $siglen|0;
 var $$0 = 0, $$0$i$ph = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $md_type$0 = 0;
 var $or$cond = 0, $ret$0 = 0, $ret$1 = 0, $tmpdinfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $tmpdinfo = sp;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _FIPS_put_error(45,156,134,7538,234);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($mhash|0)==(0|0);
 $3 = ($rsa_pad_mode|0)==(1);
 $or$cond = $2 & $3;
 if ($or$cond) {
  $md_type$0 = $saltlen;
 } else {
  $4 = HEAP32[$mhash>>2]|0;
  $md_type$0 = $4;
 }
 $5 = ($rsa_pad_mode|0)==(5);
 do {
  if ($5) {
   _memcpy(($tmpdinfo|0),($md|0),($md_len|0))|0;
   $6 = (_fips_rsa_x931_hash_id($md_type$0)|0);
   $7 = ($6|0)==(-1);
   if (!($7)) {
    $8 = $6&255;
    $9 = (($tmpdinfo) + ($md_len)|0);
    HEAP8[$9>>0] = $8;
    $10 = (($md_len) + 1)|0;
    $i$0 = $10;
    break;
   }
   _FIPS_put_error(4,149,117,7538,249);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   if ($3) {
    switch ($md_type$0|0) {
    case 64:  {
     $$0$i$ph = 7630;$$ph = 15;
     break;
    }
    case 675:  {
     $$0$i$ph = 7554;$$ph = 19;
     break;
    }
    case 672:  {
     $$0$i$ph = 7573;$$ph = 19;
     break;
    }
    case 673:  {
     $$0$i$ph = 7592;$$ph = 19;
     break;
    }
    case 674:  {
     $$0$i$ph = 7611;$$ph = 19;
     break;
    }
    default: {
     _FIPS_put_error(4,149,117,7538,262);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    }
    _memcpy(($tmpdinfo|0),($$0$i$ph|0),($$ph|0))|0;
    $11 = (($tmpdinfo) + ($$ph)|0);
    _memcpy(($11|0),($md|0),($md_len|0))|0;
    $12 = (($$ph) + ($md_len))|0;
    $i$0 = $12;
    break;
   } else {
    $13 = ($rsa_pad_mode|0)==(6);
    if (!($13)) {
     $i$0 = 0;
     break;
    }
    $14 = (_FIPS_rsa_size($rsa)|0);
    $15 = (_FIPS_rsa_size($rsa)|0);
    $16 = (_FIPS_malloc($15,7538,275)|0);
    $17 = ($16|0)==(0|0);
    if ($17) {
     _FIPS_put_error(4,149,65,7538,278);
     $ret$0 = 0;
    } else {
     $18 = (_fips_rsa_padding_add_pkcs1_pss_mgf1($rsa,$16,$md,$mhash,$mgf1Hash,$saltlen)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $ret$0 = 0;
     } else {
      $20 = ((($rsa)) + 8|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ((($21)) + 12|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = (FUNCTION_TABLE_iiiiii[$23 & 31]($14,$16,$sigret,$rsa,3)|0);
      $25 = ($24|0)>(0);
      if ($25) {
       HEAP32[$siglen>>2] = $24;
       $ret$0 = 1;
      } else {
       $ret$0 = 0;
      }
     }
    }
    _FIPS_openssl_cleanse($16,$14);
    _FIPS_free($16);
    $$0 = $ret$0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $26 = (_FIPS_rsa_size($rsa)|0);
 $27 = (($26) + -11)|0;
 $28 = ($i$0|0)>($27|0);
 if ($28) {
  _FIPS_put_error(4,149,112,7538,299);
  $ret$1 = 0;
 } else {
  $29 = ((($rsa)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (FUNCTION_TABLE_iiiiii[$32 & 31]($i$0,$tmpdinfo,$sigret,$rsa,$rsa_pad_mode)|0);
  $34 = ($33|0)>(0);
  if ($34) {
   HEAP32[$siglen>>2] = $33;
   $ret$1 = 1;
  } else {
   $ret$1 = 0;
  }
 }
 _FIPS_openssl_cleanse($tmpdinfo,$i$0);
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _FIPS_rsa_verify_ctx($rsa,$ctx,$rsa_pad_mode,$saltlen,$mgf1Hash,$sigbuf,$siglen) {
 $rsa = $rsa|0;
 $ctx = $ctx|0;
 $rsa_pad_mode = $rsa_pad_mode|0;
 $saltlen = $saltlen|0;
 $mgf1Hash = $mgf1Hash|0;
 $sigbuf = $sigbuf|0;
 $siglen = $siglen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $md = 0, $md_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $md_len = sp;
 $md = sp + 8|0;
 (_FIPS_digestfinal($ctx,$md,$md_len)|0);
 $0 = HEAP32[$md_len>>2]|0;
 $1 = HEAP32[$ctx>>2]|0;
 $2 = (_FIPS_rsa_verify_digest($rsa,$md,$0,$1,$rsa_pad_mode,$saltlen,$mgf1Hash,$sigbuf,$siglen)|0);
 $3 = HEAP32[$md_len>>2]|0;
 _FIPS_openssl_cleanse($md,$3);
 STACKTOP = sp;return ($2|0);
}
function _FIPS_rsa_verify_digest($rsa,$dig,$diglen,$mhash,$rsa_pad_mode,$saltlen,$mgf1Hash,$sigbuf,$siglen) {
 $rsa = $rsa|0;
 $dig = $dig|0;
 $diglen = $diglen|0;
 $mhash = $mhash|0;
 $rsa_pad_mode = $rsa_pad_mode|0;
 $saltlen = $saltlen|0;
 $mgf1Hash = $mgf1Hash|0;
 $sigbuf = $sigbuf|0;
 $siglen = $siglen|0;
 var $$ = 0, $$0 = 0, $$0$i$ph = 0, $$ph = 0, $$rsa_pad_mode = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $der$0 = 0, $md_type$0 = 0, $or$cond = 0, $ret$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _FIPS_put_error(45,157,134,7538,343);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_FIPS_rsa_size($rsa)|0);
 $3 = ($2|0)==($siglen|0);
 if (!($3)) {
  _FIPS_put_error(4,151,119,7538,349);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($mhash|0)==(0|0);
 $5 = ($rsa_pad_mode|0)==(1);
 $or$cond = $4 & $5;
 if ($or$cond) {
  $md_type$0 = $saltlen;
 } else {
  $6 = HEAP32[$mhash>>2]|0;
  $md_type$0 = $6;
 }
 $7 = (_FIPS_malloc($siglen,7538,358)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  _FIPS_put_error(4,151,65,7538,361);
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ($rsa_pad_mode|0)==(6);
 $$rsa_pad_mode = $9 ? 3 : $rsa_pad_mode;
 $10 = ((($rsa)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiiiii[$13 & 31]($siglen,$sigbuf,$7,$rsa,$$rsa_pad_mode)|0);
 $15 = ($14|0)<(1);
 do {
  if ($15) {
   $ret$0$ph = 0;
  } else {
   $16 = ($rsa_pad_mode|0)==(5);
   if ($16) {
    $17 = (($diglen) + 1)|0;
    $18 = ($14|0)==($17|0);
    if (!($18)) {
     _FIPS_put_error(4,151,104,7538,380);
     $ret$0$ph = 0;
     break;
    }
    $19 = (_fips_rsa_x931_hash_id($md_type$0)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     _FIPS_put_error(4,151,117,7538,386);
     $ret$0$ph = 0;
     break;
    }
    $21 = (($7) + ($diglen)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $19&255;
    $24 = ($22<<24>>24)==($23<<24>>24);
    if (!($24)) {
     _FIPS_put_error(4,151,104,7538,391);
     $ret$0$ph = 0;
     break;
    }
    $25 = (_memcmp($7,$dig,$diglen)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $ret$0$ph = 1;
     break;
    }
    _FIPS_put_error(4,151,104,7538,396);
    $ret$0$ph = 0;
    break;
   }
   if (!($5)) {
    if (!($9)) {
     $ret$0$ph = 0;
     break;
    }
    $37 = (_fips_rsa_verify_pkcs1_pss_mgf1($rsa,$dig,$mhash,$mgf1Hash,$7,$saltlen)|0);
    $38 = ($37|0)<(0);
    $$ = $38 ? 0 : $37;
    $ret$0$ph = $$;
    break;
   }
   switch ($md_type$0|0) {
   case 64:  {
    $$0$i$ph = 7630;$$ph = 15;
    break;
   }
   case 675:  {
    $$0$i$ph = 7554;$$ph = 19;
    break;
   }
   case 672:  {
    $$0$i$ph = 7573;$$ph = 19;
    break;
   }
   case 673:  {
    $$0$i$ph = 7592;$$ph = 19;
    break;
   }
   case 674:  {
    $$0$i$ph = 7611;$$ph = 19;
    break;
   }
   default: {
    _FIPS_put_error(4,151,117,7538,408);
    $$0 = 0;
    return ($$0|0);
   }
   }
   $27 = (($$ph) + ($diglen))|0;
   $28 = ($14|0)==($27|0);
   L43: do {
    if ($28) {
     $30 = $$ph;$der$0 = $$0$i$ph;
    } else {
     switch ($md_type$0|0) {
     case 64:  {
      $30 = 13;$der$0 = 7713;
      break L43;
      break;
     }
     case 675:  {
      $30 = 17;$der$0 = 7696;
      break L43;
      break;
     }
     case 672:  {
      $30 = 17;$der$0 = 7679;
      break L43;
      break;
     }
     case 673:  {
      $30 = 17;$der$0 = 7662;
      break L43;
      break;
     }
     case 674:  {
      $30 = 17;$der$0 = 7645;
      break L43;
      break;
     }
     default: {
      $30 = $$ph;$der$0 = 0;
      break L43;
     }
     }
    }
   } while(0);
   $29 = (($30) + ($diglen))|0;
   $31 = ($14|0)==($29|0);
   if ($31) {
    $32 = (_memcmp($der$0,$7,$30)|0);
    $33 = ($32|0)==(0);
    if ($33) {
     $34 = (($7) + ($30)|0);
     $35 = (_memcmp($34,$dig,$diglen)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      $ret$0$ph = 1;
      break;
     }
    }
   }
   _FIPS_put_error(4,151,104,7538,423);
   $ret$0$ph = 0;
  }
 } while(0);
 _FIPS_openssl_cleanse($7,$siglen);
 _FIPS_free($7);
 $$0 = $ret$0$ph;
 return ($$0|0);
}
function _FIPS_rsa_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_FIPS_malloc(88,7726,75)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 dest=$0; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = (_FIPS_rsa_pkcs1_ssleay()|0);
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($2)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = $0;
  return ($$0|0);
 }
 (FUNCTION_TABLE_ii[$5 & 31]($0)|0);
 $$0 = $0;
 return ($$0|0);
}
function _FIPS_rsa_free($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($r)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  (FUNCTION_TABLE_ii[$4 & 31]($r)|0);
 }
 $6 = ((($r)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _FIPS_bn_clear_free($7);
 }
 $9 = ((($r)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  _FIPS_bn_clear_free($10);
 }
 $12 = ((($r)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _FIPS_bn_clear_free($13);
 }
 $15 = ((($r)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  _FIPS_bn_clear_free($16);
 }
 $18 = ((($r)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  _FIPS_bn_clear_free($19);
 }
 $21 = ((($r)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  _FIPS_bn_clear_free($22);
 }
 $24 = ((($r)) + 40|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _FIPS_bn_clear_free($25);
 }
 $27 = ((($r)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  _FIPS_bn_clear_free($28);
 }
 $30 = ((($r)) + 80|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  _fips_bn_blinding_free($31);
 }
 $33 = ((($r)) + 84|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  _fips_bn_blinding_free($34);
 }
 _FIPS_free($r);
 return;
}
function _FIPS_put_error($lib,$func,$reason,$file,$line) {
 $lib = $lib|0;
 $func = $func|0;
 $reason = $reason|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1984>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 FUNCTION_TABLE_viiiii[$0 & 31]($lib,$func,$reason,$file,$line);
 return;
}
function _FIPS_add_error_data($num,$varargs) {
 $num = $num|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 $0 = HEAP32[1988>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $2 = HEAP32[1988>>2]|0;
 FUNCTION_TABLE_vii[$2 & 31]($num,$args);
 STACKTOP = sp;return;
}
function _FIPS_md_ctx_init($ctx) {
 $ctx = $ctx|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$ctx>>2]=0|0;HEAP32[$ctx+4>>2]=0|0;HEAP32[$ctx+8>>2]=0|0;HEAP32[$ctx+12>>2]=0|0;HEAP32[$ctx+16>>2]=0|0;HEAP32[$ctx+20>>2]=0|0;
 return;
}
function _FIPS_digestinit($ctx,$type) {
 $ctx = $ctx|0;
 $type = $type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -3;
 HEAP32[$0>>2] = $2;
 $3 = (_FIPS_selftest_failed()|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _FIPS_put_error(45,110,115,7741,172);
  HEAP32[$ctx>>2] = 1992;
  $5 = ((($ctx)) + 20|0);
  HEAP32[$5>>2] = 20;
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_FIPS_module_mode()|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($type)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 1024;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = HEAP32[$0>>2]|0;
   $13 = $12 & 8;
   $14 = ($13|0)==(0);
   if ($14) {
    _FIPS_put_error(6,168,163,7741,180);
    HEAP32[$ctx>>2] = 1992;
    $15 = ((($ctx)) + 20|0);
    HEAP32[$15>>2] = 20;
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 $16 = HEAP32[$ctx>>2]|0;
 $17 = ($16|0)==($type|0);
 if (!($17)) {
  $18 = ($16|0)==(0|0);
  if (!($18)) {
   $19 = ((($16)) + 68|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   if (!($21)) {
    $22 = ((($ctx)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    _FIPS_free($23);
   }
  }
  HEAP32[$ctx>>2] = $type;
  $24 = HEAP32[$0>>2]|0;
  $25 = $24 & 256;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = ((($type)) + 68|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    $30 = ((($type)) + 20|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($ctx)) + 20|0);
    HEAP32[$32>>2] = $31;
    $33 = (_FIPS_malloc($28,7741,193)|0);
    $34 = ((($ctx)) + 12|0);
    HEAP32[$34>>2] = $33;
    $35 = ($33|0)==(0|0);
    if ($35) {
     _FIPS_put_error(6,168,65,7741,197);
     $$0 = 0;
     return ($$0|0);
    }
   }
  }
 }
 $36 = HEAP32[$0>>2]|0;
 $37 = $36 & 256;
 $38 = ($37|0)==(0);
 if (!($38)) {
  $$0 = 1;
  return ($$0|0);
 }
 $39 = HEAP32[$ctx>>2]|0;
 $40 = ((($39)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_ii[$41 & 31]($ctx)|0);
 $$0 = $42;
 return ($$0|0);
}
function _FIPS_digestupdate($ctx,$data,$count) {
 $ctx = $ctx|0;
 $data = $data|0;
 $count = $count|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = ((($ctx)) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (FUNCTION_TABLE_iiii[$3 & 31]($ctx,$data,$count)|0);
  $$0 = $4;
  return ($$0|0);
 } else {
  _FIPS_put_error(45,159,134,7741,211);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _FIPS_digestfinal($ctx,$md,$size) {
 $ctx = $ctx|0;
 $md = $md|0;
 $size = $size|0;
 var $$0 = 0, $$pre1 = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_selftest_failed()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _FIPS_put_error(45,158,134,7741,224);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$ctx>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(65);
 if (!($5)) {
  _FIPS_openssldie(7741,228,7751);
  // unreachable;
 }
 $6 = ((($2)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 31]($ctx,$md)|0);
 $9 = ($size|0)==(0|0);
 $$pre1 = HEAP32[$ctx>>2]|0;
 if (!($9)) {
  $10 = ((($$pre1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$size>>2] = $11;
 }
 $12 = ((($$pre1)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $21 = $$pre1;
 } else {
  (FUNCTION_TABLE_ii[$13 & 31]($ctx)|0);
  $15 = ((($ctx)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 | 2;
  HEAP32[$15>>2] = $17;
  $$pre2 = HEAP32[$ctx>>2]|0;
  $21 = $$pre2;
 }
 $18 = ((($ctx)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($21)) + 68|0);
 $22 = HEAP32[$20>>2]|0;
 _memset(($19|0),0,($22|0))|0;
 $$0 = $8;
 return ($$0|0);
}
function _FIPS_digest($data,$count,$md,$size,$type) {
 $data = $data|0;
 $count = $count|0;
 $md = $md|0;
 $size = $size|0;
 $type = $type|0;
 var $$pr$pre$i = 0, $$pr3$i = 0, $$pre1$i = 0, $$pre2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ctx = sp;
 ;HEAP32[$ctx>>2]=0|0;HEAP32[$ctx+4>>2]=0|0;HEAP32[$ctx+8>>2]=0|0;HEAP32[$ctx+12>>2]=0|0;HEAP32[$ctx+16>>2]=0|0;HEAP32[$ctx+20>>2]=0|0;
 $0 = ((($ctx)) + 8|0);
 HEAP32[$0>>2] = 1;
 $1 = (_FIPS_digestinit($ctx,$type)|0);
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $32 = 0;
  } else {
   $3 = (_FIPS_selftest_failed()|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    _FIPS_put_error(45,159,134,7741,211);
    $32 = 0;
    break;
   }
   $5 = ((($ctx)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (FUNCTION_TABLE_iiii[$6 & 31]($ctx,$data,$count)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $32 = 0;
   } else {
    $9 = (_FIPS_selftest_failed()|0);
    $10 = ($9|0)==(0);
    if (!($10)) {
     _FIPS_put_error(45,158,134,7741,224);
     $32 = 0;
     break;
    }
    $11 = HEAP32[$ctx>>2]|0;
    $12 = ((($11)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)<(65);
    if (!($14)) {
     _FIPS_openssldie(7741,228,7751);
     // unreachable;
    }
    $15 = ((($11)) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iii[$16 & 31]($ctx,$md)|0);
    $18 = ($size|0)==(0|0);
    $$pre1$i = HEAP32[$ctx>>2]|0;
    if (!($18)) {
     $19 = ((($$pre1$i)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$size>>2] = $20;
    }
    $21 = ((($$pre1$i)) + 32|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     $29 = $$pre1$i;
    } else {
     (FUNCTION_TABLE_ii[$22 & 31]($ctx)|0);
     $24 = HEAP32[$0>>2]|0;
     $25 = $24 | 2;
     HEAP32[$0>>2] = $25;
     $$pre2$i = HEAP32[$ctx>>2]|0;
     $29 = $$pre2$i;
    }
    $26 = ((($ctx)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($29)) + 68|0);
    $30 = HEAP32[$28>>2]|0;
    _memset(($27|0),0,($30|0))|0;
    $phitmp = ($17|0)!=(0);
    $32 = $phitmp;
   }
  }
 } while(0);
 $31 = $32&1;
 $33 = HEAP32[$ctx>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  STACKTOP = sp;return ($31|0);
 }
 $35 = ((($33)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  $$pr3$i = $33;
 } else {
  $38 = HEAP32[$0>>2]|0;
  $39 = $38 & 2;
  $40 = ($39|0)==(0);
  if ($40) {
   (FUNCTION_TABLE_ii[$36 & 31]($ctx)|0);
   $$pr$pre$i = HEAP32[$ctx>>2]|0;
   $41 = ($$pr$pre$i|0)==(0|0);
   if ($41) {
    STACKTOP = sp;return ($31|0);
   } else {
    $$pr3$i = $$pr$pre$i;
   }
  } else {
   $$pr3$i = $33;
  }
 }
 $42 = ((($$pr3$i)) + 68|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0);
 if ($44) {
  STACKTOP = sp;return ($31|0);
 }
 $45 = ((($ctx)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if ($47) {
  STACKTOP = sp;return ($31|0);
 }
 $48 = HEAP32[$0>>2]|0;
 $49 = $48 & 4;
 $50 = ($49|0)==(0);
 if (!($50)) {
  STACKTOP = sp;return ($31|0);
 }
 _FIPS_openssl_cleanse($46,$43);
 $51 = HEAP32[$45>>2]|0;
 _FIPS_free($51);
 STACKTOP = sp;return ($31|0);
}
function _FIPS_md_ctx_cleanup($ctx) {
 $ctx = $ctx|0;
 var $$pr$pre = 0, $$pr3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = ((($0)) + 32|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$pr3 = $0;
   } else {
    $5 = ((($ctx)) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = $6 & 2;
    $8 = ($7|0)==(0);
    if ($8) {
     (FUNCTION_TABLE_ii[$3 & 31]($ctx)|0);
     $$pr$pre = HEAP32[$ctx>>2]|0;
     $9 = ($$pr$pre|0)==(0|0);
     if ($9) {
      break;
     } else {
      $$pr3 = $$pr$pre;
     }
    } else {
     $$pr3 = $0;
    }
   }
   $10 = ((($$pr3)) + 68|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = ((($ctx)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = ((($ctx)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $17 & 4;
     $19 = ($18|0)==(0);
     if ($19) {
      _FIPS_openssl_cleanse($14,$11);
      $20 = HEAP32[$13>>2]|0;
      _FIPS_free($20);
     }
    }
   }
  }
 } while(0);
 ;HEAP32[$ctx>>2]=0|0;HEAP32[$ctx+4>>2]=0|0;HEAP32[$ctx+8>>2]=0|0;HEAP32[$ctx+12>>2]=0|0;HEAP32[$ctx+16>>2]=0|0;HEAP32[$ctx+20>>2]=0|0;
 return 1;
}
function _bad_update($ctx,$data,$count) {
 $ctx = $ctx|0;
 $data = $data|0;
 $count = $count|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _FIPS_openssldie(7741,146,7791);
 // unreachable;
 return (0)|0;
}
function _bad_init($ctx) {
 $ctx = $ctx|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _FIPS_openssldie(7741,143,7914);
 // unreachable;
 return (0)|0;
}
function _bad_final($ctx,$md) {
 $ctx = $ctx|0;
 $md = $md|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _FIPS_openssldie(7741,149,7853);
 // unreachable;
 return (0)|0;
}
function _FIPS_lock($mode,$type,$file,$line) {
 $mode = $mode|0;
 $type = $type|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2068>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 FUNCTION_TABLE_viiii[$0 & 31]($mode,$type,$file,$line);
 return;
}
function _FIPS_add_lock($pointer,$amount,$type,$file,$line) {
 $pointer = $pointer|0;
 $amount = $amount|0;
 $type = $type|0;
 $file = $file|0;
 $line = $line|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2072>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = HEAP32[$pointer>>2]|0;
  $4 = (($3) + ($amount))|0;
  HEAP32[$pointer>>2] = $4;
  $$0 = $4;
  return ($$0|0);
 } else {
  $2 = (FUNCTION_TABLE_iiiiii[$0 & 31]($pointer,$amount,$type,$file,$line)|0);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _FIPS_malloc($num,$file,$line) {
 $num = $num|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2076>>2]|0;
 $1 = (FUNCTION_TABLE_iiii[$0 & 31]($num,$file,$line)|0);
 return ($1|0);
}
function _FIPS_free($x) {
 $x = $x|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2080>>2]|0;
 FUNCTION_TABLE_vi[$0 & 31]($x);
 return;
}
function _fips_free_def($x) {
 $x = $x|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($x);
 return;
}
function _fips_malloc_def($num,$file,$line) {
 $num = $num|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($num)|0);
 return ($0|0);
}
function _FIPS_ecdsa_sig_new() {
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FIPS_malloc(8,7974,69)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_FIPS_bn_new()|0);
 HEAP32[$0>>2] = $2;
 $3 = (_FIPS_bn_new()|0);
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = ($3|0)==(0|0);
 $or$cond = $7 | $6;
 if (!($or$cond)) {
  $$0 = $0;
  return ($$0|0);
 }
 if ($6) {
  $9 = $3;
 } else {
  _FIPS_bn_free($5);
  $$pre = HEAP32[$4>>2]|0;
  $9 = $$pre;
 }
 $8 = ($9|0)==(0|0);
 if (!($8)) {
  _FIPS_bn_free($9);
 }
 _FIPS_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _FIPS_ecdsa_sig_free($sig) {
 $sig = $sig|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sig|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$sig>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _FIPS_bn_free($1);
 }
 $3 = ((($sig)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _FIPS_bn_free($4);
 }
 _FIPS_free($sig);
 return;
}
function _FIPS_ecdsa_sign_ctx($key,$ctx) {
 $key = $key|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $dig = 0, $dlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $dig = sp + 8|0;
 $dlen = sp;
 (_FIPS_digestfinal($ctx,$dig,$dlen)|0);
 $0 = HEAP32[$dlen>>2]|0;
 $1 = (_FIPS_ecdsa_sign_digest($key,$dig,$0)|0);
 $2 = HEAP32[$dlen>>2]|0;
 _FIPS_openssl_cleanse($dig,$2);
 STACKTOP = sp;return ($1|0);
}
function _FIPS_ecdsa_verify_ctx($key,$ctx,$s) {
 $key = $key|0;
 $ctx = $ctx|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $dig = 0, $dlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $dig = sp + 8|0;
 $dlen = sp;
 (_FIPS_digestfinal($ctx,$dig,$dlen)|0);
 $0 = HEAP32[$dlen>>2]|0;
 $1 = (_FIPS_ecdsa_verify_digest($key,$dig,$0,$s)|0);
 $2 = HEAP32[$dlen>>2]|0;
 _FIPS_openssl_cleanse($dig,$2);
 STACKTOP = sp;return ($1|0);
}
function _rsasignjs_public_key_bytes() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2084>>2]|0; //@line 8 "rsasign.c"
 return ($0|0); //@line 8 "rsasign.c"
}
function _rsasignjs_secret_key_bytes() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2088>>2]|0; //@line 12 "rsasign.c"
 return ($0|0); //@line 12 "rsasign.c"
}
function _rsasignjs_signature_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 512; //@line 16 "rsasign.c"
}
function _rsasignjs_keypair($public_key,$private_key) {
 $public_key = $public_key|0;
 $private_key = $private_key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $rsa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $public_key;
 $2 = $private_key;
 $3 = (_FIPS_rsa_new()|0); //@line 23 "rsasign.c"
 $rsa = $3; //@line 23 "rsasign.c"
 $4 = $rsa; //@line 25 "rsasign.c"
 $5 = (_FIPS_rsa_generate_key_ex($4,2048,0,0)|0); //@line 25 "rsasign.c"
 $6 = ($5|0)!=(1); //@line 25 "rsasign.c"
 if ($6) {
  $0 = 1; //@line 26 "rsasign.c"
  $8 = $0; //@line 32 "rsasign.c"
  STACKTOP = sp;return ($8|0); //@line 32 "rsasign.c"
 } else {
  $7 = $rsa; //@line 29 "rsasign.c"
  _FIPS_rsa_free($7); //@line 29 "rsasign.c"
  $0 = 0; //@line 31 "rsasign.c"
  $8 = $0; //@line 32 "rsasign.c"
  STACKTOP = sp;return ($8|0); //@line 32 "rsasign.c"
 }
 return (0)|0;
}
function _rsasignjs_sign($signature,$message,$message_len,$private_key) {
 $signature = $signature|0;
 $message = $message|0;
 $message_len = $message_len|0;
 $private_key = $private_key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $signature;
 $1 = $message;
 $2 = $message_len;
 $3 = $private_key;
 STACKTOP = sp;return 0; //@line 40 "rsasign.c"
}
function _rsasignjs_verify($signature,$message,$message_len,$public_key) {
 $signature = $signature|0;
 $message = $message|0;
 $message_len = $message_len|0;
 $public_key = $public_key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $signature;
 $1 = $message;
 $2 = $message_len;
 $3 = $public_key;
 STACKTOP = sp;return 1; //@line 49 "rsasign.c"
}
function _rsasignjs_init($seed,$seed_len) {
 $seed = $seed|0;
 $seed_len = $seed_len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $private_key = 0, $public_key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $seed;
 $1 = $seed_len;
 $2 = $0; //@line 53 "rsasign.c"
 $3 = $1; //@line 53 "rsasign.c"
 (_FIPS_x931_seed($2,$3)|0); //@line 53 "rsasign.c"
 $4 = $public_key; //@line 58 "rsasign.c"
 $5 = $private_key; //@line 59 "rsasign.c"
 (_rsasignjs_keypair($4,$5)|0); //@line 57 "rsasign.c"
 $6 = $public_key; //@line 61 "rsasign.c"
 _free($6); //@line 61 "rsasign.c"
 $7 = $private_key; //@line 62 "rsasign.c"
 _free($7); //@line 62 "rsasign.c"
 STACKTOP = sp;return; //@line 63 "rsasign.c"
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2092>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 2140;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (7991 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 8079;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 8079;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 8079;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = +0, $$01 = +0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = +0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = +0, $7 = +0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != +0;
  if ($5) {
   $6 = $x * +1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = +0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[2092>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((21|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $8 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $8 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $8;
   $9 = $6;
   $10 = (($7) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 31]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 31]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 31]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $32 = ($33|0)==(0);
  if (!($32)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _cleanup392($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = +0, $$1$i = +0, $$114$i = 0, $$2$i = +0, $$20$i = +0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = +0, $$31$i = 0;
 var $$311$i = 0, $$4$i = +0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = +0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = +0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = +0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = +0, $392 = +0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = +0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = +0, $412 = +0, $413 = +0, $414 = +0, $415 = +0, $416 = +0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = +0, $443 = +0, $444 = +0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = +0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = +0, $486 = +0, $487 = +0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = +0, $597 = +0, $598 = 0;
 var $599 = +0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = +0, $round6$1$i = +0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = +0, $small$1$i = +0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0;
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $66 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $66 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $66 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $65 = ($66<<24>>24)==(42);
  do {
   if ($65) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $66 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((9891 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 10371;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 10371;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 10371;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 10371 : (10373);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (10372);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 10371;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 10371;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 10381;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 10388;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (10389) : (10394);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (10391);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * +2;
      $393 = $392 != +0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = +8;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * +16;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (10355 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * +16;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == +0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != +0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * +268435456;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$481 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$481 = $$pre179$i;
      }
      $480 = ($481|0)<(0);
      $$31$i = $480 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * +1.0E+9;
       $488 = $487 != +0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $491 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $490 = ($491|0)>(29);
        $492 = $490 ? 29 : $491;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $491 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? +9007199254740992 : +9007199254740994;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = +0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = +1;
             break;
            }
           }
           $small$0$i = +1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(10423,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(10423,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 10407 : 10411;
      $379 = ($$07$i != $$07$i) | (+0 != +0);
      $380 = $377 ? 10415 : 10419;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 10371;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10371;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (10355 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10371;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (10371 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 10371;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $793 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $792 = ($793|0)<(10);
       if ($792) {
        $i$398 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = +0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = +0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[2256>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (2296 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (2296 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[2256>>2] = $22;
     } else {
      $23 = HEAP32[(2272)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(2264)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (2296 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (2296 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[2256>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(2272)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(2264)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(2276)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (2296 + ($92<<2)|0);
      $94 = HEAP32[2256>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[2256>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (2296 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (2296 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(2272)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(2264)>>2] = $81;
     HEAP32[(2276)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(2260)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (2560 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(2272)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (2560 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(2260)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(2260)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(2272)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(2272)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(2272)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(2264)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(2276)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (2296 + ($229<<2)|0);
       $231 = HEAP32[2256>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[2256>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (2296 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (2296 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(2272)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(2264)>>2] = $rsize$0$i$lcssa;
      HEAP32[(2276)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(2260)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (2560 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (2560 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(2264)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(2272)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (2560 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(2260)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(2260)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(2272)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(2272)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(2272)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (2296 + ($424<<2)|0);
          $426 = HEAP32[2256>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[2256>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (2296 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (2296 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(2272)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (2560 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(2260)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(2260)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(2272)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(2272)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(2264)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(2276)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(2276)>>2] = $514;
   HEAP32[(2264)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(2264)>>2] = 0;
   HEAP32[(2276)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(2268)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(2268)>>2] = $528;
  $529 = HEAP32[(2280)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(2280)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[2728>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(2736)>>2] = $538;
    HEAP32[(2732)>>2] = $538;
    HEAP32[(2740)>>2] = -1;
    HEAP32[(2744)>>2] = -1;
    HEAP32[(2748)>>2] = 0;
    HEAP32[(2700)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[2728>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(2736)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(2696)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(2688)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(2700)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(2280)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (2704);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(2268)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(2732)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(2688)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(2696)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(2736)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(2700)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(2700)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(2688)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(2688)>>2] = $632;
  $633 = HEAP32[(2692)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(2692)>>2] = $632;
  }
  $635 = HEAP32[(2280)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(2272)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(2272)>>2] = $tbase$255$i;
    }
    HEAP32[(2704)>>2] = $tbase$255$i;
    HEAP32[(2708)>>2] = $tsize$254$i;
    HEAP32[(2716)>>2] = 0;
    $640 = HEAP32[2728>>2]|0;
    HEAP32[(2292)>>2] = $640;
    HEAP32[(2288)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (2296 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (2296 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (2296 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(2280)>>2] = $654;
    HEAP32[(2268)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(2744)>>2]|0;
    HEAP32[(2284)>>2] = $659;
   } else {
    $sp$084$i = (2704);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(2268)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(2280)>>2] = $684;
       HEAP32[(2268)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(2744)>>2]|0;
       HEAP32[(2284)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(2272)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(2272)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (2704);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (2704);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(2268)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(2268)>>2] = $730;
        HEAP32[(2280)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(2276)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(2264)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(2264)>>2] = $736;
         HEAP32[(2276)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (2296 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[2256>>2]|0;
            $763 = $762 & $761;
            HEAP32[2256>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (2560 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(2260)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(2260)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(2272)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(2272)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(2272)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (2296 + ($840<<2)|0);
         $842 = HEAP32[2256>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[2256>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (2296 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (2296 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(2272)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (2560 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(2260)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(2260)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(2272)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(2272)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (2704);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(2280)>>2] = $953;
    HEAP32[(2268)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(2744)>>2]|0;
    HEAP32[(2284)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(2704)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(2704)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(2704)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(2704)+12>>2]|0;
    HEAP32[(2704)>>2] = $tbase$255$i;
    HEAP32[(2708)>>2] = $tsize$254$i;
    HEAP32[(2716)>>2] = 0;
    HEAP32[(2712)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (2296 + ($977<<2)|0);
      $979 = HEAP32[2256>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[2256>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (2296 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (2296 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(2272)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (2560 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(2260)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(2260)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(2272)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(2272)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(2268)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(2268)>>2] = $1062;
   $1063 = HEAP32[(2280)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(2280)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(2272)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(2276)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(2264)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (2296 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[2256>>2]|0;
     $36 = $35 & $34;
     HEAP32[2256>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (2560 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(2260)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(2260)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(2272)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(2272)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(2272)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(2280)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(2268)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(2268)>>2] = $120;
   HEAP32[(2280)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(2276)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(2276)>>2] = 0;
   HEAP32[(2264)>>2] = 0;
   return;
  }
  $125 = HEAP32[(2276)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(2264)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(2264)>>2] = $128;
   HEAP32[(2276)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (2296 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(2272)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[2256>>2]|0;
     $152 = $151 & $150;
     HEAP32[2256>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(2272)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(2272)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(2272)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (2560 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(2260)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(2260)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(2272)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(2272)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(2272)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(2276)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(2264)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (2296 + ($233<<2)|0);
  $235 = HEAP32[2256>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[2256>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (2296 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (2296 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(2272)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (2560 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(2260)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(2260)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(2272)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(2272)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(2288)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(2288)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (2712);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(2288)>>2] = -1;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function jsCall_iiiiiiii_0(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_1(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_2(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_3(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_4(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_5(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_6(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_7(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
}


function jsCall_iiiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(0,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(1,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(2,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(3,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(4,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_5(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(5,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_6(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(6,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_7(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(7,a1|0,a2|0,a3|0,a4|0)|0;
}



function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function jsCall_viiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_2(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_3(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_4(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_5(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_6(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_7(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&31]()|0;
}


function jsCall_i_0() {
  
  return jsCall_i(0)|0;
}



function jsCall_i_1() {
  
  return jsCall_i(1)|0;
}



function jsCall_i_2() {
  
  return jsCall_i(2)|0;
}



function jsCall_i_3() {
  
  return jsCall_i(3)|0;
}



function jsCall_i_4() {
  
  return jsCall_i(4)|0;
}



function jsCall_i_5() {
  
  return jsCall_i(5)|0;
}



function jsCall_i_6() {
  
  return jsCall_i(6)|0;
}



function jsCall_i_7() {
  
  return jsCall_i(7)|0;
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}



function jsCall_vi_1(a1) {
  a1=a1|0;
  jsCall_vi(1,a1|0);
}



function jsCall_vi_2(a1) {
  a1=a1|0;
  jsCall_vi(2,a1|0);
}



function jsCall_vi_3(a1) {
  a1=a1|0;
  jsCall_vi(3,a1|0);
}



function jsCall_vi_4(a1) {
  a1=a1|0;
  jsCall_vi(4,a1|0);
}



function jsCall_vi_5(a1) {
  a1=a1|0;
  jsCall_vi(5,a1|0);
}



function jsCall_vi_6(a1) {
  a1=a1|0;
  jsCall_vi(6,a1|0);
}



function jsCall_vi_7(a1) {
  a1=a1|0;
  jsCall_vi(7,a1|0);
}



function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function jsCall_vii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(0,a1|0,a2|0);
}



function jsCall_vii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(1,a1|0,a2|0);
}



function jsCall_vii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(2,a1|0,a2|0);
}



function jsCall_vii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(3,a1|0,a2|0);
}



function jsCall_vii_4(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(4,a1|0,a2|0);
}



function jsCall_vii_5(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(5,a1|0,a2|0);
}



function jsCall_vii_6(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(6,a1|0,a2|0);
}



function jsCall_vii_7(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(7,a1|0,a2|0);
}



function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function jsCall_iiiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_5(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_6(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_7(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&31](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function jsCall_ii_2(a1) {
  a1=a1|0;
  return jsCall_ii(2,a1|0)|0;
}



function jsCall_ii_3(a1) {
  a1=a1|0;
  return jsCall_ii(3,a1|0)|0;
}



function jsCall_ii_4(a1) {
  a1=a1|0;
  return jsCall_ii(4,a1|0)|0;
}



function jsCall_ii_5(a1) {
  a1=a1|0;
  return jsCall_ii(5,a1|0)|0;
}



function jsCall_ii_6(a1) {
  a1=a1|0;
  return jsCall_ii(6,a1|0)|0;
}



function jsCall_ii_7(a1) {
  a1=a1|0;
  return jsCall_ii(7,a1|0)|0;
}



function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(2,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(3,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(4,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_5(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(5,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_6(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(6,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_7(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(7,a1|0,a2|0,a3|0)|0;
}



function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function jsCall_viii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(0,a1|0,a2|0,a3|0);
}



function jsCall_viii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(1,a1|0,a2|0,a3|0);
}



function jsCall_viii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(2,a1|0,a2|0,a3|0);
}



function jsCall_viii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(3,a1|0,a2|0,a3|0);
}



function jsCall_viii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(4,a1|0,a2|0,a3|0);
}



function jsCall_viii_5(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(5,a1|0,a2|0,a3|0);
}



function jsCall_viii_6(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(6,a1|0,a2|0,a3|0);
}



function jsCall_viii_7(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(7,a1|0,a2|0,a3|0);
}



function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}


function jsCall_viiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(0,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(1,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(2,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(3,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(4,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_5(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(5,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_6(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(6,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_7(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(7,a1|0,a2|0,a3|0,a4|0);
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function jsCall_iii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(1,a1|0,a2|0)|0;
}



function jsCall_iii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(2,a1|0,a2|0)|0;
}



function jsCall_iii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(3,a1|0,a2|0)|0;
}



function jsCall_iii_4(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(4,a1|0,a2|0)|0;
}



function jsCall_iii_5(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(5,a1|0,a2|0)|0;
}



function jsCall_iii_6(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(6,a1|0,a2|0)|0;
}



function jsCall_iii_7(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(7,a1|0,a2|0)|0;
}



function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&31](a1|0,a2|0,+a3)|0;
}


function jsCall_iiid_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=+a3;
  return jsCall_iiid(0,a1|0,a2|0,+a3)|0;
}



function jsCall_iiid_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=+a3;
  return jsCall_iiid(1,a1|0,a2|0,+a3)|0;
}



function jsCall_iiid_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=+a3;
  return jsCall_iiid(2,a1|0,a2|0,+a3)|0;
}



function jsCall_iiid_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=+a3;
  return jsCall_iiid(3,a1|0,a2|0,+a3)|0;
}



function jsCall_iiid_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=+a3;
  return jsCall_iiid(4,a1|0,a2|0,+a3)|0;
}



function jsCall_iiid_5(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=+a3;
  return jsCall_iiid(5,a1|0,a2|0,+a3)|0;
}



function jsCall_iiid_6(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=+a3;
  return jsCall_iiid(6,a1|0,a2|0,+a3)|0;
}



function jsCall_iiid_7(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=+a3;
  return jsCall_iiid(7,a1|0,a2|0,+a3)|0;
}



function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function jsCall_iiiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_2(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_3(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_4(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_5(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_6(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_7(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(0);return 0;
}
function b1(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(1);return 0;
}
function b2(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(2);
}
function b3() {
 ; abort(3);return 0;
}
function b4(p0) {
 p0 = p0|0; abort(4);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(5);
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(6);return 0;
}
function b7(p0) {
 p0 = p0|0; abort(7);return 0;
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(8);return 0;
}
function b9(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(9);
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(10);
}
function b11(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(11);return 0;
}
function b12(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; abort(12);return 0;
}
function b13(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(13);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,jsCall_iiiiiiii_0,jsCall_iiiiiiii_1,jsCall_iiiiiiii_2,jsCall_iiiiiiii_3,jsCall_iiiiiiii_4,jsCall_iiiiiiii_5,jsCall_iiiiiiii_6,jsCall_iiiiiiii_7,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_iiiii = [b1,jsCall_iiiii_0,jsCall_iiiii_1,jsCall_iiiii_2,jsCall_iiiii_3,jsCall_iiiii_4,jsCall_iiiii_5,jsCall_iiiii_6,jsCall_iiiii_7,b1,b1,b1,b1,b1,b1,b1,b1,b1,_ecdsa_sign_setup,_ecdsa_do_verify,_RSA_eay_mod_exp,_FIPS_bn_pseudo_rand,_FIPS_bn_rand,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,jsCall_viiiii_0,jsCall_viiiii_1,jsCall_viiiii_2,jsCall_viiiii_3,jsCall_viiiii_4,jsCall_viiiii_5,jsCall_viiiii_6,jsCall_viiiii_7,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_i = [b3,jsCall_i_0,jsCall_i_1,jsCall_i_2,jsCall_i_3,jsCall_i_4,jsCall_i_5,jsCall_i_6,jsCall_i_7,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,jsCall_vi_0,jsCall_vi_1,jsCall_vi_2,jsCall_vi_3,jsCall_vi_4,jsCall_vi_5,jsCall_vi_6,jsCall_vi_7,b4,b4,b4,b4,b4,b4,b4,b4,b4,_fips_free_def,_ec_pre_comp_free,_ec_pre_comp_clear_free,_cleanup392,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,jsCall_vii_0,jsCall_vii_1,jsCall_vii_2,jsCall_vii_3,jsCall_vii_4,jsCall_vii_5,jsCall_vii_6,jsCall_vii_7,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,jsCall_iiiiiii_0,jsCall_iiiiiii_1,jsCall_iiiiiii_2,jsCall_iiiiiii_3,jsCall_iiiiiii_4,jsCall_iiiiiii_5,jsCall_iiiiiii_6,jsCall_iiiiiii_7,b6,b6,b6,b6,b6,b6,b6,b6,b6,_fips_bn_mod_exp_mont,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_ii = [b7,jsCall_ii_0,jsCall_ii_1,jsCall_ii_2,jsCall_ii_3,jsCall_ii_4,jsCall_ii_5,jsCall_ii_6,jsCall_ii_7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_init,_init256,_RSA_eay_init,_RSA_eay_finish,_bad_init,___stdio_close,_ec_pre_comp_dup,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,jsCall_iiii_0,jsCall_iiii_1,jsCall_iiii_2,jsCall_iiii_3,jsCall_iiii_4,jsCall_iiii_5,jsCall_iiii_6,jsCall_iiii_7,b8,b8,b8,b8,b8,b8,b8,b8,b8,_update,_update256,_bad_update,_fips_malloc_def,___stdio_write,___stdio_seek,_fips_bn_sub,_fips_bn_add,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9,jsCall_viii_0,jsCall_viii_1,jsCall_viii_2,jsCall_viii_3,jsCall_viii_4,jsCall_viii_5,jsCall_viii_6,jsCall_viii_7,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,jsCall_viiii_0,jsCall_viiii_1,jsCall_viiii_2,jsCall_viiii_3,jsCall_viiii_4,jsCall_viiii_5,jsCall_viiii_6,jsCall_viiii_7,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_iii = [b11,jsCall_iii_0,jsCall_iii_1,jsCall_iii_2,jsCall_iii_3,jsCall_iii_4,jsCall_iii_5,jsCall_iii_6,jsCall_iii_7,b11,b11,b11,b11,b11,b11,b11,b11,b11,_final,_final256,_bad_final,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_iiid = [b12,jsCall_iiid_0,jsCall_iiid_1,jsCall_iiid_2,jsCall_iiid_3,jsCall_iiid_4,jsCall_iiid_5,jsCall_iiid_6,jsCall_iiid_7,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_iiiiii = [b13,jsCall_iiiiii_0,jsCall_iiiiii_1,jsCall_iiiiii_2,jsCall_iiiiii_3,jsCall_iiiiii_4,jsCall_iiiiii_5,jsCall_iiiiii_6,jsCall_iiiiii_7,b13,b13,b13,b13,b13,b13,b13,b13,b13,_ecdsa_do_sign,_RSA_eay_public_encrypt,_RSA_eay_public_decrypt,_RSA_eay_private_encrypt,_RSA_eay_private_decrypt,b13,b13,b13,b13,b13,b13
,b13,b13,b13];

  return { _rsasignjs_public_key_bytes: _rsasignjs_public_key_bytes, _rsasignjs_init: _rsasignjs_init, _i64Subtract: _i64Subtract, _free: _free, _rsasignjs_verify: _rsasignjs_verify, _rsasignjs_secret_key_bytes: _rsasignjs_secret_key_bytes, _i64Add: _i64Add, _rsasignjs_signature_bytes: _rsasignjs_signature_bytes, _memset: _memset, _rsasignjs_keypair: _rsasignjs_keypair, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _rsasignjs_sign: _rsasignjs_sign, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_iii: dynCall_iii, dynCall_iiid: dynCall_iiid, dynCall_iiiiii: dynCall_iiiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _rsasignjs_public_key_bytes = Module["_rsasignjs_public_key_bytes"] = asm["_rsasignjs_public_key_bytes"];
var _rsasignjs_init = Module["_rsasignjs_init"] = asm["_rsasignjs_init"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _rsasignjs_verify = Module["_rsasignjs_verify"] = asm["_rsasignjs_verify"];
var _rsasignjs_secret_key_bytes = Module["_rsasignjs_secret_key_bytes"] = asm["_rsasignjs_secret_key_bytes"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _rsasignjs_signature_bytes = Module["_rsasignjs_signature_bytes"] = asm["_rsasignjs_signature_bytes"];
var _memset = Module["_memset"] = asm["_memset"];
var _rsasignjs_keypair = Module["_rsasignjs_keypair"] = asm["_rsasignjs_keypair"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _rsasignjs_sign = Module["_rsasignjs_sign"] = asm["_rsasignjs_sign"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_i64Subtract","_i64Add","_memset","_bitshift64Lshr","_bitshift64Shl","_memcpy","_bitshift64Ashr","_llvm_cttz_i32"]


;

function dataReturn (returnValue, result) {
	if (returnValue === 0) {
		return result;
	}
	else {
		throw new Error('RSA error: ' + returnValue);
	}
}

function dataResult (buffer, bytes) {
	return new Uint8Array(
		new Uint8Array(Module.HEAPU8.buffer, buffer, bytes)
	);
}

function dataFree (buffer) {
	try {
		Module._free(buffer);
	}
	catch (_) {}
}

function dereferenceNumber (buffer) {
	return new Uint32Array(Module.HEAPU32.buffer, buffer, 1)[0];
}


var seedLength	= 512;
var seed		= Module._malloc(seedLength);
crypto.getRandomValues(new Uint8Array(Module.HEAPU8.buffer, seed, seedLength));
Module._rsasignjs_init(seed, seedLength);
Module._free(seed);


var rsaSign	= {
	publicKeyLength: Module._rsasignjs_public_key_bytes(),
	privateKeyLength: Module._rsasignjs_secret_key_bytes(),
	signatureLength: Module._rsasignjs_signature_bytes(),

	keyPair: function () {
		var publicKeyBuffer;
		var publicKeyBufferBuffer	= Module._malloc(4);

		var privateKeyBuffer;
		var privateKeyBufferBuffer	= Module._malloc(4);

		try {
			var returnValue	= Module._rsasignjs_keypair(
				publicKeyBufferBuffer,
				privateKeyBufferBuffer
			);

			publicKeyBuffer		= dereferenceNumber(publicKeyBufferBuffer);
			privateKeyBuffer	= dereferenceNumber(privateKeyBufferBuffer);

			return dataReturn(returnValue, {
				publicKey: dataResult(
					publicKeyBuffer,
					rsaSign.publicKeyLength
				),
				privateKey: dataResult(
					privateKeyBuffer,
					rsaSign.privateKeyLength
				)
			});
		}
		finally {
			dataFree(publicKeyBuffer);
			dataFree(publicKeyBufferBuffer);
			dataFree(privateKeyBuffer);
			dataFree(privateKeyBufferBuffer);
		}
	},

	sign: function (message, privateKey) {
		var signature	= rsaSign.signDetached(message, privateKey);
		var signed		= new Uint8Array(rsaSign.signatureLength + message.length);
		signed.set(signature);
		signed.set(message, rsaSign.signatureLength);
		return signed;
	},

	signDetached: function (message, privateKey) {
		var signatureBuffer		= Module._malloc(rsaSign.signatureLength);
		var messageBuffer		= Module._malloc(message.length);
		var privateKeyBuffer	= Module._malloc(rsaSign.privateKeyLength);

		Module.writeArrayToMemory(message, messageBuffer);
		Module.writeArrayToMemory(privateKey, privateKeyBuffer);

		try {
			var returnValue	= Module._rsasignjs_sign(
				signatureBuffer,
				messageBuffer,
				message.length,
				privateKeyBuffer
			);

			return dataReturn(
				returnValue,
				dataResult(signatureBuffer, rsaSign.signatureLength)
			);
		}
		finally {
			dataFree(signatureBuffer);
			dataFree(messageBuffer);
			dataFree(privateKeyBuffer);
		}
	},

	open: function (signed, publicKey) {
		var signature	= new Uint8Array(signed.buffer, 0, rsaSign.signatureLength);
		var message		= new Uint8Array(signed.buffer, rsaSign.signatureLength);

		if (rsaSign.verifyDetached(signature, message, publicKey)) {
			return message;
		}
		else {
			dataResult('Invalid signature.');
		}
	},

	verifyDetached: function (signature, message, publicKey) {
		var signatureBuffer	= Module._malloc(rsaSign.signatureLength);
		var messageBuffer	= Module._malloc(message.length);
		var publicKeyBuffer	= Module._malloc(rsaSign.publicKeyLength);

		Module.writeArrayToMemory(signature, signatureBuffer);
		Module.writeArrayToMemory(message, messageBuffer);
		Module.writeArrayToMemory(publicKey, publicKeyBuffer);

		try {
			return Module._rsasignjs_verify(
				signatureBuffer,
				messageBuffer,
				message.length,
				publicKeyBuffer
			) === 1;
		}
		finally {
			dataFree(signatureBuffer);
			dataFree(messageBuffer);
			dataFree(publicKeyBuffer);
		}
	}
};



return rsaSign;

}());

self.rsaSign	= rsaSign;

//# sourceMappingURL=rsa-sign.debug.js.map