var rsaSign = (function () { 

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  throw 'NO_DYNAMIC_EXECUTION was set, cannot eval';
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 1*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-1)/1] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    abort('NO_DYNAMIC_EXECUTION was set, cannot eval - ccall/cwrap are not functional');
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  // NO_DYNAMIC_EXECUTION is on, so we can't use the fast version of cwrap.
  // Fall back to returning a bound version of ccall.
  cwrap = function cwrap(ident, returnType, argTypes) {
    return function() {
      return ccall(ident, returnType, argTypes, arguments);
    }
  }
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 52443072;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 117440512;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function() { { return Module.getRandomValue(); } },
 function() { { if (Module.getRandomValue === undefined) { try { var window_ = "object" === typeof window ? window : self, crypto_ = typeof window_.crypto !== "undefined" ? window_.crypto : window_.msCrypto, randomValuesStandard = function() { var buf = new Uint32Array(1); crypto_.getRandomValues(buf); return buf[0] >>> 0; }; randomValuesStandard(); Module.getRandomValue = randomValuesStandard; } catch (e) { try { var crypto = require('crypto'), randomValueNodeJS = function() { var buf = crypto.randomBytes(4); return (buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3]) >>> 0; }; randomValueNodeJS(); Module.getRandomValue = randomValueNodeJS; } catch (e) { throw 'No secure random number generator found'; } } } } }];

function _emscripten_asm_const_0(code) {
 return ASM_CONSTS[code]();
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 93536;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

  var _BDtoIHigh=true;

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _abort() {
      Module['abort']();
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_asm_const=true;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _BItoD=true;

  var _emscripten_asm_const_int=true;

  
  var PATH=undefined;
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) ___syscall146.buffer = [];
      var buffer = ___syscall146.buffer;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          var curr = HEAPU8[ptr+j];
          if (curr === 0 || curr === 10) {
            Module['print'](UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6,a7);
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiii(index,a1,a2,a3,a4,a5) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_i(index) {
    return Runtime.functionPointers[index]();
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6,a7,a8,a9);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vii(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viii(index,a1,a2,a3) {
    Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_v(index) {
    Runtime.functionPointers[index]();
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6,a7,a8);
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiii(index,a1,a2,a3,a4) {
    return Runtime.functionPointers[index](a1,a2,a3,a4);
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiiii(index,a1,a2,a3,a4,a5) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    Runtime.functionPointers[index](a1,a2,a3,a4);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiiiiiii": invoke_iiiiiiii, "jsCall_iiiiiiii": jsCall_iiiiiiii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "invoke_viiiii": invoke_viiiii, "jsCall_viiiii": jsCall_viiiii, "invoke_i": invoke_i, "jsCall_i": jsCall_i, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "jsCall_iiiiiiiiii": jsCall_iiiiiiiiii, "invoke_vii": invoke_vii, "jsCall_vii": jsCall_vii, "invoke_iiiiiii": invoke_iiiiiii, "jsCall_iiiiiii": jsCall_iiiiiii, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_viii": invoke_viii, "jsCall_viii": jsCall_viii, "invoke_v": invoke_v, "jsCall_v": jsCall_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "jsCall_iiiiiiiii": jsCall_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "jsCall_iiiii": jsCall_iiiii, "invoke_viiiiii": invoke_viiiiii, "jsCall_viiiiii": jsCall_viiiiii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_iiiiii": invoke_iiiiii, "jsCall_iiiiii": jsCall_iiiiii, "invoke_viiii": invoke_viiii, "jsCall_viiii": jsCall_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_self": _pthread_self, "___syscall6": ___syscall6, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_abort": _abort, "_sbrk": _sbrk, "_time": _time, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall140": ___syscall140, "_sysconf": _sysconf, "___syscall146": ___syscall146, "_emscripten_asm_const_0": _emscripten_asm_const_0, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var jsCall_iiiiiiii=env.jsCall_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var invoke_viiiii=env.invoke_viiiii;
  var jsCall_viiiii=env.jsCall_viiiii;
  var invoke_i=env.invoke_i;
  var jsCall_i=env.jsCall_i;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var jsCall_iiiiiiiiii=env.jsCall_iiiiiiiiii;
  var invoke_vii=env.invoke_vii;
  var jsCall_vii=env.jsCall_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var jsCall_iiiiiii=env.jsCall_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_viii=env.invoke_viii;
  var jsCall_viii=env.jsCall_viii;
  var invoke_v=env.invoke_v;
  var jsCall_v=env.jsCall_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var jsCall_iiiiiiiii=env.jsCall_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var jsCall_iiiii=env.jsCall_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var jsCall_viiiiii=env.jsCall_viiiiii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var jsCall_iiiiii=env.jsCall_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var jsCall_viiii=env.jsCall_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_self=env._pthread_self;
  var ___syscall6=env.___syscall6;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _abort=env._abort;
  var _sbrk=env._sbrk;
  var _time=env._time;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall140=env.___syscall140;
  var _sysconf=env._sysconf;
  var ___syscall146=env.___syscall146;
  var _emscripten_asm_const_0=env._emscripten_asm_const_0;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _randombytes_random() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _emscripten_asm_const_0(0)|0; //@line 59 "libsodium/src/libsodium/randombytes/randombytes.c"
 return ($0|0); //@line 59 "libsodium/src/libsodium/randombytes/randombytes.c"
}
function _randombytes_stir() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_0(1); //@line 73 "libsodium/src/libsodium/randombytes/randombytes.c"
 return; //@line 101 "libsodium/src/libsodium/randombytes/randombytes.c"
}
function _randombytes_buf($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $buf;
 $1 = $size;
 $2 = $0; //@line 141 "libsodium/src/libsodium/randombytes/randombytes.c"
 $p = $2; //@line 141 "libsodium/src/libsodium/randombytes/randombytes.c"
 $i = 0; //@line 144 "libsodium/src/libsodium/randombytes/randombytes.c"
 while(1) {
  $3 = $i; //@line 144 "libsodium/src/libsodium/randombytes/randombytes.c"
  $4 = $1; //@line 144 "libsodium/src/libsodium/randombytes/randombytes.c"
  $5 = ($3>>>0)<($4>>>0); //@line 144 "libsodium/src/libsodium/randombytes/randombytes.c"
  if (!($5)) {
   break;
  }
  $6 = (_randombytes_random()|0); //@line 145 "libsodium/src/libsodium/randombytes/randombytes.c"
  $7 = $6&255; //@line 145 "libsodium/src/libsodium/randombytes/randombytes.c"
  $8 = $i; //@line 145 "libsodium/src/libsodium/randombytes/randombytes.c"
  $9 = $p; //@line 145 "libsodium/src/libsodium/randombytes/randombytes.c"
  $10 = (($9) + ($8)|0); //@line 145 "libsodium/src/libsodium/randombytes/randombytes.c"
  HEAP8[$10>>0] = $7; //@line 145 "libsodium/src/libsodium/randombytes/randombytes.c"
  $11 = $i; //@line 144 "libsodium/src/libsodium/randombytes/randombytes.c"
  $12 = (($11) + 1)|0; //@line 144 "libsodium/src/libsodium/randombytes/randombytes.c"
  $i = $12; //@line 144 "libsodium/src/libsodium/randombytes/randombytes.c"
 }
 STACKTOP = sp;return; //@line 148 "libsodium/src/libsodium/randombytes/randombytes.c"
}
function _CRYPTO_lock($mode,$type,$file,$line) {
 $mode = $mode|0;
 $type = $type|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)<(0);
 if (!($0)) {
  $23 = HEAP32[8>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   return;
  }
  FUNCTION_TABLE_viiii[$23 & 31]($mode,$type,$file,$line);
  return;
 }
 $1 = HEAP32[20>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = $type ^ -1;
 $4 = HEAP32[8>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  FUNCTION_TABLE_viiii[$4 & 31](9,29,58591,342);
 }
 $6 = HEAP32[12>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (_sk_num($6)|0);
  $9 = ($8|0)>($3|0);
  if ($9) {
   $10 = HEAP32[12>>2]|0;
   $11 = (_sk_value($10,$3)|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP32[$11>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[$11>>2] = $14;
    $15 = HEAP32[8>>2]|0;
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     FUNCTION_TABLE_viiii[$15 & 31](10,29,58591,349);
    }
    $19 = ((($11)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     _OpenSSLDie(58591,589,58602);
     // unreachable;
    }
    $22 = HEAP32[20>>2]|0;
    FUNCTION_TABLE_viiii[$22 & 31]($mode,$20,$file,$line);
    _CRYPTO_destroy_dynlockid($type);
    return;
   }
  }
 }
 $17 = HEAP32[8>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  _OpenSSLDie(58591,589,58602);
  // unreachable;
 }
 FUNCTION_TABLE_viiii[$17 & 31](10,29,58591,349);
 _OpenSSLDie(58591,589,58602);
 // unreachable;
}
function _CRYPTO_destroy_dynlockid($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$ = 0, $pointer$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0);
 $1 = $i ^ -1;
 $i$ = $0 ? 0 : $1;
 $2 = HEAP32[16>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[8>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  FUNCTION_TABLE_viiii[$4 & 31](9,29,58591,307);
 }
 $6 = HEAP32[12>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (_sk_num($6)|0);
  $9 = ($i$|0)<($8|0);
  if ($9) {
   $12 = HEAP32[12>>2]|0;
   $13 = (_sk_value($12,$i$)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $pointer$0 = $13;
   } else {
    $15 = HEAP32[$13>>2]|0;
    $16 = (($15) + -1)|0;
    HEAP32[$13>>2] = $16;
    $17 = ($15|0)<(2);
    if ($17) {
     $18 = HEAP32[12>>2]|0;
     (_sk_set($18,$i$,0)|0);
     $pointer$0 = $13;
    } else {
     $pointer$0 = 0;
    }
   }
   $19 = HEAP32[8>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    FUNCTION_TABLE_viiii[$19 & 31](10,29,58591,328);
   }
   $21 = ($pointer$0|0)==(0|0);
   if ($21) {
    return;
   }
   $22 = HEAP32[16>>2]|0;
   $23 = ((($pointer$0)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viii[$22 & 31]($24,58591,331);
   _CRYPTO_free($pointer$0);
   return;
  }
 }
 $10 = HEAP32[8>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 FUNCTION_TABLE_viiii[$10 & 31](10,29,58591,310);
 return;
}
function _CRYPTO_THREADID_current($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[28>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  FUNCTION_TABLE_vi[$0 & 63]($id);
  return;
 }
 $2 = HEAP32[32>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $10 = (___errno_location()|0);
  $11 = ((($id)) + 4|0);
  $12 = $id;
  $13 = $12;
  HEAP32[$13>>2] = 0;
  $14 = (($12) + 4)|0;
  $15 = $14;
  HEAP32[$15>>2] = 0;
  HEAP32[$id>>2] = $10;
  $16 = $10;
  HEAP32[$11>>2] = $16;
  return;
 } else {
  $4 = (FUNCTION_TABLE_i[$2 & 31]()|0);
  $5 = $id;
  $6 = $5;
  HEAP32[$6>>2] = 0;
  $7 = (($5) + 4)|0;
  $8 = $7;
  HEAP32[$8>>2] = 0;
  $9 = ((($id)) + 4|0);
  HEAP32[$9>>2] = $4;
  return;
 }
}
function _CRYPTO_THREADID_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($a,$b,8)|0);
 return ($0|0);
}
function _CRYPTO_THREADID_cpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $src;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $dest;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function _CRYPTO_THREADID_hash($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($id)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _OpenSSLDie($file,$line,$assertion) {
 $file = $file|0;
 $line = $line|0;
 $assertion = $assertion|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $file;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $line;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $assertion;
 _OPENSSL_showfatal(58618,$vararg_buffer);
 _abort();
 // unreachable;
}
function _CRYPTO_add_lock($pointer,$amount,$type,$file,$line) {
 $pointer = $pointer|0;
 $amount = $amount|0;
 $type = $type|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,$type,$file,$line);
  $3 = HEAP32[$pointer>>2]|0;
  $4 = (($3) + ($amount))|0;
  HEAP32[$pointer>>2] = $4;
  _CRYPTO_lock(10,$type,$file,$line);
  $ret$0 = $4;
  return ($ret$0|0);
 } else {
  $2 = (FUNCTION_TABLE_iiiiii[$0 & 63]($pointer,$amount,$type,$file,$line)|0);
  $ret$0 = $2;
  return ($ret$0|0);
 }
 return (0)|0;
}
function _OPENSSL_showfatal($fmta,$varargs) {
 $fmta = $fmta|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[53136>>2]|0;
 (_vfprintf($0,$fmta,$ap)|0);
 STACKTOP = sp;return;
}
function _CRYPTO_memcmp($in_a,$in_b,$len) {
 $in_a = $in_a|0;
 $in_b = $in_b|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $i$01 = 0, $x$0$lcssa = 0, $x$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  $x$0$lcssa = 0;
  $8 = $x$0$lcssa&255;
  return ($8|0);
 } else {
  $i$01 = 0;$x$02 = 0;
 }
 while(1) {
  $1 = (($in_a) + ($i$01)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = (($in_b) + ($i$01)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 ^ $2;
  $6 = $5 | $x$02;
  $7 = (($i$01) + 1)|0;
  $exitcond = ($7|0)==($len|0);
  if ($exitcond) {
   $x$0$lcssa = $6;
   break;
  } else {
   $i$01 = $7;$x$02 = $6;
  }
 }
 $8 = $x$0$lcssa&255;
 return ($8|0);
}
function _CRYPTO_new_ex_data($class_index,$obj,$ad) {
 $class_index = $class_index|0;
 $obj = $obj|0;
 $ad = $ad|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[36>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,2,58672,201);
  $2 = HEAP32[36>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   HEAP32[36>>2] = 40;
  }
  _CRYPTO_lock(10,2,58672,204);
  $$pre = HEAP32[36>>2]|0;
  $5 = $$pre;
 } else {
  $5 = $0;
 }
 $4 = ((($5)) + 12|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$6 & 63]($class_index,$obj,$ad)|0);
 return ($7|0);
}
function _CRYPTO_free_ex_data($class_index,$obj,$ad) {
 $class_index = $class_index|0;
 $obj = $obj|0;
 $ad = $ad|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[36>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,2,58672,201);
  $2 = HEAP32[36>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   HEAP32[36>>2] = 40;
  }
  _CRYPTO_lock(10,2,58672,204);
  $$pre = HEAP32[36>>2]|0;
  $5 = $$pre;
 } else {
  $5 = $0;
 }
 $4 = ((($5)) + 20|0);
 $6 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viii[$6 & 31]($class_index,$obj,$ad);
 return;
}
function _CRYPTO_set_ex_data($ad,$idx,$val) {
 $ad = $ad|0;
 $idx = $idx|0;
 $val = $val|0;
 var $$0 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ad>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_sk_new_null()|0);
  HEAP32[$ad>>2] = $2;
  $3 = ($2|0)==(0|0);
  if ($3) {
   _ERR_put_error(15,102,65,58672,615);
   $$0 = 0;
   return ($$0|0);
  } else {
   $$pre$phiZ2D = $ad;$4 = $2;
  }
 } else {
  $$pre$phiZ2D = $ad;$4 = $0;
 }
 $5 = (_sk_num($4)|0);
 $6 = ($5|0)>($idx|0);
 $7 = HEAP32[$$pre$phiZ2D>>2]|0;
 L7: do {
  if ($6) {
   $$lcssa = $7;
  } else {
   $11 = $7;$i$02 = $5;
   while(1) {
    $12 = (_sk_push($11,0)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     break;
    }
    $8 = (($i$02) + 1)|0;
    $9 = ($i$02|0)<($idx|0);
    $10 = HEAP32[$$pre$phiZ2D>>2]|0;
    if ($9) {
     $11 = $10;$i$02 = $8;
    } else {
     $$lcssa = $10;
     break L7;
    }
   }
   _ERR_put_error(15,102,65,58672,623);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 (_sk_set($$lcssa,$idx,$val)|0);
 $$0 = 1;
 return ($$0|0);
}
function _int_new_class() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_lock(9,2,58672,385);
 $0 = HEAP32[68>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[68>>2] = $1;
 _CRYPTO_lock(10,2,58672,387);
 return ($0|0);
}
function _int_cleanup() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[64>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   _CRYPTO_lock(9,2,58672,278);
   $2 = HEAP32[64>>2]|0;
   $3 = ($2|0)==(0|0);
   if (!($3)) {
    _CRYPTO_lock(10,2,58672,281);
    break;
   }
   $4 = (_lh_new(60,79)|0);
   HEAP32[64>>2] = $4;
   $not$$i = ($4|0)==(0|0);
   _CRYPTO_lock(10,2,58672,281);
   if ($not$$i) {
    return;
   }
  }
 } while(0);
 $5 = HEAP32[64>>2]|0;
 _lh_doall($5,39);
 $6 = HEAP32[64>>2]|0;
 _lh_free($6);
 HEAP32[64>>2] = 0;
 HEAP32[36>>2] = 0;
 return;
}
function _int_get_new_index($class_index,$argl,$argp,$new_func,$dup_func,$free_func) {
 $class_index = $class_index|0;
 $argl = $argl|0;
 $argp = $argp|0;
 $new_func = $new_func|0;
 $dup_func = $dup_func|0;
 $free_func = $free_func|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $toret$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_def_get_class($class_index)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = (_CRYPTO_malloc(20,58672,354)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(15,104,65,58672,356);
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$2>>2] = $argl;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $argp;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = $new_func;
 $6 = ((($2)) + 16|0);
 HEAP32[$6>>2] = $dup_func;
 $7 = ((($2)) + 12|0);
 HEAP32[$7>>2] = $free_func;
 _CRYPTO_lock(9,2,58672,364);
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 8|0);
 while(1) {
  $10 = HEAP32[$8>>2]|0;
  $11 = (_sk_num($10)|0);
  $12 = HEAP32[$9>>2]|0;
  $13 = ($11|0)>($12|0);
  if ($13) {
   $$lcssa = $12;
   label = 8;
   break;
  }
  $14 = HEAP32[$8>>2]|0;
  $15 = (_sk_push($14,0)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  _ERR_put_error(15,104,65,58672,367);
  _CRYPTO_free($2);
  $toret$0$i = -1;
 }
 else if ((label|0) == 8) {
  $17 = (($$lcssa) + 1)|0;
  HEAP32[$9>>2] = $17;
  $18 = HEAP32[$8>>2]|0;
  (_sk_set($18,$$lcssa,$2)|0);
  $toret$0$i = $$lcssa;
 }
 _CRYPTO_lock(10,2,58672,375);
 $$0 = $toret$0$i;
 return ($$0|0);
}
function _int_new_ex_data($class_index,$obj,$ad) {
 $class_index = $class_index|0;
 $obj = $obj|0;
 $ad = $ad|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $i$04 = 0, $i$13 = 0;
 var $or$cond = 0, $storage$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_def_get_class($class_index)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$ad>>2] = 0;
 _CRYPTO_lock(5,2,58672,426);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sk_num($3)|0);
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = $4 << 2;
  $7 = (_CRYPTO_malloc($6,58672,429)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $storage$0 = $7;
  } else {
   $i$04 = 0;
   while(1) {
    $9 = HEAP32[$2>>2]|0;
    $10 = (_sk_value($9,$i$04)|0);
    $11 = (($7) + ($i$04<<2)|0);
    HEAP32[$11>>2] = $10;
    $12 = (($i$04) + 1)|0;
    $exitcond6 = ($12|0)==($4|0);
    if ($exitcond6) {
     $storage$0 = $7;
     break;
    } else {
     $i$04 = $12;
    }
   }
  }
 } else {
  $storage$0 = 0;
 }
 _CRYPTO_lock(6,2,58672,436);
 $13 = ($4|0)<(1);
 $14 = ($storage$0|0)!=(0|0);
 $or$cond = $13 | $14;
 if (!($or$cond)) {
  _ERR_put_error(15,108,65,58672,438);
  $$0 = 0;
  return ($$0|0);
 }
 if ($5) {
  $i$13 = 0;
  while(1) {
   $15 = (($storage$0) + ($i$13<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    $18 = ((($16)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $21 = HEAP32[$ad>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      $$0$i = 0;
     } else {
      $23 = (_sk_num($21)|0);
      $24 = ($23|0)>($i$13|0);
      if ($24) {
       $25 = HEAP32[$ad>>2]|0;
       $26 = (_sk_value($25,$i$13)|0);
       $$0$i = $26;
      } else {
       $$0$i = 0;
      }
     }
     $27 = HEAP32[$15>>2]|0;
     $28 = ((($27)) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$27>>2]|0;
     $31 = ((($27)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     (FUNCTION_TABLE_iiiiiii[$29 & 31]($obj,$$0$i,$ad,$i$13,$30,$32)|0);
    }
   }
   $33 = (($i$13) + 1)|0;
   $exitcond = ($33|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $i$13 = $33;
   }
  }
 }
 if (!($14)) {
  $$0 = 1;
  return ($$0|0);
 }
 _CRYPTO_free($storage$0);
 $$0 = 1;
 return ($$0|0);
}
function _int_dup_ex_data($class_index,$to,$from) {
 $class_index = $class_index|0;
 $to = $to|0;
 $from = $from|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond7 = 0, $i$04 = 0, $i$13 = 0, $or$cond = 0, $ptr = 0, $storage$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ptr = sp;
 $0 = HEAP32[$from>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_def_get_class($class_index)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_lock(5,2,58672,466);
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_sk_num($5)|0);
 $7 = HEAP32[$from>>2]|0;
 $8 = (_sk_num($7)|0);
 $9 = ($8|0)<($6|0);
 $$ = $9 ? $8 : $6;
 $10 = ($$|0)>(0);
 if ($10) {
  $11 = $$ << 2;
  $12 = (_CRYPTO_malloc($11,58672,472)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   $storage$0 = $12;
  } else {
   $14 = ($6|0)>($8|0);
   $15 = $14 ? $8 : $6;
   $i$04 = 0;
   while(1) {
    $16 = HEAP32[$4>>2]|0;
    $17 = (_sk_value($16,$i$04)|0);
    $18 = (($12) + ($i$04<<2)|0);
    HEAP32[$18>>2] = $17;
    $19 = (($i$04) + 1)|0;
    $exitcond7 = ($19|0)==($15|0);
    if ($exitcond7) {
     $storage$0 = $12;
     break;
    } else {
     $i$04 = $19;
    }
   }
  }
 } else {
  $storage$0 = 0;
 }
 _CRYPTO_lock(6,2,58672,479);
 $20 = ($$|0)<(1);
 $21 = ($storage$0|0)!=(0|0);
 $or$cond = $20 | $21;
 if (!($or$cond)) {
  _ERR_put_error(15,106,65,58672,481);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if ($10) {
  $22 = ($6|0)>($8|0);
  $23 = $22 ? $8 : $6;
  $i$13 = 0;
  while(1) {
   $24 = HEAP32[$from>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $$0$i = 0;
   } else {
    $26 = (_sk_num($24)|0);
    $27 = ($26|0)>($i$13|0);
    if ($27) {
     $28 = HEAP32[$from>>2]|0;
     $29 = (_sk_value($28,$i$13)|0);
     $$0$i = $29;
    } else {
     $$0$i = 0;
    }
   }
   HEAP32[$ptr>>2] = $$0$i;
   $30 = (($storage$0) + ($i$13<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if ($32) {
    $39 = $$0$i;
   } else {
    $33 = ((($31)) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     $39 = $$0$i;
    } else {
     $36 = HEAP32[$31>>2]|0;
     $37 = ((($31)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     (FUNCTION_TABLE_iiiiiii[$34 & 31]($to,$from,$ptr,$i$13,$36,$38)|0);
     $$pre = HEAP32[$ptr>>2]|0;
     $39 = $$pre;
    }
   }
   (_CRYPTO_set_ex_data($to,$i$13,$39)|0);
   $40 = (($i$13) + 1)|0;
   $exitcond = ($40|0)==($23|0);
   if ($exitcond) {
    break;
   } else {
    $i$13 = $40;
   }
  }
 }
 if (!($21)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_free($storage$0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _int_free_ex_data($class_index,$obj,$ad) {
 $class_index = $class_index|0;
 $obj = $obj|0;
 $ad = $ad|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $exitcond6 = 0, $i$04 = 0, $i$13 = 0, $or$cond = 0, $storage$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[64>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = (_def_get_class($class_index)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 _CRYPTO_lock(5,2,58672,507);
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_sk_num($5)|0);
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = $6 << 2;
  $9 = (_CRYPTO_malloc($8,58672,510)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $storage$0 = $9;
  } else {
   $i$04 = 0;
   while(1) {
    $11 = HEAP32[$4>>2]|0;
    $12 = (_sk_value($11,$i$04)|0);
    $13 = (($9) + ($i$04<<2)|0);
    HEAP32[$13>>2] = $12;
    $14 = (($i$04) + 1)|0;
    $exitcond6 = ($14|0)==($6|0);
    if ($exitcond6) {
     $storage$0 = $9;
     break;
    } else {
     $i$04 = $14;
    }
   }
  }
 } else {
  $storage$0 = 0;
 }
 _CRYPTO_lock(6,2,58672,517);
 $15 = ($6|0)<(1);
 $16 = ($storage$0|0)!=(0|0);
 $or$cond = $15 | $16;
 if (!($or$cond)) {
  _ERR_put_error(15,107,65,58672,519);
  return;
 }
 if ($7) {
  $i$13 = 0;
  while(1) {
   $17 = (($storage$0) + ($i$13<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if (!($19)) {
    $20 = ((($18)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $23 = HEAP32[$ad>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      $$0$i = 0;
     } else {
      $25 = (_sk_num($23)|0);
      $26 = ($25|0)>($i$13|0);
      if ($26) {
       $27 = HEAP32[$ad>>2]|0;
       $28 = (_sk_value($27,$i$13)|0);
       $$0$i = $28;
      } else {
       $$0$i = 0;
      }
     }
     $29 = HEAP32[$17>>2]|0;
     $30 = ((($29)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$29>>2]|0;
     $33 = ((($29)) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_viiiiii[$31 & 31]($obj,$$0$i,$ad,$i$13,$32,$34);
    }
   }
   $35 = (($i$13) + 1)|0;
   $exitcond = ($35|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $i$13 = $35;
   }
  }
 }
 if ($16) {
  _CRYPTO_free($storage$0);
 }
 $36 = HEAP32[$ad>>2]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  return;
 }
 _sk_free($36);
 HEAP32[$ad>>2] = 0;
 return;
}
function _def_get_class($class_index) {
 $class_index = $class_index|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $d = sp;
 $0 = HEAP32[64>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   _CRYPTO_lock(9,2,58672,278);
   $2 = HEAP32[64>>2]|0;
   $3 = ($2|0)==(0|0);
   if (!($3)) {
    _CRYPTO_lock(10,2,58672,281);
    break;
   }
   $4 = (_lh_new(60,79)|0);
   HEAP32[64>>2] = $4;
   $not$$i = ($4|0)==(0|0);
   _CRYPTO_lock(10,2,58672,281);
   if ($not$$i) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$d>>2] = $class_index;
 _CRYPTO_lock(9,2,58672,318);
 $5 = HEAP32[64>>2]|0;
 $6 = (_lh_retrieve($5,$d)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  _CRYPTO_lock(10,2,58672,338);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_CRYPTO_malloc(12,58672,321)|0);
 $9 = ($8|0)==(0|0);
 do {
  if (!($9)) {
   HEAP32[$8>>2] = $class_index;
   $10 = ((($8)) + 8|0);
   HEAP32[$10>>2] = 0;
   $11 = (_sk_new_null()|0);
   $12 = ((($8)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = ($11|0)==(0|0);
   if ($13) {
    _CRYPTO_free($8);
    break;
   }
   $14 = HEAP32[64>>2]|0;
   (_lh_insert($14,$8)|0);
   _CRYPTO_lock(10,2,58672,338);
   $$0 = $8;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _CRYPTO_lock(10,2,58672,338);
 _ERR_put_error(15,105,65,58672,340);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ex_class_item_LHASH_HASH($arg) {
 $arg = $arg|0;
 var $$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$arg>>2]|0;
 return ($$idx$val|0);
}
function _ex_class_item_LHASH_COMP($arg1,$arg2) {
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $$idx$val = 0, $$idx1$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$arg1>>2]|0;
 $$idx1$val = HEAP32[$arg2>>2]|0;
 $0 = (($$idx$val) - ($$idx1$val))|0;
 return ($0|0);
}
function _def_cleanup_cb($a_void) {
 $a_void = $a_void|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a_void)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _sk_pop_free($1,40);
 _CRYPTO_free($a_void);
 return;
}
function _def_cleanup_util_cb($funcs) {
 $funcs = $funcs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_free($funcs);
 return;
}
function _CRYPTO_free_locked($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[112>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  FUNCTION_TABLE_vii[$0 & 31]($str,0);
 }
 $2 = HEAP32[96>>2]|0;
 FUNCTION_TABLE_vi[$2 & 63]($str);
 $3 = HEAP32[112>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 FUNCTION_TABLE_vii[$3 & 31](0,1);
 return;
}
function _CRYPTO_malloc($num,$file,$line) {
 $num = $num|0;
 $file = $file|0;
 $line = $line|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)<(1);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[72>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  HEAP32[72>>2] = 0;
 }
 $3 = HEAP32[104>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[100>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   HEAP32[100>>2] = 0;
  }
  FUNCTION_TABLE_viiiii[$3 & 31](0,$num,$file,$line,0);
 }
 $7 = HEAP32[80>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 63]($num,$file,$line)|0);
 $9 = HEAP32[104>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  FUNCTION_TABLE_viiiii[$9 & 31]($8,$num,$file,$line,1);
 }
 $11 = ($8|0)!=(0|0);
 $12 = ($num|0)>(2048);
 $or$cond = $12 & $11;
 if (!($or$cond)) {
  $$0 = $8;
  return ($$0|0);
 }
 $13 = HEAP8[58682>>0]|0;
 HEAP8[$8>>0] = $13;
 $$0 = $8;
 return ($$0|0);
}
function _CRYPTO_realloc($str,$num,$file,$line) {
 $str = $str|0;
 $num = $num|0;
 $file = $file|0;
 $line = $line|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($str|0)==(0|0);
 $1 = ($num|0)<(1);
 if (!($0)) {
  if ($1) {
   $$0 = 0;
   return ($$0|0);
  }
  $15 = HEAP32[108>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   FUNCTION_TABLE_viiiiii[$15 & 31]($str,0,$num,$file,$line,0);
  }
  $17 = HEAP32[88>>2]|0;
  $18 = (FUNCTION_TABLE_iiiii[$17 & 127]($str,$num,$file,$line)|0);
  $19 = HEAP32[108>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   $$0 = $18;
   return ($$0|0);
  }
  FUNCTION_TABLE_viiiiii[$19 & 31]($str,$18,$num,$file,$line,1);
  $$0 = $18;
  return ($$0|0);
 }
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[72>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  HEAP32[72>>2] = 0;
 }
 $4 = HEAP32[104>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[100>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   HEAP32[100>>2] = 0;
  }
  FUNCTION_TABLE_viiiii[$4 & 31](0,$num,$file,$line,0);
 }
 $8 = HEAP32[80>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$8 & 63]($num,$file,$line)|0);
 $10 = HEAP32[104>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  FUNCTION_TABLE_viiiii[$10 & 31]($9,$num,$file,$line,1);
 }
 $12 = ($9|0)!=(0|0);
 $13 = ($num|0)>(2048);
 $or$cond$i = $13 & $12;
 if (!($or$cond$i)) {
  $$0 = $9;
  return ($$0|0);
 }
 $14 = HEAP8[58682>>0]|0;
 HEAP8[$9>>0] = $14;
 $$0 = $9;
 return ($$0|0);
}
function _CRYPTO_realloc_clean($str,$old_len,$num,$file,$line) {
 $str = $str|0;
 $old_len = $old_len|0;
 $num = $num|0;
 $file = $file|0;
 $line = $line|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($str|0)==(0|0);
 $1 = ($num|0)<(1);
 if (!($0)) {
  $15 = ($num|0)<($old_len|0);
  $or$cond = $1 | $15;
  if ($or$cond) {
   $$0 = 0;
   return ($$0|0);
  }
  $16 = HEAP32[108>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   FUNCTION_TABLE_viiiiii[$16 & 31]($str,0,$num,$file,$line,0);
  }
  $18 = HEAP32[80>>2]|0;
  $19 = (FUNCTION_TABLE_iiii[$18 & 63]($num,$file,$line)|0);
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   _memcpy(($19|0),($str|0),($old_len|0))|0;
   _OPENSSL_cleanse($str,$old_len);
   $21 = HEAP32[92>>2]|0;
   FUNCTION_TABLE_vi[$21 & 63]($str);
  }
  $22 = HEAP32[108>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   $$0 = $19;
   return ($$0|0);
  }
  FUNCTION_TABLE_viiiiii[$22 & 31]($str,$19,$num,$file,$line,1);
  $$0 = $19;
  return ($$0|0);
 }
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[72>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  HEAP32[72>>2] = 0;
 }
 $4 = HEAP32[104>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[100>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   HEAP32[100>>2] = 0;
  }
  FUNCTION_TABLE_viiiii[$4 & 31](0,$num,$file,$line,0);
 }
 $8 = HEAP32[80>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$8 & 63]($num,$file,$line)|0);
 $10 = HEAP32[104>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  FUNCTION_TABLE_viiiii[$10 & 31]($9,$num,$file,$line,1);
 }
 $12 = ($9|0)!=(0|0);
 $13 = ($num|0)>(2048);
 $or$cond$i = $13 & $12;
 if (!($or$cond$i)) {
  $$0 = $9;
  return ($$0|0);
 }
 $14 = HEAP8[58682>>0]|0;
 HEAP8[$9>>0] = $14;
 $$0 = $9;
 return ($$0|0);
}
function _CRYPTO_free($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[112>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  FUNCTION_TABLE_vii[$0 & 31]($str,0);
 }
 $2 = HEAP32[92>>2]|0;
 FUNCTION_TABLE_vi[$2 & 63]($str);
 $3 = HEAP32[112>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 FUNCTION_TABLE_vii[$3 & 31](0,1);
 return;
}
function _default_malloc_ex($num,$file,$line) {
 $num = $num|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[76>>2]|0;
 $1 = (FUNCTION_TABLE_ii[$0 & 127]($num)|0);
 return ($1|0);
}
function _default_realloc_ex($str,$num,$file,$line) {
 $str = $str|0;
 $num = $num|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[84>>2]|0;
 $1 = (FUNCTION_TABLE_iii[$0 & 127]($str,$num)|0);
 return ($1|0);
}
function _OPENSSL_cleanse($ptr,$len) {
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctr$0$lcssa = 0;
 var $ctr$03 = 0, $ctr$1 = 0, $loop$02 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[58682>>0]|0;
 $1 = $0&255;
 $2 = ($ptr|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ($len|0)==(0);
 if ($3) {
  $ctr$0$lcssa = $1;
 } else {
  $ctr$03 = $1;$loop$02 = $len;$p$01 = $ptr;
  while(1) {
   $4 = (($loop$02) + -1)|0;
   $5 = $ctr$03&255;
   $6 = ((($p$01)) + 1|0);
   HEAP8[$p$01>>0] = $5;
   $7 = $6;
   $8 = $7 & 15;
   $9 = (($ctr$03) + 17)|0;
   $10 = (($9) + ($8))|0;
   $11 = ($4|0)==(0);
   if ($11) {
    $ctr$0$lcssa = $10;
    break;
   } else {
    $ctr$03 = $10;$loop$02 = $4;$p$01 = $6;
   }
  }
 }
 $12 = $ctr$0$lcssa & 255;
 $13 = (_memchr($ptr,$12,$len)|0);
 $14 = ($13|0)==(0|0);
 $15 = $13;
 $16 = (($15) + 63)|0;
 $17 = $14 ? 0 : $16;
 $ctr$1 = (($17) + ($ctr$0$lcssa))|0;
 $18 = $ctr$1&255;
 HEAP8[58682>>0] = $18;
 return;
}
function _CRYPTO_mem_ctrl($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cur = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 $0 = HEAP32[116>>2]|0;
 _CRYPTO_lock(9,20,58683,212);
 switch ($mode|0) {
 case 1:  {
  HEAP32[116>>2] = 3;
  HEAP32[120>>2] = 0;
  break;
 }
 case 0:  {
  HEAP32[116>>2] = 0;
  HEAP32[120>>2] = 0;
  break;
 }
 case 3:  {
  $1 = HEAP32[116>>2]|0;
  $2 = $1 & 1;
  $3 = ($2|0)==(0);
  if (!($3)) {
   _CRYPTO_THREADID_current($cur);
   $4 = HEAP32[120>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    label = 7;
   } else {
    $6 = (_CRYPTO_THREADID_cmp(124,$cur)|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     label = 7;
    }
   }
   if ((label|0) == 7) {
    _CRYPTO_lock(10,20,58683,244);
    _CRYPTO_lock(9,27,58683,251);
    _CRYPTO_lock(9,20,58683,252);
    $8 = HEAP32[116>>2]|0;
    $9 = $8 & -3;
    HEAP32[116>>2] = $9;
    _CRYPTO_THREADID_cpy(124,$cur);
   }
   $10 = HEAP32[120>>2]|0;
   $11 = (($10) + 1)|0;
   HEAP32[120>>2] = $11;
  }
  break;
 }
 case 2:  {
  $12 = HEAP32[116>>2]|0;
  $13 = $12 & 1;
  $14 = ($13|0)!=(0);
  $15 = HEAP32[120>>2]|0;
  $16 = ($15|0)!=(0);
  $or$cond = $14 & $16;
  if ($or$cond) {
   $17 = (($15) + -1)|0;
   HEAP32[120>>2] = $17;
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = $12 | 2;
    HEAP32[116>>2] = $19;
    _CRYPTO_lock(10,27,58683,265);
   }
  }
  break;
 }
 default: {
 }
 }
 _CRYPTO_lock(10,20,58683,274);
 STACKTOP = sp;return ($0|0);
}
function _CRYPTO_push_info_($info,$file,$line) {
 $info = $info|0;
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur$i = sp;
 $0 = HEAP32[116>>2]|0;
 $1 = $0 & 1;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return 0;
 }
 _CRYPTO_THREADID_current($cur$i);
 _CRYPTO_lock(5,20,58683,285);
 $3 = HEAP32[116>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_CRYPTO_THREADID_cmp(124,$cur$i)|0);
  $7 = ($6|0)==(0);
  _CRYPTO_lock(6,20,58683,290);
  if ($7) {
   STACKTOP = sp;return 0;
  }
 } else {
  _CRYPTO_lock(6,20,58683,290);
 }
 (_CRYPTO_mem_ctrl(3)|0);
 $8 = (_CRYPTO_malloc(28,58683,397)|0);
 $9 = ($8|0)==(0|0);
 do {
  if (!($9)) {
   $10 = HEAP32[132>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = (_lh_new(61,80)|0);
    HEAP32[132>>2] = $12;
    $13 = ($12|0)==(0|0);
    if ($13) {
     _CRYPTO_free($8);
     break;
    }
   }
   _CRYPTO_THREADID_current($8);
   $14 = ((($8)) + 8|0);
   HEAP32[$14>>2] = $file;
   $15 = ((($8)) + 12|0);
   HEAP32[$15>>2] = $line;
   $16 = ((($8)) + 16|0);
   HEAP32[$16>>2] = $info;
   $17 = ((($8)) + 24|0);
   HEAP32[$17>>2] = 1;
   $18 = ((($8)) + 20|0);
   HEAP32[$18>>2] = 0;
   $19 = HEAP32[132>>2]|0;
   $20 = (_lh_insert($19,$8)|0);
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    HEAP32[$18>>2] = $20;
   }
  }
 } while(0);
 _CRYPTO_lock(9,20,58683,212);
 $22 = HEAP32[116>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)!=(0);
 $25 = HEAP32[120>>2]|0;
 $26 = ($25|0)!=(0);
 $or$cond$i = $24 & $26;
 if ($or$cond$i) {
  $27 = (($25) + -1)|0;
  HEAP32[120>>2] = $27;
  $28 = ($27|0)==(0);
  if ($28) {
   $29 = $22 | 2;
   HEAP32[116>>2] = $29;
   _CRYPTO_lock(10,27,58683,265);
  }
 }
 _CRYPTO_lock(10,20,58683,274);
 STACKTOP = sp;return 0;
}
function _CRYPTO_pop_info() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$i = 0, $or$cond$i = 0, $ret$0 = 0;
 var $ret$0$i1 = 0, $tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $tmp$i = sp + 8|0;
 $cur$i = sp;
 $0 = HEAP32[116>>2]|0;
 $1 = $0 & 1;
 $2 = ($1|0)==(0);
 if ($2) {
  $ret$0 = 0;
  STACKTOP = sp;return ($ret$0|0);
 }
 _CRYPTO_THREADID_current($cur$i);
 _CRYPTO_lock(5,20,58683,285);
 $3 = HEAP32[116>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_CRYPTO_THREADID_cmp(124,$cur$i)|0);
  $7 = ($6|0)==(0);
  _CRYPTO_lock(6,20,58683,290);
  if ($7) {
   $ret$0 = 0;
   STACKTOP = sp;return ($ret$0|0);
  }
 } else {
  _CRYPTO_lock(6,20,58683,290);
 }
 (_CRYPTO_mem_ctrl(3)|0);
 $8 = HEAP32[132>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $ret$0$i1 = 0;
 } else {
  _CRYPTO_THREADID_current($tmp$i);
  $10 = HEAP32[132>>2]|0;
  $11 = (_lh_delete($10,$tmp$i)|0);
  $12 = ($11|0)==(0|0);
  if ($12) {
   $ret$0$i1 = $11;
  } else {
   $13 = ((($11)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0|0);
   if ($15) {
    $16 = ((($14)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 1)|0;
    HEAP32[$16>>2] = $18;
    $19 = HEAP32[132>>2]|0;
    (_lh_insert($19,$14)|0);
   }
   $20 = ((($11)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + -1)|0;
   HEAP32[$20>>2] = $22;
   $23 = ($21|0)<(2);
   if ($23) {
    HEAP32[$13>>2] = 0;
    if ($15) {
     $24 = ((($14)) + 24|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($25) + -1)|0;
     HEAP32[$24>>2] = $26;
    }
    _CRYPTO_free($11);
    $ret$0$i1 = $11;
   } else {
    $ret$0$i1 = $11;
   }
  }
 }
 $27 = ($ret$0$i1|0)!=(0|0);
 $28 = $27&1;
 _CRYPTO_lock(9,20,58683,212);
 $29 = HEAP32[116>>2]|0;
 $30 = $29 & 1;
 $31 = ($30|0)!=(0);
 $32 = HEAP32[120>>2]|0;
 $33 = ($32|0)!=(0);
 $or$cond$i = $31 & $33;
 if ($or$cond$i) {
  $34 = (($32) + -1)|0;
  HEAP32[120>>2] = $34;
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = $29 | 2;
   HEAP32[116>>2] = $36;
   _CRYPTO_lock(10,27,58683,265);
  }
 }
 _CRYPTO_lock(10,20,58683,274);
 $ret$0 = $28;
 STACKTOP = sp;return ($ret$0|0);
}
function _app_info_LHASH_HASH($arg) {
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_THREADID_hash($arg)|0);
 $1 = ($0*17851)|0;
 $2 = $0 >>> 14;
 $3 = ($2*7)|0;
 $4 = (($3) + ($1))|0;
 $5 = $0 >>> 4;
 $6 = ($5*251)|0;
 $7 = (($4) + ($6))|0;
 return ($7|0);
}
function _app_info_LHASH_COMP($arg1,$arg2) {
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_THREADID_cmp($arg1,$arg2)|0);
 return ($0|0);
}
function _ERR_put_error($lib,$func,$reason,$file,$line) {
 $lib = $lib|0;
 $func = $func|0;
 $reason = $reason|0;
 $file = $file|0;
 $line = $line|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $1 = ((($0)) + 392|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = (($3|0) % 16)&-1;
 HEAP32[$1>>2] = $4;
 $5 = ((($0)) + 396|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = (($4) + 1)|0;
  $9 = (($8|0) % 16)&-1;
  HEAP32[$5>>2] = $9;
 }
 $10 = (((($0)) + 8|0) + ($4<<2)|0);
 HEAP32[$10>>2] = 0;
 $11 = $lib << 24;
 $12 = $func << 12;
 $13 = $12 & 16773120;
 $14 = $13 | $11;
 $15 = $reason & 4095;
 $16 = $14 | $15;
 $17 = HEAP32[$1>>2]|0;
 $18 = (((($0)) + 72|0) + ($17<<2)|0);
 HEAP32[$18>>2] = $16;
 $19 = HEAP32[$1>>2]|0;
 $20 = (((($0)) + 264|0) + ($19<<2)|0);
 HEAP32[$20>>2] = $file;
 $21 = HEAP32[$1>>2]|0;
 $22 = (((($0)) + 328|0) + ($21<<2)|0);
 HEAP32[$22>>2] = $line;
 $23 = HEAP32[$1>>2]|0;
 $24 = (((($0)) + 136|0) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $34 = $23;
  $33 = (((($0)) + 200|0) + ($34<<2)|0);
  HEAP32[$33>>2] = 0;
  return;
 }
 $27 = (((($0)) + 200|0) + ($23<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 1;
 $30 = ($29|0)==(0);
 if ($30) {
  $34 = $23;
  $33 = (((($0)) + 200|0) + ($34<<2)|0);
  HEAP32[$33>>2] = 0;
  return;
 }
 _CRYPTO_free($25);
 $31 = HEAP32[$1>>2]|0;
 $32 = (((($0)) + 136|0) + ($31<<2)|0);
 HEAP32[$32>>2] = 0;
 $$pre = HEAP32[$1>>2]|0;
 $34 = $$pre;
 $33 = (((($0)) + 200|0) + ($34<<2)|0);
 HEAP32[$33>>2] = 0;
 return;
}
function _ERR_get_state() {
 var $$0 = 0, $$pre$i = 0, $$pre$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i4 = 0, $i$01$i = 0, $i$01$i1 = 0, $tid = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $tmp = sp + 8|0;
 $tid = sp;
 $0 = HEAP32[136>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,1,58693,295);
  $2 = HEAP32[136>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   HEAP32[136>>2] = 140;
  }
  _CRYPTO_lock(10,1,58693,298);
 }
 _CRYPTO_THREADID_current($tid);
 _CRYPTO_THREADID_cpy($tmp,$tid);
 $4 = HEAP32[136>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($tmp)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (_CRYPTO_malloc(400,58693,1027)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 184;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_THREADID_cpy($9,$tid);
 $11 = ((($9)) + 392|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($9)) + 396|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($9)) + 136|0);
 $14 = ((($9)) + 200|0);
 HEAP32[$13>>2] = 0;
 HEAP32[$14>>2] = 0;
 $15 = ((($9)) + 140|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($9)) + 204|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($9)) + 144|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($9)) + 208|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($9)) + 148|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($9)) + 212|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($9)) + 152|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($9)) + 216|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($9)) + 156|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($9)) + 220|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($9)) + 160|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($9)) + 224|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($9)) + 164|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($9)) + 228|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($9)) + 168|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($9)) + 232|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($9)) + 172|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($9)) + 236|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($9)) + 176|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($9)) + 240|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($9)) + 180|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($9)) + 244|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($9)) + 184|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($9)) + 248|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($9)) + 188|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($9)) + 252|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($9)) + 192|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($9)) + 256|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($9)) + 196|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($9)) + 260|0);
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[136>>2]|0;
 $46 = ((($45)) + 32|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_ii[$47 & 127]($9)|0);
 $49 = HEAP32[136>>2]|0;
 $50 = ((($49)) + 28|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (FUNCTION_TABLE_ii[$51 & 127]($9)|0);
 $53 = ($52|0)==($9|0);
 if (!($53)) {
  $i$01$i = 0;
  while(1) {
   $54 = (((($9)) + 136|0) + ($i$01$i<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   $$pre$i = (((($9)) + 200|0) + ($i$01$i<<2)|0);
   if (!($56)) {
    $57 = HEAP32[$$pre$i>>2]|0;
    $58 = $57 & 1;
    $59 = ($58|0)==(0);
    if (!($59)) {
     _CRYPTO_free($55);
     HEAP32[$54>>2] = 0;
    }
   }
   HEAP32[$$pre$i>>2] = 0;
   $60 = (($i$01$i) + 1)|0;
   $exitcond$i = ($60|0)==(16);
   if ($exitcond$i) {
    break;
   } else {
    $i$01$i = $60;
   }
  }
  _CRYPTO_free($9);
  $$0 = 184;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = ($48|0)==(0|0);
 if ($61) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$01$i1 = 0;
 }
 while(1) {
  $62 = (((($48)) + 136|0) + ($i$01$i1<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0|0);
  $$pre$i2 = (((($48)) + 200|0) + ($i$01$i1<<2)|0);
  if (!($64)) {
   $65 = HEAP32[$$pre$i2>>2]|0;
   $66 = $65 & 1;
   $67 = ($66|0)==(0);
   if (!($67)) {
    _CRYPTO_free($63);
    HEAP32[$62>>2] = 0;
   }
  }
  HEAP32[$$pre$i2>>2] = 0;
  $68 = (($i$01$i1) + 1)|0;
  $exitcond$i4 = ($68|0)==(16);
  if ($exitcond$i4) {
   break;
  } else {
   $i$01$i1 = $68;
  }
 }
 _CRYPTO_free($48);
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _ERR_clear_error() {
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $i$01 = 0;
 while(1) {
  $1 = (((($0)) + 8|0) + ($i$01<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (((($0)) + 72|0) + ($i$01<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (((($0)) + 136|0) + ($i$01<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  $$pre = (((($0)) + 200|0) + ($i$01<<2)|0);
  if (!($5)) {
   $6 = HEAP32[$$pre>>2]|0;
   $7 = $6 & 1;
   $8 = ($7|0)==(0);
   if (!($8)) {
    _CRYPTO_free($4);
    HEAP32[$3>>2] = 0;
   }
  }
  HEAP32[$$pre>>2] = 0;
  $9 = (((($0)) + 264|0) + ($i$01<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = (((($0)) + 328|0) + ($i$01<<2)|0);
  HEAP32[$10>>2] = -1;
  $11 = (($i$01) + 1)|0;
  $exitcond = ($11|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $11;
  }
 }
 $12 = ((($0)) + 396|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 392|0);
 HEAP32[$13>>2] = 0;
 return;
}
function _ERR_peek_last_error() {
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $1 = ((($0)) + 396|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 392|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $6 = (((($0)) + 72|0) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $$0$i = $7;
 return ($$0$i|0);
}
function _ERR_add_error_data($num,$varargs) {
 $num = $num|0;
 $varargs = $varargs|0;
 var $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 HEAP32[$args>>2] = $varargs;
 _ERR_add_error_vdata($num,$args);
 STACKTOP = sp;return;
}
function _ERR_add_error_vdata($num,$args) {
 $num = $num|0;
 $args = $args|0;
 var $$$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0;
 var $i$05 = 0, $n$04 = 0, $n$1 = 0, $s$02 = 0, $s$1 = 0, $s$2 = 0, $str$0$lcssa = 0, $str$03 = 0, $str$03$lcssa = 0, $str$1 = 0, $str$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(81,58693,1089)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 HEAP8[$0>>0] = 0;
 $2 = ($num|0)>(0);
 L4: do {
  if ($2) {
   $i$05 = 0;$n$04 = 0;$s$02 = 80;$str$03 = $0;
   while(1) {
    $arglist_current = HEAP32[$args>>2]|0;
    $3 = $arglist_current;
    $4 = ((0) + 4|0);
    $expanded1 = $4;
    $expanded = (($expanded1) - 1)|0;
    $5 = (($3) + ($expanded))|0;
    $6 = ((0) + 4|0);
    $expanded5 = $6;
    $expanded4 = (($expanded5) - 1)|0;
    $expanded3 = $expanded4 ^ -1;
    $7 = $5 & $expanded3;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $arglist_next = ((($8)) + 4|0);
    HEAP32[$args>>2] = $arglist_next;
    $10 = ($9|0)==(0|0);
    if ($10) {
     $n$1 = $n$04;$s$2 = $s$02;$str$2 = $str$03;
    } else {
     $11 = (_strlen($9)|0);
     $12 = (($11) + ($n$04))|0;
     $13 = ($12|0)>($s$02|0);
     if ($13) {
      $14 = (($12) + 21)|0;
      $15 = (_CRYPTO_realloc($str$03,$14,58693,1102)|0);
      $16 = ($15|0)==(0|0);
      if ($16) {
       $str$03$lcssa = $str$03;
       break;
      }
      $17 = (($12) + 20)|0;
      $s$1 = $17;$str$1 = $15;
     } else {
      $s$1 = $s$02;$str$1 = $str$03;
     }
     $18 = (($s$1) + 1)|0;
     (_BUF_strlcat($str$1,$9,$18)|0);
     $n$1 = $12;$s$2 = $s$1;$str$2 = $str$1;
    }
    $19 = (($i$05) + 1)|0;
    $20 = ($19|0)<($num|0);
    if ($20) {
     $i$05 = $19;$n$04 = $n$1;$s$02 = $s$2;$str$03 = $str$2;
    } else {
     $str$0$lcssa = $str$2;
     break L4;
    }
   }
   _CRYPTO_free($str$03$lcssa);
   return;
  } else {
   $str$0$lcssa = $0;
  }
 } while(0);
 $21 = (_ERR_get_state()|0);
 $22 = ((($21)) + 392|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 $$$i = $24 ? 15 : $23;
 $25 = (((($21)) + 136|0) + ($$$i<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 $$pre$i = (((($21)) + 200|0) + ($$$i<<2)|0);
 if (!($27)) {
  $28 = HEAP32[$$pre$i>>2]|0;
  $29 = $28 & 1;
  $30 = ($29|0)==(0);
  if (!($30)) {
   _CRYPTO_free($26);
   HEAP32[$25>>2] = 0;
  }
 }
 HEAP32[$25>>2] = $str$0$lcssa;
 HEAP32[$$pre$i>>2] = 3;
 return;
}
function _ERR_set_mark() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $1 = ((($0)) + 396|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 392|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (((($0)) + 8|0) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 $$0 = 1;
 return ($$0|0);
}
function _ERR_pop_to_mark() {
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa17 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $1 = ((($0)) + 396|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 392|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $38 = $2;$7 = $4;
 }
 while(1) {
  $6 = (((($0)) + 8|0) + ($7<<2)|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = $8 & 1;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$lcssa = $38;$$lcssa17 = $7;
   break;
  }
  HEAP32[$6>>2] = 0;
  $11 = HEAP32[$3>>2]|0;
  $12 = (((($0)) + 72|0) + ($11<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = HEAP32[$3>>2]|0;
  $14 = (((($0)) + 136|0) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $24 = $13;
  } else {
   $17 = (((($0)) + 200|0) + ($13<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 1;
   $20 = ($19|0)==(0);
   if ($20) {
    $24 = $13;
   } else {
    _CRYPTO_free($15);
    $21 = HEAP32[$3>>2]|0;
    $22 = (((($0)) + 136|0) + ($21<<2)|0);
    HEAP32[$22>>2] = 0;
    $$pre = HEAP32[$3>>2]|0;
    $24 = $$pre;
   }
  }
  $23 = (((($0)) + 200|0) + ($24<<2)|0);
  HEAP32[$23>>2] = 0;
  $25 = HEAP32[$3>>2]|0;
  $26 = (((($0)) + 264|0) + ($25<<2)|0);
  HEAP32[$26>>2] = 0;
  $27 = HEAP32[$3>>2]|0;
  $28 = (((($0)) + 328|0) + ($27<<2)|0);
  HEAP32[$28>>2] = -1;
  $29 = HEAP32[$3>>2]|0;
  $30 = (($29) + -1)|0;
  $31 = ($29|0)==(0);
  $$ = $31 ? 15 : $30;
  HEAP32[$3>>2] = $$;
  $32 = HEAP32[$1>>2]|0;
  $33 = ($32|0)==($$|0);
  if ($33) {
   $$0 = 0;
   label = 9;
   break;
  } else {
   $38 = $32;$7 = $$;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 $34 = ($$lcssa|0)==($$lcssa17|0);
 if ($34) {
  $$0 = 0;
  return ($$0|0);
 }
 $35 = (((($0)) + 8|0) + ($$lcssa17<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & -2;
 HEAP32[$35>>2] = $37;
 $$0 = 1;
 return ($$0|0);
}
function _int_err_get($create) {
 $create = $create|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_lock(9,1,58693,360);
 $0 = HEAP32[596>>2]|0;
 $1 = ($0|0)==(0|0);
 $2 = ($create|0)!=(0);
 $or$cond = $2 & $1;
 if (!($or$cond)) {
  $4 = $0;
  _CRYPTO_lock(10,1,58693,368);
  return ($4|0);
 }
 (_CRYPTO_push_info_(58722,58693,362)|0);
 $3 = (_lh_new(62,81)|0);
 HEAP32[596>>2] = $3;
 (_CRYPTO_pop_info()|0);
 $$pre = HEAP32[596>>2]|0;
 $4 = $$pre;
 _CRYPTO_lock(10,1,58693,368);
 return ($4|0);
}
function _int_err_del() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_lock(9,1,58693,375);
 $0 = HEAP32[596>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _lh_free($0);
  HEAP32[596>>2] = 0;
 }
 _CRYPTO_lock(10,1,58693,380);
 return;
}
function _int_err_get_item($d) {
 $d = $d|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[136>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,1,58693,295);
  $2 = HEAP32[136>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   HEAP32[136>>2] = 140;
  }
  _CRYPTO_lock(10,1,58693,298);
  $$pre = HEAP32[136>>2]|0;
  $5 = $$pre;
 } else {
  $5 = $0;
 }
 $4 = HEAP32[$5>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$4 & 127](0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 _CRYPTO_lock(5,1,58693,393);
 $8 = (_lh_retrieve($6,$d)|0);
 _CRYPTO_lock(6,1,58693,395);
 $$0 = $8;
 return ($$0|0);
}
function _int_err_set_item($d) {
 $d = $d|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[136>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,1,58693,295);
  $2 = HEAP32[136>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   HEAP32[136>>2] = 140;
  }
  _CRYPTO_lock(10,1,58693,298);
  $$pre = HEAP32[136>>2]|0;
  $5 = $$pre;
 } else {
  $5 = $0;
 }
 $4 = HEAP32[$5>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$4 & 127](1)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 _CRYPTO_lock(9,1,58693,410);
 $8 = (_lh_insert($6,$d)|0);
 _CRYPTO_lock(10,1,58693,412);
 $$0 = $8;
 return ($$0|0);
}
function _int_err_del_item($d) {
 $d = $d|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[136>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,1,58693,295);
  $2 = HEAP32[136>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   HEAP32[136>>2] = 140;
  }
  _CRYPTO_lock(10,1,58693,298);
  $$pre = HEAP32[136>>2]|0;
  $5 = $$pre;
 } else {
  $5 = $0;
 }
 $4 = HEAP32[$5>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$4 & 127](0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 _CRYPTO_lock(9,1,58693,427);
 $8 = (_lh_delete($6,$d)|0);
 _CRYPTO_lock(10,1,58693,429);
 $$0 = $8;
 return ($$0|0);
}
function _int_thread_get($create) {
 $create = $create|0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_lock(9,1,58693,452);
 $0 = HEAP32[592>>2]|0;
 $1 = ($0|0)==(0|0);
 $2 = ($create|0)!=(0);
 $or$cond = $2 & $1;
 if ($or$cond) {
  (_CRYPTO_push_info_(58699,58693,454)|0);
  $3 = (_lh_new(63,82)|0);
  HEAP32[592>>2] = $3;
  (_CRYPTO_pop_info()|0);
  $$pr = HEAP32[592>>2]|0;
  $5 = $$pr;
 } else {
  $5 = $0;
 }
 $4 = ($5|0)==(0|0);
 if ($4) {
  $ret$0 = 0;
  _CRYPTO_lock(10,1,58693,462);
  return ($ret$0|0);
 }
 $6 = HEAP32[588>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[588>>2] = $7;
 $ret$0 = $5;
 _CRYPTO_lock(10,1,58693,462);
 return ($ret$0|0);
}
function _int_thread_release($hash) {
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($hash|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$hash>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = (_CRYPTO_add_lock(588,-1,1,58693,473)|0);
 $4 = ($3|0)>(0);
 if ($4) {
  return;
 }
 HEAP32[$hash>>2] = 0;
 return;
}
function _int_thread_get_item($d) {
 $d = $d|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $hash = sp;
 $0 = HEAP32[136>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,1,58693,295);
  $2 = HEAP32[136>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   HEAP32[136>>2] = 140;
  }
  _CRYPTO_lock(10,1,58693,298);
  $$pre = HEAP32[136>>2]|0;
  $5 = $$pre;
 } else {
  $5 = $0;
 }
 $4 = ((($5)) + 20|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127](0)|0);
 HEAP32[$hash>>2] = $7;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_lock(5,1,58693,499);
 $9 = (_lh_retrieve($7,$d)|0);
 _CRYPTO_lock(6,1,58693,501);
 $10 = HEAP32[136>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vi[$12 & 63]($hash);
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _int_thread_set_item($d) {
 $d = $d|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $hash = sp;
 $0 = HEAP32[136>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,1,58693,295);
  $2 = HEAP32[136>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   HEAP32[136>>2] = 140;
  }
  _CRYPTO_lock(10,1,58693,298);
  $$pre = HEAP32[136>>2]|0;
  $5 = $$pre;
 } else {
  $5 = $0;
 }
 $4 = ((($5)) + 20|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127](1)|0);
 HEAP32[$hash>>2] = $7;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_lock(9,1,58693,517);
 $9 = (_lh_insert($7,$d)|0);
 _CRYPTO_lock(10,1,58693,519);
 $10 = HEAP32[136>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vi[$12 & 63]($hash);
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _int_thread_del_item($d) {
 $d = $d|0;
 var $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $hash = 0, $i$01$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $hash = sp;
 $0 = HEAP32[136>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _CRYPTO_lock(9,1,58693,295);
  $2 = HEAP32[136>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   HEAP32[136>>2] = 140;
  }
  _CRYPTO_lock(10,1,58693,298);
  $$pre = HEAP32[136>>2]|0;
  $5 = $$pre;
 } else {
  $5 = $0;
 }
 $4 = ((($5)) + 20|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127](0)|0);
 HEAP32[$hash>>2] = $7;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 _CRYPTO_lock(9,1,58693,535);
 $9 = (_lh_delete($7,$d)|0);
 $10 = HEAP32[588>>2]|0;
 $11 = ($10|0)==(1);
 $12 = HEAP32[592>>2]|0;
 $13 = ($12|0)!=(0|0);
 $or$cond = $11 & $13;
 if ($or$cond) {
  $14 = (_lh_num_items($12)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = HEAP32[592>>2]|0;
   _lh_free($16);
   HEAP32[592>>2] = 0;
  }
 }
 _CRYPTO_lock(10,1,58693,543);
 $17 = HEAP32[136>>2]|0;
 $18 = ((($17)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_vi[$19 & 63]($hash);
 $20 = ($9|0)==(0|0);
 if ($20) {
  STACKTOP = sp;return;
 } else {
  $i$01$i = 0;
 }
 while(1) {
  $21 = (((($9)) + 136|0) + ($i$01$i<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  $$pre$i = (((($9)) + 200|0) + ($i$01$i<<2)|0);
  if (!($23)) {
   $24 = HEAP32[$$pre$i>>2]|0;
   $25 = $24 & 1;
   $26 = ($25|0)==(0);
   if (!($26)) {
    _CRYPTO_free($22);
    HEAP32[$21>>2] = 0;
   }
  }
  HEAP32[$$pre$i>>2] = 0;
  $27 = (($i$01$i) + 1)|0;
  $exitcond$i = ($27|0)==(16);
  if ($exitcond$i) {
   break;
  } else {
   $i$01$i = $27;
  }
 }
 _CRYPTO_free($9);
 STACKTOP = sp;return;
}
function _int_err_get_next_lib() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_lock(9,1,58693,554);
 $0 = HEAP32[584>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[584>>2] = $1;
 _CRYPTO_lock(10,1,58693,556);
 return ($0|0);
}
function _err_state_LHASH_HASH($arg) {
 $arg = $arg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_THREADID_hash($arg)|0);
 $1 = ($0*13)|0;
 return ($1|0);
}
function _err_state_LHASH_COMP($arg1,$arg2) {
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_THREADID_cmp($arg1,$arg2)|0);
 return ($0|0);
}
function _err_string_data_LHASH_HASH($arg) {
 $arg = $arg|0;
 var $$idx$val = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$arg>>2]|0;
 $0 = $$idx$val >>> 24;
 $1 = $0 ^ $$idx$val;
 $2 = $$idx$val >>> 12;
 $3 = $2 & 4095;
 $4 = $1 ^ $3;
 $5 = (($4>>>0) % 19)&-1;
 $6 = ($5*13)|0;
 $7 = $4 ^ $6;
 return ($7|0);
}
function _err_string_data_LHASH_COMP($arg1,$arg2) {
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $$idx$val = 0, $$idx1$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$arg1>>2]|0;
 $$idx1$val = HEAP32[$arg2>>2]|0;
 $0 = (($$idx$val) - ($$idx1$val))|0;
 return ($0|0);
}
function _sk_free($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($st)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _CRYPTO_free($2);
 }
 _CRYPTO_free($st);
 return;
}
function _sk_new_null() {
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(20,58742,162)|0);
 $cond$i = ($0|0)==(0|0);
 if ($cond$i) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $1 = (_CRYPTO_malloc(16,58742,164)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ($1|0)==(0|0);
 if ($3) {
  _CRYPTO_free($0);
  $$0$i = 0;
  return ($$0$i|0);
 } else {
  HEAP32[$1>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$5>>2] = 0;
  $6 = HEAP32[$2>>2]|0;
  $7 = ((($6)) + 8|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[$2>>2]|0;
  $9 = ((($8)) + 12|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($0)) + 16|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($0)) + 12|0);
  HEAP32[$11>>2] = 4;
  HEAP32[$0>>2] = 0;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = 0;
  $$0$i = $0;
  return ($$0$i|0);
 }
 return (0)|0;
}
function _sk_find($st,$data) {
 $st = $st|0;
 $data = $data|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $data;
 $1 = ($st|0)==(0|0);
 L1: do {
  if ($1) {
   $$0$i = -1;
  } else {
   $2 = ((($st)) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $5 = HEAP32[$st>>2]|0;
    $6 = ($5|0)>(0);
    if (!($6)) {
     $$0$i = -1;
     break;
    }
    $7 = ((($st)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $i$01$i = 0;
    while(1) {
     $9 = (($8) + ($i$01$i<<2)|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==($data|0);
     if ($11) {
      $$0$i = $i$01$i;
      break L1;
     }
     $12 = (($i$01$i) + 1)|0;
     $13 = ($12|0)<($5|0);
     if ($13) {
      $i$01$i = $12;
     } else {
      $$0$i = -1;
      break L1;
     }
    }
   }
   $14 = ((($st)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = ((($st)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP32[$st>>2]|0;
    _qsort($18,$19,4,$3);
    HEAP32[$14>>2] = 1;
   }
   $20 = ($data|0)==(0|0);
   if ($20) {
    $$0$i = -1;
   } else {
    $21 = ((($st)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$st>>2]|0;
    $24 = HEAP32[$2>>2]|0;
    $25 = (_OBJ_bsearch_ex_($0,$22,$23,4,$24,2)|0);
    $26 = ($25|0)==(0|0);
    if ($26) {
     $$0$i = -1;
    } else {
     $27 = HEAP32[$21>>2]|0;
     $28 = $25;
     $29 = $27;
     $30 = (($28) - ($29))|0;
     $31 = $30 >> 2;
     $$0$i = $31;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$i|0);
}
function _sk_push($st,$data) {
 $st = $st|0;
 $data = $data|0;
 var $$0$i = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre4$i = 0, $$pre5$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$st>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $2 = ((($st)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + 1)|0;
 $5 = ($3|0)>($4|0);
 $$phi$trans$insert$i = ((($st)) + 4|0);
 if ($5) {
  $$pre4$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $16 = $$pre4$i;$17 = $0;
  label = 7;
 } else {
  $6 = HEAP32[$$phi$trans$insert$i>>2]|0;
  $7 = $3 << 3;
  $8 = (_CRYPTO_realloc($6,$7,58742,187)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0$i = 0;
   return ($$0$i|0);
  }
  HEAP32[$$phi$trans$insert$i>>2] = $8;
  $10 = HEAP32[$2>>2]|0;
  $11 = $10 << 1;
  HEAP32[$2>>2] = $11;
  $$pre$i = HEAP32[$st>>2]|0;
  $12 = ($$pre$i|0)<=($0|0);
  $13 = ($0|0)<(0);
  $or$cond$i = $13 | $12;
  if ($or$cond$i) {
   $16 = $8;$17 = $$pre$i;
   label = 7;
  } else {
   $14 = ($$pre$i|0)<($0|0);
   if ($14) {
    $24 = $8;
   } else {
    $i$02$i = $$pre$i;
    while(1) {
     $18 = (($8) + ($i$02$i<<2)|0);
     $19 = HEAP32[$18>>2]|0;
     $$sum$i = (($i$02$i) + 1)|0;
     $20 = (($8) + ($$sum$i<<2)|0);
     HEAP32[$20>>2] = $19;
     $21 = (($i$02$i) + -1)|0;
     $22 = ($i$02$i|0)>($0|0);
     if ($22) {
      $i$02$i = $21;
     } else {
      break;
     }
    }
    $$pre5$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $24 = $$pre5$i;
   }
   $23 = (($24) + ($0<<2)|0);
   HEAP32[$23>>2] = $data;
   $26 = $$pre$i;
  }
 }
 if ((label|0) == 7) {
  $15 = (($16) + ($17<<2)|0);
  HEAP32[$15>>2] = $data;
  $26 = $17;
 }
 $25 = (($26) + 1)|0;
 HEAP32[$st>>2] = $25;
 $27 = ((($st)) + 8|0);
 HEAP32[$27>>2] = 0;
 $$0$i = $25;
 return ($$0$i|0);
}
function _sk_pop($st) {
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$st>>2]|0;
 $2 = ($1|0)<(1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (($1) + -1)|0;
 $4 = ((($st)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$st>>2] = $3;
 $$0 = $7;
 return ($$0|0);
}
function _sk_pop_free($st,$func) {
 $st = $st|0;
 $func = $func|0;
 var $$lcssa = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$st>>2]|0;
 $2 = ($1|0)>(0);
 $3 = ((($st)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $13 = $1;$6 = $4;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $13;$14 = $6;
   } else {
    FUNCTION_TABLE_vi[$func & 63]($7);
    $$pre = HEAP32[$st>>2]|0;
    $$pre3 = HEAP32[$3>>2]|0;
    $11 = $$pre;$14 = $$pre3;
   }
   $9 = (($i$01) + 1)|0;
   $10 = ($9|0)<($11|0);
   if ($10) {
    $13 = $11;$6 = $14;$i$01 = $9;
   } else {
    $$lcssa = $14;
    break;
   }
  }
 } else {
  $$lcssa = $4;
 }
 $12 = ($$lcssa|0)==(0|0);
 if (!($12)) {
  _CRYPTO_free($$lcssa);
 }
 _CRYPTO_free($st);
 return;
}
function _sk_num($st) {
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $$0 = -1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $$0 = $1;
 }
 return ($$0|0);
}
function _sk_value($st,$i) {
 $st = $st|0;
 $i = $i|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 $1 = ($i|0)<(0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$st>>2]|0;
 $3 = ($2|0)>($i|0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($st)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($i<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $$0 = $7;
 return ($$0|0);
}
function _sk_set($st,$i,$value) {
 $st = $st|0;
 $i = $i|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 $1 = ($i|0)<(0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$st>>2]|0;
 $3 = ($2|0)>($i|0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($st)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($i<<2)|0);
 HEAP32[$6>>2] = $value;
 $$0 = $value;
 return ($$0|0);
}
function _lh_new($h,$c) {
 $h = $h|0;
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(96,58750,120)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_CRYPTO_malloc(64,58750,122)|0);
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _CRYPTO_free($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$2>>2] = 0;
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$5>>2] = 0;
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 8|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($8)) + 12|0);
  HEAP32[$9>>2] = 0;
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 16|0);
  HEAP32[$11>>2] = 0;
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 20|0);
  HEAP32[$13>>2] = 0;
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 24|0);
  HEAP32[$15>>2] = 0;
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 28|0);
  HEAP32[$17>>2] = 0;
  $18 = HEAP32[$0>>2]|0;
  $19 = ((($18)) + 32|0);
  HEAP32[$19>>2] = 0;
  $20 = HEAP32[$0>>2]|0;
  $21 = ((($20)) + 36|0);
  HEAP32[$21>>2] = 0;
  $22 = HEAP32[$0>>2]|0;
  $23 = ((($22)) + 40|0);
  HEAP32[$23>>2] = 0;
  $24 = HEAP32[$0>>2]|0;
  $25 = ((($24)) + 44|0);
  HEAP32[$25>>2] = 0;
  $26 = HEAP32[$0>>2]|0;
  $27 = ((($26)) + 48|0);
  HEAP32[$27>>2] = 0;
  $28 = HEAP32[$0>>2]|0;
  $29 = ((($28)) + 52|0);
  HEAP32[$29>>2] = 0;
  $30 = HEAP32[$0>>2]|0;
  $31 = ((($30)) + 56|0);
  HEAP32[$31>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = ((($32)) + 60|0);
  HEAP32[$33>>2] = 0;
  $34 = ($c|0)==(0|0);
  $35 = $34 ? 83 : $c;
  $36 = ((($0)) + 4|0);
  HEAP32[$36>>2] = $35;
  $37 = ($h|0)==(0|0);
  $38 = $37 ? 64 : $h;
  $39 = ((($0)) + 8|0);
  HEAP32[$39>>2] = $38;
  $40 = ((($0)) + 12|0);
  HEAP32[$40>>2] = 8;
  $41 = ((($0)) + 16|0);
  HEAP32[$41>>2] = 16;
  $42 = ((($0)) + 20|0);
  HEAP32[$42>>2] = 0;
  $43 = ((($0)) + 24|0);
  HEAP32[$43>>2] = 8;
  $44 = ((($0)) + 28|0);
  HEAP32[$44>>2] = 512;
  $45 = ((($0)) + 32|0);
  HEAP32[$45>>2] = 256;
  $46 = ((($0)) + 36|0);
  dest=$46; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _lh_strhash($c) {
 $c = $c|0;
 var $$0 = 0, $$014 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$03 = 0, $ret$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP8[$c>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$014 = $c;$4 = $1;$n$03 = 256;$ret$02 = 0;
 }
 while(1) {
  $3 = $4 << 24 >> 24;
  $5 = $3 | $n$03;
  $6 = (($n$03) + 256)|0;
  $7 = $3 >>> 2;
  $8 = $7 ^ $3;
  $9 = $8 & 15;
  $10 = $ret$02 << $9;
  $11 = (32 - ($9))|0;
  $12 = $ret$02 >>> $11;
  $13 = $12 | $10;
  $14 = Math_imul($5, $5)|0;
  $15 = $13 ^ $14;
  $16 = ((($$014)) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$lcssa = $15;
   break;
  } else {
   $$014 = $16;$4 = $17;$n$03 = $6;$ret$02 = $15;
  }
 }
 $19 = $$lcssa >>> 16;
 $20 = $19 ^ $$lcssa;
 $$0 = $20;
 return ($$0|0);
}
function _lh_free($lh) {
 $lh = $lh|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $n$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($lh|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($lh)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $15 = $2;$i$02 = 0;
  while(1) {
   $4 = HEAP32[$lh>>2]|0;
   $5 = (($4) + ($i$02<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $13 = $15;
   } else {
    $n$01 = $6;
    while(1) {
     $8 = ((($n$01)) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     _CRYPTO_free($n$01);
     $10 = ($9|0)==(0|0);
     if ($10) {
      break;
     } else {
      $n$01 = $9;
     }
    }
    $$pre = HEAP32[$1>>2]|0;
    $13 = $$pre;
   }
   $11 = (($i$02) + 1)|0;
   $12 = ($11>>>0)<($13>>>0);
   if ($12) {
    $15 = $13;$i$02 = $11;
   } else {
    break;
   }
  }
 }
 $14 = HEAP32[$lh>>2]|0;
 _CRYPTO_free($14);
 _CRYPTO_free($lh);
 return;
}
function _lh_insert($lh,$data) {
 $lh = $lh|0;
 $data = $data|0;
 var $$0 = 0, $$lcssa = 0, $$pre$i = 0, $$pre$phi8Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre6 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $n1$0$i = 0, $n1$0$in$lcssa$i9 = 0, $n1$0$in2$i = 0, $n1$0$in2$i$lcssa = 0, $n1$01$i = 0, $n1$03$i = 0, $nn$0$i = 0, $np$0$i = 0, $np$0$in$ph7$i = 0, $np$02$i = 0, $np$026$i = 0, $np$028$i = 0, $np$03$i = 0, $ret$1$i = 0;
 var $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($lh)) + 92|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($lh)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($lh)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 8;
 $6 = ((($lh)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5>>>0) / ($7>>>0))&-1;
 $9 = ($2>>>0)>($8>>>0);
 do {
  if ($9) {
   $$pre6 = ((($lh)) + 24|0);
   $$pre7 = ((($lh)) + 20|0);
   $$pre$phi8Z2D = $$pre7;$$pre$phiZ2D = $$pre6;
  } else {
   $10 = (($7) + 1)|0;
   HEAP32[$6>>2] = $10;
   $11 = ((($lh)) + 40|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + 1)|0;
   HEAP32[$11>>2] = $13;
   $14 = ((($lh)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$14>>2] = $16;
   $17 = HEAP32[$lh>>2]|0;
   $18 = (($17) + ($15<<2)|0);
   $19 = ((($lh)) + 24|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + ($15))|0;
   $22 = (($17) + ($21<<2)|0);
   HEAP32[$22>>2] = 0;
   $23 = ((($lh)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $np$026$i = HEAP32[$18>>2]|0;
   $25 = ($np$026$i|0)==(0|0);
   L4: do {
    if (!($25)) {
     $np$0$in$ph7$i = $18;$np$028$i = $np$026$i;
     while(1) {
      $np$03$i = $np$028$i;
      while(1) {
       $27 = ((($np$03$i)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = (($28>>>0) % ($24>>>0))&-1;
       $30 = ($29|0)==($15|0);
       $31 = ((($np$03$i)) + 4|0);
       if ($30) {
        $$lcssa = $31;
        break;
       }
       $32 = HEAP32[$31>>2]|0;
       HEAP32[$np$0$in$ph7$i>>2] = $32;
       $33 = HEAP32[$22>>2]|0;
       HEAP32[$31>>2] = $33;
       HEAP32[$22>>2] = $np$03$i;
       $np$0$i = HEAP32[$np$0$in$ph7$i>>2]|0;
       $34 = ($np$0$i|0)==(0|0);
       if ($34) {
        break L4;
       } else {
        $np$03$i = $np$0$i;
       }
      }
      $np$02$i = HEAP32[$$lcssa>>2]|0;
      $26 = ($np$02$i|0)==(0|0);
      if ($26) {
       break;
      } else {
       $np$0$in$ph7$i = $$lcssa;$np$028$i = $np$02$i;
      }
     }
    }
   } while(0);
   $35 = ($16>>>0)<($20>>>0);
   if ($35) {
    $$pre$phi8Z2D = $14;$$pre$phiZ2D = $19;
   } else {
    $36 = $24 << 1;
    $37 = HEAP32[$lh>>2]|0;
    $38 = $24 << 3;
    $39 = (_CRYPTO_realloc($37,$38,58750,336)|0);
    $40 = ($39|0)==(0|0);
    if ($40) {
     $41 = HEAP32[$0>>2]|0;
     $42 = (($41) + 1)|0;
     HEAP32[$0>>2] = $42;
     HEAP32[$14>>2] = 0;
     $$pre$phi8Z2D = $14;$$pre$phiZ2D = $19;
     break;
    }
    $43 = HEAP32[$23>>2]|0;
    $44 = ($43>>>0)<($36>>>0);
    if ($44) {
     $45 = $43 << 2;
     $scevgep$i = (($39) + ($45)|0);
     $46 = (($38) - ($45))|0;
     _memset(($scevgep$i|0),0,($46|0))|0;
     $$pre$i = HEAP32[$23>>2]|0;
     $47 = $$pre$i;
    } else {
     $47 = $43;
    }
    HEAP32[$19>>2] = $47;
    HEAP32[$23>>2] = $36;
    $48 = ((($lh)) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + 1)|0;
    HEAP32[$48>>2] = $50;
    HEAP32[$14>>2] = 0;
    HEAP32[$lh>>2] = $39;
    $$pre$phi8Z2D = $14;$$pre$phiZ2D = $19;
   }
  }
 } while(0);
 $51 = ((($lh)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_ii[$52 & 127]($data)|0);
 $54 = ((($lh)) + 56|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 1)|0;
 HEAP32[$54>>2] = $56;
 $57 = HEAP32[$$pre$phiZ2D>>2]|0;
 $58 = (($53>>>0) % ($57>>>0))&-1;
 $59 = HEAP32[$$pre$phi8Z2D>>2]|0;
 $60 = ($58>>>0)<($59>>>0);
 if ($60) {
  $61 = ((($lh)) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($53>>>0) % ($62>>>0))&-1;
  $nn$0$i = $63;
 } else {
  $nn$0$i = $58;
 }
 $64 = ((($lh)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$lh>>2]|0;
 $67 = (($66) + ($nn$0$i<<2)|0);
 $68 = ((($lh)) + 60|0);
 $n1$01$i = HEAP32[$67>>2]|0;
 $69 = ($n1$01$i|0)==(0|0);
 L24: do {
  if ($69) {
   $n1$0$in$lcssa$i9 = $67;
  } else {
   $70 = ((($lh)) + 88|0);
   $n1$0$in2$i = $67;$n1$03$i = $n1$01$i;
   while(1) {
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + 1)|0;
    HEAP32[$70>>2] = $72;
    $73 = ((($n1$03$i)) + 8|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==($53|0);
    if ($75) {
     $76 = HEAP32[$68>>2]|0;
     $77 = (($76) + 1)|0;
     HEAP32[$68>>2] = $77;
     $78 = HEAP32[$n1$03$i>>2]|0;
     $79 = (FUNCTION_TABLE_iii[$65 & 127]($78,$data)|0);
     $80 = ($79|0)==(0);
     if ($80) {
      $n1$0$in2$i$lcssa = $n1$0$in2$i;
      break;
     }
    }
    $ret$1$i = ((($n1$03$i)) + 4|0);
    $n1$0$i = HEAP32[$ret$1$i>>2]|0;
    $81 = ($n1$0$i|0)==(0|0);
    if ($81) {
     $n1$0$in$lcssa$i9 = $ret$1$i;
     break L24;
    } else {
     $n1$0$in2$i = $ret$1$i;$n1$03$i = $n1$0$i;
    }
   }
   $$pre$pre = HEAP32[$n1$0$in2$i$lcssa>>2]|0;
   $82 = ($$pre$pre|0)==(0|0);
   if ($82) {
    $n1$0$in$lcssa$i9 = $n1$0$in2$i$lcssa;
   } else {
    $94 = HEAP32[$$pre$pre>>2]|0;
    HEAP32[$$pre$pre>>2] = $data;
    $95 = ((($lh)) + 68|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($96) + 1)|0;
    HEAP32[$95>>2] = $97;
    $$0 = $94;
    return ($$0|0);
   }
  }
 } while(0);
 $83 = (_CRYPTO_malloc(12,58750,191)|0);
 $84 = ($83|0)==(0|0);
 if ($84) {
  $85 = HEAP32[$0>>2]|0;
  $86 = (($85) + 1)|0;
  HEAP32[$0>>2] = $86;
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$83>>2] = $data;
  $87 = ((($83)) + 4|0);
  HEAP32[$87>>2] = 0;
  $88 = ((($83)) + 8|0);
  HEAP32[$88>>2] = $53;
  HEAP32[$n1$0$in$lcssa$i9>>2] = $83;
  $89 = ((($lh)) + 64|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + 1)|0;
  HEAP32[$89>>2] = $91;
  $92 = HEAP32[$3>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$3>>2] = $93;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _lh_delete($lh,$data) {
 $lh = $lh|0;
 $data = $data|0;
 var $$0 = 0, $$lcssa = 0, $$pre$i = 0, $$pre$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $n1$0$i = 0, $n1$0$i1 = 0, $n1$0$in2$i = 0, $n1$0$in2$i$lcssa = 0;
 var $n1$01$i = 0, $n1$03$i = 0, $nn$0$i = 0, $ret$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($lh)) + 92|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($lh)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($data)|0);
 $4 = ((($lh)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($lh)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3>>>0) % ($8>>>0))&-1;
 $10 = ((($lh)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)<($11>>>0);
 if ($12) {
  $13 = ((($lh)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($3>>>0) % ($14>>>0))&-1;
  $nn$0$i = $15;
 } else {
  $nn$0$i = $9;
 }
 $16 = ((($lh)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$lh>>2]|0;
 $19 = (($18) + ($nn$0$i<<2)|0);
 $20 = ((($lh)) + 60|0);
 $n1$01$i = HEAP32[$19>>2]|0;
 $21 = ($n1$01$i|0)==(0|0);
 L4: do {
  if (!($21)) {
   $22 = ((($lh)) + 88|0);
   $n1$0$in2$i = $19;$n1$03$i = $n1$01$i;
   while(1) {
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + 1)|0;
    HEAP32[$22>>2] = $24;
    $25 = ((($n1$03$i)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==($3|0);
    if ($27) {
     $28 = HEAP32[$20>>2]|0;
     $29 = (($28) + 1)|0;
     HEAP32[$20>>2] = $29;
     $30 = HEAP32[$n1$03$i>>2]|0;
     $31 = (FUNCTION_TABLE_iii[$17 & 127]($30,$data)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      $n1$0$in2$i$lcssa = $n1$0$in2$i;
      break;
     }
    }
    $ret$1$i = ((($n1$03$i)) + 4|0);
    $n1$0$i = HEAP32[$ret$1$i>>2]|0;
    $33 = ($n1$0$i|0)==(0|0);
    if ($33) {
     break L4;
    } else {
     $n1$0$in2$i = $ret$1$i;$n1$03$i = $n1$0$i;
    }
   }
   $$pre$pre = HEAP32[$n1$0$in2$i$lcssa>>2]|0;
   $34 = ($$pre$pre|0)==(0|0);
   if (!($34)) {
    $38 = ((($$pre$pre)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$n1$0$in2$i$lcssa>>2] = $39;
    $40 = HEAP32[$$pre$pre>>2]|0;
    _CRYPTO_free($$pre$pre);
    $41 = ((($lh)) + 72|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[$41>>2] = $43;
    $44 = ((($lh)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + -1)|0;
    HEAP32[$44>>2] = $46;
    $47 = ((($lh)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48>>>0)>(16);
    if (!($49)) {
     $$0 = $40;
     return ($$0|0);
    }
    $50 = ((($lh)) + 32|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $46 << 8;
    $53 = (($52>>>0) / ($48>>>0))&-1;
    $54 = ($51>>>0)<($53>>>0);
    if ($54) {
     $$0 = $40;
     return ($$0|0);
    }
    $55 = HEAP32[$10>>2]|0;
    $56 = HEAP32[$7>>2]|0;
    $57 = (($55) + -1)|0;
    $58 = (($57) + ($56))|0;
    $59 = HEAP32[$lh>>2]|0;
    $60 = (($59) + ($58<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    HEAP32[$60>>2] = 0;
    $62 = ($55|0)==(0);
    do {
     if ($62) {
      $63 = HEAP32[$lh>>2]|0;
      $64 = $56 << 2;
      $65 = (_CRYPTO_realloc($63,$64,58750,363)|0);
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $69 = ((($lh)) + 52|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = (($70) + 1)|0;
       HEAP32[$69>>2] = $71;
       $72 = ((($lh)) + 16|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = $73 >>> 1;
       HEAP32[$72>>2] = $74;
       $75 = HEAP32[$7>>2]|0;
       $76 = $75 >>> 1;
       HEAP32[$7>>2] = $76;
       $77 = (($76) + -1)|0;
       HEAP32[$10>>2] = $77;
       HEAP32[$lh>>2] = $65;
       $$pre2 = HEAP32[$47>>2]|0;
       $79 = $$pre2;$84 = $65;$85 = $77;
       break;
      }
      $67 = HEAP32[$0>>2]|0;
      $68 = (($67) + 1)|0;
      HEAP32[$0>>2] = $68;
      $$0 = $40;
      return ($$0|0);
     } else {
      HEAP32[$10>>2] = $57;
      $$pre$i = HEAP32[$lh>>2]|0;
      $79 = $48;$84 = $$pre$i;$85 = $57;
     }
    } while(0);
    $78 = (($79) + -1)|0;
    HEAP32[$47>>2] = $78;
    $80 = ((($lh)) + 48|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + 1)|0;
    HEAP32[$80>>2] = $82;
    $83 = (($84) + ($85<<2)|0);
    $86 = HEAP32[$83>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     HEAP32[$83>>2] = $61;
     $$0 = $40;
     return ($$0|0);
    } else {
     $n1$0$i1 = $86;
    }
    while(1) {
     $88 = ((($n1$0$i1)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)==(0|0);
     if ($90) {
      $$lcssa = $88;
      break;
     } else {
      $n1$0$i1 = $89;
     }
    }
    HEAP32[$$lcssa>>2] = $61;
    $$0 = $40;
    return ($$0|0);
   }
  }
 } while(0);
 $35 = ((($lh)) + 76|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[$35>>2] = $37;
 $$0 = 0;
 return ($$0|0);
}
function _lh_retrieve($lh,$data) {
 $lh = $lh|0;
 $data = $data|0;
 var $$0 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n1$0$i = 0, $n1$0$in2$i = 0, $n1$0$in2$i$lcssa = 0, $n1$01$i = 0, $n1$03$i = 0, $nn$0$i = 0, $ret$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($lh)) + 92|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($lh)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($data)|0);
 $4 = ((($lh)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($lh)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3>>>0) % ($8>>>0))&-1;
 $10 = ((($lh)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)<($11>>>0);
 if ($12) {
  $13 = ((($lh)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($3>>>0) % ($14>>>0))&-1;
  $nn$0$i = $15;
 } else {
  $nn$0$i = $9;
 }
 $16 = ((($lh)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$lh>>2]|0;
 $19 = (($18) + ($nn$0$i<<2)|0);
 $20 = ((($lh)) + 60|0);
 $n1$01$i = HEAP32[$19>>2]|0;
 $21 = ($n1$01$i|0)==(0|0);
 L4: do {
  if (!($21)) {
   $22 = ((($lh)) + 88|0);
   $n1$0$in2$i = $19;$n1$03$i = $n1$01$i;
   while(1) {
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + 1)|0;
    HEAP32[$22>>2] = $24;
    $25 = ((($n1$03$i)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==($3|0);
    if ($27) {
     $28 = HEAP32[$20>>2]|0;
     $29 = (($28) + 1)|0;
     HEAP32[$20>>2] = $29;
     $30 = HEAP32[$n1$03$i>>2]|0;
     $31 = (FUNCTION_TABLE_iii[$17 & 127]($30,$data)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      $n1$0$in2$i$lcssa = $n1$0$in2$i;
      break;
     }
    }
    $ret$1$i = ((($n1$03$i)) + 4|0);
    $n1$0$i = HEAP32[$ret$1$i>>2]|0;
    $33 = ($n1$0$i|0)==(0|0);
    if ($33) {
     break L4;
    } else {
     $n1$0$in2$i = $ret$1$i;$n1$03$i = $n1$0$i;
    }
   }
   $$pre$pre = HEAP32[$n1$0$in2$i$lcssa>>2]|0;
   $34 = ($$pre$pre|0)==(0|0);
   if (!($34)) {
    $38 = HEAP32[$$pre$pre>>2]|0;
    $39 = ((($lh)) + 80|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 1)|0;
    HEAP32[$39>>2] = $41;
    $$0 = $38;
    return ($$0|0);
   }
  }
 } while(0);
 $35 = ((($lh)) + 84|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[$35>>2] = $37;
 $$0 = 0;
 return ($$0|0);
}
function _lh_doall($lh,$func) {
 $lh = $lh|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$02$us$us$i = 0, $i$0$us$i = 0, $i$03$i = 0, $i$04$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($lh|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($lh)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $i$03$i = (($2) + -1)|0;
 $3 = ($i$03$i|0)>(-1);
 if (!($3)) {
  return;
 }
 $i$04$us$i = $i$03$i;
 while(1) {
  $4 = HEAP32[$lh>>2]|0;
  $5 = (($4) + ($i$04$us$i<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $a$02$us$us$i = $6;
   while(1) {
    $9 = ((($a$02$us$us$i)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$a$02$us$us$i>>2]|0;
    FUNCTION_TABLE_vi[$func & 63]($11);
    $12 = ($10|0)==(0|0);
    if ($12) {
     break;
    } else {
     $a$02$us$us$i = $10;
    }
   }
  }
  $i$0$us$i = (($i$04$us$i) + -1)|0;
  $8 = ($i$0$us$i|0)>(-1);
  if ($8) {
   $i$04$us$i = $i$0$us$i;
  } else {
   break;
  }
 }
 return;
}
function _lh_doall_arg($lh,$func,$arg) {
 $lh = $lh|0;
 $func = $func|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$02$i = 0, $i$0$i = 0, $i$03$i = 0, $i$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($lh|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($lh)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $i$03$i = (($2) + -1)|0;
 $3 = ($i$03$i|0)>(-1);
 if (!($3)) {
  return;
 }
 $i$04$i = $i$03$i;
 while(1) {
  $5 = HEAP32[$lh>>2]|0;
  $6 = (($5) + ($i$04$i<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $a$02$i = $7;
   while(1) {
    $9 = ((($a$02$i)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$a$02$i>>2]|0;
    FUNCTION_TABLE_vii[$func & 31]($11,$arg);
    $12 = ($10|0)==(0|0);
    if ($12) {
     break;
    } else {
     $a$02$i = $10;
    }
   }
  }
  $i$0$i = (($i$04$i) + -1)|0;
  $4 = ($i$0$i|0)>(-1);
  if ($4) {
   $i$04$i = $i$0$i;
  } else {
   break;
  }
 }
 return;
}
function _lh_num_items($lh) {
 $lh = $lh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($lh|0)==(0|0);
 if ($0) {
  $3 = 0;
  return ($3|0);
 }
 $1 = ((($lh)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 return ($3|0);
}
function _BIO_printf($bio,$format,$varargs) {
 $bio = $bio|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 HEAP32[$args>>2] = $varargs;
 $0 = (_BIO_vprintf($bio,$format,$args)|0);
 STACKTOP = sp;return ($0|0);
}
function _BIO_vprintf($bio,$format,$args) {
 $bio = $bio|0;
 $format = $format|0;
 $args = $args|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $dynbuf = 0, $hugebuf = 0, $hugebufp = 0, $hugebufsize = 0, $ignored = 0, $ret$0 = 0, $retlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080|0;
 $retlen = sp + 16|0;
 $hugebuf = sp + 24|0;
 $hugebufp = sp + 12|0;
 $hugebufsize = sp + 8|0;
 $dynbuf = sp + 4|0;
 $ignored = sp;
 HEAP32[$hugebufp>>2] = $hugebuf;
 HEAP32[$hugebufsize>>2] = 2048;
 HEAP32[$dynbuf>>2] = 0;
 (_CRYPTO_push_info_(58758,58766,810)|0);
 $0 = (__dopr($hugebufp,$dynbuf,$hugebufsize,$retlen,$ignored,$format,$args)|0);
 $1 = ($0|0)==(0);
 $2 = HEAP32[$dynbuf>>2]|0;
 if ($1) {
  _CRYPTO_free($2);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($2|0)==(0|0);
 $4 = HEAP32[$retlen>>2]|0;
 if ($3) {
  $7 = (_BIO_write($bio,$hugebuf,$4)|0);
  $ret$0 = $7;
 } else {
  $5 = (_BIO_write($bio,$2,$4)|0);
  $6 = HEAP32[$dynbuf>>2]|0;
  _CRYPTO_free($6);
  $ret$0 = $5;
 }
 (_CRYPTO_pop_info()|0);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _BIO_snprintf($buf,$n,$format,$varargs) {
 $buf = $buf|0;
 $n = $n|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $or$cond$i = 0, $retlen$i = 0, $truncated$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $retlen$i = sp + 20|0;
 $truncated$i = sp + 16|0;
 $args = sp;
 HEAP32[$args>>2] = $varargs;
 HEAP32[$0>>2] = $buf;
 HEAP32[$1>>2] = $n;
 $2 = (__dopr($0,0,$1,$retlen$i,$truncated$i,$format,$args)|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$truncated$i>>2]|0;
 $5 = ($4|0)==(0);
 $or$cond$i = $3 & $5;
 if (!($or$cond$i)) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $6 = HEAP32[$retlen$i>>2]|0;
 $7 = ($6|0)>(-1);
 $8 = $7 ? $6 : -1;
 $$0$i = $8;
 STACKTOP = sp;return ($$0$i|0);
}
function __dopr($sbuffer,$buffer,$maxlen,$retlen,$truncated,$format,$args) {
 $sbuffer = $sbuffer|0;
 $buffer = $buffer|0;
 $maxlen = $maxlen|0;
 $retlen = $retlen|0;
 $truncated = $truncated|0;
 $format = $format|0;
 $args = $args|0;
 var $$$i = 0, $$$i7 = 0, $$$max$i = 0, $$0 = 0, $$01$i$i = 0, $$01$i9$i = 0, $$0163$be = 0, $$0163107 = 0, $$1 = 0, $$132$i = 0, $$3 = 0, $$4$$i = 0, $$4$i = 0, $$lcssa133 = +0, $$lcssa134 = +0, $$lcssa135 = 0, $$mask = 0, $$max$i = 0, $$neg$i = 0, $$not = 0;
 var $$not90 = 0, $$value$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = +0, $193 = 0, $194 = 0, $195 = +0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = +0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = +0, $208 = +0, $209 = 0, $21 = 0, $210 = +0, $211 = 0, $212 = 0, $213 = +0, $214 = +0, $215 = +0, $216 = 0, $217 = +0, $218 = +0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0;
 var $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0;
 var $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $brmerge = 0, $cflags$061$be = 0;
 var $cflags$061109 = 0, $cflags$1 = 0, $ch$062$be = 0, $ch$062108 = 0, $cnt$0$lcssa$i = 0, $cnt$038$i = 0, $cnt$1$lcssa$i = 0, $cnt$133$i = 0, $cnt$225$i = 0, $currlen = 0, $expanded = 0, $expanded100 = 0, $expanded102 = 0, $expanded103 = 0, $expanded104 = 0, $expanded106 = 0, $expanded107 = 0, $expanded109 = 0, $expanded110 = 0, $expanded111 = 0;
 var $expanded113 = 0, $expanded114 = 0, $expanded116 = 0, $expanded117 = 0, $expanded118 = 0, $expanded120 = 0, $expanded121 = 0, $expanded123 = 0, $expanded124 = 0, $expanded125 = 0, $expanded127 = 0, $expanded128 = 0, $expanded130 = 0, $expanded131 = 0, $expanded132 = 0, $expanded134 = 0, $expanded135 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0;
 var $expanded141 = 0, $expanded142 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded148 = 0, $expanded149 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0, $expanded155 = 0, $expanded156 = 0, $expanded158 = 0, $expanded159 = 0, $expanded160 = 0, $expanded162 = 0, $expanded163 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0;
 var $expanded169 = 0, $expanded170 = 0, $expanded172 = 0, $expanded173 = 0, $expanded174 = 0, $expanded176 = 0, $expanded177 = 0, $expanded179 = 0, $expanded180 = 0, $expanded181 = 0, $expanded183 = 0, $expanded184 = 0, $expanded186 = 0, $expanded187 = 0, $expanded188 = 0, $expanded190 = 0, $expanded191 = 0, $expanded193 = 0, $expanded194 = 0, $expanded195 = 0;
 var $expanded58 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded64 = 0, $expanded65 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded71 = 0, $expanded72 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded78 = 0, $expanded79 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded85 = 0;
 var $expanded86 = 0, $expanded88 = 0, $expanded89 = 0, $expanded90 = 0, $expanded92 = 0, $expanded93 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded99 = 0, $fconvert$i = 0, $flags$060$be = 0, $flags$060110 = 0, $flags$1 = 0, $fplace$0$$i = 0, $fplace$0$i = 0, $fplace$273$i = 0, $fracpart$0$ph$i = 0, $fracpart$1$i = 0, $iconvert$i = 0;
 var $intpart$0$i = 0, $intpart$0$i$i = 0, $intpart$0$i14$i = 0, $intpart$0$i31$i = 0, $intpart$0$off$i = 0, $intpart$0$ph$i = 0, $iplace$0$$i = 0, $iplace$0$i = 0, $iplace$0$i$lcssa = 0, $iplace$275$i = 0, $isdigit = 0, $isdigit3 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $max$0$op = 0, $max$0$op$op = 0, $max$058$be = 0, $max$058$mux = 0, $max$058112 = 0, $max$2 = 0;
 var $min$057$be = 0, $min$057113 = 0, $not$$i$i = 0, $not$$i13$i = 0, $or$cond$i = 0, $or$cond$i8 = 0, $or$cond36$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond631$i = 0, $or$cond7$i = 0, $or$cond723$i = 0, $padlen$0$$i = 0, $padlen$0$i = 0, $padlen$0$lcssa$i = 0, $padlen$037$i = 0, $padlen$124$i = 0, $padlen$2$ph$i = 0, $padlen$280$i = 0, $padlen$3$lcssa$i = 0;
 var $padlen$3$lcssa90$i = 0, $padlen$3$ph$i = 0, $padlen$377$i = 0, $padlen$464$i = 0, $result$0$i$i = +0, $result$0$lcssa$i11$i = +0, $result$02$i$i = +0, $result$02$i8$i = +0, $signvalue$0$i = 0, $signvalue$2$ph$i = 0, $smax88$i = 0, $state$059$be = 0, $state$059111 = 0, $state$2 = 0, $zpadlen$071$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $iconvert$i = sp + 24|0;
 $fconvert$i = sp + 4|0;
 $currlen = sp;
 HEAP32[$currlen>>2] = 0;
 $0 = HEAP8[$format>>0]|0;
 $1 = ($buffer|0)==(0|0);
 $2 = ($0<<24>>24)==(0);
 L1: do {
  if (!($2)) {
   $3 = $0 << 24 >> 24;
   $4 = ((($format)) + 1|0);
   $$not90 = $1 ^ 1;
   $$0163107 = $4;$36 = $3;$cflags$061109 = 0;$ch$062108 = $0;$flags$060110 = 0;$max$058112 = -1;$min$057113 = 0;$state$059111 = 0;
   L3: while(1) {
    if ($1) {
     $5 = HEAP32[$currlen>>2]|0;
     $6 = HEAP32[$maxlen>>2]|0;
     $7 = ($5>>>0)<($6>>>0);
     if (!($7)) {
      break L1;
     }
    }
    L8: do {
     switch ($state$059111|0) {
     case 7:  {
      break L1;
      break;
     }
     case 0:  {
      $10 = ($ch$062108<<24>>24)==(37);
      do {
       if ($10) {
        $state$2 = 1;
       } else {
        do {
         if (!($1)) {
          $11 = HEAP32[$currlen>>2]|0;
          $12 = HEAP32[$maxlen>>2]|0;
          $13 = ($11|0)==($12|0);
          if ($13) {
           $14 = ($11>>>0)>(2147482623);
           if ($14) {
            $$0 = 0;
            label = 320;
            break L3;
           }
           $15 = (($11) + 1024)|0;
           HEAP32[$maxlen>>2] = $15;
           $16 = HEAP32[$buffer>>2]|0;
           $17 = ($16|0)==(0|0);
           if (!($17)) {
            $23 = (_CRYPTO_realloc($16,$15,58766,765)|0);
            $24 = ($23|0)==(0|0);
            if ($24) {
             $$0 = 0;
             label = 320;
             break L3;
            }
            HEAP32[$buffer>>2] = $23;
            break;
           }
           $18 = (_CRYPTO_malloc($15,58766,755)|0);
           HEAP32[$buffer>>2] = $18;
           $19 = ($18|0)==(0|0);
           if ($19) {
            $$0 = 0;
            label = 320;
            break L3;
           }
           $20 = HEAP32[$currlen>>2]|0;
           $21 = ($20|0)==(0);
           if (!($21)) {
            $22 = HEAP32[$sbuffer>>2]|0;
            _memcpy(($18|0),($22|0),($20|0))|0;
           }
           HEAP32[$sbuffer>>2] = 0;
          }
         }
        } while(0);
        $25 = HEAP32[$currlen>>2]|0;
        $26 = HEAP32[$maxlen>>2]|0;
        $27 = ($25>>>0)<($26>>>0);
        if ($27) {
         $28 = HEAP32[$sbuffer>>2]|0;
         $29 = ($28|0)==(0|0);
         $30 = (($25) + 1)|0;
         HEAP32[$currlen>>2] = $30;
         if ($29) {
          $32 = HEAP32[$buffer>>2]|0;
          $33 = (($32) + ($25)|0);
          HEAP8[$33>>0] = $ch$062108;
          $state$2 = 0;
          break;
         } else {
          $31 = (($28) + ($25)|0);
          HEAP8[$31>>0] = $ch$062108;
          $state$2 = 0;
          break;
         }
        } else {
         $state$2 = 0;
        }
       }
      } while(0);
      $34 = ((($$0163107)) + 1|0);
      $35 = HEAP8[$$0163107>>0]|0;
      $$0163$be = $34;$cflags$061$be = $cflags$061109;$ch$062$be = $35;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = $state$2;
      break;
     }
     case 1:  {
      switch ($36|0) {
      case 45:  {
       $37 = $flags$060110 | 1;
       $38 = ((($$0163107)) + 1|0);
       $39 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $38;$cflags$061$be = $cflags$061109;$ch$062$be = $39;$flags$060$be = $37;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 1;
       break L8;
       break;
      }
      case 43:  {
       $40 = $flags$060110 | 2;
       $41 = ((($$0163107)) + 1|0);
       $42 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $41;$cflags$061$be = $cflags$061109;$ch$062$be = $42;$flags$060$be = $40;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 1;
       break L8;
       break;
      }
      case 32:  {
       $43 = $flags$060110 | 4;
       $44 = ((($$0163107)) + 1|0);
       $45 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $44;$cflags$061$be = $cflags$061109;$ch$062$be = $45;$flags$060$be = $43;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 1;
       break L8;
       break;
      }
      case 35:  {
       $46 = $flags$060110 | 8;
       $47 = ((($$0163107)) + 1|0);
       $48 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $47;$cflags$061$be = $cflags$061109;$ch$062$be = $48;$flags$060$be = $46;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 1;
       break L8;
       break;
      }
      case 48:  {
       $49 = $flags$060110 | 16;
       $50 = ((($$0163107)) + 1|0);
       $51 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $50;$cflags$061$be = $cflags$061109;$ch$062$be = $51;$flags$060$be = $49;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 1;
       break L8;
       break;
      }
      default: {
       $$0163$be = $$0163107;$cflags$061$be = $cflags$061109;$ch$062$be = $ch$062108;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 2;
       break L8;
      }
      }
      break;
     }
     case 2:  {
      $52 = $ch$062108&255;
      $isdigittmp2 = (($52) + -48)|0;
      $isdigit3 = ($isdigittmp2>>>0)<(10);
      if ($isdigit3) {
       $53 = ($min$057113*10)|0;
       $54 = (($53) + -48)|0;
       $55 = (($54) + ($36))|0;
       $56 = ((($$0163107)) + 1|0);
       $57 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $56;$cflags$061$be = $cflags$061109;$ch$062$be = $57;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $55;$state$059$be = 2;
       break L8;
      }
      $58 = ($ch$062108<<24>>24)==(42);
      if ($58) {
       $arglist_current = HEAP32[$args>>2]|0;
       $59 = $arglist_current;
       $60 = ((0) + 4|0);
       $expanded58 = $60;
       $expanded = (($expanded58) - 1)|0;
       $61 = (($59) + ($expanded))|0;
       $62 = ((0) + 4|0);
       $expanded62 = $62;
       $expanded61 = (($expanded62) - 1)|0;
       $expanded60 = $expanded61 ^ -1;
       $63 = $61 & $expanded60;
       $64 = $63;
       $65 = HEAP32[$64>>2]|0;
       $arglist_next = ((($64)) + 4|0);
       HEAP32[$args>>2] = $arglist_next;
       $66 = ((($$0163107)) + 1|0);
       $67 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $66;$cflags$061$be = $cflags$061109;$ch$062$be = $67;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $65;$state$059$be = 3;
      } else {
       $$0163$be = $$0163107;$cflags$061$be = $cflags$061109;$ch$062$be = $ch$062108;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 3;
      }
      break;
     }
     case 3:  {
      $68 = ($ch$062108<<24>>24)==(46);
      if ($68) {
       $69 = ((($$0163107)) + 1|0);
       $70 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $69;$cflags$061$be = $cflags$061109;$ch$062$be = $70;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 4;
      } else {
       $$0163$be = $$0163107;$cflags$061$be = $cflags$061109;$ch$062$be = $ch$062108;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 5;
      }
      break;
     }
     case 4:  {
      $71 = $ch$062108&255;
      $isdigittmp = (($71) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $72 = ($max$058112|0)<(0);
       $max$0$op = ($max$058112*10)|0;
       $max$0$op$op = (($max$0$op) + -48)|0;
       $73 = $72 ? -48 : $max$0$op$op;
       $74 = (($73) + ($36))|0;
       $75 = ((($$0163107)) + 1|0);
       $76 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $75;$cflags$061$be = $cflags$061109;$ch$062$be = $76;$flags$060$be = $flags$060110;$max$058$be = $74;$min$057$be = $min$057113;$state$059$be = 4;
       break L8;
      }
      $77 = ($ch$062108<<24>>24)==(42);
      if ($77) {
       $arglist_current2 = HEAP32[$args>>2]|0;
       $78 = $arglist_current2;
       $79 = ((0) + 4|0);
       $expanded65 = $79;
       $expanded64 = (($expanded65) - 1)|0;
       $80 = (($78) + ($expanded64))|0;
       $81 = ((0) + 4|0);
       $expanded69 = $81;
       $expanded68 = (($expanded69) - 1)|0;
       $expanded67 = $expanded68 ^ -1;
       $82 = $80 & $expanded67;
       $83 = $82;
       $84 = HEAP32[$83>>2]|0;
       $arglist_next3 = ((($83)) + 4|0);
       HEAP32[$args>>2] = $arglist_next3;
       $85 = ((($$0163107)) + 1|0);
       $86 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $85;$cflags$061$be = $cflags$061109;$ch$062$be = $86;$flags$060$be = $flags$060110;$max$058$be = $84;$min$057$be = $min$057113;$state$059$be = 5;
      } else {
       $$0163$be = $$0163107;$cflags$061$be = $cflags$061109;$ch$062$be = $ch$062108;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 5;
      }
      break;
     }
     case 5:  {
      switch ($36|0) {
      case 104:  {
       $87 = ((($$0163107)) + 1|0);
       $88 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $87;$cflags$061$be = 1;$ch$062$be = $88;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 6;
       break L8;
       break;
      }
      case 108:  {
       $89 = HEAP8[$$0163107>>0]|0;
       $90 = ($89<<24>>24)==(108);
       $91 = ((($$0163107)) + 1|0);
       $cflags$1 = $90 ? 4 : 2;
       $$1 = $90 ? $91 : $$0163107;
       $92 = ((($$1)) + 1|0);
       $93 = HEAP8[$$1>>0]|0;
       $$0163$be = $92;$cflags$061$be = $cflags$1;$ch$062$be = $93;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 6;
       break L8;
       break;
      }
      case 113:  {
       $94 = ((($$0163107)) + 1|0);
       $95 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $94;$cflags$061$be = 4;$ch$062$be = $95;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 6;
       break L8;
       break;
      }
      case 76:  {
       $96 = ((($$0163107)) + 1|0);
       $97 = HEAP8[$$0163107>>0]|0;
       $$0163$be = $96;$cflags$061$be = 3;$ch$062$be = $97;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 6;
       break L8;
       break;
      }
      default: {
       $$0163$be = $$0163107;$cflags$061$be = $cflags$061109;$ch$062$be = $ch$062108;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = 6;
       break L8;
      }
      }
      break;
     }
     case 6:  {
      L56: do {
       switch ($36|0) {
       case 105: case 100:  {
        switch ($cflags$061109|0) {
        case 1:  {
         $arglist_current5 = HEAP32[$args>>2]|0;
         $98 = $arglist_current5;
         $99 = ((0) + 4|0);
         $expanded72 = $99;
         $expanded71 = (($expanded72) - 1)|0;
         $100 = (($98) + ($expanded71))|0;
         $101 = ((0) + 4|0);
         $expanded76 = $101;
         $expanded75 = (($expanded76) - 1)|0;
         $expanded74 = $expanded75 ^ -1;
         $102 = $100 & $expanded74;
         $103 = $102;
         $104 = HEAP32[$103>>2]|0;
         $arglist_next6 = ((($103)) + 4|0);
         HEAP32[$args>>2] = $arglist_next6;
         $105 = $104&65535;
         $106 = $105 << 16 >> 16;
         $107 = ($106|0)<(0);
         $108 = $107 << 31 >> 31;
         $139 = $106;$140 = $108;
         break;
        }
        case 2:  {
         $arglist_current8 = HEAP32[$args>>2]|0;
         $109 = $arglist_current8;
         $110 = ((0) + 4|0);
         $expanded79 = $110;
         $expanded78 = (($expanded79) - 1)|0;
         $111 = (($109) + ($expanded78))|0;
         $112 = ((0) + 4|0);
         $expanded83 = $112;
         $expanded82 = (($expanded83) - 1)|0;
         $expanded81 = $expanded82 ^ -1;
         $113 = $111 & $expanded81;
         $114 = $113;
         $115 = HEAP32[$114>>2]|0;
         $arglist_next9 = ((($114)) + 4|0);
         HEAP32[$args>>2] = $arglist_next9;
         $116 = ($115|0)<(0);
         $117 = $116 << 31 >> 31;
         $139 = $115;$140 = $117;
         break;
        }
        case 4:  {
         $arglist_current11 = HEAP32[$args>>2]|0;
         $118 = $arglist_current11;
         $119 = ((0) + 8|0);
         $expanded86 = $119;
         $expanded85 = (($expanded86) - 1)|0;
         $120 = (($118) + ($expanded85))|0;
         $121 = ((0) + 8|0);
         $expanded90 = $121;
         $expanded89 = (($expanded90) - 1)|0;
         $expanded88 = $expanded89 ^ -1;
         $122 = $120 & $expanded88;
         $123 = $122;
         $124 = $123;
         $125 = $124;
         $126 = HEAP32[$125>>2]|0;
         $127 = (($124) + 4)|0;
         $128 = $127;
         $129 = HEAP32[$128>>2]|0;
         $arglist_next12 = ((($123)) + 8|0);
         HEAP32[$args>>2] = $arglist_next12;
         $139 = $126;$140 = $129;
         break;
        }
        default: {
         $arglist_current14 = HEAP32[$args>>2]|0;
         $130 = $arglist_current14;
         $131 = ((0) + 4|0);
         $expanded93 = $131;
         $expanded92 = (($expanded93) - 1)|0;
         $132 = (($130) + ($expanded92))|0;
         $133 = ((0) + 4|0);
         $expanded97 = $133;
         $expanded96 = (($expanded97) - 1)|0;
         $expanded95 = $expanded96 ^ -1;
         $134 = $132 & $expanded95;
         $135 = $134;
         $136 = HEAP32[$135>>2]|0;
         $arglist_next15 = ((($135)) + 4|0);
         HEAP32[$args>>2] = $arglist_next15;
         $137 = ($136|0)<(0);
         $138 = $137 << 31 >> 31;
         $139 = $136;$140 = $138;
        }
        }
        $141 = (_fmtint($sbuffer,$buffer,$currlen,$maxlen,$139,$140,10,$min$057113,$max$058112,$flags$060110)|0);
        $142 = ($141|0)==(0);
        if ($142) {
         $$0 = 0;
         label = 320;
         break L3;
        } else {
         $$3 = $$0163107;
        }
        break;
       }
       case 88:  {
        $143 = $flags$060110 | 32;
        $flags$1 = $143;
        label = 52;
        break;
       }
       case 117: case 111: case 120:  {
        $flags$1 = $flags$060110;
        label = 52;
        break;
       }
       case 102:  {
        $arglist_current29 = HEAP32[$args>>2]|0;
        $186 = $arglist_current29;
        $187 = ((0) + 8|0);
        $expanded128 = $187;
        $expanded127 = (($expanded128) - 1)|0;
        $188 = (($186) + ($expanded127))|0;
        $189 = ((0) + 8|0);
        $expanded132 = $189;
        $expanded131 = (($expanded132) - 1)|0;
        $expanded130 = $expanded131 ^ -1;
        $190 = $188 & $expanded130;
        $191 = $190;
        $192 = +HEAPF64[$191>>3];
        $arglist_next30 = ((($191)) + 8|0);
        HEAP32[$args>>2] = $arglist_next30;
        $193 = ($max$058112|0)<(0);
        $$max$i = $193 ? 6 : $max$058112;
        $194 = $192 < +0;
        $195 = -$192;
        $result$0$i$i = $194 ? $195 : $192;
        if ($194) {
         $signvalue$0$i = 45;
        } else {
         $196 = $flags$060110 & 2;
         $197 = ($196|0)==(0);
         if ($197) {
          $198 = $flags$060110 << 3;
          $199 = $198 & 32;
          $signvalue$0$i = $199;
         } else {
          $signvalue$0$i = 43;
         }
        }
        $200 = (~~(($result$0$i$i)));
        $201 = ($$max$i|0)>(9);
        $$$max$i = $201 ? 9 : $$max$i;
        $202 = ($$$max$i|0)==(0);
        if ($202) {
         $intpart$0$i31$i = 1;$result$0$lcssa$i11$i = +1;
        } else {
         $$01$i$i = $$$max$i;$result$02$i$i = +1;
         while(1) {
          $203 = $result$02$i$i * +10;
          $204 = (($$01$i$i) + -1)|0;
          $205 = ($204|0)==(0);
          if ($205) {
           $$lcssa133 = $203;
           break;
          } else {
           $$01$i$i = $204;$result$02$i$i = $203;
          }
         }
         $206 = (~~(($$lcssa133)));
         $207 = (+($206|0));
         $208 = $$lcssa133 - $207;
         $not$$i$i = $208 >= +0.5;
         $209 = $not$$i$i&1;
         $$01$i9$i = $$$max$i;$result$02$i8$i = +1;
         while(1) {
          $210 = $result$02$i8$i * +10;
          $211 = (($$01$i9$i) + -1)|0;
          $212 = ($211|0)==(0);
          if ($212) {
           $$lcssa134 = $210;
           break;
          } else {
           $$01$i9$i = $211;$result$02$i8$i = $210;
          }
         }
         $intpart$0$i$i = (($209) + ($206))|0;
         $intpart$0$i31$i = $intpart$0$i$i;$result$0$lcssa$i11$i = $$lcssa134;
        }
        $213 = (+($200|0));
        $214 = $result$0$i$i - $213;
        $215 = $214 * $result$0$lcssa$i11$i;
        $216 = (~~(($215)));
        $217 = (+($216|0));
        $218 = $215 - $217;
        $not$$i13$i = $218 >= +0.5;
        $219 = $not$$i13$i&1;
        $intpart$0$i14$i = (($219) + ($216))|0;
        $220 = ($intpart$0$i14$i|0)<($intpart$0$i31$i|0);
        $221 = $220&1;
        $222 = $221 ^ 1;
        $intpart$0$ph$i = (($222) + ($200))|0;
        $223 = $220 ? 0 : $intpart$0$i31$i;
        $intpart$0$i = $intpart$0$ph$i;$iplace$0$i = 0;
        while(1) {
         $224 = (($intpart$0$i|0) % 10)&-1;
         $225 = (58776 + ($224)|0);
         $226 = HEAP8[$225>>0]|0;
         $227 = (($iplace$0$i) + 1)|0;
         $228 = (($iconvert$i) + ($iplace$0$i)|0);
         HEAP8[$228>>0] = $226;
         $229 = (($intpart$0$i|0) / 10)&-1;
         $intpart$0$off$i = (($intpart$0$i) + 9)|0;
         $230 = ($intpart$0$off$i>>>0)>(18);
         $231 = ($227|0)<(20);
         $232 = $231 & $230;
         if ($232) {
          $intpart$0$i = $229;$iplace$0$i = $227;
         } else {
          $$lcssa135 = $227;$iplace$0$i$lcssa = $iplace$0$i;
          break;
         }
        }
        $fracpart$0$ph$i = (($intpart$0$i14$i) - ($223))|0;
        $233 = ($$lcssa135|0)==(20);
        $iplace$0$$i = $233 ? $iplace$0$i$lcssa : $$lcssa135;
        $234 = (($iconvert$i) + ($iplace$0$$i)|0);
        HEAP8[$234>>0] = 0;
        $235 = ($$max$i|0)<(9);
        $236 = $235 ? $$max$i : 9;
        $237 = ($236|0)>(1);
        $fplace$0$i = 0;$fracpart$1$i = $fracpart$0$ph$i;
        while(1) {
         $238 = (($fracpart$1$i|0) % 10)&-1;
         $239 = (58776 + ($238)|0);
         $240 = HEAP8[$239>>0]|0;
         $241 = (($fplace$0$i) + 1)|0;
         $242 = (($fconvert$i) + ($fplace$0$i)|0);
         HEAP8[$242>>0] = $240;
         $243 = (($fracpart$1$i|0) / 10)&-1;
         $244 = ($241|0)<($$$max$i|0);
         if ($244) {
          $fplace$0$i = $241;$fracpart$1$i = $243;
         } else {
          break;
         }
        }
        $smax88$i = $237 ? $236 : 1;
        $245 = ($smax88$i|0)==(20);
        $246 = $245 << 31 >> 31;
        $fplace$0$$i = (($246) + ($smax88$i))|0;
        $247 = (($fconvert$i) + ($fplace$0$$i)|0);
        HEAP8[$247>>0] = 0;
        $248 = ($signvalue$0$i|0)!=(0);
        $$neg$i = $248 << 31 >> 31;
        $249 = (($min$057113) + -1)|0;
        $250 = (($249) - ($$$max$i))|0;
        $251 = (($250) + ($$neg$i))|0;
        $252 = (($251) - ($iplace$0$$i))|0;
        $253 = (($$$max$i) - ($fplace$0$$i))|0;
        $254 = ($253|0)<(0);
        $$$i = $254 ? 0 : $253;
        $255 = ($252|0)<(0);
        $padlen$0$i = $255 ? 0 : $252;
        $256 = $flags$060110 & 1;
        $257 = ($256|0)==(0);
        $258 = (0 - ($padlen$0$i))|0;
        $padlen$0$$i = $257 ? $padlen$0$i : $258;
        $259 = $flags$060110 & 16;
        $260 = ($259|0)!=(0);
        $261 = ($padlen$0$$i|0)>(0);
        $or$cond$i = $260 & $261;
        if ($or$cond$i) {
         if ($248) {
          do {
           if (!($1)) {
            $263 = HEAP32[$currlen>>2]|0;
            $264 = HEAP32[$maxlen>>2]|0;
            $265 = ($263|0)==($264|0);
            if ($265) {
             $266 = ($263>>>0)>(2147482623);
             if ($266) {
              label = 213;
              break L3;
             }
             $267 = (($263) + 1024)|0;
             HEAP32[$maxlen>>2] = $267;
             $268 = HEAP32[$buffer>>2]|0;
             $269 = ($268|0)==(0|0);
             if (!($269)) {
              $275 = (_CRYPTO_realloc($268,$267,58766,765)|0);
              $276 = ($275|0)==(0|0);
              if ($276) {
               label = 213;
               break L3;
              }
              HEAP32[$buffer>>2] = $275;
              break;
             }
             $270 = (_CRYPTO_malloc($267,58766,755)|0);
             HEAP32[$buffer>>2] = $270;
             $271 = ($270|0)==(0|0);
             if ($271) {
              label = 213;
              break L3;
             }
             $272 = HEAP32[$currlen>>2]|0;
             $273 = ($272|0)==(0);
             if (!($273)) {
              $274 = HEAP32[$sbuffer>>2]|0;
              _memcpy(($270|0),($274|0),($272|0))|0;
             }
             HEAP32[$sbuffer>>2] = 0;
            }
           }
          } while(0);
          $277 = HEAP32[$currlen>>2]|0;
          $278 = HEAP32[$maxlen>>2]|0;
          $279 = ($277>>>0)<($278>>>0);
          do {
           if ($279) {
            $280 = HEAP32[$sbuffer>>2]|0;
            $281 = ($280|0)==(0|0);
            $282 = $signvalue$0$i&255;
            $283 = (($277) + 1)|0;
            HEAP32[$currlen>>2] = $283;
            if ($281) {
             $285 = HEAP32[$buffer>>2]|0;
             $286 = (($285) + ($277)|0);
             HEAP8[$286>>0] = $282;
             break;
            } else {
             $284 = (($280) + ($277)|0);
             HEAP8[$284>>0] = $282;
             break;
            }
           }
          } while(0);
          $287 = (($padlen$0$$i) + -1)|0;
          $padlen$2$ph$i = $287;
         } else {
          $padlen$2$ph$i = $padlen$0$$i;
         }
         $288 = ($padlen$2$ph$i|0)>(0);
         if ($288) {
          $padlen$280$i = $padlen$2$ph$i;
          while(1) {
           do {
            if (!($1)) {
             $289 = HEAP32[$currlen>>2]|0;
             $290 = HEAP32[$maxlen>>2]|0;
             $291 = ($289|0)==($290|0);
             if ($291) {
              $292 = ($289>>>0)>(2147482623);
              if ($292) {
               label = 213;
               break L3;
              }
              $293 = (($289) + 1024)|0;
              HEAP32[$maxlen>>2] = $293;
              $294 = HEAP32[$buffer>>2]|0;
              $295 = ($294|0)==(0|0);
              if (!($295)) {
               $301 = (_CRYPTO_realloc($294,$293,58766,765)|0);
               $302 = ($301|0)==(0|0);
               if ($302) {
                label = 213;
                break L3;
               }
               HEAP32[$buffer>>2] = $301;
               break;
              }
              $296 = (_CRYPTO_malloc($293,58766,755)|0);
              HEAP32[$buffer>>2] = $296;
              $297 = ($296|0)==(0|0);
              if ($297) {
               label = 213;
               break L3;
              }
              $298 = HEAP32[$currlen>>2]|0;
              $299 = ($298|0)==(0);
              if (!($299)) {
               $300 = HEAP32[$sbuffer>>2]|0;
               _memcpy(($296|0),($300|0),($298|0))|0;
              }
              HEAP32[$sbuffer>>2] = 0;
             }
            }
           } while(0);
           $303 = HEAP32[$currlen>>2]|0;
           $304 = HEAP32[$maxlen>>2]|0;
           $305 = ($303>>>0)<($304>>>0);
           do {
            if ($305) {
             $306 = HEAP32[$sbuffer>>2]|0;
             $307 = ($306|0)==(0|0);
             $308 = (($303) + 1)|0;
             HEAP32[$currlen>>2] = $308;
             if ($307) {
              $310 = HEAP32[$buffer>>2]|0;
              $311 = (($310) + ($303)|0);
              HEAP8[$311>>0] = 48;
              break;
             } else {
              $309 = (($306) + ($303)|0);
              HEAP8[$309>>0] = 48;
              break;
             }
            }
           } while(0);
           $312 = (($padlen$280$i) + -1)|0;
           $313 = ($padlen$280$i|0)>(1);
           if ($313) {
            $padlen$280$i = $312;
           } else {
            $padlen$3$ph$i = $312;$signvalue$2$ph$i = 0;
            label = 71;
            break;
           }
          }
         } else {
          $padlen$3$lcssa90$i = $padlen$2$ph$i;
         }
        } else {
         $padlen$3$ph$i = $padlen$0$$i;$signvalue$2$ph$i = $signvalue$0$i;
         label = 71;
        }
        do {
         if ((label|0) == 71) {
          label = 0;
          $262 = ($padlen$3$ph$i|0)>(0);
          if ($262) {
           $padlen$377$i = $padlen$3$ph$i;
           while(1) {
            do {
             if (!($1)) {
              $314 = HEAP32[$currlen>>2]|0;
              $315 = HEAP32[$maxlen>>2]|0;
              $316 = ($314|0)==($315|0);
              if ($316) {
               $317 = ($314>>>0)>(2147482623);
               if ($317) {
                label = 213;
                break L3;
               }
               $318 = (($314) + 1024)|0;
               HEAP32[$maxlen>>2] = $318;
               $319 = HEAP32[$buffer>>2]|0;
               $320 = ($319|0)==(0|0);
               if (!($320)) {
                $326 = (_CRYPTO_realloc($319,$318,58766,765)|0);
                $327 = ($326|0)==(0|0);
                if ($327) {
                 label = 213;
                 break L3;
                }
                HEAP32[$buffer>>2] = $326;
                break;
               }
               $321 = (_CRYPTO_malloc($318,58766,755)|0);
               HEAP32[$buffer>>2] = $321;
               $322 = ($321|0)==(0|0);
               if ($322) {
                label = 213;
                break L3;
               }
               $323 = HEAP32[$currlen>>2]|0;
               $324 = ($323|0)==(0);
               if (!($324)) {
                $325 = HEAP32[$sbuffer>>2]|0;
                _memcpy(($321|0),($325|0),($323|0))|0;
               }
               HEAP32[$sbuffer>>2] = 0;
              }
             }
            } while(0);
            $328 = HEAP32[$currlen>>2]|0;
            $329 = HEAP32[$maxlen>>2]|0;
            $330 = ($328>>>0)<($329>>>0);
            do {
             if ($330) {
              $331 = HEAP32[$sbuffer>>2]|0;
              $332 = ($331|0)==(0|0);
              $333 = (($328) + 1)|0;
              HEAP32[$currlen>>2] = $333;
              if ($332) {
               $335 = HEAP32[$buffer>>2]|0;
               $336 = (($335) + ($328)|0);
               HEAP8[$336>>0] = 32;
               break;
              } else {
               $334 = (($331) + ($328)|0);
               HEAP8[$334>>0] = 32;
               break;
              }
             }
            } while(0);
            $337 = (($padlen$377$i) + -1)|0;
            $338 = ($padlen$377$i|0)>(1);
            if ($338) {
             $padlen$377$i = $337;
            } else {
             $padlen$3$lcssa$i = $337;
             break;
            }
           }
          } else {
           $padlen$3$lcssa$i = $padlen$3$ph$i;
          }
          $339 = ($signvalue$2$ph$i|0)==(0);
          if ($339) {
           $padlen$3$lcssa90$i = $padlen$3$lcssa$i;
          } else {
           do {
            if (!($1)) {
             $340 = HEAP32[$currlen>>2]|0;
             $341 = HEAP32[$maxlen>>2]|0;
             $342 = ($340|0)==($341|0);
             if ($342) {
              $343 = ($340>>>0)>(2147482623);
              if ($343) {
               label = 213;
               break L3;
              }
              $344 = (($340) + 1024)|0;
              HEAP32[$maxlen>>2] = $344;
              $345 = HEAP32[$buffer>>2]|0;
              $346 = ($345|0)==(0|0);
              if (!($346)) {
               $352 = (_CRYPTO_realloc($345,$344,58766,765)|0);
               $353 = ($352|0)==(0|0);
               if ($353) {
                label = 213;
                break L3;
               }
               HEAP32[$buffer>>2] = $352;
               break;
              }
              $347 = (_CRYPTO_malloc($344,58766,755)|0);
              HEAP32[$buffer>>2] = $347;
              $348 = ($347|0)==(0|0);
              if ($348) {
               label = 213;
               break L3;
              }
              $349 = HEAP32[$currlen>>2]|0;
              $350 = ($349|0)==(0);
              if (!($350)) {
               $351 = HEAP32[$sbuffer>>2]|0;
               _memcpy(($347|0),($351|0),($349|0))|0;
              }
              HEAP32[$sbuffer>>2] = 0;
             }
            }
           } while(0);
           $354 = HEAP32[$currlen>>2]|0;
           $355 = HEAP32[$maxlen>>2]|0;
           $356 = ($354>>>0)<($355>>>0);
           if ($356) {
            $357 = HEAP32[$sbuffer>>2]|0;
            $358 = ($357|0)==(0|0);
            $359 = $signvalue$2$ph$i&255;
            $360 = (($354) + 1)|0;
            HEAP32[$currlen>>2] = $360;
            if ($358) {
             $362 = HEAP32[$buffer>>2]|0;
             $363 = (($362) + ($354)|0);
             HEAP8[$363>>0] = $359;
             $padlen$3$lcssa90$i = $padlen$3$lcssa$i;
             break;
            } else {
             $361 = (($357) + ($354)|0);
             HEAP8[$361>>0] = $359;
             $padlen$3$lcssa90$i = $padlen$3$lcssa$i;
             break;
            }
           } else {
            $padlen$3$lcssa90$i = $padlen$3$lcssa$i;
           }
          }
         }
        } while(0);
        $364 = ($iplace$0$$i|0)>(0);
        if ($364) {
         $iplace$275$i = $iplace$0$$i;
         while(1) {
          $365 = (($iplace$275$i) + -1)|0;
          $366 = (($iconvert$i) + ($365)|0);
          $367 = HEAP8[$366>>0]|0;
          do {
           if (!($1)) {
            $368 = HEAP32[$currlen>>2]|0;
            $369 = HEAP32[$maxlen>>2]|0;
            $370 = ($368|0)==($369|0);
            if ($370) {
             $371 = ($368>>>0)>(2147482623);
             if ($371) {
              label = 213;
              break L3;
             }
             $372 = (($368) + 1024)|0;
             HEAP32[$maxlen>>2] = $372;
             $373 = HEAP32[$buffer>>2]|0;
             $374 = ($373|0)==(0|0);
             if (!($374)) {
              $380 = (_CRYPTO_realloc($373,$372,58766,765)|0);
              $381 = ($380|0)==(0|0);
              if ($381) {
               label = 213;
               break L3;
              }
              HEAP32[$buffer>>2] = $380;
              break;
             }
             $375 = (_CRYPTO_malloc($372,58766,755)|0);
             HEAP32[$buffer>>2] = $375;
             $376 = ($375|0)==(0|0);
             if ($376) {
              label = 213;
              break L3;
             }
             $377 = HEAP32[$currlen>>2]|0;
             $378 = ($377|0)==(0);
             if (!($378)) {
              $379 = HEAP32[$sbuffer>>2]|0;
              _memcpy(($375|0),($379|0),($377|0))|0;
             }
             HEAP32[$sbuffer>>2] = 0;
            }
           }
          } while(0);
          $382 = HEAP32[$currlen>>2]|0;
          $383 = HEAP32[$maxlen>>2]|0;
          $384 = ($382>>>0)<($383>>>0);
          do {
           if ($384) {
            $385 = HEAP32[$sbuffer>>2]|0;
            $386 = ($385|0)==(0|0);
            $387 = (($382) + 1)|0;
            HEAP32[$currlen>>2] = $387;
            if ($386) {
             $390 = HEAP32[$buffer>>2]|0;
             $391 = (($390) + ($382)|0);
             HEAP8[$391>>0] = $367;
             break;
            } else {
             $388 = (($385) + ($382)|0);
             HEAP8[$388>>0] = $367;
             break;
            }
           }
          } while(0);
          $389 = ($iplace$275$i|0)>(1);
          if ($389) {
           $iplace$275$i = $365;
          } else {
           break;
          }
         }
        }
        $392 = ($$$max$i|0)<(1);
        $393 = $flags$060110 & 8;
        $394 = ($393|0)==(0);
        $or$cond5$i = $394 & $392;
        if (!($or$cond5$i)) {
         do {
          if (!($1)) {
           $396 = HEAP32[$currlen>>2]|0;
           $397 = HEAP32[$maxlen>>2]|0;
           $398 = ($396|0)==($397|0);
           if ($398) {
            $399 = ($396>>>0)>(2147482623);
            if ($399) {
             label = 213;
             break L3;
            }
            $400 = (($396) + 1024)|0;
            HEAP32[$maxlen>>2] = $400;
            $401 = HEAP32[$buffer>>2]|0;
            $402 = ($401|0)==(0|0);
            if (!($402)) {
             $408 = (_CRYPTO_realloc($401,$400,58766,765)|0);
             $409 = ($408|0)==(0|0);
             if ($409) {
              label = 213;
              break L3;
             }
             HEAP32[$buffer>>2] = $408;
             break;
            }
            $403 = (_CRYPTO_malloc($400,58766,755)|0);
            HEAP32[$buffer>>2] = $403;
            $404 = ($403|0)==(0|0);
            if ($404) {
             label = 213;
             break L3;
            }
            $405 = HEAP32[$currlen>>2]|0;
            $406 = ($405|0)==(0);
            if (!($406)) {
             $407 = HEAP32[$sbuffer>>2]|0;
             _memcpy(($403|0),($407|0),($405|0))|0;
            }
            HEAP32[$sbuffer>>2] = 0;
           }
          }
         } while(0);
         $410 = HEAP32[$currlen>>2]|0;
         $411 = HEAP32[$maxlen>>2]|0;
         $412 = ($410>>>0)<($411>>>0);
         do {
          if ($412) {
           $413 = HEAP32[$sbuffer>>2]|0;
           $414 = ($413|0)==(0|0);
           $415 = (($410) + 1)|0;
           HEAP32[$currlen>>2] = $415;
           if ($414) {
            $417 = HEAP32[$buffer>>2]|0;
            $418 = (($417) + ($410)|0);
            HEAP8[$418>>0] = 46;
            break;
           } else {
            $416 = (($413) + ($410)|0);
            HEAP8[$416>>0] = 46;
            break;
           }
          }
         } while(0);
         $419 = ($fplace$0$$i|0)>(0);
         if ($419) {
          $fplace$273$i = $fplace$0$$i;
          while(1) {
           $420 = (($fplace$273$i) + -1)|0;
           $421 = (($fconvert$i) + ($420)|0);
           $422 = HEAP8[$421>>0]|0;
           do {
            if (!($1)) {
             $423 = HEAP32[$currlen>>2]|0;
             $424 = HEAP32[$maxlen>>2]|0;
             $425 = ($423|0)==($424|0);
             if ($425) {
              $426 = ($423>>>0)>(2147482623);
              if ($426) {
               label = 213;
               break L3;
              }
              $427 = (($423) + 1024)|0;
              HEAP32[$maxlen>>2] = $427;
              $428 = HEAP32[$buffer>>2]|0;
              $429 = ($428|0)==(0|0);
              if (!($429)) {
               $435 = (_CRYPTO_realloc($428,$427,58766,765)|0);
               $436 = ($435|0)==(0|0);
               if ($436) {
                label = 213;
                break L3;
               }
               HEAP32[$buffer>>2] = $435;
               break;
              }
              $430 = (_CRYPTO_malloc($427,58766,755)|0);
              HEAP32[$buffer>>2] = $430;
              $431 = ($430|0)==(0|0);
              if ($431) {
               label = 213;
               break L3;
              }
              $432 = HEAP32[$currlen>>2]|0;
              $433 = ($432|0)==(0);
              if (!($433)) {
               $434 = HEAP32[$sbuffer>>2]|0;
               _memcpy(($430|0),($434|0),($432|0))|0;
              }
              HEAP32[$sbuffer>>2] = 0;
             }
            }
           } while(0);
           $437 = HEAP32[$currlen>>2]|0;
           $438 = HEAP32[$maxlen>>2]|0;
           $439 = ($437>>>0)<($438>>>0);
           do {
            if ($439) {
             $440 = HEAP32[$sbuffer>>2]|0;
             $441 = ($440|0)==(0|0);
             $442 = (($437) + 1)|0;
             HEAP32[$currlen>>2] = $442;
             if ($441) {
              $445 = HEAP32[$buffer>>2]|0;
              $446 = (($445) + ($437)|0);
              HEAP8[$446>>0] = $422;
              break;
             } else {
              $443 = (($440) + ($437)|0);
              HEAP8[$443>>0] = $422;
              break;
             }
            }
           } while(0);
           $444 = ($fplace$273$i|0)>(1);
           if ($444) {
            $fplace$273$i = $420;
           } else {
            break;
           }
          }
         }
        }
        $395 = ($$$i|0)>(0);
        if ($395) {
         $zpadlen$071$i = $$$i;
         while(1) {
          do {
           if (!($1)) {
            $448 = HEAP32[$currlen>>2]|0;
            $449 = HEAP32[$maxlen>>2]|0;
            $450 = ($448|0)==($449|0);
            if ($450) {
             $451 = ($448>>>0)>(2147482623);
             if ($451) {
              label = 213;
              break L3;
             }
             $452 = (($448) + 1024)|0;
             HEAP32[$maxlen>>2] = $452;
             $453 = HEAP32[$buffer>>2]|0;
             $454 = ($453|0)==(0|0);
             if (!($454)) {
              $460 = (_CRYPTO_realloc($453,$452,58766,765)|0);
              $461 = ($460|0)==(0|0);
              if ($461) {
               label = 213;
               break L3;
              }
              HEAP32[$buffer>>2] = $460;
              break;
             }
             $455 = (_CRYPTO_malloc($452,58766,755)|0);
             HEAP32[$buffer>>2] = $455;
             $456 = ($455|0)==(0|0);
             if ($456) {
              label = 213;
              break L3;
             }
             $457 = HEAP32[$currlen>>2]|0;
             $458 = ($457|0)==(0);
             if (!($458)) {
              $459 = HEAP32[$sbuffer>>2]|0;
              _memcpy(($455|0),($459|0),($457|0))|0;
             }
             HEAP32[$sbuffer>>2] = 0;
            }
           }
          } while(0);
          $462 = HEAP32[$currlen>>2]|0;
          $463 = HEAP32[$maxlen>>2]|0;
          $464 = ($462>>>0)<($463>>>0);
          do {
           if ($464) {
            $465 = HEAP32[$sbuffer>>2]|0;
            $466 = ($465|0)==(0|0);
            $467 = (($462) + 1)|0;
            HEAP32[$currlen>>2] = $467;
            if ($466) {
             $469 = HEAP32[$buffer>>2]|0;
             $470 = (($469) + ($462)|0);
             HEAP8[$470>>0] = 48;
             break;
            } else {
             $468 = (($465) + ($462)|0);
             HEAP8[$468>>0] = 48;
             break;
            }
           }
          } while(0);
          $471 = (($zpadlen$071$i) + -1)|0;
          $472 = ($zpadlen$071$i|0)>(1);
          if ($472) {
           $zpadlen$071$i = $471;
          } else {
           break;
          }
         }
        }
        $447 = ($padlen$3$lcssa90$i|0)<(0);
        if ($447) {
         $padlen$464$i = $padlen$3$lcssa90$i;
         while(1) {
          do {
           if (!($1)) {
            $473 = HEAP32[$currlen>>2]|0;
            $474 = HEAP32[$maxlen>>2]|0;
            $475 = ($473|0)==($474|0);
            if ($475) {
             $476 = ($473>>>0)>(2147482623);
             if ($476) {
              label = 213;
              break L3;
             }
             $477 = (($473) + 1024)|0;
             HEAP32[$maxlen>>2] = $477;
             $478 = HEAP32[$buffer>>2]|0;
             $479 = ($478|0)==(0|0);
             if (!($479)) {
              $485 = (_CRYPTO_realloc($478,$477,58766,765)|0);
              $486 = ($485|0)==(0|0);
              if ($486) {
               label = 213;
               break L3;
              }
              HEAP32[$buffer>>2] = $485;
              break;
             }
             $480 = (_CRYPTO_malloc($477,58766,755)|0);
             HEAP32[$buffer>>2] = $480;
             $481 = ($480|0)==(0|0);
             if ($481) {
              label = 213;
              break L3;
             }
             $482 = HEAP32[$currlen>>2]|0;
             $483 = ($482|0)==(0);
             if (!($483)) {
              $484 = HEAP32[$sbuffer>>2]|0;
              _memcpy(($480|0),($484|0),($482|0))|0;
             }
             HEAP32[$sbuffer>>2] = 0;
            }
           }
          } while(0);
          $487 = HEAP32[$currlen>>2]|0;
          $488 = HEAP32[$maxlen>>2]|0;
          $489 = ($487>>>0)<($488>>>0);
          do {
           if ($489) {
            $490 = HEAP32[$sbuffer>>2]|0;
            $491 = ($490|0)==(0|0);
            $492 = (($487) + 1)|0;
            HEAP32[$currlen>>2] = $492;
            if ($491) {
             $494 = HEAP32[$buffer>>2]|0;
             $495 = (($494) + ($487)|0);
             HEAP8[$495>>0] = 32;
             break;
            } else {
             $493 = (($490) + ($487)|0);
             HEAP8[$493>>0] = 32;
             break;
            }
           }
          } while(0);
          $496 = (($padlen$464$i) + 1)|0;
          $497 = ($padlen$464$i|0)<(-1);
          if ($497) {
           $padlen$464$i = $496;
          } else {
           break;
          }
         }
        }
        $$3 = $$0163107;
        break;
       }
       case 101: case 69:  {
        $arglist_current32 = HEAP32[$args>>2]|0;
        $498 = $arglist_current32;
        $499 = ((0) + 8|0);
        $expanded135 = $499;
        $expanded134 = (($expanded135) - 1)|0;
        $500 = (($498) + ($expanded134))|0;
        $501 = ((0) + 8|0);
        $expanded139 = $501;
        $expanded138 = (($expanded139) - 1)|0;
        $expanded137 = $expanded138 ^ -1;
        $502 = $500 & $expanded137;
        $503 = $502;
        $arglist_next33 = ((($503)) + 8|0);
        HEAP32[$args>>2] = $arglist_next33;
        $$3 = $$0163107;
        break;
       }
       case 103: case 71:  {
        $arglist_current35 = HEAP32[$args>>2]|0;
        $504 = $arglist_current35;
        $505 = ((0) + 8|0);
        $expanded142 = $505;
        $expanded141 = (($expanded142) - 1)|0;
        $506 = (($504) + ($expanded141))|0;
        $507 = ((0) + 8|0);
        $expanded146 = $507;
        $expanded145 = (($expanded146) - 1)|0;
        $expanded144 = $expanded145 ^ -1;
        $508 = $506 & $expanded144;
        $509 = $508;
        $arglist_next36 = ((($509)) + 8|0);
        HEAP32[$args>>2] = $arglist_next36;
        $$3 = $$0163107;
        break;
       }
       case 99:  {
        $arglist_current38 = HEAP32[$args>>2]|0;
        $510 = $arglist_current38;
        $511 = ((0) + 4|0);
        $expanded149 = $511;
        $expanded148 = (($expanded149) - 1)|0;
        $512 = (($510) + ($expanded148))|0;
        $513 = ((0) + 4|0);
        $expanded153 = $513;
        $expanded152 = (($expanded153) - 1)|0;
        $expanded151 = $expanded152 ^ -1;
        $514 = $512 & $expanded151;
        $515 = $514;
        $516 = HEAP32[$515>>2]|0;
        $arglist_next39 = ((($515)) + 4|0);
        HEAP32[$args>>2] = $arglist_next39;
        do {
         if (!($1)) {
          $517 = HEAP32[$currlen>>2]|0;
          $518 = HEAP32[$maxlen>>2]|0;
          $519 = ($517|0)==($518|0);
          if ($519) {
           $520 = ($517>>>0)>(2147482623);
           if ($520) {
            $$0 = 0;
            label = 320;
            break L3;
           }
           $521 = (($517) + 1024)|0;
           HEAP32[$maxlen>>2] = $521;
           $522 = HEAP32[$buffer>>2]|0;
           $523 = ($522|0)==(0|0);
           if (!($523)) {
            $529 = (_CRYPTO_realloc($522,$521,58766,765)|0);
            $530 = ($529|0)==(0|0);
            if ($530) {
             $$0 = 0;
             label = 320;
             break L3;
            }
            HEAP32[$buffer>>2] = $529;
            break;
           }
           $524 = (_CRYPTO_malloc($521,58766,755)|0);
           HEAP32[$buffer>>2] = $524;
           $525 = ($524|0)==(0|0);
           if ($525) {
            $$0 = 0;
            label = 320;
            break L3;
           }
           $526 = HEAP32[$currlen>>2]|0;
           $527 = ($526|0)==(0);
           if (!($527)) {
            $528 = HEAP32[$sbuffer>>2]|0;
            _memcpy(($524|0),($528|0),($526|0))|0;
           }
           HEAP32[$sbuffer>>2] = 0;
          }
         }
        } while(0);
        $531 = HEAP32[$currlen>>2]|0;
        $532 = HEAP32[$maxlen>>2]|0;
        $533 = ($531>>>0)<($532>>>0);
        if ($533) {
         $534 = HEAP32[$sbuffer>>2]|0;
         $535 = ($534|0)==(0|0);
         $536 = $516&255;
         $537 = (($531) + 1)|0;
         HEAP32[$currlen>>2] = $537;
         if ($535) {
          $539 = HEAP32[$buffer>>2]|0;
          $540 = (($539) + ($531)|0);
          HEAP8[$540>>0] = $536;
          $$3 = $$0163107;
          break L56;
         } else {
          $538 = (($534) + ($531)|0);
          HEAP8[$538>>0] = $536;
          $$3 = $$0163107;
          break L56;
         }
        } else {
         $$3 = $$0163107;
        }
        break;
       }
       case 115:  {
        $arglist_current41 = HEAP32[$args>>2]|0;
        $541 = $arglist_current41;
        $542 = ((0) + 4|0);
        $expanded156 = $542;
        $expanded155 = (($expanded156) - 1)|0;
        $543 = (($541) + ($expanded155))|0;
        $544 = ((0) + 4|0);
        $expanded160 = $544;
        $expanded159 = (($expanded160) - 1)|0;
        $expanded158 = $expanded159 ^ -1;
        $545 = $543 & $expanded158;
        $546 = $545;
        $547 = HEAP32[$546>>2]|0;
        $arglist_next42 = ((($546)) + 4|0);
        HEAP32[$args>>2] = $arglist_next42;
        $$not = ($max$058112|0)>(-1);
        $brmerge = $$not | $$not90;
        $max$058$mux = $$not ? $max$058112 : 2147483647;
        if ($brmerge) {
         $max$2 = $max$058$mux;
        } else {
         $548 = HEAP32[$maxlen>>2]|0;
         $max$2 = $548;
        }
        $549 = ($547|0)==(0|0);
        $$value$i = $549 ? 58787 : $547;
        $550 = (_strlen($$value$i)|0);
        $551 = ($550|0)<(0);
        $$$i7 = $551 ? 2147483647 : $550;
        $552 = (($min$057113) - ($$$i7))|0;
        $553 = $552 | $min$057113;
        $554 = ($553|0)<(0);
        $$4$i = $554 ? 0 : $552;
        $555 = $flags$060110 & 1;
        $556 = ($555|0)==(0);
        $557 = (0 - ($$4$i))|0;
        $$4$$i = $556 ? $$4$i : $557;
        $558 = ($$4$$i|0)>(0);
        $559 = ($max$2|0)>(0);
        $or$cond36$i = $559 & $558;
        if ($or$cond36$i) {
         $cnt$038$i = 0;$padlen$037$i = $$4$$i;
         while(1) {
          do {
           if (!($1)) {
            $563 = HEAP32[$currlen>>2]|0;
            $564 = HEAP32[$maxlen>>2]|0;
            $565 = ($563|0)==($564|0);
            if ($565) {
             $566 = ($563>>>0)>(2147482623);
             if ($566) {
              $$0 = 0;
              label = 320;
              break L3;
             }
             $567 = (($563) + 1024)|0;
             HEAP32[$maxlen>>2] = $567;
             $568 = HEAP32[$buffer>>2]|0;
             $569 = ($568|0)==(0|0);
             if (!($569)) {
              $575 = (_CRYPTO_realloc($568,$567,58766,765)|0);
              $576 = ($575|0)==(0|0);
              if ($576) {
               $$0 = 0;
               label = 320;
               break L3;
              }
              HEAP32[$buffer>>2] = $575;
              break;
             }
             $570 = (_CRYPTO_malloc($567,58766,755)|0);
             HEAP32[$buffer>>2] = $570;
             $571 = ($570|0)==(0|0);
             if ($571) {
              $$0 = 0;
              label = 320;
              break L3;
             }
             $572 = HEAP32[$currlen>>2]|0;
             $573 = ($572|0)==(0);
             if (!($573)) {
              $574 = HEAP32[$sbuffer>>2]|0;
              _memcpy(($570|0),($574|0),($572|0))|0;
             }
             HEAP32[$sbuffer>>2] = 0;
            }
           }
          } while(0);
          $577 = HEAP32[$currlen>>2]|0;
          $578 = HEAP32[$maxlen>>2]|0;
          $579 = ($577>>>0)<($578>>>0);
          do {
           if ($579) {
            $580 = HEAP32[$sbuffer>>2]|0;
            $581 = ($580|0)==(0|0);
            $582 = (($577) + 1)|0;
            HEAP32[$currlen>>2] = $582;
            if ($581) {
             $584 = HEAP32[$buffer>>2]|0;
             $585 = (($584) + ($577)|0);
             HEAP8[$585>>0] = 32;
             break;
            } else {
             $583 = (($580) + ($577)|0);
             HEAP8[$583>>0] = 32;
             break;
            }
           }
          } while(0);
          $586 = (($padlen$037$i) + -1)|0;
          $587 = (($cnt$038$i) + 1)|0;
          $588 = ($padlen$037$i|0)>(1);
          $589 = ($587|0)<($max$2|0);
          $or$cond$i8 = $588 & $589;
          if ($or$cond$i8) {
           $cnt$038$i = $587;$padlen$037$i = $586;
          } else {
           $cnt$0$lcssa$i = $587;$padlen$0$lcssa$i = $586;
           break;
          }
         }
        } else {
         $cnt$0$lcssa$i = 0;$padlen$0$lcssa$i = $$4$$i;
        }
        $560 = HEAP8[$$value$i>>0]|0;
        $561 = ($560<<24>>24)!=(0);
        $562 = ($cnt$0$lcssa$i|0)<($max$2|0);
        $or$cond631$i = $562 & $561;
        if ($or$cond631$i) {
         $$132$i = $$value$i;$613 = $560;$cnt$133$i = $cnt$0$lcssa$i;
         while(1) {
          do {
           if (!($1)) {
            $592 = HEAP32[$currlen>>2]|0;
            $593 = HEAP32[$maxlen>>2]|0;
            $594 = ($592|0)==($593|0);
            if ($594) {
             $595 = ($592>>>0)>(2147482623);
             if ($595) {
              $$0 = 0;
              label = 320;
              break L3;
             }
             $596 = (($592) + 1024)|0;
             HEAP32[$maxlen>>2] = $596;
             $597 = HEAP32[$buffer>>2]|0;
             $598 = ($597|0)==(0|0);
             if (!($598)) {
              $604 = (_CRYPTO_realloc($597,$596,58766,765)|0);
              $605 = ($604|0)==(0|0);
              if ($605) {
               $$0 = 0;
               label = 320;
               break L3;
              }
              HEAP32[$buffer>>2] = $604;
              break;
             }
             $599 = (_CRYPTO_malloc($596,58766,755)|0);
             HEAP32[$buffer>>2] = $599;
             $600 = ($599|0)==(0|0);
             if ($600) {
              $$0 = 0;
              label = 320;
              break L3;
             }
             $601 = HEAP32[$currlen>>2]|0;
             $602 = ($601|0)==(0);
             if (!($602)) {
              $603 = HEAP32[$sbuffer>>2]|0;
              _memcpy(($599|0),($603|0),($601|0))|0;
             }
             HEAP32[$sbuffer>>2] = 0;
            }
           }
          } while(0);
          $606 = HEAP32[$currlen>>2]|0;
          $607 = HEAP32[$maxlen>>2]|0;
          $608 = ($606>>>0)<($607>>>0);
          do {
           if ($608) {
            $609 = HEAP32[$sbuffer>>2]|0;
            $610 = ($609|0)==(0|0);
            $611 = (($606) + 1)|0;
            HEAP32[$currlen>>2] = $611;
            if ($610) {
             $614 = HEAP32[$buffer>>2]|0;
             $615 = (($614) + ($606)|0);
             HEAP8[$615>>0] = $613;
             break;
            } else {
             $612 = (($609) + ($606)|0);
             HEAP8[$612>>0] = $613;
             break;
            }
           }
          } while(0);
          $616 = ((($$132$i)) + 1|0);
          $617 = (($cnt$133$i) + 1)|0;
          $618 = HEAP8[$616>>0]|0;
          $619 = ($618<<24>>24)!=(0);
          $620 = ($617|0)<($max$2|0);
          $or$cond6$i = $620 & $619;
          if ($or$cond6$i) {
           $$132$i = $616;$613 = $618;$cnt$133$i = $617;
          } else {
           $cnt$1$lcssa$i = $617;
           break;
          }
         }
        } else {
         $cnt$1$lcssa$i = $cnt$0$lcssa$i;
        }
        $590 = ($padlen$0$lcssa$i|0)<(0);
        $591 = ($cnt$1$lcssa$i|0)<($max$2|0);
        $or$cond723$i = $590 & $591;
        if ($or$cond723$i) {
         $cnt$225$i = $cnt$1$lcssa$i;$padlen$124$i = $padlen$0$lcssa$i;
         while(1) {
          do {
           if (!($1)) {
            $621 = HEAP32[$currlen>>2]|0;
            $622 = HEAP32[$maxlen>>2]|0;
            $623 = ($621|0)==($622|0);
            if ($623) {
             $624 = ($621>>>0)>(2147482623);
             if ($624) {
              $$0 = 0;
              label = 320;
              break L3;
             }
             $625 = (($621) + 1024)|0;
             HEAP32[$maxlen>>2] = $625;
             $626 = HEAP32[$buffer>>2]|0;
             $627 = ($626|0)==(0|0);
             if (!($627)) {
              $633 = (_CRYPTO_realloc($626,$625,58766,765)|0);
              $634 = ($633|0)==(0|0);
              if ($634) {
               $$0 = 0;
               label = 320;
               break L3;
              }
              HEAP32[$buffer>>2] = $633;
              break;
             }
             $628 = (_CRYPTO_malloc($625,58766,755)|0);
             HEAP32[$buffer>>2] = $628;
             $629 = ($628|0)==(0|0);
             if ($629) {
              $$0 = 0;
              label = 320;
              break L3;
             }
             $630 = HEAP32[$currlen>>2]|0;
             $631 = ($630|0)==(0);
             if (!($631)) {
              $632 = HEAP32[$sbuffer>>2]|0;
              _memcpy(($628|0),($632|0),($630|0))|0;
             }
             HEAP32[$sbuffer>>2] = 0;
            }
           }
          } while(0);
          $635 = HEAP32[$currlen>>2]|0;
          $636 = HEAP32[$maxlen>>2]|0;
          $637 = ($635>>>0)<($636>>>0);
          do {
           if ($637) {
            $638 = HEAP32[$sbuffer>>2]|0;
            $639 = ($638|0)==(0|0);
            $640 = (($635) + 1)|0;
            HEAP32[$currlen>>2] = $640;
            if ($639) {
             $642 = HEAP32[$buffer>>2]|0;
             $643 = (($642) + ($635)|0);
             HEAP8[$643>>0] = 32;
             break;
            } else {
             $641 = (($638) + ($635)|0);
             HEAP8[$641>>0] = 32;
             break;
            }
           }
          } while(0);
          $644 = (($padlen$124$i) + 1)|0;
          $645 = (($cnt$225$i) + 1)|0;
          $646 = ($padlen$124$i|0)<(-1);
          $647 = ($645|0)<($max$2|0);
          $or$cond7$i = $646 & $647;
          if ($or$cond7$i) {
           $cnt$225$i = $645;$padlen$124$i = $644;
          } else {
           $$3 = $$0163107;
           break;
          }
         }
        } else {
         $$3 = $$0163107;
        }
        break;
       }
       case 112:  {
        $arglist_current44 = HEAP32[$args>>2]|0;
        $648 = $arglist_current44;
        $649 = ((0) + 4|0);
        $expanded163 = $649;
        $expanded162 = (($expanded163) - 1)|0;
        $650 = (($648) + ($expanded162))|0;
        $651 = ((0) + 4|0);
        $expanded167 = $651;
        $expanded166 = (($expanded167) - 1)|0;
        $expanded165 = $expanded166 ^ -1;
        $652 = $650 & $expanded165;
        $653 = $652;
        $654 = HEAP32[$653>>2]|0;
        $arglist_next45 = ((($653)) + 4|0);
        HEAP32[$args>>2] = $arglist_next45;
        $655 = $654;
        $656 = ($655|0)<(0);
        $657 = $656 << 31 >> 31;
        $658 = $flags$060110 | 8;
        $659 = (_fmtint($sbuffer,$buffer,$currlen,$maxlen,$655,$657,16,$min$057113,$max$058112,$658)|0);
        $660 = ($659|0)==(0);
        if ($660) {
         $$0 = 0;
         label = 320;
         break L3;
        } else {
         $$3 = $$0163107;
        }
        break;
       }
       case 110:  {
        switch ($cflags$061109|0) {
        case 1:  {
         $arglist_current47 = HEAP32[$args>>2]|0;
         $661 = $arglist_current47;
         $662 = ((0) + 4|0);
         $expanded170 = $662;
         $expanded169 = (($expanded170) - 1)|0;
         $663 = (($661) + ($expanded169))|0;
         $664 = ((0) + 4|0);
         $expanded174 = $664;
         $expanded173 = (($expanded174) - 1)|0;
         $expanded172 = $expanded173 ^ -1;
         $665 = $663 & $expanded172;
         $666 = $665;
         $667 = HEAP32[$666>>2]|0;
         $arglist_next48 = ((($666)) + 4|0);
         HEAP32[$args>>2] = $arglist_next48;
         $668 = HEAP32[$currlen>>2]|0;
         $669 = $668&65535;
         HEAP16[$667>>1] = $669;
         $$3 = $$0163107;
         break L56;
         break;
        }
        case 2:  {
         $arglist_current50 = HEAP32[$args>>2]|0;
         $670 = $arglist_current50;
         $671 = ((0) + 4|0);
         $expanded177 = $671;
         $expanded176 = (($expanded177) - 1)|0;
         $672 = (($670) + ($expanded176))|0;
         $673 = ((0) + 4|0);
         $expanded181 = $673;
         $expanded180 = (($expanded181) - 1)|0;
         $expanded179 = $expanded180 ^ -1;
         $674 = $672 & $expanded179;
         $675 = $674;
         $676 = HEAP32[$675>>2]|0;
         $arglist_next51 = ((($675)) + 4|0);
         HEAP32[$args>>2] = $arglist_next51;
         $677 = HEAP32[$currlen>>2]|0;
         HEAP32[$676>>2] = $677;
         $$3 = $$0163107;
         break L56;
         break;
        }
        case 4:  {
         $arglist_current53 = HEAP32[$args>>2]|0;
         $678 = $arglist_current53;
         $679 = ((0) + 4|0);
         $expanded184 = $679;
         $expanded183 = (($expanded184) - 1)|0;
         $680 = (($678) + ($expanded183))|0;
         $681 = ((0) + 4|0);
         $expanded188 = $681;
         $expanded187 = (($expanded188) - 1)|0;
         $expanded186 = $expanded187 ^ -1;
         $682 = $680 & $expanded186;
         $683 = $682;
         $684 = HEAP32[$683>>2]|0;
         $arglist_next54 = ((($683)) + 4|0);
         HEAP32[$args>>2] = $arglist_next54;
         $685 = HEAP32[$currlen>>2]|0;
         $686 = $684;
         $687 = $686;
         HEAP32[$687>>2] = $685;
         $688 = (($686) + 4)|0;
         $689 = $688;
         HEAP32[$689>>2] = 0;
         $$3 = $$0163107;
         break L56;
         break;
        }
        default: {
         $arglist_current56 = HEAP32[$args>>2]|0;
         $690 = $arglist_current56;
         $691 = ((0) + 4|0);
         $expanded191 = $691;
         $expanded190 = (($expanded191) - 1)|0;
         $692 = (($690) + ($expanded190))|0;
         $693 = ((0) + 4|0);
         $expanded195 = $693;
         $expanded194 = (($expanded195) - 1)|0;
         $expanded193 = $expanded194 ^ -1;
         $694 = $692 & $expanded193;
         $695 = $694;
         $696 = HEAP32[$695>>2]|0;
         $arglist_next57 = ((($695)) + 4|0);
         HEAP32[$args>>2] = $arglist_next57;
         $697 = HEAP32[$currlen>>2]|0;
         HEAP32[$696>>2] = $697;
         $$3 = $$0163107;
         break L56;
        }
        }
        break;
       }
       case 37:  {
        do {
         if (!($1)) {
          $698 = HEAP32[$currlen>>2]|0;
          $699 = HEAP32[$maxlen>>2]|0;
          $700 = ($698|0)==($699|0);
          if ($700) {
           $701 = ($698>>>0)>(2147482623);
           if ($701) {
            $$0 = 0;
            label = 320;
            break L3;
           }
           $702 = (($698) + 1024)|0;
           HEAP32[$maxlen>>2] = $702;
           $703 = HEAP32[$buffer>>2]|0;
           $704 = ($703|0)==(0|0);
           if (!($704)) {
            $710 = (_CRYPTO_realloc($703,$702,58766,765)|0);
            $711 = ($710|0)==(0|0);
            if ($711) {
             $$0 = 0;
             label = 320;
             break L3;
            }
            HEAP32[$buffer>>2] = $710;
            break;
           }
           $705 = (_CRYPTO_malloc($702,58766,755)|0);
           HEAP32[$buffer>>2] = $705;
           $706 = ($705|0)==(0|0);
           if ($706) {
            $$0 = 0;
            label = 320;
            break L3;
           }
           $707 = HEAP32[$currlen>>2]|0;
           $708 = ($707|0)==(0);
           if (!($708)) {
            $709 = HEAP32[$sbuffer>>2]|0;
            _memcpy(($705|0),($709|0),($707|0))|0;
           }
           HEAP32[$sbuffer>>2] = 0;
          }
         }
        } while(0);
        $712 = HEAP32[$currlen>>2]|0;
        $713 = HEAP32[$maxlen>>2]|0;
        $714 = ($712>>>0)<($713>>>0);
        if ($714) {
         $715 = HEAP32[$sbuffer>>2]|0;
         $716 = ($715|0)==(0|0);
         $717 = (($712) + 1)|0;
         HEAP32[$currlen>>2] = $717;
         if ($716) {
          $719 = HEAP32[$buffer>>2]|0;
          $720 = (($719) + ($712)|0);
          HEAP8[$720>>0] = $ch$062108;
          $$3 = $$0163107;
          break L56;
         } else {
          $718 = (($715) + ($712)|0);
          HEAP8[$718>>0] = $ch$062108;
          $$3 = $$0163107;
          break L56;
         }
        } else {
         $$3 = $$0163107;
        }
        break;
       }
       case 119:  {
        $721 = ((($$0163107)) + 1|0);
        $$3 = $721;
        break;
       }
       default: {
        $$3 = $$0163107;
       }
       }
      } while(0);
      if ((label|0) == 52) {
       label = 0;
       $144 = $flags$1 | 64;
       switch ($cflags$061109|0) {
       case 1:  {
        $arglist_current17 = HEAP32[$args>>2]|0;
        $145 = $arglist_current17;
        $146 = ((0) + 4|0);
        $expanded100 = $146;
        $expanded99 = (($expanded100) - 1)|0;
        $147 = (($145) + ($expanded99))|0;
        $148 = ((0) + 4|0);
        $expanded104 = $148;
        $expanded103 = (($expanded104) - 1)|0;
        $expanded102 = $expanded103 ^ -1;
        $149 = $147 & $expanded102;
        $150 = $149;
        $151 = HEAP32[$150>>2]|0;
        $arglist_next18 = ((($150)) + 4|0);
        HEAP32[$args>>2] = $arglist_next18;
        $$mask = $151 & 65535;
        $182 = $$mask;$183 = 0;
        break;
       }
       case 2:  {
        $arglist_current20 = HEAP32[$args>>2]|0;
        $152 = $arglist_current20;
        $153 = ((0) + 4|0);
        $expanded107 = $153;
        $expanded106 = (($expanded107) - 1)|0;
        $154 = (($152) + ($expanded106))|0;
        $155 = ((0) + 4|0);
        $expanded111 = $155;
        $expanded110 = (($expanded111) - 1)|0;
        $expanded109 = $expanded110 ^ -1;
        $156 = $154 & $expanded109;
        $157 = $156;
        $158 = HEAP32[$157>>2]|0;
        $arglist_next21 = ((($157)) + 4|0);
        HEAP32[$args>>2] = $arglist_next21;
        $182 = $158;$183 = 0;
        break;
       }
       case 4:  {
        $arglist_current23 = HEAP32[$args>>2]|0;
        $159 = $arglist_current23;
        $160 = ((0) + 8|0);
        $expanded114 = $160;
        $expanded113 = (($expanded114) - 1)|0;
        $161 = (($159) + ($expanded113))|0;
        $162 = ((0) + 8|0);
        $expanded118 = $162;
        $expanded117 = (($expanded118) - 1)|0;
        $expanded116 = $expanded117 ^ -1;
        $163 = $161 & $expanded116;
        $164 = $163;
        $165 = $164;
        $166 = $165;
        $167 = HEAP32[$166>>2]|0;
        $168 = (($165) + 4)|0;
        $169 = $168;
        $170 = HEAP32[$169>>2]|0;
        $arglist_next24 = ((($164)) + 8|0);
        HEAP32[$args>>2] = $arglist_next24;
        $182 = $167;$183 = $170;
        break;
       }
       default: {
        $arglist_current26 = HEAP32[$args>>2]|0;
        $171 = $arglist_current26;
        $172 = ((0) + 4|0);
        $expanded121 = $172;
        $expanded120 = (($expanded121) - 1)|0;
        $173 = (($171) + ($expanded120))|0;
        $174 = ((0) + 4|0);
        $expanded125 = $174;
        $expanded124 = (($expanded125) - 1)|0;
        $expanded123 = $expanded124 ^ -1;
        $175 = $173 & $expanded123;
        $176 = $175;
        $177 = HEAP32[$176>>2]|0;
        $arglist_next27 = ((($176)) + 4|0);
        HEAP32[$args>>2] = $arglist_next27;
        $182 = $177;$183 = 0;
       }
       }
       $178 = ($ch$062108<<24>>24)==(111);
       $179 = ($ch$062108<<24>>24)==(117);
       $180 = $179 ? 10 : 16;
       $181 = $178 ? 8 : $180;
       $184 = (_fmtint($sbuffer,$buffer,$currlen,$maxlen,$182,$183,$181,$min$057113,$max$058112,$144)|0);
       $185 = ($184|0)==(0);
       if ($185) {
        $$0 = 0;
        label = 320;
        break L3;
       } else {
        $$3 = $$0163107;
       }
      }
      $722 = ((($$3)) + 1|0);
      $723 = HEAP8[$$3>>0]|0;
      $$0163$be = $722;$cflags$061$be = 0;$ch$062$be = $723;$flags$060$be = 0;$max$058$be = -1;$min$057$be = 0;$state$059$be = 0;
      break;
     }
     default: {
      $$0163$be = $$0163107;$cflags$061$be = $cflags$061109;$ch$062$be = $ch$062108;$flags$060$be = $flags$060110;$max$058$be = $max$058112;$min$057$be = $min$057113;$state$059$be = $state$059111;
     }
     }
    } while(0);
    $8 = $ch$062$be << 24 >> 24;
    $9 = ($ch$062$be<<24>>24)==(0);
    if ($9) {
     break L1;
    } else {
     $$0163107 = $$0163$be;$36 = $8;$cflags$061109 = $cflags$061$be;$ch$062108 = $ch$062$be;$flags$060110 = $flags$060$be;$max$058112 = $max$058$be;$min$057113 = $min$057$be;$state$059111 = $state$059$be;
    }
   }
   if ((label|0) == 213) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 320) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $724 = HEAP32[$currlen>>2]|0;
 $725 = HEAP32[$maxlen>>2]|0;
 $726 = (($725) + -1)|0;
 $727 = ($724>>>0)>($726>>>0);
 $728 = $727&1;
 HEAP32[$truncated>>2] = $728;
 if ($727) {
  $729 = HEAP32[$maxlen>>2]|0;
  $730 = (($729) + -1)|0;
  HEAP32[$currlen>>2] = $730;
  $733 = $730;
 } else {
  $733 = $724;
 }
 do {
  if (!($1)) {
   $731 = HEAP32[$maxlen>>2]|0;
   $732 = ($733|0)==($731|0);
   if ($732) {
    $734 = ($733>>>0)>(2147482623);
    if ($734) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $735 = (($733) + 1024)|0;
    HEAP32[$maxlen>>2] = $735;
    $736 = HEAP32[$buffer>>2]|0;
    $737 = ($736|0)==(0|0);
    if (!($737)) {
     $743 = (_CRYPTO_realloc($736,$735,58766,765)|0);
     $744 = ($743|0)==(0|0);
     if ($744) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      HEAP32[$buffer>>2] = $743;
      break;
     }
    }
    $738 = (_CRYPTO_malloc($735,58766,755)|0);
    HEAP32[$buffer>>2] = $738;
    $739 = ($738|0)==(0|0);
    if ($739) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $740 = HEAP32[$currlen>>2]|0;
    $741 = ($740|0)==(0);
    if (!($741)) {
     $742 = HEAP32[$sbuffer>>2]|0;
     _memcpy(($738|0),($742|0),($740|0))|0;
    }
    HEAP32[$sbuffer>>2] = 0;
   }
  }
 } while(0);
 $745 = HEAP32[$currlen>>2]|0;
 $746 = HEAP32[$maxlen>>2]|0;
 $747 = ($745>>>0)<($746>>>0);
 do {
  if ($747) {
   $748 = HEAP32[$sbuffer>>2]|0;
   $749 = ($748|0)==(0|0);
   $750 = (($745) + 1)|0;
   HEAP32[$currlen>>2] = $750;
   if ($749) {
    $752 = HEAP32[$buffer>>2]|0;
    $753 = (($752) + ($745)|0);
    HEAP8[$753>>0] = 0;
    break;
   } else {
    $751 = (($748) + ($745)|0);
    HEAP8[$751>>0] = 0;
    break;
   }
  }
 } while(0);
 $754 = HEAP32[$currlen>>2]|0;
 $755 = (($754) + -1)|0;
 HEAP32[$retlen>>2] = $755;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _fmtint($sbuffer,$buffer,$currlen,$maxlen,$0,$1,$base,$min,$max,$flags) {
 $sbuffer = $sbuffer|0;
 $buffer = $buffer|0;
 $currlen = $currlen|0;
 $maxlen = $maxlen|0;
 $0 = $0|0;
 $1 = $1|0;
 $base = $base|0;
 $min = $min|0;
 $max = $max|0;
 $flags = $flags|0;
 var $$$3 = 0, $$0 = 0, $$3 = 0, $$5 = 0, $$lcssa71 = 0, $$max = 0, $$neg28 = 0, $$old1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $convert = 0, $place$0 = 0, $place$0$ = 0, $place$0$lcssa = 0, $place$243 = 0;
 var $prefix$1 = 0, $prefix$245 = 0, $signvalue$0 = 0, $spadlen$1 = 0, $spadlen$1$ = 0, $spadlen$2$lcssa = 0, $spadlen$247 = 0, $spadlen$336 = 0, $spadlen$336$us = 0, $zpadlen$0 = 0, $zpadlen$1 = 0, $zpadlen$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $convert = sp;
 $2 = ($max|0)<(0);
 $$max = $2 ? 0 : $max;
 $3 = $flags & 64;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = ($1|0)<(0);
   if ($5) {
    $6 = (_i64Subtract(0,0,($0|0),($1|0))|0);
    $7 = tempRet0;
    $227 = $6;$228 = $7;$signvalue$0 = 45;
    break;
   }
   $8 = $flags & 2;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = $flags << 3;
    $11 = $10 & 32;
    $227 = $0;$228 = $1;$signvalue$0 = $11;
   } else {
    $227 = $0;$228 = $1;$signvalue$0 = 43;
   }
  } else {
   $227 = $0;$228 = $1;$signvalue$0 = 0;
  }
 } while(0);
 $12 = $flags & 8;
 $13 = ($12|0)==(0);
 if ($13) {
  $prefix$1 = 89936;
 } else {
  $14 = ($base|0)==(8);
  $$3 = $14 ? 58794 : 89936;
  $15 = ($base|0)==(16);
  $$$3 = $15 ? 58796 : $$3;
  $prefix$1 = $$$3;
 }
 $16 = $flags & 32;
 $17 = ($16|0)!=(0);
 $18 = $17 ? 89874 : 58799;
 $19 = $227;$20 = $228;$place$0 = 0;
 while(1) {
  $21 = (___uremdi3(($19|0),($20|0),($base|0),0)|0);
  $22 = tempRet0;
  $23 = (($18) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = (($place$0) + 1)|0;
  $26 = (($convert) + ($place$0)|0);
  HEAP8[$26>>0] = $24;
  $27 = (___udivdi3(($19|0),($20|0),($base|0),0)|0);
  $28 = tempRet0;
  $29 = ($27|0)!=(0);
  $30 = ($28|0)!=(0);
  $31 = $29 | $30;
  $32 = ($25|0)<(26);
  $33 = $32 & $31;
  if ($33) {
   $19 = $27;$20 = $28;$place$0 = $25;
  } else {
   $$lcssa71 = $25;$place$0$lcssa = $place$0;
   break;
  }
 }
 $34 = ($$lcssa71|0)==(26);
 $place$0$ = $34 ? $place$0$lcssa : $$lcssa71;
 $35 = (($convert) + ($place$0$)|0);
 HEAP8[$35>>0] = 0;
 $36 = (($$max) - ($place$0$))|0;
 $37 = ($$max|0)>=($place$0$|0);
 $38 = $37 ? $$max : $place$0$;
 $39 = ($signvalue$0|0)!=(0);
 $$neg28 = $39 << 31 >> 31;
 $40 = (_strlen($prefix$1)|0);
 $41 = (($$neg28) + ($min))|0;
 $42 = (($41) - ($38))|0;
 $43 = (($42) - ($40))|0;
 $44 = ($36|0)<(0);
 $zpadlen$0 = $44 ? 0 : $36;
 $45 = ($43|0)<(0);
 $$5 = $45 ? 0 : $43;
 $46 = $flags & 16;
 $47 = ($46|0)==(0);
 $48 = ($zpadlen$0|0)>=($$5|0);
 $spadlen$1 = $47 ? $$5 : 0;
 $49 = $47 | $48;
 $zpadlen$1 = $49 ? $zpadlen$0 : $$5;
 $50 = $flags & 1;
 $51 = ($50|0)==(0);
 $52 = (0 - ($spadlen$1))|0;
 $spadlen$1$ = $51 ? $spadlen$1 : $52;
 $53 = ($spadlen$1$|0)>(0);
 L14: do {
  if ($53) {
   $54 = ($buffer|0)==(0|0);
   $spadlen$247 = $spadlen$1$;
   L16: while(1) {
    do {
     if (!($54)) {
      $55 = HEAP32[$currlen>>2]|0;
      $56 = HEAP32[$maxlen>>2]|0;
      $57 = ($55|0)==($56|0);
      if ($57) {
       $58 = ($55>>>0)>(2147482623);
       if ($58) {
        $$0 = 0;
        label = 114;
        break L16;
       }
       $59 = (($55) + 1024)|0;
       HEAP32[$maxlen>>2] = $59;
       $60 = HEAP32[$buffer>>2]|0;
       $61 = ($60|0)==(0|0);
       if (!($61)) {
        $67 = (_CRYPTO_realloc($60,$59,58766,765)|0);
        $68 = ($67|0)==(0|0);
        if ($68) {
         $$0 = 0;
         label = 114;
         break L16;
        }
        HEAP32[$buffer>>2] = $67;
        break;
       }
       $62 = (_CRYPTO_malloc($59,58766,755)|0);
       HEAP32[$buffer>>2] = $62;
       $63 = ($62|0)==(0|0);
       if ($63) {
        $$0 = 0;
        label = 114;
        break L16;
       }
       $64 = HEAP32[$currlen>>2]|0;
       $65 = ($64|0)==(0);
       if (!($65)) {
        $66 = HEAP32[$sbuffer>>2]|0;
        _memcpy(($62|0),($66|0),($64|0))|0;
       }
       HEAP32[$sbuffer>>2] = 0;
      }
     }
    } while(0);
    $69 = HEAP32[$currlen>>2]|0;
    $70 = HEAP32[$maxlen>>2]|0;
    $71 = ($69>>>0)<($70>>>0);
    do {
     if ($71) {
      $72 = HEAP32[$sbuffer>>2]|0;
      $73 = ($72|0)==(0|0);
      $74 = (($69) + 1)|0;
      HEAP32[$currlen>>2] = $74;
      if ($73) {
       $76 = HEAP32[$buffer>>2]|0;
       $77 = (($76) + ($69)|0);
       HEAP8[$77>>0] = 32;
       break;
      } else {
       $75 = (($72) + ($69)|0);
       HEAP8[$75>>0] = 32;
       break;
      }
     }
    } while(0);
    $78 = (($spadlen$247) + -1)|0;
    $79 = ($spadlen$247|0)>(1);
    if ($79) {
     $spadlen$247 = $78;
    } else {
     $spadlen$2$lcssa = $78;
     break L14;
    }
   }
   if ((label|0) == 114) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $spadlen$2$lcssa = $spadlen$1$;
  }
 } while(0);
 do {
  if ($39) {
   $80 = ($buffer|0)==(0|0);
   do {
    if (!($80)) {
     $81 = HEAP32[$currlen>>2]|0;
     $82 = HEAP32[$maxlen>>2]|0;
     $83 = ($81|0)==($82|0);
     if ($83) {
      $84 = ($81>>>0)>(2147482623);
      if ($84) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      $85 = (($81) + 1024)|0;
      HEAP32[$maxlen>>2] = $85;
      $86 = HEAP32[$buffer>>2]|0;
      $87 = ($86|0)==(0|0);
      if (!($87)) {
       $93 = (_CRYPTO_realloc($86,$85,58766,765)|0);
       $94 = ($93|0)==(0|0);
       if ($94) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       } else {
        HEAP32[$buffer>>2] = $93;
        break;
       }
      }
      $88 = (_CRYPTO_malloc($85,58766,755)|0);
      HEAP32[$buffer>>2] = $88;
      $89 = ($88|0)==(0|0);
      if ($89) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      $90 = HEAP32[$currlen>>2]|0;
      $91 = ($90|0)==(0);
      if (!($91)) {
       $92 = HEAP32[$sbuffer>>2]|0;
       _memcpy(($88|0),($92|0),($90|0))|0;
      }
      HEAP32[$sbuffer>>2] = 0;
     }
    }
   } while(0);
   $95 = HEAP32[$currlen>>2]|0;
   $96 = HEAP32[$maxlen>>2]|0;
   $97 = ($95>>>0)<($96>>>0);
   if ($97) {
    $98 = HEAP32[$sbuffer>>2]|0;
    $99 = ($98|0)==(0|0);
    $100 = $signvalue$0&255;
    $101 = (($95) + 1)|0;
    HEAP32[$currlen>>2] = $101;
    if ($99) {
     $103 = HEAP32[$buffer>>2]|0;
     $104 = (($103) + ($95)|0);
     HEAP8[$104>>0] = $100;
     break;
    } else {
     $102 = (($98) + ($95)|0);
     HEAP8[$102>>0] = $100;
     break;
    }
   }
  }
 } while(0);
 $105 = HEAP8[$prefix$1>>0]|0;
 $106 = ($105<<24>>24)==(0);
 L68: do {
  if (!($106)) {
   $107 = ($buffer|0)==(0|0);
   $129 = $105;$prefix$245 = $prefix$1;
   L70: while(1) {
    do {
     if (!($107)) {
      $108 = HEAP32[$currlen>>2]|0;
      $109 = HEAP32[$maxlen>>2]|0;
      $110 = ($108|0)==($109|0);
      if ($110) {
       $111 = ($108>>>0)>(2147482623);
       if ($111) {
        $$0 = 0;
        label = 114;
        break L70;
       }
       $112 = (($108) + 1024)|0;
       HEAP32[$maxlen>>2] = $112;
       $113 = HEAP32[$buffer>>2]|0;
       $114 = ($113|0)==(0|0);
       if (!($114)) {
        $120 = (_CRYPTO_realloc($113,$112,58766,765)|0);
        $121 = ($120|0)==(0|0);
        if ($121) {
         $$0 = 0;
         label = 114;
         break L70;
        }
        HEAP32[$buffer>>2] = $120;
        break;
       }
       $115 = (_CRYPTO_malloc($112,58766,755)|0);
       HEAP32[$buffer>>2] = $115;
       $116 = ($115|0)==(0|0);
       if ($116) {
        $$0 = 0;
        label = 114;
        break L70;
       }
       $117 = HEAP32[$currlen>>2]|0;
       $118 = ($117|0)==(0);
       if (!($118)) {
        $119 = HEAP32[$sbuffer>>2]|0;
        _memcpy(($115|0),($119|0),($117|0))|0;
       }
       HEAP32[$sbuffer>>2] = 0;
      }
     }
    } while(0);
    $122 = HEAP32[$currlen>>2]|0;
    $123 = HEAP32[$maxlen>>2]|0;
    $124 = ($122>>>0)<($123>>>0);
    do {
     if ($124) {
      $125 = HEAP32[$sbuffer>>2]|0;
      $126 = ($125|0)==(0|0);
      $127 = (($122) + 1)|0;
      HEAP32[$currlen>>2] = $127;
      if ($126) {
       $130 = HEAP32[$buffer>>2]|0;
       $131 = (($130) + ($122)|0);
       HEAP8[$131>>0] = $129;
       break;
      } else {
       $128 = (($125) + ($122)|0);
       HEAP8[$128>>0] = $129;
       break;
      }
     }
    } while(0);
    $132 = ((($prefix$245)) + 1|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = ($133<<24>>24)==(0);
    if ($134) {
     break L68;
    } else {
     $129 = $133;$prefix$245 = $132;
    }
   }
   if ((label|0) == 114) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $135 = ($zpadlen$1|0)>(0);
 L96: do {
  if ($135) {
   $136 = ($buffer|0)==(0|0);
   $zpadlen$2 = $zpadlen$1;
   L98: while(1) {
    do {
     if (!($136)) {
      $137 = HEAP32[$currlen>>2]|0;
      $138 = HEAP32[$maxlen>>2]|0;
      $139 = ($137|0)==($138|0);
      if ($139) {
       $140 = ($137>>>0)>(2147482623);
       if ($140) {
        $$0 = 0;
        label = 114;
        break L98;
       }
       $141 = (($137) + 1024)|0;
       HEAP32[$maxlen>>2] = $141;
       $142 = HEAP32[$buffer>>2]|0;
       $143 = ($142|0)==(0|0);
       if (!($143)) {
        $149 = (_CRYPTO_realloc($142,$141,58766,765)|0);
        $150 = ($149|0)==(0|0);
        if ($150) {
         $$0 = 0;
         label = 114;
         break L98;
        }
        HEAP32[$buffer>>2] = $149;
        break;
       }
       $144 = (_CRYPTO_malloc($141,58766,755)|0);
       HEAP32[$buffer>>2] = $144;
       $145 = ($144|0)==(0|0);
       if ($145) {
        $$0 = 0;
        label = 114;
        break L98;
       }
       $146 = HEAP32[$currlen>>2]|0;
       $147 = ($146|0)==(0);
       if (!($147)) {
        $148 = HEAP32[$sbuffer>>2]|0;
        _memcpy(($144|0),($148|0),($146|0))|0;
       }
       HEAP32[$sbuffer>>2] = 0;
      }
     }
    } while(0);
    $151 = HEAP32[$currlen>>2]|0;
    $152 = HEAP32[$maxlen>>2]|0;
    $153 = ($151>>>0)<($152>>>0);
    do {
     if ($153) {
      $154 = HEAP32[$sbuffer>>2]|0;
      $155 = ($154|0)==(0|0);
      $156 = (($151) + 1)|0;
      HEAP32[$currlen>>2] = $156;
      if ($155) {
       $158 = HEAP32[$buffer>>2]|0;
       $159 = (($158) + ($151)|0);
       HEAP8[$159>>0] = 48;
       break;
      } else {
       $157 = (($154) + ($151)|0);
       HEAP8[$157>>0] = 48;
       break;
      }
     }
    } while(0);
    $160 = (($zpadlen$2) + -1)|0;
    $$old1 = ($zpadlen$2|0)>(1);
    if ($$old1) {
     $zpadlen$2 = $160;
    } else {
     break L96;
    }
   }
   if ((label|0) == 114) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $161 = ($place$0$|0)>(0);
 L124: do {
  if ($161) {
   $162 = ($buffer|0)==(0|0);
   $place$243 = $place$0$;
   L126: while(1) {
    $175 = (($place$243) + -1)|0;
    $176 = (($convert) + ($175)|0);
    $177 = HEAP8[$176>>0]|0;
    do {
     if (!($162)) {
      $178 = HEAP32[$currlen>>2]|0;
      $179 = HEAP32[$maxlen>>2]|0;
      $180 = ($178|0)==($179|0);
      if ($180) {
       $181 = ($178>>>0)>(2147482623);
       if ($181) {
        $$0 = 0;
        label = 114;
        break L126;
       }
       $182 = (($178) + 1024)|0;
       HEAP32[$maxlen>>2] = $182;
       $183 = HEAP32[$buffer>>2]|0;
       $184 = ($183|0)==(0|0);
       if (!($184)) {
        $190 = (_CRYPTO_realloc($183,$182,58766,765)|0);
        $191 = ($190|0)==(0|0);
        if ($191) {
         $$0 = 0;
         label = 114;
         break L126;
        }
        HEAP32[$buffer>>2] = $190;
        break;
       }
       $185 = (_CRYPTO_malloc($182,58766,755)|0);
       HEAP32[$buffer>>2] = $185;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $$0 = 0;
        label = 114;
        break L126;
       }
       $187 = HEAP32[$currlen>>2]|0;
       $188 = ($187|0)==(0);
       if (!($188)) {
        $189 = HEAP32[$sbuffer>>2]|0;
        _memcpy(($185|0),($189|0),($187|0))|0;
       }
       HEAP32[$sbuffer>>2] = 0;
      }
     }
    } while(0);
    $192 = HEAP32[$currlen>>2]|0;
    $193 = HEAP32[$maxlen>>2]|0;
    $194 = ($192>>>0)<($193>>>0);
    do {
     if ($194) {
      $195 = HEAP32[$sbuffer>>2]|0;
      $196 = ($195|0)==(0|0);
      $197 = (($192) + 1)|0;
      HEAP32[$currlen>>2] = $197;
      if ($196) {
       $200 = HEAP32[$buffer>>2]|0;
       $201 = (($200) + ($192)|0);
       HEAP8[$201>>0] = $177;
       break;
      } else {
       $198 = (($195) + ($192)|0);
       HEAP8[$198>>0] = $177;
       break;
      }
     }
    } while(0);
    $199 = ($place$243|0)>(1);
    if ($199) {
     $place$243 = $175;
    } else {
     break L124;
    }
   }
   if ((label|0) == 114) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $163 = ($spadlen$2$lcssa|0)<(0);
 if (!($163)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $164 = ($buffer|0)==(0|0);
 if ($164) {
  $spadlen$336$us = $spadlen$2$lcssa;
  while(1) {
   $165 = HEAP32[$currlen>>2]|0;
   $166 = HEAP32[$maxlen>>2]|0;
   $167 = ($165>>>0)<($166>>>0);
   do {
    if ($167) {
     $168 = HEAP32[$sbuffer>>2]|0;
     $169 = ($168|0)==(0|0);
     $170 = (($165) + 1)|0;
     HEAP32[$currlen>>2] = $170;
     if ($169) {
      $172 = (0 + ($165)|0);
      HEAP8[$172>>0] = 32;
      break;
     } else {
      $171 = (($168) + ($165)|0);
      HEAP8[$171>>0] = 32;
      break;
     }
    }
   } while(0);
   $173 = (($spadlen$336$us) + 1)|0;
   $174 = ($spadlen$336$us|0)<(-1);
   if ($174) {
    $spadlen$336$us = $173;
   } else {
    $$0 = 1;
    break;
   }
  }
  STACKTOP = sp;return ($$0|0);
 } else {
  $spadlen$336 = $spadlen$2$lcssa;
 }
 L165: while(1) {
  $202 = HEAP32[$currlen>>2]|0;
  $203 = HEAP32[$maxlen>>2]|0;
  $204 = ($202|0)==($203|0);
  do {
   if ($204) {
    $205 = ($202>>>0)>(2147482623);
    if ($205) {
     $$0 = 0;
     label = 114;
     break L165;
    }
    $206 = (($202) + 1024)|0;
    HEAP32[$maxlen>>2] = $206;
    $207 = HEAP32[$buffer>>2]|0;
    $208 = ($207|0)==(0|0);
    if (!($208)) {
     $214 = (_CRYPTO_realloc($207,$206,58766,765)|0);
     $215 = ($214|0)==(0|0);
     if ($215) {
      $$0 = 0;
      label = 114;
      break L165;
     }
     HEAP32[$buffer>>2] = $214;
     break;
    }
    $209 = (_CRYPTO_malloc($206,58766,755)|0);
    HEAP32[$buffer>>2] = $209;
    $210 = ($209|0)==(0|0);
    if ($210) {
     $$0 = 0;
     label = 114;
     break L165;
    }
    $211 = HEAP32[$currlen>>2]|0;
    $212 = ($211|0)==(0);
    if (!($212)) {
     $213 = HEAP32[$sbuffer>>2]|0;
     _memcpy(($209|0),($213|0),($211|0))|0;
    }
    HEAP32[$sbuffer>>2] = 0;
   }
  } while(0);
  $216 = HEAP32[$currlen>>2]|0;
  $217 = HEAP32[$maxlen>>2]|0;
  $218 = ($216>>>0)<($217>>>0);
  do {
   if ($218) {
    $219 = HEAP32[$sbuffer>>2]|0;
    $220 = ($219|0)==(0|0);
    $221 = (($216) + 1)|0;
    HEAP32[$currlen>>2] = $221;
    if ($220) {
     $223 = HEAP32[$buffer>>2]|0;
     $224 = (($223) + ($216)|0);
     HEAP8[$224>>0] = 32;
     break;
    } else {
     $222 = (($219) + ($216)|0);
     HEAP8[$222>>0] = 32;
     break;
    }
   }
  } while(0);
  $225 = (($spadlen$336) + 1)|0;
  $226 = ($spadlen$336|0)<(-1);
  if ($226) {
   $spadlen$336 = $225;
  } else {
   $$0 = 1;
   label = 114;
   break;
  }
 }
 if ((label|0) == 114) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _BIO_write($b,$in,$inl) {
 $b = $b|0;
 $in = $in|0;
 $inl = $inl|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($b|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($b)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$b>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = ($2|0)!=(0|0);
   if ($8) {
    $9 = (FUNCTION_TABLE_iiiiiii[$2 & 31]($b,3,$in,$inl,0,1)|0);
    $10 = ($9|0)<(1);
    if ($10) {
     $$0 = $9;
     return ($$0|0);
    }
   }
   $11 = ((($b)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   if ($13) {
    _ERR_put_error(32,113,120,58816,239);
    $$0 = -2;
    return ($$0|0);
   }
   $14 = HEAP32[$b>>2]|0;
   $15 = ((($14)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (FUNCTION_TABLE_iiii[$16 & 63]($b,$in,$inl)|0);
   $18 = ($17|0)>(0);
   if ($18) {
    $19 = ((($b)) + 52|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + ($17))|0;
    HEAP32[$19>>2] = $21;
   }
   if (!($8)) {
    $$0 = $17;
    return ($$0|0);
   }
   $22 = (FUNCTION_TABLE_iiiiiii[$2 & 31]($b,131,$in,$inl,0,$17)|0);
   $$0 = $22;
   return ($$0|0);
  }
 }
 _ERR_put_error(32,113,121,58816,230);
 $$0 = -2;
 return ($$0|0);
}
function _BIO_puts($b,$in) {
 $b = $b|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($b|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$b>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ((($1)) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ((($b)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)!=(0|0);
    if ($8) {
     $9 = (FUNCTION_TABLE_iiiiiii[$7 & 31]($b,4,$in,0,0,1)|0);
     $10 = ($9|0)<(1);
     if ($10) {
      $$0 = $9;
      return ($$0|0);
     }
    }
    $11 = ((($b)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0);
    if ($13) {
     _ERR_put_error(32,110,120,58816,269);
     $$0 = -2;
     return ($$0|0);
    }
    $14 = HEAP32[$b>>2]|0;
    $15 = ((($14)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iii[$16 & 127]($b,$in)|0);
    $18 = ($17|0)>(0);
    if ($18) {
     $19 = ((($b)) + 52|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + ($17))|0;
     HEAP32[$19>>2] = $21;
    }
    if (!($8)) {
     $$0 = $17;
     return ($$0|0);
    }
    $22 = (FUNCTION_TABLE_iiiiiii[$7 & 31]($b,132,$in,0,0,$17)|0);
    $$0 = $22;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(32,110,121,58816,259);
 $$0 = -2;
 return ($$0|0);
}
function _BIO_indent($b,$indent,$max) {
 $b = $b|0;
 $indent = $indent|0;
 $max = $max|0;
 var $$0 = 0, $$1 = 0, $$indent = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $max$$indent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($indent|0)<(0);
 $$indent = $0 ? 0 : $indent;
 $1 = ($$indent|0)>($max|0);
 $max$$indent = $1 ? $max : $$indent;
 $$1 = $max$$indent;
 while(1) {
  $2 = ($$1|0)==(0);
  if ($2) {
   $$0 = 1;
   label = 4;
   break;
  }
  $3 = (($$1) + -1)|0;
  $4 = (_BIO_puts($b,58826)|0);
  $5 = ($4|0)==(1);
  if ($5) {
   $$1 = $3;
  } else {
   $$0 = 0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _OBJ_NAME_get($name,$type) {
 $name = $name|0;
 $type = $type|0;
 var $$0 = 0, $$in = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num$03 = 0, $on = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $on = sp;
 $0 = ($name|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = HEAP32[600>>2]|0;
   $2 = ($1|0)==(0|0);
   if ($2) {
    (_CRYPTO_mem_ctrl(3)|0);
    $3 = (_lh_new(65,84)|0);
    HEAP32[600>>2] = $3;
    (_CRYPTO_mem_ctrl(2)|0);
    $4 = HEAP32[600>>2]|0;
    $5 = ($4|0)==(0|0);
    if ($5) {
     $$0 = 0;
     break;
    } else {
     $$in = $4;
    }
   } else {
    $$in = $1;
   }
   $6 = $type & -32769;
   $7 = ((($on)) + 8|0);
   HEAP32[$7>>2] = $name;
   HEAP32[$on>>2] = $6;
   $8 = (_lh_retrieve($$in,$on)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0 = 0;
   } else {
    $10 = $type & 32768;
    $11 = ($10|0)==(0);
    L7: do {
     if ($11) {
      $13 = $8;$num$03 = 0;
      while(1) {
       $12 = ((($13)) + 4|0);
       $14 = HEAP32[$12>>2]|0;
       $15 = ($14|0)==(0);
       if ($15) {
        $$lcssa2 = $13;
        break L7;
       }
       $16 = ($num$03|0)>(9);
       if ($16) {
        $$0 = 0;
        break L1;
       }
       $17 = (($num$03) + 1)|0;
       $18 = ((($13)) + 12|0);
       $19 = HEAP32[$18>>2]|0;
       HEAP32[$7>>2] = $19;
       $20 = HEAP32[600>>2]|0;
       $21 = (_lh_retrieve($20,$on)|0);
       $22 = ($21|0)==(0|0);
       if ($22) {
        $$0 = 0;
        break L1;
       } else {
        $13 = $21;$num$03 = $17;
       }
      }
     } else {
      $$lcssa2 = $8;
     }
    } while(0);
    $23 = ((($$lcssa2)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $$0 = $24;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _obj_name_LHASH_HASH($arg) {
 $arg = $arg|0;
 var $$pre$i$pre$phiZZZ2D = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[604>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$pre$i$pre$phiZZZ2D = $arg;
 } else {
  $2 = (_sk_num($0)|0);
  $3 = HEAP32[$arg>>2]|0;
  $4 = ($2|0)>($3|0);
  if ($4) {
   $5 = HEAP32[604>>2]|0;
   $6 = (_sk_value($5,$3)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($arg)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (FUNCTION_TABLE_ii[$7 & 127]($9)|0);
   $$pre$phi$iZ2D = $arg;$ret$0$i = $10;
   $14 = HEAP32[$$pre$phi$iZ2D>>2]|0;
   $15 = $14 ^ $ret$0$i;
   return ($15|0);
  } else {
   $$pre$i$pre$phiZZZ2D = $arg;
  }
 }
 $11 = ((($arg)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_lh_strhash($12)|0);
 $$pre$phi$iZ2D = $$pre$i$pre$phiZZZ2D;$ret$0$i = $13;
 $14 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $15 = $14 ^ $ret$0$i;
 return ($15|0);
}
function _obj_name_LHASH_COMP($arg1,$arg2) {
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ret$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg1>>2]|0;
 $1 = HEAP32[$arg2>>2]|0;
 $2 = (($0) - ($1))|0;
 $3 = ($0|0)==($1|0);
 if (!($3)) {
  $ret$0$i = $2;
  return ($ret$0$i|0);
 }
 $4 = HEAP32[604>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = (_sk_num($4)|0);
  $7 = HEAP32[$arg1>>2]|0;
  $8 = ($6|0)>($7|0);
  if ($8) {
   $9 = HEAP32[604>>2]|0;
   $10 = (_sk_value($9,$7)|0);
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($arg1)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($arg2)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (FUNCTION_TABLE_iii[$12 & 127]($14,$16)|0);
   $ret$0$i = $17;
   return ($ret$0$i|0);
  }
 }
 $18 = ((($arg1)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($arg2)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_strcmp($19,$21)|0);
 $ret$0$i = $22;
 return ($ret$0$i|0);
}
function _OBJ_nid2obj($n) {
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ad = 0, $ob = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ad = sp + 24|0;
 $ob = sp;
 $0 = ($n>>>0)<(958);
 do {
  if ($0) {
   $1 = ($n|0)==(0);
   if (!($1)) {
    $2 = (((612 + (($n*24)|0)|0)) + 8|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ($3|0)==(0);
    if ($4) {
     _ERR_put_error(8,103,101,58828,320);
     $$0 = 0;
     break;
    }
   }
   $5 = (612 + (($n*24)|0)|0);
   $$0 = $5;
  } else {
   $6 = HEAP32[608>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
   } else {
    HEAP32[$ad>>2] = 3;
    $8 = ((($ad)) + 4|0);
    HEAP32[$8>>2] = $ob;
    $9 = ((($ob)) + 8|0);
    HEAP32[$9>>2] = $n;
    $10 = (_lh_retrieve($6,$ad)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     _ERR_put_error(8,103,101,58828,334);
     $$0 = 0;
     break;
    } else {
     $12 = ((($10)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $$0 = $13;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_nid2sn($n) {
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ad = 0, $ob = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ad = sp + 24|0;
 $ob = sp;
 $0 = ($n>>>0)<(958);
 do {
  if ($0) {
   $1 = ($n|0)==(0);
   if (!($1)) {
    $2 = (((612 + (($n*24)|0)|0)) + 8|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ($3|0)==(0);
    if ($4) {
     _ERR_put_error(8,104,101,58828,347);
     $$0 = 0;
     break;
    }
   }
   $5 = (612 + (($n*24)|0)|0);
   $6 = HEAP32[$5>>2]|0;
   $$0 = $6;
  } else {
   $7 = HEAP32[608>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 0;
   } else {
    HEAP32[$ad>>2] = 3;
    $9 = ((($ad)) + 4|0);
    HEAP32[$9>>2] = $ob;
    $10 = ((($ob)) + 8|0);
    HEAP32[$10>>2] = $n;
    $11 = (_lh_retrieve($7,$ad)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     _ERR_put_error(8,104,101,58828,361);
     $$0 = 0;
     break;
    } else {
     $13 = ((($11)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $$0 = $15;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_obj2nid($a) {
 $a = $a|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$lcssa = 0, $$lcssa51 = 0, $$lcssa52 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ad = 0, $c$0$i$i$i = 0, $c$0$i$i$i$lcssa = 0, $c$0$ph$i$i$i = 0, $h$0$i$i$i = 0, $h$0$i$i$i$lcssa46 = 0, $h$0$ph$i$i$i = 0, $l$0$ph$i$i$i = 0, $p$0$i$i$i = 0, $p$0$i$i$i$lcssa = 0, $p$0$ph$i$i$i = 0, $p$16$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ad = sp;
 $0 = $a;
 $1 = ($a|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($a)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($a)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[608>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  HEAP32[$ad>>2] = 0;
  $11 = ((($ad)) + 4|0);
  HEAP32[$11>>2] = $0;
  $12 = (_lh_retrieve($8,$ad)|0);
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = ((($12)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $$0 = $17;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = ((($a)) + 16|0);
 $c$0$ph$i$i$i = 0;$h$0$ph$i$i$i = 890;$l$0$ph$i$i$i = 0;$p$0$ph$i$i$i = 0;
 L15: while(1) {
  $c$0$i$i$i = $c$0$ph$i$i$i;$h$0$i$i$i = $h$0$ph$i$i$i;$p$0$i$i$i = $p$0$ph$i$i$i;
  while(1) {
   $18 = ($l$0$ph$i$i$i|0)<($h$0$i$i$i|0);
   if (!($18)) {
    $c$0$i$i$i$lcssa = $c$0$i$i$i;$p$0$i$i$i$lcssa = $p$0$i$i$i;
    label = 16;
    break L15;
   }
   $19 = (($h$0$i$i$i) + ($l$0$ph$i$i$i))|0;
   $20 = (($19|0) / 2)&-1;
   $21 = (23604 + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$5>>2]|0;
   $24 = (((612 + (($22*24)|0)|0)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $28 = ($23|0)==(0);
    if ($28) {
     $p$16$i$i$i = $21;
     break L15;
    }
    $29 = HEAP32[$10>>2]|0;
    $30 = (((612 + (($22*24)|0)|0)) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (_memcmp($29,$31,$23)|0);
    $$0$i$i = $32;
   } else {
    $27 = (($23) - ($25))|0;
    $$0$i$i = $27;
   }
   $33 = ($$0$i$i|0)<(0);
   if ($33) {
    $c$0$i$i$i = $$0$i$i;$h$0$i$i$i = $20;$p$0$i$i$i = $21;
   } else {
    $$0$i$i$lcssa = $$0$i$i;$$lcssa51 = $20;$$lcssa52 = $21;$h$0$i$i$i$lcssa46 = $h$0$i$i$i;
    break;
   }
  }
  $34 = ($$0$i$i$lcssa|0)>(0);
  $35 = (($$lcssa51) + 1)|0;
  if ($34) {
   $c$0$ph$i$i$i = $$0$i$i$lcssa;$h$0$ph$i$i$i = $h$0$i$i$i$lcssa46;$l$0$ph$i$i$i = $35;$p$0$ph$i$i$i = $$lcssa52;
  } else {
   $p$16$i$i$i = $$lcssa52;
   break;
  }
 }
 if ((label|0) == 16) {
  $36 = ($c$0$i$i$i$lcssa|0)==(0);
  if ($36) {
   $p$16$i$i$i = $p$0$i$i$i$lcssa;
  } else {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $37 = ($p$16$i$i$i|0)==(0|0);
 if ($37) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = HEAP32[$p$16$i$i$i>>2]|0;
 $39 = (((612 + (($38*24)|0)|0)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $$0 = $40;
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_sn2nid($s) {
 $s = $s|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa29 = 0, $$lcssa30 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ad = 0, $c$0$i$i$i = 0, $c$0$i$i$i$lcssa = 0, $c$0$ph$i$i$i = 0, $h$0$i$i$i = 0, $h$0$i$i$i$lcssa26 = 0, $h$0$ph$i$i$i = 0, $l$0$ph$i$i$i = 0, $o = 0, $p$0$i$i$i = 0;
 var $p$0$i$i$i$lcssa = 0, $p$0$ph$i$i$i = 0, $p$16$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $o = sp + 8|0;
 $ad = sp;
 HEAP32[$o>>2] = $s;
 $0 = HEAP32[608>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  HEAP32[$ad>>2] = 1;
  $3 = ((($ad)) + 4|0);
  HEAP32[$3>>2] = $o;
  $4 = (_lh_retrieve($0,$ad)|0);
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($7)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $2 = HEAP32[$o>>2]|0;
 $c$0$ph$i$i$i = 0;$h$0$ph$i$i$i = 951;$l$0$ph$i$i$i = 0;$p$0$ph$i$i$i = 0;
 L6: while(1) {
  $c$0$i$i$i = $c$0$ph$i$i$i;$h$0$i$i$i = $h$0$ph$i$i$i;$p$0$i$i$i = $p$0$ph$i$i$i;
  while(1) {
   $10 = ($l$0$ph$i$i$i|0)<($h$0$i$i$i|0);
   if (!($10)) {
    $c$0$i$i$i$lcssa = $c$0$i$i$i;$p$0$i$i$i$lcssa = $p$0$i$i$i;
    label = 9;
    break L6;
   }
   $11 = (($h$0$i$i$i) + ($l$0$ph$i$i$i))|0;
   $12 = (($11|0) / 2)&-1;
   $13 = (27164 + ($12<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (612 + (($14*24)|0)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_strcmp($2,$16)|0);
   $18 = ($17|0)<(0);
   if ($18) {
    $c$0$i$i$i = $17;$h$0$i$i$i = $12;$p$0$i$i$i = $13;
   } else {
    $$lcssa = $12;$$lcssa29 = $13;$$lcssa30 = $17;$h$0$i$i$i$lcssa26 = $h$0$i$i$i;
    break;
   }
  }
  $19 = ($$lcssa30|0)>(0);
  $20 = (($$lcssa) + 1)|0;
  if ($19) {
   $c$0$ph$i$i$i = $$lcssa30;$h$0$ph$i$i$i = $h$0$i$i$i$lcssa26;$l$0$ph$i$i$i = $20;$p$0$ph$i$i$i = $$lcssa29;
  } else {
   $p$16$i$i$i = $$lcssa29;
   break;
  }
 }
 if ((label|0) == 9) {
  $21 = ($c$0$i$i$i$lcssa|0)==(0);
  if ($21) {
   $p$16$i$i$i = $p$0$i$i$i$lcssa;
  } else {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $22 = ($p$16$i$i$i|0)==(0|0);
 if ($22) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = HEAP32[$p$16$i$i$i>>2]|0;
 $24 = (((612 + (($23*24)|0)|0)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $$0 = $25;
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_ln2nid($s) {
 $s = $s|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa29 = 0, $$lcssa30 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ad = 0, $c$0$i$i$i = 0, $c$0$i$i$i$lcssa = 0, $c$0$ph$i$i$i = 0, $h$0$i$i$i = 0, $h$0$i$i$i$lcssa26 = 0, $h$0$ph$i$i$i = 0, $l$0$ph$i$i$i = 0, $o = 0;
 var $p$0$i$i$i = 0, $p$0$i$i$i$lcssa = 0, $p$0$ph$i$i$i = 0, $p$16$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $o = sp + 8|0;
 $ad = sp;
 $0 = ((($o)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = HEAP32[608>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  HEAP32[$ad>>2] = 2;
  $4 = ((($ad)) + 4|0);
  HEAP32[$4>>2] = $o;
  $5 = (_lh_retrieve($1,$ad)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = ((($5)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $$0 = $10;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $3 = HEAP32[$0>>2]|0;
 $c$0$ph$i$i$i = 0;$h$0$ph$i$i$i = 951;$l$0$ph$i$i$i = 0;$p$0$ph$i$i$i = 0;
 L6: while(1) {
  $c$0$i$i$i = $c$0$ph$i$i$i;$h$0$i$i$i = $h$0$ph$i$i$i;$p$0$i$i$i = $p$0$ph$i$i$i;
  while(1) {
   $11 = ($l$0$ph$i$i$i|0)<($h$0$i$i$i|0);
   if (!($11)) {
    $c$0$i$i$i$lcssa = $c$0$i$i$i;$p$0$i$i$i$lcssa = $p$0$i$i$i;
    label = 9;
    break L6;
   }
   $12 = (($h$0$i$i$i) + ($l$0$ph$i$i$i))|0;
   $13 = (($12|0) / 2)&-1;
   $14 = (30968 + ($13<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (((612 + (($15*24)|0)|0)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_strcmp($3,$17)|0);
   $19 = ($18|0)<(0);
   if ($19) {
    $c$0$i$i$i = $18;$h$0$i$i$i = $13;$p$0$i$i$i = $14;
   } else {
    $$lcssa = $13;$$lcssa29 = $14;$$lcssa30 = $18;$h$0$i$i$i$lcssa26 = $h$0$i$i$i;
    break;
   }
  }
  $20 = ($$lcssa30|0)>(0);
  $21 = (($$lcssa) + 1)|0;
  if ($20) {
   $c$0$ph$i$i$i = $$lcssa30;$h$0$ph$i$i$i = $h$0$i$i$i$lcssa26;$l$0$ph$i$i$i = $21;$p$0$ph$i$i$i = $$lcssa29;
  } else {
   $p$16$i$i$i = $$lcssa29;
   break;
  }
 }
 if ((label|0) == 9) {
  $22 = ($c$0$i$i$i$lcssa|0)==(0);
  if ($22) {
   $p$16$i$i$i = $p$0$i$i$i$lcssa;
  } else {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $23 = ($p$16$i$i$i|0)==(0|0);
 if ($23) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = HEAP32[$p$16$i$i$i>>2]|0;
 $25 = (((612 + (($24*24)|0)|0)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_obj2txt($buf,$buf_len,$a,$no_name) {
 $buf = $buf|0;
 $buf_len = $buf_len|0;
 $a = $a|0;
 $no_name = $no_name|0;
 var $$0 = 0, $$0$i = 0, $$0$i$in = 0, $$0$i18 = 0, $$0$i18$in = 0, $$08$be = 0, $$0870 = 0, $$09$be = 0, $$0966 = 0, $$1 = 0, $$110 = 0, $$2 = 0, $$211 = 0, $$3 = 0, $$312 = 0, $$4 = 0, $$413 = 0, $$5 = 0, $$514 = 0, $$lcssa167 = 0;
 var $$lcssa168 = 0, $$lcssa173 = 0, $$lcssa174 = 0, $$lcssa176 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ad$i = 0, $ad$i16 = 0, $bl$068 = 0, $bl$1$ph = 0, $bl$1$ph$lcssa183 = 0;
 var $bl$1$ph$lcssa183$lcssa187 = 0, $bl$2 = 0, $bl$323 = 0, $bl$4 = 0, $bl$426 = 0, $first$067 = 0, $i$0 = 0, $l$0$ph = 0, $l$060 = 0, $l$1 = 0, $l$1$lcssa = 0, $l$1$lcssa179 = 0, $l$1181 = 0, $l$2 = 0, $l$3 = 0, $len$065 = 0, $len$1$ph = 0, $n$0$be = 0, $n$0$be$lcssa = 0, $n$064 = 0;
 var $n$1 = 0, $ob$i = 0, $ob$i17 = 0, $or$cond = 0, $or$cond15 = 0, $or$cond1558 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $p$069 = 0, $p$1$ph = 0, $p$1$ph$pn = 0, $s$019 = 0, $tbuf = 0, $use_bn$0$ph = 0, $use_bn$059 = 0, $use_bn$122 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp;
 $ad$i16 = sp + 64|0;
 $ob$i17 = sp + 40|0;
 $ad$i = sp + 32|0;
 $ob$i = sp + 8|0;
 $tbuf = sp + 72|0;
 $0 = ($buf|0)!=(0|0);
 $1 = ($buf_len|0)>(0);
 $or$cond = $0 & $1;
 if ($or$cond) {
  HEAP8[$buf>>0] = 0;
 }
 $2 = ($a|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($a)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($no_name|0)==(0);
 L10: do {
  if ($6) {
   $7 = (_OBJ_obj2nid($a)|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = ($7>>>0)<(958);
    do {
     if ($9) {
      $10 = (((612 + (($7*24)|0)|0)) + 8|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($11|0)==(0);
      if ($12) {
       _ERR_put_error(8,102,101,58828,374);
       label = 15;
       break;
      } else {
       $13 = (((612 + (($7*24)|0)|0)) + 4|0);
       $$0$i$in = $13;
       label = 16;
       break;
      }
     } else {
      $14 = HEAP32[608>>2]|0;
      $15 = ($14|0)==(0|0);
      if ($15) {
       label = 15;
      } else {
       HEAP32[$ad$i>>2] = 3;
       $16 = ((($ad$i)) + 4|0);
       HEAP32[$16>>2] = $ob$i;
       $17 = ((($ob$i)) + 8|0);
       HEAP32[$17>>2] = $7;
       $18 = (_lh_retrieve($14,$ad$i)|0);
       $19 = ($18|0)==(0|0);
       if ($19) {
        _ERR_put_error(8,102,101,58828,388);
        label = 15;
        break;
       } else {
        $20 = ((($18)) + 4|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = ((($21)) + 4|0);
        $$0$i$in = $22;
        label = 16;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 17;
    }
    else if ((label|0) == 16) {
     $$0$i = HEAP32[$$0$i$in>>2]|0;
     $23 = ($$0$i|0)==(0|0);
     if ($23) {
      label = 17;
     } else {
      $s$019 = $$0$i;
     }
    }
    do {
     if ((label|0) == 17) {
      do {
       if ($9) {
        $24 = (((612 + (($7*24)|0)|0)) + 8|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = ($25|0)==(0);
        if ($26) {
         _ERR_put_error(8,104,101,58828,347);
         label = 25;
         break;
        } else {
         $27 = (612 + (($7*24)|0)|0);
         $$0$i18$in = $27;
         label = 26;
         break;
        }
       } else {
        $28 = HEAP32[608>>2]|0;
        $29 = ($28|0)==(0|0);
        if ($29) {
         label = 25;
        } else {
         HEAP32[$ad$i16>>2] = 3;
         $30 = ((($ad$i16)) + 4|0);
         HEAP32[$30>>2] = $ob$i17;
         $31 = ((($ob$i17)) + 8|0);
         HEAP32[$31>>2] = $7;
         $32 = (_lh_retrieve($28,$ad$i16)|0);
         $33 = ($32|0)==(0|0);
         if ($33) {
          _ERR_put_error(8,104,101,58828,361);
          label = 25;
          break;
         } else {
          $34 = ((($32)) + 4|0);
          $35 = HEAP32[$34>>2]|0;
          $$0$i18$in = $35;
          label = 26;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 25) {
       break L10;
      }
      else if ((label|0) == 26) {
       $$0$i18 = HEAP32[$$0$i18$in>>2]|0;
       $36 = ($$0$i18|0)==(0|0);
       if ($36) {
        break L10;
       } else {
        $s$019 = $$0$i18;
        break;
       }
      }
     }
    } while(0);
    if ($0) {
     (_BUF_strlcpy($buf,$s$019,$buf_len)|0);
    }
    $37 = (_strlen($s$019)|0);
    $$0 = $37;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $38 = ((($a)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)>(0);
 if (!($40)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = HEAP32[$3>>2]|0;
 $$0870 = $buf;$$0966 = $buf_len;$bl$068 = 0;$first$067 = 1;$len$065 = $39;$n$064 = 0;$p$069 = $41;
 L50: while(1) {
  $bl$1$ph = $bl$068;$l$0$ph = 0;$len$1$ph = $len$065;$p$1$ph = $p$069;$use_bn$0$ph = 0;
  L52: while(1) {
   $42 = HEAP8[$p$1$ph>>0]|0;
   $43 = (($len$1$ph) + -1)|0;
   $44 = ($43|0)==(0);
   $45 = ($42<<24>>24)<(0);
   $or$cond1558 = $44 & $45;
   if ($or$cond1558) {
    $bl$4 = $bl$1$ph;
    label = 71;
    break L50;
   } else {
    $108 = $45;$49 = $42;$66 = $43;$l$060 = $l$0$ph;$p$1$ph$pn = $p$1$ph;$use_bn$059 = $use_bn$0$ph;
   }
   while(1) {
    $46 = ((($p$1$ph$pn)) + 1|0);
    $47 = ($use_bn$059|0)!=(0);
    $48 = $49&255;
    $50 = $48 & 127;
    if ($47) {
     $51 = (_BN_add_word($bl$1$ph,$50)|0);
     $52 = ($51|0)==(0);
     if ($52) {
      $bl$4 = $bl$1$ph;
      label = 71;
      break L50;
     } else {
      $l$1 = $l$060;
     }
    } else {
     $53 = $50 | $l$060;
     $l$1 = $53;
    }
    if (!($108)) {
     $$lcssa167 = $66;$$lcssa173 = $46;$$lcssa176 = $47;$bl$1$ph$lcssa183 = $bl$1$ph;$l$1$lcssa = $l$1;
     break L52;
    }
    $54 = ($use_bn$059|0)==(0);
    $55 = ($l$1>>>0)>(33554431);
    $or$cond3 = $54 & $55;
    if ($or$cond3) {
     $$lcssa168 = $66;$$lcssa174 = $46;$l$1$lcssa179 = $l$1;
     label = 39;
     break;
    }
    if (!($54)) {
     $109 = $46;$110 = $66;$bl$323 = $bl$1$ph;$l$1181 = $l$1;$use_bn$122 = $use_bn$059;
     break;
    }
    $63 = $l$1 << 7;
    $64 = HEAP8[$46>>0]|0;
    $65 = (($66) + -1)|0;
    $67 = ($65|0)==(0);
    $68 = ($64<<24>>24)<(0);
    $or$cond15 = $67 & $68;
    if ($or$cond15) {
     $bl$4 = $bl$1$ph;
     label = 71;
     break L50;
    } else {
     $108 = $68;$49 = $64;$66 = $65;$l$060 = $63;$p$1$ph$pn = $46;$use_bn$059 = 0;
    }
   }
   if ((label|0) == 39) {
    label = 0;
    $56 = ($bl$1$ph|0)==(0|0);
    if ($56) {
     $57 = (_BN_new()|0);
     $58 = ($57|0)==(0|0);
     if ($58) {
      $$0 = -1;
      label = 73;
      break L50;
     } else {
      $bl$2 = $57;
     }
    } else {
     $bl$2 = $bl$1$ph;
    }
    $59 = (_BN_set_word($bl$2,$l$1$lcssa179)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     $bl$426 = $bl$2;
     break L50;
    } else {
     $109 = $$lcssa174;$110 = $$lcssa168;$bl$323 = $bl$2;$l$1181 = $l$1$lcssa179;$use_bn$122 = 1;
    }
   }
   $61 = (_BN_lshift($bl$323,$bl$323,7)|0);
   $62 = ($61|0)==(0);
   if ($62) {
    $bl$4 = $bl$323;
    label = 71;
    break L50;
   } else {
    $bl$1$ph = $bl$323;$l$0$ph = $l$1181;$len$1$ph = $110;$p$1$ph = $109;$use_bn$0$ph = $use_bn$122;
   }
  }
  $69 = ($first$067|0)==(0);
  if ($69) {
   $$2 = $$0870;$$211 = $$0966;$l$3 = $l$1$lcssa;$n$1 = $n$064;
  } else {
   $70 = ($l$1$lcssa>>>0)>(79);
   do {
    if ($70) {
     if ($$lcssa176) {
      $71 = (_BN_sub_word($bl$1$ph$lcssa183,80)|0);
      $72 = ($71|0)==(0);
      if ($72) {
       $bl$4 = $bl$1$ph$lcssa183;
       label = 71;
       break L50;
      } else {
       $i$0 = 2;$l$2 = $l$1$lcssa;
       break;
      }
     } else {
      $73 = (($l$1$lcssa) + -80)|0;
      $i$0 = 2;$l$2 = $73;
      break;
     }
    } else {
     $74 = (($l$1$lcssa>>>0) / 40)&-1;
     $75 = Math_imul($74, -40)|0;
     $76 = (($l$1$lcssa) + ($75))|0;
     $i$0 = $74;$l$2 = $76;
    }
   } while(0);
   $77 = ($$0870|0)!=(0|0);
   $78 = ($$0966|0)>(1);
   $or$cond5 = $78 & $77;
   if ($or$cond5) {
    $79 = (($i$0) + 48)|0;
    $80 = $79&255;
    $81 = ((($$0870)) + 1|0);
    HEAP8[$$0870>>0] = $80;
    HEAP8[$81>>0] = 0;
    $82 = (($$0966) + -1)|0;
    $$1 = $81;$$110 = $82;
   } else {
    $$1 = $$0870;$$110 = $$0966;
   }
   $83 = (($n$064) + 1)|0;
   $$2 = $$1;$$211 = $$110;$l$3 = $l$2;$n$1 = $83;
  }
  if ($$lcssa176) {
   $84 = (_BN_bn2dec($bl$1$ph$lcssa183)|0);
   $85 = ($84|0)==(0|0);
   if ($85) {
    $bl$4 = $bl$1$ph$lcssa183;
    label = 71;
    break;
   }
   $86 = (_strlen($84)|0);
   $87 = ($$2|0)==(0|0);
   do {
    if ($87) {
     $$4 = 0;$$413 = $$211;
    } else {
     $88 = ($$211|0)>(1);
     if ($88) {
      $89 = ((($$2)) + 1|0);
      HEAP8[$$2>>0] = 46;
      HEAP8[$89>>0] = 0;
      $90 = (($$211) + -1)|0;
      $$3 = $89;$$312 = $90;
     } else {
      $$3 = $$2;$$312 = $$211;
     }
     (_BUF_strlcpy($$3,$84,$$312)|0);
     $91 = ($$312|0)<($86|0);
     if ($91) {
      $92 = (($$3) + ($$312)|0);
      $$4 = $92;$$413 = 0;
      break;
     } else {
      $93 = (($$3) + ($86)|0);
      $94 = (($$312) - ($86))|0;
      $$4 = $93;$$413 = $94;
      break;
     }
    }
   } while(0);
   $95 = (($n$1) + 1)|0;
   $96 = (($95) + ($86))|0;
   _CRYPTO_free($84);
   $$08$be = $$4;$$09$be = $$413;$n$0$be = $96;
  } else {
   HEAP32[$vararg_buffer>>2] = $l$3;
   (_BIO_snprintf($tbuf,26,58838,$vararg_buffer)|0);
   $97 = (_strlen($tbuf)|0);
   $98 = ($$2|0)!=(0|0);
   $99 = ($$211|0)>(0);
   $or$cond7 = $99 & $98;
   do {
    if ($or$cond7) {
     (_BUF_strlcpy($$2,$tbuf,$$211)|0);
     $100 = ($$211|0)<($97|0);
     if ($100) {
      $101 = (($$2) + ($$211)|0);
      $$5 = $101;$$514 = 0;
      break;
     } else {
      $102 = (($$2) + ($97)|0);
      $103 = (($$211) - ($97))|0;
      $$5 = $102;$$514 = $103;
      break;
     }
    } else {
     $$5 = $$2;$$514 = $$211;
    }
   } while(0);
   $104 = (($97) + ($n$1))|0;
   $$08$be = $$5;$$09$be = $$514;$n$0$be = $104;
  }
  $105 = ($$lcssa167|0)>(0);
  if ($105) {
   $$0870 = $$08$be;$$0966 = $$09$be;$bl$068 = $bl$1$ph$lcssa183;$first$067 = 0;$len$065 = $$lcssa167;$n$064 = $n$0$be;$p$069 = $$lcssa173;
  } else {
   $bl$1$ph$lcssa183$lcssa187 = $bl$1$ph$lcssa183;$n$0$be$lcssa = $n$0$be;
   label = 69;
   break;
  }
 }
 if ((label|0) == 69) {
  $106 = ($bl$1$ph$lcssa183$lcssa187|0)==(0|0);
  if ($106) {
   $$0 = $n$0$be$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  _BN_free($bl$1$ph$lcssa183$lcssa187);
  $$0 = $n$0$be$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 71) {
  $107 = ($bl$4|0)==(0|0);
  if ($107) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $bl$426 = $bl$4;
  }
 }
 else if ((label|0) == 73) {
  STACKTOP = sp;return ($$0|0);
 }
 _BN_free($bl$426);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_bsearch_($key,$base,$num,$size,$cmp) {
 $key = $key|0;
 $base = $base|0;
 $num = $num|0;
 $size = $size|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$lcssa = 0, $$lcssa29 = 0, $$lcssa30 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0$i = 0, $c$0$i$lcssa = 0, $c$0$ph$i = 0, $h$0$i = 0, $h$0$i$lcssa26 = 0;
 var $h$0$ph$i = 0, $l$0$ph$i = 0, $p$0$i = 0, $p$0$i$lcssa = 0, $p$0$ph$i = 0, $p$16$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)==(0);
 if ($0) {
  $$0$i = 0;
  return ($$0$i|0);
 } else {
  $c$0$ph$i = 0;$h$0$ph$i = $num;$l$0$ph$i = 0;$p$0$ph$i = 0;
 }
 L3: while(1) {
  $c$0$i = $c$0$ph$i;$h$0$i = $h$0$ph$i;$p$0$i = $p$0$ph$i;
  while(1) {
   $1 = ($l$0$ph$i|0)<($h$0$i|0);
   if (!($1)) {
    $c$0$i$lcssa = $c$0$i;$p$0$i$lcssa = $p$0$i;
    label = 6;
    break L3;
   }
   $2 = (($h$0$i) + ($l$0$ph$i))|0;
   $3 = (($2|0) / 2)&-1;
   $4 = Math_imul($3, $size)|0;
   $5 = (($base) + ($4)|0);
   $6 = (FUNCTION_TABLE_iii[$cmp & 127]($key,$5)|0);
   $7 = ($6|0)<(0);
   if ($7) {
    $c$0$i = $6;$h$0$i = $3;$p$0$i = $5;
   } else {
    $$lcssa = $3;$$lcssa29 = $5;$$lcssa30 = $6;$h$0$i$lcssa26 = $h$0$i;
    break;
   }
  }
  $8 = ($$lcssa30|0)>(0);
  $9 = (($$lcssa) + 1)|0;
  if ($8) {
   $c$0$ph$i = $$lcssa30;$h$0$ph$i = $h$0$i$lcssa26;$l$0$ph$i = $9;$p$0$ph$i = $$lcssa29;
  } else {
   $p$16$i = $$lcssa29;
   break;
  }
 }
 if ((label|0) == 6) {
  $10 = ($c$0$i$lcssa|0)==(0);
  if ($10) {
   $p$16$i = $p$0$i$lcssa;
  } else {
   $$0$i = 0;
   return ($$0$i|0);
  }
 }
 $$0$i = $p$16$i;
 return ($$0$i|0);
}
function _OBJ_bsearch_ex_($key,$base_,$num,$size,$cmp,$flags) {
 $key = $key|0;
 $base_ = $base_|0;
 $num = $num|0;
 $size = $size|0;
 $cmp = $cmp|0;
 $flags = $flags|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa42 = 0, $$lcssa43 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$0$lcssa = 0, $c$0$ph = 0, $h$0 = 0, $h$0$lcssa38 = 0, $h$0$ph = 0, $i$0 = 0, $i$0$lcssa = 0, $i$0$ph = 0, $i$15 = 0, $i$2 = 0, $i$2$lcssa = 0;
 var $l$0$ph = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0, $p$0$lcssa = 0, $p$0$ph = 0, $p$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $c$0$ph = 0;$h$0$ph = $num;$i$0$ph = 0;$l$0$ph = 0;$p$0$ph = 0;
 }
 L3: while(1) {
  $c$0 = $c$0$ph;$h$0 = $h$0$ph;$i$0 = $i$0$ph;$p$0 = $p$0$ph;
  while(1) {
   $1 = ($l$0$ph|0)<($h$0|0);
   if (!($1)) {
    $c$0$lcssa = $c$0;$i$0$lcssa = $i$0;$p$0$lcssa = $p$0;
    label = 7;
    break L3;
   }
   $2 = (($h$0) + ($l$0$ph))|0;
   $3 = (($2|0) / 2)&-1;
   $4 = Math_imul($3, $size)|0;
   $5 = (($base_) + ($4)|0);
   $6 = (FUNCTION_TABLE_iii[$cmp & 127]($key,$5)|0);
   $7 = ($6|0)<(0);
   if ($7) {
    $c$0 = $6;$h$0 = $3;$i$0 = $3;$p$0 = $5;
   } else {
    $$lcssa = $3;$$lcssa42 = $5;$$lcssa43 = $6;$h$0$lcssa38 = $h$0;
    break;
   }
  }
  $8 = ($$lcssa43|0)>(0);
  if (!($8)) {
   $15 = 0;$i$15 = $$lcssa;$p$16 = $$lcssa42;
   break;
  }
  $9 = (($$lcssa) + 1)|0;
  $c$0$ph = $$lcssa43;$h$0$ph = $h$0$lcssa38;$i$0$ph = $$lcssa;$l$0$ph = $9;$p$0$ph = $$lcssa42;
 }
 if ((label|0) == 7) {
  $10 = ($c$0$lcssa|0)!=(0);
  $11 = $flags & 1;
  $12 = ($11|0)==(0);
  $or$cond = $12 & $10;
  if ($or$cond) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $15 = $10;$i$15 = $i$0$lcssa;$p$16 = $p$0$lcssa;
  }
 }
 $13 = $flags & 2;
 $14 = ($13|0)==(0);
 $or$cond3 = $14 | $15;
 if ($or$cond3) {
  $$0 = $p$16;
  return ($$0|0);
 } else {
  $i$2 = $i$15;
 }
 while(1) {
  $16 = ($i$2|0)>(0);
  if (!($16)) {
   $i$2$lcssa = $i$2;
   break;
  }
  $17 = (($i$2) + -1)|0;
  $18 = Math_imul($17, $size)|0;
  $19 = (($base_) + ($18)|0);
  $20 = (FUNCTION_TABLE_iii[$cmp & 127]($key,$19)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   $i$2 = $17;
  } else {
   $i$2$lcssa = $i$2;
   break;
  }
 }
 $22 = Math_imul($i$2$lcssa, $size)|0;
 $23 = (($base_) + ($22)|0);
 $$0 = $23;
 return ($$0|0);
}
function _OBJ_dup($o) {
 $o = $o|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ln$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($o|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($o)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = $o;
  return ($$0|0);
 }
 $5 = (_ASN1_OBJECT_new()|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _ERR_put_error(8,101,13,86011,80);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($o)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_CRYPTO_malloc($8,86011,83)|0);
 $10 = ($9|0)==(0|0);
 L11: do {
  if ($10) {
   label = 15;
  } else {
   $11 = ((($o)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = HEAP32[$7>>2]|0;
    _memcpy(($9|0),($12|0),($14|0))|0;
   }
   $15 = ((($5)) + 16|0);
   HEAP32[$15>>2] = $9;
   $16 = HEAP32[$7>>2]|0;
   $17 = ((($5)) + 12|0);
   HEAP32[$17>>2] = $16;
   $18 = ((($o)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($5)) + 8|0);
   HEAP32[$20>>2] = $19;
   HEAP32[$5>>2] = 0;
   $21 = ((($5)) + 4|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($o)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $ln$0 = 0;
   } else {
    $25 = (_strlen($23)|0);
    $26 = (($25) + 1)|0;
    $27 = (_CRYPTO_malloc($26,86011,95)|0);
    $28 = ($27|0)==(0|0);
    if ($28) {
     label = 15;
     break;
    }
    $29 = HEAP32[$22>>2]|0;
    _memcpy(($27|0),($29|0),($26|0))|0;
    HEAP32[$21>>2] = $27;
    $ln$0 = $27;
   }
   $30 = HEAP32[$o>>2]|0;
   $31 = ($30|0)==(0|0);
   do {
    if (!($31)) {
     $32 = (_strlen($30)|0);
     $33 = (($32) + 1)|0;
     $34 = (_CRYPTO_malloc($33,86011,104)|0);
     $35 = ($34|0)==(0|0);
     if (!($35)) {
      $36 = HEAP32[$o>>2]|0;
      _memcpy(($34|0),($36|0),($33|0))|0;
      HEAP32[$5>>2] = $34;
      break;
     }
     _ERR_put_error(8,101,65,86011,115);
     $40 = ($ln$0|0)==(0|0);
     if ($40) {
      break L11;
     }
     _CRYPTO_free($ln$0);
     break L11;
    }
   } while(0);
   $37 = HEAP32[$1>>2]|0;
   $38 = $37 | 13;
   $39 = ((($5)) + 20|0);
   HEAP32[$39>>2] = $38;
   $$0 = $5;
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 15) {
  _ERR_put_error(8,101,65,86011,115);
 }
 if (!($10)) {
  _CRYPTO_free($9);
 }
 _CRYPTO_free($5);
 $$0 = 0;
 return ($$0|0);
}
function _OBJ_find_sigid_algs($signid,$pdig_nid,$ppkey_nid) {
 $signid = $signid|0;
 $pdig_nid = $pdig_nid|0;
 $ppkey_nid = $ppkey_nid|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv$12$in = 0, $tmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 HEAP32[$tmp>>2] = $signid;
 $0 = HEAP32[34772>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$pre$phiZ2D = $tmp;
  label = 5;
 } else {
  $2 = (_sk_find($0,$tmp)|0);
  $3 = ($2|0)>(-1);
  if ($3) {
   $4 = HEAP32[34772>>2]|0;
   $5 = (_sk_value($4,$2)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$pre$phiZ2D = $tmp;
    label = 5;
   } else {
    $rv$12$in = $5;
   }
  } else {
   $$pre$phiZ2D = $tmp;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $7 = (_OBJ_bsearch_($$pre$phiZ2D,34780,40,12,85)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $rv$12$in = $7;
  }
 }
 $9 = ($pdig_nid|0)==(0|0);
 if (!($9)) {
  $10 = ((($rv$12$in)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$pdig_nid>>2] = $11;
 }
 $12 = ($ppkey_nid|0)==(0|0);
 if ($12) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ((($rv$12$in)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$ppkey_nid>>2] = $14;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_find_sigid_by_algs($psignid,$dig_nid,$pkey_nid) {
 $psignid = $psignid|0;
 $dig_nid = $dig_nid|0;
 $pkey_nid = $pkey_nid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv$11 = 0, $t = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp + 4|0;
 $t = sp;
 HEAP32[$t>>2] = $tmp;
 $0 = ((($tmp)) + 4|0);
 HEAP32[$0>>2] = $dig_nid;
 $1 = ((($tmp)) + 8|0);
 HEAP32[$1>>2] = $pkey_nid;
 $2 = HEAP32[34776>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  label = 4;
 } else {
  $4 = (_sk_find($2,$tmp)|0);
  $5 = ($4|0)>(-1);
  if ($5) {
   $6 = HEAP32[34776>>2]|0;
   $7 = (_sk_value($6,$4)|0);
   HEAP32[$t>>2] = $7;
   $rv$11 = $t;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $8 = (_OBJ_bsearch_($t,35260,37,4,86)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $rv$11 = $8;
  }
 }
 $10 = ($psignid|0)==(0|0);
 if ($10) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$rv$11>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$psignid>>2] = $12;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sig_cmp_BSEARCH_CMP_FN($a_,$b_) {
 $a_ = $a_|0;
 $b_ = $b_|0;
 var $$idx$val = 0, $$idx1$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$a_>>2]|0;
 $$idx1$val = HEAP32[$b_>>2]|0;
 $0 = (($$idx$val) - ($$idx1$val))|0;
 return ($0|0);
}
function _sigx_cmp_BSEARCH_CMP_FN($a_,$b_) {
 $a_ = $a_|0;
 $b_ = $b_|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a_>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$b_>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==($5|0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($3)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) - ($11))|0;
  $$0$i = $12;
  return ($$0$i|0);
 } else {
  $7 = (($2) - ($5))|0;
  $$0$i = $7;
  return ($$0$i|0);
 }
 return (0)|0;
}
function _BUF_memdup($data,$siz) {
 $data = $data|0;
 $siz = $siz|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data|0)==(0|0);
 $1 = ($siz>>>0)>(2147483646);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_CRYPTO_malloc($siz,86021,111)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(7,103,65,86021,113);
  $$0 = 0;
  return ($$0|0);
 } else {
  _memcpy(($2|0),($data|0),($siz|0))|0;
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _BUF_strlcpy($dst,$src,$size) {
 $dst = $dst|0;
 $src = $src|0;
 $size = $size|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0113 = 0, $$014 = 0, $$016 = 0, $$017 = 0, $$02$lcssa = 0, $$0212 = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$0$lcssa = 0, $l$010 = 0, $l$011 = 0, $l$015 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size>>>0)>(1);
 L1: do {
  if ($0) {
   $$0113 = $src;$$014 = $size;$$0212 = $dst;$l$015 = 0;
   while(1) {
    $1 = HEAP8[$$0113>>0]|0;
    $2 = ($1<<24>>24)==(0);
    if ($2) {
     $$016 = $$0113;$$024 = $$0212;$l$010 = $l$015;
     label = 5;
     break L1;
    }
    $3 = ((($$0113)) + 1|0);
    $4 = ((($$0212)) + 1|0);
    HEAP8[$$0212>>0] = $1;
    $5 = (($l$015) + 1)|0;
    $6 = (($$014) + -1)|0;
    $7 = ($6>>>0)>(1);
    if ($7) {
     $$0113 = $3;$$014 = $6;$$0212 = $4;$l$015 = $5;
    } else {
     $$0$lcssa = $6;$$01$lcssa = $3;$$02$lcssa = $4;$l$0$lcssa = $5;
     label = 4;
     break;
    }
   }
  } else {
   $$0$lcssa = $size;$$01$lcssa = $src;$$02$lcssa = $dst;$l$0$lcssa = 0;
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  $8 = ($$0$lcssa|0)==(0);
  if ($8) {
   $$017 = $$01$lcssa;$l$011 = $l$0$lcssa;
  } else {
   $$016 = $$01$lcssa;$$024 = $$02$lcssa;$l$010 = $l$0$lcssa;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  HEAP8[$$024>>0] = 0;
  $$017 = $$016;$l$011 = $l$010;
 }
 $9 = (_strlen($$017)|0);
 $10 = (($9) + ($l$011))|0;
 return ($10|0);
}
function _BUF_strlcat($dst,$src,$size) {
 $dst = $dst|0;
 $src = $src|0;
 $size = $size|0;
 var $$0113 = 0, $$0113$i = 0, $$0113$lcssa = 0, $$014 = 0, $$014$i = 0, $$014$lcssa = 0, $$016$i = 0, $$017$i = 0, $$0212$i = 0, $$024$i = 0, $$lcssa = 0, $$lcssa60 = 0, $$lcssa61 = 0, $$lcssa62 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$010$i = 0, $l$011$i = 0, $l$012 = 0, $l$015 = 0, $l$015$i = 0, $l$015$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 L1: do {
  if ($0) {
   $$017$i = $src;$l$011$i = 0;$l$012 = 0;
  } else {
   $$0113 = $dst;$$014 = $size;$l$015 = 0;
   while(1) {
    $1 = HEAP8[$$0113>>0]|0;
    $2 = ($1<<24>>24)==(0);
    if ($2) {
     $$0113$lcssa = $$0113;$$014$lcssa = $$014;$l$015$lcssa = $l$015;
     break;
    }
    $3 = (($l$015) + 1)|0;
    $4 = (($$014) + -1)|0;
    $5 = ((($$0113)) + 1|0);
    $6 = ($4|0)==(0);
    if ($6) {
     $$017$i = $src;$l$011$i = 0;$l$012 = $3;
     break L1;
    } else {
     $$0113 = $5;$$014 = $4;$l$015 = $3;
    }
   }
   $7 = ($$014$lcssa>>>0)>(1);
   L6: do {
    if ($7) {
     $$0113$i = $src;$$014$i = $$014$lcssa;$$0212$i = $$0113$lcssa;$l$015$i = 0;
     while(1) {
      $8 = HEAP8[$$0113$i>>0]|0;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$016$i = $$0113$i;$$024$i = $$0212$i;$l$010$i = $l$015$i;
       break L6;
      }
      $10 = ((($$0113$i)) + 1|0);
      $11 = ((($$0212$i)) + 1|0);
      HEAP8[$$0212$i>>0] = $8;
      $12 = (($l$015$i) + 1)|0;
      $13 = (($$014$i) + -1)|0;
      $14 = ($13>>>0)>(1);
      if ($14) {
       $$0113$i = $10;$$014$i = $13;$$0212$i = $11;$l$015$i = $12;
      } else {
       $$lcssa = $10;$$lcssa60 = $11;$$lcssa61 = $12;$$lcssa62 = $13;
       break;
      }
     }
     $15 = ($$lcssa62|0)==(0);
     if ($15) {
      $$017$i = $$lcssa;$l$011$i = $$lcssa61;$l$012 = $l$015$lcssa;
      break L1;
     } else {
      $$016$i = $$lcssa;$$024$i = $$lcssa60;$l$010$i = $$lcssa61;
     }
    } else {
     $$016$i = $src;$$024$i = $$0113$lcssa;$l$010$i = 0;
    }
   } while(0);
   HEAP8[$$024$i>>0] = 0;
   $$017$i = $$016$i;$l$011$i = $l$010$i;$l$012 = $l$015$lcssa;
  }
 } while(0);
 $16 = (_strlen($$017$i)|0);
 $17 = (($l$011$i) + ($l$012))|0;
 $18 = (($17) + ($16))|0;
 return ($18|0);
}
function _BUF_MEM_grow_clean($str,$len) {
 $str = $str|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$str>>2]|0;
 $1 = ($0>>>0)<($len>>>0);
 if (!($1)) {
  $2 = ((($str)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($len)|0);
  $5 = (($0) - ($len))|0;
  _memset(($4|0),0,($5|0))|0;
  HEAP32[$str>>2] = $len;
  $$0 = $len;
  return ($$0|0);
 }
 $6 = ((($str)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)<($len>>>0);
 if (!($8)) {
  $9 = ((($str)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($0)|0);
  $12 = (($len) - ($0))|0;
  _memset(($11|0),0,($12|0))|0;
  HEAP32[$str>>2] = $len;
  $$0 = $len;
  return ($$0|0);
 }
 $13 = ($len>>>0)>(1610612732);
 if ($13) {
  _ERR_put_error(7,105,65,86031,150);
  $$0 = 0;
  return ($$0|0);
 }
 $14 = (($len) + 3)|0;
 $15 = (($14>>>0) / 3)&-1;
 $16 = $15 << 2;
 $17 = ((($str)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (_CRYPTO_malloc($16,86031,155)|0);
  $ret$0 = $20;
 } else {
  $21 = (_CRYPTO_realloc_clean($18,$7,$16,86031,157)|0);
  $ret$0 = $21;
 }
 $22 = ($ret$0|0)==(0|0);
 if ($22) {
  _ERR_put_error(7,105,65,86031,159);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$17>>2] = $ret$0;
  HEAP32[$6>>2] = $16;
  $23 = HEAP32[$str>>2]|0;
  $24 = (($ret$0) + ($23)|0);
  $25 = (($len) - ($23))|0;
  _memset(($24|0),0,($25|0))|0;
  HEAP32[$str>>2] = $len;
  $$0 = $len;
  return ($$0|0);
 }
 return (0)|0;
}
function _engine_unlocked_init($e) {
 $e = $e|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $to_return$01 = 0, $to_return$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $3 = ((($e)) + 56|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $12 = 0;$to_return$01 = 1;
   } else {
    $6 = (FUNCTION_TABLE_ii[$4 & 127]($e)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     $to_return$02 = 0;
     return ($to_return$02|0);
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $12 = $$pre;$to_return$01 = $6;
     break;
    }
   }
  } else {
   $12 = $1;$to_return$01 = 1;
  }
 } while(0);
 $8 = ((($e)) + 88|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = (($12) + 1)|0;
 HEAP32[$0>>2] = $11;
 $to_return$02 = $to_return$01;
 return ($to_return$02|0);
}
function _engine_unlocked_finish($e,$unlock_for_handlers) {
 $e = $e|0;
 $unlock_for_handlers = $unlock_for_handlers|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $to_return$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($e)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $to_return$0 = 1;
  } else {
   $7 = ($unlock_for_handlers|0)==(0);
   if ($7) {
    $8 = (FUNCTION_TABLE_ii[$5 & 127]($e)|0);
    $12 = $8;
   } else {
    _CRYPTO_lock(10,30,86040,105);
    $9 = HEAP32[$4>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($e)|0);
    _CRYPTO_lock(9,30,86040,108);
    $12 = $10;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $to_return$0 = $12;
   }
  }
 } else {
  $to_return$0 = 1;
 }
 $13 = (_engine_free_util($e,0)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = $to_return$0;
  return ($$0|0);
 }
 _ERR_put_error(38,191,106,86040,120);
 $$0 = 0;
 return ($$0|0);
}
function _ENGINE_init($e) {
 $e = $e|0;
 var $$0 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $to_return$01$i = 0, $to_return$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($e|0)==(0|0);
 if ($0) {
  _ERR_put_error(38,119,67,86040,131);
  $$0 = 0;
  return ($$0|0);
 }
 _CRYPTO_lock(9,30,86040,134);
 $1 = ((($e)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($e)) + 56|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $13 = 0;$to_return$01$i = 1;
   label = 7;
  } else {
   $7 = (FUNCTION_TABLE_ii[$5 & 127]($e)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $to_return$02$i = 0;
   } else {
    $$pre$i = HEAP32[$1>>2]|0;
    $13 = $$pre$i;$to_return$01$i = $7;
    label = 7;
   }
  }
 } else {
  $13 = $2;$to_return$01$i = 1;
  label = 7;
 }
 if ((label|0) == 7) {
  $9 = ((($e)) + 88|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($13) + 1)|0;
  HEAP32[$1>>2] = $12;
  $to_return$02$i = $to_return$01$i;
 }
 _CRYPTO_lock(10,30,86040,136);
 $$0 = $to_return$02$i;
 return ($$0|0);
}
function _ENGINE_finish($e) {
 $e = $e|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $to_return$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($e|0)==(0|0);
 if ($0) {
  _ERR_put_error(38,107,67,86040,146);
  $$0 = 0;
  return ($$0|0);
 }
 _CRYPTO_lock(9,30,86040,149);
 $1 = ((($e)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($e)) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $to_return$0$i = 1;
   label = 6;
  } else {
   _CRYPTO_lock(10,30,86040,105);
   $8 = HEAP32[$5>>2]|0;
   $9 = (FUNCTION_TABLE_ii[$8 & 127]($e)|0);
   _CRYPTO_lock(9,30,86040,108);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $to_return$0$i = $9;
    label = 6;
   }
  }
 } else {
  $to_return$0$i = 1;
  label = 6;
 }
 do {
  if ((label|0) == 6) {
   $11 = (_engine_free_util($e,0)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    _ERR_put_error(38,191,106,86040,120);
    break;
   }
   _CRYPTO_lock(10,30,86040,151);
   $$0 = $to_return$0$i;
   return ($$0|0);
  }
 } while(0);
 _CRYPTO_lock(10,30,86040,151);
 _ERR_put_error(38,107,106,86040,153);
 $$0 = 0;
 return ($$0|0);
}
function _engine_free_util($e,$locked) {
 $e = $e|0;
 $locked = $locked|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($e|0)==(0|0);
 if ($0) {
  _ERR_put_error(38,108,67,86051,112);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($locked|0)==(0);
 $2 = ((($e)) + 88|0);
 if ($1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = (($4) + -1)|0;
  HEAP32[$2>>2] = $5;
  $i$0 = $5;
 } else {
  $3 = (_CRYPTO_add_lock($2,-1,30,86051,116)|0);
  $i$0 = $3;
 }
 $6 = ($i$0|0)>(0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 _engine_pkey_meths_free($e);
 _engine_pkey_asn1_meths_free($e);
 $7 = ((($e)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (FUNCTION_TABLE_ii[$8 & 127]($e)|0);
 }
 $10 = ((($e)) + 96|0);
 _CRYPTO_free_ex_data(9,$e,$10);
 _CRYPTO_free($e);
 $$0 = 1;
 return ($$0|0);
}
function _ENGINE_free($e) {
 $e = $e|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_free_util($e,1)|0);
 return ($0|0);
}
function _engine_table_select($table,$nid) {
 $table = $table|0;
 $nid = $nid|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa29 = 0, $$pre = 0, $$pre$phi15Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$03 = 0, $ret$04 = 0, $tmplate = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmplate = sp;
 $0 = HEAP32[$table>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_ERR_set_mark()|0);
 _CRYPTO_lock(9,30,86061,259);
 $2 = HEAP32[$table>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $ret$04 = 0;
 } else {
  HEAP32[$tmplate>>2] = $nid;
  $4 = (_lh_retrieve($2,$tmplate)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $ret$04 = 0;
  } else {
   $6 = ((($4)) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    label = 7;
   } else {
    $9 = (_engine_unlocked_init($7)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     label = 7;
    } else {
     $11 = HEAP32[$6>>2]|0;
     $$pre = ((($4)) + 12|0);
     $$pre$phi15Z2D = $$pre;$ret$03 = $11;
    }
   }
   L10: do {
    if ((label|0) == 7) {
     $12 = ((($4)) + 12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0);
     if (!($14)) {
      $19 = HEAP32[$6>>2]|0;
      $$pre$phi15Z2D = $12;$ret$03 = $19;
      break;
     }
     $15 = ((($4)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (_sk_value($16,0)|0);
     $18 = ($17|0)==(0|0);
     if ($18) {
      $$pre$phi15Z2D = $12;$ret$03 = $17;
     } else {
      $21 = $17;$27 = $17;$32 = 1;
      while(1) {
       $20 = ((($21)) + 92|0);
       $22 = HEAP32[$20>>2]|0;
       $23 = ($22|0)>(0);
       if ($23) {
        label = 12;
       } else {
        $24 = HEAP32[35408>>2]|0;
        $25 = $24 & 1;
        $26 = ($25|0)==(0);
        if ($26) {
         label = 12;
        }
       }
       if ((label|0) == 12) {
        label = 0;
        $28 = (_engine_unlocked_init($27)|0);
        $29 = ($28|0)==(0);
        if (!($29)) {
         $$lcssa = $27;$$lcssa29 = $21;
         break;
        }
       }
       $30 = HEAP32[$15>>2]|0;
       $31 = (($32) + 1)|0;
       $33 = (_sk_value($30,$32)|0);
       $34 = ($33|0)==(0|0);
       if ($34) {
        $$pre$phi15Z2D = $12;$ret$03 = $33;
        break L10;
       } else {
        $21 = $33;$27 = $33;$32 = $31;
       }
      }
      $35 = HEAP32[$6>>2]|0;
      $36 = ($35|0)==($$lcssa|0);
      if ($36) {
       $$pre$phi15Z2D = $12;$ret$03 = $$lcssa;
      } else {
       $37 = (_engine_unlocked_init($$lcssa)|0);
       $38 = ($37|0)==(0);
       if ($38) {
        $$pre$phi15Z2D = $12;$ret$03 = $$lcssa;
       } else {
        $39 = HEAP32[$6>>2]|0;
        $40 = ($39|0)==(0|0);
        if (!($40)) {
         (_engine_unlocked_finish($39,0)|0);
        }
        HEAP32[$6>>2] = $$lcssa29;
        $$pre$phi15Z2D = $12;$ret$03 = $$lcssa;
       }
      }
     }
    }
   } while(0);
   HEAP32[$$pre$phi15Z2D>>2] = 1;
   $ret$04 = $ret$03;
  }
 }
 _CRYPTO_lock(10,30,86061,330);
 (_ERR_pop_to_mark()|0);
 $$0 = $ret$04;
 STACKTOP = sp;return ($$0|0);
}
function _engine_table_doall($table,$cb,$arg) {
 $table = $table|0;
 $cb = $cb|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $dall = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dall = sp;
 HEAP32[$dall>>2] = $cb;
 $0 = ((($dall)) + 4|0);
 HEAP32[$0>>2] = $arg;
 $1 = ($table|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _lh_doall_arg($table,20,$dall);
 STACKTOP = sp;return;
}
function _int_cb_LHASH_DOALL_ARG($arg1,$arg2) {
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx2 = 0, $$idx2$val = 0, $$idx3$val = 0, $$idx4 = 0, $$idx4$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$arg1>>2]|0;
 $$idx1 = ((($arg1)) + 4|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $$idx2 = ((($arg1)) + 8|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 $$idx3$val = HEAP32[$arg2>>2]|0;
 $$idx4 = ((($arg2)) + 4|0);
 $$idx4$val = HEAP32[$$idx4>>2]|0;
 FUNCTION_TABLE_viiii[$$idx3$val & 31]($$idx$val,$$idx1$val,$$idx2$val,$$idx4$val);
 return;
}
function _ENGINE_get_pkey_asn1_meth_engine($nid) {
 $nid = $nid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_table_select(35412,$nid)|0);
 return ($0|0);
}
function _ENGINE_get_pkey_asn1_meth($e,$nid) {
 $e = $e|0;
 $nid = $nid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ret = sp;
 $0 = ((($e)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (FUNCTION_TABLE_iiiii[$1 & 127]($e,$ret,0,$nid)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP32[$ret>>2]|0;
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(38,193,101,86073,133);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _engine_pkey_asn1_meths_free($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $pkm = 0, $pknids = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pkm = sp + 4|0;
 $pknids = sp;
 $0 = ((($e)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (FUNCTION_TABLE_iiiii[$1 & 127]($e,0,$pknids,0)|0);
 $4 = ($3|0)>(0);
 if ($4) {
  $i$01 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$pknids>>2]|0;
  $7 = (($6) + ($i$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiiii[$5 & 127]($e,$pkm,0,$8)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = HEAP32[$pkm>>2]|0;
   _EVP_PKEY_asn1_free($11);
  }
  $12 = (($i$01) + 1)|0;
  $exitcond = ($12|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $12;
  }
 }
 STACKTOP = sp;return;
}
function _ENGINE_pkey_asn1_find_str($pe,$str,$len) {
 $pe = $pe|0;
 $str = $str|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fstr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $fstr = sp;
 HEAP32[$fstr>>2] = 0;
 $0 = ((($fstr)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($fstr)) + 8|0);
 HEAP32[$1>>2] = $str;
 $2 = ((($fstr)) + 12|0);
 HEAP32[$2>>2] = $len;
 _CRYPTO_lock(9,30,86073,236);
 $3 = HEAP32[35412>>2]|0;
 _engine_table_doall($3,18,$fstr);
 $4 = HEAP32[$fstr>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = $4;
 if (!($5)) {
  $7 = ((($4)) + 88|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
 }
 HEAP32[$pe>>2] = $6;
 _CRYPTO_lock(10,30,86073,244);
 $10 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _look_str_cb($nid,$sk,$def,$arg) {
 $nid = $nid|0;
 $sk = $sk|0;
 $def = $def|0;
 $arg = $arg|0;
 var $$lcssa = 0, $$lcssa14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ameth = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ameth = sp;
 $0 = ((($arg)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (_sk_num($sk)|0);
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($arg)) + 12|0);
 $6 = ((($arg)) + 8|0);
 $i$01 = 0;
 while(1) {
  $7 = (_sk_value($sk,$i$01)|0);
  $8 = ((($7)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  (FUNCTION_TABLE_iiiii[$9 & 127]($7,$ameth,0,$nid)|0);
  $10 = HEAP32[$ameth>>2]|0;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strlen($12)|0);
  $14 = HEAP32[$5>>2]|0;
  $15 = ($13|0)==($14|0);
  if ($15) {
   $16 = HEAP32[$6>>2]|0;
   $17 = (_strncasecmp($12,$16,$13)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$lcssa = $7;$$lcssa14 = $10;
    break;
   }
  }
  $20 = (($i$01) + 1)|0;
  $21 = (_sk_num($sk)|0);
  $22 = ($20|0)<($21|0);
  if ($22) {
   $i$01 = $20;
  } else {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
 $19 = $$lcssa14;
 HEAP32[$arg>>2] = $$lcssa;
 HEAP32[$0>>2] = $19;
 STACKTOP = sp;return;
}
function _ENGINE_get_cipher_engine($nid) {
 $nid = $nid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_table_select(35416,$nid)|0);
 return ($0|0);
}
function _ENGINE_get_cipher($e,$nid) {
 $e = $e|0;
 $nid = $nid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ret = sp;
 $0 = ((($e)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (FUNCTION_TABLE_iiiii[$1 & 127]($e,$ret,0,$nid)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP32[$ret>>2]|0;
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(38,185,146,86085,126);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ENGINE_get_default_DH() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_table_select(35420,1)|0);
 return ($0|0);
}
function _ENGINE_get_DH($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _ENGINE_get_digest_engine($nid) {
 $nid = $nid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_table_select(35424,$nid)|0);
 return ($0|0);
}
function _ENGINE_get_digest($e,$nid) {
 $e = $e|0;
 $nid = $nid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ret = sp;
 $0 = ((($e)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (FUNCTION_TABLE_iiiii[$1 & 127]($e,$ret,0,$nid)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP32[$ret>>2]|0;
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(38,186,147,86097,126);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ENGINE_get_default_DSA() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_table_select(35428,1)|0);
 return ($0|0);
}
function _ENGINE_get_DSA($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _ENGINE_get_default_ECDH() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_table_select(35432,1)|0);
 return ($0|0);
}
function _ENGINE_get_ECDH($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _ENGINE_get_default_ECDSA() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_table_select(35436,1)|0);
 return ($0|0);
}
function _ENGINE_get_ECDSA($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _ENGINE_get_pkey_meth_engine($nid) {
 $nid = $nid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_table_select(35440,$nid)|0);
 return ($0|0);
}
function _ENGINE_get_pkey_meth($e,$nid) {
 $e = $e|0;
 $nid = $nid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ret = sp;
 $0 = ((($e)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (FUNCTION_TABLE_iiiii[$1 & 127]($e,$ret,0,$nid)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP32[$ret>>2]|0;
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(38,192,101,86109,128);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _engine_pkey_meths_free($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $pkm = 0, $pknids = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pkm = sp + 4|0;
 $pknids = sp;
 $0 = ((($e)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (FUNCTION_TABLE_iiiii[$1 & 127]($e,0,$pknids,0)|0);
 $4 = ($3|0)>(0);
 if ($4) {
  $i$01 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$pknids>>2]|0;
  $7 = (($6) + ($i$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiiii[$5 & 127]($e,$pkm,0,$8)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = HEAP32[$pkm>>2]|0;
   _EVP_PKEY_meth_free($11);
  }
  $12 = (($i$01) + 1)|0;
  $exitcond = ($12|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $12;
  }
 }
 STACKTOP = sp;return;
}
function _ENGINE_get_default_RSA() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_engine_table_select(35444,1)|0);
 return ($0|0);
}
function _ENGINE_get_RSA($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EVP_MD_CTX_init($ctx) {
 $ctx = $ctx|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$ctx>>2]=0|0;HEAP32[$ctx+4>>2]=0|0;HEAP32[$ctx+8>>2]=0|0;HEAP32[$ctx+12>>2]=0|0;HEAP32[$ctx+16>>2]=0|0;HEAP32[$ctx+20>>2]=0|0;
 return;
}
function _EVP_DigestInit_ex($ctx,$type,$impl) {
 $ctx = $ctx|0;
 $type = $type|0;
 $impl = $impl|0;
 var $$0 = 0, $$02 = 0, $$035 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _EVP_MD_CTX_clear_flags($ctx,2);
 $0 = ((($ctx)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 5;
 } else {
  $3 = HEAP32[$ctx>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 5;
  } else {
   $5 = ($type|0)==(0|0);
   if (!($5)) {
    $6 = HEAP32[$type>>2]|0;
    $7 = HEAP32[$3>>2]|0;
    $8 = ($6|0)==($7|0);
    if (!($8)) {
     label = 7;
    }
   }
  }
 }
 do {
  if ((label|0) == 5) {
   $9 = ($type|0)==(0|0);
   if (!($9)) {
    if ($2) {
     label = 8;
     break;
    } else {
     label = 7;
     break;
    }
   }
   $19 = HEAP32[$ctx>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    _ERR_put_error(6,128,139,86121,208);
    $$0 = 0;
    return ($$0|0);
   } else {
    $$02 = $19;
    label = 19;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  (_ENGINE_finish($1)|0);
  label = 8;
 }
 L14: do {
  if ((label|0) == 8) {
   $10 = ($impl|0)==(0|0);
   do {
    if ($10) {
     $13 = HEAP32[$type>>2]|0;
     $14 = (_ENGINE_get_digest_engine($13)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      HEAP32[$0>>2] = 0;
      $$02 = $type;
      label = 19;
      break L14;
     } else {
      $$035 = $14;$$pre$phiZ2D = $type;
     }
    } else {
     $11 = (_ENGINE_init($impl)|0);
     $12 = ($11|0)==(0);
     if (!($12)) {
      $$035 = $impl;$$pre$phiZ2D = $type;
      break;
     }
     _ERR_put_error(6,128,134,86121,182);
     $$0 = 0;
     return ($$0|0);
    }
   } while(0);
   $16 = HEAP32[$$pre$phiZ2D>>2]|0;
   $17 = (_ENGINE_get_digest($$035,$16)|0);
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    HEAP32[$0>>2] = $$035;
    $$02 = $17;
    label = 19;
    break;
   }
   _ERR_put_error(6,128,134,86121,193);
   (_ENGINE_finish($$035)|0);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 19) {
  $21 = HEAP32[$ctx>>2]|0;
  $22 = ($21|0)==($$02|0);
  if (!($22)) {
   $23 = ($21|0)==(0|0);
   if (!($23)) {
    $24 = ((($21)) + 68|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0);
    if (!($26)) {
     $27 = ((($ctx)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     _CRYPTO_free($28);
     HEAP32[$27>>2] = 0;
    }
   }
   HEAP32[$ctx>>2] = $$02;
   $29 = ((($ctx)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 & 256;
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = ((($$02)) + 68|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0);
    if (!($35)) {
     $36 = ((($$02)) + 20|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($ctx)) + 20|0);
     HEAP32[$38>>2] = $37;
     $39 = (_CRYPTO_malloc($34,86121,222)|0);
     $40 = ((($ctx)) + 12|0);
     HEAP32[$40>>2] = $39;
     $41 = ($39|0)==(0|0);
     if ($41) {
      _ERR_put_error(6,128,65,86121,224);
      $$0 = 0;
      return ($$0|0);
     }
    }
   }
  }
 }
 $42 = ((($ctx)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $45 = (_EVP_PKEY_CTX_ctrl($43,-1,248,7,0,$ctx)|0);
  $46 = ($45|0)<(1);
  $47 = ($45|0)!=(-2);
  $or$cond = $46 & $47;
  if ($or$cond) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $48 = ((($ctx)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 & 256;
 $51 = ($50|0)==(0);
 if (!($51)) {
  $$0 = 1;
  return ($$0|0);
 }
 $52 = HEAP32[$ctx>>2]|0;
 $53 = ((($52)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (FUNCTION_TABLE_ii[$54 & 127]($ctx)|0);
 $$0 = $55;
 return ($$0|0);
}
function _EVP_DigestUpdate($ctx,$data,$count) {
 $ctx = $ctx|0;
 $data = $data|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiii[$1 & 63]($ctx,$data,$count)|0);
 return ($2|0);
}
function _EVP_DigestFinal($ctx,$md,$size) {
 $ctx = $ctx|0;
 $md = $md|0;
 $size = $size|0;
 var $$pre1$i = 0, $$pre2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(65);
 if (!($3)) {
  _OpenSSLDie(86121,279,86130);
  // unreachable;
 }
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 127]($ctx,$md)|0);
 $7 = ($size|0)==(0|0);
 $$pre1$i = HEAP32[$ctx>>2]|0;
 if (!($7)) {
  $8 = ((($$pre1$i)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$size>>2] = $9;
 }
 $10 = ((($$pre1$i)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $16 = $$pre1$i;
 } else {
  (FUNCTION_TABLE_ii[$11 & 127]($ctx)|0);
  _EVP_MD_CTX_set_flags($ctx,2);
  $$pre2$i = HEAP32[$ctx>>2]|0;
  $16 = $$pre2$i;
 }
 $13 = ((($ctx)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($16)) + 68|0);
 $17 = HEAP32[$15>>2]|0;
 _memset(($14|0),0,($17|0))|0;
 (_EVP_MD_CTX_cleanup($ctx)|0);
 return ($6|0);
}
function _EVP_DigestFinal_ex($ctx,$md,$size) {
 $ctx = $ctx|0;
 $md = $md|0;
 $size = $size|0;
 var $$pre1 = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(65);
 if (!($3)) {
  _OpenSSLDie(86121,279,86130);
  // unreachable;
 }
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 127]($ctx,$md)|0);
 $7 = ($size|0)==(0|0);
 $$pre1 = HEAP32[$ctx>>2]|0;
 if (!($7)) {
  $8 = ((($$pre1)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$size>>2] = $9;
 }
 $10 = ((($$pre1)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $16 = $$pre1;
 } else {
  (FUNCTION_TABLE_ii[$11 & 127]($ctx)|0);
  _EVP_MD_CTX_set_flags($ctx,2);
  $$pre2 = HEAP32[$ctx>>2]|0;
  $16 = $$pre2;
 }
 $13 = ((($ctx)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($16)) + 68|0);
 $17 = HEAP32[$15>>2]|0;
 _memset(($14|0),0,($17|0))|0;
 return ($6|0);
}
function _EVP_MD_CTX_cleanup($ctx) {
 $ctx = $ctx|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($0)) + 32|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (_EVP_MD_CTX_test_flags($ctx,2)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = HEAP32[$ctx>>2]|0;
    $8 = ((($7)) + 32|0);
    $9 = HEAP32[$8>>2]|0;
    (FUNCTION_TABLE_ii[$9 & 127]($ctx)|0);
   }
  }
  $$pr = HEAP32[$ctx>>2]|0;
  $10 = ($$pr|0)==(0|0);
  if (!($10)) {
   $11 = ((($$pr)) + 68|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = ((($ctx)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     $17 = (_EVP_MD_CTX_test_flags($ctx,4)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = HEAP32[$14>>2]|0;
      $20 = HEAP32[$ctx>>2]|0;
      $21 = ((($20)) + 68|0);
      $22 = HEAP32[$21>>2]|0;
      _OPENSSL_cleanse($19,$22);
      $23 = HEAP32[$14>>2]|0;
      _CRYPTO_free($23);
     }
    }
   }
  }
 }
 $24 = ((($ctx)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _EVP_PKEY_CTX_free($25);
 }
 $27 = ((($ctx)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  ;HEAP32[$ctx>>2]=0|0;HEAP32[$ctx+4>>2]=0|0;HEAP32[$ctx+8>>2]=0|0;HEAP32[$ctx+12>>2]=0|0;HEAP32[$ctx+16>>2]=0|0;HEAP32[$ctx+20>>2]=0|0;
  return 1;
 }
 (_ENGINE_finish($28)|0);
 ;HEAP32[$ctx>>2]=0|0;HEAP32[$ctx+4>>2]=0|0;HEAP32[$ctx+8>>2]=0|0;HEAP32[$ctx+12>>2]=0|0;HEAP32[$ctx+16>>2]=0|0;HEAP32[$ctx+20>>2]=0|0;
 return 1;
}
function _EVP_MD_CTX_copy($out,$in) {
 $out = $out|0;
 $in = $in|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$out>>2]=0|0;HEAP32[$out+4>>2]=0|0;HEAP32[$out+8>>2]=0|0;HEAP32[$out+12>>2]=0|0;HEAP32[$out+16>>2]=0|0;HEAP32[$out+20>>2]=0|0;
 $0 = (_EVP_MD_CTX_copy_ex($out,$in)|0);
 return ($0|0);
}
function _EVP_MD_CTX_copy_ex($out,$in) {
 $out = $out|0;
 $in = $in|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp_buf$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($in|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$in>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ((($in)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   do {
    if ($5) {
     $10 = $1;
    } else {
     $6 = (_ENGINE_init($4)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $$pre = HEAP32[$in>>2]|0;
      $10 = $$pre;
      break;
     }
     _ERR_put_error(6,110,38,86121,308);
     $$0 = 0;
     return ($$0|0);
    }
   } while(0);
   $8 = HEAP32[$out>>2]|0;
   $9 = ($8|0)==($10|0);
   if ($9) {
    $11 = ((($out)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    _EVP_MD_CTX_set_flags($out,4);
    $tmp_buf$0 = $12;
   } else {
    $tmp_buf$0 = 0;
   }
   (_EVP_MD_CTX_cleanup($out)|0);
   ;HEAP32[$out>>2]=HEAP32[$in>>2]|0;HEAP32[$out+4>>2]=HEAP32[$in+4>>2]|0;HEAP32[$out+8>>2]=HEAP32[$in+8>>2]|0;HEAP32[$out+12>>2]=HEAP32[$in+12>>2]|0;HEAP32[$out+16>>2]=HEAP32[$in+16>>2]|0;HEAP32[$out+20>>2]=HEAP32[$in+20>>2]|0;
   $13 = ((($in)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $16 = HEAP32[$out>>2]|0;
    $17 = ((($16)) + 68|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    if (!($19)) {
     $20 = ($tmp_buf$0|0)==(0|0);
     do {
      if ($20) {
       $22 = (_CRYPTO_malloc($18,86121,325)|0);
       $23 = ((($out)) + 12|0);
       HEAP32[$23>>2] = $22;
       $24 = ($22|0)==(0|0);
       if (!($24)) {
        $$pre2 = HEAP32[$out>>2]|0;
        $$phi$trans$insert = ((($$pre2)) + 68|0);
        $$pre3 = HEAP32[$$phi$trans$insert>>2]|0;
        $26 = $22;$27 = $$pre3;
        break;
       }
       _ERR_put_error(6,110,65,86121,327);
       $$0 = 0;
       return ($$0|0);
      } else {
       $21 = ((($out)) + 12|0);
       HEAP32[$21>>2] = $tmp_buf$0;
       $26 = $tmp_buf$0;$27 = $18;
      }
     } while(0);
     $25 = HEAP32[$13>>2]|0;
     _memcpy(($26|0),($25|0),($27|0))|0;
    }
   }
   $28 = ((($in)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($out)) + 20|0);
   HEAP32[$30>>2] = $29;
   $31 = ((($in)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    $34 = (_EVP_PKEY_CTX_dup($32)|0);
    $35 = ((($out)) + 16|0);
    HEAP32[$35>>2] = $34;
    $36 = ($34|0)==(0|0);
    if ($36) {
     (_EVP_MD_CTX_cleanup($out)|0);
     $$0 = 0;
     return ($$0|0);
    }
   }
   $37 = HEAP32[$out>>2]|0;
   $38 = ((($37)) + 28|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    $$0 = 1;
    return ($$0|0);
   }
   $41 = (FUNCTION_TABLE_iii[$39 & 127]($out,$in)|0);
   $$0 = $41;
   return ($$0|0);
  }
 }
 _ERR_put_error(6,110,111,86121,302);
 $$0 = 0;
 return ($$0|0);
}
function _EVP_Digest($data,$count,$md,$size,$type,$impl) {
 $data = $data|0;
 $count = $count|0;
 $md = $md|0;
 $size = $size|0;
 $type = $type|0;
 $impl = $impl|0;
 var $$pre1$i = 0, $$pre2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ctx = sp;
 ;HEAP32[$ctx>>2]=0|0;HEAP32[$ctx+4>>2]=0|0;HEAP32[$ctx+8>>2]=0|0;HEAP32[$ctx+12>>2]=0|0;HEAP32[$ctx+16>>2]=0|0;HEAP32[$ctx+20>>2]=0|0;
 _EVP_MD_CTX_set_flags($ctx,1);
 $0 = (_EVP_DigestInit_ex($ctx,$type,$impl)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $26 = 0;
  $25 = $26&1;
  (_EVP_MD_CTX_cleanup($ctx)|0);
  STACKTOP = sp;return ($25|0);
 }
 $2 = ((($ctx)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 63]($ctx,$data,$count)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $26 = 0;
  $25 = $26&1;
  (_EVP_MD_CTX_cleanup($ctx)|0);
  STACKTOP = sp;return ($25|0);
 }
 $6 = HEAP32[$ctx>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(65);
 if (!($9)) {
  _OpenSSLDie(86121,279,86130);
  // unreachable;
 }
 $10 = ((($6)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iii[$11 & 127]($ctx,$md)|0);
 $13 = ($size|0)==(0|0);
 $$pre1$i = HEAP32[$ctx>>2]|0;
 if (!($13)) {
  $14 = ((($$pre1$i)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$size>>2] = $15;
 }
 $16 = ((($$pre1$i)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $22 = $$pre1$i;
 } else {
  (FUNCTION_TABLE_ii[$17 & 127]($ctx)|0);
  _EVP_MD_CTX_set_flags($ctx,2);
  $$pre2$i = HEAP32[$ctx>>2]|0;
  $22 = $$pre2$i;
 }
 $19 = ((($ctx)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($22)) + 68|0);
 $23 = HEAP32[$21>>2]|0;
 _memset(($20|0),0,($23|0))|0;
 $24 = ($12|0)!=(0);
 $26 = $24;
 $25 = $26&1;
 (_EVP_MD_CTX_cleanup($ctx)|0);
 STACKTOP = sp;return ($25|0);
}
function _EVP_CIPHER_CTX_init($ctx) {
 $ctx = $ctx|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($ctx|0),0,140)|0;
 return;
}
function _EVP_CipherInit_ex($ctx,$cipher,$impl,$key,$iv,$enc) {
 $ctx = $ctx|0;
 $cipher = $cipher|0;
 $impl = $impl|0;
 $key = $key|0;
 $iv = $iv|0;
 $enc = $enc|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$037 = 0, $$1 = 0, $$pre = 0, $$pre$phi19Z2D = 0, $$pre10 = 0, $$pre14 = 0, $$pre16 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 switch ($enc|0) {
 case -1:  {
  $0 = ((($ctx)) + 8|0);
  $1 = HEAP32[$0>>2]|0;
  $$1 = $1;
  break;
 }
 case 0:  {
  $$02 = 0;
  label = 4;
  break;
 }
 default: {
  $$02 = 1;
  label = 4;
 }
 }
 if ((label|0) == 4) {
  $2 = ((($ctx)) + 8|0);
  HEAP32[$2>>2] = $$02;
  $$1 = $$02;
 }
 $3 = ((($ctx)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $$pre = HEAP32[$ctx>>2]|0;
 if ($5) {
  $13 = $$pre;
  label = 9;
 } else {
  $6 = ($$pre|0)==(0|0);
  if ($6) {
   $13 = 0;
   label = 9;
  } else {
   $7 = ($cipher|0)==(0|0);
   if (!($7)) {
    $8 = HEAP32[$cipher>>2]|0;
    $9 = HEAP32[$$pre>>2]|0;
    $10 = ($8|0)==($9|0);
    if (!($10)) {
     $17 = $$pre;
     label = 11;
    }
   }
  }
 }
 do {
  if ((label|0) == 9) {
   $11 = ($cipher|0)==(0|0);
   $12 = ($13|0)!=(0|0);
   if (!($11)) {
    if ($12) {
     $17 = $13;
     label = 11;
     break;
    } else {
     label = 20;
     break;
    }
   }
   if (!($12)) {
    _ERR_put_error(6,123,131,86170,201);
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $14 = ((($ctx)) + 92|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($17)) + 28|0);
  $18 = HEAP32[$16>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   label = 13;
  } else {
   $20 = (FUNCTION_TABLE_ii[$18 & 127]($ctx)|0);
   $21 = ($20|0)==(0);
   if (!($21)) {
    label = 13;
   }
  }
  if ((label|0) == 13) {
   $22 = ((($ctx)) + 96|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    $25 = HEAP32[$ctx>>2]|0;
    $26 = ((($25)) + 32|0);
    $27 = HEAP32[$26>>2]|0;
    _OPENSSL_cleanse($23,$27);
    $$pre8 = HEAP32[$22>>2]|0;
    $28 = ($$pre8|0)==(0|0);
    if (!($28)) {
     _CRYPTO_free($$pre8);
    }
   }
   $29 = HEAP32[$3>>2]|0;
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    (_ENGINE_finish($29)|0);
   }
   _memset(($ctx|0),0,140)|0;
  }
  $31 = ((($ctx)) + 8|0);
  HEAP32[$31>>2] = $$1;
  HEAP32[$14>>2] = $15;
  label = 20;
 }
 L32: do {
  if ((label|0) == 20) {
   $32 = ($impl|0)==(0|0);
   do {
    if ($32) {
     $35 = HEAP32[$cipher>>2]|0;
     $36 = (_ENGINE_get_cipher_engine($35)|0);
     $37 = ($36|0)==(0|0);
     if ($37) {
      $$01 = $cipher;$storemerge = 0;
     } else {
      $$037 = $36;$$pre$phi19Z2D = $cipher;
      label = 25;
     }
    } else {
     $33 = (_ENGINE_init($impl)|0);
     $34 = ($33|0)==(0);
     if (!($34)) {
      $$037 = $impl;$$pre$phi19Z2D = $cipher;
      label = 25;
      break;
     }
     _ERR_put_error(6,123,134,86170,142);
     $$0 = 0;
     return ($$0|0);
    }
   } while(0);
   if ((label|0) == 25) {
    $38 = HEAP32[$$pre$phi19Z2D>>2]|0;
    $39 = (_ENGINE_get_cipher($$037,$38)|0);
    $40 = ($39|0)==(0|0);
    if ($40) {
     _ERR_put_error(6,123,134,86170,157);
     $$0 = 0;
     return ($$0|0);
    } else {
     $$01 = $39;$storemerge = $$037;
    }
   }
   HEAP32[$3>>2] = $storemerge;
   HEAP32[$ctx>>2] = $$01;
   $41 = ((($$01)) + 32|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0);
   do {
    if ($43) {
     $47 = ((($ctx)) + 96|0);
     HEAP32[$47>>2] = 0;
     $55 = $$01;
    } else {
     $44 = (_CRYPTO_malloc($42,86170,183)|0);
     $45 = ((($ctx)) + 96|0);
     HEAP32[$45>>2] = $44;
     $46 = ($44|0)==(0|0);
     if (!($46)) {
      $$pre10 = HEAP32[$ctx>>2]|0;
      $55 = $$pre10;
      break;
     }
     _ERR_put_error(6,123,65,86170,185);
     $$0 = 0;
     return ($$0|0);
    }
   } while(0);
   $48 = ((($$01)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($ctx)) + 88|0);
   HEAP32[$50>>2] = $49;
   $51 = ((($ctx)) + 92|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 & 1;
   HEAP32[$51>>2] = $53;
   $54 = ((($55)) + 16|0);
   $56 = HEAP32[$54>>2]|0;
   $57 = $56 & 64;
   $58 = ($57|0)==(0);
   if (!($58)) {
    $59 = ($55|0)==(0|0);
    L55: do {
     if ($59) {
      _ERR_put_error(6,124,131,86170,610);
     } else {
      $60 = ((($55)) + 44|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       _ERR_put_error(6,124,132,86170,615);
       break;
      }
      $63 = (FUNCTION_TABLE_iiiii[$61 & 127]($ctx,0,0,0)|0);
      switch ($63|0) {
      case 0:  {
       break L55;
       break;
      }
      case -1:  {
       break;
      }
      default: {
       break L32;
      }
      }
      _ERR_put_error(6,124,133,86170,622);
     }
    } while(0);
    _ERR_put_error(6,123,134,86170,196);
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 $64 = HEAP32[$ctx>>2]|0;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 switch ($66|0) {
 case 16: case 8: case 1:  {
  break;
 }
 default: {
  _OpenSSLDie(86170,214,86180);
  // unreachable;
 }
 }
 $67 = ((($ctx)) + 92|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 & 1;
 $70 = ($69|0)==(0);
 if ($70) {
  $71 = (_EVP_CIPHER_CTX_flags($ctx)|0);
  $72 = $71 & 983047;
  $73 = ($72|0)==(65538);
  if ($73) {
   _ERR_put_error(6,123,170,86170,218);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $74 = (_EVP_CIPHER_CTX_flags($ctx)|0);
 $75 = $74 & 16;
 $76 = ($75|0)==(0);
 L73: do {
  if ($76) {
   $77 = (_EVP_CIPHER_CTX_flags($ctx)|0);
   $78 = $77 & 983047;
   switch ($78|0) {
   case 1: case 0:  {
    break L73;
    break;
   }
   case 4: case 3:  {
    $79 = ((($ctx)) + 80|0);
    HEAP32[$79>>2] = 0;
    break;
   }
   case 2:  {
    break;
   }
   case 5:  {
    $86 = ((($ctx)) + 80|0);
    HEAP32[$86>>2] = 0;
    $87 = ($iv|0)==(0|0);
    if ($87) {
     break L73;
    }
    $88 = ((($ctx)) + 32|0);
    $89 = (_EVP_CIPHER_CTX_iv_length($ctx)|0);
    _memcpy(($88|0),($iv|0),($89|0))|0;
    break L73;
    break;
   }
   default: {
    $$0 = 0;
    return ($$0|0);
   }
   }
   $80 = (_EVP_CIPHER_CTX_iv_length($ctx)|0);
   $81 = ($80|0)<(17);
   if (!($81)) {
    _OpenSSLDie(86170,238,86274);
    // unreachable;
   }
   $82 = ($iv|0)==(0|0);
   $$pre16 = ((($ctx)) + 16|0);
   if (!($82)) {
    $83 = (_EVP_CIPHER_CTX_iv_length($ctx)|0);
    _memcpy(($$pre16|0),($iv|0),($83|0))|0;
   }
   $84 = ((($ctx)) + 32|0);
   $85 = (_EVP_CIPHER_CTX_iv_length($ctx)|0);
   _memcpy(($84|0),($$pre16|0),($85|0))|0;
  }
 } while(0);
 $90 = ($key|0)==(0|0);
 $91 = HEAP32[$ctx>>2]|0;
 if ($90) {
  $92 = ((($91)) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93 & 32;
  $95 = ($94|0)==(0);
  if ($95) {
   $103 = $91;
  } else {
   label = 59;
  }
 } else {
  label = 59;
 }
 do {
  if ((label|0) == 59) {
   $96 = ((($91)) + 20|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_iiiii[$97 & 127]($ctx,$key,$iv,$$1)|0);
   $99 = ($98|0)==(0);
   if ($99) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$pre14 = HEAP32[$ctx>>2]|0;
    $103 = $$pre14;
    break;
   }
  }
 } while(0);
 $100 = ((($ctx)) + 12|0);
 HEAP32[$100>>2] = 0;
 $101 = ((($ctx)) + 100|0);
 HEAP32[$101>>2] = 0;
 $102 = ((($103)) + 4|0);
 $104 = HEAP32[$102>>2]|0;
 $105 = (($104) + -1)|0;
 $106 = ((($ctx)) + 104|0);
 HEAP32[$106>>2] = $105;
 $$0 = 1;
 return ($$0|0);
}
function _EVP_CIPHER_CTX_cleanup($c) {
 $c = $c|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$pre = ((($c)) + 96|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = ((($0)) + 28|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (FUNCTION_TABLE_ii[$3 & 127]($c)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $7 = ((($c)) + 96|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$pre$phiZ2D = $7;
  } else {
   $10 = HEAP32[$c>>2]|0;
   $11 = ((($10)) + 32|0);
   $12 = HEAP32[$11>>2]|0;
   _OPENSSL_cleanse($8,$12);
   $$pre$phiZ2D = $7;
  }
 }
 $13 = HEAP32[$$pre$phiZ2D>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _CRYPTO_free($13);
 }
 $15 = ((($c)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  (_ENGINE_finish($16)|0);
 }
 _memset(($c|0),0,140)|0;
 $$0 = 1;
 return ($$0|0);
}
function _EVP_EncryptInit_ex($ctx,$cipher,$impl,$key,$iv) {
 $ctx = $ctx|0;
 $cipher = $cipher|0;
 $impl = $impl|0;
 $key = $key|0;
 $iv = $iv|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EVP_CipherInit_ex($ctx,$cipher,$impl,$key,$iv,1)|0);
 return ($0|0);
}
function _EVP_CIPHER_CTX_set_key_length($c,$keylen) {
 $c = $c|0;
 $keylen = $keylen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c>>2]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $11 = ((($c)) + 88|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($keylen|0);
  if ($13) {
   $$0 = 1;
   return ($$0|0);
  }
  $14 = ($keylen|0)<(1);
  $15 = $2 & 8;
  $16 = ($15|0)==(0);
  $or$cond = $14 | $16;
  if ($or$cond) {
   _ERR_put_error(6,122,130,86170,593);
   $$0 = 0;
   return ($$0|0);
  } else {
   HEAP32[$11>>2] = $keylen;
   $$0 = 1;
   return ($$0|0);
  }
 }
 $5 = ($0|0)==(0|0);
 if ($5) {
  _ERR_put_error(6,124,131,86170,610);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($0)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _ERR_put_error(6,124,132,86170,615);
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (FUNCTION_TABLE_iiiii[$7 & 127]($c,1,$keylen,0)|0);
 $10 = ($9|0)==(-1);
 if (!($10)) {
  $$0 = $9;
  return ($$0|0);
 }
 _ERR_put_error(6,124,133,86170,622);
 $$0 = 0;
 return ($$0|0);
}
function _EVP_CIPHER_CTX_copy($out,$in) {
 $out = $out|0;
 $in = $in|0;
 var $$0 = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($in|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$in>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ((($in)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = (_ENGINE_init($4)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     _ERR_put_error(6,163,38,86170,646);
     $$0 = 0;
     return ($$0|0);
    }
   }
   $8 = HEAP32[$out>>2]|0;
   $9 = ($8|0)==(0|0);
   do {
    if ($9) {
     $$pre$i = ((($out)) + 96|0);
     $$pre$phi$iZ2D = $$pre$i;
     label = 14;
    } else {
     $10 = ((($8)) + 28|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)==(0|0);
     if (!($12)) {
      $13 = (FUNCTION_TABLE_ii[$11 & 127]($out)|0);
      $14 = ($13|0)==(0);
      if ($14) {
       $$pre$phiZ2D = $out;
       break;
      }
     }
     $15 = ((($out)) + 96|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      $$pre$phi$iZ2D = $15;
      label = 14;
     } else {
      $18 = HEAP32[$out>>2]|0;
      $19 = ((($18)) + 32|0);
      $20 = HEAP32[$19>>2]|0;
      _OPENSSL_cleanse($16,$20);
      $$pre$phi$iZ2D = $15;
      label = 14;
     }
    }
   } while(0);
   if ((label|0) == 14) {
    $21 = HEAP32[$$pre$phi$iZ2D>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     _CRYPTO_free($21);
    }
    $23 = ((($out)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if (!($25)) {
     (_ENGINE_finish($24)|0);
    }
    _memset(($out|0),0,140)|0;
    $$pre$phiZ2D = $out;
   }
   _memcpy(($$pre$phiZ2D|0),($in|0),140)|0;
   $26 = ((($in)) + 96|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   do {
    if (!($28)) {
     $29 = HEAP32[$in>>2]|0;
     $30 = ((($29)) + 32|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==(0);
     if (!($32)) {
      $33 = (_CRYPTO_malloc($31,86170,655)|0);
      $34 = ((($out)) + 96|0);
      HEAP32[$34>>2] = $33;
      $35 = ($33|0)==(0|0);
      if (!($35)) {
       $36 = HEAP32[$26>>2]|0;
       $37 = HEAP32[$in>>2]|0;
       $38 = ((($37)) + 32|0);
       $39 = HEAP32[$38>>2]|0;
       _memcpy(($33|0),($36|0),($39|0))|0;
       break;
      }
      _ERR_put_error(6,163,65,86170,657);
      $$0 = 0;
      return ($$0|0);
     }
    }
   } while(0);
   $40 = HEAP32[$in>>2]|0;
   $41 = ((($40)) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 & 1024;
   $44 = ($43|0)==(0);
   if ($44) {
    $$0 = 1;
    return ($$0|0);
   }
   $45 = ((($40)) + 44|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (FUNCTION_TABLE_iiiii[$46 & 127]($in,8,0,$$pre$phiZ2D)|0);
   $$0 = $47;
   return ($$0|0);
  }
 }
 _ERR_put_error(6,163,111,86170,640);
 $$0 = 0;
 return ($$0|0);
}
function _EVP_CIPHER_param_to_asn1($c,$type) {
 $c = $c|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0 = 0, $switch$split2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c>>2]|0;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $5 = ((($0)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 & 4096;
   $8 = ($7|0)==(0);
   if ($8) {
    $ret$0 = -1;
   } else {
    $9 = $6 & 983047;
    $switch$split2D = ($9|0)<(65537);
    L4: do {
     if ($switch$split2D) {
      switch ($9|0) {
      case 7: case 6:  {
       $ret$0 = -1;
       break L1;
       break;
      }
      default: {
      }
      }
     } else {
      switch ($9|0) {
      case 65537:  {
       $ret$0 = -1;
       break L1;
       break;
      }
      case 65538:  {
       break;
      }
      default: {
       break L4;
      }
      }
      $10 = HEAP32[$0>>2]|0;
      $11 = ($10|0)==(246);
      if (!($11)) {
       $ret$0 = 1;
       break L1;
      }
      _ASN1_TYPE_set($type,5,0);
      $ret$0 = 1;
      break L1;
     }
    } while(0);
    $12 = ($type|0)==(0|0);
    if ($12) {
     $ret$0 = 0;
    } else {
     $13 = ((($0)) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14>>>0)<(17);
     if ($15) {
      $16 = ((($c)) + 16|0);
      $17 = (_ASN1_TYPE_set_octetstring($type,$16,$14)|0);
      $ret$0 = $17;
      break;
     } else {
      _OpenSSLDie(86328,148,86338);
      // unreachable;
     }
    }
   }
  } else {
   $4 = (FUNCTION_TABLE_iii[$2 & 127]($c,$type)|0);
   $ret$0 = $4;
  }
 } while(0);
 return ($ret$0|0);
}
function _EVP_CIPHER_CTX_flags($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _EVP_CIPHER_asn1_to_param($c,$type) {
 $c = $c|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0 = 0;
 var $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c>>2]|0;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $5 = ((($0)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 & 4096;
   $8 = ($7|0)==(0);
   if ($8) {
    $ret$0 = -1;
   } else {
    $9 = $6 & 983047;
    $switch$split2D = ($9|0)<(65537);
    if ($switch$split2D) {
     switch ($9|0) {
     case 7: case 6:  {
      label = 5;
      break;
     }
     default: {
     }
     }
    } else {
     switch ($9|0) {
     case 65538:  {
      $ret$0 = 1;
      break L1;
      break;
     }
     case 65537:  {
      label = 5;
      break;
     }
     default: {
     }
     }
    }
    if ((label|0) == 5) {
     $ret$0 = -1;
     break;
    }
    $10 = ($type|0)==(0|0);
    if ($10) {
     $ret$0 = 0;
    } else {
     $11 = ((($0)) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12>>>0)<(17);
     if (!($13)) {
      _OpenSSLDie(86328,131,86357);
      // unreachable;
     }
     $14 = ((($c)) + 16|0);
     $15 = (_ASN1_TYPE_get_octetstring($type,$14,$12)|0);
     $16 = ($15|0)==($12|0);
     if ($16) {
      $17 = ($12|0)>(0);
      if ($17) {
       $18 = ((($c)) + 32|0);
       _memcpy(($18|0),($14|0),($12|0))|0;
       $ret$0 = $12;
      } else {
       $ret$0 = $12;
      }
     } else {
      $ret$0 = -1;
     }
    }
   }
  } else {
   $4 = (FUNCTION_TABLE_iii[$2 & 127]($c,$type)|0);
   $ret$0 = $4;
  }
 } while(0);
 return ($ret$0|0);
}
function _EVP_CIPHER_CTX_iv_length($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _EVP_CIPHER_type($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $nid$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 switch ($0|0) {
 case 98: case 166: case 37:  {
  $$0 = 37;
  break;
 }
 case 97: case 5:  {
  $$0 = 5;
  break;
 }
 case 650: case 653: case 421:  {
  $$0 = 421;
  break;
 }
 case 651: case 654: case 425:  {
  $$0 = 425;
  break;
 }
 case 652: case 655: case 429:  {
  $$0 = 429;
  break;
 }
 case 656: case 657: case 30:  {
  $$0 = 30;
  break;
 }
 case 658: case 659: case 61:  {
  $$0 = 30;
  break;
 }
 default: {
  $1 = (_OBJ_nid2obj($0)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   label = 10;
  } else {
   $3 = ((($1)) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    label = 10;
   } else {
    $nid$0 = $0;
   }
  }
  if ((label|0) == 10) {
   $nid$0 = 0;
  }
  _ASN1_OBJECT_free($1);
  $$0 = $nid$0;
 }
 }
 return ($$0|0);
}
function _EVP_CIPHER_CTX_block_size($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _EVP_Cipher($ctx,$out,$in,$inl) {
 $ctx = $ctx|0;
 $out = $out|0;
 $in = $in|0;
 $inl = $inl|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiiii[$2 & 127]($ctx,$out,$in,$inl)|0);
 return ($3|0);
}
function _EVP_CIPHER_CTX_cipher($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 return ($0|0);
}
function _EVP_CIPHER_flags($cipher) {
 $cipher = $cipher|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cipher)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EVP_CIPHER_CTX_key_length($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EVP_MD_block_size($md) {
 $md = $md|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($md)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EVP_MD_type($md) {
 $md = $md|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$md>>2]|0;
 return ($0|0);
}
function _EVP_MD_size($md) {
 $md = $md|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($md|0)==(0|0);
 if ($0) {
  _ERR_put_error(6,162,159,86328,313);
  $$0 = -1;
  return ($$0|0);
 } else {
  $1 = ((($md)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _EVP_MD_CTX_md($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = HEAP32[$ctx>>2]|0;
  $$0 = $1;
 }
 return ($$0|0);
}
function _EVP_MD_CTX_set_flags($ctx,$flags) {
 $ctx = $ctx|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | $flags;
 HEAP32[$0>>2] = $2;
 return;
}
function _EVP_MD_CTX_clear_flags($ctx,$flags) {
 $ctx = $ctx|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $flags ^ -1;
 $1 = ((($ctx)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & $0;
 HEAP32[$1>>2] = $3;
 return;
}
function _EVP_MD_CTX_test_flags($ctx,$flags) {
 $ctx = $ctx|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & $flags;
 return ($2|0);
}
function _EVP_sha1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35448|0);
}
function _EVP_sha224() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35524|0);
}
function _EVP_sha256() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35600|0);
}
function _init256($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_SHA256_Init($1)|0);
 return ($2|0);
}
function _update256($ctx,$data,$count) {
 $ctx = $ctx|0;
 $data = $data|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_SHA256_Update($1,$data,$count)|0);
 return ($2|0);
}
function _final256($ctx,$md) {
 $ctx = $ctx|0;
 $md = $md|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_SHA256_Final($md,$1)|0);
 return ($2|0);
}
function _init224($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_SHA224_Init($1)|0);
 return ($2|0);
}
function _init2157($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_SHA1_Init($1)|0);
 return ($2|0);
}
function _update2158($ctx,$data,$count) {
 $ctx = $ctx|0;
 $data = $data|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_SHA1_Update($1,$data,$count)|0);
 return ($2|0);
}
function _final2159($ctx,$md) {
 $ctx = $ctx|0;
 $md = $md|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_SHA1_Final($md,$1)|0);
 return ($2|0);
}
function _EVP_DigestVerifyInit($ctx,$pctx,$type,$e,$pkey) {
 $ctx = $ctx|0;
 $pctx = $pctx|0;
 $type = $type|0;
 $e = $e|0;
 $pkey = $pkey|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_do_sigver_init($ctx,$pctx,$type,$e,$pkey,1)|0);
 return ($0|0);
}
function _do_sigver_init($ctx,$pctx,$type,$e,$pkey,$ver) {
 $ctx = $ctx|0;
 $pctx = $pctx|0;
 $type = $type|0;
 $e = $e|0;
 $pkey = $pkey|0;
 $ver = $ver|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $def_nid = 0, $not$ = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $def_nid = sp;
 $0 = ((($ctx)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_EVP_PKEY_CTX_new($pkey,$e)|0);
  HEAP32[$0>>2] = $3;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $6 = $3;
  }
 } else {
  $6 = $1;
 }
 $5 = HEAP32[$6>>2]|0;
 $7 = ((($5)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 4;
 $10 = ($9|0)==(0);
 $11 = ($type|0)==(0|0);
 $or$cond = $11 & $10;
 do {
  if ($or$cond) {
   $12 = (_EVP_PKEY_get_default_digest_nid($pkey,$def_nid)|0);
   $13 = ($12|0)>(0);
   if ($13) {
    $14 = HEAP32[$def_nid>>2]|0;
    $15 = (_OBJ_nid2sn($14)|0);
    $16 = (_EVP_get_digestbyname($15)|0);
    $17 = ($16|0)==(0|0);
    if (!($17)) {
     $$pre = HEAP32[$0>>2]|0;
     $$pre4 = HEAP32[$$pre>>2]|0;
     $$1 = $16;$20 = $$pre4;$23 = $$pre;
     break;
    }
   }
   _ERR_put_error(6,161,158,86376,85);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$1 = $type;$20 = $5;$23 = $6;
  }
 } while(0);
 $18 = ($ver|0)==(0);
 do {
  if ($18) {
   $30 = ((($20)) + 60|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if ($32) {
    $37 = (_EVP_PKEY_sign_init($23)|0);
    $38 = ($37|0)<(1);
    if ($38) {
     $$0 = 0;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   $33 = (FUNCTION_TABLE_iii[$31 & 127]($23,$ctx)|0);
   $34 = ($33|0)<(1);
   if ($34) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $35 = HEAP32[$0>>2]|0;
    $36 = ((($35)) + 16|0);
    HEAP32[$36>>2] = 64;
    break;
   }
  } else {
   $19 = ((($20)) + 68|0);
   $21 = HEAP32[$19>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $28 = (_EVP_PKEY_verify_init($23)|0);
    $29 = ($28|0)<(1);
    if ($29) {
     $$0 = 0;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   $24 = (FUNCTION_TABLE_iii[$21 & 127]($23,$ctx)|0);
   $25 = ($24|0)<(1);
   if ($25) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $26 = HEAP32[$0>>2]|0;
    $27 = ((($26)) + 16|0);
    HEAP32[$27>>2] = 128;
    break;
   }
  }
 } while(0);
 $39 = HEAP32[$0>>2]|0;
 $40 = (_EVP_PKEY_CTX_ctrl($39,-1,248,1,0,$$1)|0);
 $41 = ($40|0)<(1);
 if ($41) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = ($pctx|0)==(0|0);
 if (!($42)) {
  $43 = HEAP32[$0>>2]|0;
  HEAP32[$pctx>>2] = $43;
 }
 $44 = HEAP32[$0>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & 4;
 $49 = ($48|0)==(0);
 if (!($49)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (_EVP_DigestInit_ex($ctx,$$1,$e)|0);
 $not$ = ($50|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _EVP_get_cipherbyname($name) {
 $name = $name|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_OBJ_NAME_get($name,2)|0);
 return ($0|0);
}
function _EVP_get_digestbyname($name) {
 $name = $name|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_OBJ_NAME_get($name,1)|0);
 return ($0|0);
}
function _EVP_PKEY_bits($pkey) {
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pkey|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = ((($pkey)) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
  } else {
   $4 = ((($2)) + 52|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = (FUNCTION_TABLE_ii[$5 & 127]($pkey)|0);
    $$0 = $7;
   }
  }
 }
 return ($$0|0);
}
function _EVP_PKEY_size($pkey) {
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pkey|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = ((($pkey)) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
  } else {
   $4 = ((($2)) + 48|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = (FUNCTION_TABLE_ii[$5 & 127]($pkey)|0);
    $$0 = $7;
   }
  }
 }
 return ($$0|0);
}
function _EVP_PKEY_copy_parameters($to,$from) {
 $to = $to|0;
 $from = $from|0;
 var $$0 = 0, $$pr$pre = 0, $$pr3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$to>>2]|0;
 $1 = HEAP32[$from>>2]|0;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  _ERR_put_error(6,103,101,86387,125);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($from)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($4)) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if ($8) {
   $$pr3 = $4;
  } else {
   $9 = (FUNCTION_TABLE_ii[$7 & 127]($from)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$pr$pre = HEAP32[$3>>2]|0;
    $11 = ($$pr$pre|0)==(0|0);
    if ($11) {
     $$0 = 0;
    } else {
     $$pr3 = $$pr$pre;
     break;
    }
    return ($$0|0);
   } else {
    _ERR_put_error(6,103,103,86387,130);
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 $12 = ((($$pr3)) + 68|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$0 = 0;
  return ($$0|0);
 }
 $15 = (FUNCTION_TABLE_iii[$13 & 127]($to,$from)|0);
 $$0 = $15;
 return ($$0|0);
}
function _EVP_PKEY_missing_parameters($pkey) {
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (FUNCTION_TABLE_ii[$4 & 127]($pkey)|0);
 $$0 = $6;
 return ($$0|0);
}
function _EVP_PKEY_cmp_parameters($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ((($a)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -2;
  return ($$0|0);
 }
 $6 = ((($4)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -2;
  return ($$0|0);
 }
 $9 = (FUNCTION_TABLE_iii[$7 & 127]($a,$b)|0);
 $$0 = $9;
 return ($$0|0);
}
function _EVP_PKEY_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(32,86387,180)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(6,106,65,86387,182);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$0>>2] = 0;
  $2 = ((($0)) + 4|0);
  HEAP32[$2>>2] = 0;
  $3 = ((($0)) + 8|0);
  HEAP32[$3>>2] = 1;
  $4 = ((($0)) + 12|0);
  HEAP32[$4>>2] = 0;
  $5 = ((($0)) + 16|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($0)) + 20|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($0)) + 28|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($0)) + 24|0);
  HEAP32[$8>>2] = 1;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EVP_PKEY_assign($pkey,$type,$key) {
 $pkey = $pkey|0;
 $type = $type|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pkey|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_pkey_set_type($pkey,$type,0,-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($pkey)) + 20|0);
 HEAP32[$3>>2] = $key;
 $4 = ($key|0)!=(0|0);
 $5 = $4&1;
 $$0 = $5;
 return ($$0|0);
}
function _EVP_PKEY_set1_RSA($pkey,$key) {
 $pkey = $pkey|0;
 $key = $key|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pkey|0)==(0|0);
 if ($0) {
  $$0$i1 = 0;
 } else {
  $1 = (_pkey_set_type($pkey,6,0,-1)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   $$0$i1 = 0;
  } else {
   $3 = ((($pkey)) + 20|0);
   HEAP32[$3>>2] = $key;
   $4 = ($key|0)==(0|0);
   if ($4) {
    $$0$i1 = 0;
   } else {
    (_RSA_up_ref($key)|0);
    $$0$i1 = 1;
   }
  }
 }
 return ($$0$i1|0);
}
function _EVP_PKEY_set1_EC_KEY($pkey,$key) {
 $pkey = $pkey|0;
 $key = $key|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pkey|0)==(0|0);
 if ($0) {
  $$0$i1 = 0;
 } else {
  $1 = (_pkey_set_type($pkey,408,0,-1)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   $$0$i1 = 0;
  } else {
   $3 = ((($pkey)) + 20|0);
   HEAP32[$3>>2] = $key;
   $4 = ($key|0)==(0|0);
   if ($4) {
    $$0$i1 = 0;
   } else {
    (_EC_KEY_up_ref($key)|0);
    $$0$i1 = 1;
   }
  }
 }
 return ($$0$i1|0);
}
function _EVP_PKEY_id($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pkey>>2]|0;
 return ($0|0);
}
function _EVP_PKEY_free($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($x)) + 8|0);
 $2 = (_CRYPTO_add_lock($1,-1,10,86387,383)|0);
 $3 = ($2|0)>(0);
 if ($3) {
  return;
 }
 $4 = ((($x)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($5)) + 84|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   FUNCTION_TABLE_vi[$8 & 63]($x);
   $10 = ((($x)) + 20|0);
   HEAP32[$10>>2] = 0;
  }
 }
 $11 = ((($x)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  (_ENGINE_finish($12)|0);
  HEAP32[$11>>2] = 0;
 }
 $14 = ((($x)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  _sk_pop_free($15,41);
 }
 _CRYPTO_free($x);
 return;
}
function _EVP_PKEY_get_default_digest_nid($pkey,$pnid) {
 $pkey = $pkey|0;
 $pnid = $pnid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = -2;
  return ($$0|0);
 }
 $3 = ((($1)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -2;
  return ($$0|0);
 }
 $6 = (FUNCTION_TABLE_iiiii[$4 & 127]($pkey,3,0,$pnid)|0);
 $$0 = $6;
 return ($$0|0);
}
function _pkey_set_type($pkey,$type,$str,$len) {
 $pkey = $pkey|0;
 $type = $type|0;
 $str = $str|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ameth$0 = 0, $e = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $e = sp;
 HEAP32[$e>>2] = 0;
 $0 = ($pkey|0)!=(0|0);
 if ($0) {
  $1 = ((($pkey)) + 20|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($pkey)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    $7 = ((($5)) + 84|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if (!($9)) {
     FUNCTION_TABLE_vi[$8 & 63]($pkey);
     HEAP32[$1>>2] = 0;
    }
   }
   $10 = ((($pkey)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    (_ENGINE_finish($11)|0);
    HEAP32[$10>>2] = 0;
   }
  }
  $13 = ((($pkey)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==($type|0);
  if ($15) {
   $16 = ((($pkey)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $19 = ((($pkey)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   (_ENGINE_finish($20)|0);
   HEAP32[$19>>2] = 0;
  }
 }
 $22 = ($str|0)==(0|0);
 if ($22) {
  $24 = (_EVP_PKEY_asn1_find($e,$type)|0);
  $ameth$0 = $24;
 } else {
  $23 = (_EVP_PKEY_asn1_find_str($e,$str,$len)|0);
  $ameth$0 = $23;
 }
 $25 = ($pkey|0)==(0|0);
 $26 = HEAP32[$e>>2]|0;
 $27 = ($26|0)!=(0|0);
 $or$cond = $25 & $27;
 if ($or$cond) {
  (_ENGINE_finish($26)|0);
 }
 $28 = ($ameth$0|0)==(0|0);
 if ($28) {
  _ERR_put_error(6,158,156,86387,231);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if (!($0)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = ((($pkey)) + 12|0);
 HEAP32[$29>>2] = $ameth$0;
 $30 = HEAP32[$e>>2]|0;
 $31 = ((($pkey)) + 16|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$ameth$0>>2]|0;
 HEAP32[$pkey>>2] = $32;
 $33 = ((($pkey)) + 4|0);
 HEAP32[$33>>2] = $type;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _EVP_PKEY_sign_init($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$ctx>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ((($1)) + 40|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ((($ctx)) + 16|0);
    HEAP32[$6>>2] = 8;
    $7 = ((($1)) + 36|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $$0 = 1;
     return ($$0|0);
    }
    $10 = (FUNCTION_TABLE_ii[$8 & 127]($ctx)|0);
    $11 = ($10|0)<(1);
    if (!($11)) {
     $$0 = $10;
     return ($$0|0);
    }
    HEAP32[$6>>2] = 0;
    $$0 = $10;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(6,141,150,86395,88);
 $$0 = -2;
 return ($$0|0);
}
function _EVP_PKEY_verify_init($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$ctx>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ((($1)) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ((($ctx)) + 16|0);
    HEAP32[$6>>2] = 16;
    $7 = ((($1)) + 44|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $$0 = 1;
     return ($$0|0);
    }
    $10 = (FUNCTION_TABLE_ii[$8 & 127]($ctx)|0);
    $11 = ($10|0)<(1);
    if (!($11)) {
     $$0 = $10;
     return ($$0|0);
    }
    HEAP32[$6>>2] = 0;
    $$0 = $10;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(6,143,150,86395,122);
 $$0 = -2;
 return ($$0|0);
}
function _EVP_PKEY_derive_set_peer($ctx,$peer) {
 $ctx = $ctx|0;
 $peer = $peer|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 do {
  if (!($0)) {
   $1 = HEAP32[$ctx>>2]|0;
   $2 = ($1|0)==(0|0);
   if (!($2)) {
    $3 = ((($1)) + 96|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4|0)==(0|0);
    if ($5) {
     $6 = ((($1)) + 80|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($7|0)==(0|0);
     if ($8) {
      $9 = ((($1)) + 88|0);
      $10 = HEAP32[$9>>2]|0;
      $11 = ($10|0)==(0|0);
      if ($11) {
       break;
      }
     }
    }
    $12 = ((($1)) + 100|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $15 = ((($ctx)) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     switch ($16|0) {
     case 512: case 256: case 1024:  {
      break;
     }
     default: {
      _ERR_put_error(6,155,151,86395,283);
      $$0 = -1;
      return ($$0|0);
     }
     }
     $17 = (FUNCTION_TABLE_iiiii[$13 & 127]($ctx,2,0,$peer)|0);
     $18 = ($17|0)<(1);
     if ($18) {
      $$0 = $17;
      return ($$0|0);
     }
     $19 = ($17|0)==(2);
     if ($19) {
      $$0 = 1;
      return ($$0|0);
     }
     $20 = ((($ctx)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      _ERR_put_error(6,155,154,86395,296);
      $$0 = -1;
      return ($$0|0);
     }
     $23 = HEAP32[$21>>2]|0;
     $24 = HEAP32[$peer>>2]|0;
     $25 = ($23|0)==($24|0);
     if (!($25)) {
      _ERR_put_error(6,155,101,86395,301);
      $$0 = -1;
      return ($$0|0);
     }
     $26 = (_EVP_PKEY_missing_parameters($peer)|0);
     $27 = ($26|0)==(0);
     if ($27) {
      $28 = HEAP32[$20>>2]|0;
      $29 = (_EVP_PKEY_cmp_parameters($28,$peer)|0);
      $30 = ($29|0)==(0);
      if ($30) {
       _ERR_put_error(6,155,153,86395,314);
       $$0 = -1;
       return ($$0|0);
      }
     }
     $31 = ((($ctx)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0|0);
     if (!($33)) {
      _EVP_PKEY_free($32);
     }
     HEAP32[$31>>2] = $peer;
     $34 = HEAP32[$ctx>>2]|0;
     $35 = ((($34)) + 100|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (FUNCTION_TABLE_iiiii[$36 & 127]($ctx,2,1,$peer)|0);
     $38 = ($37|0)<(1);
     if ($38) {
      HEAP32[$31>>2] = 0;
      $$0 = $37;
      return ($$0|0);
     } else {
      $39 = ((($peer)) + 8|0);
      (_CRYPTO_add_lock($39,1,10,86395,329)|0);
      $$0 = 1;
      return ($$0|0);
     }
    }
   }
  }
 } while(0);
 _ERR_put_error(6,155,150,86395,276);
 $$0 = -2;
 return ($$0|0);
}
function _evp_pkey_set_cb_translate($cb,$ctx) {
 $cb = $cb|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$cb>>2] = 2;
 $0 = ((($cb)) + 4|0);
 HEAP32[$0>>2] = $ctx;
 $1 = ((($cb)) + 8|0);
 HEAP32[$1>>2] = 46;
 return;
}
function _trans_cb($a,$b,$gcb) {
 $a = $a|0;
 $b = $b|0;
 $gcb = $gcb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($gcb)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $a;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $b;
 $5 = ((($1)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($1)|0);
 return ($7|0);
}
function _EVP_PKEY_meth_free($pmeth) {
 $pmeth = $pmeth|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pmeth|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($pmeth)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 _CRYPTO_free($pmeth);
 return;
}
function _EVP_PKEY_CTX_new($pkey,$e) {
 $pkey = $pkey|0;
 $e = $e|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_int_ctx_new($pkey,$e,-1)|0);
 return ($0|0);
}
function _EVP_PKEY_CTX_dup($pctx) {
 $pctx = $pctx|0;
 var $$0 = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pctx>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($pctx)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (_ENGINE_init($6)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   _ERR_put_error(6,156,38,86406,312);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $10 = (_CRYPTO_malloc(40,86406,316)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = HEAP32[$pctx>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = HEAP32[$5>>2]|0;
 $14 = ((($10)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($pctx)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $16;
  $21 = $18;
 } else {
  $19 = ((($16)) + 8|0);
  (_CRYPTO_add_lock($19,1,10,86406,326)|0);
  $$pre = HEAP32[$15>>2]|0;
  $21 = $$pre;
 }
 $20 = ((($10)) + 8|0);
 HEAP32[$20>>2] = $21;
 $22 = ((($pctx)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $25 = $23;
  $28 = $25;
 } else {
  $26 = ((($23)) + 8|0);
  (_CRYPTO_add_lock($26,1,10,86406,331)|0);
  $$pre2 = HEAP32[$22>>2]|0;
  $28 = $$pre2;
 }
 $27 = ((($10)) + 12|0);
 HEAP32[$27>>2] = $28;
 $29 = ((($10)) + 20|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($10)) + 24|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($pctx)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($10)) + 16|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$pctx>>2]|0;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (FUNCTION_TABLE_iii[$36 & 127]($10,$pctx)|0);
 $38 = ($37|0)>(0);
 if ($38) {
  $$0 = $10;
  return ($$0|0);
 }
 $39 = HEAP32[$10>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  $41 = ((($39)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  if (!($43)) {
   FUNCTION_TABLE_vi[$42 & 63]($10);
  }
 }
 $44 = HEAP32[$20>>2]|0;
 $45 = ($44|0)==(0|0);
 if (!($45)) {
  _EVP_PKEY_free($44);
 }
 $46 = HEAP32[$27>>2]|0;
 $47 = ($46|0)==(0|0);
 if (!($47)) {
  _EVP_PKEY_free($46);
 }
 $48 = HEAP32[$14>>2]|0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  (_ENGINE_finish($48)|0);
 }
 _CRYPTO_free($10);
 $$0 = 0;
 return ($$0|0);
}
function _EVP_PKEY_CTX_free($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$ctx>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   FUNCTION_TABLE_vi[$4 & 63]($ctx);
  }
 }
 $6 = ((($ctx)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _EVP_PKEY_free($7);
 }
 $9 = ((($ctx)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  _EVP_PKEY_free($10);
 }
 $12 = ((($ctx)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  (_ENGINE_finish($13)|0);
 }
 _CRYPTO_free($ctx);
 return;
}
function _EVP_PKEY_CTX_ctrl($ctx,$keytype,$optype,$cmd,$p1,$p2) {
 $ctx = $ctx|0;
 $keytype = $keytype|0;
 $optype = $optype|0;
 $cmd = $cmd|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$ctx>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ((($1)) + 100|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ($keytype|0)==(-1);
    if (!($6)) {
     $7 = HEAP32[$1>>2]|0;
     $8 = ($7|0)==($keytype|0);
     if (!($8)) {
      $$0 = -1;
      return ($$0|0);
     }
    }
    $9 = ((($ctx)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     _ERR_put_error(6,137,149,86406,393);
     $$0 = -1;
     return ($$0|0);
    }
    $12 = ($optype|0)!=(-1);
    $13 = $10 & $optype;
    $14 = ($13|0)==(0);
    $or$cond = $12 & $14;
    if ($or$cond) {
     _ERR_put_error(6,137,148,86406,398);
     $$0 = -1;
     return ($$0|0);
    }
    $15 = (FUNCTION_TABLE_iiiii[$4 & 127]($ctx,$cmd,$p1,$p2)|0);
    $16 = ($15|0)==(-2);
    if (!($16)) {
     $$0 = $15;
     return ($$0|0);
    }
    _ERR_put_error(6,137,147,86406,405);
    $$0 = -2;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(6,137,147,86406,386);
 $$0 = -2;
 return ($$0|0);
}
function _EVP_PKEY_CTX_get0_pkey($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EVP_PKEY_CTX_get0_peerkey($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _pmeth_cmp_BSEARCH_CMP_FN($a_,$b_) {
 $a_ = $a_|0;
 $b_ = $b_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a_>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$b_>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 return ($4|0);
}
function _int_ctx_new($pkey,$e,$id) {
 $pkey = $pkey|0;
 $e = $e|0;
 $id = $id|0;
 var $$0 = 0, $$0$i = 0, $$013 = 0, $$014 = 0, $$02 = 0, $$16 = 0, $$17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e$ = 0;
 var $pmeth$0 = 0, $t$i = 0, $tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $tmp$i = sp + 4|0;
 $t$i = sp;
 $0 = ($id|0)==(-1);
 $1 = ($pkey|0)==(0|0);
 do {
  if ($0) {
   if ($1) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $2 = ((($pkey)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $5 = HEAP32[$3>>2]|0;
    $$014 = $5;
    label = 6;
    break;
   }
  } else {
   if ($1) {
    $$013 = $id;$$02 = $e;$50 = 0;
   } else {
    $$014 = $id;
    label = 6;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $6 = ((($pkey)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $e$ = $8 ? $e : $7;
  $$013 = $$014;$$02 = $e$;$50 = 1;
 }
 $9 = ($$02|0)==(0|0);
 if ($9) {
  $12 = (_ENGINE_get_pkey_meth_engine($$013)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   HEAP32[$t$i>>2] = $tmp$i;
   HEAP32[$tmp$i>>2] = $$013;
   $15 = HEAP32[35676>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    label = 15;
   } else {
    $17 = (_sk_find($15,$tmp$i)|0);
    $18 = ($17|0)>(-1);
    if ($18) {
     $19 = HEAP32[35676>>2]|0;
     $20 = (_sk_value($19,$17)|0);
     $$0$i = $20;
    } else {
     label = 15;
    }
   }
   if ((label|0) == 15) {
    $21 = (_OBJ_bsearch_($t$i,35680,7,4,87)|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0$i = 0;
    } else {
     $23 = HEAP32[$21>>2]|0;
     $$0$i = $23;
    }
   }
   $$17 = 0;$51 = 0;$pmeth$0 = $$0$i;
  } else {
   $$16 = $12;
   label = 11;
  }
 } else {
  $10 = (_ENGINE_init($$02)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   _ERR_put_error(6,157,38,86406,146);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$16 = $$02;
   label = 11;
  }
 }
 if ((label|0) == 11) {
  $14 = (_ENGINE_get_pkey_meth($$16,$$013)|0);
  $$17 = $$16;$51 = 1;$pmeth$0 = $14;
 }
 $24 = ($pmeth$0|0)==(0|0);
 if ($24) {
  _ERR_put_error(6,157,156,86406,164);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (_CRYPTO_malloc(40,86406,168)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  if ($51) {
   (_ENGINE_finish($$17)|0);
  }
  _ERR_put_error(6,157,65,86406,174);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = ((($25)) + 4|0);
 HEAP32[$27>>2] = $$17;
 HEAP32[$25>>2] = $pmeth$0;
 $28 = ((($25)) + 16|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($25)) + 8|0);
 HEAP32[$29>>2] = $pkey;
 $30 = ((($25)) + 12|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($25)) + 28|0);
 HEAP32[$31>>2] = 0;
 if ($50) {
  $32 = ((($pkey)) + 8|0);
  (_CRYPTO_add_lock($32,1,10,86406,184)|0);
 }
 $33 = ((($25)) + 20|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($pmeth$0)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (FUNCTION_TABLE_ii[$35 & 127]($25)|0);
 $38 = ($37|0)<(1);
 if (!($38)) {
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = HEAP32[$25>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  $41 = ((($39)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  if (!($43)) {
   FUNCTION_TABLE_vi[$42 & 63]($25);
  }
 }
 $44 = HEAP32[$29>>2]|0;
 $45 = ($44|0)==(0|0);
 if (!($45)) {
  _EVP_PKEY_free($44);
 }
 $46 = HEAP32[$30>>2]|0;
 $47 = ($46|0)==(0|0);
 if (!($47)) {
  _EVP_PKEY_free($46);
 }
 $48 = HEAP32[$27>>2]|0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  (_ENGINE_finish($48)|0);
 }
 _CRYPTO_free($25);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _string_to_hex($str,$len) {
 $str = $str|0;
 $len = $len|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa29 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ch$0 = 0, $ch$0$off = 0, $ch$0$off4 = 0, $ch$1$in = 0, $cl$0 = 0, $cl$0$off = 0, $cl$0$off5 = 0, $cl$1$in = 0, $p$0 = 0, $p$0$lcssa28 = 0, $p$0$ph = 0, $q$0$ph = 0, $q$0$ph$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($str|0)==(0|0);
 if ($0) {
  _ERR_put_error(34,113,107,86418,442);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_strlen($str)|0);
 $2 = $1 >> 1;
 $3 = (_CRYPTO_malloc($2,86418,445)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _ERR_put_error(34,113,65,86418,493);
  $$0 = 0;
  return ($$0|0);
 } else {
  $p$0$ph = $str;$q$0$ph = $3;
 }
 L8: while(1) {
  $p$0 = $p$0$ph;
  while(1) {
   $5 = HEAP8[$p$0>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $q$0$ph$lcssa = $q$0$ph;
    label = 22;
    break L8;
   }
   $7 = ((($p$0)) + 1|0);
   $8 = ($5<<24>>24)==(58);
   if ($8) {
    $p$0 = $7;
   } else {
    $$lcssa = $7;$$lcssa29 = $5;$p$0$lcssa28 = $p$0;
    break;
   }
  }
  $9 = $$lcssa29&255;
  $10 = ((($p$0$lcssa28)) + 2|0);
  $11 = HEAP8[$$lcssa>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   label = 8;
   break;
  }
  $13 = (_isupper($9)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $ch$0 = $$lcssa29;
  } else {
   $15 = (_tolower($9)|0);
   $16 = $15&255;
   $ch$0 = $16;
  }
  $17 = $11&255;
  $18 = (_isupper($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $cl$0 = $11;
  } else {
   $20 = (_tolower($17)|0);
   $21 = $20&255;
   $cl$0 = $21;
  }
  $22 = $ch$0&255;
  $ch$0$off = (($ch$0) + -48)<<24>>24;
  $23 = ($ch$0$off&255)<(10);
  if ($23) {
   $24 = (($22) + -48)|0;
   $ch$1$in = $24;
  } else {
   $ch$0$off4 = (($ch$0) + -97)<<24>>24;
   $25 = ($ch$0$off4&255)<(6);
   if (!($25)) {
    label = 25;
    break;
   }
   $26 = (($22) + 169)|0;
   $ch$1$in = $26;
  }
  $27 = $cl$0&255;
  $cl$0$off = (($cl$0) + -48)<<24>>24;
  $28 = ($cl$0$off&255)<(10);
  if ($28) {
   $29 = (($27) + -48)|0;
   $cl$1$in = $29;
  } else {
   $cl$0$off5 = (($cl$0) + -97)<<24>>24;
   $30 = ($cl$0$off5&255)<(6);
   if (!($30)) {
    label = 25;
    break;
   }
   $31 = (($27) + 169)|0;
   $cl$1$in = $31;
  }
  $32 = $ch$1$in << 4;
  $33 = $cl$1$in | $32;
  $34 = $33&255;
  $35 = ((($q$0$ph)) + 1|0);
  HEAP8[$q$0$ph>>0] = $34;
  $p$0$ph = $10;$q$0$ph = $35;
 }
 if ((label|0) == 8) {
  _ERR_put_error(34,113,112,86418,459);
  _CRYPTO_free($3);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 22) {
  $36 = ($len|0)==(0|0);
  if ($36) {
   $$0 = $3;
   return ($$0|0);
  }
  $37 = $q$0$ph$lcssa;
  $38 = $3;
  $39 = (($37) - ($38))|0;
  HEAP32[$len>>2] = $39;
  $$0 = $3;
  return ($$0|0);
 }
 else if ((label|0) == 25) {
  _CRYPTO_free($3);
  _ERR_put_error(34,113,113,86418,498);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _PKCS7_SIGNER_INFO_get0_algs($si,$pk,$pdig,$psig) {
 $si = $si|0;
 $pk = $pk|0;
 $pdig = $pdig|0;
 $psig = $psig|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pk|0)==(0|0);
 if (!($0)) {
  $1 = ((($si)) + 28|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$pk>>2] = $2;
 }
 $3 = ($pdig|0)==(0|0);
 if (!($3)) {
  $4 = ((($si)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$pdig>>2] = $5;
 }
 $6 = ($psig|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = ((($si)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$psig>>2] = $8;
 return;
}
function _PKCS7_RECIP_INFO_get0_alg($ri,$penc) {
 $ri = $ri|0;
 $penc = $penc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($penc|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($ri)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$penc>>2] = $2;
 return;
}
function _cmac_size($pkey) {
 $pkey = $pkey|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32;
}
function _cmac_key_free($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 _CMAC_CTX_free($1);
 return;
}
function _pkey_cmac_init($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CMAC_CTX_new()|0);
 $1 = ((($ctx)) + 20|0);
 HEAP32[$1>>2] = $0;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($ctx)) + 36|0);
 HEAP32[$3>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_cmac_copy($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CMAC_CTX_new()|0);
 $1 = ((($dst)) + 20|0);
 HEAP32[$1>>2] = $0;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($dst)) + 36|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($src)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_CMAC_CTX_copy($0,$5)|0);
 $not$ = ($6|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _pkey_cmac_cleanup($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 _CMAC_CTX_free($1);
 return;
}
function _pkey_cmac_keygen($ctx,$pkey) {
 $ctx = $ctx|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CMAC_CTX_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($ctx)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_CMAC_CTX_copy($0,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  _CMAC_CTX_free($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_EVP_PKEY_assign($pkey,894,$0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _cmac_signctx_init($ctx,$mctx) {
 $ctx = $ctx|0;
 $mctx = $mctx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _EVP_MD_CTX_set_flags($mctx,256);
 $0 = ((($mctx)) + 20|0);
 HEAP32[$0>>2] = 47;
 return 1;
}
function _cmac_signctx($ctx,$sig,$siglen,$mctx) {
 $ctx = $ctx|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $mctx = $mctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_CMAC_Final($1,$sig,$siglen)|0);
 return ($2|0);
}
function _pkey_cmac_ctrl($ctx,$type,$p1,$p2) {
 $ctx = $ctx|0;
 $type = $type|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($type|0) {
 case 6:  {
  $2 = ($p2|0)==(0|0);
  $3 = ($p1|0)<(0);
  $or$cond = $3 | $2;
  if ($or$cond) {
   $$0 = 0;
   return ($$0|0);
  }
  $4 = (_CMAC_Init($1,$p2,$p1,0,0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 12:  {
  $6 = ((($ctx)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_CMAC_Init($1,0,0,$p2,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 1:  {
  $10 = ((($ctx)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($11)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_CMAC_CTX_copy($1,$14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $17 = (_CMAC_Init($1,0,0,0,0)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $$0 = 1;
 return ($$0|0);
}
function _pkey_cmac_ctrl_str($ctx,$type,$value) {
 $ctx = $ctx|0;
 $type = $type|0;
 $value = $value|0;
 var $$ = 0, $$0 = 0, $$0$i4 = 0, $$6 = 0, $$7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $keylen = 0, $not$ = 0, $not$8 = 0, $not$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $keylen = sp;
 $0 = ($value|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_strcmp($type,86534)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_strlen($value)|0);
  $4 = ($3|0)<(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $5 = ((($ctx)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_CMAC_Init($6,$value,$3,0,0)|0);
   $not$9 = ($7|0)!=(0);
   $$ = $not$9&1;
   STACKTOP = sp;return ($$|0);
  }
 }
 $8 = (_strcmp($type,86452)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = (_EVP_get_cipherbyname($value)|0);
  $11 = ($10|0)==(0|0);
  if ($11) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $12 = ((($ctx)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($ctx)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_CMAC_Init($13,0,0,$10,$15)|0);
  $not$8 = ($16|0)!=(0);
  $$6 = $not$8&1;
  $$0 = $$6;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (_strcmp($type,86538)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (_string_to_hex($value,$keylen)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$keylen>>2]|0;
 $22 = ($21|0)<(0);
 if ($22) {
  $$0$i4 = 0;
 } else {
  $23 = ((($ctx)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_CMAC_Init($24,$19,$21,0,0)|0);
  $not$ = ($25|0)!=(0);
  $$7 = $not$&1;
  $$0$i4 = $$7;
 }
 _CRYPTO_free($19);
 $$0 = $$0$i4;
 STACKTOP = sp;return ($$0|0);
}
function _int_update($ctx,$data,$count) {
 $ctx = $ctx|0;
 $data = $data|0;
 $count = $count|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_CMAC_Update($3,$data,$count)|0);
 $not$ = ($4|0)!=(0);
 $$ = $not$&1;
 return ($$|0);
}
function _CMAC_CTX_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(272,86459,98)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 _EVP_CIPHER_CTX_init($0);
 $2 = ((($0)) + 268|0);
 HEAP32[$2>>2] = -1;
 $$0 = $0;
 return ($$0|0);
}
function _CMAC_CTX_free($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if ($0) {
  return;
 }
 (_EVP_CIPHER_CTX_cleanup($ctx)|0);
 $1 = ((($ctx)) + 204|0);
 _OPENSSL_cleanse($1,32);
 $2 = ((($ctx)) + 140|0);
 _OPENSSL_cleanse($2,32);
 $3 = ((($ctx)) + 172|0);
 _OPENSSL_cleanse($3,32);
 $4 = ((($ctx)) + 236|0);
 _OPENSSL_cleanse($4,32);
 $5 = ((($ctx)) + 268|0);
 HEAP32[$5>>2] = -1;
 _CRYPTO_free($ctx);
 return;
}
function _CMAC_CTX_copy($out,$in) {
 $out = $out|0;
 $in = $in|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($in)) + 268|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_EVP_CIPHER_CTX_copy($out,$in)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_EVP_CIPHER_CTX_block_size($in)|0);
 $6 = ((($out)) + 140|0);
 $7 = ((($in)) + 140|0);
 _memcpy(($6|0),($7|0),($5|0))|0;
 $8 = ((($out)) + 172|0);
 $9 = ((($in)) + 172|0);
 _memcpy(($8|0),($9|0),($5|0))|0;
 $10 = ((($out)) + 204|0);
 $11 = ((($in)) + 204|0);
 _memcpy(($10|0),($11|0),($5|0))|0;
 $12 = ((($out)) + 236|0);
 $13 = ((($in)) + 236|0);
 _memcpy(($12|0),($13|0),($5|0))|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($out)) + 268|0);
 HEAP32[$15>>2] = $14;
 $$0 = 1;
 return ($$0|0);
}
function _CMAC_Init($ctx,$key,$keylen,$cipher,$impl) {
 $ctx = $ctx|0;
 $key = $key|0;
 $keylen = $keylen|0;
 $cipher = $cipher|0;
 $impl = $impl|0;
 var $$0 = 0, $$mux = 0, $$not = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $brmerge = 0, $exitcond$i = 0, $exitcond$i8 = 0, $i$01$i = 0, $i$01$i7 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($key|0)!=(0|0);
 $1 = ($cipher|0)!=(0|0);
 $or$cond = $0 | $1;
 $2 = ($impl|0)!=(0|0);
 $or$cond3 = $or$cond | $2;
 $or$cond3$not = $or$cond3 ^ 1;
 $3 = ($keylen|0)==(0);
 $or$cond5 = $3 & $or$cond3$not;
 if ($or$cond5) {
  $4 = ((($ctx)) + 268|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(-1);
  if ($6) {
   $$0 = 0;
   return ($$0|0);
  }
  $7 = (_EVP_EncryptInit_ex($ctx,0,0,0,86466)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
  $9 = ((($ctx)) + 204|0);
  $10 = (_EVP_CIPHER_CTX_block_size($ctx)|0);
  _memset(($9|0),0,($10|0))|0;
  HEAP32[$4>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 do {
  if ($1) {
   $11 = (_EVP_EncryptInit_ex($ctx,$cipher,$impl,0,0)|0);
   $12 = ($11|0)==(0);
   $$not = $0 ^ 1;
   $brmerge = $12 | $$not;
   $13 = $12&1;
   $$mux = $13 ^ 1;
   if ($brmerge) {
    $$0 = $$mux;
    return ($$0|0);
   } else {
    $$pre$phiZ2D = $ctx;
   }
  } else {
   if ($0) {
    $$pre$phiZ2D = $ctx;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 $14 = (_EVP_CIPHER_CTX_cipher($$pre$phiZ2D)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = (_EVP_CIPHER_CTX_set_key_length($$pre$phiZ2D,$keylen)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = (_EVP_EncryptInit_ex($$pre$phiZ2D,0,0,$key,86466)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = (_EVP_CIPHER_CTX_block_size($$pre$phiZ2D)|0);
 $21 = ((($ctx)) + 204|0);
 $22 = (_EVP_Cipher($$pre$phiZ2D,$21,86466,$20)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $$0 = 0;
  return ($$0|0);
 }
 $24 = ((($ctx)) + 140|0);
 $25 = ($20|0)>(0);
 if ($25) {
  $26 = (($20) + -1)|0;
  $i$01$i = 0;
  while(1) {
   $27 = (((($ctx)) + 204|0) + ($i$01$i)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $29 << 1;
   $31 = $30&255;
   $32 = (((($ctx)) + 140|0) + ($i$01$i)|0);
   HEAP8[$32>>0] = $31;
   $33 = ($i$01$i|0)<($26|0);
   $34 = (($i$01$i) + 1)|0;
   if ($33) {
    $35 = (((($ctx)) + 204|0) + ($34)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = ($36<<24>>24)<(0);
    if ($37) {
     $38 = $30 | 1;
     $39 = $38&255;
     HEAP8[$32>>0] = $39;
    }
   }
   $exitcond$i = ($34|0)==($20|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$01$i = $34;
   }
  }
 }
 $40 = HEAP8[$21>>0]|0;
 $41 = ($40<<24>>24)<(0);
 if ($41) {
  $42 = ($20|0)==(16);
  $43 = $42 ? 135 : 27;
  $44 = (($20) + -1)|0;
  $45 = (((($ctx)) + 140|0) + ($44)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $47 ^ $43;
  $49 = $48&255;
  HEAP8[$45>>0] = $49;
 }
 if ($25) {
  $50 = (($20) + -1)|0;
  $i$01$i7 = 0;
  while(1) {
   $51 = (((($ctx)) + 140|0) + ($i$01$i7)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 << 1;
   $55 = $54&255;
   $56 = (((($ctx)) + 172|0) + ($i$01$i7)|0);
   HEAP8[$56>>0] = $55;
   $57 = ($i$01$i7|0)<($50|0);
   $58 = (($i$01$i7) + 1)|0;
   if ($57) {
    $59 = (((($ctx)) + 140|0) + ($58)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = ($60<<24>>24)<(0);
    if ($61) {
     $62 = $54 | 1;
     $63 = $62&255;
     HEAP8[$56>>0] = $63;
    }
   }
   $exitcond$i8 = ($58|0)==($20|0);
   if ($exitcond$i8) {
    break;
   } else {
    $i$01$i7 = $58;
   }
  }
 }
 $64 = HEAP8[$24>>0]|0;
 $65 = ($64<<24>>24)<(0);
 if ($65) {
  $66 = ($20|0)==(16);
  $67 = $66 ? 135 : 27;
  $68 = (($20) + -1)|0;
  $69 = (((($ctx)) + 172|0) + ($68)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 ^ $67;
  $73 = $72&255;
  HEAP8[$69>>0] = $73;
 }
 _OPENSSL_cleanse($21,$20);
 $74 = (_EVP_EncryptInit_ex($$pre$phiZ2D,0,0,0,86466)|0);
 $75 = ($74|0)==(0);
 if ($75) {
  $$0 = 0;
  return ($$0|0);
 }
 _memset(($21|0),0,($20|0))|0;
 $76 = ((($ctx)) + 268|0);
 HEAP32[$76>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _CMAC_Update($ctx,$in,$dlen) {
 $ctx = $ctx|0;
 $in = $in|0;
 $dlen = $dlen|0;
 var $$0 = 0, $$01$lcssa = 0, $$01$ph = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$0$lcssa = 0, $data$0$ph = 0, $data$05 = 0, $dlen$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 268|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($dlen|0)==(0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (_EVP_CIPHER_CTX_block_size($ctx)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = (($4) - ($5))|0;
  $8 = ($7>>>0)>($dlen>>>0);
  $dlen$ = $8 ? $dlen : $7;
  $9 = (((($ctx)) + 236|0) + ($5)|0);
  _memcpy(($9|0),($in|0),($dlen$|0))|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + ($dlen$))|0;
  HEAP32[$0>>2] = $11;
  $12 = ($dlen$|0)==($dlen|0);
  if ($12) {
   $$0 = 1;
   return ($$0|0);
  }
  $13 = (($dlen) - ($dlen$))|0;
  $14 = ((($ctx)) + 236|0);
  $15 = (($in) + ($dlen$)|0);
  $16 = ((($ctx)) + 204|0);
  $17 = (_EVP_Cipher($ctx,$16,$14,$4)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01$ph = $13;$data$0$ph = $15;
  }
 } else {
  $$01$ph = $dlen;$data$0$ph = $in;
 }
 $19 = ($$01$ph>>>0)>($4>>>0);
 L14: do {
  if ($19) {
   $20 = ((($ctx)) + 204|0);
   $$014 = $$01$ph;$data$05 = $data$0$ph;
   while(1) {
    $21 = (_EVP_Cipher($ctx,$20,$data$05,$4)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $$0 = 0;
     break;
    }
    $23 = (($$014) - ($4))|0;
    $24 = (($data$05) + ($4)|0);
    $25 = ($23>>>0)>($4>>>0);
    if ($25) {
     $$014 = $23;$data$05 = $24;
    } else {
     $$01$lcssa = $23;$data$0$lcssa = $24;
     break L14;
    }
   }
   return ($$0|0);
  } else {
   $$01$lcssa = $$01$ph;$data$0$lcssa = $data$0$ph;
  }
 } while(0);
 $26 = ((($ctx)) + 236|0);
 _memcpy(($26|0),($data$0$lcssa|0),($$01$lcssa|0))|0;
 HEAP32[$0>>2] = $$01$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _CMAC_Final($ctx,$out,$poutlen) {
 $ctx = $ctx|0;
 $out = $out|0;
 $poutlen = $poutlen|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $i$03 = 0, $i$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 268|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_EVP_CIPHER_CTX_block_size($ctx)|0);
 HEAP32[$poutlen>>2] = $3;
 $4 = ($out|0)==(0|0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $7 = ($3|0)>(0);
  if ($7) {
   $i$03 = 0;
   while(1) {
    $8 = (((($ctx)) + 236|0) + ($i$03)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = (((($ctx)) + 140|0) + ($i$03)|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 ^ $9;
    $13 = (($out) + ($i$03)|0);
    HEAP8[$13>>0] = $12;
    $14 = (($i$03) + 1)|0;
    $exitcond = ($14|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $i$03 = $14;
    }
   }
  }
 } else {
  $15 = (((($ctx)) + 236|0) + ($5)|0);
  HEAP8[$15>>0] = -128;
  $16 = (($3) - ($5))|0;
  $17 = ($16|0)>(1);
  if ($17) {
   $$sum = (($5) + 1)|0;
   $18 = (((($ctx)) + 236|0) + ($$sum)|0);
   $19 = (($16) + -1)|0;
   _memset(($18|0),0,($19|0))|0;
  }
  $20 = ($3|0)>(0);
  if ($20) {
   $i$14 = 0;
   while(1) {
    $21 = (((($ctx)) + 236|0) + ($i$14)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = (((($ctx)) + 172|0) + ($i$14)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 ^ $22;
    $26 = (($out) + ($i$14)|0);
    HEAP8[$26>>0] = $25;
    $27 = (($i$14) + 1)|0;
    $exitcond6 = ($27|0)==($3|0);
    if ($exitcond6) {
     break;
    } else {
     $i$14 = $27;
    }
   }
  }
 }
 $28 = (_EVP_Cipher($ctx,$out,$out,$3)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  $$0 = 1;
  return ($$0|0);
 }
 _OPENSSL_cleanse($out,$3);
 $$0 = 0;
 return ($$0|0);
}
function _hmac_size($pkey) {
 $pkey = $pkey|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 64;
}
function _hmac_key_free($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$1>>2]|0;
  _OPENSSL_cleanse($4,$6);
 }
 _ASN1_OCTET_STRING_free($1);
 return;
}
function _hmac_pkey_ctrl($pkey,$op,$arg1,$arg2) {
 $pkey = $pkey|0;
 $op = $op|0;
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $$0 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cond = ($op|0)==(3);
 if ($cond) {
  HEAP32[$arg2>>2] = 672;
  $$0 = 1;
 } else {
  $$0 = -2;
 }
 return ($$0|0);
}
function _old_hmac_decode($pkey,$pder,$derlen) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 $derlen = $derlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_OCTET_STRING_new()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$pder>>2]|0;
  $3 = (_ASN1_OCTET_STRING_set($0,$2,$derlen)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = (_EVP_PKEY_assign($pkey,855,$0)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
 }
 _ASN1_OCTET_STRING_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _old_hmac_encode($pkey,$pder) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($pder|0)==(0|0);
 if ($2) {
  $$pre$phiZ2D = $1;
  $16 = HEAP32[$$pre$phiZ2D>>2]|0;
  return ($16|0);
 }
 $3 = HEAP32[$pder>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (_CRYPTO_malloc($5,86523,127)|0);
  HEAP32[$pder>>2] = $6;
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  _memcpy(($6|0),($8|0),($9|0))|0;
  $$pre$phiZ2D = $1;
  $16 = HEAP32[$$pre$phiZ2D>>2]|0;
  return ($16|0);
 } else {
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  _memcpy(($3|0),($11|0),($12|0))|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = HEAP32[$pder>>2]|0;
  $15 = (($14) + ($13)|0);
  HEAP32[$pder>>2] = $15;
  $$pre$phiZ2D = $1;
  $16 = HEAP32[$$pre$phiZ2D>>2]|0;
  return ($16|0);
 }
 return (0)|0;
}
function _pkey_hmac_init($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(228,86545,78)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$2>>2] = 0;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 4;
 $6 = ((($0)) + 20|0);
 _HMAC_CTX_init($6);
 $7 = ((($ctx)) + 20|0);
 HEAP32[$7>>2] = $0;
 $8 = ((($ctx)) + 36|0);
 HEAP32[$8>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_hmac_copy($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(228,86545,78)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$2>>2] = 0;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 4;
 $6 = ((($0)) + 20|0);
 _HMAC_CTX_init($6);
 $7 = ((($dst)) + 20|0);
 HEAP32[$7>>2] = $0;
 $8 = ((($dst)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($src)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$0>>2] = $11;
 $12 = ((($0)) + 20|0);
 _HMAC_CTX_init($12);
 $13 = ((($10)) + 20|0);
 $14 = (_HMAC_CTX_copy($12,$13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = ((($10)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = ((($0)) + 4|0);
  $20 = ((($10)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_ASN1_OCTET_STRING_set($19,$17,$21)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = 1;
 return ($$0|0);
}
function _pkey_hmac_cleanup($ctx) {
 $ctx = $ctx|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 _HMAC_CTX_cleanup($2);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _CRYPTO_free($1);
  return;
 }
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $4;
 } else {
  _OPENSSL_cleanse($4,$7);
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 _CRYPTO_free($9);
 HEAP32[$3>>2] = 0;
 _CRYPTO_free($1);
 return;
}
function _pkey_hmac_keygen($ctx,$pkey) {
 $ctx = $ctx|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($1)) + 4|0);
 $6 = (_ASN1_OCTET_STRING_dup($5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 (_EVP_PKEY_assign($pkey,855,$6)|0);
 $$0 = 1;
 return ($$0|0);
}
function _hmac_signctx_init($ctx,$mctx) {
 $ctx = $ctx|0;
 $mctx = $mctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = ((($mctx)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & -257;
 _HMAC_CTX_set_flags($2,$5);
 _EVP_MD_CTX_set_flags($mctx,256);
 $6 = ((($mctx)) + 20|0);
 HEAP32[$6>>2] = 48;
 return 1;
}
function _hmac_signctx($ctx,$sig,$siglen,$mctx) {
 $ctx = $ctx|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $mctx = $mctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $hlen = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EVP_MD_CTX_md($mctx)|0);
 $3 = (_EVP_MD_size($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$siglen>>2] = $3;
  $5 = ($sig|0)==(0|0);
  if ($5) {
   $$0 = 1;
  } else {
   $6 = ((($1)) + 20|0);
   $7 = (_HMAC_Final($6,$sig,$hlen)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    $9 = HEAP32[$hlen>>2]|0;
    HEAP32[$siglen>>2] = $9;
    $$0 = 1;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _pkey_hmac_ctrl($ctx,$type,$p1,$p2) {
 $ctx = $ctx|0;
 $type = $type|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($type|0) {
 case 6:  {
  $2 = ($p2|0)==(0|0);
  $3 = ($p1|0)>(0);
  $or$cond = $3 & $2;
  $4 = ($p1|0)<(-1);
  $or$cond3 = $4 | $or$cond;
  if ($or$cond3) {
   $$0 = 0;
   return ($$0|0);
  }
  $5 = ((($1)) + 4|0);
  $6 = (_ASN1_OCTET_STRING_set($5,$p2,$p1)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 1:  {
  HEAP32[$1>>2] = $p2;
  break;
 }
 case 7:  {
  $8 = ((($ctx)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 20|0);
  $13 = ((($11)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$11>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = ((($ctx)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_HMAC_Init_ex($12,$14,$15,$16,$18)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $$0 = 1;
 return ($$0|0);
}
function _pkey_hmac_ctrl_str($ctx,$type,$value) {
 $ctx = $ctx|0;
 $type = $type|0;
 $value = $value|0;
 var $$ = 0, $$0 = 0, $$0$i1 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $keylen = 0, $not$ = 0, $not$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $keylen = sp;
 $0 = ($value|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_strcmp($type,86534)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($ctx)) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = (_ASN1_OCTET_STRING_set($5,$value,-1)|0);
  $not$4 = ($6|0)!=(0);
  $$ = $not$4&1;
  STACKTOP = sp;return ($$|0);
 }
 $7 = (_strcmp($type,86538)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (_string_to_hex($value,$keylen)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$keylen>>2]|0;
 $12 = ($11|0)<(-1);
 if ($12) {
  $$0$i1 = 0;
 } else {
  $13 = ((($ctx)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = (_ASN1_OCTET_STRING_set($15,$9,$11)|0);
  $not$ = ($16|0)!=(0);
  $$3 = $not$&1;
  $$0$i1 = $$3;
 }
 _CRYPTO_free($9);
 $$0 = $$0$i1;
 STACKTOP = sp;return ($$0|0);
}
function _int_update3075($ctx,$data,$count) {
 $ctx = $ctx|0;
 $data = $data|0;
 $count = $count|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = (_HMAC_Update($4,$data,$count)|0);
 $not$ = ($5|0)!=(0);
 $$ = $not$&1;
 return ($$|0);
}
function _HMAC_Init_ex($ctx,$key,$len,$md,$impl) {
 $ctx = $ctx|0;
 $key = $key|0;
 $len = $len|0;
 $md = $md|0;
 $impl = $impl|0;
 var $$0 = 0, $$04 = 0, $$pre = 0, $$pre$phi10Z2D = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond7 = 0, $i$06 = 0, $i$15 = 0, $or$cond = 0, $pad = 0, $reset$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $pad = sp;
 $0 = ($md|0)==(0|0);
 $1 = HEAP32[$ctx>>2]|0;
 if ($0) {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$04 = $1;$reset$0 = 0;
  }
 } else {
  $2 = ($1|0)==($md|0);
  if (!($2)) {
   $3 = ($key|0)==(0|0);
   $4 = ($len|0)<(0);
   $or$cond = $3 | $4;
   if ($or$cond) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  HEAP32[$ctx>>2] = $md;
  $$04 = $md;$reset$0 = 1;
 }
 $6 = ($key|0)==(0|0);
 L10: do {
  if ($6) {
   $26 = ($reset$0|0)==(0);
   if ($26) {
    $$pre9 = ((($ctx)) + 28|0);
    $$pre$phi10Z2D = $$pre9;
    label = 26;
   } else {
    $i$06 = 0;
    label = 20;
   }
  } else {
   $7 = (_EVP_MD_block_size($$04)|0);
   $8 = ($7|0)<(129);
   if (!($8)) {
    _OpenSSLDie(86556,116,86563);
    // unreachable;
   }
   $9 = ($7|0)<($len|0);
   do {
    if ($9) {
     $10 = ((($ctx)) + 4|0);
     $11 = (_EVP_DigestInit_ex($10,$$04,$impl)|0);
     $12 = ($11|0)==(0);
     if ($12) {
      break L10;
     }
     $13 = (_EVP_DigestUpdate($10,$key,$len)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      break L10;
     }
     $15 = ((($ctx)) + 80|0);
     $16 = ((($ctx)) + 76|0);
     $17 = (_EVP_DigestFinal_ex($10,$15,$16)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      break L10;
     }
     $$pre = HEAP32[$16>>2]|0;
     $23 = $$pre;
    } else {
     $19 = ($len>>>0)>(128);
     if ($19) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      $20 = ((($ctx)) + 80|0);
      _memcpy(($20|0),($key|0),($len|0))|0;
      $21 = ((($ctx)) + 76|0);
      HEAP32[$21>>2] = $len;
      $23 = $len;
      break;
     }
    }
   } while(0);
   $22 = ($23|0)==(128);
   if ($22) {
    $i$06 = 0;
    label = 20;
   } else {
    $24 = (((($ctx)) + 80|0) + ($23)|0);
    $25 = (128 - ($23))|0;
    _memset(($24|0),0,($25|0))|0;
    $i$06 = 0;
    label = 20;
   }
  }
 } while(0);
 if ((label|0) == 20) {
  while(1) {
   label = 0;
   $27 = (((($ctx)) + 80|0) + ($i$06)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $29 ^ 54;
   $31 = $30&255;
   $32 = (($pad) + ($i$06)|0);
   HEAP8[$32>>0] = $31;
   $33 = (($i$06) + 1)|0;
   $exitcond7 = ($33|0)==(128);
   if ($exitcond7) {
    break;
   } else {
    $i$06 = $33;
    label = 20;
   }
  }
  $34 = ((($ctx)) + 28|0);
  $35 = (_EVP_DigestInit_ex($34,$$04,$impl)|0);
  $36 = ($35|0)==(0);
  if (!($36)) {
   $37 = (_EVP_MD_block_size($$04)|0);
   $38 = (_EVP_DigestUpdate($34,$pad,$37)|0);
   $39 = ($38|0)==(0);
   if (!($39)) {
    $i$15 = 0;
    while(1) {
     $40 = (((($ctx)) + 80|0) + ($i$15)|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = $42 ^ 92;
     $44 = $43&255;
     $45 = (($pad) + ($i$15)|0);
     HEAP8[$45>>0] = $44;
     $46 = (($i$15) + 1)|0;
     $exitcond = ($46|0)==(128);
     if ($exitcond) {
      break;
     } else {
      $i$15 = $46;
     }
    }
    $47 = ((($ctx)) + 52|0);
    $48 = (_EVP_DigestInit_ex($47,$$04,$impl)|0);
    $49 = ($48|0)==(0);
    if (!($49)) {
     $50 = (_EVP_MD_block_size($$04)|0);
     $51 = (_EVP_DigestUpdate($47,$pad,$50)|0);
     $52 = ($51|0)==(0);
     if (!($52)) {
      $$pre$phi10Z2D = $34;
      label = 26;
     }
    }
   }
  }
 }
 if ((label|0) == 26) {
  $53 = ((($ctx)) + 4|0);
  $54 = (_EVP_MD_CTX_copy_ex($53,$$pre$phi10Z2D)|0);
  $55 = ($54|0)==(0);
  if (!($55)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _HMAC_CTX_init($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 28|0);
 _EVP_MD_CTX_init($0);
 $1 = ((($ctx)) + 52|0);
 _EVP_MD_CTX_init($1);
 $2 = ((($ctx)) + 4|0);
 _EVP_MD_CTX_init($2);
 HEAP32[$ctx>>2] = 0;
 return;
}
function _HMAC_Update($ctx,$data,$len) {
 $ctx = $ctx|0;
 $data = $data|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($ctx)) + 4|0);
 $3 = (_EVP_DigestUpdate($2,$data,$len)|0);
 $$0 = $3;
 return ($$0|0);
}
function _HMAC_Final($ctx,$md,$len) {
 $ctx = $ctx|0;
 $md = $md|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $i = sp;
 $buf = sp + 8|0;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($ctx)) + 4|0);
  $3 = (_EVP_DigestFinal_ex($2,$buf,$i)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = ((($ctx)) + 52|0);
   $6 = (_EVP_MD_CTX_copy_ex($2,$5)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = HEAP32[$i>>2]|0;
    $9 = (_EVP_DigestUpdate($2,$buf,$8)|0);
    $10 = ($9|0)==(0);
    if (!($10)) {
     $11 = (_EVP_DigestFinal_ex($2,$md,$len)|0);
     $12 = ($11|0)==(0);
     if (!($12)) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _HMAC_CTX_copy($dctx,$sctx) {
 $dctx = $dctx|0;
 $sctx = $sctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($dctx)) + 28|0);
 $1 = ((($sctx)) + 28|0);
 $2 = (_EVP_MD_CTX_copy($0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($dctx)) + 52|0);
 $5 = ((($sctx)) + 52|0);
 $6 = (_EVP_MD_CTX_copy($4,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($dctx)) + 4|0);
 $9 = ((($sctx)) + 4|0);
 $10 = (_EVP_MD_CTX_copy($8,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($dctx)) + 80|0);
 $13 = ((($sctx)) + 80|0);
 dest=$12; src=$13; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $14 = ((($sctx)) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($dctx)) + 76|0);
 HEAP32[$16>>2] = $15;
 $17 = HEAP32[$sctx>>2]|0;
 HEAP32[$dctx>>2] = $17;
 $$0 = 1;
 return ($$0|0);
}
function _HMAC_CTX_cleanup($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 28|0);
 (_EVP_MD_CTX_cleanup($0)|0);
 $1 = ((($ctx)) + 52|0);
 (_EVP_MD_CTX_cleanup($1)|0);
 $2 = ((($ctx)) + 4|0);
 (_EVP_MD_CTX_cleanup($2)|0);
 _memset(($ctx|0),0,208)|0;
 return;
}
function _HMAC_CTX_set_flags($ctx,$flags) {
 $ctx = $ctx|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 28|0);
 _EVP_MD_CTX_set_flags($0,$flags);
 $1 = ((($ctx)) + 52|0);
 _EVP_MD_CTX_set_flags($1,$flags);
 $2 = ((($ctx)) + 4|0);
 _EVP_MD_CTX_set_flags($2,$flags);
 return;
}
function _CMS_SharedInfo_encode($pder,$kekalg,$ukm,$keylen) {
 $pder = $pder|0;
 $kekalg = $kekalg|0;
 $ukm = $ukm|0;
 $keylen = $keylen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ecsi = 0, $kl = 0, $oklen = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $oklen = sp + 16|0;
 $kl = sp + 32|0;
 $ecsi = sp;
 $0 = $keylen << 3;
 $1 = $keylen >>> 21;
 $2 = $1&255;
 HEAP8[$kl>>0] = $2;
 $3 = $keylen >>> 13;
 $4 = $3&255;
 $5 = ((($kl)) + 1|0);
 HEAP8[$5>>0] = $4;
 $6 = $keylen >>> 5;
 $7 = $6&255;
 $8 = ((($kl)) + 2|0);
 HEAP8[$8>>0] = $7;
 $9 = $0&255;
 $10 = ((($kl)) + 3|0);
 HEAP8[$10>>0] = $9;
 HEAP32[$oklen>>2] = 4;
 $11 = ((($oklen)) + 8|0);
 HEAP32[$11>>2] = $kl;
 $12 = ((($oklen)) + 4|0);
 HEAP32[$12>>2] = 4;
 $13 = ((($oklen)) + 12|0);
 HEAP32[$13>>2] = 0;
 HEAP32[$ecsi>>2] = $kekalg;
 $14 = ((($ecsi)) + 4|0);
 HEAP32[$14>>2] = $ukm;
 $15 = ((($ecsi)) + 8|0);
 HEAP32[$15>>2] = $oklen;
 $16 = (_ASN1_item_i2d($ecsi,$pder,36140)|0);
 STACKTOP = sp;return ($16|0);
}
function _CMS_RecipientInfo_get0_pkey_ctx($ri) {
 $ri = $ri|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ri>>2]|0;
 switch ($0|0) {
 case 0:  {
  $1 = ((($ri)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
  return ($$0|0);
  break;
 }
 case 1:  {
  $5 = ((($ri)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $$0 = $8;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _CMS_RecipientInfo_ktri_get0_algs($ri,$pk,$recip,$palg) {
 $ri = $ri|0;
 $pk = $pk|0;
 $recip = $recip|0;
 $palg = $palg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ri>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  _ERR_put_error(46,142,124,86637,295);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($ri)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($pk|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$pk>>2] = $6;
 }
 $7 = ($recip|0)==(0|0);
 if (!($7)) {
  $8 = ((($3)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$recip>>2] = $9;
 }
 $10 = ($palg|0)==(0|0);
 if ($10) {
  $$0 = 1;
  return ($$0|0);
 }
 $11 = ((($3)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$palg>>2] = $12;
 $$0 = 1;
 return ($$0|0);
}
function _CMS_RecipientInfo_kari_get0_alg($ri,$palg,$pukm) {
 $ri = $ri|0;
 $palg = $palg|0;
 $pukm = $pukm|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ri>>2]|0;
 $1 = ($0|0)==(1);
 if (!($1)) {
  _ERR_put_error(46,175,181,86647,79);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($palg|0)==(0|0);
 if (!($2)) {
  $3 = ((($ri)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$palg>>2] = $6;
 }
 $7 = ($pukm|0)==(0|0);
 if ($7) {
  $$0 = 1;
  return ($$0|0);
 }
 $8 = ((($ri)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$pukm>>2] = $11;
 $$0 = 1;
 return ($$0|0);
}
function _CMS_RecipientInfo_kari_get0_orig_id($ri,$pubalg,$pubkey,$keyid,$issuer,$sno) {
 $ri = $ri|0;
 $pubalg = $pubalg|0;
 $pubkey = $pubkey|0;
 $keyid = $keyid|0;
 $issuer = $issuer|0;
 $sno = $sno|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ri>>2]|0;
 $1 = ($0|0)==(1);
 if (!($1)) {
  _ERR_put_error(46,173,181,86647,112);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($ri)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($issuer|0)!=(0|0);
 if ($6) {
  HEAP32[$issuer>>2] = 0;
 }
 $7 = ($sno|0)!=(0|0);
 if ($7) {
  HEAP32[$sno>>2] = 0;
 }
 $8 = ($keyid|0)!=(0|0);
 if ($8) {
  HEAP32[$keyid>>2] = 0;
 }
 $9 = ($pubalg|0)!=(0|0);
 if ($9) {
  HEAP32[$pubalg>>2] = 0;
 }
 $10 = ($pubkey|0)!=(0|0);
 if ($10) {
  HEAP32[$pubkey>>2] = 0;
 }
 $11 = HEAP32[$5>>2]|0;
 switch ($11|0) {
 case 0:  {
  if ($6) {
   $12 = ((($5)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$issuer>>2] = $14;
  }
  if (!($7)) {
   $$0 = 1;
   return ($$0|0);
  }
  $15 = ((($5)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$sno>>2] = $18;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 1:  {
  if (!($8)) {
   $$0 = 1;
   return ($$0|0);
  }
  $19 = ((($5)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$keyid>>2] = $20;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 2:  {
  if ($9) {
   $21 = ((($5)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$pubalg>>2] = $23;
  }
  if (!($10)) {
   $$0 = 1;
   return ($$0|0);
  }
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$pubkey>>2] = $27;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _CMS_RecipientInfo_kari_get0_ctx($ri) {
 $ri = $ri|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ri>>2]|0;
 $1 = ($0|0)==(1);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($ri)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $$0 = $4;
 return ($$0|0);
}
function _CMS_SignerInfo_get0_pkey_ctx($si) {
 $si = $si|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($si)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _CMS_SignerInfo_get0_algs($si,$pk,$signer,$pdig,$psig) {
 $si = $si|0;
 $pk = $pk|0;
 $signer = $signer|0;
 $pdig = $pdig|0;
 $psig = $psig|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pk|0)==(0|0);
 if (!($0)) {
  $1 = ((($si)) + 32|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$pk>>2] = $2;
 }
 $3 = ($signer|0)==(0|0);
 if (!($3)) {
  $4 = ((($si)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$signer>>2] = $5;
 }
 $6 = ($pdig|0)==(0|0);
 if (!($6)) {
  $7 = ((($si)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$pdig>>2] = $8;
 }
 $9 = ($psig|0)==(0|0);
 if ($9) {
  return;
 }
 $10 = ((($si)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$psig>>2] = $11;
 return;
}
function _ECDH_KDF_X9_62($out,$outlen,$Z,$Zlen,$sinfo,$sinfolen,$md) {
 $out = $out|0;
 $outlen = $outlen|0;
 $Z = $Z|0;
 $Zlen = $Zlen|0;
 $sinfo = $sinfo|0;
 $sinfolen = $sinfolen|0;
 $md = $md|0;
 var $$04 = 0, $$05 = 0, $$05$lcssa33 = 0, $$06 = 0, $$06$lcssa31 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctr = 0, $i$0 = 0, $mctx = 0, $mtmp = 0, $or$cond = 0, $or$cond3 = 0;
 var $rv$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $mctx = sp;
 $ctr = sp + 88|0;
 $mtmp = sp + 24|0;
 $0 = ($sinfolen>>>0)>(1073741824);
 $1 = ($outlen>>>0)>(1073741824);
 $or$cond = $1 | $0;
 $2 = ($Zlen>>>0)>(1073741824);
 $or$cond3 = $2 | $or$cond;
 if ($or$cond3) {
  $$04 = 0;
  STACKTOP = sp;return ($$04|0);
 }
 $3 = (_EVP_MD_size($md)|0);
 _EVP_MD_CTX_init($mctx);
 $4 = ((($ctr)) + 3|0);
 $5 = ((($ctr)) + 2|0);
 $6 = ((($ctr)) + 1|0);
 $$05 = $out;$$06 = $outlen;$i$0 = 1;
 while(1) {
  (_EVP_DigestInit_ex($mctx,$md,0)|0);
  $7 = $i$0&255;
  HEAP8[$4>>0] = $7;
  $8 = $i$0 >>> 8;
  $9 = $8&255;
  HEAP8[$5>>0] = $9;
  $10 = $i$0 >>> 16;
  $11 = $10&255;
  HEAP8[$6>>0] = $11;
  $12 = $i$0 >>> 24;
  $13 = $12&255;
  HEAP8[$ctr>>0] = $13;
  $14 = (_EVP_DigestUpdate($mctx,$Z,$Zlen)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   label = 10;
   break;
  }
  $16 = (_EVP_DigestUpdate($mctx,$ctr,4)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   label = 10;
   break;
  }
  $18 = (_EVP_DigestUpdate($mctx,$sinfo,$sinfolen)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   label = 10;
   break;
  }
  $20 = ($$06>>>0)<($3>>>0);
  if ($20) {
   $$05$lcssa33 = $$05;$$06$lcssa31 = $$06;
   label = 8;
   break;
  }
  $21 = (_EVP_DigestFinal($mctx,$$05,0)|0);
  $22 = ($21|0)==(0);
  if ($22) {
   label = 10;
   break;
  }
  $25 = ($$06|0)==($3|0);
  if ($25) {
   $rv$0 = 1;
   break;
  }
  $26 = (($$05) + ($3)|0);
  $27 = (($$06) - ($3))|0;
  $28 = (($i$0) + 1)|0;
  $$05 = $26;$$06 = $27;$i$0 = $28;
 }
 if ((label|0) == 8) {
  $23 = (_EVP_DigestFinal($mctx,$mtmp,0)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   label = 10;
  } else {
   _memcpy(($$05$lcssa33|0),($mtmp|0),($$06$lcssa31|0))|0;
   _OPENSSL_cleanse($mtmp,$3);
   $rv$0 = 1;
  }
 }
 if ((label|0) == 10) {
  $rv$0 = 0;
 }
 (_EVP_MD_CTX_cleanup($mctx)|0);
 $$04 = $rv$0;
 STACKTOP = sp;return ($$04|0);
}
function _ECDH_compute_key($out,$outlen,$pub_key,$eckey,$KDF) {
 $out = $out|0;
 $outlen = $outlen|0;
 $pub_key = $pub_key|0;
 $eckey = $eckey|0;
 $KDF = $KDF|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ecdh_check($eckey)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiiii[$5 & 63]($out,$outlen,$pub_key,$eckey,$KDF)|0);
 $$0 = $6;
 return ($$0|0);
}
function _ecdh_check($key) {
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ecdh_data$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_KEY_get_key_method_data($key,66,42,42)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_ecdh_data_new()|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
   return ($$0|0);
  }
  $4 = (_EC_KEY_insert_key_method_data($key,$2,66,42,42)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $ecdh_data$0$in = $2;
  } else {
   $6 = ((($2)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    (_ENGINE_finish($7)|0);
   }
   $9 = ((($2)) + 16|0);
   _CRYPTO_free_ex_data(13,$2,$9);
   _OPENSSL_cleanse($2,24);
   _CRYPTO_free($2);
   $ecdh_data$0$in = $4;
  }
 } else {
  $ecdh_data$0$in = $0;
 }
 $$0 = $ecdh_data$0$in;
 return ($$0|0);
}
function _ecdh_data_dup($data) {
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_ecdh_data_new()|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _ecdh_data_free($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($data)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  (_ENGINE_finish($1)|0);
 }
 $3 = ((($data)) + 16|0);
 _CRYPTO_free_ex_data(13,$data,$3);
 _OPENSSL_cleanse($data,24);
 _CRYPTO_free($data);
 return;
}
function _ecdh_data_new() {
 var $$0$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(24,86658,140)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(43,101,65,86658,142);
  $$0$i = 0;
  return ($$0$i|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = HEAP32[36228>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_ECDH_OpenSSL()|0);
  HEAP32[36228>>2] = $4;
  $6 = $4;
 } else {
  $6 = $2;
 }
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = (_ENGINE_get_default_ECDH()|0);
 HEAP32[$7>>2] = $8;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$pre$i = HEAP32[$5>>2]|0;
  $14 = $$pre$i;
 } else {
  $10 = (_ENGINE_get_ECDH($8)|0);
  HEAP32[$5>>2] = $10;
  $11 = ($10|0)==(0|0);
  if ($11) {
   _ERR_put_error(43,101,38,86658,156);
   $12 = HEAP32[$7>>2]|0;
   (_ENGINE_finish($12)|0);
   _CRYPTO_free($0);
   $$0$i = 0;
   return ($$0$i|0);
  } else {
   $14 = $10;
  }
 }
 $13 = ((($14)) + 8|0);
 $15 = HEAP32[$13>>2]|0;
 $16 = ((($0)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($0)) + 16|0);
 (_CRYPTO_new_ex_data(13,$0,$17)|0);
 $$0$i = $0;
 return ($$0$i|0);
}
function _ECDH_OpenSSL() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36232|0);
}
function _ecdh_compute_key($out,$outlen,$pub_key,$ecdh,$KDF) {
 $out = $out|0;
 $outlen = $outlen|0;
 $pub_key = $pub_key|0;
 $ecdh = $ecdh|0;
 $KDF = $KDF|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$0$ph = 0, $buf$059 = 0, $priv_key$0 = 0, $ret$0$ph = 0, $ret$0211 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $outlen;
 $1 = ($outlen|0)<(0);
 if ($1) {
  _ERR_put_error(43,100,65,86688,123);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_BN_CTX_new()|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _BN_CTX_start($2);
 $4 = (_BN_CTX_get($2)|0);
 $5 = (_BN_CTX_get($2)|0);
 $6 = (_EC_KEY_get0_private_key($ecdh)|0);
 $7 = ($6|0)==(0|0);
 L8: do {
  if ($7) {
   _ERR_put_error(43,100,100,86688,136);
   $buf$059 = 0;$ret$0211 = -1;
  } else {
   $8 = (_EC_KEY_get0_group($ecdh)|0);
   $9 = (_EC_KEY_get_flags($ecdh)|0);
   $10 = $9 & 4096;
   $11 = ($10|0)==(0);
   do {
    if ($11) {
     $priv_key$0 = $6;
    } else {
     $12 = (_EC_GROUP_get_cofactor($8,$4,$2)|0);
     $13 = ($12|0)==(0);
     if (!($13)) {
      $14 = (_BN_mul($4,$4,$6,$2)|0);
      $15 = ($14|0)==(0);
      if (!($15)) {
       $priv_key$0 = $4;
       break;
      }
     }
     _ERR_put_error(43,100,65,86688,145);
     $buf$059 = 0;$ret$0211 = -1;
     break L8;
    }
   } while(0);
   $16 = (_EC_POINT_new($8)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    _ERR_put_error(43,100,65,86688,152);
    $buf$059 = 0;$ret$0211 = -1;
    break;
   }
   $18 = (_EC_POINT_mul($8,$16,0,$pub_key,$priv_key$0,$2)|0);
   $19 = ($18|0)==(0);
   do {
    if ($19) {
     _ERR_put_error(43,100,101,86688,157);
     $buf$0$ph = 0;$ret$0$ph = -1;
    } else {
     $20 = (_EC_GROUP_method_of($8)|0);
     $21 = (_EC_METHOD_get_field_type($20)|0);
     $22 = ($21|0)==(406);
     if ($22) {
      $23 = (_EC_POINT_get_affine_coordinates_GFp($8,$16,$4,$5,$2)|0);
      $24 = ($23|0)==(0);
      if ($24) {
       _ERR_put_error(43,100,101,86688,164);
       $buf$0$ph = 0;$ret$0$ph = -1;
       break;
      }
     }
     $25 = (_EC_GROUP_get_degree($8)|0);
     $26 = (($25) + 7)|0;
     $27 = (($26|0) / 8)&-1;
     $28 = (_BN_num_bits($4)|0);
     $29 = (($28) + 7)|0;
     $30 = (($29|0) / 8)&-1;
     $31 = ($27>>>0)<($30>>>0);
     if ($31) {
      _ERR_put_error(43,100,68,86688,180);
      $buf$0$ph = 0;$ret$0$ph = -1;
      break;
     }
     $32 = (_CRYPTO_malloc($27,86688,183)|0);
     $33 = ($32|0)==(0|0);
     if ($33) {
      _ERR_put_error(43,100,65,86688,184);
      $buf$0$ph = 0;$ret$0$ph = -1;
      break;
     }
     $34 = (($27) - ($30))|0;
     _memset(($32|0),0,($34|0))|0;
     $35 = (($32) + ($34)|0);
     $36 = (_BN_bn2bin($4,$35)|0);
     $37 = ($30|0)==($36|0);
     if (!($37)) {
      _ERR_put_error(43,100,3,86688,190);
      $buf$0$ph = $32;$ret$0$ph = -1;
      break;
     }
     $38 = ($KDF|0)==(0|0);
     if ($38) {
      $42 = ($27>>>0)<($outlen>>>0);
      if ($42) {
       HEAP32[$0>>2] = $27;
       $43 = $27;
      } else {
       $43 = $outlen;
      }
      _memcpy(($out|0),($32|0),($43|0))|0;
      $buf$0$ph = $32;$ret$0$ph = $43;
      break;
     } else {
      $39 = (FUNCTION_TABLE_iiiii[$KDF & 127]($32,$27,$out,$0)|0);
      $40 = ($39|0)==(0|0);
      if ($40) {
       _ERR_put_error(43,100,102,86688,196);
       $buf$0$ph = $32;$ret$0$ph = -1;
       break;
      } else {
       $41 = HEAP32[$0>>2]|0;
       $buf$0$ph = $32;$ret$0$ph = $41;
       break;
      }
     }
    }
   } while(0);
   _EC_POINT_free($16);
   $buf$059 = $buf$0$ph;$ret$0211 = $ret$0$ph;
  }
 } while(0);
 _BN_CTX_end($2);
 _BN_CTX_free($2);
 $44 = ($buf$059|0)==(0|0);
 if ($44) {
  $$0 = $ret$0211;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_free($buf$059);
 $$0 = $ret$0211;
 STACKTOP = sp;return ($$0|0);
}
function _d2i_ECDSA_SIG($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,36248)|0);
 return ($0|0);
}
function _i2d_ECDSA_SIG($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,36248)|0);
 return ($0|0);
}
function _ECDSA_SIG_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(36248)|0);
 return ($0|0);
}
function _ECDSA_SIG_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,36248);
 return;
}
function _ecdsa_check($key) {
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ecdsa_data$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_KEY_get_key_method_data($key,67,43,43)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_ecdsa_data_new()|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
   return ($$0|0);
  }
  $4 = (_EC_KEY_insert_key_method_data($key,$2,67,43,43)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $ecdsa_data$0$in = $2;
  } else {
   $6 = ((($2)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    (_ENGINE_finish($7)|0);
   }
   $9 = ((($2)) + 16|0);
   _CRYPTO_free_ex_data(12,$2,$9);
   _OPENSSL_cleanse($2,24);
   _CRYPTO_free($2);
   $ecdsa_data$0$in = $4;
  }
 } else {
  $ecdsa_data$0$in = $0;
 }
 $$0 = $ecdsa_data$0$in;
 return ($$0|0);
}
function _ECDSA_size($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bs = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $bs = sp;
 $buf = sp + 16|0;
 $0 = ($r|0)==(0|0);
 do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = (_EC_KEY_get0_group($r)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    $$0 = 0;
   } else {
    $3 = (_BN_new()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     $$0 = 0;
    } else {
     $5 = (_EC_GROUP_get_order($1,$3,0)|0);
     $6 = ($5|0)==(0);
     if ($6) {
      _BN_clear_free($3);
      $$0 = 0;
      break;
     } else {
      $7 = (_BN_num_bits($3)|0);
      $8 = (($7) + 7)|0;
      $9 = (($8|0) / 8)&-1;
      HEAP32[$bs>>2] = $9;
      $10 = ((($bs)) + 8|0);
      HEAP32[$10>>2] = $buf;
      $11 = ((($bs)) + 4|0);
      HEAP32[$11>>2] = 2;
      HEAP8[$buf>>0] = -1;
      $12 = (_i2d_ASN1_INTEGER($bs,0)|0);
      $13 = $12 << 1;
      $14 = (_ASN1_object_size(1,$13,16)|0);
      _BN_clear_free($3);
      $$0 = $14;
      break;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ecdsa_data_dup($data) {
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($data|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_ecdsa_data_new()|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _ecdsa_data_free($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($data)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  (_ENGINE_finish($1)|0);
 }
 $3 = ((($data)) + 16|0);
 _CRYPTO_free_ex_data(12,$data,$3);
 _OPENSSL_cleanse($data,24);
 _CRYPTO_free($data);
 return;
}
function _ecdsa_data_new() {
 var $$0$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(24,86709,119)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(42,100,65,86709,121);
  $$0$i = 0;
  return ($$0$i|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = HEAP32[36316>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_ECDSA_OpenSSL()|0);
  HEAP32[36316>>2] = $4;
  $6 = $4;
 } else {
  $6 = $2;
 }
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $6;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = (_ENGINE_get_default_ECDSA()|0);
 HEAP32[$7>>2] = $8;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$pre$i = HEAP32[$5>>2]|0;
  $14 = $$pre$i;
 } else {
  $10 = (_ENGINE_get_ECDSA($8)|0);
  HEAP32[$5>>2] = $10;
  $11 = ($10|0)==(0|0);
  if ($11) {
   _ERR_put_error(42,100,38,86709,135);
   $12 = HEAP32[$7>>2]|0;
   (_ENGINE_finish($12)|0);
   _CRYPTO_free($0);
   $$0$i = 0;
   return ($$0$i|0);
  } else {
   $14 = $10;
  }
 }
 $13 = ((($14)) + 16|0);
 $15 = HEAP32[$13>>2]|0;
 $16 = ((($0)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($0)) + 16|0);
 (_CRYPTO_new_ex_data(12,$0,$17)|0);
 $$0$i = $0;
 return ($$0$i|0);
}
function _ECDSA_OpenSSL() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36320|0);
}
function _ecdsa_do_sign($dgst,$dgst_len,$in_kinv,$in_r,$eckey) {
 $dgst = $dgst|0;
 $dgst_len = $dgst_len|0;
 $in_kinv = $in_kinv|0;
 $in_r = $in_r|0;
 $eckey = $eckey|0;
 var $$0 = 0, $$08 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
 var $9 = 0, $kinv = 0, $m$1$ph = 0, $m$110 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $order$0 = 0, $order$1$ph = 0, $order$114 = 0, $ret$0 = 0, $tmp$0 = 0, $tmp$1$ph = 0, $tmp$112 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $kinv = sp;
 HEAP32[$kinv>>2] = 0;
 $0 = (_ecdsa_check($eckey)|0);
 $1 = (_EC_KEY_get0_group($eckey)|0);
 $2 = (_EC_KEY_get0_private_key($eckey)|0);
 $3 = ($1|0)==(0|0);
 $4 = ($2|0)==(0|0);
 $or$cond = $3 | $4;
 $5 = ($0|0)==(0|0);
 $or$cond3 = $5 | $or$cond;
 if ($or$cond3) {
  _ERR_put_error(42,101,67,86740,253);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_ECDSA_SIG_new()|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _ERR_put_error(42,101,65,86740,259);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ((($6)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_BN_CTX_new()|0);
 $11 = ($10|0)==(0|0);
 L9: do {
  if ($11) {
   $order$0 = 0;$tmp$0 = 0;
   label = 9;
  } else {
   $12 = (_BN_new()|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $order$0 = 0;$tmp$0 = 0;
    label = 9;
   } else {
    $14 = (_BN_new()|0);
    $15 = ($14|0)==(0|0);
    if ($15) {
     $order$0 = $12;$tmp$0 = 0;
     label = 9;
    } else {
     $16 = (_BN_new()|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      $order$0 = $12;$tmp$0 = $14;
      label = 9;
     } else {
      $18 = (_EC_GROUP_get_order($1,$12,$10)|0);
      $19 = ($18|0)==(0);
      if ($19) {
       _ERR_put_error(42,101,16,86740,271);
       $m$1$ph = $16;$order$1$ph = $12;$tmp$1$ph = $14;
       label = 41;
       break;
      }
      $20 = (_BN_num_bits($12)|0);
      $21 = $dgst_len << 3;
      $22 = ($21|0)>($20|0);
      $23 = (($20) + 7)|0;
      $24 = (($23|0) / 8)&-1;
      $$08 = $22 ? $24 : $dgst_len;
      $25 = (_BN_bin2bn($dgst,$$08,$16)|0);
      $26 = ($25|0)==(0|0);
      if ($26) {
       _ERR_put_error(42,101,3,86740,281);
       $m$1$ph = $16;$order$1$ph = $12;$tmp$1$ph = $14;
       label = 41;
       break;
      }
      $27 = $$08 << 3;
      $28 = ($27|0)>($20|0);
      if ($28) {
       $29 = $20 & 7;
       $30 = (8 - ($29))|0;
       $31 = (_BN_rshift($16,$16,$30)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        _ERR_put_error(42,101,3,86740,286);
        $m$1$ph = $16;$order$1$ph = $12;$tmp$1$ph = $14;
        label = 41;
        break;
       }
      }
      $33 = ($in_kinv|0)==(0|0);
      $34 = ($in_r|0)==(0|0);
      $or$cond5 = $33 | $34;
      $35 = ((($9)) + 4|0);
      $36 = ($in_kinv|0)!=(0|0);
      $37 = ($in_r|0)!=(0|0);
      $or$cond7 = $36 & $37;
      L24: do {
       if ($or$cond5) {
        while(1) {
         $38 = (_ECDSA_sign_setup($eckey,$10,$kinv,$6)|0);
         $39 = ($38|0)==(0);
         if ($39) {
          break;
         }
         $40 = HEAP32[$kinv>>2]|0;
         $41 = HEAP32[$6>>2]|0;
         $42 = (_BN_mod_mul($14,$2,$41,$12,$10)|0);
         $43 = ($42|0)==(0);
         if ($43) {
          label = 34;
          break L24;
         }
         $44 = (_BN_mod_add_quick($9,$14,$16,$12)|0);
         $45 = ($44|0)==(0);
         if ($45) {
          label = 36;
          break L24;
         }
         $46 = (_BN_mod_mul($9,$9,$40,$12,$10)|0);
         $47 = ($46|0)==(0);
         if ($47) {
          label = 38;
          break L24;
         }
         $48 = HEAP32[$35>>2]|0;
         $49 = ($48|0)==(0);
         if (!($49)) {
          $m$110 = $16;$order$114 = $12;$ret$0 = $6;$tmp$112 = $14;
          break L9;
         }
         if ($or$cond7) {
          label = 40;
          break L24;
         }
        }
        _ERR_put_error(42,101,42,86740,292);
        $m$1$ph = $16;$order$1$ph = $12;$tmp$1$ph = $14;
        label = 41;
        break L9;
       } else {
        L34: do {
         if ($or$cond7) {
          $50 = HEAP32[$6>>2]|0;
          $51 = (_BN_copy($50,$in_r)|0);
          $52 = ($51|0)==(0|0);
          if (!($52)) {
           $53 = HEAP32[$6>>2]|0;
           $54 = (_BN_mod_mul($14,$2,$53,$12,$10)|0);
           $55 = ($54|0)==(0);
           if ($55) {
            label = 34;
            break L24;
           }
           $56 = (_BN_mod_add_quick($9,$14,$16,$12)|0);
           $57 = ($56|0)==(0);
           if ($57) {
            label = 36;
            break L24;
           }
           $58 = (_BN_mod_mul($9,$9,$in_kinv,$12,$10)|0);
           $59 = ($58|0)==(0);
           if ($59) {
            label = 38;
            break L24;
           }
           $60 = HEAP32[$35>>2]|0;
           $61 = ($60|0)==(0);
           if ($61) {
            label = 40;
            break L24;
           } else {
            $m$110 = $16;$order$114 = $12;$ret$0 = $6;$tmp$112 = $14;
            break L9;
           }
          }
         } else {
          while(1) {
           $62 = HEAP32[$6>>2]|0;
           $63 = (_BN_copy($62,$in_r)|0);
           $64 = ($63|0)==(0|0);
           if ($64) {
            break L34;
           }
           $65 = HEAP32[$6>>2]|0;
           $66 = (_BN_mod_mul($14,$2,$65,$12,$10)|0);
           $67 = ($66|0)==(0);
           if ($67) {
            label = 34;
            break L24;
           }
           $68 = (_BN_mod_add_quick($9,$14,$16,$12)|0);
           $69 = ($68|0)==(0);
           if ($69) {
            label = 36;
            break L24;
           }
           $70 = (_BN_mod_mul($9,$9,$in_kinv,$12,$10)|0);
           $71 = ($70|0)==(0);
           if ($71) {
            label = 38;
            break L24;
           }
           $72 = HEAP32[$35>>2]|0;
           $73 = ($72|0)==(0);
           if (!($73)) {
            $m$110 = $16;$order$114 = $12;$ret$0 = $6;$tmp$112 = $14;
            break L9;
           }
          }
         }
        } while(0);
        _ERR_put_error(42,101,65,86740,299);
        $m$1$ph = $16;$order$1$ph = $12;$tmp$1$ph = $14;
        label = 41;
        break L9;
       }
      } while(0);
      if ((label|0) == 34) {
       _ERR_put_error(42,101,3,86740,305);
       $m$1$ph = $16;$order$1$ph = $12;$tmp$1$ph = $14;
       label = 41;
       break;
      }
      else if ((label|0) == 36) {
       _ERR_put_error(42,101,3,86740,309);
       $m$1$ph = $16;$order$1$ph = $12;$tmp$1$ph = $14;
       label = 41;
       break;
      }
      else if ((label|0) == 38) {
       _ERR_put_error(42,101,3,86740,313);
       $m$1$ph = $16;$order$1$ph = $12;$tmp$1$ph = $14;
       label = 41;
       break;
      }
      else if ((label|0) == 40) {
       _ERR_put_error(42,101,106,86740,323);
       $m$1$ph = $16;$order$1$ph = $12;$tmp$1$ph = $14;
       label = 41;
       break;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  _ERR_put_error(42,101,65,86740,266);
  $m$1$ph = 0;$order$1$ph = $order$0;$tmp$1$ph = $tmp$0;
  label = 41;
 }
 if ((label|0) == 41) {
  _ECDSA_SIG_free($6);
  $m$110 = $m$1$ph;$order$114 = $order$1$ph;$ret$0 = 0;$tmp$112 = $tmp$1$ph;
 }
 if (!($11)) {
  _BN_CTX_free($10);
 }
 $74 = ($m$110|0)==(0|0);
 if (!($74)) {
  _BN_clear_free($m$110);
 }
 $75 = ($tmp$112|0)==(0|0);
 if (!($75)) {
  _BN_clear_free($tmp$112);
 }
 $76 = ($order$114|0)==(0|0);
 if (!($76)) {
  _BN_free($order$114);
 }
 $77 = HEAP32[$kinv>>2]|0;
 $78 = ($77|0)==(0|0);
 if ($78) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 _BN_clear_free($77);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _ecdsa_sign_setup($eckey,$ctx_in,$kinvp,$rp) {
 $eckey = $eckey|0;
 $ctx_in = $ctx_in|0;
 $kinvp = $kinvp|0;
 $rp = $rp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $ret$08 = 0, $tmp_point$0$ph = 0, $tmp_point$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($eckey|0)==(0|0);
 if (!($0)) {
  $1 = (_EC_KEY_get0_group($eckey)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ($ctx_in|0)==(0|0);
   if ($3) {
    $4 = (_BN_CTX_new()|0);
    $5 = ($4|0)==(0|0);
    if ($5) {
     _ERR_put_error(42,103,65,86740,106);
     $$0 = 0;
     return ($$0|0);
    } else {
     $ctx$0 = $4;
    }
   } else {
    $ctx$0 = $ctx_in;
   }
   $6 = (_BN_new()|0);
   $7 = (_BN_new()|0);
   $8 = (_BN_new()|0);
   $9 = (_BN_new()|0);
   $10 = ($6|0)!=(0|0);
   $11 = ($7|0)!=(0|0);
   $or$cond = $10 & $11;
   $12 = ($8|0)!=(0|0);
   $or$cond3 = $or$cond & $12;
   $13 = ($9|0)!=(0|0);
   $or$cond5 = $or$cond3 & $13;
   L9: do {
    if ($or$cond5) {
     $14 = (_EC_POINT_new($1)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      _ERR_put_error(42,103,16,86740,121);
      $tmp_point$0$ph = 0;
      label = 43;
      break;
     }
     $16 = (_EC_GROUP_get_order($1,$8,$ctx$0)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      _ERR_put_error(42,103,16,86740,125);
      $tmp_point$0$ph = $14;
      label = 43;
      break;
     }
     $18 = (_BN_rand_range($6,$8)|0);
     $19 = ($18|0)==(0);
     L17: do {
      if (!($19)) {
       $20 = ((($6)) + 4|0);
       $21 = ((($7)) + 4|0);
       while(1) {
        $22 = HEAP32[$20>>2]|0;
        $23 = ($22|0)==(0);
        if (!($23)) {
         $26 = (_BN_add($6,$6,$8)|0);
         $27 = ($26|0)==(0);
         if ($27) {
          $tmp_point$0$ph = $14;
          label = 43;
          break L9;
         }
         $28 = (_BN_num_bits($6)|0);
         $29 = (_BN_num_bits($8)|0);
         $30 = ($28|0)>($29|0);
         if (!($30)) {
          $31 = (_BN_add($6,$6,$8)|0);
          $32 = ($31|0)==(0);
          if ($32) {
           $tmp_point$0$ph = $14;
           label = 43;
           break L9;
          }
         }
         $33 = (_EC_POINT_mul($1,$14,$6,0,0,$ctx$0)|0);
         $34 = ($33|0)==(0);
         if ($34) {
          label = 22;
          break;
         }
         $35 = (_EC_GROUP_method_of($1)|0);
         $36 = (_EC_METHOD_get_field_type($35)|0);
         $37 = ($36|0)==(406);
         if ($37) {
          $38 = (_EC_POINT_get_affine_coordinates_GFp($1,$14,$9,0,$ctx$0)|0);
          $39 = ($38|0)==(0);
          if ($39) {
           label = 25;
           break;
          }
         }
         $40 = (_BN_nnmod($7,$9,$8,$ctx$0)|0);
         $41 = ($40|0)==(0);
         if ($41) {
          label = 27;
          break;
         }
         $42 = HEAP32[$21>>2]|0;
         $43 = ($42|0)==(0);
         if (!($43)) {
          label = 29;
          break;
         }
        }
        $24 = (_BN_rand_range($6,$8)|0);
        $25 = ($24|0)==(0);
        if ($25) {
         break L17;
        }
       }
       if ((label|0) == 22) {
        _ERR_put_error(42,103,16,86740,152);
        $tmp_point$0$ph = $14;
        label = 43;
        break L9;
       }
       else if ((label|0) == 25) {
        _ERR_put_error(42,103,16,86740,159);
        $tmp_point$0$ph = $14;
        label = 43;
        break L9;
       }
       else if ((label|0) == 27) {
        _ERR_put_error(42,103,3,86740,175);
        $tmp_point$0$ph = $14;
        label = 43;
        break L9;
       }
       else if ((label|0) == 29) {
        $44 = (_EC_GROUP_get_mont_data($1)|0);
        $45 = ($44|0)==(0|0);
        if ($45) {
         $56 = (_BN_mod_inverse($6,$6,$8,$ctx$0)|0);
         $57 = ($56|0)==(0|0);
         if ($57) {
          _ERR_put_error(42,103,3,86740,203);
          $tmp_point$0$ph = $14;
          label = 43;
          break L9;
         }
        } else {
         $46 = (_BN_set_word($9,2)|0);
         $47 = ($46|0)==(0);
         if ($47) {
          _ERR_put_error(42,103,3,86740,188);
          $tmp_point$0$ph = $14;
          label = 43;
          break L9;
         }
         $48 = (_BN_mod_sub($9,$8,$9,$8,$ctx$0)|0);
         $49 = ($48|0)==(0);
         if ($49) {
          _ERR_put_error(42,103,3,86740,192);
          $tmp_point$0$ph = $14;
          label = 43;
          break L9;
         }
         $50 = ((($9)) + 16|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = $51 | 4;
         HEAP32[$50>>2] = $52;
         $53 = (_EC_GROUP_get_mont_data($1)|0);
         $54 = (_BN_mod_exp_mont_consttime($6,$6,$9,$8,$ctx$0,$53)|0);
         $55 = ($54|0)==(0);
         if ($55) {
          _ERR_put_error(42,103,3,86740,198);
          $tmp_point$0$ph = $14;
          label = 43;
          break L9;
         }
        }
        $58 = HEAP32[$rp>>2]|0;
        $59 = ($58|0)==(0|0);
        if (!($59)) {
         _BN_clear_free($58);
        }
        $60 = HEAP32[$kinvp>>2]|0;
        $61 = ($60|0)==(0|0);
        if (!($61)) {
         _BN_clear_free($60);
        }
        HEAP32[$rp>>2] = $7;
        HEAP32[$kinvp>>2] = $6;
        $ret$08 = 1;$tmp_point$06 = $14;
        break L9;
       }
      }
     } while(0);
     _ERR_put_error(42,103,104,86740,134);
     $tmp_point$0$ph = $14;
     label = 43;
    } else {
     _ERR_put_error(42,103,65,86740,117);
     $tmp_point$0$ph = 0;
     label = 43;
    }
   } while(0);
   if ((label|0) == 43) {
    if ($10) {
     _BN_clear_free($6);
    }
    if ($11) {
     _BN_clear_free($7);
     $ret$08 = 0;$tmp_point$06 = $tmp_point$0$ph;
    } else {
     $ret$08 = 0;$tmp_point$06 = $tmp_point$0$ph;
    }
   }
   if ($3) {
    _BN_CTX_free($ctx$0);
   }
   if ($12) {
    _BN_free($8);
   }
   $62 = ($tmp_point$06|0)==(0|0);
   if (!($62)) {
    _EC_POINT_free($tmp_point$06);
   }
   if (!($13)) {
    $$0 = $ret$08;
    return ($$0|0);
   }
   _BN_clear_free($9);
   $$0 = $ret$08;
   return ($$0|0);
  }
 }
 _ERR_put_error(42,103,67,86740,100);
 $$0 = 0;
 return ($$0|0);
}
function _ecdsa_do_verify($dgst,$dgst_len,$sig,$eckey) {
 $dgst = $dgst|0;
 $dgst_len = $dgst_len|0;
 $sig = $sig|0;
 $eckey = $eckey|0;
 var $$0 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $or$cond = 0, $point$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($eckey|0)==(0|0);
 if (!($0)) {
  $1 = (_EC_KEY_get0_group($eckey)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = (_EC_KEY_get0_public_key($eckey)|0);
   $4 = ($3|0)==(0|0);
   $5 = ($sig|0)==(0|0);
   $or$cond = $5 | $4;
   if (!($or$cond)) {
    $6 = (_BN_CTX_new()|0);
    $7 = ($6|0)==(0|0);
    if ($7) {
     _ERR_put_error(42,102,65,86740,370);
     $$0 = -1;
     return ($$0|0);
    }
    _BN_CTX_start($6);
    $8 = (_BN_CTX_get($6)|0);
    $9 = (_BN_CTX_get($6)|0);
    $10 = (_BN_CTX_get($6)|0);
    $11 = (_BN_CTX_get($6)|0);
    $12 = (_BN_CTX_get($6)|0);
    $13 = ($12|0)==(0|0);
    L9: do {
     if ($13) {
      _ERR_put_error(42,102,3,86740,380);
      $point$0 = 0;$ret$0 = -1;
     } else {
      $14 = (_EC_GROUP_get_order($1,$8,$6)|0);
      $15 = ($14|0)==(0);
      if ($15) {
       _ERR_put_error(42,102,16,86740,385);
       $point$0 = 0;$ret$0 = -1;
       break;
      }
      $16 = HEAP32[$sig>>2]|0;
      $17 = ((($16)) + 4|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ($18|0)==(0);
      if (!($19)) {
       $20 = ((($16)) + 12|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)==(0);
       if ($22) {
        $23 = (_BN_ucmp($16,$8)|0);
        $24 = ($23|0)>(-1);
        if (!($24)) {
         $25 = ((($sig)) + 4|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ((($26)) + 4|0);
         $28 = HEAP32[$27>>2]|0;
         $29 = ($28|0)==(0);
         if (!($29)) {
          $30 = ((($26)) + 12|0);
          $31 = HEAP32[$30>>2]|0;
          $32 = ($31|0)==(0);
          if ($32) {
           $33 = (_BN_ucmp($26,$8)|0);
           $34 = ($33|0)>(-1);
           if (!($34)) {
            $35 = HEAP32[$25>>2]|0;
            $36 = (_BN_mod_inverse($10,$35,$8,$6)|0);
            $37 = ($36|0)==(0|0);
            if ($37) {
             _ERR_put_error(42,102,3,86740,398);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $38 = (_BN_num_bits($8)|0);
            $39 = $dgst_len << 3;
            $40 = ($39|0)>($38|0);
            $41 = (($38) + 7)|0;
            $42 = (($41|0) / 8)&-1;
            $$02 = $40 ? $42 : $dgst_len;
            $43 = (_BN_bin2bn($dgst,$$02,$11)|0);
            $44 = ($43|0)==(0|0);
            if ($44) {
             _ERR_put_error(42,102,3,86740,409);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $45 = $$02 << 3;
            $46 = ($45|0)>($38|0);
            if ($46) {
             $47 = $38 & 7;
             $48 = (8 - ($47))|0;
             $49 = (_BN_rshift($11,$11,$48)|0);
             $50 = ($49|0)==(0);
             if ($50) {
              _ERR_put_error(42,102,3,86740,414);
              $point$0 = 0;$ret$0 = -1;
              break;
             }
            }
            $51 = (_BN_mod_mul($9,$11,$10,$8,$6)|0);
            $52 = ($51|0)==(0);
            if ($52) {
             _ERR_put_error(42,102,3,86740,419);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $53 = HEAP32[$sig>>2]|0;
            $54 = (_BN_mod_mul($10,$53,$10,$8,$6)|0);
            $55 = ($54|0)==(0);
            if ($55) {
             _ERR_put_error(42,102,3,86740,424);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $56 = (_EC_POINT_new($1)|0);
            $57 = ($56|0)==(0|0);
            if ($57) {
             _ERR_put_error(42,102,65,86740,429);
             $point$0 = 0;$ret$0 = -1;
             break;
            }
            $58 = (_EC_POINT_mul($1,$56,$9,$3,$10,$6)|0);
            $59 = ($58|0)==(0);
            if ($59) {
             _ERR_put_error(42,102,16,86740,433);
             $point$0 = $56;$ret$0 = -1;
             break;
            }
            $60 = (_EC_GROUP_method_of($1)|0);
            $61 = (_EC_METHOD_get_field_type($60)|0);
            $62 = ($61|0)==(406);
            do {
             if ($62) {
              $63 = (_EC_POINT_get_affine_coordinates_GFp($1,$56,$12,0,$6)|0);
              $64 = ($63|0)==(0);
              if (!($64)) {
               break;
              }
              _ERR_put_error(42,102,16,86740,439);
              $point$0 = $56;$ret$0 = -1;
              break L9;
             }
            } while(0);
            $65 = (_BN_nnmod($9,$12,$8,$6)|0);
            $66 = ($65|0)==(0);
            if ($66) {
             _ERR_put_error(42,102,3,86740,453);
             $point$0 = $56;$ret$0 = -1;
             break;
            } else {
             $67 = HEAP32[$sig>>2]|0;
             $68 = (_BN_ucmp($9,$67)|0);
             $69 = ($68|0)==(0);
             $70 = $69&1;
             $point$0 = $56;$ret$0 = $70;
             break;
            }
           }
          }
         }
        }
       }
      }
      _ERR_put_error(42,102,100,86740,392);
      $point$0 = 0;$ret$0 = 0;
     }
    } while(0);
    _BN_CTX_end($6);
    _BN_CTX_free($6);
    $71 = ($point$0|0)==(0|0);
    if ($71) {
     $$0 = $ret$0;
     return ($$0|0);
    }
    _EC_POINT_free($point$0);
    $$0 = $ret$0;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(42,102,103,86740,364);
 $$0 = -1;
 return ($$0|0);
}
function _ECDSA_sign($type,$dgst,$dlen,$sig,$siglen,$eckey) {
 $type = $type|0;
 $dgst = $dgst|0;
 $dlen = $dlen|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $eckey = $eckey|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $sig;
 _RAND_seed($dgst,$dlen);
 $1 = (_ecdsa_check($eckey)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiiiii[$6 & 63]($dgst,$dlen,0,0,$eckey)|0);
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = (_i2d_ECDSA_SIG($7,$0)|0);
   HEAP32[$siglen>>2] = $9;
   _ECDSA_SIG_free($7);
   $$0$i = 1;
   STACKTOP = sp;return ($$0$i|0);
  }
 }
 HEAP32[$siglen>>2] = 0;
 $$0$i = 0;
 STACKTOP = sp;return ($$0$i|0);
}
function _ECDSA_sign_setup($eckey,$ctx_in,$kinvp,$rp) {
 $eckey = $eckey|0;
 $ctx_in = $ctx_in|0;
 $kinvp = $kinvp|0;
 $rp = $rp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ecdsa_check($eckey)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$5 & 127]($eckey,$ctx_in,$kinvp,$rp)|0);
 $$0 = $6;
 return ($$0|0);
}
function _ECDSA_verify($type,$dgst,$dgst_len,$sigbuf,$sig_len,$eckey) {
 $type = $type|0;
 $dgst = $dgst|0;
 $dgst_len = $dgst_len|0;
 $sigbuf = $sigbuf|0;
 $sig_len = $sig_len|0;
 $eckey = $eckey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $der = 0, $p = 0, $ret$0 = 0, $ret$01 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $s = sp + 8|0;
 $p = sp + 4|0;
 $der = sp;
 HEAP32[$p>>2] = $sigbuf;
 HEAP32[$der>>2] = 0;
 $0 = (_ECDSA_SIG_new()|0);
 HEAP32[$s>>2] = $0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_d2i_ECDSA_SIG($s,$p,$sig_len)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $ret$01 = -1;
 } else {
  $4 = HEAP32[$s>>2]|0;
  $5 = (_i2d_ECDSA_SIG($4,$der)|0);
  $6 = ($5|0)==($sig_len|0);
  if ($6) {
   $7 = HEAP32[$der>>2]|0;
   $8 = (_memcmp($sigbuf,$7,$sig_len)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = HEAP32[$s>>2]|0;
    $11 = (_ecdsa_check($eckey)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     $ret$0 = 0;
    } else {
     $13 = ((($11)) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($14)) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (FUNCTION_TABLE_iiiii[$16 & 127]($dgst,$dgst_len,$10,$eckey)|0);
     $ret$0 = $17;
    }
   } else {
    $ret$0 = -1;
   }
  } else {
   $ret$0 = -1;
  }
  $18 = ($5|0)>(0);
  if ($18) {
   $19 = HEAP32[$der>>2]|0;
   _OPENSSL_cleanse($19,$5);
   $20 = HEAP32[$der>>2]|0;
   _CRYPTO_free($20);
   $ret$01 = $ret$0;
  } else {
   $ret$01 = $ret$0;
  }
 }
 $21 = HEAP32[$s>>2]|0;
 _ECDSA_SIG_free($21);
 $$0 = $ret$01;
 STACKTOP = sp;return ($$0|0);
}
function _eckey_pub_decode($pkey,$pubkey) {
 $pkey = $pkey|0;
 $pubkey = $pubkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eckey = 0, $p = 0, $palg = 0, $pklen = 0, $ptype = 0, $pval = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $p = sp + 20|0;
 $pval = sp + 16|0;
 $ptype = sp + 12|0;
 $pklen = sp + 8|0;
 $eckey = sp + 4|0;
 $palg = sp;
 HEAP32[$p>>2] = 0;
 HEAP32[$eckey>>2] = 0;
 $0 = (_X509_PUBKEY_get0_param(0,$p,$pklen,$palg,$pubkey)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$palg>>2]|0;
 _X509_ALGOR_get0(0,$ptype,$pval,$2);
 $3 = HEAP32[$ptype>>2]|0;
 $4 = HEAP32[$pval>>2]|0;
 $5 = (_eckey_type2param($3,$4)|0);
 HEAP32[$eckey>>2] = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _ERR_put_error(16,215,16,86775,199);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$pklen>>2]|0;
 $8 = (_o2i_ECPublicKey($eckey,$p,$7)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $12 = HEAP32[$eckey>>2]|0;
  (_EVP_PKEY_assign($pkey,408,$12)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _ERR_put_error(16,215,142,86775,205);
 $10 = HEAP32[$eckey>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _EC_KEY_free($10);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _eckey_pub_encode($pk,$pkey) {
 $pk = $pk|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $p = 0, $penc$0 = 0, $ptype = 0, $pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pval = sp + 8|0;
 $ptype = sp + 4|0;
 $p = sp;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$pval>>2] = 0;
 $2 = (_eckey_param2type($ptype,$pval,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _ERR_put_error(16,216,16,86775,114);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_i2o_ECPublicKey($1,0)|0);
 $5 = ($4|0)<(1);
 if ($5) {
  $penc$0 = 0;
 } else {
  $6 = (_CRYPTO_malloc($4,86775,120)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $penc$0 = 0;
  } else {
   HEAP32[$p>>2] = $6;
   $8 = (_i2o_ECPublicKey($1,$p)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    $penc$0 = $6;
   } else {
    $10 = (_OBJ_nid2obj(408)|0);
    $11 = HEAP32[$ptype>>2]|0;
    $12 = HEAP32[$pval>>2]|0;
    $13 = (_X509_PUBKEY_set0_param($pk,$10,$11,$12,$6,$8)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $penc$0 = $6;
    } else {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $15 = HEAP32[$ptype>>2]|0;
 $16 = ($15|0)==(6);
 $17 = HEAP32[$pval>>2]|0;
 if ($16) {
  _ASN1_OBJECT_free($17);
 } else {
  _ASN1_STRING_free($17);
 }
 $18 = ($penc$0|0)==(0|0);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_free($penc$0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _eckey_pub_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $switch$select = 0, $switch$select2 = 0, $switch$selectcmp = 0, $switch$selectcmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EC_KEY_get0_group($1)|0);
 $3 = ((($a)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_EC_KEY_get0_public_key($4)|0);
 $6 = HEAP32[$0>>2]|0;
 $7 = (_EC_KEY_get0_public_key($6)|0);
 $8 = (_EC_POINT_cmp($2,$5,$7,0)|0);
 $switch$selectcmp = ($8|0)==(1);
 $switch$select = $switch$selectcmp ? 0 : -2;
 $switch$selectcmp1 = ($8|0)==(0);
 $switch$select2 = $switch$selectcmp1 ? 1 : $switch$select;
 return ($switch$select2|0);
}
function _eckey_pub_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_EC_KEY_print($bp,$1,$indent,1)|0);
 return ($2|0);
}
function _eckey_priv_decode($pkey,$p8) {
 $pkey = $pkey|0;
 $p8 = $p8|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eckey = 0, $p = 0, $palg = 0, $pklen = 0, $ptype = 0, $pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $p = sp + 20|0;
 $pval = sp + 16|0;
 $ptype = sp + 12|0;
 $pklen = sp + 8|0;
 $eckey = sp + 4|0;
 $palg = sp;
 HEAP32[$p>>2] = 0;
 HEAP32[$eckey>>2] = 0;
 $0 = (_PKCS8_pkey_get0(0,$p,$pklen,$palg,$p8)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$palg>>2]|0;
 _X509_ALGOR_get0(0,$ptype,$pval,$2);
 $3 = HEAP32[$ptype>>2]|0;
 $4 = HEAP32[$pval>>2]|0;
 $5 = (_eckey_type2param($3,$4)|0);
 HEAP32[$eckey>>2] = $5;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   label = 15;
  } else {
   $7 = HEAP32[$pklen>>2]|0;
   $8 = (_d2i_ECPrivateKey($eckey,$p,$7)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    _ERR_put_error(16,213,142,86775,251);
    break;
   }
   $10 = HEAP32[$eckey>>2]|0;
   $11 = (_EC_KEY_get0_public_key($10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = HEAP32[$eckey>>2]|0;
    $14 = (_EC_KEY_get0_group($13)|0);
    $15 = (_EC_POINT_new($14)|0);
    $16 = ($15|0)==(0|0);
    if ($16) {
     _ERR_put_error(16,213,16,86775,267);
     label = 15;
     break;
    }
    $17 = (_EC_GROUP_get0_generator($14)|0);
    $18 = (_EC_POINT_copy($15,$17)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     _EC_POINT_free($15);
     _ERR_put_error(16,213,16,86775,272);
     label = 15;
     break;
    }
    $20 = HEAP32[$eckey>>2]|0;
    $21 = (_EC_KEY_get0_private_key($20)|0);
    $22 = (_EC_POINT_mul($14,$15,$21,0,0,0)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     _EC_POINT_free($15);
     _ERR_put_error(16,213,16,86775,278);
     label = 15;
     break;
    }
    $24 = HEAP32[$eckey>>2]|0;
    $25 = (_EC_KEY_set_public_key($24,$15)|0);
    $26 = ($25|0)==(0);
    _EC_POINT_free($15);
    if ($26) {
     _ERR_put_error(16,213,16,86775,283);
     label = 15;
     break;
    }
   }
   $27 = HEAP32[$eckey>>2]|0;
   (_EVP_PKEY_assign($pkey,408,$27)|0);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if ((label|0) == 15) {
  _ERR_put_error(16,213,16,86775,293);
 }
 $28 = HEAP32[$eckey>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _EC_KEY_free($28);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _eckey_priv_encode($p8,$pkey) {
 $p8 = $p8|0;
 $pkey = $pkey|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $p = 0;
 var $ptype = 0, $pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp + 8|0;
 $ptype = sp + 4|0;
 $pval = sp;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_eckey_param2type($ptype,$pval,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _ERR_put_error(16,214,142,86775,311);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_EC_KEY_get_enc_flags($1)|0);
 $5 = $4 | 1;
 _EC_KEY_set_enc_flags($1,$5);
 $6 = (_i2d_ECPrivateKey($1,0)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  _EC_KEY_set_enc_flags($1,$4);
  _ERR_put_error(16,214,16,86775,327);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_CRYPTO_malloc($6,86775,330)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  _EC_KEY_set_enc_flags($1,$4);
  _ERR_put_error(16,214,65,86775,333);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$p>>2] = $8;
 $10 = (_i2d_ECPrivateKey($1,$p)|0);
 $11 = ($10|0)==(0);
 _EC_KEY_set_enc_flags($1,$4);
 if ($11) {
  _CRYPTO_free($8);
  _ERR_put_error(16,214,16,86775,340);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $12 = (_OBJ_nid2obj(408)|0);
  $13 = HEAP32[$ptype>>2]|0;
  $14 = HEAP32[$pval>>2]|0;
  $15 = (_PKCS8_pkey_set0($p8,$12,0,$13,$14,$8,$6)|0);
  $not$ = ($15|0)!=(0);
  $$ = $not$&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _eckey_priv_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_EC_KEY_print($bp,$1,$indent,2)|0);
 return ($2|0);
}
function _int_ec_size($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ECDSA_size($1)|0);
 return ($2|0);
}
function _ec_bits($pkey) {
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_clear_error();
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($pkey)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_EC_KEY_get0_group($3)|0);
 $5 = (_EC_GROUP_get_order($4,$0,0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  _ERR_clear_error();
  $$0 = 0;
  return ($$0|0);
 } else {
  $7 = (_BN_num_bits($0)|0);
  _BN_free($0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _eckey_param_decode($pkey,$pder,$derlen) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 $derlen = $derlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_d2i_ECParameters(0,$pder,$derlen)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(16,212,16,86775,506);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_EVP_PKEY_assign($pkey,408,$0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _eckey_param_encode($pkey,$pder) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_i2d_ECParameters($1,$pder)|0);
 return ($2|0);
}
function _ec_missing_parameters($pkey) {
 $pkey = $pkey|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EC_KEY_get0_group($1)|0);
 $3 = ($2|0)==(0|0);
 $$ = $3&1;
 return ($$|0);
}
function _ec_copy_parameters($to,$from) {
 $to = $to|0;
 $from = $from|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($from)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EC_KEY_get0_group($1)|0);
 $3 = (_EC_GROUP_dup($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($to)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_EC_KEY_set_group($6,$3)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 _EC_GROUP_free($3);
 $$0 = 1;
 return ($$0|0);
}
function _ec_cmp_parameters($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EC_KEY_get0_group($1)|0);
 $3 = ((($b)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_EC_KEY_get0_group($4)|0);
 $6 = (_EC_GROUP_cmp($2,$5,0)|0);
 $7 = ($6|0)==(0);
 $$ = $7&1;
 return ($$|0);
}
function _eckey_param_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_EC_KEY_print($bp,$1,$indent,0)|0);
 return ($2|0);
}
function _int_ec_free($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 _EC_KEY_free($1);
 return;
}
function _ec_pkey_ctrl($pkey,$op,$arg1,$arg2) {
 $pkey = $pkey|0;
 $op = $op|0;
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $$$i = 0, $$$i$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i3 = 0, $$pr$i = 0, $$pr$i$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $alg$i = 0, $alg$i$i = 0, $alg1 = 0, $alg13 = 0, $alg2 = 0, $alg24 = 0, $aoid$i = 0, $aoid$i$i = 0, $atype$i$i = 0, $aval$i$i = 0, $cofactor$0$i$i$i = 0, $der$i$i = 0, $ecdh_nid$0$i = 0, $ecpeer$i$i = 0, $kdf_md$i = 0, $kdf_nid$i = 0, $kdf_nid$i$i$i = 0, $kdfmd_nid$i$i$i = 0, $not$$i$i$i = 0, $or$cond$i = 0;
 var $or$cond$i2 = 0, $or$cond3$i$i = 0, $p$i = 0, $p$i$i = 0, $p$i2$i = 0, $penc$i = 0, $pkpeer$0$ph$i$i = 0, $pubkey$i = 0, $pubkey$i1 = 0, $rv$0$i = 0, $rv$0$ph$i = 0, $rv$0$ph$i$i = 0, $rv$0$ph$i3$i = 0, $rv$057$i$i = 0, $snid = 0, $snid1 = 0, $talg$i = 0, $ukm$i = 0, $ukm$i$i = 0, $wrap_alg$0$i = 0;
 var $wrap_alg$0$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $talg$i = sp + 104|0;
 $aoid$i = sp + 100|0;
 $pubkey$i1 = sp + 96|0;
 $ukm$i = sp + 92|0;
 $penc$i = sp + 88|0;
 $kdf_nid$i = sp + 84|0;
 $kdf_md$i = sp + 80|0;
 $p$i = sp + 76|0;
 $kdf_nid$i$i$i = sp + 72|0;
 $kdfmd_nid$i$i$i = sp + 68|0;
 $alg$i$i = sp + 64|0;
 $ukm$i$i = sp + 60|0;
 $p$i2$i = sp + 56|0;
 $der$i$i = sp + 52|0;
 $aoid$i$i = sp + 48|0;
 $atype$i$i = sp + 44|0;
 $aval$i$i = sp + 40|0;
 $ecpeer$i$i = sp + 36|0;
 $p$i$i = sp + 32|0;
 $alg$i = sp + 28|0;
 $pubkey$i = sp + 24|0;
 $snid = sp + 20|0;
 $alg1 = sp + 16|0;
 $alg2 = sp + 12|0;
 $snid1 = sp + 8|0;
 $alg13 = sp + 4|0;
 $alg24 = sp;
 switch ($op|0) {
 case 1:  {
  $0 = ($arg1|0)==(0);
  if (!($0)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  _PKCS7_SIGNER_INFO_get0_algs($arg2,0,$alg1,$alg2);
  $1 = HEAP32[$alg1>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $5 = (_OBJ_obj2nid($3)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $7 = (_EVP_PKEY_id($pkey)|0);
  $8 = (_OBJ_find_sigid_by_algs($snid,$5,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $10 = HEAP32[$alg2>>2]|0;
  $11 = HEAP32[$snid>>2]|0;
  $12 = (_OBJ_nid2obj($11)|0);
  (_X509_ALGOR_set0($10,$12,-1,0)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 5:  {
  $13 = ($arg1|0)==(0);
  if (!($13)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  _CMS_SignerInfo_get0_algs($arg2,0,0,$alg13,$alg24);
  $14 = HEAP32[$alg13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = HEAP32[$14>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $18 = (_OBJ_obj2nid($16)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $20 = (_EVP_PKEY_id($pkey)|0);
  $21 = (_OBJ_find_sigid_by_algs($snid1,$18,$20)|0);
  $22 = ($21|0)==(0);
  if ($22) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $23 = HEAP32[$alg24>>2]|0;
  $24 = HEAP32[$snid1>>2]|0;
  $25 = (_OBJ_nid2obj($24)|0);
  (_X509_ALGOR_set0($23,$25,-1,0)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 7:  {
  switch ($arg1|0) {
  case 1:  {
   $26 = (_CMS_RecipientInfo_get0_pkey_ctx($arg2)|0);
   $27 = ($26|0)==(0|0);
   do {
    if ($27) {
     $$0$i = 0;
    } else {
     $28 = (_EVP_PKEY_CTX_get0_peerkey($26)|0);
     $29 = ($28|0)==(0|0);
     if ($29) {
      $30 = (_CMS_RecipientInfo_kari_get0_orig_id($arg2,$alg$i,$pubkey$i,0,0,0)|0);
      $31 = ($30|0)==(0);
      if ($31) {
       $$0$i = 0;
       break;
      }
      $32 = HEAP32[$alg$i>>2]|0;
      $33 = ($32|0)!=(0|0);
      $34 = HEAP32[$pubkey$i>>2]|0;
      $35 = ($34|0)!=(0|0);
      $or$cond$i = $33 & $35;
      if (!($or$cond$i)) {
       $$0$i = 0;
       break;
      }
      HEAP32[$ecpeer$i$i>>2] = 0;
      _X509_ALGOR_get0($aoid$i$i,$atype$i$i,$aval$i$i,$32);
      $36 = HEAP32[$aoid$i$i>>2]|0;
      $37 = (_OBJ_obj2nid($36)|0);
      $38 = ($37|0)==(408);
      L45: do {
       if ($38) {
        $39 = HEAP32[$atype$i$i>>2]|0;
        switch ($39|0) {
        case 5: case -1:  {
         $40 = (_EVP_PKEY_CTX_get0_pkey($26)|0);
         $41 = ($40|0)==(0|0);
         if ($41) {
          $pkpeer$0$ph$i$i = 0;$rv$0$ph$i$i = 0;
          label = 29;
          break L45;
         }
         $42 = ((($40)) + 20|0);
         $43 = HEAP32[$42>>2]|0;
         $44 = (_EC_KEY_get0_group($43)|0);
         $45 = (_EC_KEY_new()|0);
         HEAP32[$ecpeer$i$i>>2] = $45;
         $46 = ($45|0)==(0|0);
         if ($46) {
          $rv$057$i$i = 0;
          break L45;
         }
         $47 = (_EC_KEY_set_group($45,$44)|0);
         $48 = ($47|0)==(0);
         if ($48) {
          $pkpeer$0$ph$i$i = 0;$rv$0$ph$i$i = 0;
          label = 29;
          break L45;
         }
         break;
        }
        default: {
         $49 = HEAP32[$aval$i$i>>2]|0;
         $50 = (_eckey_type2param($39,$49)|0);
         HEAP32[$ecpeer$i$i>>2] = $50;
         $51 = ($50|0)==(0|0);
         if ($51) {
          $rv$057$i$i = 0;
          break L45;
         }
        }
        }
        $52 = (_ASN1_STRING_length($34)|0);
        $53 = (_ASN1_STRING_data($34)|0);
        HEAP32[$p$i$i>>2] = $53;
        $54 = ($53|0)!=(0|0);
        $55 = ($52|0)!=(0);
        $or$cond3$i$i = $55 & $54;
        if ($or$cond3$i$i) {
         $56 = (_o2i_ECPublicKey($ecpeer$i$i,$p$i$i,$52)|0);
         $57 = ($56|0)==(0|0);
         if ($57) {
          $pkpeer$0$ph$i$i = 0;$rv$0$ph$i$i = 0;
          label = 29;
         } else {
          $58 = (_EVP_PKEY_new()|0);
          $59 = ($58|0)==(0|0);
          if ($59) {
           $pkpeer$0$ph$i$i = 0;$rv$0$ph$i$i = 0;
           label = 29;
          } else {
           $60 = HEAP32[$ecpeer$i$i>>2]|0;
           (_EVP_PKEY_set1_EC_KEY($58,$60)|0);
           $61 = (_EVP_PKEY_derive_set_peer($26,$58)|0);
           $62 = ($61|0)>(0);
           $$$i$i = $62&1;
           $pkpeer$0$ph$i$i = $58;$rv$0$ph$i$i = $$$i$i;
           label = 29;
          }
         }
        } else {
         $pkpeer$0$ph$i$i = 0;$rv$0$ph$i$i = 0;
         label = 29;
        }
       } else {
        $pkpeer$0$ph$i$i = 0;$rv$0$ph$i$i = 0;
        label = 29;
       }
      } while(0);
      if ((label|0) == 29) {
       $$pr$i$i = HEAP32[$ecpeer$i$i>>2]|0;
       $63 = ($$pr$i$i|0)==(0|0);
       if (!($63)) {
        _EC_KEY_free($$pr$i$i);
       }
       $64 = ($pkpeer$0$ph$i$i|0)==(0|0);
       if ($64) {
        $rv$057$i$i = $rv$0$ph$i$i;
       } else {
        _EVP_PKEY_free($pkpeer$0$ph$i$i);
        $rv$057$i$i = $rv$0$ph$i$i;
       }
      }
      $65 = ($rv$057$i$i|0)==(0);
      if ($65) {
       _ERR_put_error(16,238,149,86775,810);
       $$0$i = 0;
       break;
      }
     }
     HEAP32[$der$i$i>>2] = 0;
     $66 = (_CMS_RecipientInfo_kari_get0_alg($arg2,$alg$i$i,$ukm$i$i)|0);
     $67 = ($66|0)==(0);
     L65: do {
      if ($67) {
       $$0$i$i = 0;
      } else {
       $68 = HEAP32[$alg$i$i>>2]|0;
       $69 = HEAP32[$68>>2]|0;
       $70 = (_OBJ_obj2nid($69)|0);
       $71 = ($70|0)==(0);
       L67: do {
        if ($71) {
         label = 43;
        } else {
         $72 = (_OBJ_find_sigid_algs($70,$kdfmd_nid$i$i$i,$kdf_nid$i$i$i)|0);
         $73 = ($72|0)==(0);
         if ($73) {
          label = 43;
         } else {
          $74 = HEAP32[$kdf_nid$i$i$i>>2]|0;
          switch ($74|0) {
          case 946:  {
           $cofactor$0$i$i$i = 0;
           break;
          }
          case 947:  {
           $cofactor$0$i$i$i = 1;
           break;
          }
          default: {
           label = 43;
           break L67;
          }
          }
          $75 = (_EVP_PKEY_CTX_ctrl($26,408,1024,4099,$cofactor$0$i$i$i,0)|0);
          $76 = ($75|0)<(1);
          if ($76) {
           label = 43;
          } else {
           $77 = (_EVP_PKEY_CTX_ctrl($26,408,1024,4100,2,0)|0);
           $78 = ($77|0)<(1);
           if ($78) {
            label = 43;
           } else {
            $79 = HEAP32[$kdfmd_nid$i$i$i>>2]|0;
            $80 = (_OBJ_nid2sn($79)|0);
            $81 = (_EVP_get_digestbyname($80)|0);
            $82 = ($81|0)==(0|0);
            if ($82) {
             label = 43;
            } else {
             $83 = (_EVP_PKEY_CTX_ctrl($26,408,1024,4101,0,$81)|0);
             $not$$i$i$i = ($83|0)>(0);
             if ($not$$i$i$i) {
              $84 = HEAP32[$alg$i$i>>2]|0;
              $85 = ((($84)) + 4|0);
              $86 = HEAP32[$85>>2]|0;
              $87 = HEAP32[$86>>2]|0;
              $88 = ($87|0)==(16);
              if (!($88)) {
               $$0$i$i = 0;
               break L65;
              }
              $89 = ((($86)) + 4|0);
              $90 = HEAP32[$89>>2]|0;
              $91 = ((($90)) + 8|0);
              $92 = HEAP32[$91>>2]|0;
              HEAP32[$p$i2$i>>2] = $92;
              $93 = HEAP32[$85>>2]|0;
              $94 = ((($93)) + 4|0);
              $95 = HEAP32[$94>>2]|0;
              $96 = HEAP32[$95>>2]|0;
              $97 = (_d2i_X509_ALGOR(0,$p$i2$i,$96)|0);
              $98 = ($97|0)==(0|0);
              if ($98) {
               $$0$i$i = 0;
               break L65;
              }
              $99 = (_CMS_RecipientInfo_kari_get0_ctx($arg2)|0);
              $100 = ($99|0)==(0|0);
              do {
               if ($100) {
                $rv$0$ph$i3$i = 0;
               } else {
                $101 = HEAP32[$97>>2]|0;
                $102 = (_OBJ_obj2nid($101)|0);
                $103 = (_OBJ_nid2sn($102)|0);
                $104 = (_EVP_get_cipherbyname($103)|0);
                $105 = ($104|0)==(0|0);
                if ($105) {
                 $rv$0$ph$i3$i = 0;
                } else {
                 $106 = (_EVP_CIPHER_flags($104)|0);
                 $107 = $106 & 983047;
                 $108 = ($107|0)==(65538);
                 if ($108) {
                  $109 = (_EVP_EncryptInit_ex($99,$104,0,0,0)|0);
                  $110 = ($109|0)==(0);
                  if ($110) {
                   $rv$0$ph$i3$i = 0;
                   break;
                  }
                  $111 = ((($97)) + 4|0);
                  $112 = HEAP32[$111>>2]|0;
                  $113 = (_EVP_CIPHER_asn1_to_param($99,$112)|0);
                  $114 = ($113|0)<(1);
                  if ($114) {
                   $rv$0$ph$i3$i = 0;
                   break;
                  }
                  $115 = (_EVP_CIPHER_CTX_key_length($99)|0);
                  $116 = (_EVP_PKEY_CTX_ctrl($26,408,1024,4103,$115,0)|0);
                  $117 = ($116|0)<(1);
                  if ($117) {
                   $rv$0$ph$i3$i = 0;
                   break;
                  }
                  $118 = HEAP32[$ukm$i$i>>2]|0;
                  $119 = (_CMS_SharedInfo_encode($der$i$i,$97,$118,$115)|0);
                  $120 = ($119|0)==(0);
                  if ($120) {
                   $rv$0$ph$i3$i = 0;
                   break;
                  }
                  $121 = HEAP32[$der$i$i>>2]|0;
                  $122 = (_EVP_PKEY_CTX_ctrl($26,408,1024,4105,$119,$121)|0);
                  $123 = ($122|0)<(1);
                  if ($123) {
                   $rv$0$ph$i3$i = 0;
                   break;
                  }
                  HEAP32[$der$i$i>>2] = 0;
                  $rv$0$ph$i3$i = 1;
                 } else {
                  $rv$0$ph$i3$i = 0;
                 }
                }
               }
              } while(0);
              _X509_ALGOR_free($97);
              $$pre$i$i = HEAP32[$der$i$i>>2]|0;
              $124 = ($$pre$i$i|0)==(0|0);
              if ($124) {
               $$0$i$i = $rv$0$ph$i3$i;
               break L65;
              }
              _CRYPTO_free($$pre$i$i);
              $$0$i$i = $rv$0$ph$i3$i;
              break L65;
             }
            }
           }
          }
         }
        }
       } while(0);
       if ((label|0) == 43) {
       }
       _ERR_put_error(16,239,148,86775,749);
       $$0$i$i = 0;
      }
     } while(0);
     $125 = ($$0$i$i|0)==(0);
     if ($125) {
      _ERR_put_error(16,238,150,86775,816);
      $$0$i = 0;
     } else {
      $$0$i = 1;
     }
    }
   } while(0);
   $$0 = $$0$i;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 0:  {
   HEAP32[$penc$i>>2] = 0;
   $126 = (_CMS_RecipientInfo_get0_pkey_ctx($arg2)|0);
   $127 = ($126|0)==(0|0);
   L98: do {
    if ($127) {
     $$0$i3 = 0;
    } else {
     $128 = (_EVP_PKEY_CTX_get0_pkey($126)|0);
     $129 = (_CMS_RecipientInfo_kari_get0_orig_id($arg2,$talg$i,$pubkey$i1,0,0,0)|0);
     $130 = ($129|0)==(0);
     do {
      if ($130) {
       $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
       label = 89;
      } else {
       $131 = HEAP32[$talg$i>>2]|0;
       _X509_ALGOR_get0($aoid$i,0,0,$131);
       $132 = HEAP32[$aoid$i>>2]|0;
       $133 = (_OBJ_nid2obj(0)|0);
       $134 = ($132|0)==($133|0);
       if ($134) {
        $135 = ((($128)) + 20|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = (_i2o_ECPublicKey($136,0)|0);
        $138 = ($137|0)<(1);
        if ($138) {
         $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
         label = 89;
         break;
        }
        $139 = (_CRYPTO_malloc($137,86775,857)|0);
        HEAP32[$penc$i>>2] = $139;
        $140 = ($139|0)==(0|0);
        if ($140) {
         $$0$i3 = 0;
         break L98;
        }
        HEAP32[$p$i>>2] = $139;
        $141 = (_i2o_ECPublicKey($136,$p$i)|0);
        $142 = ($141|0)<(1);
        if ($142) {
         $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
         label = 89;
         break;
        }
        $143 = HEAP32[$pubkey$i1>>2]|0;
        $144 = HEAP32[$penc$i>>2]|0;
        _ASN1_STRING_set0($143,$144,$141);
        $145 = HEAP32[$pubkey$i1>>2]|0;
        $146 = ((($145)) + 12|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = $147 & -16;
        $149 = $148 | 8;
        HEAP32[$146>>2] = $149;
        HEAP32[$penc$i>>2] = 0;
        $150 = HEAP32[$talg$i>>2]|0;
        $151 = (_OBJ_nid2obj(408)|0);
        (_X509_ALGOR_set0($150,$151,-1,0)|0);
       }
       $152 = (_EVP_PKEY_CTX_ctrl($126,408,1024,4100,-2,0)|0);
       $153 = ($152|0)<(1);
       if ($153) {
        $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
        label = 89;
       } else {
        $154 = (_EVP_PKEY_CTX_ctrl($126,408,1024,4102,0,$kdf_md$i)|0);
        $155 = ($154|0)==(0);
        if ($155) {
         $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
         label = 89;
        } else {
         $156 = (_EVP_PKEY_CTX_ctrl($126,408,1024,4099,-2,0)|0);
         $157 = ($156|0)<(0);
         if ($157) {
          $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
          label = 89;
         } else {
          $158 = ($156|0)==(0);
          $159 = ($156|0)==(1);
          $$$i = $159 ? 947 : $156;
          $ecdh_nid$0$i = $158 ? 946 : $$$i;
          $160 = ($152|0)==(1);
          if ($160) {
           $161 = (_EVP_PKEY_CTX_ctrl($126,408,1024,4100,2,0)|0);
           $162 = ($161|0)<(1);
           if ($162) {
            $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
            label = 89;
           } else {
            $163 = HEAP32[$kdf_md$i>>2]|0;
            $164 = ($163|0)==(0|0);
            if ($164) {
             $165 = (_EVP_sha1()|0);
             HEAP32[$kdf_md$i>>2] = $165;
             $166 = (_EVP_PKEY_CTX_ctrl($126,408,1024,4101,0,$165)|0);
             $167 = ($166|0)<(1);
             if ($167) {
              $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
              label = 89;
              break;
             }
            }
            $168 = (_CMS_RecipientInfo_kari_get0_alg($arg2,$talg$i,$ukm$i)|0);
            $169 = ($168|0)==(0);
            if ($169) {
             $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
             label = 89;
            } else {
             $170 = HEAP32[$kdf_md$i>>2]|0;
             $171 = (_EVP_MD_type($170)|0);
             $172 = (_OBJ_find_sigid_by_algs($kdf_nid$i,$171,$ecdh_nid$0$i)|0);
             $173 = ($172|0)==(0);
             if ($173) {
              $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
              label = 89;
             } else {
              $174 = (_CMS_RecipientInfo_kari_get0_ctx($arg2)|0);
              $175 = (_EVP_CIPHER_CTX_cipher($174)|0);
              $176 = (_EVP_CIPHER_type($175)|0);
              $177 = (_EVP_CIPHER_CTX_key_length($174)|0);
              $178 = (_X509_ALGOR_new()|0);
              $179 = ($178|0)==(0|0);
              if ($179) {
               $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
               label = 89;
              } else {
               $180 = (_OBJ_nid2obj($176)|0);
               HEAP32[$178>>2] = $180;
               $181 = (_ASN1_TYPE_new()|0);
               $182 = ((($178)) + 4|0);
               HEAP32[$182>>2] = $181;
               $183 = ($181|0)==(0|0);
               if ($183) {
                $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $178;
                label = 89;
               } else {
                $184 = (_EVP_CIPHER_param_to_asn1($174,$181)|0);
                $185 = ($184|0)<(1);
                if ($185) {
                 $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $178;
                 label = 89;
                } else {
                 $186 = HEAP32[$182>>2]|0;
                 $187 = (_ASN1_TYPE_get($186)|0);
                 $188 = ($187|0)==(0);
                 if ($188) {
                  $189 = HEAP32[$182>>2]|0;
                  _ASN1_TYPE_free($189);
                  HEAP32[$182>>2] = 0;
                 }
                 $190 = (_EVP_PKEY_CTX_ctrl($126,408,1024,4103,$177,0)|0);
                 $191 = ($190|0)<(1);
                 if ($191) {
                  $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $178;
                  label = 89;
                 } else {
                  $192 = HEAP32[$ukm$i>>2]|0;
                  $193 = (_CMS_SharedInfo_encode($penc$i,$178,$192,$177)|0);
                  $194 = ($193|0)==(0);
                  if ($194) {
                   $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $178;
                   label = 89;
                   break;
                  }
                  $195 = HEAP32[$penc$i>>2]|0;
                  $196 = (_EVP_PKEY_CTX_ctrl($126,408,1024,4105,$193,$195)|0);
                  $197 = ($196|0)<(1);
                  if ($197) {
                   $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $178;
                   label = 89;
                   break;
                  }
                  HEAP32[$penc$i>>2] = 0;
                  $198 = (_i2d_X509_ALGOR($178,$penc$i)|0);
                  $199 = HEAP32[$penc$i>>2]|0;
                  $200 = ($199|0)!=(0|0);
                  $201 = ($198|0)!=(0);
                  $or$cond$i2 = $201 & $200;
                  if (!($or$cond$i2)) {
                   $209 = $199;$rv$0$i = 0;$wrap_alg$0$i = $178;
                   break;
                  }
                  $202 = (_ASN1_STRING_new()|0);
                  $203 = ($202|0)==(0|0);
                  if ($203) {
                   $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $178;
                   label = 89;
                   break;
                  }
                  $204 = HEAP32[$penc$i>>2]|0;
                  _ASN1_STRING_set0($202,$204,$198);
                  HEAP32[$penc$i>>2] = 0;
                  $205 = HEAP32[$talg$i>>2]|0;
                  $206 = HEAP32[$kdf_nid$i>>2]|0;
                  $207 = (_OBJ_nid2obj($206)|0);
                  (_X509_ALGOR_set0($205,$207,16,$202)|0);
                  $rv$0$ph$i = 1;$wrap_alg$0$ph$i = $178;
                  label = 89;
                 }
                }
               }
              }
             }
            }
           }
          } else {
           $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
           label = 89;
          }
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 89) {
      $$pr$i = HEAP32[$penc$i>>2]|0;
      $209 = $$pr$i;$rv$0$i = $rv$0$ph$i;$wrap_alg$0$i = $wrap_alg$0$ph$i;
     }
     $208 = ($209|0)==(0|0);
     if (!($208)) {
      _CRYPTO_free($209);
     }
     $210 = ($wrap_alg$0$i|0)==(0|0);
     if ($210) {
      $$0$i3 = $rv$0$i;
     } else {
      _X509_ALGOR_free($wrap_alg$0$i);
      $$0$i3 = $rv$0$i;
     }
    }
   } while(0);
   $$0 = $$0$i3;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  }
  break;
 }
 case 8:  {
  HEAP32[$arg2>>2] = 1;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  HEAP32[$arg2>>2] = 672;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _old_ec_priv_decode($pkey,$pder,$derlen) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 $derlen = $derlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_d2i_ECPrivateKey(0,$pder,$derlen)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(16,222,142,86775,541);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_EVP_PKEY_assign($pkey,408,$0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _old_ec_priv_encode($pkey,$pder) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_i2d_ECPrivateKey($1,$pder)|0);
 return ($2|0);
}
function _eckey_type2param($ptype,$pval) {
 $ptype = $ptype|0;
 $pval = $pval|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pm = sp;
 L1: do {
  switch ($ptype|0) {
  case 16:  {
   $0 = ((($pval)) + 8|0);
   $1 = HEAP32[$0>>2]|0;
   HEAP32[$pm>>2] = $1;
   $2 = HEAP32[$pval>>2]|0;
   $3 = (_d2i_ECParameters(0,$pm,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    _ERR_put_error(16,220,142,86775,150);
    $$0 = 0;
   } else {
    $$0 = $3;
   }
   break;
  }
  case 6:  {
   $5 = (_EC_KEY_new()|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    _ERR_put_error(16,220,65,86775,161);
    $$0 = 0;
    break L1;
   }
   $7 = (_OBJ_obj2nid($pval)|0);
   $8 = (_EC_GROUP_new_by_curve_name($7)|0);
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    _EC_GROUP_set_asn1_flag($8,1);
    $10 = (_EC_KEY_set_group($5,$8)|0);
    $11 = ($10|0)==(0);
    if (!($11)) {
     _EC_GROUP_free($8);
     $$0 = $5;
     break L1;
    }
   }
   _EC_KEY_free($5);
   $$0 = 0;
   break;
  }
  default: {
   _ERR_put_error(16,220,142,86775,172);
   $$0 = 0;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_EC_KEY_print($bp,$x,$off,$ktype) {
 $bp = $bp|0;
 $x = $x|0;
 $off = $off|0;
 $ktype = $ktype|0;
 var $$ = 0, $$buf_len$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf_len$0 = 0, $buf_len$1 = 0, $buffer$0 = 0, $buffer$1$ph = 0, $buffer$116 = 0, $ctx$0$ph = 0, $ctx$014 = 0, $ecstr$0 = 0, $order$0$ph = 0, $order$012 = 0;
 var $priv_key$0 = 0, $priv_key$05 = 0, $pub_key$0 = 0, $pub_key$024 = 0, $pub_key$1$ph = 0, $pub_key$110 = 0, $reason$0$ph = 0, $ret$07 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($x|0)==(0|0);
 do {
  if ($0) {
   $buffer$1$ph = 0;$ctx$0$ph = 0;$order$0$ph = 0;$pub_key$1$ph = 0;$reason$0$ph = 67;
   label = 21;
  } else {
   $1 = (_EC_KEY_get0_group($x)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    $buffer$1$ph = 0;$ctx$0$ph = 0;$order$0$ph = 0;$pub_key$1$ph = 0;$reason$0$ph = 67;
    label = 21;
   } else {
    $3 = (_BN_CTX_new()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     $buffer$1$ph = 0;$ctx$0$ph = 0;$order$0$ph = 0;$pub_key$1$ph = 0;$reason$0$ph = 65;
     label = 21;
    } else {
     $5 = ($ktype|0)>(0);
     if ($5) {
      $6 = (_EC_KEY_get0_public_key($x)|0);
      $7 = ($6|0)==(0|0);
      if ($7) {
       $buf_len$0 = 0;$pub_key$0 = 0;
      } else {
       $8 = (_EC_KEY_get_conv_form($x)|0);
       $9 = (_EC_POINT_point2bn($1,$6,$8,0,$3)|0);
       $10 = ($9|0)==(0|0);
       if ($10) {
        $buffer$1$ph = 0;$ctx$0$ph = $3;$order$0$ph = 0;$pub_key$1$ph = 0;$reason$0$ph = 16;
        label = 21;
        break;
       }
       $11 = (_BN_num_bits($9)|0);
       $12 = (($11) + 7)|0;
       $13 = (($12|0) / 8)&-1;
       $buf_len$0 = $13;$pub_key$0 = $9;
      }
      $14 = ($ktype|0)==(2);
      if ($14) {
       $15 = (_EC_KEY_get0_private_key($x)|0);
       $16 = ($15|0)==(0|0);
       if ($16) {
        $47 = 1;$buf_len$1 = $buf_len$0;$priv_key$0 = 0;
       } else {
        $17 = (_BN_num_bits($15)|0);
        $18 = (($17) + 7)|0;
        $19 = (($18|0) / 8)&-1;
        $20 = ($19>>>0)>($buf_len$0>>>0);
        $$buf_len$0 = $20 ? $19 : $buf_len$0;
        $47 = 1;$buf_len$1 = $$buf_len$0;$priv_key$0 = $15;
       }
      } else {
       $47 = 0;$buf_len$1 = $buf_len$0;$priv_key$0 = 0;
      }
      $21 = (($buf_len$1) + 10)|0;
      $22 = (_CRYPTO_malloc($21,86775,457)|0);
      $23 = ($22|0)==(0|0);
      if ($23) {
       $buffer$1$ph = 0;$ctx$0$ph = $3;$order$0$ph = 0;$pub_key$1$ph = $pub_key$0;$reason$0$ph = 65;
       label = 21;
       break;
      } else {
       $25 = $47;$buffer$0 = $22;$priv_key$05 = $priv_key$0;$pub_key$024 = $pub_key$0;
      }
     } else {
      $25 = 0;$buffer$0 = 0;$priv_key$05 = 0;$pub_key$024 = 0;
     }
     $24 = ($ktype|0)==(1);
     $$ = $24 ? 88663 : 86786;
     $ecstr$0 = $25 ? 88689 : $$;
     $26 = (_BIO_indent($bp,$off,128)|0);
     $27 = ($26|0)==(0);
     if ($27) {
      $buffer$1$ph = $buffer$0;$ctx$0$ph = $3;$order$0$ph = 0;$pub_key$1$ph = $pub_key$024;$reason$0$ph = 32;
      label = 21;
     } else {
      $28 = (_BN_new()|0);
      $29 = ($28|0)==(0|0);
      if ($29) {
       $buffer$1$ph = $buffer$0;$ctx$0$ph = $3;$order$0$ph = 0;$pub_key$1$ph = $pub_key$024;$reason$0$ph = 32;
       label = 21;
      } else {
       $30 = (_EC_GROUP_get_order($1,$28,0)|0);
       $31 = ($30|0)==(0);
       if ($31) {
        $buffer$1$ph = $buffer$0;$ctx$0$ph = $3;$order$0$ph = $28;$pub_key$1$ph = $pub_key$024;$reason$0$ph = 32;
        label = 21;
       } else {
        $32 = (_BN_num_bits($28)|0);
        HEAP32[$vararg_buffer>>2] = $ecstr$0;
        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $32;
        $33 = (_BIO_printf($bp,89018,$vararg_buffer)|0);
        $34 = ($33|0)<(1);
        if ($34) {
         $buffer$1$ph = $buffer$0;$ctx$0$ph = $3;$order$0$ph = $28;$pub_key$1$ph = $pub_key$024;$reason$0$ph = 32;
         label = 21;
        } else {
         $35 = ($priv_key$05|0)==(0|0);
         if (!($35)) {
          $36 = (_ASN1_bn_print($bp,88701,$priv_key$05,$buffer$0,$off)|0);
          $37 = ($36|0)==(0);
          if ($37) {
           $buffer$1$ph = $buffer$0;$ctx$0$ph = $3;$order$0$ph = $28;$pub_key$1$ph = $pub_key$024;$reason$0$ph = 32;
           label = 21;
           break;
          }
         }
         $38 = ($pub_key$024|0)==(0|0);
         if (!($38)) {
          $39 = (_ASN1_bn_print($bp,88707,$pub_key$024,$buffer$0,$off)|0);
          $40 = ($39|0)==(0);
          if ($40) {
           $buffer$1$ph = $buffer$0;$ctx$0$ph = $3;$order$0$ph = $28;$pub_key$1$ph = $pub_key$024;$reason$0$ph = 32;
           label = 21;
           break;
          }
         }
         $41 = (_ECPKParameters_print($bp,$1,$off)|0);
         $42 = ($41|0)==(0);
         if ($42) {
          $buffer$1$ph = $buffer$0;$ctx$0$ph = $3;$order$0$ph = $28;$pub_key$1$ph = $pub_key$024;$reason$0$ph = 32;
          label = 21;
         } else {
          $buffer$116 = $buffer$0;$ctx$014 = $3;$order$012 = $28;$pub_key$110 = $pub_key$024;$ret$07 = 1;
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 21) {
  _ERR_put_error(16,221,$reason$0$ph,86775,489);
  $buffer$116 = $buffer$1$ph;$ctx$014 = $ctx$0$ph;$order$012 = $order$0$ph;$pub_key$110 = $pub_key$1$ph;$ret$07 = 0;
 }
 $43 = ($pub_key$110|0)==(0|0);
 if (!($43)) {
  _BN_free($pub_key$110);
 }
 $44 = ($order$012|0)==(0|0);
 if (!($44)) {
  _BN_free($order$012);
 }
 $45 = ($ctx$014|0)==(0|0);
 if (!($45)) {
  _BN_CTX_free($ctx$014);
 }
 $46 = ($buffer$116|0)==(0|0);
 if ($46) {
  STACKTOP = sp;return ($ret$07|0);
 }
 _CRYPTO_free($buffer$116);
 STACKTOP = sp;return ($ret$07|0);
}
function _eckey_param2type($pptype,$ppval,$ec_key) {
 $pptype = $pptype|0;
 $ppval = $ppval|0;
 $ec_key = $ec_key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ec_key|0)==(0|0);
 if (!($0)) {
  $1 = (_EC_KEY_get0_group($ec_key)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = (_EC_GROUP_get_asn1_flag($1)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    label = 7;
   } else {
    $5 = (_EC_GROUP_get_curve_name($1)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     label = 7;
    } else {
     $7 = (_OBJ_nid2obj($5)|0);
     HEAP32[$ppval>>2] = $7;
     $storemerge = 6;
    }
   }
   do {
    if ((label|0) == 7) {
     $8 = (_ASN1_STRING_new()|0);
     $9 = ($8|0)==(0|0);
     if ($9) {
      $$0 = 0;
      return ($$0|0);
     }
     $10 = ((($8)) + 8|0);
     $11 = (_i2d_ECParameters($ec_key,$10)|0);
     HEAP32[$8>>2] = $11;
     $12 = ($11|0)<(1);
     if (!($12)) {
      HEAP32[$ppval>>2] = $8;
      $storemerge = 16;
      break;
     }
     _ASN1_STRING_free($8);
     _ERR_put_error(16,223,16,86775,96);
     $$0 = 0;
     return ($$0|0);
    }
   } while(0);
   HEAP32[$pptype>>2] = $storemerge;
   $$0 = 1;
   return ($$0|0);
  }
 }
 _ERR_put_error(16,223,124,86775,78);
 $$0 = 0;
 return ($$0|0);
}
function _EC_GROUP_get_basis_type($group) {
 $group = $group|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$0 = 0, $i$0$lcssa = 0, $switch$select = 0, $switch$select2 = 0, $switch$selectcmp = 0, $switch$selectcmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_GROUP_method_of($group)|0);
 $1 = (_EC_METHOD_get_field_type($0)|0);
 $2 = ($1|0)==(407);
 if ($2) {
  $i$0 = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $3 = (((($group)) + 92|0) + ($i$0<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($i$0) + 1)|0;
  if ($5) {
   $i$0$lcssa = $i$0;
   break;
  } else {
   $i$0 = $6;
  }
 }
 $switch$selectcmp = ($i$0$lcssa|0)==(2);
 $switch$select = $switch$selectcmp ? 682 : 0;
 $switch$selectcmp1 = ($i$0$lcssa|0)==(4);
 $switch$select2 = $switch$selectcmp1 ? 683 : $switch$select;
 $$0 = $switch$select2;
 return ($$0|0);
}
function _d2i_ECPKParameters($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $0 = HEAP32[$in>>2]|0;
 HEAP32[$p>>2] = $0;
 $1 = (_ASN1_item_d2i(0,$p,$len,36592)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(16,145,117,86803,976);
  _ASN1_item_free(0,36592);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_ec_asn1_pkparameters2group($1)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _ERR_put_error(16,145,127,86803,982);
  _ASN1_item_free($1,36592);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ($a|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$a>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   _EC_GROUP_clear_free($6);
  }
  HEAP32[$a>>2] = $3;
 }
 _ASN1_item_free($1,36592);
 $8 = HEAP32[$p>>2]|0;
 HEAP32[$in>>2] = $8;
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _i2d_ECPKParameters($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ec_asn1_group2pkparameters($a,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(16,191,120,86803,1002);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_ASN1_item_i2d($0,$out,36592)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _ERR_put_error(16,191,121,86803,1006);
  _ASN1_item_free($0,36592);
  $$0 = 0;
  return ($$0|0);
 } else {
  _ASN1_item_free($0,36592);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _d2i_ECPrivateKey($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p = 0, $ret$0 = 0, $ret$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $0 = HEAP32[$in>>2]|0;
 HEAP32[$p>>2] = $0;
 $1 = (_ASN1_item_d2i(0,$p,$len,36620)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(16,146,16,86803,1024);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($a|0)==(0|0);
 if ($3) {
  label = 5;
 } else {
  $4 = HEAP32[$a>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
  } else {
   $ret$0 = $4;
   label = 6;
  }
 }
 if ((label|0) == 5) {
  $6 = (_EC_KEY_new()|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   _ERR_put_error(16,146,65,86803,1030);
   $ret$23 = 0;
  } else {
   $ret$0 = $6;
   label = 6;
  }
 }
 L10: do {
  if ((label|0) == 6) {
   $8 = ((($1)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   $$phi$trans$insert = ((($ret$0)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $15 = $$pre4;
   } else {
    $11 = ($$pre4|0)==(0|0);
    if ($11) {
     $12 = $9;
    } else {
     _EC_GROUP_clear_free($$pre4);
     $$pre = HEAP32[$8>>2]|0;
     $12 = $$pre;
    }
    $13 = (_ec_asn1_pkparameters2group($12)|0);
    HEAP32[$$phi$trans$insert>>2] = $13;
    $15 = $13;
   }
   $14 = ($15|0)==(0|0);
   L18: do {
    if ($14) {
     _ERR_put_error(16,146,16,86803,1043);
    } else {
     $16 = HEAP32[$1>>2]|0;
     HEAP32[$ret$0>>2] = $16;
     $17 = ((($1)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0|0);
     if ($19) {
      _ERR_put_error(16,146,125,86803,1058);
      break;
     }
     $20 = ((($18)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$18>>2]|0;
     $23 = ((($ret$0)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_BN_bin2bn($21,$22,$24)|0);
     HEAP32[$23>>2] = $25;
     $26 = ($25|0)==(0|0);
     if ($26) {
      _ERR_put_error(16,146,3,86803,1054);
      break;
     }
     $27 = ((($ret$0)) + 8|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0|0);
     if (!($29)) {
      _EC_POINT_clear_free($28);
     }
     $30 = HEAP32[$$phi$trans$insert>>2]|0;
     $31 = (_EC_POINT_new($30)|0);
     HEAP32[$27>>2] = $31;
     $32 = ($31|0)==(0|0);
     if ($32) {
      _ERR_put_error(16,146,16,86803,1066);
      break;
     }
     $33 = ((($1)) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0|0);
     do {
      if ($35) {
       $47 = HEAP32[$$phi$trans$insert>>2]|0;
       $48 = HEAP32[$23>>2]|0;
       $49 = (_EC_POINT_mul($47,$31,$48,0,0,0)|0);
       $50 = ($49|0)==(0);
       if ($50) {
        _ERR_put_error(16,146,16,86803,1093);
        break L18;
       } else {
        $51 = ((($ret$0)) + 16|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = $52 | 2;
        HEAP32[$51>>2] = $53;
        break;
       }
      } else {
       $36 = ((($34)) + 8|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = HEAP32[$34>>2]|0;
       $39 = ($38|0)<(1);
       if ($39) {
        _ERR_put_error(16,146,100,86803,1080);
        break L18;
       }
       $40 = HEAP8[$37>>0]|0;
       $41 = $40&255;
       $42 = $41 & 254;
       $43 = ((($ret$0)) + 20|0);
       HEAP32[$43>>2] = $42;
       $44 = HEAP32[$$phi$trans$insert>>2]|0;
       $45 = (_EC_POINT_oct2point($44,$31,$37,$38,0)|0);
       $46 = ($45|0)==(0);
       if ($46) {
        _ERR_put_error(16,146,16,86803,1087);
        break L18;
       }
      }
     } while(0);
     if (!($3)) {
      HEAP32[$a>>2] = $ret$0;
     }
     $54 = HEAP32[$p>>2]|0;
     HEAP32[$in>>2] = $54;
     $ret$23 = $ret$0;
     break L10;
    }
   } while(0);
   if (!($3)) {
    $55 = HEAP32[$a>>2]|0;
    $56 = ($55|0)==($ret$0|0);
    if ($56) {
     $ret$23 = 0;
     break;
    }
   }
   _EC_KEY_free($ret$0);
   $ret$23 = 0;
  }
 } while(0);
 _ASN1_item_free($1,36620);
 $$0 = $ret$23;
 STACKTOP = sp;return ($$0|0);
}
function _i2d_ECPrivateKey($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $buf_len$0 = 0;
 var $buffer$0 = 0, $buffer$1 = 0, $buffer$2 = 0, $buffer$25 = 0, $ok$0 = 0, $ok$0114 = 0, $ok$0115 = 0, $ok$06 = 0, $ret$0 = 0, $ret$0311 = 0, $ret$0312 = 0, $ret$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 do {
  if (!($0)) {
   $1 = ((($a)) + 4|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)==(0|0);
   if (!($3)) {
    $4 = ((($a)) + 12|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $7 = ((($a)) + 16|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = $8 & 2;
     $10 = ($9|0)==(0);
     if ($10) {
      $11 = ((($a)) + 8|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = ($12|0)==(0|0);
      if ($13) {
       break;
      }
     }
     $14 = (_ASN1_item_new(36620)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      _ERR_put_error(16,192,65,86803,1131);
      $ok$0115 = 0;$ret$0312 = 0;
      $75 = ($ok$0115|0)!=(0);
      $76 = $75 ? $ret$0312 : 0;
      return ($76|0);
     }
     $16 = HEAP32[$a>>2]|0;
     HEAP32[$14>>2] = $16;
     $17 = HEAP32[$4>>2]|0;
     $18 = (_BN_num_bits($17)|0);
     $19 = (($18) + 7)|0;
     $20 = (($19|0) / 8)&-1;
     $21 = HEAP32[$1>>2]|0;
     $22 = (_EC_GROUP_get_degree($21)|0);
     $23 = (($22) + 7)|0;
     $24 = (($23|0) / 8)&-1;
     $25 = ($24>>>0)<($20>>>0);
     do {
      if ($25) {
       _ERR_put_error(16,192,100,86803,1144);
       $ok$0114 = 0;$ret$0311 = 0;
      } else {
       $26 = (_CRYPTO_malloc($24,86803,1148)|0);
       $27 = ($26|0)==(0|0);
       if ($27) {
        _ERR_put_error(16,192,65,86803,1150);
        $ok$0114 = 0;$ret$0311 = 0;
        break;
       }
       $28 = HEAP32[$4>>2]|0;
       $$sum = (($24) - ($20))|0;
       $29 = (($26) + ($$sum)|0);
       $30 = (_BN_bn2bin($28,$29)|0);
       $31 = ($30|0)==(0);
       if ($31) {
        _ERR_put_error(16,192,3,86803,1155);
        $buffer$25 = $26;$ok$06 = 0;$ret$08 = 0;
       } else {
        $32 = ($24|0)==($20|0);
        if (!($32)) {
         _memset(($26|0),0,($$sum|0))|0;
        }
        $33 = ((($14)) + 4|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = (_ASN1_STRING_set($34,$26,$24)|0);
        $36 = ($35|0)==(0);
        L24: do {
         if ($36) {
          _ERR_put_error(16,192,13,86803,1164);
          $buffer$2 = $26;$ok$0 = 0;$ret$0 = 0;
         } else {
          $37 = HEAP32[$7>>2]|0;
          $38 = $37 & 1;
          $39 = ($38|0)==(0);
          do {
           if ($39) {
            $40 = HEAP32[$1>>2]|0;
            $41 = ((($14)) + 8|0);
            $42 = HEAP32[$41>>2]|0;
            $43 = (_ec_asn1_group2pkparameters($40,$42)|0);
            HEAP32[$41>>2] = $43;
            $44 = ($43|0)==(0|0);
            if ($44) {
             _ERR_put_error(16,192,16,86803,1172);
             $buffer$2 = $26;$ok$0 = 0;$ret$0 = 0;
             break L24;
            } else {
             $$pre = HEAP32[$7>>2]|0;
             $46 = $$pre;
             break;
            }
           } else {
            $46 = $37;
           }
          } while(0);
          $45 = $46 & 2;
          $47 = ($45|0)==(0);
          do {
           if ($47) {
            $48 = (_ASN1_STRING_type_new(3)|0);
            $49 = ((($14)) + 12|0);
            HEAP32[$49>>2] = $48;
            $50 = ($48|0)==(0|0);
            if ($50) {
             _ERR_put_error(16,192,65,86803,1180);
             $buffer$2 = $26;$ok$0 = 0;$ret$0 = 0;
             break L24;
            }
            $51 = HEAP32[$1>>2]|0;
            $52 = ((($a)) + 8|0);
            $53 = HEAP32[$52>>2]|0;
            $54 = ((($a)) + 20|0);
            $55 = HEAP32[$54>>2]|0;
            $56 = (_EC_POINT_point2oct($51,$53,$55,0,0,0)|0);
            $57 = ($56>>>0)>($24>>>0);
            do {
             if ($57) {
              $58 = (_CRYPTO_realloc($26,$56,86803,1188)|0);
              $59 = ($58|0)==(0|0);
              if (!($59)) {
               $buf_len$0 = $56;$buffer$0 = $58;
               break;
              }
              _ERR_put_error(16,192,65,86803,1190);
              $buffer$2 = $26;$ok$0 = 0;$ret$0 = 0;
              break L24;
             } else {
              $buf_len$0 = $24;$buffer$0 = $26;
             }
            } while(0);
            $60 = HEAP32[$1>>2]|0;
            $61 = HEAP32[$52>>2]|0;
            $62 = HEAP32[$54>>2]|0;
            $63 = (_EC_POINT_point2oct($60,$61,$62,$buffer$0,$buf_len$0,0)|0);
            $64 = ($63|0)==(0);
            if ($64) {
             _ERR_put_error(16,192,16,86803,1199);
             $buffer$2 = $buffer$0;$ok$0 = 0;$ret$0 = 0;
             break L24;
            }
            $65 = HEAP32[$49>>2]|0;
            $66 = ((($65)) + 12|0);
            $67 = HEAP32[$66>>2]|0;
            $68 = $67 & -16;
            $69 = $68 | 8;
            HEAP32[$66>>2] = $69;
            $70 = (_ASN1_STRING_set($65,$buffer$0,$buf_len$0)|0);
            $71 = ($70|0)==(0);
            if (!($71)) {
             $buffer$1 = $buffer$0;
             break;
            }
            _ERR_put_error(16,192,13,86803,1206);
            $buffer$2 = $buffer$0;$ok$0 = 0;$ret$0 = 0;
            break L24;
           } else {
            $buffer$1 = $26;
           }
          } while(0);
          $72 = (_ASN1_item_i2d($14,$out,36620)|0);
          $73 = ($72|0)==(0);
          if ($73) {
           _ERR_put_error(16,192,16,86803,1212);
           $buffer$2 = $buffer$1;$ok$0 = 0;$ret$0 = 0;
          } else {
           $buffer$2 = $buffer$1;$ok$0 = 1;$ret$0 = $72;
          }
         }
        } while(0);
        $74 = ($buffer$2|0)==(0|0);
        if ($74) {
         $ok$0114 = $ok$0;$ret$0311 = $ret$0;
         break;
        } else {
         $buffer$25 = $buffer$2;$ok$06 = $ok$0;$ret$08 = $ret$0;
        }
       }
       _CRYPTO_free($buffer$25);
       $ok$0114 = $ok$06;$ret$0311 = $ret$08;
      }
     } while(0);
     _ASN1_item_free($14,36620);
     $ok$0115 = $ok$0114;$ret$0312 = $ret$0311;
     $75 = ($ok$0115|0)!=(0);
     $76 = $75 ? $ret$0312 : 0;
     return ($76|0);
    }
   }
  }
 } while(0);
 _ERR_put_error(16,192,67,86803,1126);
 $ok$0115 = 0;$ret$0312 = 0;
 $75 = ($ok$0115|0)!=(0);
 $76 = $75 ? $ret$0312 : 0;
 return ($76|0);
}
function _i2d_ECParameters($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  _ERR_put_error(16,190,67,86803,1227);
  $$0 = 0;
  return ($$0|0);
 } else {
  $1 = ((($a)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_i2d_ECPKParameters($2,$out)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _d2i_ECParameters($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($in|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$in>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ($a|0)==(0|0);
   if ($3) {
    label = 6;
   } else {
    $4 = HEAP32[$a>>2]|0;
    $5 = ($4|0)==(0|0);
    if ($5) {
     label = 6;
    } else {
     $ret$0 = $4;
    }
   }
   if ((label|0) == 6) {
    $6 = (_EC_KEY_new()|0);
    $7 = ($6|0)==(0|0);
    if ($7) {
     _ERR_put_error(16,144,65,86803,1244);
     $$0 = 0;
     return ($$0|0);
    } else {
     $ret$0 = $6;
    }
   }
   $8 = ((($ret$0)) + 4|0);
   $9 = (_d2i_ECPKParameters($8,$in,$len)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    if ($3) {
     $$0 = $ret$0;
     return ($$0|0);
    }
    HEAP32[$a>>2] = $ret$0;
    $$0 = $ret$0;
    return ($$0|0);
   }
   _ERR_put_error(16,144,16,86803,1251);
   if (!($3)) {
    $11 = HEAP32[$a>>2]|0;
    $12 = ($11|0)==($ret$0|0);
    if ($12) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   _EC_KEY_free($ret$0);
   $$0 = 0;
   return ($$0|0);
  }
 }
 _ERR_put_error(16,144,67,86803,1238);
 $$0 = 0;
 return ($$0|0);
}
function _o2i_ECPublicKey($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$a>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $3 = ((($1)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ((($1)) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    do {
     if ($8) {
      $9 = (_EC_POINT_new($4)|0);
      HEAP32[$6>>2] = $9;
      $10 = ($9|0)==(0|0);
      if (!($10)) {
       $$pre = HEAP32[$3>>2]|0;
       $12 = $$pre;$13 = $9;
       break;
      }
      _ERR_put_error(16,152,65,86803,1277);
      $$0 = 0;
      return ($$0|0);
     } else {
      $12 = $4;$13 = $7;
     }
    } while(0);
    $11 = HEAP32[$in>>2]|0;
    $14 = (_EC_POINT_oct2point($12,$13,$11,$len,0)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     _ERR_put_error(16,152,16,86803,1281);
     $$0 = 0;
     return ($$0|0);
    } else {
     $16 = HEAP32[$in>>2]|0;
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = $18 & 254;
     $20 = ((($1)) + 20|0);
     HEAP32[$20>>2] = $19;
     $21 = (($16) + ($len)|0);
     HEAP32[$in>>2] = $21;
     $$0 = $1;
     return ($$0|0);
    }
   }
  }
 }
 _ERR_put_error(16,152,67,86803,1271);
 $$0 = 0;
 return ($$0|0);
}
function _i2o_ECPublicKey($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_buffer$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  _ERR_put_error(16,151,67,86803,1296);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($a)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($a)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_EC_POINT_point2oct($2,$4,$6,0,0,0)|0);
 $8 = ($out|0)==(0|0);
 $9 = ($7|0)==(0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  $$0 = $7;
  return ($$0|0);
 }
 $10 = HEAP32[$out>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = (_CRYPTO_malloc($7,86803,1308)|0);
  HEAP32[$out>>2] = $12;
  $13 = ($12|0)==(0|0);
  if ($13) {
   _ERR_put_error(16,151,65,86803,1309);
   $$0 = 0;
   return ($$0|0);
  } else {
   $17 = $12;$new_buffer$0 = 1;
  }
 } else {
  $17 = $10;$new_buffer$0 = 0;
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$5>>2]|0;
 $18 = (_EC_POINT_point2oct($14,$15,$16,$17,$7,0)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  _ERR_put_error(16,151,16,86803,1316);
  $20 = ($new_buffer$0|0)==(0);
  if ($20) {
   $$0 = 0;
   return ($$0|0);
  }
  $21 = HEAP32[$out>>2]|0;
  _CRYPTO_free($21);
  HEAP32[$out>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 } else {
  $22 = ($new_buffer$0|0)==(0);
  if (!($22)) {
   $$0 = $7;
   return ($$0|0);
  }
  $23 = HEAP32[$out>>2]|0;
  $24 = (($23) + ($7)|0);
  HEAP32[$out>>2] = $24;
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _ec_asn1_pkparameters2group($params) {
 $params = $params|0;
 var $$0 = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre44$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$ph16$i = 0, $a$052132$i = 0, $b$0$i = 0, $b$1$ph17$i = 0, $b$172033$i = 0, $b$172034$i = 0, $point$0$ph18$i = 0;
 var $point$091935$i = 0, $point$091936$i = 0, $ret$12230$i = 0, $ret$12231$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($params|0)==(0|0);
 if ($0) {
  _ERR_put_error(16,158,124,86803,937);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$params>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = ((($params)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_OBJ_obj2nid($3)|0);
  $5 = (_EC_GROUP_new_by_curve_name($4)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   _ERR_put_error(16,158,119,86803,945);
   $$0 = 0;
   return ($$0|0);
  } else {
   _EC_GROUP_set_asn1_flag($5,1);
   $$0 = $5;
   return ($$0|0);
  }
  break;
 }
 case 1:  {
  $7 = ((($params)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  do {
   if ($11) {
    label = 10;
   } else {
    $12 = HEAP32[$10>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     label = 10;
    } else {
     $14 = ((($10)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     if ($16) {
      label = 10;
     } else {
      $17 = ((($8)) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ($18|0)==(0|0);
      if (!($19)) {
       $20 = HEAP32[$18>>2]|0;
       $21 = ($20|0)==(0|0);
       if (!($21)) {
        $22 = ((($20)) + 8|0);
        $23 = HEAP32[$22>>2]|0;
        $24 = ($23|0)==(0|0);
        if (!($24)) {
         $25 = ((($18)) + 4|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($26|0)==(0|0);
         if (!($27)) {
          $28 = ((($26)) + 8|0);
          $29 = HEAP32[$28>>2]|0;
          $30 = ($29|0)==(0|0);
          if (!($30)) {
           $31 = HEAP32[$20>>2]|0;
           $32 = (_BN_bin2bn($23,$31,0)|0);
           $33 = ($32|0)==(0|0);
           if ($33) {
            _ERR_put_error(16,157,3,86803,713);
            break;
           }
           $34 = HEAP32[$17>>2]|0;
           $35 = ((($34)) + 4|0);
           $36 = HEAP32[$35>>2]|0;
           $37 = ((($36)) + 8|0);
           $38 = HEAP32[$37>>2]|0;
           $39 = HEAP32[$36>>2]|0;
           $40 = (_BN_bin2bn($38,$39,0)|0);
           $41 = ($40|0)==(0|0);
           L28: do {
            if ($41) {
             _ERR_put_error(16,157,3,86803,718);
             $a$052132$i = $32;$b$172033$i = 0;$point$091935$i = 0;$ret$12230$i = 0;
             label = 64;
            } else {
             $42 = HEAP32[$9>>2]|0;
             $43 = HEAP32[$42>>2]|0;
             $44 = (_OBJ_obj2nid($43)|0);
             switch ($44|0) {
             case 407:  {
              _ERR_put_error(16,157,147,86803,727);
              $a$052132$i = $32;$b$172033$i = $40;$point$091935$i = 0;$ret$12230$i = 0;
              label = 64;
              break L28;
              break;
             }
             case 406:  {
              $45 = HEAP32[$9>>2]|0;
              $46 = ((($45)) + 4|0);
              $47 = HEAP32[$46>>2]|0;
              $48 = ($47|0)==(0|0);
              if ($48) {
               _ERR_put_error(16,157,115,86803,818);
               $a$052132$i = $32;$b$172033$i = $40;$point$091935$i = 0;$ret$12230$i = 0;
               label = 64;
               break L28;
              }
              $49 = (_ASN1_INTEGER_to_BN($47,0)|0);
              $50 = ($49|0)==(0|0);
              if ($50) {
               _ERR_put_error(16,157,13,86803,823);
               $a$052132$i = $32;$b$172033$i = $40;$point$091935$i = 0;$ret$12230$i = 0;
               label = 64;
               break L28;
              }
              $51 = ((($49)) + 12|0);
              $52 = HEAP32[$51>>2]|0;
              $53 = ($52|0)==(0);
              do {
               if ($53) {
                $54 = ((($49)) + 4|0);
                $55 = HEAP32[$54>>2]|0;
                $56 = ($55|0)==(0);
                if ($56) {
                 label = 29;
                 break;
                }
                $57 = (_BN_num_bits($49)|0);
                $58 = ($57|0)>(661);
                if ($58) {
                 _ERR_put_error(16,157,143,86803,834);
                 break;
                }
                $59 = (_EC_GROUP_new_curve_GFp($49,$32,$40,0)|0);
                $60 = ($59|0)==(0|0);
                if ($60) {
                 _ERR_put_error(16,157,16,86803,846);
                 break;
                }
                $61 = HEAP32[$17>>2]|0;
                $62 = ((($61)) + 8|0);
                $63 = HEAP32[$62>>2]|0;
                $64 = ($63|0)==(0|0);
                do {
                 if ($64) {
                  label = 41;
                 } else {
                  $65 = ((($59)) + 60|0);
                  $66 = HEAP32[$65>>2]|0;
                  $67 = ($66|0)==(0|0);
                  if ($67) {
                   $69 = $63;
                  } else {
                   _CRYPTO_free($66);
                   $$pre$i = HEAP32[$17>>2]|0;
                   $$phi$trans$insert$i = ((($$pre$i)) + 8|0);
                   $$pre44$i = HEAP32[$$phi$trans$insert$i>>2]|0;
                   $69 = $$pre44$i;
                  }
                  $68 = HEAP32[$69>>2]|0;
                  $70 = (_CRYPTO_malloc($68,86803,854)|0);
                  HEAP32[$65>>2] = $70;
                  $71 = ($70|0)==(0|0);
                  if ($71) {
                   _ERR_put_error(16,157,65,86803,855);
                   $a$0$ph16$i = $32;$b$1$ph17$i = $40;$point$0$ph18$i = 0;
                   break;
                  } else {
                   $72 = HEAP32[$17>>2]|0;
                   $73 = ((($72)) + 8|0);
                   $74 = HEAP32[$73>>2]|0;
                   $75 = ((($74)) + 8|0);
                   $76 = HEAP32[$75>>2]|0;
                   $77 = HEAP32[$74>>2]|0;
                   _memcpy(($70|0),($76|0),($77|0))|0;
                   $78 = HEAP32[$17>>2]|0;
                   $79 = ((($78)) + 8|0);
                   $80 = HEAP32[$79>>2]|0;
                   $81 = HEAP32[$80>>2]|0;
                   $82 = ((($59)) + 64|0);
                   HEAP32[$82>>2] = $81;
                   label = 41;
                   break;
                  }
                 }
                } while(0);
                L58: do {
                 if ((label|0) == 41) {
                  $83 = ((($8)) + 16|0);
                  $84 = HEAP32[$83>>2]|0;
                  $85 = ($84|0)==(0|0);
                  do {
                   if (!($85)) {
                    $86 = ((($8)) + 12|0);
                    $87 = HEAP32[$86>>2]|0;
                    $88 = ($87|0)==(0|0);
                    if ($88) {
                     break;
                    }
                    $89 = ((($87)) + 8|0);
                    $90 = HEAP32[$89>>2]|0;
                    $91 = ($90|0)==(0|0);
                    if ($91) {
                     break;
                    }
                    $92 = (_EC_POINT_new($59)|0);
                    $93 = ($92|0)==(0|0);
                    if ($93) {
                     $a$0$ph16$i = $32;$b$1$ph17$i = $40;$point$0$ph18$i = 0;
                     break L58;
                    }
                    $94 = HEAP32[$86>>2]|0;
                    $95 = ((($94)) + 8|0);
                    $96 = HEAP32[$95>>2]|0;
                    $97 = HEAP8[$96>>0]|0;
                    $98 = $97&255;
                    $99 = $98 & 254;
                    _EC_GROUP_set_point_conversion_form($59,$99);
                    $100 = HEAP32[$86>>2]|0;
                    $101 = ((($100)) + 8|0);
                    $102 = HEAP32[$101>>2]|0;
                    $103 = HEAP32[$100>>2]|0;
                    $104 = (_EC_POINT_oct2point($59,$92,$102,$103,0)|0);
                    $105 = ($104|0)==(0);
                    if ($105) {
                     _ERR_put_error(16,157,16,86803,878);
                     $a$0$ph16$i = $32;$b$1$ph17$i = $40;$point$0$ph18$i = $92;
                     break L58;
                    }
                    $106 = HEAP32[$83>>2]|0;
                    $107 = (_ASN1_INTEGER_to_BN($106,$32)|0);
                    $108 = ($107|0)==(0|0);
                    if ($108) {
                     _ERR_put_error(16,157,13,86803,884);
                     $a$0$ph16$i = 0;$b$1$ph17$i = $40;$point$0$ph18$i = $92;
                     break L58;
                    }
                    $109 = ((($107)) + 12|0);
                    $110 = HEAP32[$109>>2]|0;
                    $111 = ($110|0)==(0);
                    do {
                     if ($111) {
                      $112 = ((($107)) + 4|0);
                      $113 = HEAP32[$112>>2]|0;
                      $114 = ($113|0)==(0);
                      if ($114) {
                       break;
                      }
                      $115 = (_BN_num_bits($107)|0);
                      $116 = (($57) + 1)|0;
                      $117 = ($115|0)>($116|0);
                      if ($117) {
                       _ERR_put_error(16,157,122,86803,892);
                       $a$0$ph16$i = $107;$b$1$ph17$i = $40;$point$0$ph18$i = $92;
                       break L58;
                      }
                      $118 = ((($8)) + 20|0);
                      $119 = HEAP32[$118>>2]|0;
                      $120 = ($119|0)==(0|0);
                      do {
                       if ($120) {
                        _BN_free($40);
                        $b$0$i = 0;
                       } else {
                        $121 = (_ASN1_INTEGER_to_BN($119,$40)|0);
                        $122 = ($121|0)==(0|0);
                        if (!($122)) {
                         $b$0$i = $121;
                         break;
                        }
                        _ERR_put_error(16,157,13,86803,903);
                        $a$0$ph16$i = $107;$b$1$ph17$i = 0;$point$0$ph18$i = $92;
                        break L58;
                       }
                      } while(0);
                      $123 = (_EC_GROUP_set_generator($59,$92,$107,$b$0$i)|0);
                      $124 = ($123|0)==(0);
                      if ($124) {
                       _ERR_put_error(16,157,16,86803,908);
                       $a$0$ph16$i = $107;$b$1$ph17$i = $b$0$i;$point$0$ph18$i = $92;
                       break L58;
                      } else {
                       _BN_free($49);
                       $a$052132$i = $107;$b$172033$i = $b$0$i;$point$091935$i = $92;$ret$12230$i = $59;
                       label = 64;
                       break L28;
                      }
                     }
                    } while(0);
                    _ERR_put_error(16,157,122,86803,888);
                    $a$0$ph16$i = $107;$b$1$ph17$i = $40;$point$0$ph18$i = $92;
                    break L58;
                   }
                  } while(0);
                  _ERR_put_error(16,157,115,86803,864);
                  $a$0$ph16$i = $32;$b$1$ph17$i = $40;$point$0$ph18$i = 0;
                 }
                } while(0);
                _EC_GROUP_clear_free($59);
                _BN_free($49);
                $125 = ($a$0$ph16$i|0)==(0|0);
                if ($125) {
                 $b$172034$i = $b$1$ph17$i;$point$091936$i = $point$0$ph18$i;$ret$12231$i = 0;
                 break L28;
                } else {
                 $a$052132$i = $a$0$ph16$i;$b$172033$i = $b$1$ph17$i;$point$091935$i = $point$0$ph18$i;$ret$12230$i = 0;
                 label = 64;
                 break L28;
                }
               } else {
                label = 29;
               }
              } while(0);
              if ((label|0) == 29) {
               _ERR_put_error(16,157,103,86803,828);
              }
              _BN_free($49);
              $a$052132$i = $32;$b$172033$i = $40;$point$091935$i = 0;$ret$12230$i = 0;
              label = 64;
              break L28;
              break;
             }
             default: {
              _ERR_put_error(16,157,103,86803,841);
              $a$052132$i = $32;$b$172033$i = $40;$point$091935$i = 0;$ret$12230$i = 0;
              label = 64;
              break L28;
             }
             }
            }
           } while(0);
           if ((label|0) == 64) {
            _BN_free($a$052132$i);
            $b$172034$i = $b$172033$i;$point$091936$i = $point$091935$i;$ret$12231$i = $ret$12230$i;
           }
           $126 = ($b$172034$i|0)==(0|0);
           if (!($126)) {
            _BN_free($b$172034$i);
           }
           $127 = ($point$091936$i|0)==(0|0);
           if (!($127)) {
            _EC_POINT_free($point$091936$i);
           }
           $128 = ($ret$12231$i|0)==(0|0);
           if ($128) {
            break;
           }
           _EC_GROUP_set_asn1_flag($ret$12231$i,0);
           $$0 = $ret$12231$i;
           return ($$0|0);
          }
         }
        }
       }
      }
      _ERR_put_error(16,157,115,86803,708);
     }
    }
   }
  } while(0);
  if ((label|0) == 10) {
   _ERR_put_error(16,157,115,86803,700);
  }
  _ERR_put_error(16,158,16,86803,953);
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 2:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  _ERR_put_error(16,158,115,86803,960);
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _ec_asn1_group2pkparameters($group,$params) {
 $group = $group|0;
 $params = $params|0;
 var $$0 = 0, $$off$i$i = 0, $$off2$i$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a_buf$0$i$i = 0, $b_buf$0$i$i = 0;
 var $buffer$0$ph$ph$i = 0, $buffer$016$ph35$i = 0, $buffer_1$0$i$i = 0, $buffer_1$19$i$i = 0, $buffer_2$0$i$i = 0, $buffer_2$1$i$i = 0, $buffer_2$110$i$i = 0, $buffer_2$15$i$i = 0, $char_zero$i$i = 0, $len_1$0$i$i = 0, $len_2$0$i$i = 0, $ok$0$i$i = 0, $ok$03$i$i = 0, $ok$031314$i9$i = 0, $ok$07$i$i = 0, $or$cond$i$i = 0, $ret$0 = 0, $ret$2$ph36$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $char_zero$i$i = sp;
 $0 = ($params|0)==(0|0);
 L1: do {
  if ($0) {
   $1 = (_ASN1_item_new(36592)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    _ERR_put_error(16,156,65,86803,653);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $ret$0 = $1;
   }
  } else {
   $3 = HEAP32[$params>>2]|0;
   switch ($3|0) {
   case 0:  {
    $4 = ((($params)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0|0);
    if ($6) {
     $ret$0 = $params;
     break L1;
    }
    _ASN1_OBJECT_free($5);
    $ret$0 = $params;
    break L1;
    break;
   }
   case 1:  {
    $7 = ((($params)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $ret$0 = $params;
     break L1;
    }
    _ASN1_item_free($8,36564);
    $ret$0 = $params;
    break L1;
    break;
   }
   default: {
    $ret$0 = $params;
    break L1;
   }
   }
  }
 } while(0);
 $10 = (_EC_GROUP_get_asn1_flag($group)|0);
 $11 = ($10|0)==(0);
 L12: do {
  if ($11) {
   HEAP32[$ret$0>>2] = 1;
   $14 = (_BN_new()|0);
   $15 = ($14|0)==(0|0);
   do {
    if ($15) {
     _ERR_put_error(16,155,65,86803,554);
    } else {
     $16 = (_ASN1_item_new(36564)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      _ERR_put_error(16,155,65,86803,560);
      _BN_free($14);
      break;
     }
     HEAP32[$16>>2] = 1;
     $18 = ((($16)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($group|0)==(0|0);
     $21 = ($19|0)==(0|0);
     $or$cond$i$i = $20 | $21;
     L20: do {
      if ($or$cond$i$i) {
       label = 30;
      } else {
       $22 = HEAP32[$19>>2]|0;
       $23 = ($22|0)==(0|0);
       if (!($23)) {
        _ASN1_OBJECT_free($22);
       }
       $24 = ((($19)) + 4|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(0|0);
       if (!($26)) {
        _ASN1_TYPE_free($25);
       }
       $27 = (_EC_GROUP_method_of($group)|0);
       $28 = (_EC_METHOD_get_field_type($27)|0);
       $29 = (_OBJ_nid2obj($28)|0);
       HEAP32[$19>>2] = $29;
       $30 = ($29|0)==(0|0);
       if ($30) {
        _ERR_put_error(16,154,8,86803,328);
        label = 30;
        break;
       }
       $31 = ($28|0)==(406);
       if (!($31)) {
        _ERR_put_error(16,154,147,86803,351);
        label = 30;
        break;
       }
       $32 = (_BN_new()|0);
       $33 = ($32|0)==(0|0);
       if ($33) {
        _ERR_put_error(16,154,65,86803,334);
        label = 30;
        break;
       }
       $34 = (_EC_GROUP_get_curve_GFp($group,$32,0,0,0)|0);
       $35 = ($34|0)==(0);
       do {
        if ($35) {
         _ERR_put_error(16,154,16,86803,339);
        } else {
         $36 = (_BN_to_ASN1_INTEGER($32,0)|0);
         HEAP32[$24>>2] = $36;
         $37 = ($36|0)==(0|0);
         if ($37) {
          _ERR_put_error(16,154,13,86803,345);
          break;
         }
         _BN_free($32);
         $38 = ((($16)) + 8|0);
         $39 = HEAP32[$38>>2]|0;
         HEAP8[$char_zero$i$i>>0] = 0;
         $40 = ($39|0)==(0|0);
         do {
          if ($40) {
           label = 69;
          } else {
           $41 = HEAP32[$39>>2]|0;
           $42 = ($41|0)==(0|0);
           if ($42) {
            label = 69;
           } else {
            $43 = ((($39)) + 4|0);
            $44 = HEAP32[$43>>2]|0;
            $45 = ($44|0)==(0|0);
            if ($45) {
             label = 69;
            } else {
             $46 = (_BN_new()|0);
             $47 = ($46|0)==(0|0);
             if ($47) {
              _ERR_put_error(16,153,65,86803,444);
              label = 69;
              break;
             }
             $48 = (_BN_new()|0);
             $49 = ($48|0)==(0|0);
             if ($49) {
              _ERR_put_error(16,153,65,86803,444);
              _BN_free($46);
              label = 69;
              break;
             }
             $50 = (_EC_GROUP_method_of($group)|0);
             $51 = (_EC_METHOD_get_field_type($50)|0);
             $52 = ($51|0)==(406);
             do {
              if ($52) {
               $53 = (_EC_GROUP_get_curve_GFp($group,0,$46,$48,0)|0);
               $54 = ($53|0)==(0);
               if (!($54)) {
                label = 40;
                break;
               }
               _ERR_put_error(16,153,16,86803,453);
               label = 67;
              } else {
               label = 40;
              }
             } while(0);
             L56: do {
              if ((label|0) == 40) {
               $55 = (_BN_num_bits($46)|0);
               $56 = (_BN_num_bits($48)|0);
               $57 = (($56) + 7)|0;
               $58 = (($57|0) / 8)&-1;
               $$off$i$i = (($55) + 14)|0;
               $59 = ($$off$i$i>>>0)<(15);
               do {
                if ($59) {
                 $a_buf$0$i$i = $char_zero$i$i;$buffer_1$0$i$i = 0;$len_1$0$i$i = 1;
                 label = 45;
                } else {
                 $60 = (($55) + 7)|0;
                 $61 = (($60|0) / 8)&-1;
                 $62 = (_CRYPTO_malloc($61,86803,474)|0);
                 $63 = ($62|0)==(0|0);
                 if ($63) {
                  _ERR_put_error(16,153,65,86803,475);
                  label = 67;
                  break L56;
                 }
                 $64 = (_BN_bn2bin($46,$62)|0);
                 $65 = ($64|0)==(0);
                 if (!($65)) {
                  $a_buf$0$i$i = $62;$buffer_1$0$i$i = $62;$len_1$0$i$i = $64;
                  label = 45;
                  break;
                 }
                 _ERR_put_error(16,153,3,86803,479);
                 $buffer_1$19$i$i = $62;$buffer_2$110$i$i = 0;$ok$07$i$i = 0;
                 label = 63;
                }
               } while(0);
               if ((label|0) == 45) {
                $$off2$i$i = (($56) + 14)|0;
                $66 = ($$off2$i$i>>>0)<(15);
                do {
                 if ($66) {
                  $b_buf$0$i$i = $char_zero$i$i;$buffer_2$0$i$i = 0;$len_2$0$i$i = 1;
                  label = 50;
                 } else {
                  $67 = (_CRYPTO_malloc($58,86803,490)|0);
                  $68 = ($67|0)==(0|0);
                  if ($68) {
                   _ERR_put_error(16,153,65,86803,491);
                   $buffer_2$1$i$i = 0;$ok$0$i$i = 0;
                   break;
                  }
                  $69 = (_BN_bn2bin($48,$67)|0);
                  $70 = ($69|0)==(0);
                  if (!($70)) {
                   $b_buf$0$i$i = $67;$buffer_2$0$i$i = $67;$len_2$0$i$i = $69;
                   label = 50;
                   break;
                  }
                  _ERR_put_error(16,153,3,86803,495);
                  $buffer_2$1$i$i = $67;$ok$0$i$i = 0;
                 }
                } while(0);
                L72: do {
                 if ((label|0) == 50) {
                  $71 = HEAP32[$39>>2]|0;
                  $72 = (_ASN1_STRING_set($71,$a_buf$0$i$i,$len_1$0$i$i)|0);
                  $73 = ($72|0)==(0);
                  do {
                   if (!($73)) {
                    $74 = HEAP32[$43>>2]|0;
                    $75 = (_ASN1_STRING_set($74,$b_buf$0$i$i,$len_2$0$i$i)|0);
                    $76 = ($75|0)==(0);
                    if ($76) {
                     break;
                    }
                    $77 = ((($group)) + 60|0);
                    $78 = HEAP32[$77>>2]|0;
                    $79 = ($78|0)==(0|0);
                    $80 = ((($39)) + 8|0);
                    $81 = HEAP32[$80>>2]|0;
                    $82 = ($81|0)!=(0|0);
                    if ($79) {
                     if (!($82)) {
                      $buffer_2$1$i$i = $buffer_2$0$i$i;$ok$0$i$i = 1;
                      break L72;
                     }
                     _ASN1_BIT_STRING_free($81);
                     HEAP32[$80>>2] = 0;
                     $buffer_2$1$i$i = $buffer_2$0$i$i;$ok$0$i$i = 1;
                     break L72;
                    }
                    do {
                     if ($82) {
                      $86 = $81;$92 = $78;
                     } else {
                      $83 = (_ASN1_BIT_STRING_new()|0);
                      HEAP32[$80>>2] = $83;
                      $84 = ($83|0)==(0|0);
                      if ($84) {
                       _ERR_put_error(16,153,65,86803,512);
                       $buffer_2$1$i$i = $buffer_2$0$i$i;$ok$0$i$i = 0;
                       break L72;
                      } else {
                       $$pre$i$i = HEAP32[$77>>2]|0;
                       $86 = $83;$92 = $$pre$i$i;
                       break;
                      }
                     }
                    } while(0);
                    $85 = ((($86)) + 12|0);
                    $87 = HEAP32[$85>>2]|0;
                    $88 = $87 & -16;
                    $89 = $88 | 8;
                    HEAP32[$85>>2] = $89;
                    $90 = ((($group)) + 64|0);
                    $91 = HEAP32[$90>>2]|0;
                    $93 = (_ASN1_BIT_STRING_set($86,$92,$91)|0);
                    $94 = ($93|0)==(0);
                    if (!($94)) {
                     $buffer_2$1$i$i = $buffer_2$0$i$i;$ok$0$i$i = 1;
                     break L72;
                    }
                    _ERR_put_error(16,153,13,86803,519);
                    $buffer_2$1$i$i = $buffer_2$0$i$i;$ok$0$i$i = 0;
                    break L72;
                   }
                  } while(0);
                  _ERR_put_error(16,153,13,86803,504);
                  $buffer_2$1$i$i = $buffer_2$0$i$i;$ok$0$i$i = 0;
                 }
                } while(0);
                $95 = ($buffer_1$0$i$i|0)==(0|0);
                if ($95) {
                 $buffer_2$15$i$i = $buffer_2$1$i$i;$ok$03$i$i = $ok$0$i$i;
                } else {
                 $buffer_1$19$i$i = $buffer_1$0$i$i;$buffer_2$110$i$i = $buffer_2$1$i$i;$ok$07$i$i = $ok$0$i$i;
                 label = 63;
                }
               }
               if ((label|0) == 63) {
                _CRYPTO_free($buffer_1$19$i$i);
                $buffer_2$15$i$i = $buffer_2$110$i$i;$ok$03$i$i = $ok$07$i$i;
               }
               $96 = ($buffer_2$15$i$i|0)==(0|0);
               if ($96) {
                _BN_free($46);
                $ok$031314$i9$i = $ok$03$i$i;
                break;
               } else {
                _CRYPTO_free($buffer_2$15$i$i);
                _BN_free($46);
                $ok$031314$i9$i = $ok$03$i$i;
                break;
               }
              }
             } while(0);
             if ((label|0) == 67) {
              _BN_free($46);
              $ok$031314$i9$i = 0;
             }
             _BN_free($48);
             $97 = ($ok$031314$i9$i|0)==(0);
             if ($97) {
              break;
             }
             $98 = (_EC_GROUP_get0_generator($group)|0);
             $99 = ($98|0)==(0|0);
             if ($99) {
              _ERR_put_error(16,155,113,86803,583);
              $buffer$0$ph$ph$i = 0;
              label = 94;
              break L20;
             }
             $100 = (_EC_GROUP_get_point_conversion_form($group)|0);
             $101 = (_EC_POINT_point2oct($group,$98,$100,0,0,0)|0);
             $102 = ($101|0)==(0);
             if ($102) {
              _ERR_put_error(16,155,16,86803,591);
              $buffer$0$ph$ph$i = 0;
              label = 94;
              break L20;
             }
             $103 = (_CRYPTO_malloc($101,86803,594)|0);
             $104 = ($103|0)==(0|0);
             if ($104) {
              _ERR_put_error(16,155,65,86803,595);
              $buffer$0$ph$ph$i = 0;
              label = 94;
              break L20;
             }
             $105 = (_EC_POINT_point2oct($group,$98,$100,$103,$101,0)|0);
             $106 = ($105|0)==(0);
             if ($106) {
              _ERR_put_error(16,155,16,86803,599);
              $buffer$0$ph$ph$i = $103;
              label = 94;
              break L20;
             }
             $107 = ((($16)) + 12|0);
             $108 = HEAP32[$107>>2]|0;
             $109 = ($108|0)==(0|0);
             do {
              if ($109) {
               $110 = (_ASN1_OCTET_STRING_new()|0);
               HEAP32[$107>>2] = $110;
               $111 = ($110|0)==(0|0);
               if (!($111)) {
                $112 = $110;
                break;
               }
               _ERR_put_error(16,155,65,86803,603);
               $buffer$0$ph$ph$i = $103;
               label = 94;
               break L20;
              } else {
               $112 = $108;
              }
             } while(0);
             $113 = (_ASN1_OCTET_STRING_set($112,$103,$101)|0);
             $114 = ($113|0)==(0);
             if ($114) {
              _ERR_put_error(16,155,13,86803,607);
              $buffer$0$ph$ph$i = $103;
              label = 94;
              break L20;
             }
             $115 = (_EC_GROUP_get_order($group,$14,0)|0);
             $116 = ($115|0)==(0);
             if ($116) {
              _ERR_put_error(16,155,16,86803,613);
              $buffer$0$ph$ph$i = $103;
              label = 94;
              break L20;
             }
             $117 = ((($16)) + 16|0);
             $118 = HEAP32[$117>>2]|0;
             $119 = (_BN_to_ASN1_INTEGER($14,$118)|0);
             HEAP32[$117>>2] = $119;
             $120 = ($119|0)==(0|0);
             if ($120) {
              _ERR_put_error(16,155,13,86803,618);
              $buffer$0$ph$ph$i = $103;
              label = 94;
              break L20;
             }
             $121 = (_EC_GROUP_get_cofactor($group,$14,0)|0);
             $122 = ($121|0)==(0);
             do {
              if (!($122)) {
               $123 = ((($16)) + 20|0);
               $124 = HEAP32[$123>>2]|0;
               $125 = (_BN_to_ASN1_INTEGER($14,$124)|0);
               HEAP32[$123>>2] = $125;
               $126 = ($125|0)==(0|0);
               if (!($126)) {
                break;
               }
               _ERR_put_error(16,155,13,86803,626);
               $buffer$0$ph$ph$i = $103;
               label = 94;
               break L20;
              }
             } while(0);
             _BN_free($14);
             $buffer$016$ph35$i = $103;$ret$2$ph36$i = $16;
             break L20;
            }
           }
          }
         } while(0);
         if ((label|0) == 69) {
         }
         _ERR_put_error(16,155,16,86803,577);
         $buffer$0$ph$ph$i = 0;
         label = 94;
         break L20;
        }
       } while(0);
       _BN_free($32);
       label = 30;
      }
     } while(0);
     if ((label|0) == 30) {
      _ERR_put_error(16,155,16,86803,571);
      $buffer$0$ph$ph$i = 0;
      label = 94;
     }
     if ((label|0) == 94) {
      _ASN1_item_free($16,36564);
      _BN_free($14);
      $127 = ($buffer$0$ph$ph$i|0)==(0|0);
      if ($127) {
       break;
      } else {
       $buffer$016$ph35$i = $buffer$0$ph$ph$i;$ret$2$ph36$i = 0;
      }
     }
     _CRYPTO_free($buffer$016$ph35$i);
     $129 = ((($ret$0)) + 4|0);
     HEAP32[$129>>2] = $ret$2$ph36$i;
     $130 = ($ret$2$ph36$i|0)==(0|0);
     if ($130) {
      break L12;
     } else {
      $$0 = $ret$0;
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $128 = ((($ret$0)) + 4|0);
   HEAP32[$128>>2] = 0;
  } else {
   $12 = (_EC_GROUP_get_curve_name($group)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$ret$0>>2] = 0;
    $131 = (_OBJ_nid2obj($12)|0);
    $132 = ((($ret$0)) + 4|0);
    HEAP32[$132>>2] = $131;
    $133 = ($131|0)==(0|0);
    if (!($133)) {
     $$0 = $ret$0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 _ASN1_item_free($ret$0,36592);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EC_GROUP_new_by_curve_name($nid) {
 $nid = $nid|0;
 var $$0 = 0, $$sum$i = 0, $$sum1$i = 0, $$sum2$i = 0, $$sum3$i = 0, $$sum4$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$0$i = 0, $a$1$ph$ph$i$ph = 0, $a$1733$i329 = 0, $a$1733$i421 = 0, $b$1$ph$ph$i$ph = 0, $b$1931$i528 = 0, $b$1931$i620 = 0, $group$0$i = 0, $group$1$ph$ph$i$ph = 0, $group$234$i = 0, $group$235$i130 = 0, $group$235$i222 = 0, $i$052 = 0, $i$052$lcssa = 0;
 var $order$0$ph$ph$i = 0, $order$01524$i = 0, $order$01525$i1125 = 0, $order$01525$i1217 = 0, $x$01129$i727 = 0, $x$01129$i819 = 0, $y$1$ph$ph$i = 0, $y$11326$i = 0, $y$11327$i1018 = 0, $y$11327$i926 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nid|0)<(1);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$052 = 0;
 }
 while(1) {
  $1 = (37344 + ($i$052<<4)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==($nid|0);
  if ($3) {
   $i$052$lcssa = $i$052;
   label = 3;
   break;
  }
  $57 = (($i$052) + 1)|0;
  $58 = ($57>>>0)<(39);
  if ($58) {
   $i$052 = $57;
  } else {
   break;
  }
 }
 do {
  if ((label|0) == 3) {
   $4 = (((37344 + ($i$052$lcssa<<4)|0)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_BN_CTX_new()|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    _ERR_put_error(16,175,65,87131,3065);
    _EC_GROUP_free(0);
    break;
   }
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($5)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($5)) + 16|0);
   $13 = (($12) + ($9)|0);
   $14 = (_BN_bin2bn($13,$11,0)|0);
   $15 = ($14|0)==(0|0);
   do {
    if ($15) {
     $a$0$i = 0;
     label = 7;
    } else {
     $$sum$i = (($11) + ($9))|0;
     $16 = (($12) + ($$sum$i)|0);
     $17 = (_BN_bin2bn($16,$11,0)|0);
     $18 = ($17|0)==(0|0);
     if ($18) {
      $a$0$i = 0;
      label = 7;
     } else {
      $19 = $11 << 1;
      $$sum1$i = (($19) + ($9))|0;
      $20 = (($12) + ($$sum1$i)|0);
      $21 = (_BN_bin2bn($20,$11,0)|0);
      $22 = ($21|0)==(0|0);
      if ($22) {
       $a$0$i = $17;
       label = 7;
      } else {
       $23 = HEAP32[$5>>2]|0;
       $24 = ($23|0)==(406);
       if ($24) {
        $25 = (_EC_GROUP_new_curve_GFp($14,$17,$21,$6)|0);
        $26 = ($25|0)==(0|0);
        if ($26) {
         _ERR_put_error(16,175,16,87131,3091);
         $a$1$ph$ph$i$ph = $17;$b$1$ph$ph$i$ph = $21;$group$1$ph$ph$i$ph = 0;
         label = 29;
         break;
        } else {
         $group$0$i = $25;
        }
       } else {
        $group$0$i = 0;
       }
       $27 = (_EC_POINT_new($group$0$i)|0);
       $28 = ($27|0)==(0|0);
       if ($28) {
        _ERR_put_error(16,175,16,87131,3107);
        $a$1$ph$ph$i$ph = $17;$b$1$ph$ph$i$ph = $21;$group$1$ph$ph$i$ph = $group$0$i;
        label = 29;
        break;
       }
       $29 = ($11*3)|0;
       $$sum2$i = (($29) + ($9))|0;
       $30 = (($12) + ($$sum2$i)|0);
       $31 = (_BN_bin2bn($30,$11,0)|0);
       $32 = ($31|0)==(0|0);
       do {
        if ($32) {
         label = 15;
        } else {
         $33 = $11 << 2;
         $$sum3$i = (($33) + ($9))|0;
         $34 = (($12) + ($$sum3$i)|0);
         $35 = (_BN_bin2bn($34,$11,0)|0);
         $36 = ($35|0)==(0|0);
         if ($36) {
          label = 15;
         } else {
          $37 = (_EC_POINT_set_affine_coordinates_GFp($group$0$i,$27,$31,$35,$6)|0);
          $38 = ($37|0)==(0);
          if ($38) {
           _ERR_put_error(16,175,16,87131,3117);
           $order$0$ph$ph$i = 0;$y$1$ph$ph$i = $35;
           label = 26;
           break;
          }
          $39 = ($11*5)|0;
          $$sum4$i = (($39) + ($9))|0;
          $40 = (($12) + ($$sum4$i)|0);
          $41 = (_BN_bin2bn($40,$11,0)|0);
          $42 = ($41|0)==(0|0);
          if (!($42)) {
           $43 = ((($5)) + 12|0);
           $44 = HEAP32[$43>>2]|0;
           $45 = (_BN_set_word($31,$44)|0);
           $46 = ($45|0)==(0);
           if (!($46)) {
            $47 = (_EC_GROUP_set_generator($group$0$i,$27,$41,$31)|0);
            $48 = ($47|0)==(0);
            if ($48) {
             _ERR_put_error(16,175,16,87131,3126);
             $order$0$ph$ph$i = $41;$y$1$ph$ph$i = $35;
             label = 26;
             break;
            }
            $49 = ($9|0)==(0);
            if ($49) {
             $group$234$i = $group$0$i;$order$01524$i = $41;$y$11326$i = $35;
             break;
            }
            $50 = (_EC_GROUP_set_seed($group$0$i,$12,$9)|0);
            $51 = ($50|0)==(0);
            if (!($51)) {
             $group$234$i = $group$0$i;$order$01524$i = $41;$y$11326$i = $35;
             break;
            }
            _ERR_put_error(16,175,16,87131,3131);
            $order$0$ph$ph$i = $41;$y$1$ph$ph$i = $35;
            label = 26;
            break;
           }
          }
          _ERR_put_error(16,175,3,87131,3122);
          $order$0$ph$ph$i = $41;$y$1$ph$ph$i = $35;
          label = 26;
         }
        }
       } while(0);
       if ((label|0) == 15) {
        _ERR_put_error(16,175,3,87131,3113);
        $order$0$ph$ph$i = 0;$y$1$ph$ph$i = 0;
        label = 26;
       }
       if ((label|0) == 26) {
        _EC_GROUP_free($group$0$i);
        $group$234$i = 0;$order$01524$i = $order$0$ph$ph$i;$y$11326$i = $y$1$ph$ph$i;
       }
       _EC_POINT_free($27);
       _BN_CTX_free($6);
       $a$1733$i329 = $17;$b$1931$i528 = $21;$group$235$i130 = $group$234$i;$order$01525$i1125 = $order$01524$i;$x$01129$i727 = $31;$y$11327$i926 = $y$11326$i;
       label = 30;
      }
     }
    }
   } while(0);
   if ((label|0) == 7) {
    _ERR_put_error(16,175,3,87131,3078);
    $a$1$ph$ph$i$ph = $a$0$i;$b$1$ph$ph$i$ph = 0;$group$1$ph$ph$i$ph = 0;
    label = 29;
   }
   if ((label|0) == 29) {
    _EC_GROUP_free($group$1$ph$ph$i$ph);
    _BN_CTX_free($6);
    if ($15) {
     $a$1733$i421 = $a$1$ph$ph$i$ph;$b$1931$i620 = $b$1$ph$ph$i$ph;$group$235$i222 = 0;$order$01525$i1217 = 0;$x$01129$i819 = 0;$y$11327$i1018 = 0;
    } else {
     $a$1733$i329 = $a$1$ph$ph$i$ph;$b$1931$i528 = $b$1$ph$ph$i$ph;$group$235$i130 = 0;$order$01525$i1125 = 0;$x$01129$i727 = 0;$y$11327$i926 = 0;
     label = 30;
    }
   }
   if ((label|0) == 30) {
    _BN_free($14);
    $a$1733$i421 = $a$1733$i329;$b$1931$i620 = $b$1931$i528;$group$235$i222 = $group$235$i130;$order$01525$i1217 = $order$01525$i1125;$x$01129$i819 = $x$01129$i727;$y$11327$i1018 = $y$11327$i926;
   }
   $52 = ($a$1733$i421|0)==(0|0);
   if (!($52)) {
    _BN_free($a$1733$i421);
   }
   $53 = ($b$1931$i620|0)==(0|0);
   if (!($53)) {
    _BN_free($b$1931$i620);
   }
   $54 = ($order$01525$i1217|0)==(0|0);
   if (!($54)) {
    _BN_free($order$01525$i1217);
   }
   $55 = ($x$01129$i819|0)==(0|0);
   if (!($55)) {
    _BN_free($x$01129$i819);
   }
   $56 = ($y$11327$i1018|0)==(0|0);
   if (!($56)) {
    _BN_free($y$11327$i1018);
   }
   $59 = ($group$235$i222|0)==(0|0);
   if (!($59)) {
    _EC_GROUP_set_curve_name($group$235$i222,$nid);
    $$0 = $group$235$i222;
    return ($$0|0);
   }
  }
 } while(0);
 _ERR_put_error(16,174,129,87131,3179);
 $$0 = 0;
 return ($$0|0);
}
function _EC_curve_nid2nist($nid) {
 $nid = $nid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($nid|0)==(723);
 if ($0) {
  $i$02$lcssa = 0;
 } else {
  $3 = ($nid|0)==(727);
  if ($3) {
   $i$02$lcssa = 1;
  } else {
   $4 = ($nid|0)==(730);
   if ($4) {
    $i$02$lcssa = 2;
   } else {
    $5 = ($nid|0)==(732);
    if ($5) {
     $i$02$lcssa = 3;
    } else {
     $6 = ($nid|0)==(734);
     if ($6) {
      $i$02$lcssa = 4;
     } else {
      $7 = ($nid|0)==(721);
      if ($7) {
       $i$02$lcssa = 5;
      } else {
       $8 = ($nid|0)==(726);
       if ($8) {
        $i$02$lcssa = 6;
       } else {
        $9 = ($nid|0)==(729);
        if ($9) {
         $i$02$lcssa = 7;
        } else {
         $10 = ($nid|0)==(731);
         if ($10) {
          $i$02$lcssa = 8;
         } else {
          $11 = ($nid|0)==(733);
          if ($11) {
           $i$02$lcssa = 9;
          } else {
           $12 = ($nid|0)==(409);
           if ($12) {
            $i$02$lcssa = 10;
           } else {
            $13 = ($nid|0)==(713);
            if ($13) {
             $i$02$lcssa = 11;
            } else {
             $14 = ($nid|0)==(415);
             if ($14) {
              $i$02$lcssa = 12;
             } else {
              $15 = ($nid|0)==(715);
              if ($15) {
               $i$02$lcssa = 13;
              } else {
               $16 = ($nid|0)==(716);
               if ($16) {
                $i$02$lcssa = 14;
               } else {
                $$0 = 0;
                return ($$0|0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $1 = (37968 + ($i$02$lcssa<<3)|0);
 $2 = HEAP32[$1>>2]|0;
 $$0 = $2;
 return ($$0|0);
}
function _EC_curve_nist2nid($name) {
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp(87142,$name)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $i$02$lcssa = 0;
 } else {
  $4 = (_strcmp(87148,$name)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $i$02$lcssa = 1;
  } else {
   $6 = (_strcmp(87154,$name)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $i$02$lcssa = 2;
   } else {
    $8 = (_strcmp(87160,$name)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $i$02$lcssa = 3;
    } else {
     $10 = (_strcmp(87166,$name)|0);
     $11 = ($10|0)==(0);
     if ($11) {
      $i$02$lcssa = 4;
     } else {
      $12 = (_strcmp(87172,$name)|0);
      $13 = ($12|0)==(0);
      if ($13) {
       $i$02$lcssa = 5;
      } else {
       $14 = (_strcmp(87178,$name)|0);
       $15 = ($14|0)==(0);
       if ($15) {
        $i$02$lcssa = 6;
       } else {
        $16 = (_strcmp(87184,$name)|0);
        $17 = ($16|0)==(0);
        if ($17) {
         $i$02$lcssa = 7;
        } else {
         $18 = (_strcmp(87190,$name)|0);
         $19 = ($18|0)==(0);
         if ($19) {
          $i$02$lcssa = 8;
         } else {
          $20 = (_strcmp(87196,$name)|0);
          $21 = ($20|0)==(0);
          if ($21) {
           $i$02$lcssa = 9;
          } else {
           $22 = (_strcmp(87202,$name)|0);
           $23 = ($22|0)==(0);
           if ($23) {
            $i$02$lcssa = 10;
           } else {
            $24 = (_strcmp(87208,$name)|0);
            $25 = ($24|0)==(0);
            if ($25) {
             $i$02$lcssa = 11;
            } else {
             $26 = (_strcmp(87214,$name)|0);
             $27 = ($26|0)==(0);
             if ($27) {
              $i$02$lcssa = 12;
             } else {
              $28 = (_strcmp(87220,$name)|0);
              $29 = ($28|0)==(0);
              if ($29) {
               $i$02$lcssa = 13;
              } else {
               $30 = (_strcmp(87226,$name)|0);
               $31 = ($30|0)==(0);
               if ($31) {
                $i$02$lcssa = 14;
               } else {
                $$0 = 0;
                return ($$0|0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $2 = (((37968 + ($i$02$lcssa<<3)|0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _EC_GROUP_new_curve_GFp($p,$a,$b,$ctx) {
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$mask = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_GFp_nist_method()|0);
 $1 = (_EC_GROUP_new($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_EC_GROUP_set_curve_GFp($1,$p,$a,$b,$ctx)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $1;
  return ($$0|0);
 }
 $5 = (_ERR_peek_last_error()|0);
 $$mask = $5 & -16777216;
 $6 = ($$mask|0)==(268435456);
 if ($6) {
  $7 = $5 & 4095;
  $$off = (($7) + -135)|0;
  $switch = ($$off>>>0)<(2);
  if ($switch) {
   _ERR_clear_error();
   _EC_GROUP_clear_free($1);
   $8 = (_EC_GFp_mont_method()|0);
   $9 = (_EC_GROUP_new($8)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$0 = 0;
    return ($$0|0);
   }
   $11 = (_EC_GROUP_set_curve_GFp($9,$p,$a,$b,$ctx)|0);
   $12 = ($11|0)==(0);
   if (!($12)) {
    $$0 = $9;
    return ($$0|0);
   }
   _EC_GROUP_clear_free($9);
   $$0 = 0;
   return ($$0|0);
  }
 }
 _EC_GROUP_clear_free($1);
 $$0 = 0;
 return ($$0|0);
}
function _EC_KEY_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(36,88254,75)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(16,182,65,88254,77);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$0>>2] = 1;
  $2 = ((($0)) + 28|0);
  HEAP32[$2>>2] = 0;
  $3 = ((($0)) + 4|0);
  $4 = ((($0)) + 20|0);
  ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
  HEAP32[$4>>2] = 4;
  $5 = ((($0)) + 24|0);
  HEAP32[$5>>2] = 1;
  $6 = ((($0)) + 32|0);
  HEAP32[$6>>2] = 0;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_KEY_free($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($r)) + 24|0);
 $2 = (_CRYPTO_add_lock($1,-1,33,88254,113)|0);
 $3 = ($2|0)>(0);
 if ($3) {
  return;
 }
 $4 = ((($r)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _EC_GROUP_free($5);
 }
 $7 = ((($r)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _EC_POINT_free($8);
 }
 $10 = ((($r)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _BN_clear_free($11);
 }
 $13 = ((($r)) + 32|0);
 _EC_EX_DATA_free_all_data($13);
 _OPENSSL_cleanse($r,36);
 _CRYPTO_free($r);
 return;
}
function _EC_KEY_copy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $$0 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $d$0 = 0, $d$02 = 0, $d$03 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dest|0)==(0|0);
 $1 = ($src|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  _ERR_put_error(16,178,67,88254,145);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($src)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = (_EC_GROUP_method_of($3)|0);
  $6 = ((($dest)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   _EC_GROUP_free($7);
  }
  $9 = (_EC_GROUP_new($5)|0);
  HEAP32[$6>>2] = $9;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0 = 0;
   return ($$0|0);
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = (_EC_GROUP_copy($9,$11)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $14 = ((($src)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = HEAP32[$2>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = ((($dest)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $22 = $17;
   } else {
    _EC_POINT_free($20);
    $$pre = HEAP32[$2>>2]|0;
    $22 = $$pre;
   }
   $23 = (_EC_POINT_new($22)|0);
   HEAP32[$19>>2] = $23;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $$0 = 0;
    return ($$0|0);
   }
   $25 = HEAP32[$14>>2]|0;
   $26 = (_EC_POINT_copy($23,$25)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 $28 = ((($src)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $31 = ((($dest)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0|0);
  do {
   if ($33) {
    $34 = (_BN_new()|0);
    HEAP32[$31>>2] = $34;
    $35 = ($34|0)==(0|0);
    if ($35) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $$pre5 = HEAP32[$28>>2]|0;
     $36 = $34;$37 = $$pre5;
     break;
    }
   } else {
    $36 = $32;$37 = $29;
   }
  } while(0);
  $38 = (_BN_copy($36,$37)|0);
  $39 = ($38|0)==(0|0);
  if ($39) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $40 = ((($dest)) + 32|0);
 _EC_EX_DATA_free_all_data($40);
 $41 = ((($src)) + 32|0);
 $d$02 = HEAP32[$41>>2]|0;
 $42 = ($d$02|0)==(0|0);
 L36: do {
  if (!($42)) {
   $d$03 = $d$02;
   while(1) {
    $44 = ((($d$03)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($d$03)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (FUNCTION_TABLE_ii[$45 & 127]($47)|0);
    $49 = ($48|0)==(0|0);
    if ($49) {
     $$0 = 0;
     label = 24;
     break;
    }
    $50 = HEAP32[$44>>2]|0;
    $51 = ((($d$03)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($d$03)) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (_EC_EX_DATA_set_data($40,$48,$50,$52,$54)|0);
    $56 = ($55|0)==(0);
    if ($56) {
     $$0 = 0;
     label = 24;
     break;
    }
    $d$0 = HEAP32[$d$03>>2]|0;
    $43 = ($d$0|0)==(0|0);
    if ($43) {
     break L36;
    } else {
     $d$03 = $d$0;
    }
   }
   if ((label|0) == 24) {
    return ($$0|0);
   }
  }
 } while(0);
 $57 = ((($src)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($dest)) + 16|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($src)) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($dest)) + 20|0);
 HEAP32[$62>>2] = $61;
 $63 = HEAP32[$src>>2]|0;
 HEAP32[$dest>>2] = $63;
 $64 = ((($src)) + 28|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($dest)) + 28|0);
 HEAP32[$66>>2] = $65;
 $$0 = $dest;
 return ($$0|0);
}
function _EC_KEY_dup($ec_key) {
 $ec_key = $ec_key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(36,88254,75)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(16,182,65,88254,77);
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1;
 $2 = ((($0)) + 28|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 4|0);
 $4 = ((($0)) + 20|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 HEAP32[$4>>2] = 4;
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($0)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = (_EC_KEY_copy($0,$ec_key)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$0 = $0;
  return ($$0|0);
 }
 _EC_KEY_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _EC_KEY_up_ref($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 24|0);
 $1 = (_CRYPTO_add_lock($0,1,33,88254,217)|0);
 $2 = ($1|0)>(1);
 $3 = $2&1;
 return ($3|0);
}
function _EC_KEY_generate_key($eckey) {
 $eckey = $eckey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx$07$ph$ph = 0, $ctx$071932 = 0;
 var $ok$06$ph = 0, $ok$062029 = 0, $ok$062030 = 0, $priv_key$0 = 0, $pub_key$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($eckey|0)==(0|0);
 if (!($0)) {
  $1 = ((($eckey)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (_BN_new()|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0 = 0;
    return ($$0|0);
   }
   $6 = (_BN_CTX_new()|0);
   $7 = ($6|0)==(0|0);
   do {
    if ($7) {
     $ctx$07$ph$ph = 0;
     label = 19;
    } else {
     $8 = ((($eckey)) + 12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      $11 = (_BN_new()|0);
      $12 = ($11|0)==(0|0);
      if ($12) {
       $ctx$07$ph$ph = $6;
       label = 19;
       break;
      } else {
       $priv_key$0 = $11;
      }
     } else {
      $priv_key$0 = $9;
     }
     $13 = HEAP32[$1>>2]|0;
     $14 = (_EC_GROUP_get_order($13,$4,$6)|0);
     $15 = ($14|0)==(0);
     L12: do {
      if ($15) {
       label = 18;
      } else {
       $16 = ((($priv_key$0)) + 4|0);
       while(1) {
        $17 = (_BN_rand_range($priv_key$0,$4)|0);
        $18 = ($17|0)==(0);
        if ($18) {
         label = 18;
         break L12;
        }
        $19 = HEAP32[$16>>2]|0;
        $20 = ($19|0)==(0);
        if (!($20)) {
         break;
        }
       }
       $21 = ((($eckey)) + 8|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = ($22|0)==(0|0);
       if ($23) {
        $24 = HEAP32[$1>>2]|0;
        $25 = (_EC_POINT_new($24)|0);
        $26 = ($25|0)==(0|0);
        if ($26) {
         label = 18;
         break;
        } else {
         $pub_key$0 = $25;
        }
       } else {
        $pub_key$0 = $22;
       }
       $27 = HEAP32[$1>>2]|0;
       $28 = (_EC_POINT_mul($27,$pub_key$0,$priv_key$0,0,0,$6)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        $ok$06$ph = 0;
       } else {
        HEAP32[$8>>2] = $priv_key$0;
        HEAP32[$21>>2] = $pub_key$0;
        $ok$06$ph = 1;
       }
       _BN_free($4);
       $30 = ((($eckey)) + 8|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(0|0);
       if ($32) {
        _EC_POINT_free($pub_key$0);
        $ok$062029 = $ok$06$ph;
       } else {
        $ok$062029 = $ok$06$ph;
       }
      }
     } while(0);
     if ((label|0) == 18) {
      _BN_free($4);
      $ok$062029 = 0;
     }
     $33 = ((($eckey)) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0|0);
     if ($35) {
      _BN_free($priv_key$0);
      $ctx$071932 = $6;$ok$062030 = $ok$062029;
     } else {
      $ctx$071932 = $6;$ok$062030 = $ok$062029;
     }
    }
   } while(0);
   if ((label|0) == 19) {
    _BN_free($4);
    $ctx$071932 = $ctx$07$ph$ph;$ok$062030 = 0;
   }
   $36 = ($ctx$071932|0)==(0|0);
   if ($36) {
    $$0 = $ok$062030;
    return ($$0|0);
   }
   _BN_CTX_free($ctx$071932);
   $$0 = $ok$062030;
   return ($$0|0);
  }
 }
 _ERR_put_error(16,179,67,88254,243);
 $$0 = 0;
 return ($$0|0);
}
function _EC_KEY_set_public_key($key,$pub_key) {
 $key = $key|0;
 $pub_key = $pub_key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _EC_POINT_free($1);
 }
 $3 = ((($key)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_EC_POINT_dup($pub_key,$4)|0);
 HEAP32[$0>>2] = $5;
 $not$ = ($5|0)!=(0|0);
 $6 = $not$&1;
 return ($6|0);
}
function _EC_KEY_get0_group($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_KEY_set_group($key,$group) {
 $key = $key|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _EC_GROUP_free($1);
 }
 $3 = (_EC_GROUP_dup($group)|0);
 HEAP32[$0>>2] = $3;
 $not$ = ($3|0)!=(0|0);
 $4 = $not$&1;
 return ($4|0);
}
function _EC_KEY_get0_private_key($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_KEY_get0_public_key($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_KEY_get_enc_flags($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_KEY_set_enc_flags($key,$flags) {
 $key = $key|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 16|0);
 HEAP32[$0>>2] = $flags;
 return;
}
function _EC_KEY_get_conv_form($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_KEY_get_key_method_data($key,$dup_func,$free_func,$clear_free_func) {
 $key = $key|0;
 $dup_func = $dup_func|0;
 $free_func = $free_func|0;
 $clear_free_func = $clear_free_func|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_lock(5,33,88254,511);
 $0 = ((($key)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EC_EX_DATA_get_data($1,$dup_func,$free_func,$clear_free_func)|0);
 _CRYPTO_lock(6,33,88254,515);
 return ($2|0);
}
function _EC_KEY_insert_key_method_data($key,$data,$dup_func,$free_func,$clear_free_func) {
 $key = $key|0;
 $data = $data|0;
 $dup_func = $dup_func|0;
 $free_func = $free_func|0;
 $clear_free_func = $clear_free_func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_lock(9,33,88254,527);
 $0 = ((($key)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EC_EX_DATA_get_data($1,$dup_func,$free_func,$clear_free_func)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _CRYPTO_lock(10,33,88254,534);
  return ($2|0);
 }
 (_EC_EX_DATA_set_data($0,$data,$dup_func,$free_func,$clear_free_func)|0);
 _CRYPTO_lock(10,33,88254,534);
 return ($2|0);
}
function _EC_KEY_get_flags($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_KEY_set_flags($key,$flags) {
 $key = $key|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | $flags;
 HEAP32[$0>>2] = $2;
 return;
}
function _EC_KEY_clear_flags($key,$flags) {
 $key = $key|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $flags ^ -1;
 $1 = ((($key)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & $0;
 HEAP32[$1>>2] = $3;
 return;
}
function _EC_GROUP_new($meth) {
 $meth = $meth|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($meth|0)==(0|0);
 if ($0) {
  _ERR_put_error(16,108,108,88263,80);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($meth)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,108,66,88263,84);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_CRYPTO_malloc(176,88263,88)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _ERR_put_error(16,108,65,88263,90);
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$4>>2] = $meth;
 $6 = ((($4)) + 68|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 172|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($4)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($4)) + 8|0);
 _BN_init($9);
 $10 = ((($4)) + 28|0);
 _BN_init($10);
 $11 = ((($4)) + 48|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($4)) + 52|0);
 HEAP32[$12>>2] = -2147483648;
 $13 = ((($4)) + 56|0);
 HEAP32[$13>>2] = 4;
 $14 = ((($4)) + 60|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($4)) + 64|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$1>>2]|0;
 $17 = (FUNCTION_TABLE_ii[$16 & 127]($4)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $$0 = $4;
  return ($$0|0);
 }
 _CRYPTO_free($4);
 $$0 = 0;
 return ($$0|0);
}
function _EC_GROUP_free($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($group|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$group>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  FUNCTION_TABLE_vi[$3 & 63]($group);
 }
 $5 = ((($group)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $d$01$i = $6;
  while(1) {
   $8 = HEAP32[$d$01$i>>2]|0;
   $9 = ((($d$01$i)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($d$01$i)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$10 & 63]($12);
   _CRYPTO_free($d$01$i);
   $13 = ($8|0)==(0|0);
   if ($13) {
    break;
   } else {
    $d$01$i = $8;
   }
  }
 }
 HEAP32[$5>>2] = 0;
 $14 = ((($group)) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<(0);
 if ($16) {
  $17 = ((($group)) + 172|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   _BN_MONT_CTX_free($18);
  }
 }
 $20 = ((($group)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = HEAP32[$21>>2]|0;
  $24 = ((($23)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   FUNCTION_TABLE_vi[$25 & 63]($21);
  }
  _CRYPTO_free($21);
 }
 $27 = ((($group)) + 8|0);
 _BN_free($27);
 $28 = ((($group)) + 28|0);
 _BN_free($28);
 $29 = ((($group)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  _CRYPTO_free($30);
 }
 _CRYPTO_free($group);
 return;
}
function _EC_EX_DATA_free_all_data($ex_data) {
 $ex_data = $ex_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $d$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ex_data|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$ex_data>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $d$01 = $1;
  while(1) {
   $3 = HEAP32[$d$01>>2]|0;
   $4 = ((($d$01)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($d$01)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   FUNCTION_TABLE_vi[$5 & 63]($7);
   _CRYPTO_free($d$01);
   $8 = ($3|0)==(0|0);
   if ($8) {
    break;
   } else {
    $d$01 = $3;
   }
  }
 }
 HEAP32[$ex_data>>2] = 0;
 return;
}
function _EC_POINT_free($point) {
 $point = $point|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($point|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$point>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  FUNCTION_TABLE_vi[$3 & 63]($point);
 }
 _CRYPTO_free($point);
 return;
}
function _EC_GROUP_clear_free($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $d$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($group|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$group>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($1)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   FUNCTION_TABLE_vi[$6 & 63]($group);
  }
 } else {
  FUNCTION_TABLE_vi[$3 & 63]($group);
 }
 $8 = ((($group)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $d$01$i = $9;
  while(1) {
   $11 = HEAP32[$d$01$i>>2]|0;
   $12 = ((($d$01$i)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($d$01$i)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vi[$13 & 63]($15);
   _CRYPTO_free($d$01$i);
   $16 = ($11|0)==(0|0);
   if ($16) {
    break;
   } else {
    $d$01$i = $11;
   }
  }
 }
 HEAP32[$8>>2] = 0;
 $17 = ((($group)) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)<(0);
 if ($19) {
  $20 = ((($group)) + 172|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   _BN_MONT_CTX_free($21);
  }
 }
 $23 = ((($group)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  $26 = HEAP32[$24>>2]|0;
  $27 = ((($26)) + 48|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = ((($26)) + 44|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    FUNCTION_TABLE_vi[$31 & 63]($24);
   }
  } else {
   FUNCTION_TABLE_vi[$28 & 63]($24);
  }
  _OPENSSL_cleanse($24,68);
  _CRYPTO_free($24);
 }
 $33 = ((($group)) + 8|0);
 _BN_clear_free($33);
 $34 = ((($group)) + 28|0);
 _BN_clear_free($34);
 $35 = ((($group)) + 60|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = ((($group)) + 64|0);
  $39 = HEAP32[$38>>2]|0;
  _OPENSSL_cleanse($36,$39);
  $40 = HEAP32[$35>>2]|0;
  _CRYPTO_free($40);
 }
 _OPENSSL_cleanse($group,176);
 _CRYPTO_free($group);
 return;
}
function _EC_POINT_clear_free($point) {
 $point = $point|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($point|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$point>>2]|0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($1)) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   FUNCTION_TABLE_vi[$6 & 63]($point);
  }
 } else {
  FUNCTION_TABLE_vi[$3 & 63]($point);
 }
 _OPENSSL_cleanse($point,68);
 _CRYPTO_free($point);
 return;
}
function _EC_GROUP_copy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d$0 = 0, $d$0$i = 0, $d$01$i = 0, $d$01$i1 = 0, $d$02$i = 0, $d$07 = 0, $d$08 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dest>>2]|0;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,106,66,88263,176);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$src>>2]|0;
 $5 = ($0|0)==($4|0);
 if (!($5)) {
  _ERR_put_error(16,106,101,88263,180);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($dest|0)==($src|0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = ((($dest)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $d$01$i = $8;
  while(1) {
   $10 = HEAP32[$d$01$i>>2]|0;
   $11 = ((($d$01$i)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($d$01$i)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   FUNCTION_TABLE_vi[$12 & 63]($14);
   _CRYPTO_free($d$01$i);
   $15 = ($10|0)==(0|0);
   if ($15) {
    break;
   } else {
    $d$01$i = $10;
   }
  }
 }
 HEAP32[$7>>2] = 0;
 $16 = ((($src)) + 68|0);
 $d$07 = HEAP32[$16>>2]|0;
 $17 = ($d$07|0)==(0|0);
 L16: do {
  if (!($17)) {
   $d$08 = $d$07;
   L18: while(1) {
    $18 = ((($d$08)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($d$08)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (FUNCTION_TABLE_ii[$19 & 127]($21)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     $$0 = 0;
     label = 55;
     break;
    }
    $24 = HEAP32[$18>>2]|0;
    $25 = ((($d$08)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($d$08)) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $d$01$i1 = HEAP32[$7>>2]|0;
    $29 = ($d$01$i1|0)==(0|0);
    if (!($29)) {
     $d$02$i = $d$01$i1;
     while(1) {
      $30 = ((($d$02$i)) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==($24|0);
      if ($32) {
       $33 = ((($d$02$i)) + 12|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($34|0)==($26|0);
       if ($35) {
        $36 = ((($d$02$i)) + 16|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = ($37|0)==($28|0);
        if ($38) {
         label = 15;
         break L18;
        }
       }
      }
      $d$0$i = HEAP32[$d$02$i>>2]|0;
      $39 = ($d$0$i|0)==(0|0);
      if ($39) {
       break;
      } else {
       $d$02$i = $d$0$i;
      }
     }
    }
    $40 = (_CRYPTO_malloc(20,88263,578)|0);
    $41 = ($40|0)==(0|0);
    if ($41) {
     $$0 = 0;
     label = 55;
     break;
    }
    $42 = ((($40)) + 4|0);
    HEAP32[$42>>2] = $22;
    $43 = ((($40)) + 8|0);
    HEAP32[$43>>2] = $24;
    $44 = ((($40)) + 12|0);
    HEAP32[$44>>2] = $26;
    $45 = ((($40)) + 16|0);
    HEAP32[$45>>2] = $28;
    $46 = HEAP32[$7>>2]|0;
    HEAP32[$40>>2] = $46;
    HEAP32[$7>>2] = $40;
    $d$0 = HEAP32[$d$08>>2]|0;
    $47 = ($d$0|0)==(0|0);
    if ($47) {
     break L16;
    } else {
     $d$08 = $d$0;
    }
   }
   if ((label|0) == 15) {
    _ERR_put_error(16,211,108,88263,569);
    $$0 = 0;
    return ($$0|0);
   }
   else if ((label|0) == 55) {
    return ($$0|0);
   }
  }
 } while(0);
 $48 = ((($src)) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)<(0);
 if ($50) {
  $51 = ((($src)) + 172|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0|0);
  if ($53) {
   label = 25;
  } else {
   $54 = ((($dest)) + 172|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   do {
    if ($56) {
     $57 = (_BN_MONT_CTX_new()|0);
     HEAP32[$54>>2] = $57;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $$0 = 0;
      return ($$0|0);
     } else {
      $$pre = HEAP32[$51>>2]|0;
      $59 = $57;$60 = $$pre;
      break;
     }
    } else {
     $59 = $55;$60 = $52;
    }
   } while(0);
   $61 = (_BN_MONT_CTX_copy($59,$60)|0);
   $62 = ($61|0)==(0|0);
   if ($62) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 } else {
  label = 25;
 }
 if ((label|0) == 25) {
  $63 = ((($dest)) + 52|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)<(0);
  if ($65) {
   $66 = ((($dest)) + 172|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(0|0);
   if (!($68)) {
    _BN_MONT_CTX_free($67);
    HEAP32[$66>>2] = 0;
   }
  }
 }
 $69 = ((($src)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(0|0);
 $72 = ((($dest)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0|0);
 if ($71) {
  if (!($74)) {
   $88 = HEAP32[$73>>2]|0;
   $89 = ((($88)) + 48|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)==(0|0);
   if ($91) {
    $92 = ((($88)) + 44|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if (!($94)) {
     FUNCTION_TABLE_vi[$93 & 63]($73);
    }
   } else {
    FUNCTION_TABLE_vi[$90 & 63]($73);
   }
   _OPENSSL_cleanse($73,68);
   _CRYPTO_free($73);
   HEAP32[$72>>2] = 0;
  }
 } else {
  do {
   if ($74) {
    $75 = (_EC_POINT_new($dest)|0);
    HEAP32[$72>>2] = $75;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $$pre11 = HEAP32[$69>>2]|0;
     $78 = $75;$83 = $$pre11;
     break;
    }
   } else {
    $78 = $73;$83 = $70;
   }
  } while(0);
  $77 = HEAP32[$78>>2]|0;
  $79 = ((($77)) + 52|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)==(0|0);
  if ($81) {
   _ERR_put_error(16,114,66,88263,757);
   $$0 = 0;
   return ($$0|0);
  }
  $82 = HEAP32[$83>>2]|0;
  $84 = ($77|0)==($82|0);
  if (!($84)) {
   _ERR_put_error(16,114,101,88263,761);
   $$0 = 0;
   return ($$0|0);
  }
  $85 = ($78|0)==($83|0);
  if (!($85)) {
   $86 = (FUNCTION_TABLE_iii[$80 & 127]($78,$83)|0);
   $87 = ($86|0)==(0);
   if ($87) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 $95 = ((($dest)) + 8|0);
 $96 = ((($src)) + 8|0);
 $97 = (_BN_copy($95,$96)|0);
 $98 = ($97|0)==(0|0);
 if ($98) {
  $$0 = 0;
  return ($$0|0);
 }
 $99 = ((($dest)) + 28|0);
 $100 = ((($src)) + 28|0);
 $101 = (_BN_copy($99,$100)|0);
 $102 = ($101|0)==(0|0);
 if ($102) {
  $$0 = 0;
  return ($$0|0);
 }
 $103 = ((($src)) + 48|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($dest)) + 48|0);
 HEAP32[$105>>2] = $104;
 $106 = HEAP32[$48>>2]|0;
 $107 = ((($dest)) + 52|0);
 HEAP32[$107>>2] = $106;
 $108 = ((($src)) + 56|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ((($dest)) + 56|0);
 HEAP32[$110>>2] = $109;
 $111 = ((($src)) + 60|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)==(0|0);
 $114 = ((($dest)) + 60|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)!=(0|0);
 do {
  if ($113) {
   if ($116) {
    _CRYPTO_free($115);
   }
   HEAP32[$114>>2] = 0;
   $125 = ((($dest)) + 64|0);
   HEAP32[$125>>2] = 0;
  } else {
   if ($116) {
    _CRYPTO_free($115);
   }
   $117 = ((($src)) + 64|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (_CRYPTO_malloc($118,88263,243)|0);
   HEAP32[$114>>2] = $119;
   $120 = ($119|0)==(0|0);
   if ($120) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $121 = HEAP32[$111>>2]|0;
    $122 = HEAP32[$117>>2]|0;
    _memcpy(($119|0),($121|0),($122|0))|0;
    $123 = HEAP32[$117>>2]|0;
    $124 = ((($dest)) + 64|0);
    HEAP32[$124>>2] = $123;
    break;
   }
  }
 } while(0);
 $126 = HEAP32[$dest>>2]|0;
 $127 = ((($126)) + 20|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (FUNCTION_TABLE_iii[$128 & 127]($dest,$src)|0);
 $$0 = $129;
 return ($$0|0);
}
function _EC_EX_DATA_set_data($ex_data,$data,$dup_func,$free_func,$clear_free_func) {
 $ex_data = $ex_data|0;
 $data = $data|0;
 $dup_func = $dup_func|0;
 $free_func = $free_func|0;
 $clear_free_func = $clear_free_func|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $d$0 = 0, $d$01 = 0, $d$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ex_data|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $d$01 = HEAP32[$ex_data>>2]|0;
 $1 = ($d$01|0)==(0|0);
 L4: do {
  if (!($1)) {
   $d$02 = $d$01;
   while(1) {
    $2 = ((($d$02)) + 8|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ($3|0)==($dup_func|0);
    if ($4) {
     $5 = ((($d$02)) + 12|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($6|0)==($free_func|0);
     if ($7) {
      $8 = ((($d$02)) + 16|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = ($9|0)==($clear_free_func|0);
      if ($10) {
       break;
      }
     }
    }
    $d$0 = HEAP32[$d$02>>2]|0;
    $11 = ($d$0|0)==(0|0);
    if ($11) {
     break L4;
    } else {
     $d$02 = $d$0;
    }
   }
   _ERR_put_error(16,211,108,88263,569);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $12 = ($data|0)==(0|0);
 if ($12) {
  $$0 = 1;
  return ($$0|0);
 }
 $13 = (_CRYPTO_malloc(20,88263,578)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$0 = 0;
  return ($$0|0);
 }
 $15 = ((($13)) + 4|0);
 HEAP32[$15>>2] = $data;
 $16 = ((($13)) + 8|0);
 HEAP32[$16>>2] = $dup_func;
 $17 = ((($13)) + 12|0);
 HEAP32[$17>>2] = $free_func;
 $18 = ((($13)) + 16|0);
 HEAP32[$18>>2] = $clear_free_func;
 $19 = HEAP32[$ex_data>>2]|0;
 HEAP32[$13>>2] = $19;
 HEAP32[$ex_data>>2] = $13;
 $$0 = 1;
 return ($$0|0);
}
function _EC_POINT_new($group) {
 $group = $group|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($group|0)==(0|0);
 if ($0) {
  _ERR_put_error(16,121,67,88263,707);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$group>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _ERR_put_error(16,121,66,88263,711);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_CRYPTO_malloc(68,88263,715)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _ERR_put_error(16,121,65,88263,717);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$group>>2]|0;
 HEAP32[$5>>2] = $7;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($5)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = $5;
  return ($$0|0);
 }
 _CRYPTO_free($5);
 $$0 = 0;
 return ($$0|0);
}
function _EC_POINT_copy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$dest>>2]|0;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,114,66,88263,757);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$src>>2]|0;
 $5 = ($0|0)==($4|0);
 if (!($5)) {
  _ERR_put_error(16,114,101,88263,761);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($dest|0)==($src|0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = (FUNCTION_TABLE_iii[$2 & 127]($dest,$src)|0);
 $$0 = $7;
 return ($$0|0);
}
function _EC_GROUP_dup($a) {
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = HEAP32[$a>>2]|0;
  $2 = (_EC_GROUP_new($1)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
  } else {
   $4 = (_EC_GROUP_copy($2,$a)|0);
   $not$ = ($4|0)==(0);
   if ($not$) {
    _EC_GROUP_free($2);
    $$0 = 0;
   } else {
    $$0 = $2;
   }
  }
 }
 return ($$0|0);
}
function _EC_GROUP_method_of($group) {
 $group = $group|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 return ($0|0);
}
function _EC_METHOD_get_field_type($meth) {
 $meth = $meth|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($meth)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_GROUP_set_generator($group,$generator,$order,$cofactor) {
 $group = $group|0;
 $generator = $generator|0;
 $order = $order|0;
 $cofactor = $cofactor|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($generator|0)==(0|0);
 if ($0) {
  _ERR_put_error(16,111,67,88263,297);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($group)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_EC_POINT_new($group)|0);
  HEAP32[$1>>2] = $4;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $7 = $4;
  }
 } else {
  $7 = $2;
 }
 $6 = HEAP32[$7>>2]|0;
 $8 = ((($6)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  _ERR_put_error(16,114,66,88263,757);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = HEAP32[$generator>>2]|0;
 $12 = ($6|0)==($11|0);
 if (!($12)) {
  _ERR_put_error(16,114,101,88263,761);
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ($7|0)==($generator|0);
 if (!($13)) {
  $14 = (FUNCTION_TABLE_iii[$9 & 127]($7,$generator)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $16 = ($order|0)==(0|0);
 $17 = ((($group)) + 8|0);
 if ($16) {
  (_BN_set_word($17,0)|0);
 } else {
  $18 = (_BN_copy($17,$order)|0);
  $19 = ($18|0)==(0|0);
  if ($19) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $20 = ($cofactor|0)==(0|0);
 $21 = ((($group)) + 28|0);
 if ($20) {
  (_BN_set_word($21,0)|0);
 } else {
  $22 = (_BN_copy($21,$cofactor)|0);
  $23 = ($22|0)==(0|0);
  if ($23) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 (_ec_precompute_mont_data($group)|0);
 $$0 = 1;
 return ($$0|0);
}
function _ec_precompute_mont_data($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$01 = 0, $ret$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_CTX_new()|0);
 $1 = ((($group)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = ((($group)) + 172|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _BN_MONT_CTX_free($5);
   HEAP32[$4>>2] = 0;
  }
  $7 = ($0|0)==(0|0);
  if ($7) {
   $ret$02 = 0;
   return ($ret$02|0);
  }
  $8 = (_BN_MONT_CTX_new()|0);
  HEAP32[$4>>2] = $8;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $ret$01 = 0;
  } else {
   $10 = ((($group)) + 8|0);
   $11 = (_BN_MONT_CTX_set($8,$10,$0)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP32[$4>>2]|0;
    _BN_MONT_CTX_free($13);
    HEAP32[$4>>2] = 0;
    $ret$01 = 0;
   } else {
    $ret$01 = 1;
   }
  }
 } else {
  $14 = ($0|0)==(0|0);
  if ($14) {
   $ret$02 = 0;
   return ($ret$02|0);
  } else {
   $ret$01 = 0;
  }
 }
 _BN_CTX_free($0);
 $ret$02 = $ret$01;
 return ($ret$02|0);
}
function _EC_GROUP_get0_generator($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_GROUP_get_mont_data($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if (!($2)) {
  $5 = 0;
  return ($5|0);
 }
 $3 = ((($group)) + 172|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 return ($5|0);
}
function _EC_GROUP_get_order($group,$order,$ctx) {
 $group = $group|0;
 $order = $order|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 8|0);
 $1 = (_BN_copy($order,$0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($order)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $5&1;
 $$0 = $6;
 return ($$0|0);
}
function _EC_GROUP_get_cofactor($group,$cofactor,$ctx) {
 $group = $group|0;
 $cofactor = $cofactor|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 28|0);
 $1 = (_BN_copy($cofactor,$0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($group)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $5&1;
 $$0 = $6;
 return ($$0|0);
}
function _EC_GROUP_set_curve_name($group,$nid) {
 $group = $group|0;
 $nid = $nid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 48|0);
 HEAP32[$0>>2] = $nid;
 return;
}
function _EC_GROUP_get_curve_name($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_GROUP_set_asn1_flag($group,$flag) {
 $group = $group|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -2147483648;
 $3 = $flag & 2147483647;
 $4 = $2 | $3;
 HEAP32[$0>>2] = $4;
 return;
}
function _EC_GROUP_get_asn1_flag($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 2147483647;
 return ($2|0);
}
function _EC_GROUP_set_point_conversion_form($group,$form) {
 $group = $group|0;
 $form = $form|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 56|0);
 HEAP32[$0>>2] = $form;
 return;
}
function _EC_GROUP_get_point_conversion_form($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_GROUP_set_seed($group,$p,$len) {
 $group = $group|0;
 $p = $p|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _CRYPTO_free($1);
  HEAP32[$0>>2] = 0;
  $3 = ((($group)) + 64|0);
  HEAP32[$3>>2] = 0;
 }
 $4 = ($len|0)!=(0);
 $5 = ($p|0)!=(0|0);
 $or$cond = $5 & $4;
 if (!($or$cond)) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = (_CRYPTO_malloc($len,88263,402)|0);
 HEAP32[$0>>2] = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($6|0),($p|0),($len|0))|0;
 $8 = ((($group)) + 64|0);
 HEAP32[$8>>2] = $len;
 $$0 = $len;
 return ($$0|0);
}
function _EC_GROUP_get0_seed($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_GROUP_get_seed_len($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EC_GROUP_set_curve_GFp($group,$p,$a,$b,$ctx) {
 $group = $group|0;
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,109,66,88263,424);
  $$0 = 0;
  return ($$0|0);
 } else {
  $4 = (FUNCTION_TABLE_iiiiii[$2 & 63]($group,$p,$a,$b,$ctx)|0);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_GROUP_get_curve_GFp($group,$p,$a,$b,$ctx) {
 $group = $group|0;
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,130,66,88263,434);
  $$0 = 0;
  return ($$0|0);
 } else {
  $4 = (FUNCTION_TABLE_iiiiii[$2 & 63]($group,$p,$a,$b,$ctx)|0);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_GROUP_get_degree($group) {
 $group = $group|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,173,66,88263,467);
  $$0 = 0;
  return ($$0|0);
 } else {
  $4 = (FUNCTION_TABLE_ii[$2 & 127]($group)|0);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_GROUP_cmp($a,$b,$ctx) {
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$018 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $ctx_new$010 = 0, $or$cond = 0, $r$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$b>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==($5|0);
 if (!($6)) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = ((($a)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($b)) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  $13 = ($8|0)==($11|0);
  $or$cond = $12 | $13;
  if (!($or$cond)) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $14 = ($ctx|0)==(0|0);
 if ($14) {
  $15 = (_BN_CTX_new()|0);
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$0 = -1;
   return ($$0|0);
  } else {
   $$018 = $15;$ctx_new$010 = $15;
  }
 } else {
  $$018 = $ctx;$ctx_new$010 = 0;
 }
 _BN_CTX_start($$018);
 $17 = (_BN_CTX_get($$018)|0);
 $18 = (_BN_CTX_get($$018)|0);
 $19 = (_BN_CTX_get($$018)|0);
 $20 = (_BN_CTX_get($$018)|0);
 $21 = (_BN_CTX_get($$018)|0);
 $22 = (_BN_CTX_get($$018)|0);
 $23 = ($22|0)==(0|0);
 if ($23) {
  _BN_CTX_end($$018);
  $24 = ($ctx_new$010|0)==(0|0);
  if ($24) {
   $$0 = -1;
   return ($$0|0);
  }
  _BN_CTX_free($$018);
  $$0 = -1;
  return ($$0|0);
 }
 $25 = HEAP32[$a>>2]|0;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iiiiii[$27 & 63]($a,$17,$18,$19,$$018)|0);
 $29 = ($28|0)==(0);
 L19: do {
  if ($29) {
   $r$3 = 1;
  } else {
   $30 = HEAP32[$b>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (FUNCTION_TABLE_iiiiii[$32 & 63]($b,$20,$21,$22,$$018)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $r$3 = 1;
   } else {
    $35 = (_BN_cmp($17,$20)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = (_BN_cmp($18,$21)|0);
     $38 = ($37|0)==(0);
     if ($38) {
      $39 = (_BN_cmp($19,$22)|0);
      $40 = ($39|0)==(0);
      if ($40) {
       $41 = ((($a)) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ((($b)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = HEAP32[$a>>2]|0;
       $46 = ((($45)) + 108|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        _ERR_put_error(16,113,66,88263,998);
        $r$3 = 1;
        break;
       }
       $49 = HEAP32[$42>>2]|0;
       $50 = ($45|0)==($49|0);
       if ($50) {
        $51 = HEAP32[$44>>2]|0;
        $52 = ($45|0)==($51|0);
        if ($52) {
         $53 = (FUNCTION_TABLE_iiiii[$47 & 127]($a,$42,$44,$$018)|0);
         $54 = ($53|0)==(0);
         if (!($54)) {
          $r$3 = 1;
          break;
         }
         $55 = ((($a)) + 8|0);
         $56 = (_BN_copy($17,$55)|0);
         $57 = ($56|0)==(0|0);
         do {
          if (!($57)) {
           $58 = ((($17)) + 4|0);
           $59 = HEAP32[$58>>2]|0;
           $60 = ($59|0)==(0);
           if (!($60)) {
            $61 = ((($b)) + 8|0);
            $62 = (_BN_copy($20,$61)|0);
            $63 = ($62|0)==(0|0);
            if (!($63)) {
             $64 = ((($20)) + 4|0);
             $65 = HEAP32[$64>>2]|0;
             $66 = ($65|0)==(0);
             if (!($66)) {
              $67 = ((($a)) + 28|0);
              $68 = (_BN_copy($18,$67)|0);
              $69 = ($68|0)==(0|0);
              if ($69) {
               break;
              }
              $70 = ((($a)) + 32|0);
              $71 = HEAP32[$70>>2]|0;
              $72 = ($71|0)==(0);
              if ($72) {
               break;
              }
              $73 = ((($b)) + 28|0);
              $74 = (_BN_copy($21,$73)|0);
              $75 = ($74|0)==(0|0);
              if ($75) {
               break;
              }
              $76 = ((($b)) + 32|0);
              $77 = HEAP32[$76>>2]|0;
              $78 = ($77|0)==(0);
              if ($78) {
               break;
              }
              $80 = (_BN_cmp($17,$20)|0);
              $81 = ($80|0)==(0);
              if ($81) {
               $82 = (_BN_cmp($18,$21)|0);
               $83 = ($82|0)==(0);
               if ($83) {
                $r$3 = 0;
                break L19;
               }
              }
              $r$3 = 1;
              break L19;
             }
            }
           }
          }
         } while(0);
         _BN_CTX_end($$018);
         $79 = ($ctx_new$010|0)==(0|0);
         if ($79) {
          $$0 = -1;
          return ($$0|0);
         }
         _BN_CTX_free($$018);
         $$0 = -1;
         return ($$0|0);
        }
       }
       _ERR_put_error(16,113,101,88263,1002);
       $r$3 = 1;
      } else {
       $r$3 = 1;
      }
     } else {
      $r$3 = 1;
     }
    } else {
     $r$3 = 1;
    }
   }
  }
 } while(0);
 _BN_CTX_end($$018);
 $84 = ($ctx_new$010|0)==(0|0);
 if ($84) {
  $$0 = $r$3;
  return ($$0|0);
 }
 _BN_CTX_free($$018);
 $$0 = $r$3;
 return ($$0|0);
}
function _EC_POINT_cmp($group,$a,$b,$ctx) {
 $group = $group|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 108|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,113,66,88263,998);
  $$0 = -1;
  return ($$0|0);
 }
 $4 = HEAP32[$a>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = HEAP32[$b>>2]|0;
  $7 = ($0|0)==($6|0);
  if ($7) {
   $8 = (FUNCTION_TABLE_iiiii[$2 & 127]($group,$a,$b,$ctx)|0);
   $$0 = $8;
   return ($$0|0);
  }
 }
 _ERR_put_error(16,113,101,88263,1002);
 $$0 = -1;
 return ($$0|0);
}
function _EC_EX_DATA_get_data($ex_data,$dup_func,$free_func,$clear_free_func) {
 $ex_data = $ex_data|0;
 $dup_func = $dup_func|0;
 $free_func = $free_func|0;
 $clear_free_func = $clear_free_func|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d$02 = 0, $d$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ex_data|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $d$02 = $ex_data;
 }
 while(1) {
  $1 = ((($d$02)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==($dup_func|0);
  if ($3) {
   $4 = ((($d$02)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==($free_func|0);
   if ($6) {
    $7 = ((($d$02)) + 16|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($clear_free_func|0);
    if ($9) {
     $d$02$lcssa = $d$02;
     break;
    }
   }
  }
  $12 = HEAP32[$d$02>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$0 = 0;
   label = 7;
   break;
  } else {
   $d$02 = $12;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $10 = ((($d$02$lcssa)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $$0 = $11;
 return ($$0|0);
}
function _EC_POINT_dup($a,$group) {
 $a = $a|0;
 $group = $group|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_EC_POINT_new($group)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   _ERR_put_error(16,114,66,88263,757);
  } else {
   $7 = HEAP32[$a>>2]|0;
   $8 = ($3|0)==($7|0);
   if (!($8)) {
    _ERR_put_error(16,114,101,88263,761);
    break;
   }
   $9 = ($1|0)==($a|0);
   if ($9) {
    $$0 = $a;
    return ($$0|0);
   }
   $10 = (FUNCTION_TABLE_iii[$5 & 127]($1,$a)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$0 = $1;
    return ($$0|0);
   }
  }
 } while(0);
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  FUNCTION_TABLE_vi[$14 & 63]($1);
 }
 _CRYPTO_free($1);
 $$0 = 0;
 return ($$0|0);
}
function _EC_POINT_set_to_infinity($group,$point) {
 $group = $group|0;
 $point = $point|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,127,66,88263,797);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$point>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = (FUNCTION_TABLE_iii[$2 & 127]($group,$point)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  _ERR_put_error(16,127,101,88263,801);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_POINT_set_Jprojective_coordinates_GFp($group,$point,$x,$y,$z,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,126,66,88263,814);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$point>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = (FUNCTION_TABLE_iiiiiii[$2 & 31]($group,$point,$x,$y,$z,$ctx)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  _ERR_put_error(16,126,101,88263,819);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_POINT_set_affine_coordinates_GFp($group,$point,$x,$y,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x = $x|0;
 $y = $y|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,124,66,88263,851);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$point>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = (FUNCTION_TABLE_iiiiii[$2 & 63]($group,$point,$x,$y,$ctx)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  _ERR_put_error(16,124,101,88263,856);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_POINT_get_affine_coordinates_GFp($group,$point,$x,$y,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x = $x|0;
 $y = $y|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,116,66,88263,887);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$point>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = (FUNCTION_TABLE_iiiiii[$2 & 63]($group,$point,$x,$y,$ctx)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  _ERR_put_error(16,116,101,88263,892);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_POINT_add($group,$r,$a,$b,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,112,66,88263,921);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$r>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = HEAP32[$a>>2]|0;
  $7 = ($0|0)==($6|0);
  if ($7) {
   $8 = HEAP32[$b>>2]|0;
   $9 = ($0|0)==($8|0);
   if ($9) {
    $10 = (FUNCTION_TABLE_iiiiii[$2 & 63]($group,$r,$a,$b,$ctx)|0);
    $$0 = $10;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(16,112,101,88263,926);
 $$0 = 0;
 return ($$0|0);
}
function _EC_POINT_dbl($group,$r,$a,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,115,66,88263,936);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$r>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = HEAP32[$a>>2]|0;
  $7 = ($0|0)==($6|0);
  if ($7) {
   $8 = (FUNCTION_TABLE_iiiii[$2 & 127]($group,$r,$a,$ctx)|0);
   $$0 = $8;
   return ($$0|0);
  }
 }
 _ERR_put_error(16,115,101,88263,940);
 $$0 = 0;
 return ($$0|0);
}
function _EC_POINT_invert($group,$a,$ctx) {
 $group = $group|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,210,66,88263,949);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$a>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = (FUNCTION_TABLE_iiii[$2 & 63]($group,$a,$ctx)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  _ERR_put_error(16,210,101,88263,953);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_POINT_is_at_infinity($group,$point) {
 $group = $group|0;
 $point = $point|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,118,66,88263,963);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$point>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = (FUNCTION_TABLE_iii[$2 & 127]($group,$point)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  _ERR_put_error(16,118,101,88263,967);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_POINT_is_on_curve($group,$point,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,119,66,88263,984);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$point>>2]|0;
 $5 = ($0|0)==($4|0);
 if ($5) {
  $6 = (FUNCTION_TABLE_iiii[$2 & 63]($group,$point,$ctx)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  _ERR_put_error(16,119,101,88263,988);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_POINTs_make_affine($group,$num,$points,$ctx) {
 $group = $group|0;
 $num = $num|0;
 $points = $points|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 116|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,136,66,88263,1027);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($num|0)==(0);
 L5: do {
  if (!($4)) {
   $i$02 = 0;
   while(1) {
    $7 = (($points) + ($i$02<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP32[$8>>2]|0;
    $10 = ($0|0)==($9|0);
    $6 = (($i$02) + 1)|0;
    if (!($10)) {
     break;
    }
    $5 = ($6>>>0)<($num>>>0);
    if ($5) {
     $i$02 = $6;
    } else {
     break L5;
    }
   }
   _ERR_put_error(16,136,101,88263,1032);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $11 = (FUNCTION_TABLE_iiiii[$2 & 127]($group,$num,$points,$ctx)|0);
 $$0 = $11;
 return ($$0|0);
}
function _EC_POINT_mul($group,$r,$g_scalar,$point,$p_scalar,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $g_scalar = $g_scalar|0;
 $point = $point|0;
 $p_scalar = $p_scalar|0;
 $ctx = $ctx|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $points = 0, $scalars = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $points = sp + 4|0;
 $scalars = sp;
 HEAP32[$points>>2] = $point;
 HEAP32[$scalars>>2] = $p_scalar;
 $0 = ($point|0)!=(0|0);
 $1 = ($p_scalar|0)!=(0|0);
 $2 = $0 & $1;
 $3 = $2&1;
 $4 = HEAP32[$group>>2]|0;
 $5 = ((($4)) + 120|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_ec_wNAF_mul($group,$r,$g_scalar,$3,$points,$scalars,$ctx)|0);
  $$0$i = $8;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  $9 = (FUNCTION_TABLE_iiiiiiii[$6 & 31]($group,$r,$g_scalar,$3,$points,$scalars,$ctx)|0);
  $$0$i = $9;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function _ec_wNAF_mul($group,$r,$scalar,$num,$points,$scalars,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $scalar = $scalar|0;
 $num = $num|0;
 $points = $points|0;
 $scalars = $scalars|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$08 = 0, $$10$us = 0, $$lcssa157 = 0, $$lobit$us = 0, $$max_len$0 = 0, $$max_len$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blocksize$0 = 0, $generator$0 = 0, $i$0124 = 0, $i$1116 = 0, $i$2108 = 0, $i$3102 = 0, $i$497 = 0, $i$581$us = 0, $j$0100 = 0, $j$195 = 0, $k$0 = 0, $k$0$us = 0, $k$087 = 0, $k$090 = 0, $k$090$us = 0, $max_len$0$lcssa = 0;
 var $max_len$0117 = 0, $max_len$3$lcssa = 0, $max_len$3109 = 0, $max_len$5 = 0, $new_ctx$0 = 0, $num_scalar$0 = 0, $num_val$0$lcssa = 0, $num_val$0118 = 0, $numblocks$1 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond7 = 0, $pp$0110 = 0, $pre_comp$0 = 0, $pre_points_per_block$0 = 0, $r_is_at_infinity$089$us = 0, $r_is_at_infinity$184$us = 0, $r_is_at_infinity$2$us = 0, $r_is_at_infinity$2$us$lcssa = 0, $r_is_inverted$088$us = 0;
 var $r_is_inverted$183$us = 0, $r_is_inverted$2$us = 0, $r_is_inverted$3$us = 0, $r_is_inverted$3$us$lcssa = 0, $ret$0 = 0, $tmp$0 = 0, $tmp_len = 0, $tmp_points$0111 = 0, $totalnum$0 = 0, $totalnum$1 = 0, $v$0$lcssa = 0, $v$0103 = 0, $v$1101 = 0, $v$277 = 0, $val$0 = 0, $val_sub$0 = 0, $w$078 = 0, $wNAF$0 = 0, $wNAF_len$0 = 0, $wsize$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp_len = sp;
 $0 = HEAP32[$group>>2]|0;
 $1 = HEAP32[$r>>2]|0;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  _ERR_put_error(16,187,101,88272,360);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($scalar|0)==(0|0);
 $4 = ($num|0)==(0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $5 = (_EC_POINT_set_to_infinity($group,$r)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 L9: do {
  if (!($4)) {
   $i$0124 = 0;
   while(1) {
    $8 = (($points) + ($i$0124<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$9>>2]|0;
    $11 = ($0|0)==($10|0);
    $7 = (($i$0124) + 1)|0;
    if (!($11)) {
     break;
    }
    $6 = ($7>>>0)<($num>>>0);
    if ($6) {
     $i$0124 = $7;
    } else {
     break L9;
    }
   }
   _ERR_put_error(16,187,101,88272,370);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $12 = ($ctx|0)==(0|0);
 if ($12) {
  $13 = (_BN_CTX_new()|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$08 = $13;$new_ctx$0 = $13;
  }
 } else {
  $$08 = $ctx;$new_ctx$0 = 0;
 }
 do {
  if ($3) {
   $blocksize$0 = 0;$generator$0 = 0;$num_scalar$0 = 0;$numblocks$1 = 0;$pre_comp$0 = 0;$pre_points_per_block$0 = 0;
   label = 19;
  } else {
   $15 = (_EC_GROUP_get0_generator($group)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    _ERR_put_error(16,187,113,88272,384);
    $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = 0;$wNAF$0 = 0;$wNAF_len$0 = 0;$wsize$0 = 0;
    break;
   }
   $17 = ((($group)) + 68|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_EC_EX_DATA_get_data($18,68,44,45)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    $blocksize$0 = 0;$generator$0 = $15;$num_scalar$0 = 1;$numblocks$1 = 1;$pre_comp$0 = 0;$pre_points_per_block$0 = 0;
    label = 19;
   } else {
    $21 = ((($19)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0);
    if ($23) {
     $blocksize$0 = 0;$generator$0 = $15;$num_scalar$0 = 1;$numblocks$1 = 1;$pre_comp$0 = 0;$pre_points_per_block$0 = 0;
     label = 19;
    } else {
     $24 = ((($19)) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = (_EC_POINT_cmp($group,$15,$26,$$08)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $29 = ((($19)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_BN_num_bits($scalar)|0);
      $32 = (($31>>>0) / ($30>>>0))&-1;
      $33 = (($32) + 1)|0;
      $34 = HEAP32[$21>>2]|0;
      $35 = ($33>>>0)>($34>>>0);
      $$ = $35 ? $34 : $33;
      $36 = ((($19)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($37) + -1)|0;
      $39 = 1 << $38;
      $40 = ((($19)) + 20|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = $34 << $38;
      $43 = ($41|0)==($42|0);
      if ($43) {
       $blocksize$0 = $30;$generator$0 = $15;$num_scalar$0 = 0;$numblocks$1 = $$;$pre_comp$0 = $19;$pre_points_per_block$0 = $39;
       label = 19;
      } else {
       _ERR_put_error(16,187,68,88272,415);
       $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = 0;$wNAF$0 = 0;$wNAF_len$0 = 0;$wsize$0 = 0;
      }
     } else {
      $blocksize$0 = 0;$generator$0 = $15;$num_scalar$0 = 1;$numblocks$1 = 1;$pre_comp$0 = 0;$pre_points_per_block$0 = 0;
      label = 19;
     }
    }
   }
  }
 } while(0);
 L29: do {
  if ((label|0) == 19) {
   $44 = (($numblocks$1) + ($num))|0;
   $45 = $44 << 2;
   $46 = (_CRYPTO_malloc($45,88272,429)|0);
   $47 = (_CRYPTO_malloc($45,88272,430)|0);
   $48 = (($45) + 4)|0;
   $49 = (_CRYPTO_malloc($48,88272,431)|0);
   $50 = (_CRYPTO_malloc($45,88272,433)|0);
   $51 = ($49|0)==(0|0);
   if (!($51)) {
    HEAP32[$49>>2] = 0;
    $52 = ($46|0)!=(0|0);
    $53 = ($47|0)!=(0|0);
    $or$cond3 = $52 & $53;
    $54 = ($50|0)!=(0|0);
    $or$cond7 = $or$cond3 & $54;
    if ($or$cond7) {
     $55 = (($num_scalar$0) + ($num))|0;
     $56 = ($55|0)==(0);
     if ($56) {
      $max_len$0$lcssa = 0;$num_val$0$lcssa = 0;
     } else {
      $i$1116 = 0;$max_len$0117 = 0;$num_val$0118 = 0;
      while(1) {
       $57 = ($i$1116>>>0)<($num>>>0);
       if ($57) {
        $58 = (($scalars) + ($i$1116<<2)|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = (_BN_num_bits($59)|0);
        $63 = $60;
       } else {
        $61 = (_BN_num_bits($scalar)|0);
        $63 = $61;
       }
       $62 = ($63>>>0)>(1999);
       if ($62) {
        $70 = 6;
       } else {
        $64 = ($63>>>0)>(799);
        if ($64) {
         $70 = 5;
        } else {
         $65 = ($63>>>0)>(299);
         if ($65) {
          $70 = 4;
         } else {
          $66 = ($63>>>0)>(69);
          if ($66) {
           $70 = 3;
          } else {
           $67 = ($63>>>0)>(19);
           $68 = $67 ? 2 : 1;
           $70 = $68;
          }
         }
        }
       }
       $69 = (($46) + ($i$1116<<2)|0);
       HEAP32[$69>>2] = $70;
       $71 = (($70) + -1)|0;
       $72 = 1 << $71;
       $73 = (($72) + ($num_val$0118))|0;
       $74 = (($i$1116) + 1)|0;
       $75 = (($49) + ($74<<2)|0);
       HEAP32[$75>>2] = 0;
       if ($57) {
        $76 = (($scalars) + ($i$1116<<2)|0);
        $77 = HEAP32[$76>>2]|0;
        $79 = $77;
       } else {
        $79 = $scalar;
       }
       $78 = (($47) + ($i$1116<<2)|0);
       $80 = (_compute_wNAF($79,$70,$78)|0);
       $81 = (($49) + ($i$1116<<2)|0);
       HEAP32[$81>>2] = $80;
       $82 = ($80|0)==(0|0);
       if ($82) {
        $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
       $83 = HEAP32[$78>>2]|0;
       $84 = ($83>>>0)>($max_len$0117>>>0);
       $$max_len$0 = $84 ? $83 : $max_len$0117;
       $85 = ($74>>>0)<($55>>>0);
       if ($85) {
        $i$1116 = $74;$max_len$0117 = $$max_len$0;$num_val$0118 = $73;
       } else {
        $max_len$0$lcssa = $$max_len$0;$num_val$0$lcssa = $73;
        break;
       }
      }
     }
     $86 = ($numblocks$1|0)==(0);
     do {
      if ($86) {
       $max_len$5 = $max_len$0$lcssa;$totalnum$1 = $44;
      } else {
       $87 = ($pre_comp$0|0)==(0|0);
       if ($87) {
        $88 = ($num_scalar$0|0)==(1);
        if ($88) {
         $max_len$5 = $max_len$0$lcssa;$totalnum$1 = $44;
         break;
        }
        _ERR_put_error(16,187,68,88272,470);
        $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
       HEAP32[$tmp_len>>2] = 0;
       $89 = ($num_scalar$0|0)==(0);
       if (!($89)) {
        _ERR_put_error(16,187,68,88272,479);
        $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
       $90 = ((($pre_comp$0)) + 12|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = (($46) + ($num<<2)|0);
       HEAP32[$92>>2] = $91;
       $93 = (_compute_wNAF($scalar,$91,$tmp_len)|0);
       $94 = ($93|0)==(0|0);
       if ($94) {
        $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
       $95 = HEAP32[$tmp_len>>2]|0;
       $96 = ($95>>>0)>($max_len$0$lcssa>>>0);
       if (!($96)) {
        $97 = (($num) + 1)|0;
        $98 = (($49) + ($num<<2)|0);
        HEAP32[$98>>2] = $93;
        $99 = (($49) + ($97<<2)|0);
        HEAP32[$99>>2] = 0;
        $100 = (($47) + ($num<<2)|0);
        HEAP32[$100>>2] = $95;
        $101 = ((($pre_comp$0)) + 16|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = (($50) + ($num<<2)|0);
        HEAP32[$103>>2] = $102;
        $max_len$5 = $max_len$0$lcssa;$totalnum$1 = $97;
        break;
       }
       $104 = Math_imul($numblocks$1, $blocksize$0)|0;
       $105 = ($95>>>0)<($104>>>0);
       do {
        if ($105) {
         $106 = (($blocksize$0) + -1)|0;
         $107 = (($106) + ($95))|0;
         $108 = (($107>>>0) / ($blocksize$0>>>0))&-1;
         $109 = ((($pre_comp$0)) + 8|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($108>>>0)>($110>>>0);
         if ($111) {
          _ERR_put_error(16,187,68,88272,524);
          $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
          break L29;
         } else {
          $112 = (($108) + ($num))|0;
          $totalnum$0 = $112;
          break;
         }
        } else {
         $totalnum$0 = $44;
        }
       } while(0);
       $113 = ($totalnum$0>>>0)>($num>>>0);
       L71: do {
        if ($113) {
         $114 = ((($pre_comp$0)) + 16|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = (($totalnum$0) + -1)|0;
         $120 = $95;$i$2108 = $num;$max_len$3109 = $max_len$0$lcssa;$pp$0110 = $93;$tmp_points$0111 = $115;
         while(1) {
          $117 = ($i$2108>>>0)<($116>>>0);
          $118 = (($47) + ($i$2108<<2)|0);
          if ($117) {
           HEAP32[$118>>2] = $blocksize$0;
           $119 = ($120>>>0)<($blocksize$0>>>0);
           if ($119) {
            label = 52;
            break;
           }
           $121 = (($120) - ($blocksize$0))|0;
           HEAP32[$tmp_len>>2] = $121;
           $124 = $blocksize$0;$254 = $121;
          } else {
           HEAP32[$118>>2] = $120;
           $124 = $120;$254 = $120;
          }
          $122 = (($i$2108) + 1)|0;
          $123 = (($49) + ($122<<2)|0);
          HEAP32[$123>>2] = 0;
          $125 = (_CRYPTO_malloc($124,88272,550)|0);
          $126 = (($49) + ($i$2108<<2)|0);
          HEAP32[$126>>2] = $125;
          $127 = ($125|0)==(0|0);
          if ($127) {
           label = 56;
           break;
          }
          $128 = HEAP32[$118>>2]|0;
          _memcpy(($125|0),($pp$0110|0),($128|0))|0;
          $129 = HEAP32[$118>>2]|0;
          $130 = HEAP32[$tmp_points$0111>>2]|0;
          $131 = ($130|0)==(0|0);
          if ($131) {
           label = 58;
           break;
          }
          $132 = ($129>>>0)>($max_len$3109>>>0);
          $$max_len$3 = $132 ? $129 : $max_len$3109;
          $133 = (($50) + ($i$2108<<2)|0);
          HEAP32[$133>>2] = $tmp_points$0111;
          $134 = (($tmp_points$0111) + ($pre_points_per_block$0<<2)|0);
          $135 = (($pp$0110) + ($blocksize$0)|0);
          $136 = ($122>>>0)<($totalnum$0>>>0);
          if ($136) {
           $120 = $254;$i$2108 = $122;$max_len$3109 = $$max_len$3;$pp$0110 = $135;$tmp_points$0111 = $134;
          } else {
           $max_len$3$lcssa = $$max_len$3;
           break L71;
          }
         }
         if ((label|0) == 52) {
          _ERR_put_error(16,187,68,88272,538);
          $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
          break L29;
         }
         else if ((label|0) == 56) {
          _ERR_put_error(16,187,65,88272,552);
          _CRYPTO_free($93);
          $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
          break L29;
         }
         else if ((label|0) == 58) {
          _ERR_put_error(16,187,68,88272,561);
          _CRYPTO_free($93);
          $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
          break L29;
         }
        } else {
         $max_len$3$lcssa = $max_len$0$lcssa;
        }
       } while(0);
       _CRYPTO_free($93);
       $max_len$5 = $max_len$3$lcssa;$totalnum$1 = $totalnum$0;
      }
     } while(0);
     $137 = $num_val$0$lcssa << 2;
     $138 = (($137) + 4)|0;
     $139 = (_CRYPTO_malloc($138,88272,579)|0);
     $140 = ($139|0)==(0|0);
     if ($140) {
      _ERR_put_error(16,187,65,88272,581);
      $ret$0 = 0;$tmp$0 = 0;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
      break;
     }
     $141 = (($139) + ($num_val$0$lcssa<<2)|0);
     HEAP32[$141>>2] = 0;
     if ($56) {
      $v$0$lcssa = $139;
     } else {
      $i$3102 = 0;$v$0103 = $139;
      while(1) {
       $142 = (($50) + ($i$3102<<2)|0);
       HEAP32[$142>>2] = $v$0103;
       $143 = (($46) + ($i$3102<<2)|0);
       $j$0100 = 0;$v$1101 = $v$0103;
       while(1) {
        $144 = (_EC_POINT_new($group)|0);
        HEAP32[$v$1101>>2] = $144;
        $145 = ($144|0)==(0|0);
        if ($145) {
         $ret$0 = 0;$tmp$0 = 0;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
         break L29;
        }
        $146 = ((($v$1101)) + 4|0);
        $147 = (($j$0100) + 1)|0;
        $148 = HEAP32[$143>>2]|0;
        $149 = (($148) + -1)|0;
        $150 = 1 << $149;
        $151 = ($147>>>0)<($150>>>0);
        if ($151) {
         $j$0100 = $147;$v$1101 = $146;
        } else {
         $$lcssa157 = $146;
         break;
        }
       }
       $152 = (($i$3102) + 1)|0;
       $153 = ($152>>>0)<($55>>>0);
       if ($153) {
        $i$3102 = $152;$v$0103 = $$lcssa157;
       } else {
        $v$0$lcssa = $$lcssa157;
        break;
       }
      }
     }
     $154 = ($v$0$lcssa|0)==($141|0);
     if (!($154)) {
      _ERR_put_error(16,187,68,88272,598);
      $ret$0 = 0;$tmp$0 = 0;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
      break;
     }
     $155 = (_EC_POINT_new($group)|0);
     $156 = ($155|0)==(0|0);
     if ($156) {
      $ret$0 = 0;$tmp$0 = 0;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
      break;
     }
     if (!($56)) {
      $i$497 = 0;
      while(1) {
       $157 = ($i$497>>>0)<($num>>>0);
       $158 = (($50) + ($i$497<<2)|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = HEAP32[$159>>2]|0;
       if ($157) {
        $161 = (($points) + ($i$497<<2)|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = (_EC_POINT_copy($160,$162)|0);
        $164 = ($163|0)==(0);
        if ($164) {
         $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
         break L29;
        }
       } else {
        $165 = (_EC_POINT_copy($160,$generator$0)|0);
        $166 = ($165|0)==(0);
        if ($166) {
         $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
         break L29;
        }
       }
       $167 = (($46) + ($i$497<<2)|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168>>>0)>(1);
       do {
        if ($169) {
         $170 = HEAP32[$158>>2]|0;
         $171 = HEAP32[$170>>2]|0;
         $172 = (_EC_POINT_dbl($group,$155,$171,$$08)|0);
         $173 = ($172|0)==(0);
         if ($173) {
          $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
          break L29;
         }
         $174 = HEAP32[$167>>2]|0;
         $175 = ($174|0)==(1);
         if ($175) {
          break;
         } else {
          $j$195 = 1;
         }
         while(1) {
          $181 = HEAP32[$158>>2]|0;
          $182 = (($181) + ($j$195<<2)|0);
          $183 = HEAP32[$182>>2]|0;
          $184 = (($j$195) + -1)|0;
          $185 = (($181) + ($184<<2)|0);
          $186 = HEAP32[$185>>2]|0;
          $187 = (_EC_POINT_add($group,$183,$186,$155,$$08)|0);
          $188 = ($187|0)==(0);
          $180 = (($j$195) + 1)|0;
          if ($188) {
           $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
           break L29;
          }
          $176 = HEAP32[$167>>2]|0;
          $177 = (($176) + -1)|0;
          $178 = 1 << $177;
          $179 = ($180>>>0)<($178>>>0);
          if ($179) {
           $j$195 = $180;
          } else {
           break;
          }
         }
        }
       } while(0);
       $189 = (($i$497) + 1)|0;
       $190 = ($189>>>0)<($55>>>0);
       if ($190) {
        $i$497 = $189;
       } else {
        break;
       }
      }
     }
     $191 = (_EC_POINTs_make_affine($group,$num_val$0$lcssa,$139,$$08)|0);
     $192 = ($191|0)==(0);
     if ($192) {
      $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
      break;
     }
     $k$087 = (($max_len$5) + -1)|0;
     $193 = ($k$087|0)>(-1);
     L119: do {
      if ($193) {
       $194 = ($totalnum$1|0)==(0);
       if ($194) {
        $k$090 = $k$087;
        while(1) {
         $k$0 = (($k$090) + -1)|0;
         $229 = ($k$0|0)>(-1);
         if ($229) {
          $k$090 = $k$0;
         } else {
          label = 99;
          break L119;
         }
        }
       } else {
        $255 = 1;$k$090$us = $k$087;$r_is_at_infinity$089$us = 1;$r_is_inverted$088$us = 0;
       }
       while(1) {
        if ($255) {
         $i$581$us = 0;$r_is_at_infinity$184$us = $r_is_at_infinity$089$us;$r_is_inverted$183$us = $r_is_inverted$088$us;
        } else {
         $195 = (_EC_POINT_dbl($group,$r,$r,$$08)|0);
         $196 = ($195|0)==(0);
         if ($196) {
          $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
          break L29;
         } else {
          $i$581$us = 0;$r_is_at_infinity$184$us = 0;$r_is_inverted$183$us = $r_is_inverted$088$us;
         }
        }
        while(1) {
         $197 = (($47) + ($i$581$us<<2)|0);
         $198 = HEAP32[$197>>2]|0;
         $199 = ($198>>>0)>($k$090$us>>>0);
         do {
          if ($199) {
           $200 = (($49) + ($i$581$us<<2)|0);
           $201 = HEAP32[$200>>2]|0;
           $202 = (($201) + ($k$090$us)|0);
           $203 = HEAP8[$202>>0]|0;
           $204 = $203 << 24 >> 24;
           $205 = ($203<<24>>24)==(0);
           if ($205) {
            $r_is_at_infinity$2$us = $r_is_at_infinity$184$us;$r_is_inverted$3$us = $r_is_inverted$183$us;
            break;
           }
           $206 = ($203<<24>>24)<(0);
           $$lobit$us = ($203&255) >>> 7;
           $207 = $$lobit$us&255;
           $208 = (0 - ($204))|0;
           $$10$us = $206 ? $208 : $204;
           $209 = ($207|0)==($r_is_inverted$183$us|0);
           if ($209) {
            $r_is_inverted$2$us = $r_is_inverted$183$us;
           } else {
            $210 = ($r_is_at_infinity$184$us|0)==(0);
            if ($210) {
             $211 = (_EC_POINT_invert($group,$r,$$08)|0);
             $212 = ($211|0)==(0);
             if ($212) {
              $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
              break L29;
             }
            }
            $213 = ($r_is_inverted$183$us|0)==(0);
            $214 = $213&1;
            $r_is_inverted$2$us = $214;
           }
           $215 = ($r_is_at_infinity$184$us|0)==(0);
           $216 = $$10$us >> 1;
           $217 = (($50) + ($i$581$us<<2)|0);
           $218 = HEAP32[$217>>2]|0;
           $219 = (($218) + ($216<<2)|0);
           $220 = HEAP32[$219>>2]|0;
           if ($215) {
            $223 = (_EC_POINT_add($group,$r,$r,$220,$$08)|0);
            $224 = ($223|0)==(0);
            if ($224) {
             $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
             break L29;
            } else {
             $r_is_at_infinity$2$us = 0;$r_is_inverted$3$us = $r_is_inverted$2$us;
             break;
            }
           } else {
            $221 = (_EC_POINT_copy($r,$220)|0);
            $222 = ($221|0)==(0);
            if ($222) {
             $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
             break L29;
            } else {
             $r_is_at_infinity$2$us = 0;$r_is_inverted$3$us = $r_is_inverted$2$us;
             break;
            }
           }
          } else {
           $r_is_at_infinity$2$us = $r_is_at_infinity$184$us;$r_is_inverted$3$us = $r_is_inverted$183$us;
          }
         } while(0);
         $225 = (($i$581$us) + 1)|0;
         $226 = ($225>>>0)<($totalnum$1>>>0);
         if ($226) {
          $i$581$us = $225;$r_is_at_infinity$184$us = $r_is_at_infinity$2$us;$r_is_inverted$183$us = $r_is_inverted$3$us;
         } else {
          $r_is_at_infinity$2$us$lcssa = $r_is_at_infinity$2$us;$r_is_inverted$3$us$lcssa = $r_is_inverted$3$us;
          break;
         }
        }
        $k$0$us = (($k$090$us) + -1)|0;
        $227 = ($k$0$us|0)>(-1);
        $228 = ($r_is_at_infinity$2$us$lcssa|0)!=(0);
        if ($227) {
         $255 = $228;$k$090$us = $k$0$us;$r_is_at_infinity$089$us = $r_is_at_infinity$2$us$lcssa;$r_is_inverted$088$us = $r_is_inverted$3$us$lcssa;
        } else {
         break;
        }
       }
       if ($228) {
        label = 99;
        break;
       }
       $232 = ($r_is_inverted$3$us$lcssa|0)==(0);
       if ($232) {
        break;
       }
       $233 = (_EC_POINT_invert($group,$r,$$08)|0);
       $234 = ($233|0)==(0);
       if ($234) {
        $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
        break L29;
       }
      } else {
       label = 99;
      }
     } while(0);
     if ((label|0) == 99) {
      $230 = (_EC_POINT_set_to_infinity($group,$r)|0);
      $231 = ($230|0)==(0);
      if ($231) {
       $ret$0 = 0;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
       break;
      }
     }
     $ret$0 = 1;$tmp$0 = $155;$val$0 = $139;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
     break;
    }
   }
   _ERR_put_error(16,187,65,88272,440);
   $ret$0 = 0;$tmp$0 = 0;$val$0 = 0;$val_sub$0 = $50;$wNAF$0 = $49;$wNAF_len$0 = $47;$wsize$0 = $46;
  }
 } while(0);
 $235 = ($new_ctx$0|0)==(0|0);
 if (!($235)) {
  _BN_CTX_free($new_ctx$0);
 }
 $236 = ($tmp$0|0)==(0|0);
 if (!($236)) {
  _EC_POINT_free($tmp$0);
 }
 $237 = ($wsize$0|0)==(0|0);
 if (!($237)) {
  _CRYPTO_free($wsize$0);
 }
 $238 = ($wNAF_len$0|0)==(0|0);
 if (!($238)) {
  _CRYPTO_free($wNAF_len$0);
 }
 $239 = ($wNAF$0|0)==(0|0);
 if (!($239)) {
  $240 = HEAP32[$wNAF$0>>2]|0;
  $241 = ($240|0)==(0|0);
  if (!($241)) {
   $242 = $240;$w$078 = $wNAF$0;
   while(1) {
    _CRYPTO_free($242);
    $243 = ((($w$078)) + 4|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = ($244|0)==(0|0);
    if ($245) {
     break;
    } else {
     $242 = $244;$w$078 = $243;
    }
   }
  }
  _CRYPTO_free($wNAF$0);
 }
 $246 = ($val$0|0)==(0|0);
 if (!($246)) {
  $247 = HEAP32[$val$0>>2]|0;
  $248 = ($247|0)==(0|0);
  if (!($248)) {
   $249 = $247;$v$277 = $val$0;
   while(1) {
    _EC_POINT_clear_free($249);
    $250 = ((($v$277)) + 4|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ($251|0)==(0|0);
    if ($252) {
     break;
    } else {
     $249 = $251;$v$277 = $250;
    }
   }
  }
  _CRYPTO_free($val$0);
 }
 $253 = ($val_sub$0|0)==(0|0);
 if ($253) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_free($val_sub$0);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _ec_pre_comp_dup($src_) {
 $src_ = $src_|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($src_)) + 24|0);
 (_CRYPTO_add_lock($0,1,36,88272,124)|0);
 return ($src_|0);
}
function _ec_pre_comp_free($pre_) {
 $pre_ = $pre_|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pre_|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($pre_)) + 24|0);
 $2 = (_CRYPTO_add_lock($1,-1,36,88272,137)|0);
 $3 = ($2|0)>(0);
 if ($3) {
  return;
 }
 $4 = ((($pre_)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $13 = $5;
  } else {
   $9 = $7;$p$01 = $5;
   while(1) {
    _EC_POINT_free($9);
    $10 = ((($p$01)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    } else {
     $9 = $11;$p$01 = $10;
    }
   }
   $$pre = HEAP32[$4>>2]|0;
   $13 = $$pre;
  }
  _CRYPTO_free($13);
 }
 _CRYPTO_free($pre_);
 return;
}
function _ec_pre_comp_clear_free($pre_) {
 $pre_ = $pre_|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pre_|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($pre_)) + 24|0);
 $2 = (_CRYPTO_add_lock($1,-1,36,88272,159)|0);
 $3 = ($2|0)>(0);
 if ($3) {
  return;
 }
 $4 = ((($pre_)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $13 = $5;
  } else {
   $9 = $7;$p$01 = $5;
   while(1) {
    _EC_POINT_clear_free($9);
    _OPENSSL_cleanse($p$01,4);
    $10 = ((($p$01)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    } else {
     $9 = $11;$p$01 = $10;
    }
   }
   $$pre = HEAP32[$4>>2]|0;
   $13 = $$pre;
  }
  _CRYPTO_free($13);
 }
 _OPENSSL_cleanse($pre_,28);
 _CRYPTO_free($pre_);
 return;
}
function _compute_wNAF($scalar,$w,$ret_len) {
 $scalar = $scalar|0;
 $w = $w|0;
 $ret_len = $ret_len|0;
 var $$ = 0, $$0 = 0, $$22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $digit$0 = 0, $digit$1 = 0, $j$0 = 0, $j$0$lcssa30 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $r$0$ph = 0, $w$off = 0, $window_val$0 = 0, $window_val$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($scalar)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $3 = (_CRYPTO_malloc(1,88272,195)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    _ERR_put_error(16,143,65,88272,197);
    $r$0$ph = 0;
    break;
   }
   HEAP8[$3>>0] = 0;
   HEAP32[$ret_len>>2] = 1;
   $$0 = $3;
   return ($$0|0);
  } else {
   $w$off = (($w) + -1)|0;
   $5 = ($w$off>>>0)>(6);
   if ($5) {
    _ERR_put_error(16,143,68,88272,207);
    $r$0$ph = 0;
    break;
   }
   $6 = 1 << $w;
   $7 = $6 << 1;
   $8 = (($7) + -1)|0;
   $9 = ((($scalar)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   $$ = $11 ? 1 : -1;
   $12 = HEAP32[$scalar>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    _ERR_put_error(16,143,68,88272,219);
    $r$0$ph = 0;
    break;
   }
   $14 = (_BN_num_bits($scalar)|0);
   $15 = (($14) + 1)|0;
   $16 = (_CRYPTO_malloc($15,88272,224)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    _ERR_put_error(16,143,65,88272,229);
    $r$0$ph = 0;
    break;
   }
   $18 = HEAP32[$scalar>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & $8;
   $21 = (($w) + 1)|0;
   $22 = (0 - ($6))|0;
   $23 = $8 >> 1;
   $j$0 = 0;$window_val$0 = $20;
   while(1) {
    $24 = ($window_val$0|0)==(0);
    if ($24) {
     $25 = (($21) + ($j$0))|0;
     $26 = ($25>>>0)<($14>>>0);
     if ($26) {
      $digit$1 = 0;$window_val$1 = 0;
     } else {
      $j$0$lcssa30 = $j$0;
      label = 23;
      break;
     }
    } else {
     $27 = $window_val$0 & 1;
     $28 = ($27|0)==(0);
     if ($28) {
      $digit$1 = 0;$window_val$1 = $window_val$0;
     } else {
      $29 = $window_val$0 & $6;
      $30 = ($29|0)==(0);
      if ($30) {
       $digit$0 = $window_val$0;
      } else {
       $31 = (($window_val$0) - ($7))|0;
       $32 = (($21) + ($j$0))|0;
       $33 = ($32>>>0)<($14>>>0);
       $34 = $window_val$0 & $23;
       $$22 = $33 ? $31 : $34;
       $digit$0 = $$22;
      }
      $notlhs = ($digit$0|0)<=($22|0);
      $notrhs = ($digit$0|0)>=($6|0);
      $or$cond$not = $notrhs | $notlhs;
      $35 = $digit$0 & 1;
      $36 = ($35|0)==(0);
      $or$cond3 = $or$cond$not | $36;
      if ($or$cond3) {
       label = 18;
       break;
      }
      $37 = (($window_val$0) - ($digit$0))|0;
      $38 = ($window_val$0|0)==($digit$0|0);
      $39 = ($37|0)==($7|0);
      $or$cond4 = $38 | $39;
      $40 = ($37|0)==($6|0);
      $or$cond5 = $40 | $or$cond4;
      if ($or$cond5) {
       $digit$1 = $digit$0;$window_val$1 = $37;
      } else {
       label = 20;
       break;
      }
     }
    }
    $41 = Math_imul($digit$1, $$)|0;
    $42 = $41&255;
    $43 = (($j$0) + 1)|0;
    $44 = (($16) + ($j$0)|0);
    HEAP8[$44>>0] = $42;
    $45 = $window_val$1 >> 1;
    $46 = (($43) + ($w))|0;
    $47 = (_BN_is_bit_set($scalar,$46)|0);
    $48 = $47 << $w;
    $49 = (($48) + ($45))|0;
    $50 = ($49|0)>($7|0);
    if ($50) {
     label = 22;
     break;
    } else {
     $j$0 = $43;$window_val$0 = $49;
    }
   }
   if ((label|0) == 18) {
    _ERR_put_error(16,143,68,88272,264);
    $r$0$ph = $16;
    break;
   }
   else if ((label|0) == 20) {
    _ERR_put_error(16,143,68,88272,276);
    $r$0$ph = $16;
    break;
   }
   else if ((label|0) == 22) {
    _ERR_put_error(16,143,68,88272,287);
    $r$0$ph = $16;
    break;
   }
   else if ((label|0) == 23) {
    $51 = ($j$0$lcssa30>>>0)>($15>>>0);
    if ($51) {
     _ERR_put_error(16,143,68,88272,293);
     $r$0$ph = $16;
     break;
    }
    HEAP32[$ret_len>>2] = $j$0$lcssa30;
    $$0 = $16;
    return ($$0|0);
   }
  }
 } while(0);
 _CRYPTO_free($r$0$ph);
 $$0 = 0;
 return ($$0|0);
}
function _EC_POINT_set_compressed_coordinates_GFp($group,$point,$x,$y_bit,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x = $x|0;
 $y_bit = $y_bit|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 & 1;
  $6 = ($5|0)==(0);
  if ($6) {
   _ERR_put_error(16,125,66,88282,78);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $7 = HEAP32[$point>>2]|0;
 $8 = ($0|0)==($7|0);
 if (!($8)) {
  _ERR_put_error(16,125,101,88282,83);
  $$0 = 0;
  return ($$0|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $16 = (FUNCTION_TABLE_iiiiii[$2 & 63]($group,$point,$x,$y_bit,$ctx)|0);
  $$0 = $16;
  return ($$0|0);
 }
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(406);
 if ($14) {
  $15 = (_ec_GFp_simple_set_compressed_coordinates($group,$point,$x,$y_bit,$ctx)|0);
  $$0 = $15;
  return ($$0|0);
 } else {
  _ERR_put_error(16,125,147,88282,94);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_POINT_point2oct($group,$point,$form,$buf,$len,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $form = $form|0;
 $buf = $buf|0;
 $len = $len|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 & 1;
  $6 = ($5|0)==(0);
  if ($6) {
   _ERR_put_error(16,123,66,88282,141);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $7 = HEAP32[$point>>2]|0;
 $8 = ($0|0)==($7|0);
 if (!($8)) {
  _ERR_put_error(16,123,101,88282,145);
  $$0 = 0;
  return ($$0|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $16 = (FUNCTION_TABLE_iiiiiii[$2 & 31]($group,$point,$form,$buf,$len,$ctx)|0);
  $$0 = $16;
  return ($$0|0);
 }
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(406);
 if ($14) {
  $15 = (_ec_GFp_simple_point2oct($group,$point,$form,$buf,$len,$ctx)|0);
  $$0 = $15;
  return ($$0|0);
 } else {
  _ERR_put_error(16,123,147,88282,154);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_POINT_oct2point($group,$point,$buf,$len,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $buf = $buf|0;
 $len = $len|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 & 1;
  $6 = ($5|0)==(0);
  if ($6) {
   _ERR_put_error(16,122,66,88282,171);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $7 = HEAP32[$point>>2]|0;
 $8 = ($0|0)==($7|0);
 if (!($8)) {
  _ERR_put_error(16,122,101,88282,175);
  $$0 = 0;
  return ($$0|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $16 = (FUNCTION_TABLE_iiiiii[$2 & 63]($group,$point,$buf,$len,$ctx)|0);
  $$0 = $16;
  return ($$0|0);
 }
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(406);
 if ($14) {
  $15 = (_ec_GFp_simple_oct2point($group,$point,$buf,$len,$ctx)|0);
  $$0 = $15;
  return ($$0|0);
 } else {
  _ERR_put_error(16,122,147,88282,184);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _pkey_ec_init($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(32,88309,94)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP8[$3>>0] = -1;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 13|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($0)) + 16|0);
 $7 = ((($ctx)) + 20|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
 HEAP32[$7>>2] = $0;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_ec_copy($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(32,88309,94)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP8[$3>>0] = -1;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 13|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($0)) + 16|0);
 $7 = ((($dst)) + 20|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
 HEAP32[$7>>2] = $0;
 $8 = ((($src)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = (_EC_GROUP_dup($10)|0);
  HEAP32[$0>>2] = $12;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $14 = ((($9)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$2>>2] = $15;
 $16 = ((($9)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = (_EC_KEY_dup($17)|0);
  HEAP32[$4>>2] = $19;
  $20 = ($19|0)==(0|0);
  if ($20) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $21 = ((($9)) + 13|0);
 $22 = HEAP8[$21>>0]|0;
 HEAP8[$5>>0] = $22;
 $23 = ((($9)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$6>>2] = $24;
 $25 = ((($9)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 28|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($9)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $36 = ((($0)) + 20|0);
  HEAP32[$36>>2] = 0;
  $$pre = ((($9)) + 24|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $31 = ((($9)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_BUF_memdup($29,$32)|0);
  $34 = ((($0)) + 20|0);
  HEAP32[$34>>2] = $33;
  $35 = ($33|0)==(0|0);
  if ($35) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$pre$phiZ2D = $31;
  }
 }
 $37 = HEAP32[$$pre$phiZ2D>>2]|0;
 $38 = ((($0)) + 24|0);
 HEAP32[$38>>2] = $37;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_ec_cleanup($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _EC_GROUP_free($3);
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  _EC_KEY_free($6);
 }
 $8 = ((($1)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  _CRYPTO_free($9);
 }
 _CRYPTO_free($1);
 return;
}
function _pkey_ec_paramgen($ctx,$pkey) {
 $ctx = $ctx|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(16,219,139,88309,457);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_EC_KEY_new()|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = (_EC_KEY_set_group($4,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  _EC_KEY_free($4);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_EVP_PKEY_assign($pkey,408,$4)|0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _pkey_ec_keygen($ctx,$pkey) {
 $ctx = $ctx|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   _ERR_put_error(16,199,139,88309,476);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $7 = (_EC_KEY_new()|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 (_EVP_PKEY_assign($pkey,408,$7)|0);
 $9 = HEAP32[$2>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $13 = HEAP32[$1>>2]|0;
  $14 = (_EC_KEY_set_group($7,$13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  }
 } else {
  $11 = (_EVP_PKEY_copy_parameters($pkey,$9)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $16 = ((($pkey)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_EC_KEY_generate_key($17)|0);
 $$0 = $18;
 return ($$0|0);
}
function _pkey_ec_sign($ctx,$sig,$siglen,$tbs,$tbslen) {
 $ctx = $ctx|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $tbs = $tbs|0;
 $tbslen = $tbslen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sltmp = 0;
 var $type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sltmp = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($sig|0)==(0|0);
 if ($6) {
  $7 = (_ECDSA_size($5)|0);
  HEAP32[$siglen>>2] = $7;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$siglen>>2]|0;
 $9 = (_ECDSA_size($5)|0);
 $10 = ($8>>>0)<($9>>>0);
 if ($10) {
  _ERR_put_error(16,218,100,88309,171);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $type$0 = 64;
 } else {
  $14 = (_EVP_MD_type($12)|0);
  $type$0 = $14;
 }
 $15 = (_ECDSA_sign($type$0,$tbs,$tbslen,$sig,$sltmp,$5)|0);
 $16 = ($15|0)<(1);
 if ($16) {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP32[$sltmp>>2]|0;
 HEAP32[$siglen>>2] = $17;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _pkey_ec_verify($ctx,$sig,$siglen,$tbs,$tbslen) {
 $ctx = $ctx|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $tbs = $tbs|0;
 $tbslen = $tbslen|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $type$0 = 64;
 } else {
  $9 = (_EVP_MD_type($7)|0);
  $type$0 = $9;
 }
 $10 = (_ECDSA_verify($type$0,$tbs,$tbslen,$sig,$siglen,$5)|0);
 return ($10|0);
}
function _pkey_ec_kdf_derive($ctx,$key,$keylen) {
 $ctx = $ctx|0;
 $key = $key|0;
 $keylen = $keylen|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ktmplen = 0, $not$ = 0, $rv$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ktmplen = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 13|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(1);
 if ($4) {
  $5 = (_pkey_ec_derive($ctx,$key,$keylen)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($key|0)==(0|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$keylen>>2] = $8;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$keylen>>2]|0;
 $10 = ((($1)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ((($ctx)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = ((($ctx)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = ((($1)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $22 = ((($14)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23;
   } else {
    $24 = $20;
   }
   $25 = (_EC_KEY_get0_group($24)|0);
   $26 = (_EC_GROUP_get_degree($25)|0);
   $27 = (($26) + 7)|0;
   $28 = (($27|0) / 8)&-1;
   HEAP32[$ktmplen>>2] = $28;
   $29 = (_CRYPTO_malloc($28,88309,261)|0);
   $30 = ($29|0)==(0|0);
   if ($30) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $31 = (_pkey_ec_derive($ctx,$29,$ktmplen)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $$pre = HEAP32[$ktmplen>>2]|0;
    $42 = $$pre;$rv$0 = 0;
   } else {
    $33 = HEAP32[$keylen>>2]|0;
    $34 = HEAP32[$ktmplen>>2]|0;
    $35 = ((($1)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($1)) + 24|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($1)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (_ECDH_KDF_X9_62($key,$33,$29,$34,$36,$38,$40)|0);
    $not$ = ($41|0)!=(0);
    $$ = $not$&1;
    $42 = $34;$rv$0 = $$;
   }
   _OPENSSL_cleanse($29,$42);
   _CRYPTO_free($29);
   $$0 = $rv$0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(16,217,140,88309,216);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pkey_ec_ctrl($ctx,$type,$p1,$p2) {
 $ctx = $ctx|0;
 $type = $type|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $p1$cmp = 0, $p1$off = 0, $p1$off4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 do {
  switch ($type|0) {
  case 4097:  {
   $2 = (_EC_GROUP_new_by_curve_name($p1)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    _ERR_put_error(16,197,141,88309,289);
    $$0 = 0;
    return ($$0|0);
   }
   $4 = HEAP32[$1>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    _EC_GROUP_free($4);
   }
   HEAP32[$1>>2] = $2;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4098:  {
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    _ERR_put_error(16,197,139,88309,299);
    $$0 = 0;
    return ($$0|0);
   } else {
    _EC_GROUP_set_asn1_flag($6,$p1);
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 4099:  {
   $8 = ($p1|0)==(-2);
   if ($8) {
    $9 = ((($1)) + 12|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-1);
    if ($11) {
     $13 = ((($ctx)) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($14)) + 20|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (_EC_KEY_get_flags($16)|0);
     $18 = $17 >>> 12;
     $$lobit = $18 & 1;
     $$0 = $$lobit;
     return ($$0|0);
    } else {
     $12 = $10 << 24 >> 24;
     $$0 = $12;
     return ($$0|0);
    }
   }
   $p1$off4 = (($p1) + 1)|0;
   $19 = ($p1$off4>>>0)>(2);
   if ($19) {
    $$0 = -2;
    return ($$0|0);
   }
   $20 = $p1&255;
   $21 = ((($1)) + 12|0);
   HEAP8[$21>>0] = $20;
   $22 = ($p1|0)==(-1);
   if ($22) {
    $47 = ((($1)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(0|0);
    if ($49) {
     $$0 = 1;
     return ($$0|0);
    }
    _EC_KEY_free($48);
    HEAP32[$47>>2] = 0;
    $$0 = 1;
    return ($$0|0);
   }
   $23 = ((($ctx)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $$0 = -2;
    return ($$0|0);
   }
   $30 = ((($28)) + 32|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(1);
   if ($32) {
    $33 = ((($28)) + 28|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==(1);
    if ($36) {
     $37 = ((($28)) + 40|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==(0);
     if ($39) {
      $$0 = 1;
      return ($$0|0);
     }
    }
   }
   $40 = ((($1)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    $43 = (_EC_KEY_dup($26)|0);
    HEAP32[$40>>2] = $43;
    $44 = ($43|0)==(0|0);
    if ($44) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $46 = $43;
    }
   } else {
    $46 = $41;
   }
   $45 = ($p1|0)==(0);
   if ($45) {
    _EC_KEY_clear_flags($46,4096);
    $$0 = 1;
    return ($$0|0);
   } else {
    _EC_KEY_set_flags($46,4096);
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 4100:  {
   $50 = ($p1|0)==(-2);
   if ($50) {
    $51 = ((($1)) + 13|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52 << 24 >> 24;
    $$0 = $53;
    return ($$0|0);
   }
   $p1$off = (($p1) + -1)|0;
   $p1$cmp = ($p1$off>>>0)>(1);
   if ($p1$cmp) {
    $$0 = -2;
    return ($$0|0);
   }
   $54 = $p1&255;
   $55 = ((($1)) + 13|0);
   HEAP8[$55>>0] = $54;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4101:  {
   $56 = ((($1)) + 16|0);
   HEAP32[$56>>2] = $p2;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4102:  {
   $57 = ((($1)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$p2>>2] = $58;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4103:  {
   $59 = ($p1|0)<(1);
   if ($59) {
    $$0 = -2;
    return ($$0|0);
   }
   $60 = ((($1)) + 28|0);
   HEAP32[$60>>2] = $p1;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4104:  {
   $61 = ((($1)) + 28|0);
   $62 = HEAP32[$61>>2]|0;
   HEAP32[$p2>>2] = $62;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4105:  {
   $63 = ((($1)) + 20|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0|0);
   if (!($65)) {
    _CRYPTO_free($64);
   }
   HEAP32[$63>>2] = $p2;
   $66 = ($p2|0)==(0|0);
   $67 = ((($1)) + 24|0);
   if ($66) {
    HEAP32[$67>>2] = 0;
    $$0 = 1;
    return ($$0|0);
   } else {
    HEAP32[$67>>2] = $p1;
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 4106:  {
   $68 = ((($1)) + 20|0);
   $69 = HEAP32[$68>>2]|0;
   HEAP32[$p2>>2] = $69;
   $70 = ((($1)) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   $$0 = $71;
   return ($$0|0);
   break;
  }
  case 1:  {
   $72 = (_EVP_MD_type($p2)|0);
   $73 = ($72|0)==(64);
   if (!($73)) {
    $74 = (_EVP_MD_type($p2)|0);
    $75 = ($74|0)==(416);
    if (!($75)) {
     $76 = (_EVP_MD_type($p2)|0);
     $77 = ($76|0)==(675);
     if (!($77)) {
      $78 = (_EVP_MD_type($p2)|0);
      $79 = ($78|0)==(672);
      if (!($79)) {
       $80 = (_EVP_MD_type($p2)|0);
       $81 = ($80|0)==(673);
       if (!($81)) {
        $82 = (_EVP_MD_type($p2)|0);
        $83 = ($82|0)==(674);
        if (!($83)) {
         _ERR_put_error(16,197,138,88309,388);
         $$0 = 0;
         return ($$0|0);
        }
       }
      }
     }
    }
   }
   $84 = ((($1)) + 4|0);
   HEAP32[$84>>2] = $p2;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 13:  {
   $85 = ((($1)) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   HEAP32[$p2>>2] = $86;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 11: case 5: case 7: case 2:  {
   $$0 = 1;
   return ($$0|0);
   break;
  }
  default: {
   $$0 = -2;
   return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _pkey_ec_ctrl_str($ctx,$type,$value) {
 $ctx = $ctx|0;
 $type = $type|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nid$12 = 0, $param_enc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($type,88291)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_EC_curve_nist2nid($value)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $4 = (_OBJ_sn2nid($value)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (_OBJ_ln2nid($value)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     _ERR_put_error(16,198,141,88309,422);
     $$0 = 0;
     return ($$0|0);
    } else {
     $nid$12 = $6;
    }
   } else {
    $nid$12 = $4;
   }
  } else {
   $nid$12 = $2;
  }
  $8 = (_EVP_PKEY_CTX_ctrl($ctx,408,6,4097,$nid$12,0)|0);
  $$0 = $8;
  return ($$0|0);
 }
 $9 = (_strcmp($type,88320)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (_strcmp($value,88333)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $param_enc$0 = 0;
  } else {
   $13 = (_strcmp($value,88342)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $param_enc$0 = 1;
   } else {
    $$0 = -2;
    return ($$0|0);
   }
  }
  $15 = (_EVP_PKEY_CTX_ctrl($ctx,408,6,4098,$param_enc$0,0)|0);
  $$0 = $15;
  return ($$0|0);
 }
 $16 = (_strcmp($type,88354)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $21 = (_strcmp($type,88366)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   $$0 = -2;
   return ($$0|0);
  }
  $23 = (_atoi($value)|0);
  $24 = (_EVP_PKEY_CTX_ctrl($ctx,408,1024,4099,$23,0)|0);
  $$0 = $24;
  return ($$0|0);
 }
 $18 = (_EVP_get_digestbyname($value)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  _ERR_put_error(16,198,151,88309,438);
  $$0 = 0;
  return ($$0|0);
 } else {
  $20 = (_EVP_PKEY_CTX_ctrl($ctx,408,1024,4101,0,$18)|0);
  $$0 = $20;
  return ($$0|0);
 }
 return (0)|0;
}
function _pkey_ec_derive($ctx,$key,$keylen) {
 $ctx = $ctx|0;
 $key = $key|0;
 $keylen = $keylen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($ctx)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = ((($1)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ((($3)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   } else {
    $14 = $9;
   }
   $13 = ($key|0)==(0|0);
   if ($13) {
    $15 = (_EC_KEY_get0_group($14)|0);
    $16 = (_EC_GROUP_get_degree($15)|0);
    $17 = (($16) + 7)|0;
    $18 = (($17|0) / 8)&-1;
    HEAP32[$keylen>>2] = $18;
    $$0 = 1;
    return ($$0|0);
   }
   $19 = ((($6)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_EC_KEY_get0_public_key($20)|0);
   $22 = HEAP32[$keylen>>2]|0;
   $23 = (_ECDH_compute_key($key,$22,$21,$14,0)|0);
   $24 = ($23|0)<(1);
   if ($24) {
    $$0 = 0;
    return ($$0|0);
   }
   HEAP32[$keylen>>2] = $23;
   $$0 = 1;
   return ($$0|0);
  }
 }
 _ERR_put_error(16,217,140,88309,216);
 $$0 = 0;
 return ($$0|0);
}
function _EC_POINT_point2bn($group,$point,$form,$ret,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $form = $form|0;
 $ret = $ret|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_POINT_point2oct($group,$point,$form,0,0,$ctx)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_CRYPTO_malloc($0,88385,71)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_EC_POINT_point2oct($group,$point,$form,$2,$0,$ctx)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  _CRYPTO_free($2);
  $$0 = 0;
  return ($$0|0);
 } else {
  $6 = (_BN_bin2bn($2,$0,$ret)|0);
  _CRYPTO_free($2);
  $$0 = $6;
  return ($$0|0);
 }
 return (0)|0;
}
function _ECPKParameters_print($bp,$x,$off) {
 $bp = $bp|0;
 $x = $x|0;
 $off = $off|0;
 var $$1 = 0, $$1$i = 0, $$buf_len$1 = 0, $$buf_len$3 = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$2$ph = 0;
 var $a$24 = 0, $b$2$ph = 0, $b$26 = 0, $buf_len$1 = 0, $buf_len$3 = 0, $buffer$1$ph = 0, $buffer$119 = 0, $buffer$119213638495158 = 0, $buffer$11921363849515859 = 0, $buffer$11921363849515860 = 0, $cofactor$2$ph = 0, $cofactor$212 = 0, $ctx$0$ph = 0, $ctx$014 = 0, $ctx$014233440475356 = 0, $ctx$01423344047535663 = 0, $gen$1$ph = 0, $gen$18 = 0, $i$0$i = 0, $not$$i = 0;
 var $order$2$ph = 0, $order$210 = 0, $p$1$ph = 0, $p$12 = 0, $reason$0$ph = 0, $ret$017 = 0, $ret$017223539485257 = 0, $ret$01722353948525761 = 0, $ret$01722353948525762 = 0, $seed_len$0 = 0, $str$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr18 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $str$i = sp + 56|0;
 $0 = ($x|0)==(0|0);
 L1: do {
  if ($0) {
   $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = 0;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = 0;$reason$0$ph = 67;
   label = 51;
  } else {
   $1 = (_BN_CTX_new()|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = 0;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = 0;$reason$0$ph = 65;
    label = 51;
   } else {
    $3 = (_EC_GROUP_get_asn1_flag($x)|0);
    $4 = ($3|0)==(0);
    if (!($4)) {
     $5 = (_BIO_indent($bp,$off,128)|0);
     $6 = ($5|0)==(0);
     if ($6) {
      $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = 0;$reason$0$ph = 32;
      label = 51;
      break;
     }
     $7 = (_EC_GROUP_get_curve_name($x)|0);
     $8 = ($7|0)==(0);
     if ($8) {
      $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = 0;$reason$0$ph = 32;
      label = 51;
      break;
     }
     $9 = (_OBJ_nid2sn($7)|0);
     HEAP32[$vararg_buffer>>2] = $9;
     $10 = (_BIO_printf($bp,88406,$vararg_buffer)|0);
     $11 = ($10|0)<(1);
     if ($11) {
      $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = 0;$reason$0$ph = 32;
      label = 51;
      break;
     }
     $12 = (_BIO_printf($bp,90329,$vararg_buffer1)|0);
     $13 = ($12|0)<(1);
     if ($13) {
      $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = 0;$reason$0$ph = 32;
      label = 51;
      break;
     }
     $14 = (_EC_curve_nid2nist($7)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      $buffer$11921363849515859 = 0;$ctx$01423344047535663 = $1;$ret$01722353948525761 = 1;
      label = 65;
      break;
     }
     $16 = (_BIO_indent($bp,$off,128)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = 0;$reason$0$ph = 32;
      label = 51;
      break;
     }
     HEAP32[$vararg_buffer3>>2] = $14;
     $18 = (_BIO_printf($bp,88419,$vararg_buffer3)|0);
     $19 = ($18|0)<(1);
     if ($19) {
      $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = 0;$reason$0$ph = 32;
      label = 51;
      break;
     } else {
      $buffer$119213638495158 = 0;$ctx$014233440475356 = $1;$ret$017223539485257 = 1;
      label = 64;
      break;
     }
    }
    $20 = (_EC_GROUP_method_of($x)|0);
    $21 = (_EC_METHOD_get_field_type($20)|0);
    $22 = ($21|0)==(407);
    $23 = (_BN_new()|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = 0;$reason$0$ph = 65;
     label = 51;
    } else {
     $25 = (_BN_new()|0);
     $26 = ($25|0)==(0|0);
     if ($26) {
      $a$2$ph = 0;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = $23;$reason$0$ph = 65;
      label = 51;
     } else {
      $27 = (_BN_new()|0);
      $28 = ($27|0)==(0|0);
      if ($28) {
       $a$2$ph = $25;$b$2$ph = 0;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = $23;$reason$0$ph = 65;
       label = 51;
      } else {
       $29 = (_BN_new()|0);
       $30 = ($29|0)==(0|0);
       if ($30) {
        $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = 0;$p$1$ph = $23;$reason$0$ph = 65;
        label = 51;
       } else {
        $31 = (_BN_new()|0);
        $32 = ($31|0)==(0|0);
        if ($32) {
         $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = 0;$cofactor$2$ph = 0;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 65;
         label = 51;
        } else {
         $33 = (_EC_GROUP_get_curve_GFp($x,$23,$25,$27,$1)|0);
         $34 = ($33|0)==(0);
         if ($34) {
          $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = 0;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 16;
          label = 51;
         } else {
          $35 = (_EC_GROUP_get0_generator($x)|0);
          $36 = ($35|0)==(0|0);
          if ($36) {
           $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = 0;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 16;
           label = 51;
          } else {
           $37 = (_EC_GROUP_get_order($x,$29,0)|0);
           $38 = ($37|0)==(0);
           if ($38) {
            $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = 0;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 16;
            label = 51;
           } else {
            $39 = (_EC_GROUP_get_cofactor($x,$31,0)|0);
            $40 = ($39|0)==(0);
            if ($40) {
             $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = 0;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 16;
             label = 51;
            } else {
             $41 = (_EC_GROUP_get_point_conversion_form($x)|0);
             $42 = (_EC_POINT_point2bn($x,$35,$41,0,$1)|0);
             $43 = ($42|0)==(0|0);
             if ($43) {
              $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = 0;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = 0;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 16;
              label = 51;
             } else {
              $44 = (_BN_num_bits($23)|0);
              $45 = (($44) + 7)|0;
              $46 = (($45|0) / 8)&-1;
              $47 = (_BN_num_bits($25)|0);
              $48 = (($47) + 7)|0;
              $49 = (($48|0) / 8)&-1;
              $50 = ($46>>>0)<($49>>>0);
              $$1 = $50 ? $49 : $46;
              $51 = (_BN_num_bits($27)|0);
              $52 = (($51) + 7)|0;
              $53 = (($52|0) / 8)&-1;
              $54 = ($$1>>>0)<($53>>>0);
              $buf_len$1 = $54 ? $53 : $$1;
              $55 = (_BN_num_bits($42)|0);
              $56 = (($55) + 7)|0;
              $57 = (($56|0) / 8)&-1;
              $58 = ($buf_len$1>>>0)<($57>>>0);
              $$buf_len$1 = $58 ? $57 : $buf_len$1;
              $59 = (_BN_num_bits($29)|0);
              $60 = (($59) + 7)|0;
              $61 = (($60|0) / 8)&-1;
              $62 = ($$buf_len$1>>>0)<($61>>>0);
              $buf_len$3 = $62 ? $61 : $$buf_len$1;
              $63 = (_BN_num_bits($31)|0);
              $64 = (($63) + 7)|0;
              $65 = (($64|0) / 8)&-1;
              $66 = ($buf_len$3>>>0)<($65>>>0);
              $$buf_len$3 = $66 ? $65 : $buf_len$3;
              $67 = (_EC_GROUP_get0_seed($x)|0);
              $68 = ($67|0)!=(0|0);
              if ($68) {
               $69 = (_EC_GROUP_get_seed_len($x)|0);
               $seed_len$0 = $69;
              } else {
               $seed_len$0 = 0;
              }
              $70 = (($$buf_len$3) + 10)|0;
              $71 = (_CRYPTO_malloc($70,88396,257)|0);
              $72 = ($71|0)==(0|0);
              if ($72) {
               $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = 0;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 65;
               label = 51;
              } else {
               $73 = (_BIO_indent($bp,$off,128)|0);
               $74 = ($73|0)==(0);
               if ($74) {
                $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                label = 51;
               } else {
                $75 = (_OBJ_nid2sn($21)|0);
                HEAP32[$vararg_buffer6>>2] = $75;
                $76 = (_BIO_printf($bp,88435,$vararg_buffer6)|0);
                $77 = ($76|0)<(1);
                if ($77) {
                 $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                 label = 51;
                } else {
                 if ($22) {
                  $78 = (_EC_GROUP_get_basis_type($x)|0);
                  $79 = ($78|0)==(0);
                  if ($79) {
                   $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                   label = 51;
                   break;
                  }
                  $80 = (_BIO_indent($bp,$off,128)|0);
                  $81 = ($80|0)==(0);
                  if ($81) {
                   $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                   label = 51;
                   break;
                  }
                  $82 = (_OBJ_nid2sn($78)|0);
                  HEAP32[$vararg_buffer9>>2] = $82;
                  $83 = (_BIO_printf($bp,88451,$vararg_buffer9)|0);
                  $84 = ($83|0)<(1);
                  if ($84) {
                   $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                   label = 51;
                   break;
                  }
                  $85 = (_ASN1_bn_print($bp,88467,$23,$71,$off)|0);
                  $86 = ($85|0)==(0);
                  if ($86) {
                   $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                   label = 51;
                   break;
                  }
                 } else {
                  $87 = (_ASN1_bn_print($bp,88479,$23,$71,$off)|0);
                  $88 = ($87|0)==(0);
                  if ($88) {
                   $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                   label = 51;
                   break;
                  }
                 }
                 $89 = (_ASN1_bn_print($bp,88486,$25,$71,$off)|0);
                 $90 = ($89|0)==(0);
                 if ($90) {
                  $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                  label = 51;
                 } else {
                  $91 = (_ASN1_bn_print($bp,88492,$27,$71,$off)|0);
                  $92 = ($91|0)==(0);
                  if ($92) {
                   $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                   label = 51;
                   break;
                  }
                  switch ($41|0) {
                  case 2:  {
                   $93 = (_ASN1_bn_print($bp,88498,$42,$71,$off)|0);
                   $94 = ($93|0)==(0);
                   if ($94) {
                    $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                    label = 51;
                    break L1;
                   }
                   break;
                  }
                  case 4:  {
                   $95 = (_ASN1_bn_print($bp,88522,$42,$71,$off)|0);
                   $96 = ($95|0)==(0);
                   if ($96) {
                    $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                    label = 51;
                    break L1;
                   }
                   break;
                  }
                  default: {
                   $97 = (_ASN1_bn_print($bp,88548,$42,$71,$off)|0);
                   $98 = ($97|0)==(0);
                   if ($98) {
                    $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                    label = 51;
                    break L1;
                   }
                  }
                  }
                  $99 = (_ASN1_bn_print($bp,88568,$29,$71,$off)|0);
                  $100 = ($99|0)==(0);
                  if ($100) {
                   $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                   label = 51;
                   break;
                  }
                  $101 = (_ASN1_bn_print($bp,88576,$31,$71,$off)|0);
                  $102 = ($101|0)==(0);
                  if ($102) {
                   $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                   label = 51;
                   break;
                  }
                  if (!($68)) {
                   $a$24 = $25;$b$26 = $27;$buffer$119 = $71;$cofactor$212 = $31;$ctx$014 = $1;$gen$18 = $42;$order$210 = $29;$p$12 = $23;$ret$017 = 1;
                   label = 52;
                   break;
                  }
                  $103 = ($off|0)>(0);
                  if ($103) {
                   $104 = ($off|0)>(128);
                   $$off$i = $104 ? 128 : $off;
                   _memset(($str$i|0),32,($$off$i|0))|0;
                   $105 = (_BIO_write($bp,$str$i,$$off$i)|0);
                   $106 = ($105|0)<(1);
                   if (!($106)) {
                    $$1$i = $$off$i;
                    label = 43;
                   }
                  } else {
                   $$1$i = 0;
                   label = 43;
                  }
                  L48: do {
                   if ((label|0) == 43) {
                    HEAP32[$vararg_buffer12>>2] = 88590;
                    $107 = (_BIO_printf($bp,88587,$vararg_buffer12)|0);
                    $108 = ($107|0)<(1);
                    if ($108) {
                     break;
                    }
                    $109 = ((($str$i)) + 1|0);
                    $110 = (($$1$i) + 4)|0;
                    $111 = (($$1$i) + 5)|0;
                    $i$0$i = 0;
                    while(1) {
                     $112 = ($i$0$i>>>0)<($seed_len$0>>>0);
                     if (!($112)) {
                      break;
                     }
                     $113 = (($i$0$i>>>0) % 15)&-1;
                     $114 = ($113|0)==(0);
                     if ($114) {
                      HEAP8[$str$i>>0] = 10;
                      _memset(($109|0),32,($110|0))|0;
                      $115 = (_BIO_write($bp,$str$i,$111)|0);
                      $116 = ($115|0)<(1);
                      if ($116) {
                       break L48;
                      }
                     }
                     $117 = (($67) + ($i$0$i)|0);
                     $118 = HEAP8[$117>>0]|0;
                     $119 = $118&255;
                     $120 = (($i$0$i) + 1)|0;
                     $121 = ($120|0)==($seed_len$0|0);
                     $122 = $121 ? 89936 : 89937;
                     HEAP32[$vararg_buffer15>>2] = $119;
                     $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
                     HEAP32[$vararg_ptr18>>2] = $122;
                     $123 = (_BIO_printf($bp,89939,$vararg_buffer15)|0);
                     $124 = ($123|0)<(1);
                     if ($124) {
                      break L48;
                     } else {
                      $i$0$i = $120;
                     }
                    }
                    $125 = (_BIO_write($bp,90329,1)|0);
                    $not$$i = ($125|0)>(0);
                    if ($not$$i) {
                     $a$24 = $25;$b$26 = $27;$buffer$119 = $71;$cofactor$212 = $31;$ctx$014 = $1;$gen$18 = $42;$order$210 = $29;$p$12 = $23;$ret$017 = 1;
                     label = 52;
                     break L1;
                    } else {
                     $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                     label = 51;
                     break L1;
                    }
                   }
                  } while(0);
                  $a$2$ph = $25;$b$2$ph = $27;$buffer$1$ph = $71;$cofactor$2$ph = $31;$ctx$0$ph = $1;$gen$1$ph = $42;$order$2$ph = $29;$p$1$ph = $23;$reason$0$ph = 32;
                  label = 51;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 51) {
  _ERR_put_error(16,149,$reason$0$ph,88396,321);
  $a$24 = $a$2$ph;$b$26 = $b$2$ph;$buffer$119 = $buffer$1$ph;$cofactor$212 = $cofactor$2$ph;$ctx$014 = $ctx$0$ph;$gen$18 = $gen$1$ph;$order$210 = $order$2$ph;$p$12 = $p$1$ph;$ret$017 = 0;
  label = 52;
 }
 if ((label|0) == 52) {
  $126 = ($p$12|0)==(0|0);
  if (!($126)) {
   _BN_free($p$12);
  }
  $127 = ($a$24|0)==(0|0);
  if (!($127)) {
   _BN_free($a$24);
  }
  $128 = ($b$26|0)==(0|0);
  if (!($128)) {
   _BN_free($b$26);
  }
  $129 = ($gen$18|0)==(0|0);
  if (!($129)) {
   _BN_free($gen$18);
  }
  $130 = ($order$210|0)==(0|0);
  if (!($130)) {
   _BN_free($order$210);
  }
  $131 = ($cofactor$212|0)==(0|0);
  if ($131) {
   $buffer$119213638495158 = $buffer$119;$ctx$014233440475356 = $ctx$014;$ret$017223539485257 = $ret$017;
   label = 64;
  } else {
   _BN_free($cofactor$212);
   $buffer$119213638495158 = $buffer$119;$ctx$014233440475356 = $ctx$014;$ret$017223539485257 = $ret$017;
   label = 64;
  }
 }
 if ((label|0) == 64) {
  $132 = ($ctx$014233440475356|0)==(0|0);
  if ($132) {
   $buffer$11921363849515860 = $buffer$119213638495158;$ret$01722353948525762 = $ret$017223539485257;
  } else {
   $buffer$11921363849515859 = $buffer$119213638495158;$ctx$01423344047535663 = $ctx$014233440475356;$ret$01722353948525761 = $ret$017223539485257;
   label = 65;
  }
 }
 if ((label|0) == 65) {
  _BN_CTX_free($ctx$01423344047535663);
  $buffer$11921363849515860 = $buffer$11921363849515859;$ret$01722353948525762 = $ret$01722353948525761;
 }
 $133 = ($buffer$11921363849515860|0)==(0|0);
 if ($133) {
  STACKTOP = sp;return ($ret$01722353948525762|0);
 }
 _CRYPTO_free($buffer$11921363849515860);
 STACKTOP = sp;return ($ret$01722353948525762|0);
}
function _EC_GFp_mont_method() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (45840|0);
}
function _ec_GFp_mont_group_init($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ec_GFp_simple_group_init($group)|0);
 $1 = ((($group)) + 160|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($group)) + 164|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function _ec_GFp_mont_group_finish($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _BN_MONT_CTX_free($1);
  HEAP32[$0>>2] = 0;
 }
 $3 = ((($group)) + 164|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _ec_GFp_simple_group_finish($group);
  return;
 }
 _BN_free($4);
 HEAP32[$3>>2] = 0;
 _ec_GFp_simple_group_finish($group);
 return;
}
function _ec_GFp_mont_group_clear_finish($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _BN_MONT_CTX_free($1);
  HEAP32[$0>>2] = 0;
 }
 $3 = ((($group)) + 164|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _ec_GFp_simple_group_clear_finish($group);
  return;
 }
 _BN_clear_free($4);
 HEAP32[$3>>2] = 0;
 _ec_GFp_simple_group_clear_finish($group);
 return;
}
function _ec_GFp_mont_group_copy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dest)) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _BN_MONT_CTX_free($1);
  HEAP32[$0>>2] = 0;
 }
 $3 = ((($dest)) + 164|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _BN_clear_free($4);
  HEAP32[$3>>2] = 0;
 }
 $6 = (_ec_GFp_simple_group_copy($dest,$src)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($src)) + 160|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 do {
  if ($10) {
   label = 9;
  } else {
   $11 = (_BN_MONT_CTX_new()|0);
   HEAP32[$0>>2] = $11;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $13 = HEAP32[$8>>2]|0;
    $14 = (_BN_MONT_CTX_copy($11,$13)|0);
    $15 = ($14|0)==(0|0);
    if ($15) {
     break;
    } else {
     label = 9;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $16 = ((($src)) + 164|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = 1;
   return ($$0|0);
  }
  $19 = (_BN_dup($17)|0);
  HEAP32[$3>>2] = $19;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$0 = 0;
  return ($$0|0);
 }
 _BN_MONT_CTX_free($21);
 HEAP32[$0>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _ec_GFp_mont_group_set_curve($group,$p,$a,$b,$ctx) {
 $group = $group|0;
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mont$0 = 0, $new_ctx$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _BN_MONT_CTX_free($1);
  HEAP32[$0>>2] = 0;
 }
 $3 = ((($group)) + 164|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _BN_free($4);
  HEAP32[$3>>2] = 0;
 }
 $6 = ($ctx|0)==(0|0);
 if ($6) {
  $7 = (_BN_CTX_new()|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$01 = 0;
   return ($$01|0);
  } else {
   $$0 = $7;$new_ctx$0 = $7;
  }
 } else {
  $$0 = $ctx;$new_ctx$0 = 0;
 }
 $9 = (_BN_MONT_CTX_new()|0);
 $10 = ($9|0)==(0|0);
 do {
  if ($10) {
   $mont$0 = 0;$ret$0 = 0;
  } else {
   $11 = (_BN_MONT_CTX_set($9,$p,$$0)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    _ERR_put_error(16,189,3,88596,222);
    $mont$0 = $9;$ret$0 = 0;
    break;
   }
   $13 = (_BN_new()|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $mont$0 = $9;$ret$0 = 0;
   } else {
    $15 = (_BN_value_one()|0);
    $16 = ((($9)) + 4|0);
    $17 = (_BN_mod_mul_montgomery($13,$15,$16,$9,$$0)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $mont$0 = $9;$ret$0 = 0;
    } else {
     HEAP32[$0>>2] = $9;
     HEAP32[$3>>2] = $13;
     $19 = (_ec_GFp_simple_group_set_curve($group,$p,$a,$b,$$0)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $21 = HEAP32[$0>>2]|0;
      _BN_MONT_CTX_free($21);
      HEAP32[$0>>2] = 0;
      $22 = HEAP32[$3>>2]|0;
      _BN_free($22);
      HEAP32[$3>>2] = 0;
      $mont$0 = 0;$ret$0 = 0;
     } else {
      $mont$0 = 0;$ret$0 = $19;
     }
    }
   }
  }
 } while(0);
 $23 = ($new_ctx$0|0)==(0|0);
 if (!($23)) {
  _BN_CTX_free($new_ctx$0);
 }
 $24 = ($mont$0|0)==(0|0);
 if ($24) {
  $$01 = $ret$0;
  return ($$01|0);
 }
 _BN_MONT_CTX_free($mont$0);
 $$01 = $ret$0;
 return ($$01|0);
}
function _ec_GFp_mont_field_mul($group,$r,$a,$b,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(16,131,111,88596,257);
  $$0 = 0;
  return ($$0|0);
 } else {
  $3 = (_BN_mod_mul_montgomery($r,$a,$b,$1,$ctx)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _ec_GFp_mont_field_sqr($group,$r,$a,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(16,132,111,88596,268);
  $$0 = 0;
  return ($$0|0);
 } else {
  $3 = (_BN_mod_mul_montgomery($r,$a,$a,$1,$ctx)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _ec_GFp_mont_field_encode($group,$r,$a,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(16,134,111,88596,279);
  $$0 = 0;
  return ($$0|0);
 } else {
  $3 = ((($1)) + 4|0);
  $4 = (_BN_mod_mul_montgomery($r,$a,$3,$1,$ctx)|0);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _ec_GFp_mont_field_decode($group,$r,$a,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(16,133,111,88596,290);
  $$0 = 0;
  return ($$0|0);
 } else {
  $3 = (_BN_from_montgomery($r,$a,$1,$ctx)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _ec_GFp_mont_field_set_to_one($group,$r,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 164|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(16,209,111,88596,301);
  $$0 = 0;
  return ($$0|0);
 } else {
  $3 = (_BN_copy($r,$1)|0);
  $not$ = ($3|0)!=(0|0);
  $$ = $not$&1;
  $$0 = $$;
  return ($$0|0);
 }
 return (0)|0;
}
function _EC_GFp_nist_method() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (45996|0);
}
function _ec_GFp_nist_group_copy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($src)) + 168|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dest)) + 168|0);
 HEAP32[$2>>2] = $1;
 $3 = (_ec_GFp_simple_group_copy($dest,$src)|0);
 return ($3|0);
}
function _ec_GFp_nist_group_set_curve($group,$p,$a,$b,$ctx) {
 $group = $group|0;
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_ctx$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if ($0) {
  $1 = (_BN_CTX_new()|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $1;$new_ctx$0 = $1;
  }
 } else {
  $$01 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$01);
 $3 = (_BN_CTX_get($$01)|0);
 $4 = ($3|0)==(0|0);
 L5: do {
  if ($4) {
   $ret$0 = 0;
  } else {
   $5 = (_BN_get0_nist_prime_192()|0);
   $6 = (_BN_ucmp($5,$p)|0);
   $7 = ($6|0)==(0);
   do {
    if ($7) {
     $8 = ((($group)) + 168|0);
     HEAP32[$8>>2] = 62;
    } else {
     $9 = (_BN_get0_nist_prime_224()|0);
     $10 = (_BN_ucmp($9,$p)|0);
     $11 = ($10|0)==(0);
     if ($11) {
      $12 = ((($group)) + 168|0);
      HEAP32[$12>>2] = 63;
      break;
     }
     $13 = (_BN_get0_nist_prime_256()|0);
     $14 = (_BN_ucmp($13,$p)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $16 = ((($group)) + 168|0);
      HEAP32[$16>>2] = 64;
      break;
     }
     $17 = (_BN_get0_nist_prime_384()|0);
     $18 = (_BN_ucmp($17,$p)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $20 = ((($group)) + 168|0);
      HEAP32[$20>>2] = 65;
      break;
     }
     $21 = (_BN_get0_nist_prime_521()|0);
     $22 = (_BN_ucmp($21,$p)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $24 = ((($group)) + 168|0);
      HEAP32[$24>>2] = 66;
      break;
     } else {
      _ERR_put_error(16,202,135,88607,157);
      $ret$0 = 0;
      break L5;
     }
    }
   } while(0);
   $25 = (_ec_GFp_simple_group_set_curve($group,$p,$a,$b,$$01)|0);
   $ret$0 = $25;
  }
 } while(0);
 _BN_CTX_end($$01);
 $26 = ($new_ctx$0|0)==(0|0);
 if ($26) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _ec_GFp_nist_field_mul($group,$r,$a,$b,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx_new$0 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $ret$0 = 0, $ret$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($group|0)!=(0|0);
 $1 = ($r|0)!=(0|0);
 $or$cond = $0 & $1;
 $2 = ($a|0)!=(0|0);
 $or$cond3 = $or$cond & $2;
 $3 = ($b|0)!=(0|0);
 $or$cond5 = $or$cond3 & $3;
 if (!($or$cond5)) {
  _ERR_put_error(16,200,67,88607,177);
  $ret$06 = 0;
  return ($ret$06|0);
 }
 $4 = ($ctx|0)==(0|0);
 if ($4) {
  $5 = (_BN_CTX_new()|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $ret$06 = 0;
   return ($ret$06|0);
  } else {
   $$0 = $5;$ctx_new$0 = $5;
  }
 } else {
  $$0 = $ctx;$ctx_new$0 = 0;
 }
 $7 = (_BN_mul($r,$a,$b,$$0)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $ret$0 = 0;
 } else {
  $9 = ((($group)) + 168|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($group)) + 72|0);
  $12 = (FUNCTION_TABLE_iiiii[$10 & 127]($r,$r,$11,$$0)|0);
  $not$ = ($12|0)!=(0);
  $$ = $not$&1;
  $ret$0 = $$;
 }
 $13 = ($ctx_new$0|0)==(0|0);
 if ($13) {
  $ret$06 = $ret$0;
  return ($ret$06|0);
 }
 _BN_CTX_free($ctx_new$0);
 $ret$06 = $ret$0;
 return ($ret$06|0);
}
function _ec_GFp_nist_field_sqr($group,$r,$a,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx_new$0 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $ret$0 = 0;
 var $ret$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($group|0)!=(0|0);
 $1 = ($r|0)!=(0|0);
 $or$cond = $0 & $1;
 $2 = ($a|0)!=(0|0);
 $or$cond3 = $or$cond & $2;
 if (!($or$cond3)) {
  _ERR_put_error(16,201,134,88607,203);
  $ret$04 = 0;
  return ($ret$04|0);
 }
 $3 = ($ctx|0)==(0|0);
 if ($3) {
  $4 = (_BN_CTX_new()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $ret$04 = 0;
   return ($ret$04|0);
  } else {
   $$0 = $4;$ctx_new$0 = $4;
  }
 } else {
  $$0 = $ctx;$ctx_new$0 = 0;
 }
 $6 = (_BN_sqr($r,$a,$$0)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $ret$0 = 0;
 } else {
  $8 = ((($group)) + 168|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($group)) + 72|0);
  $11 = (FUNCTION_TABLE_iiiii[$9 & 127]($r,$r,$10,$$0)|0);
  $not$ = ($11|0)!=(0);
  $$ = $not$&1;
  $ret$0 = $$;
 }
 $12 = ($ctx_new$0|0)==(0|0);
 if ($12) {
  $ret$04 = $ret$0;
  return ($ret$04|0);
 }
 _BN_CTX_free($ctx_new$0);
 $ret$04 = $ret$0;
 return ($ret$04|0);
}
function _ec_GFp_simple_set_compressed_coordinates($group,$point,$x_,$y_bit,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x_ = $x_|0;
 $y_bit = $y_bit|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $new_ctx$0 = 0, $not$ = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _ERR_clear_error();
 $0 = ($ctx|0)==(0|0);
 if ($0) {
  $1 = (_BN_CTX_new()|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $1;$new_ctx$0 = $1;
  }
 } else {
  $$01 = $ctx;$new_ctx$0 = 0;
 }
 $3 = ($y_bit|0)!=(0);
 _BN_CTX_start($$01);
 $4 = (_BN_CTX_get($$01)|0);
 $5 = (_BN_CTX_get($$01)|0);
 $6 = (_BN_CTX_get($$01)|0);
 $7 = (_BN_CTX_get($$01)|0);
 $8 = ($7|0)==(0|0);
 L5: do {
  if ($8) {
   $ret$0 = 0;
  } else {
   $9 = ((($group)) + 72|0);
   $10 = (_BN_nnmod($6,$x_,$9,$$01)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $ret$0 = 0;
   } else {
    $12 = HEAP32[$group>>2]|0;
    $13 = ((($12)) + 148|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     $16 = ((($12)) + 136|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (FUNCTION_TABLE_iiiii[$17 & 127]($group,$5,$x_,$$01)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $ret$0 = 0;
      break;
     }
     $20 = HEAP32[$group>>2]|0;
     $21 = ((($20)) + 132|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_iiiiii[$22 & 63]($group,$4,$5,$x_,$$01)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $ret$0 = 0;
      break;
     }
    } else {
     $25 = (_BN_mod_sqr($5,$x_,$9,$$01)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      $ret$0 = 0;
      break;
     }
     $27 = (_BN_mod_mul($4,$5,$x_,$9,$$01)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $ret$0 = 0;
      break;
     }
    }
    $29 = ((($group)) + 156|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0);
    if ($31) {
     $38 = HEAP32[$group>>2]|0;
     $39 = ((($38)) + 148|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(0|0);
     if ($41) {
      $47 = ((($38)) + 132|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ((($group)) + 116|0);
      $50 = (FUNCTION_TABLE_iiiiii[$48 & 63]($group,$5,$49,$6,$$01)|0);
      $51 = ($50|0)==(0);
      if ($51) {
       $ret$0 = 0;
       break;
      }
     } else {
      $42 = ((($group)) + 116|0);
      $43 = (FUNCTION_TABLE_iiiii[$40 & 127]($group,$5,$42,$$01)|0);
      $44 = ($43|0)==(0);
      if ($44) {
       $ret$0 = 0;
       break;
      }
      $45 = (_BN_mod_mul($5,$5,$6,$9,$$01)|0);
      $46 = ($45|0)==(0);
      if ($46) {
       $ret$0 = 0;
       break;
      }
     }
     $52 = (_BN_mod_add_quick($4,$4,$5,$9)|0);
     $53 = ($52|0)==(0);
     if ($53) {
      $ret$0 = 0;
      break;
     }
    } else {
     $32 = (_BN_mod_lshift1_quick($5,$6,$9)|0);
     $33 = ($32|0)==(0);
     if ($33) {
      $ret$0 = 0;
      break;
     }
     $34 = (_BN_mod_add_quick($5,$5,$6,$9)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $ret$0 = 0;
      break;
     }
     $36 = (_BN_mod_sub_quick($4,$4,$5,$9)|0);
     $37 = ($36|0)==(0);
     if ($37) {
      $ret$0 = 0;
      break;
     }
    }
    $54 = HEAP32[$group>>2]|0;
    $55 = ((($54)) + 148|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(0|0);
    $58 = ((($group)) + 136|0);
    if ($57) {
     $63 = (_BN_mod_add_quick($4,$4,$58,$9)|0);
     $64 = ($63|0)==(0);
     if ($64) {
      $ret$0 = 0;
      break;
     }
    } else {
     $59 = (FUNCTION_TABLE_iiiii[$56 & 127]($group,$5,$58,$$01)|0);
     $60 = ($59|0)==(0);
     if ($60) {
      $ret$0 = 0;
      break;
     }
     $61 = (_BN_mod_add_quick($4,$4,$5,$9)|0);
     $62 = ($61|0)==(0);
     if ($62) {
      $ret$0 = 0;
      break;
     }
    }
    $65 = (_BN_mod_sqrt($7,$4,$9,$$01)|0);
    $66 = ($65|0)==(0|0);
    if ($66) {
     $67 = (_ERR_peek_last_error()|0);
     $68 = $67 & -16773121;
     $69 = ($68|0)==(50331759);
     if ($69) {
      _ERR_clear_error();
      _ERR_put_error(16,169,110,88618,163);
      $ret$0 = 0;
      break;
     } else {
      _ERR_put_error(16,169,3,88618,166);
      $ret$0 = 0;
      break;
     }
    }
    $70 = ((($7)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)>(0);
    if ($72) {
     $73 = HEAP32[$7>>2]|0;
     $74 = HEAP32[$73>>2]|0;
     $75 = $74 & 1;
     $76 = ($75|0)!=(0);
     $77 = $3 ^ $76;
     if ($77) {
      label = 34;
     } else {
      label = 37;
     }
    } else {
     if ($3) {
      $78 = ($71|0)==(0);
      if ($78) {
       $79 = (_BN_kronecker($6,$9,$$01)|0);
       switch ($79|0) {
       case -2:  {
        $ret$0 = 0;
        break L5;
        break;
       }
       case 1:  {
        _ERR_put_error(16,169,109,88618,180);
        $ret$0 = 0;
        break L5;
        break;
       }
       default: {
        _ERR_put_error(16,169,110,88618,186);
        $ret$0 = 0;
        break L5;
       }
       }
      } else {
       label = 34;
      }
     } else {
      label = 39;
     }
    }
    if ((label|0) == 34) {
     $80 = (_BN_usub($7,$9,$7)|0);
     $81 = ($80|0)==(0);
     if ($81) {
      $ret$0 = 0;
      break;
     }
     $$pre = HEAP32[$70>>2]|0;
     $82 = ($$pre|0)>(0);
     if ($82) {
      label = 37;
     } else {
      if ($3) {
       label = 38;
      } else {
       label = 39;
      }
     }
    }
    if ((label|0) == 37) {
     $83 = HEAP32[$7>>2]|0;
     $84 = HEAP32[$83>>2]|0;
     $85 = $84 & 1;
     $86 = ($85|0)!=(0);
     $87 = $3 ^ $86;
     if ($87) {
      label = 38;
     } else {
      label = 39;
     }
    }
    if ((label|0) == 38) {
     _ERR_put_error(16,169,68,88618,194);
     $ret$0 = 0;
     break;
    }
    else if ((label|0) == 39) {
     $88 = (_EC_POINT_set_affine_coordinates_GFp($group,$point,$6,$7,$$01)|0);
     $not$ = ($88|0)!=(0);
     $$ = $not$&1;
     $ret$0 = $$;
     break;
    }
   }
  }
 } while(0);
 _BN_CTX_end($$01);
 $89 = ($new_ctx$0|0)==(0|0);
 if ($89) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _ec_GFp_simple_point2oct($group,$point,$form,$buf,$len,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $form = $form|0;
 $buf = $buf|0;
 $len = $len|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$08 = 0, $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $form$ = 0, $i$0$lcssa = 0, $i$1$lcssa = 0, $i$2 = 0, $new_ctx$0 = 0, $scevgep = 0, $scevgep26 = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($form|0) {
 case 2: case 4: case 6:  {
  break;
 }
 default: {
  _ERR_put_error(16,104,104,88618,223);
  $$0 = 0;
  return ($$0|0);
 }
 }
 $0 = (_EC_POINT_is_at_infinity($group,$point)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = ($buf|0)==(0|0);
  if ($2) {
   $$0 = 1;
   return ($$0|0);
  }
  $3 = ($len|0)==(0);
  if ($3) {
   _ERR_put_error(16,104,100,88618,231);
   $$0 = 0;
   return ($$0|0);
  } else {
   HEAP8[$buf>>0] = 0;
   $$0 = 1;
   return ($$0|0);
  }
 }
 $4 = ((($group)) + 72|0);
 $5 = (_BN_num_bits($4)|0);
 $6 = (($5) + 7)|0;
 $7 = (($6|0) / 8)&-1;
 $8 = ($form|0)!=(2);
 $9 = $8&1;
 $$sink = $7 << $9;
 $10 = (($$sink) + 1)|0;
 $11 = ($buf|0)==(0|0);
 if ($11) {
  $$0 = $10;
  return ($$0|0);
 }
 $12 = ($10>>>0)>($len>>>0);
 if ($12) {
  _ERR_put_error(16,104,100,88618,248);
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ($ctx|0)==(0|0);
 if ($13) {
  $14 = (_BN_CTX_new()|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$08 = $14;$new_ctx$0 = $14;
  }
 } else {
  $$08 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$08);
 $16 = (_BN_CTX_get($$08)|0);
 $17 = (_BN_CTX_get($$08)|0);
 $18 = ($17|0)==(0|0);
 do {
  if (!($18)) {
   $19 = (_EC_POINT_get_affine_coordinates_GFp($group,$point,$16,$17,$$08)|0);
   $20 = ($19|0)==(0);
   if (!($20)) {
    $21 = $form & -5;
    $22 = ($21|0)==(2);
    if ($22) {
     $23 = ((($17)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)>(0);
     if ($25) {
      $26 = HEAP32[$17>>2]|0;
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 & 1;
      $form$ = (($28) + ($form))|0;
      $storemerge$in = $form$;
     } else {
      $storemerge$in = $form;
     }
    } else {
     $storemerge$in = $form;
    }
    $storemerge = $storemerge$in&255;
    HEAP8[$buf>>0] = $storemerge;
    $29 = (_BN_num_bits($16)|0);
    $30 = (($29) + 7)|0;
    $31 = (($30|0) / 8)&-1;
    $32 = (($7) - ($31))|0;
    $33 = ($32>>>0)>($7>>>0);
    if ($33) {
     _ERR_put_error(16,104,68,88618,278);
     break;
    }
    $34 = ($7|0)==($31|0);
    $$pre = (($7) + 1)|0;
    if ($34) {
     $i$0$lcssa = 1;
    } else {
     $scevgep26 = ((($buf)) + 1|0);
     _memset(($scevgep26|0),0,($32|0))|0;
     $35 = (($$pre) - ($31))|0;
     $i$0$lcssa = $35;
    }
    $36 = (($buf) + ($i$0$lcssa)|0);
    $37 = (_BN_bn2bin($16,$36)|0);
    $38 = (($37) + ($i$0$lcssa))|0;
    $39 = ($38|0)==($$pre|0);
    if (!($39)) {
     _ERR_put_error(16,104,68,88618,288);
     break;
    }
    $40 = $form & -3;
    $41 = ($40|0)==(4);
    if ($41) {
     $42 = (_BN_num_bits($17)|0);
     $43 = (($42) + 7)|0;
     $44 = (($43|0) / 8)&-1;
     $45 = (($7) - ($44))|0;
     $46 = ($45>>>0)>($7>>>0);
     if ($46) {
      _ERR_put_error(16,104,68,88618,296);
      break;
     }
     $47 = ($7|0)==($44|0);
     if ($47) {
      $i$1$lcssa = $$pre;
     } else {
      $48 = (($$pre) + ($7))|0;
      $scevgep = (($buf) + ($$pre)|0);
      _memset(($scevgep|0),0,($45|0))|0;
      $49 = (($48) - ($44))|0;
      $i$1$lcssa = $49;
     }
     $50 = (($buf) + ($i$1$lcssa)|0);
     $51 = (_BN_bn2bin($17,$50)|0);
     $52 = (($51) + ($i$1$lcssa))|0;
     $i$2 = $52;
    } else {
     $i$2 = $$pre;
    }
    $53 = ($i$2|0)==($10|0);
    if (!($53)) {
     _ERR_put_error(16,104,68,88618,308);
     break;
    }
    _BN_CTX_end($$08);
    $54 = ($new_ctx$0|0)==(0|0);
    if ($54) {
     $$0 = $10;
     return ($$0|0);
    }
    _BN_CTX_free($new_ctx$0);
    $$0 = $10;
    return ($$0|0);
   }
  }
 } while(0);
 _BN_CTX_end($$08);
 $55 = ($new_ctx$0|0)==(0|0);
 if ($55) {
  $$0 = 0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = 0;
 return ($$0|0);
}
function _ec_GFp_simple_oct2point($group,$point,$buf,$len,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $buf = $buf|0;
 $len = $len|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$010 = 0, $$sink = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_ctx$0 = 0;
 var $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  _ERR_put_error(16,103,100,88618,338);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP8[$buf>>0]|0;
 $2 = $1&255;
 $3 = $2 & 1;
 $4 = $2 & 254;
 switch ($4|0) {
 case 0: case 2: case 4: case 6:  {
  break;
 }
 default: {
  _ERR_put_error(16,103,102,88618,347);
  $$0 = 0;
  return ($$0|0);
 }
 }
 $5 = $2 & 251;
 $6 = ($5|0)==(1);
 if ($6) {
  _ERR_put_error(16,103,102,88618,351);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($4|0)==(0);
 if ($7) {
  $8 = ($len|0)==(1);
  if ($8) {
   $9 = (_EC_POINT_set_to_infinity($group,$point)|0);
   $$0 = $9;
   return ($$0|0);
  } else {
   _ERR_put_error(16,103,102,88618,357);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $10 = ((($group)) + 72|0);
 $11 = (_BN_num_bits($10)|0);
 $12 = (($11) + 7)|0;
 $13 = (($12|0) / 8)&-1;
 $14 = ($4|0)==(2);
 $15 = $14&1;
 $16 = $15 ^ 1;
 $$sink = $13 << $16;
 $17 = (($$sink) + 1)|0;
 $18 = ($17|0)==($len|0);
 if (!($18)) {
  _ERR_put_error(16,103,102,88618,370);
  $$0 = 0;
  return ($$0|0);
 }
 $19 = ($ctx|0)==(0|0);
 if ($19) {
  $20 = (_BN_CTX_new()|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$010 = $20;$new_ctx$0 = $20;
  }
 } else {
  $$010 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$010);
 $22 = (_BN_CTX_get($$010)|0);
 $23 = (_BN_CTX_get($$010)|0);
 $24 = ($23|0)==(0|0);
 L29: do {
  if ($24) {
   $ret$0 = 0;
  } else {
   $25 = ((($buf)) + 1|0);
   $26 = (_BN_bin2bn($25,$13,$22)|0);
   $27 = ($26|0)==(0|0);
   if ($27) {
    $ret$0 = 0;
   } else {
    $28 = (_BN_ucmp($22,$10)|0);
    $29 = ($28|0)>(-1);
    if ($29) {
     _ERR_put_error(16,103,102,88618,389);
     $ret$0 = 0;
     break;
    }
    if ($14) {
     $30 = (_EC_POINT_set_compressed_coordinates_GFp($group,$point,$22,$3,$$010)|0);
     $31 = ($30|0)==(0);
     if ($31) {
      $ret$0 = 0;
      break;
     }
    } else {
     $$sum = (($13) + 1)|0;
     $32 = (($buf) + ($$sum)|0);
     $33 = (_BN_bin2bn($32,$13,$23)|0);
     $34 = ($33|0)==(0|0);
     if ($34) {
      $ret$0 = 0;
      break;
     }
     $35 = (_BN_ucmp($23,$10)|0);
     $36 = ($35|0)>(-1);
     if ($36) {
      _ERR_put_error(16,103,102,88618,401);
      $ret$0 = 0;
      break;
     }
     $37 = ($4|0)==(6);
     do {
      if ($37) {
       $38 = ((($23)) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)>(0);
       if ($40) {
        $43 = HEAP32[$23>>2]|0;
        $44 = HEAP32[$43>>2]|0;
        $45 = $44 & 1;
        $46 = ($45|0)!=(0);
        $47 = $1 & 1;
        $48 = ($47<<24>>24)!=(0);
        $49 = $48 ^ $46;
        if (!($49)) {
         break;
        }
       } else {
        $41 = $1 & 1;
        $42 = ($41<<24>>24)==(0);
        if ($42) {
         break;
        }
       }
       _ERR_put_error(16,103,102,88618,406);
       $ret$0 = 0;
       break L29;
      }
     } while(0);
     $50 = (_EC_POINT_set_affine_coordinates_GFp($group,$point,$22,$23,$$010)|0);
     $51 = ($50|0)==(0);
     if ($51) {
      $ret$0 = 0;
      break;
     }
    }
    $52 = (_EC_POINT_is_on_curve($group,$point,$$010)|0);
    $53 = ($52|0)<(1);
    if ($53) {
     _ERR_put_error(16,103,107,88618,417);
     $ret$0 = 0;
    } else {
     $ret$0 = 1;
    }
   }
  }
 } while(0);
 _BN_CTX_end($$010);
 $54 = ($new_ctx$0|0)==(0|0);
 if ($54) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _ec_GFp_simple_group_init($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 72|0);
 _BN_init($0);
 $1 = ((($group)) + 116|0);
 _BN_init($1);
 $2 = ((($group)) + 136|0);
 _BN_init($2);
 $3 = ((($group)) + 156|0);
 HEAP32[$3>>2] = 0;
 return 1;
}
function _ec_GFp_simple_group_finish($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 72|0);
 _BN_free($0);
 $1 = ((($group)) + 116|0);
 _BN_free($1);
 $2 = ((($group)) + 136|0);
 _BN_free($2);
 return;
}
function _ec_GFp_simple_group_clear_finish($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 72|0);
 _BN_clear_free($0);
 $1 = ((($group)) + 116|0);
 _BN_clear_free($1);
 $2 = ((($group)) + 136|0);
 _BN_clear_free($2);
 return;
}
function _ec_GFp_simple_group_copy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dest)) + 72|0);
 $1 = ((($src)) + 72|0);
 $2 = (_BN_copy($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($dest)) + 116|0);
 $5 = ((($src)) + 116|0);
 $6 = (_BN_copy($4,$5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($dest)) + 136|0);
 $9 = ((($src)) + 136|0);
 $10 = (_BN_copy($8,$9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($src)) + 156|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($dest)) + 156|0);
 HEAP32[$14>>2] = $13;
 $$0 = 1;
 return ($$0|0);
}
function _ec_GFp_simple_group_set_curve($group,$p,$a,$b,$ctx) {
 $group = $group|0;
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_ctx$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_num_bits($p)|0);
 $1 = ($0|0)<(3);
 if (!($1)) {
  $2 = ((($p)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(0);
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 & 1;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = ($ctx|0)==(0|0);
    if ($9) {
     $10 = (_BN_CTX_new()|0);
     $11 = ($10|0)==(0|0);
     if ($11) {
      $$0 = 0;
      return ($$0|0);
     } else {
      $$01 = $10;$new_ctx$0 = $10;
     }
    } else {
     $$01 = $ctx;$new_ctx$0 = 0;
    }
    _BN_CTX_start($$01);
    $12 = (_BN_CTX_get($$01)|0);
    $13 = ($12|0)==(0|0);
    do {
     if ($13) {
      $ret$0 = 0;
     } else {
      $14 = ((($group)) + 72|0);
      $15 = (_BN_copy($14,$p)|0);
      $16 = ($15|0)==(0|0);
      if ($16) {
       $ret$0 = 0;
      } else {
       _BN_set_negative($14,0);
       $17 = (_BN_nnmod($12,$a,$p,$$01)|0);
       $18 = ($17|0)==(0);
       if ($18) {
        $ret$0 = 0;
       } else {
        $19 = HEAP32[$group>>2]|0;
        $20 = ((($19)) + 144|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = ($21|0)==(0|0);
        $23 = ((($group)) + 116|0);
        if ($22) {
         $26 = (_BN_copy($23,$12)|0);
         $27 = ($26|0)==(0|0);
         if ($27) {
          $ret$0 = 0;
          break;
         }
        } else {
         $24 = (FUNCTION_TABLE_iiiii[$21 & 127]($group,$23,$12,$$01)|0);
         $25 = ($24|0)==(0);
         if ($25) {
          $ret$0 = 0;
          break;
         }
        }
        $28 = ((($group)) + 136|0);
        $29 = (_BN_nnmod($28,$b,$p,$$01)|0);
        $30 = ($29|0)==(0);
        if ($30) {
         $ret$0 = 0;
        } else {
         $31 = HEAP32[$group>>2]|0;
         $32 = ((($31)) + 144|0);
         $33 = HEAP32[$32>>2]|0;
         $34 = ($33|0)==(0|0);
         if (!($34)) {
          $35 = (FUNCTION_TABLE_iiiii[$33 & 127]($group,$28,$28,$$01)|0);
          $36 = ($35|0)==(0);
          if ($36) {
           $ret$0 = 0;
           break;
          }
         }
         $37 = (_BN_add_word($12,3)|0);
         $38 = ($37|0)==(0);
         if ($38) {
          $ret$0 = 0;
         } else {
          $39 = (_BN_cmp($12,$14)|0);
          $40 = ($39|0)==(0);
          $41 = $40&1;
          $42 = ((($group)) + 156|0);
          HEAP32[$42>>2] = $41;
          $ret$0 = 1;
         }
        }
       }
      }
     }
    } while(0);
    _BN_CTX_end($$01);
    $43 = ($new_ctx$0|0)==(0|0);
    if ($43) {
     $$0 = $ret$0;
     return ($$0|0);
    }
    _BN_CTX_free($new_ctx$0);
    $$0 = $ret$0;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(16,166,103,88628,186);
 $$0 = 0;
 return ($$0|0);
}
function _ec_GFp_simple_group_get_curve($group,$p,$a,$b,$ctx) {
 $group = $group|0;
 $p = $p|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_ctx$0 = 0, $new_ctx$1 = 0, $new_ctx$2 = 0, $or$cond = 0, $ret$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if (!($0)) {
  $1 = ((($group)) + 72|0);
  $2 = (_BN_copy($p,$1)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$02 = 0;
   return ($$02|0);
  }
 }
 $4 = ($a|0)!=(0|0);
 $5 = ($b|0)!=(0|0);
 $or$cond = $4 | $5;
 do {
  if ($or$cond) {
   $6 = HEAP32[$group>>2]|0;
   $7 = ((($6)) + 148|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    if ($4) {
     $25 = ((($group)) + 116|0);
     $26 = (_BN_copy($a,$25)|0);
     $27 = ($26|0)==(0|0);
     if ($27) {
      $$02 = 0;
      return ($$02|0);
     }
    }
    if (!($5)) {
     $new_ctx$1 = 0;
     label = 15;
     break;
    }
    $28 = ((($group)) + 136|0);
    $29 = (_BN_copy($b,$28)|0);
    $30 = ($29|0)==(0|0);
    if ($30) {
     $$02 = 0;
    } else {
     $new_ctx$1 = 0;
     label = 15;
     break;
    }
    return ($$02|0);
   }
   $10 = ($ctx|0)==(0|0);
   if ($10) {
    $11 = (_BN_CTX_new()|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$02 = 0;
     return ($$02|0);
    } else {
     $$0 = $11;$new_ctx$0 = $11;
    }
   } else {
    $$0 = $ctx;$new_ctx$0 = 0;
   }
   if ($4) {
    $13 = HEAP32[$group>>2]|0;
    $14 = ((($13)) + 148|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($group)) + 116|0);
    $17 = (FUNCTION_TABLE_iiiii[$15 & 127]($group,$a,$16,$$0)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $new_ctx$2 = $new_ctx$0;$ret$0 = 0;
     break;
    }
   }
   if ($5) {
    $19 = HEAP32[$group>>2]|0;
    $20 = ((($19)) + 148|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($group)) + 136|0);
    $23 = (FUNCTION_TABLE_iiiii[$21 & 127]($group,$b,$22,$$0)|0);
    $24 = ($23|0)==(0);
    if ($24) {
     $new_ctx$2 = $new_ctx$0;$ret$0 = 0;
    } else {
     $new_ctx$1 = $new_ctx$0;
     label = 15;
    }
   } else {
    $new_ctx$1 = $new_ctx$0;
    label = 15;
   }
  } else {
   $new_ctx$1 = 0;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $new_ctx$2 = $new_ctx$1;$ret$0 = 1;
 }
 $31 = ($new_ctx$2|0)==(0|0);
 if ($31) {
  $$02 = $ret$0;
  return ($$02|0);
 }
 _BN_CTX_free($new_ctx$2);
 $$02 = $ret$0;
 return ($$02|0);
}
function _ec_GFp_simple_group_get_degree($group) {
 $group = $group|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 72|0);
 $1 = (_BN_num_bits($0)|0);
 return ($1|0);
}
function _ec_GFp_simple_group_check_discriminant($group,$ctx) {
 $group = $group|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_ctx$0 = 0, $ret$01 = 0, $ret$028 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($group)) + 72|0);
 $1 = ($ctx|0)==(0|0);
 if ($1) {
  $2 = (_BN_CTX_new()|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   _ERR_put_error(16,165,65,88628,298);
   $ret$028 = 0;
   return ($ret$028|0);
  } else {
   $$0 = $2;$new_ctx$0 = $2;
  }
 } else {
  $$0 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$0);
 $4 = (_BN_CTX_get($$0)|0);
 $5 = (_BN_CTX_get($$0)|0);
 $6 = (_BN_CTX_get($$0)|0);
 $7 = (_BN_CTX_get($$0)|0);
 $8 = (_BN_CTX_get($$0)|0);
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $ret$01 = 0;
  } else {
   $10 = HEAP32[$group>>2]|0;
   $11 = ((($10)) + 148|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   $14 = ((($group)) + 116|0);
   if ($13) {
    $23 = (_BN_copy($4,$14)|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     $ret$01 = 0;
     break;
    }
    $25 = ((($group)) + 136|0);
    $26 = (_BN_copy($5,$25)|0);
    $27 = ($26|0)==(0|0);
    if ($27) {
     $ret$01 = 0;
     break;
    }
   } else {
    $15 = (FUNCTION_TABLE_iiiii[$12 & 127]($group,$4,$14,$$0)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $ret$01 = 0;
     break;
    }
    $17 = HEAP32[$group>>2]|0;
    $18 = ((($17)) + 148|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($group)) + 136|0);
    $21 = (FUNCTION_TABLE_iiiii[$19 & 127]($group,$5,$20,$$0)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $ret$01 = 0;
     break;
    }
   }
   $28 = ((($4)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   $31 = ((($5)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if ($30) {
    if ($33) {
     $ret$01 = 0;
     break;
    }
   } else {
    if (!($33)) {
     $34 = (_BN_mod_sqr($6,$4,$0,$$0)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $ret$01 = 0;
      break;
     }
     $36 = (_BN_mod_mul($7,$6,$4,$0,$$0)|0);
     $37 = ($36|0)==(0);
     if ($37) {
      $ret$01 = 0;
      break;
     }
     $38 = (_BN_lshift($6,$7,2)|0);
     $39 = ($38|0)==(0);
     if ($39) {
      $ret$01 = 0;
      break;
     }
     $40 = (_BN_mod_sqr($7,$5,$0,$$0)|0);
     $41 = ($40|0)==(0);
     if ($41) {
      $ret$01 = 0;
      break;
     }
     $42 = (_BN_mul_word($7,27)|0);
     $43 = ($42|0)==(0);
     if ($43) {
      $ret$01 = 0;
      break;
     }
     $44 = (_BN_mod_add($4,$6,$7,$0,$$0)|0);
     $45 = ($44|0)==(0);
     if ($45) {
      $ret$01 = 0;
      break;
     }
     $46 = HEAP32[$28>>2]|0;
     $47 = ($46|0)==(0);
     if ($47) {
      $ret$01 = 0;
      break;
     }
    }
   }
   $ret$01 = 1;
  }
 } while(0);
 _BN_CTX_end($$0);
 $48 = ($new_ctx$0|0)==(0|0);
 if ($48) {
  $ret$028 = $ret$01;
  return ($ret$028|0);
 }
 _BN_CTX_free($new_ctx$0);
 $ret$028 = $ret$01;
 return ($ret$028|0);
}
function _ec_GFp_simple_point_init($point) {
 $point = $point|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($point)) + 4|0);
 _BN_init($0);
 $1 = ((($point)) + 24|0);
 _BN_init($1);
 $2 = ((($point)) + 44|0);
 _BN_init($2);
 $3 = ((($point)) + 64|0);
 HEAP32[$3>>2] = 0;
 return 1;
}
function _ec_GFp_simple_point_finish($point) {
 $point = $point|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($point)) + 4|0);
 _BN_free($0);
 $1 = ((($point)) + 24|0);
 _BN_free($1);
 $2 = ((($point)) + 44|0);
 _BN_free($2);
 return;
}
function _ec_GFp_simple_point_clear_finish($point) {
 $point = $point|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($point)) + 4|0);
 _BN_clear_free($0);
 $1 = ((($point)) + 24|0);
 _BN_clear_free($1);
 $2 = ((($point)) + 44|0);
 _BN_clear_free($2);
 $3 = ((($point)) + 64|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _ec_GFp_simple_point_copy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dest)) + 4|0);
 $1 = ((($src)) + 4|0);
 $2 = (_BN_copy($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($dest)) + 24|0);
 $5 = ((($src)) + 24|0);
 $6 = (_BN_copy($4,$5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($dest)) + 44|0);
 $9 = ((($src)) + 44|0);
 $10 = (_BN_copy($8,$9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($src)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($dest)) + 64|0);
 HEAP32[$14>>2] = $13;
 $$0 = 1;
 return ($$0|0);
}
function _ec_GFp_simple_point_set_to_infinity($group,$point) {
 $group = $group|0;
 $point = $point|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($point)) + 64|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($point)) + 44|0);
 (_BN_set_word($1,0)|0);
 return 1;
}
function _ec_GFp_simple_set_Jprojective_coordinates_GFp($group,$point,$x,$y,$z,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_ctx$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if ($0) {
  $1 = (_BN_CTX_new()|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $1;$new_ctx$0 = $1;
  }
 } else {
  $$01 = $ctx;$new_ctx$0 = 0;
 }
 $3 = ($x|0)==(0|0);
 if ($3) {
  label = 7;
 } else {
  $4 = ((($point)) + 4|0);
  $5 = ((($group)) + 72|0);
  $6 = (_BN_nnmod($4,$x,$5,$$01)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $ret$0 = 0;
  } else {
   $8 = HEAP32[$group>>2]|0;
   $9 = ((($8)) + 144|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    label = 7;
   } else {
    $12 = (FUNCTION_TABLE_iiiii[$10 & 127]($group,$4,$4,$$01)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $ret$0 = 0;
    } else {
     label = 7;
    }
   }
  }
 }
 L9: do {
  if ((label|0) == 7) {
   $14 = ($y|0)==(0|0);
   if (!($14)) {
    $15 = ((($point)) + 24|0);
    $16 = ((($group)) + 72|0);
    $17 = (_BN_nnmod($15,$y,$16,$$01)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $ret$0 = 0;
     break;
    }
    $19 = HEAP32[$group>>2]|0;
    $20 = ((($19)) + 144|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $23 = (FUNCTION_TABLE_iiiii[$21 & 127]($group,$15,$15,$$01)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $ret$0 = 0;
      break;
     }
    }
   }
   $25 = ($z|0)==(0|0);
   if ($25) {
    $ret$0 = 1;
   } else {
    $26 = ((($point)) + 44|0);
    $27 = ((($group)) + 72|0);
    $28 = (_BN_nnmod($26,$z,$27,$$01)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $ret$0 = 0;
    } else {
     $30 = ((($point)) + 48|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==(1);
     if ($32) {
      $33 = HEAP32[$26>>2]|0;
      $34 = HEAP32[$33>>2]|0;
      $35 = ($34|0)==(1);
      if ($35) {
       $36 = ((($point)) + 56|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(0);
       $40 = $38;
      } else {
       $40 = 0;
      }
     } else {
      $40 = 0;
     }
     $39 = $40&1;
     $41 = HEAP32[$group>>2]|0;
     $42 = ((($41)) + 144|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     do {
      if (!($44)) {
       if ($40) {
        $45 = ((($41)) + 152|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ($46|0)==(0|0);
        if (!($47)) {
         $48 = (FUNCTION_TABLE_iiii[$46 & 63]($group,$26,$$01)|0);
         $49 = ($48|0)==(0);
         if ($49) {
          $ret$0 = 0;
          break L9;
         } else {
          break;
         }
        }
       }
       $50 = (FUNCTION_TABLE_iiiii[$43 & 127]($group,$26,$26,$$01)|0);
       $51 = ($50|0)==(0);
       if ($51) {
        $ret$0 = 0;
        break L9;
       }
      }
     } while(0);
     $52 = ((($point)) + 64|0);
     HEAP32[$52>>2] = $39;
     $ret$0 = 1;
    }
   }
  }
 } while(0);
 $53 = ($new_ctx$0|0)==(0|0);
 if ($53) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _ec_GFp_simple_get_Jprojective_coordinates_GFp($group,$point,$x,$y,$z,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $new_ctx$0 = 0, $new_ctx$1 = 0, $new_ctx$2 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$group>>2]|0;
 $1 = ((($0)) + 148|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $28 = ($x|0)==(0|0);
   if (!($28)) {
    $29 = ((($point)) + 4|0);
    $30 = (_BN_copy($x,$29)|0);
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$01 = 0;
     return ($$01|0);
    }
   }
   $32 = ($y|0)==(0|0);
   if (!($32)) {
    $33 = ((($point)) + 24|0);
    $34 = (_BN_copy($y,$33)|0);
    $35 = ($34|0)==(0|0);
    if ($35) {
     $$01 = 0;
     return ($$01|0);
    }
   }
   $36 = ($z|0)==(0|0);
   if ($36) {
    $new_ctx$1 = 0;
    label = 16;
   } else {
    $37 = ((($point)) + 44|0);
    $38 = (_BN_copy($z,$37)|0);
    $39 = ($38|0)==(0|0);
    if ($39) {
     $$01 = 0;
     return ($$01|0);
    } else {
     $new_ctx$1 = 0;
     label = 16;
    }
   }
  } else {
   $4 = ($ctx|0)==(0|0);
   if ($4) {
    $5 = (_BN_CTX_new()|0);
    $6 = ($5|0)==(0|0);
    if ($6) {
     $$01 = 0;
     return ($$01|0);
    } else {
     $$0 = $5;$new_ctx$0 = $5;
    }
   } else {
    $$0 = $ctx;$new_ctx$0 = 0;
   }
   $7 = ($x|0)==(0|0);
   if (!($7)) {
    $8 = HEAP32[$group>>2]|0;
    $9 = ((($8)) + 148|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($point)) + 4|0);
    $12 = (FUNCTION_TABLE_iiiii[$10 & 127]($group,$x,$11,$$0)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $new_ctx$2 = $new_ctx$0;$ret$0 = 0;
     break;
    }
   }
   $14 = ($y|0)==(0|0);
   if (!($14)) {
    $15 = HEAP32[$group>>2]|0;
    $16 = ((($15)) + 148|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($point)) + 24|0);
    $19 = (FUNCTION_TABLE_iiiii[$17 & 127]($group,$y,$18,$$0)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $new_ctx$2 = $new_ctx$0;$ret$0 = 0;
     break;
    }
   }
   $21 = ($z|0)==(0|0);
   if ($21) {
    $new_ctx$1 = $new_ctx$0;
    label = 16;
   } else {
    $22 = HEAP32[$group>>2]|0;
    $23 = ((($22)) + 148|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($point)) + 44|0);
    $26 = (FUNCTION_TABLE_iiiii[$24 & 127]($group,$z,$25,$$0)|0);
    $27 = ($26|0)==(0);
    if ($27) {
     $new_ctx$2 = $new_ctx$0;$ret$0 = 0;
    } else {
     $new_ctx$1 = $new_ctx$0;
     label = 16;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $new_ctx$2 = $new_ctx$1;$ret$0 = 1;
 }
 $40 = ($new_ctx$2|0)==(0|0);
 if ($40) {
  $$01 = $ret$0;
  return ($$01|0);
 }
 _BN_CTX_free($new_ctx$2);
 $$01 = $ret$0;
 return ($$01|0);
}
function _ec_GFp_simple_point_set_affine_coordinates($group,$point,$x,$y,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x = $x|0;
 $y = $y|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x|0)==(0|0);
 $1 = ($y|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  _ERR_put_error(16,168,67,88628,528);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = (_BN_value_one()|0);
  $3 = (_EC_POINT_set_Jprojective_coordinates_GFp($group,$point,$x,$y,$2,$ctx)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _ec_GFp_simple_point_get_affine_coordinates($group,$point,$x,$y,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $x = $x|0;
 $y = $y|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $Z_$0 = 0, $new_ctx$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_POINT_is_at_infinity($group,$point)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _ERR_put_error(16,167,106,88628,548);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($ctx|0)==(0|0);
 if ($2) {
  $3 = (_BN_CTX_new()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $3;$new_ctx$0 = $3;
  }
 } else {
  $$01 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$01);
 $5 = (_BN_CTX_get($$01)|0);
 $6 = (_BN_CTX_get($$01)|0);
 $7 = (_BN_CTX_get($$01)|0);
 $8 = (_BN_CTX_get($$01)|0);
 $9 = ($8|0)==(0|0);
 L9: do {
  if ($9) {
   $ret$0 = 0;
  } else {
   $10 = HEAP32[$group>>2]|0;
   $11 = ((($10)) + 148|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   $14 = ((($point)) + 44|0);
   if ($13) {
    $Z_$0 = $14;
   } else {
    $15 = (FUNCTION_TABLE_iiiii[$12 & 127]($group,$5,$14,$$01)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $ret$0 = 0;
     break;
    } else {
     $Z_$0 = $5;
    }
   }
   $17 = ((($Z_$0)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(1);
   do {
    if ($19) {
     $20 = HEAP32[$Z_$0>>2]|0;
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(1);
     if ($22) {
      $23 = ((($Z_$0)) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0);
      if ($25) {
       $26 = HEAP32[$group>>2]|0;
       $27 = ((($26)) + 148|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)==(0|0);
       $30 = ($x|0)!=(0|0);
       if ($29) {
        if ($30) {
         $41 = ((($point)) + 4|0);
         $42 = (_BN_copy($x,$41)|0);
         $43 = ($42|0)==(0|0);
         if ($43) {
          $ret$0 = 0;
          break L9;
         }
        }
        $44 = ($y|0)==(0|0);
        if ($44) {
         break;
        }
        $45 = ((($point)) + 24|0);
        $46 = (_BN_copy($y,$45)|0);
        $47 = ($46|0)==(0|0);
        if ($47) {
         $ret$0 = 0;
         break L9;
        } else {
         break;
        }
       } else {
        if ($30) {
         $31 = ((($point)) + 4|0);
         $32 = (FUNCTION_TABLE_iiiii[$28 & 127]($group,$x,$31,$$01)|0);
         $33 = ($32|0)==(0);
         if ($33) {
          $ret$0 = 0;
          break L9;
         }
        }
        $34 = ($y|0)==(0|0);
        if ($34) {
         break;
        }
        $35 = HEAP32[$group>>2]|0;
        $36 = ((($35)) + 148|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = ((($point)) + 24|0);
        $39 = (FUNCTION_TABLE_iiiii[$37 & 127]($group,$y,$38,$$01)|0);
        $40 = ($39|0)==(0);
        if ($40) {
         $ret$0 = 0;
         break L9;
        } else {
         break;
        }
       }
      } else {
       label = 20;
      }
     } else {
      label = 20;
     }
    } else {
     label = 20;
    }
   } while(0);
   if ((label|0) == 20) {
    $48 = ((($group)) + 72|0);
    $49 = (_BN_mod_inverse($6,$Z_$0,$48,$$01)|0);
    $50 = ($49|0)==(0|0);
    if ($50) {
     _ERR_put_error(16,167,3,88628,599);
     $ret$0 = 0;
     break;
    }
    $51 = HEAP32[$group>>2]|0;
    $52 = ((($51)) + 144|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(0|0);
    if ($54) {
     $55 = ((($51)) + 136|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = (FUNCTION_TABLE_iiiii[$56 & 127]($group,$7,$6,$$01)|0);
     $58 = ($57|0)==(0);
     if ($58) {
      $ret$0 = 0;
      break;
     }
    } else {
     $59 = (_BN_mod_sqr($7,$6,$48,$$01)|0);
     $60 = ($59|0)==(0);
     if ($60) {
      $ret$0 = 0;
      break;
     }
    }
    $61 = ($x|0)==(0|0);
    if (!($61)) {
     $62 = HEAP32[$group>>2]|0;
     $63 = ((($62)) + 132|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($point)) + 4|0);
     $66 = (FUNCTION_TABLE_iiiiii[$64 & 63]($group,$x,$65,$7,$$01)|0);
     $67 = ($66|0)==(0);
     if ($67) {
      $ret$0 = 0;
      break;
     }
    }
    $68 = ($y|0)==(0|0);
    if (!($68)) {
     $69 = HEAP32[$group>>2]|0;
     $70 = ((($69)) + 144|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)==(0|0);
     if ($72) {
      $73 = ((($69)) + 132|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (FUNCTION_TABLE_iiiiii[$74 & 63]($group,$8,$7,$6,$$01)|0);
      $76 = ($75|0)==(0);
      if ($76) {
       $ret$0 = 0;
       break;
      }
     } else {
      $77 = (_BN_mod_mul($8,$7,$6,$48,$$01)|0);
      $78 = ($77|0)==(0);
      if ($78) {
       $ret$0 = 0;
       break;
      }
     }
     $79 = HEAP32[$group>>2]|0;
     $80 = ((($79)) + 132|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ((($point)) + 24|0);
     $83 = (FUNCTION_TABLE_iiiiii[$81 & 63]($group,$y,$82,$8,$$01)|0);
     $84 = ($83|0)==(0);
     if ($84) {
      $ret$0 = 0;
      break;
     }
    }
   }
   $ret$0 = 1;
  }
 } while(0);
 _BN_CTX_end($$01);
 $85 = ($new_ctx$0|0)==(0|0);
 if ($85) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _ec_GFp_simple_add($group,$r,$a,$b,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $new_ctx$0 = 0, $not$ = 0, $phitmp = 0;
 var $ret$0$ph = 0, $ret$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==($b|0);
 if ($0) {
  $1 = (_EC_POINT_dbl($group,$r,$a,$ctx)|0);
  $$0 = $1;
  return ($$0|0);
 }
 $2 = (_EC_POINT_is_at_infinity($group,$a)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (_EC_POINT_copy($r,$b)|0);
  $$0 = $4;
  return ($$0|0);
 }
 $5 = (_EC_POINT_is_at_infinity($group,$b)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = (_EC_POINT_copy($r,$a)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $8 = HEAP32[$group>>2]|0;
 $9 = ((($8)) + 132|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($8)) + 136|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($group)) + 72|0);
 $14 = ($ctx|0)==(0|0);
 if ($14) {
  $15 = (_BN_CTX_new()|0);
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $15;$new_ctx$0 = $15;
  }
 } else {
  $$01 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$01);
 $17 = (_BN_CTX_get($$01)|0);
 $18 = (_BN_CTX_get($$01)|0);
 $19 = (_BN_CTX_get($$01)|0);
 $20 = (_BN_CTX_get($$01)|0);
 $21 = (_BN_CTX_get($$01)|0);
 $22 = (_BN_CTX_get($$01)|0);
 $23 = (_BN_CTX_get($$01)|0);
 $24 = ($23|0)==(0|0);
 L17: do {
  if ($24) {
   $ret$0$ph = 0;
   label = 54;
  } else {
   $25 = ((($b)) + 64|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $34 = ((($b)) + 44|0);
    $35 = (FUNCTION_TABLE_iiiii[$12 & 127]($group,$17,$34,$$01)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
    $37 = ((($a)) + 4|0);
    $38 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$18,$37,$17,$$01)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
    $40 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$17,$17,$34,$$01)|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
    $42 = ((($a)) + 24|0);
    $43 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$19,$42,$17,$$01)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
   } else {
    $28 = ((($a)) + 4|0);
    $29 = (_BN_copy($18,$28)|0);
    $30 = ($29|0)==(0|0);
    if ($30) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
    $31 = ((($a)) + 24|0);
    $32 = (_BN_copy($19,$31)|0);
    $33 = ($32|0)==(0|0);
    if ($33) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
   }
   $45 = ((($a)) + 64|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0);
   if ($47) {
    $54 = ((($a)) + 44|0);
    $55 = (FUNCTION_TABLE_iiiii[$12 & 127]($group,$17,$54,$$01)|0);
    $56 = ($55|0)==(0);
    if ($56) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
    $57 = ((($b)) + 4|0);
    $58 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$20,$57,$17,$$01)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
    $60 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$17,$17,$54,$$01)|0);
    $61 = ($60|0)==(0);
    if ($61) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
    $62 = ((($b)) + 24|0);
    $63 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$21,$62,$17,$$01)|0);
    $64 = ($63|0)==(0);
    if ($64) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
   } else {
    $48 = ((($b)) + 4|0);
    $49 = (_BN_copy($20,$48)|0);
    $50 = ($49|0)==(0|0);
    if ($50) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
    $51 = ((($b)) + 24|0);
    $52 = (_BN_copy($21,$51)|0);
    $53 = ($52|0)==(0|0);
    if ($53) {
     $ret$0$ph = 0;
     label = 54;
     break;
    }
   }
   $65 = (_BN_mod_sub_quick($22,$18,$20,$13)|0);
   $66 = ($65|0)==(0);
   if ($66) {
    $ret$0$ph = 0;
    label = 54;
   } else {
    $67 = (_BN_mod_sub_quick($23,$19,$21,$13)|0);
    $68 = ($67|0)==(0);
    if ($68) {
     $ret$0$ph = 0;
     label = 54;
    } else {
     $69 = ((($22)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(0);
     if ($71) {
      $72 = ((($23)) + 4|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)==(0);
      if ($74) {
       _BN_CTX_end($$01);
       $131 = (_EC_POINT_dbl($group,$r,$a,$$01)|0);
       $ret$05 = $131;
       break;
      } else {
       $75 = ((($r)) + 44|0);
       (_BN_set_word($75,0)|0);
       $76 = ((($r)) + 64|0);
       HEAP32[$76>>2] = 0;
       $ret$0$ph = 1;
       label = 54;
       break;
      }
     }
     $77 = (_BN_mod_add_quick($18,$18,$20,$13)|0);
     $78 = ($77|0)==(0);
     if ($78) {
      $ret$0$ph = 0;
      label = 54;
     } else {
      $79 = (_BN_mod_add_quick($19,$19,$21,$13)|0);
      $80 = ($79|0)==(0);
      if ($80) {
       $ret$0$ph = 0;
       label = 54;
      } else {
       $81 = HEAP32[$45>>2]|0;
       $82 = ($81|0)==(0);
       $$pre = HEAP32[$25>>2]|0;
       $phitmp = ($$pre|0)==(0);
       do {
        if ($82) {
         $89 = ((($a)) + 44|0);
         if ($phitmp) {
          $92 = ((($b)) + 44|0);
          $93 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$17,$89,$92,$$01)|0);
          $94 = ($93|0)==(0);
          if ($94) {
           $ret$0$ph = 0;
           label = 54;
           break L17;
          } else {
           label = 38;
           break;
          }
         } else {
          $90 = (_BN_copy($17,$89)|0);
          $91 = ($90|0)==(0|0);
          if ($91) {
           $ret$0$ph = 0;
           label = 54;
           break L17;
          } else {
           label = 38;
           break;
          }
         }
        } else {
         if ($phitmp) {
          $86 = ((($b)) + 44|0);
          $87 = (_BN_copy($17,$86)|0);
          $88 = ($87|0)==(0|0);
          if ($88) {
           $ret$0$ph = 0;
           label = 54;
           break L17;
          } else {
           label = 38;
           break;
          }
         } else {
          $83 = ((($r)) + 44|0);
          $84 = (_BN_copy($83,$22)|0);
          $85 = ($84|0)==(0|0);
          if ($85) {
           $ret$0$ph = 0;
           label = 54;
           break L17;
          } else {
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 38) {
        $95 = ((($r)) + 44|0);
        $96 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$95,$17,$22,$$01)|0);
        $97 = ($96|0)==(0);
        if ($97) {
         $ret$0$ph = 0;
         label = 54;
         break;
        }
       }
       $98 = ((($r)) + 64|0);
       HEAP32[$98>>2] = 0;
       $99 = (FUNCTION_TABLE_iiiii[$12 & 127]($group,$17,$23,$$01)|0);
       $100 = ($99|0)==(0);
       if ($100) {
        $ret$0$ph = 0;
        label = 54;
       } else {
        $101 = (FUNCTION_TABLE_iiiii[$12 & 127]($group,$21,$22,$$01)|0);
        $102 = ($101|0)==(0);
        if ($102) {
         $ret$0$ph = 0;
         label = 54;
        } else {
         $103 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$20,$18,$21,$$01)|0);
         $104 = ($103|0)==(0);
         if ($104) {
          $ret$0$ph = 0;
          label = 54;
         } else {
          $105 = ((($r)) + 4|0);
          $106 = (_BN_mod_sub_quick($105,$17,$20,$13)|0);
          $107 = ($106|0)==(0);
          if ($107) {
           $ret$0$ph = 0;
           label = 54;
          } else {
           $108 = (_BN_mod_lshift1_quick($17,$105,$13)|0);
           $109 = ($108|0)==(0);
           if ($109) {
            $ret$0$ph = 0;
            label = 54;
           } else {
            $110 = (_BN_mod_sub_quick($17,$20,$17,$13)|0);
            $111 = ($110|0)==(0);
            if ($111) {
             $ret$0$ph = 0;
             label = 54;
            } else {
             $112 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$17,$17,$23,$$01)|0);
             $113 = ($112|0)==(0);
             if ($113) {
              $ret$0$ph = 0;
              label = 54;
              break;
             }
             $114 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$22,$21,$22,$$01)|0);
             $115 = ($114|0)==(0);
             if ($115) {
              $ret$0$ph = 0;
              label = 54;
              break;
             }
             $116 = (FUNCTION_TABLE_iiiiii[$10 & 63]($group,$18,$19,$22,$$01)|0);
             $117 = ($116|0)==(0);
             if ($117) {
              $ret$0$ph = 0;
              label = 54;
              break;
             }
             $118 = (_BN_mod_sub_quick($17,$17,$18,$13)|0);
             $119 = ($118|0)==(0);
             if ($119) {
              $ret$0$ph = 0;
              label = 54;
              break;
             }
             $120 = ((($17)) + 4|0);
             $121 = HEAP32[$120>>2]|0;
             $122 = ($121|0)>(0);
             do {
              if ($122) {
               $123 = HEAP32[$17>>2]|0;
               $124 = HEAP32[$123>>2]|0;
               $125 = $124 & 1;
               $126 = ($125|0)==(0);
               if ($126) {
                break;
               }
               $127 = (_BN_add($17,$17,$13)|0);
               $128 = ($127|0)==(0);
               if ($128) {
                $ret$0$ph = 0;
                label = 54;
                break L17;
               }
              }
             } while(0);
             $129 = ((($r)) + 24|0);
             $130 = (_BN_rshift1($129,$17)|0);
             $not$ = ($130|0)!=(0);
             $$ = $not$&1;
             $ret$0$ph = $$;
             label = 54;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 54) {
  _BN_CTX_end($$01);
  $ret$05 = $ret$0$ph;
 }
 $132 = ($new_ctx$0|0)==(0|0);
 if ($132) {
  $$0 = $ret$05;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$05;
 return ($$0|0);
}
function _ec_GFp_simple_dbl($group,$r,$a,$ctx) {
 $group = $group|0;
 $r = $r|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $new_ctx$0 = 0, $not$ = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_POINT_is_at_infinity($group,$a)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = ((($r)) + 44|0);
  (_BN_set_word($2,0)|0);
  $3 = ((($r)) + 64|0);
  HEAP32[$3>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 $4 = HEAP32[$group>>2]|0;
 $5 = ((($4)) + 132|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 136|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($group)) + 72|0);
 $10 = ($ctx|0)==(0|0);
 if ($10) {
  $11 = (_BN_CTX_new()|0);
  $12 = ($11|0)==(0|0);
  if ($12) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $11;$new_ctx$0 = $11;
  }
 } else {
  $$01 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$01);
 $13 = (_BN_CTX_get($$01)|0);
 $14 = (_BN_CTX_get($$01)|0);
 $15 = (_BN_CTX_get($$01)|0);
 $16 = (_BN_CTX_get($$01)|0);
 $17 = ($16|0)==(0|0);
 L9: do {
  if ($17) {
   $ret$0 = 0;
  } else {
   $18 = ((($a)) + 64|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   do {
    if ($20) {
     $31 = ((($group)) + 156|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0);
     if (!($33)) {
      $34 = ((($a)) + 44|0);
      $35 = (FUNCTION_TABLE_iiiii[$8 & 127]($group,$14,$34,$$01)|0);
      $36 = ($35|0)==(0);
      if ($36) {
       $ret$0 = 0;
       break L9;
      }
      $37 = ((($a)) + 4|0);
      $38 = (_BN_mod_add_quick($13,$37,$14,$9)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       $ret$0 = 0;
       break L9;
      }
      $40 = (_BN_mod_sub_quick($15,$37,$14,$9)|0);
      $41 = ($40|0)==(0);
      if ($41) {
       $ret$0 = 0;
       break L9;
      }
      $42 = (FUNCTION_TABLE_iiiiii[$6 & 63]($group,$14,$13,$15,$$01)|0);
      $43 = ($42|0)==(0);
      if ($43) {
       $ret$0 = 0;
       break L9;
      }
      $44 = (_BN_mod_lshift1_quick($13,$14,$9)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       $ret$0 = 0;
       break L9;
      }
      $46 = (_BN_mod_add_quick($14,$13,$14,$9)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       $ret$0 = 0;
       break L9;
      } else {
       break;
      }
     }
     $48 = ((($a)) + 4|0);
     $49 = (FUNCTION_TABLE_iiiii[$8 & 127]($group,$13,$48,$$01)|0);
     $50 = ($49|0)==(0);
     if ($50) {
      $ret$0 = 0;
      break L9;
     }
     $51 = (_BN_mod_lshift1_quick($14,$13,$9)|0);
     $52 = ($51|0)==(0);
     if ($52) {
      $ret$0 = 0;
      break L9;
     }
     $53 = (_BN_mod_add_quick($13,$13,$14,$9)|0);
     $54 = ($53|0)==(0);
     if ($54) {
      $ret$0 = 0;
      break L9;
     }
     $55 = ((($a)) + 44|0);
     $56 = (FUNCTION_TABLE_iiiii[$8 & 127]($group,$14,$55,$$01)|0);
     $57 = ($56|0)==(0);
     if ($57) {
      $ret$0 = 0;
      break L9;
     }
     $58 = (FUNCTION_TABLE_iiiii[$8 & 127]($group,$14,$14,$$01)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $ret$0 = 0;
      break L9;
     }
     $60 = ((($group)) + 116|0);
     $61 = (FUNCTION_TABLE_iiiiii[$6 & 63]($group,$14,$14,$60,$$01)|0);
     $62 = ($61|0)==(0);
     if ($62) {
      $ret$0 = 0;
      break L9;
     }
     $63 = (_BN_mod_add_quick($14,$14,$13,$9)|0);
     $64 = ($63|0)==(0);
     if ($64) {
      $ret$0 = 0;
      break L9;
     }
    } else {
     $21 = ((($a)) + 4|0);
     $22 = (FUNCTION_TABLE_iiiii[$8 & 127]($group,$13,$21,$$01)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $ret$0 = 0;
      break L9;
     }
     $24 = (_BN_mod_lshift1_quick($14,$13,$9)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      $ret$0 = 0;
      break L9;
     }
     $26 = (_BN_mod_add_quick($13,$13,$14,$9)|0);
     $27 = ($26|0)==(0);
     if ($27) {
      $ret$0 = 0;
      break L9;
     }
     $28 = ((($group)) + 116|0);
     $29 = (_BN_mod_add_quick($14,$13,$28,$9)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      $ret$0 = 0;
      break L9;
     }
    }
   } while(0);
   $65 = HEAP32[$18>>2]|0;
   $66 = ($65|0)==(0);
   $67 = ((($a)) + 24|0);
   if ($66) {
    $70 = ((($a)) + 44|0);
    $71 = (FUNCTION_TABLE_iiiiii[$6 & 63]($group,$13,$67,$70,$$01)|0);
    $72 = ($71|0)==(0);
    if ($72) {
     $ret$0 = 0;
     break;
    }
   } else {
    $68 = (_BN_copy($13,$67)|0);
    $69 = ($68|0)==(0|0);
    if ($69) {
     $ret$0 = 0;
     break;
    }
   }
   $73 = ((($r)) + 44|0);
   $74 = (_BN_mod_lshift1_quick($73,$13,$9)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    $ret$0 = 0;
   } else {
    $76 = ((($r)) + 64|0);
    HEAP32[$76>>2] = 0;
    $77 = (FUNCTION_TABLE_iiiii[$8 & 127]($group,$16,$67,$$01)|0);
    $78 = ($77|0)==(0);
    if ($78) {
     $ret$0 = 0;
    } else {
     $79 = ((($a)) + 4|0);
     $80 = (FUNCTION_TABLE_iiiiii[$6 & 63]($group,$15,$79,$16,$$01)|0);
     $81 = ($80|0)==(0);
     if ($81) {
      $ret$0 = 0;
     } else {
      $82 = (_BN_mod_lshift_quick($15,$15,2,$9)|0);
      $83 = ($82|0)==(0);
      if ($83) {
       $ret$0 = 0;
      } else {
       $84 = (_BN_mod_lshift1_quick($13,$15,$9)|0);
       $85 = ($84|0)==(0);
       if ($85) {
        $ret$0 = 0;
       } else {
        $86 = ((($r)) + 4|0);
        $87 = (FUNCTION_TABLE_iiiii[$8 & 127]($group,$86,$14,$$01)|0);
        $88 = ($87|0)==(0);
        if ($88) {
         $ret$0 = 0;
        } else {
         $89 = (_BN_mod_sub_quick($86,$86,$13,$9)|0);
         $90 = ($89|0)==(0);
         if ($90) {
          $ret$0 = 0;
         } else {
          $91 = (FUNCTION_TABLE_iiiii[$8 & 127]($group,$13,$16,$$01)|0);
          $92 = ($91|0)==(0);
          if ($92) {
           $ret$0 = 0;
          } else {
           $93 = (_BN_mod_lshift_quick($16,$13,3,$9)|0);
           $94 = ($93|0)==(0);
           if ($94) {
            $ret$0 = 0;
           } else {
            $95 = (_BN_mod_sub_quick($13,$15,$86,$9)|0);
            $96 = ($95|0)==(0);
            if ($96) {
             $ret$0 = 0;
            } else {
             $97 = (FUNCTION_TABLE_iiiiii[$6 & 63]($group,$13,$14,$13,$$01)|0);
             $98 = ($97|0)==(0);
             if ($98) {
              $ret$0 = 0;
             } else {
              $99 = ((($r)) + 24|0);
              $100 = (_BN_mod_sub_quick($99,$13,$16,$9)|0);
              $not$ = ($100|0)!=(0);
              $$ = $not$&1;
              $ret$0 = $$;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($$01);
 $101 = ($new_ctx$0|0)==(0|0);
 if ($101) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _ec_GFp_simple_invert($group,$point,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_POINT_is_at_infinity($group,$point)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = ((($point)) + 24|0);
 $3 = ((($point)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = ((($group)) + 72|0);
 $7 = (_BN_usub($2,$6,$2)|0);
 $$0 = $7;
 return ($$0|0);
}
function _ec_GFp_simple_is_at_infinity($group,$point) {
 $group = $group|0;
 $point = $point|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($point)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = $2&1;
 return ($3|0);
}
function _ec_GFp_simple_is_on_curve($group,$point,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $new_ctx$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_POINT_is_at_infinity($group,$point)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = HEAP32[$group>>2]|0;
 $3 = ((($2)) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 136|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($group)) + 72|0);
 $8 = ($ctx|0)==(0|0);
 if ($8) {
  $9 = (_BN_CTX_new()|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0 = -1;
   return ($$0|0);
  } else {
   $$01 = $9;$new_ctx$0 = $9;
  }
 } else {
  $$01 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$01);
 $11 = (_BN_CTX_get($$01)|0);
 $12 = (_BN_CTX_get($$01)|0);
 $13 = (_BN_CTX_get($$01)|0);
 $14 = (_BN_CTX_get($$01)|0);
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   $ret$0 = -1;
  } else {
   $16 = ((($point)) + 4|0);
   $17 = (FUNCTION_TABLE_iiiii[$6 & 127]($group,$11,$16,$$01)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $ret$0 = -1;
   } else {
    $19 = ((($point)) + 64|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = ((($point)) + 44|0);
     $23 = (FUNCTION_TABLE_iiiii[$6 & 127]($group,$12,$22,$$01)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $ret$0 = -1;
      break;
     }
     $25 = (FUNCTION_TABLE_iiiii[$6 & 127]($group,$13,$12,$$01)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      $ret$0 = -1;
      break;
     }
     $27 = (FUNCTION_TABLE_iiiiii[$4 & 63]($group,$14,$13,$12,$$01)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $ret$0 = -1;
      break;
     }
     $29 = ((($group)) + 156|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $40 = ((($group)) + 116|0);
      $41 = (FUNCTION_TABLE_iiiiii[$4 & 63]($group,$12,$13,$40,$$01)|0);
      $42 = ($41|0)==(0);
      if ($42) {
       $ret$0 = -1;
       break;
      }
      $43 = (_BN_mod_add_quick($11,$11,$12,$7)|0);
      $44 = ($43|0)==(0);
      if ($44) {
       $ret$0 = -1;
       break;
      }
      $45 = (FUNCTION_TABLE_iiiiii[$4 & 63]($group,$11,$11,$16,$$01)|0);
      $46 = ($45|0)==(0);
      if ($46) {
       $ret$0 = -1;
       break;
      }
     } else {
      $32 = (_BN_mod_lshift1_quick($12,$13,$7)|0);
      $33 = ($32|0)==(0);
      if ($33) {
       $ret$0 = -1;
       break;
      }
      $34 = (_BN_mod_add_quick($12,$12,$13,$7)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       $ret$0 = -1;
       break;
      }
      $36 = (_BN_mod_sub_quick($11,$11,$12,$7)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       $ret$0 = -1;
       break;
      }
      $38 = (FUNCTION_TABLE_iiiiii[$4 & 63]($group,$11,$11,$16,$$01)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       $ret$0 = -1;
       break;
      }
     }
     $47 = ((($group)) + 136|0);
     $48 = (FUNCTION_TABLE_iiiiii[$4 & 63]($group,$12,$47,$14,$$01)|0);
     $49 = ($48|0)==(0);
     if ($49) {
      $ret$0 = -1;
      break;
     }
     $50 = (_BN_mod_add_quick($11,$11,$12,$7)|0);
     $51 = ($50|0)==(0);
     if ($51) {
      $ret$0 = -1;
      break;
     }
    } else {
     $52 = ((($group)) + 116|0);
     $53 = (_BN_mod_add_quick($11,$11,$52,$7)|0);
     $54 = ($53|0)==(0);
     if ($54) {
      $ret$0 = -1;
      break;
     }
     $55 = (FUNCTION_TABLE_iiiiii[$4 & 63]($group,$11,$11,$16,$$01)|0);
     $56 = ($55|0)==(0);
     if ($56) {
      $ret$0 = -1;
      break;
     }
     $57 = ((($group)) + 136|0);
     $58 = (_BN_mod_add_quick($11,$11,$57,$7)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $ret$0 = -1;
      break;
     }
    }
    $60 = ((($point)) + 24|0);
    $61 = (FUNCTION_TABLE_iiiii[$6 & 127]($group,$12,$60,$$01)|0);
    $62 = ($61|0)==(0);
    if ($62) {
     $ret$0 = -1;
    } else {
     $63 = (_BN_ucmp($12,$11)|0);
     $64 = ($63|0)==(0);
     $65 = $64&1;
     $ret$0 = $65;
    }
   }
  }
 } while(0);
 _BN_CTX_end($$01);
 $66 = ($new_ctx$0|0)==(0|0);
 if ($66) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _ec_GFp_simple_cmp($group,$a,$b,$ctx) {
 $group = $group|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0;
 var $new_ctx$0 = 0, $not$ = 0, $ret$0 = 0, $tmp1_$0 = 0, $tmp1_$1 = 0, $tmp2_$0 = 0, $tmp2_$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_EC_POINT_is_at_infinity($group,$a)|0);
 $1 = ($0|0)==(0);
 $2 = (_EC_POINT_is_at_infinity($group,$b)|0);
 $3 = ($2|0)!=(0);
 if (!($1)) {
  $4 = $3&1;
  $5 = $4 ^ 1;
  $$0 = $5;
  return ($$0|0);
 }
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = ((($a)) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = ((($b)) + 64|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($a)) + 4|0);
   $13 = ((($b)) + 4|0);
   $14 = (_BN_cmp($12,$13)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = ((($a)) + 24|0);
    $17 = ((($b)) + 24|0);
    $18 = (_BN_cmp($16,$17)|0);
    $19 = ($18|0)==(0);
    $21 = $19;
   } else {
    $21 = 0;
   }
   $20 = $21&1;
   $22 = $20 ^ 1;
   $$0 = $22;
   return ($$0|0);
  }
 }
 $23 = HEAP32[$group>>2]|0;
 $24 = ((($23)) + 132|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($23)) + 136|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($ctx|0)==(0|0);
 if ($28) {
  $29 = (_BN_CTX_new()|0);
  $30 = ($29|0)==(0|0);
  if ($30) {
   $$0 = -1;
   return ($$0|0);
  } else {
   $$01 = $29;$new_ctx$0 = $29;
  }
 } else {
  $$01 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$01);
 $31 = (_BN_CTX_get($$01)|0);
 $32 = (_BN_CTX_get($$01)|0);
 $33 = (_BN_CTX_get($$01)|0);
 $34 = (_BN_CTX_get($$01)|0);
 $35 = ($34|0)==(0|0);
 do {
  if ($35) {
   $ret$0 = -1;
  } else {
   $36 = ((($b)) + 64|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($b)) + 44|0);
    $40 = (FUNCTION_TABLE_iiiii[$27 & 127]($group,$34,$39,$$01)|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $ret$0 = -1;
     break;
    }
    $42 = ((($a)) + 4|0);
    $43 = (FUNCTION_TABLE_iiiiii[$25 & 63]($group,$31,$42,$34,$$01)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     $ret$0 = -1;
     break;
    } else {
     $tmp1_$0 = $31;
    }
   } else {
    $45 = ((($a)) + 4|0);
    $tmp1_$0 = $45;
   }
   $46 = HEAP32[$6>>2]|0;
   $47 = ($46|0)==(0);
   if ($47) {
    $48 = ((($a)) + 44|0);
    $49 = (FUNCTION_TABLE_iiiii[$27 & 127]($group,$33,$48,$$01)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     $ret$0 = -1;
     break;
    }
    $51 = ((($b)) + 4|0);
    $52 = (FUNCTION_TABLE_iiiiii[$25 & 63]($group,$32,$51,$33,$$01)|0);
    $53 = ($52|0)==(0);
    if ($53) {
     $ret$0 = -1;
     break;
    } else {
     $tmp2_$0 = $32;
    }
   } else {
    $54 = ((($b)) + 4|0);
    $tmp2_$0 = $54;
   }
   $55 = (_BN_cmp($tmp1_$0,$tmp2_$0)|0);
   $56 = ($55|0)==(0);
   if ($56) {
    $57 = HEAP32[$36>>2]|0;
    $58 = ($57|0)==(0);
    if ($58) {
     $59 = ((($b)) + 44|0);
     $60 = (FUNCTION_TABLE_iiiiii[$25 & 63]($group,$34,$34,$59,$$01)|0);
     $61 = ($60|0)==(0);
     if ($61) {
      $ret$0 = -1;
      break;
     }
     $62 = ((($a)) + 24|0);
     $63 = (FUNCTION_TABLE_iiiiii[$25 & 63]($group,$31,$62,$34,$$01)|0);
     $64 = ($63|0)==(0);
     if ($64) {
      $ret$0 = -1;
      break;
     } else {
      $tmp1_$1 = $tmp1_$0;
     }
    } else {
     $65 = ((($a)) + 24|0);
     $tmp1_$1 = $65;
    }
    $66 = HEAP32[$6>>2]|0;
    $67 = ($66|0)==(0);
    if ($67) {
     $68 = ((($a)) + 44|0);
     $69 = (FUNCTION_TABLE_iiiiii[$25 & 63]($group,$33,$33,$68,$$01)|0);
     $70 = ($69|0)==(0);
     if ($70) {
      $ret$0 = -1;
      break;
     }
     $71 = ((($b)) + 24|0);
     $72 = (FUNCTION_TABLE_iiiiii[$25 & 63]($group,$32,$71,$33,$$01)|0);
     $73 = ($72|0)==(0);
     if ($73) {
      $ret$0 = -1;
      break;
     } else {
      $tmp2_$1 = $tmp2_$0;
     }
    } else {
     $74 = ((($b)) + 24|0);
     $tmp2_$1 = $74;
    }
    $75 = (_BN_cmp($tmp1_$1,$tmp2_$1)|0);
    $not$ = ($75|0)!=(0);
    $$ = $not$&1;
    $ret$0 = $$;
   } else {
    $ret$0 = 1;
   }
  }
 } while(0);
 _BN_CTX_end($$01);
 $76 = ($new_ctx$0|0)==(0|0);
 if ($76) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _ec_GFp_simple_make_affine($group,$point,$ctx) {
 $group = $group|0;
 $point = $point|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $new_ctx$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($point)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = (_EC_POINT_is_at_infinity($group,$point)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ($ctx|0)==(0|0);
 if ($5) {
  $6 = (_BN_CTX_new()|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $6;$new_ctx$0 = $6;
  }
 } else {
  $$01 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$01);
 $8 = (_BN_CTX_get($$01)|0);
 $9 = (_BN_CTX_get($$01)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $ret$0 = 0;
 } else {
  $11 = (_EC_POINT_get_affine_coordinates_GFp($group,$point,$8,$9,$$01)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $ret$0 = 0;
  } else {
   $13 = (_EC_POINT_set_affine_coordinates_GFp($group,$point,$8,$9,$$01)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $ret$0 = 0;
   } else {
    $15 = HEAP32[$0>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     _ERR_put_error(16,102,68,88628,1236);
     $ret$0 = 0;
    } else {
     $ret$0 = 1;
    }
   }
  }
 }
 _BN_CTX_end($$01);
 $17 = ($new_ctx$0|0)==(0|0);
 if ($17) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 _BN_CTX_free($new_ctx$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _ec_GFp_simple_points_make_affine($group,$num,$points,$ctx) {
 $group = $group|0;
 $num = $num|0;
 $points = $points|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$02 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$032 = 0;
 var $i$129 = 0, $i$226 = 0, $i$312 = 0, $i$410 = 0, $new_ctx$0 = 0, $or$cond = 0, $prod_Z$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)==(0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($ctx|0)==(0|0);
 if ($1) {
  $2 = (_BN_CTX_new()|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$02 = $2;$new_ctx$0 = $2;
  }
 } else {
  $$02 = $ctx;$new_ctx$0 = 0;
 }
 _BN_CTX_start($$02);
 $4 = (_BN_CTX_get($$02)|0);
 $5 = (_BN_CTX_get($$02)|0);
 $6 = ($4|0)==(0|0);
 $7 = ($5|0)==(0|0);
 $or$cond = $6 | $7;
 L8: do {
  if ($or$cond) {
   $prod_Z$0 = 0;$ret$0 = 0;
  } else {
   $8 = $num << 2;
   $9 = (_CRYPTO_malloc($8,88628,1273)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $prod_Z$0 = $9;$ret$0 = 0;
   } else {
    $i$032 = 0;
    while(1) {
     $13 = (_BN_new()|0);
     $14 = (($9) + ($i$032<<2)|0);
     HEAP32[$14>>2] = $13;
     $15 = ($13|0)==(0|0);
     $12 = (($i$032) + 1)|0;
     if ($15) {
      $prod_Z$0 = $9;$ret$0 = 0;
      break L8;
     }
     $11 = ($12>>>0)<($num>>>0);
     if ($11) {
      $i$032 = $12;
     } else {
      break;
     }
    }
    $16 = HEAP32[$points>>2]|0;
    $17 = ((($16)) + 48|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    do {
     if ($19) {
      $24 = HEAP32[$group>>2]|0;
      $25 = ((($24)) + 152|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==(0|0);
      $28 = HEAP32[$9>>2]|0;
      if ($27) {
       $31 = (_BN_set_word($28,1)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        $prod_Z$0 = $9;$ret$0 = 0;
        break L8;
       } else {
        break;
       }
      } else {
       $29 = (FUNCTION_TABLE_iiii[$26 & 63]($group,$28,$$02)|0);
       $30 = ($29|0)==(0);
       if ($30) {
        $prod_Z$0 = $9;$ret$0 = 0;
        break L8;
       } else {
        break;
       }
      }
     } else {
      $20 = ((($16)) + 44|0);
      $21 = HEAP32[$9>>2]|0;
      $22 = (_BN_copy($21,$20)|0);
      $23 = ($22|0)==(0|0);
      if ($23) {
       $prod_Z$0 = $9;$ret$0 = 0;
       break L8;
      }
     }
    } while(0);
    $33 = ($num>>>0)>(1);
    if ($33) {
     $i$129 = 1;
     while(1) {
      $34 = (($points) + ($i$129<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($35)) + 48|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(0);
      if ($38) {
       $50 = (($9) + ($i$129<<2)|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = (($i$129) + -1)|0;
       $53 = (($9) + ($52<<2)|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (_BN_copy($51,$54)|0);
       $56 = ($55|0)==(0|0);
       if ($56) {
        $prod_Z$0 = $9;$ret$0 = 0;
        break L8;
       }
      } else {
       $39 = ((($35)) + 44|0);
       $40 = HEAP32[$group>>2]|0;
       $41 = ((($40)) + 132|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($9) + ($i$129<<2)|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($i$129) + -1)|0;
       $46 = (($9) + ($45<<2)|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = (FUNCTION_TABLE_iiiiii[$42 & 63]($group,$44,$47,$39,$$02)|0);
       $49 = ($48|0)==(0);
       if ($49) {
        $prod_Z$0 = $9;$ret$0 = 0;
        break L8;
       }
      }
      $57 = (($i$129) + 1)|0;
      $58 = ($57>>>0)<($num>>>0);
      if ($58) {
       $i$129 = $57;
      } else {
       break;
      }
     }
    }
    $59 = (($num) + -1)|0;
    $60 = (($9) + ($59<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($group)) + 72|0);
    $63 = (_BN_mod_inverse($4,$61,$62,$$02)|0);
    $64 = ($63|0)==(0|0);
    if ($64) {
     _ERR_put_error(16,137,3,88628,1317);
     $prod_Z$0 = $9;$ret$0 = 0;
     break;
    }
    $65 = HEAP32[$group>>2]|0;
    $66 = ((($65)) + 144|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)==(0|0);
    if (!($68)) {
     $69 = (FUNCTION_TABLE_iiiii[$67 & 127]($group,$4,$4,$$02)|0);
     $70 = ($69|0)==(0);
     if ($70) {
      $prod_Z$0 = $9;$ret$0 = 0;
      break;
     }
     $71 = HEAP32[$group>>2]|0;
     $72 = ((($71)) + 144|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (FUNCTION_TABLE_iiiii[$73 & 127]($group,$4,$4,$$02)|0);
     $75 = ($74|0)==(0);
     if ($75) {
      $prod_Z$0 = $9;$ret$0 = 0;
      break;
     }
    }
    $76 = ($59|0)==(0);
    if (!($76)) {
     $i$226 = $59;
     while(1) {
      $77 = (($points) + ($i$226<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($78)) + 48|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)==(0);
      if ($81) {
       $$pre = (($i$226) + -1)|0;
       $$pre$phiZ2D = $$pre;
      } else {
       $82 = HEAP32[$group>>2]|0;
       $83 = ((($82)) + 132|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (($i$226) + -1)|0;
       $86 = (($9) + ($85<<2)|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (FUNCTION_TABLE_iiiiii[$84 & 63]($group,$5,$87,$4,$$02)|0);
       $89 = ($88|0)==(0);
       if ($89) {
        $prod_Z$0 = $9;$ret$0 = 0;
        break L8;
       }
       $90 = HEAP32[$group>>2]|0;
       $91 = ((($90)) + 132|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = HEAP32[$77>>2]|0;
       $94 = ((($93)) + 44|0);
       $95 = (FUNCTION_TABLE_iiiiii[$92 & 63]($group,$4,$4,$94,$$02)|0);
       $96 = ($95|0)==(0);
       if ($96) {
        $prod_Z$0 = $9;$ret$0 = 0;
        break L8;
       }
       $97 = HEAP32[$77>>2]|0;
       $98 = ((($97)) + 44|0);
       $99 = (_BN_copy($98,$5)|0);
       $100 = ($99|0)==(0|0);
       if ($100) {
        $prod_Z$0 = $9;$ret$0 = 0;
        break L8;
       } else {
        $$pre$phiZ2D = $85;
       }
      }
      $101 = ($$pre$phiZ2D|0)==(0);
      if ($101) {
       break;
      } else {
       $i$226 = $$pre$phiZ2D;
      }
     }
    }
    $102 = HEAP32[$points>>2]|0;
    $103 = ((($102)) + 48|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)==(0);
    if ($105) {
     $i$312 = 0;
    } else {
     $106 = ((($102)) + 44|0);
     $107 = (_BN_copy($106,$4)|0);
     $108 = ($107|0)==(0|0);
     if ($108) {
      $prod_Z$0 = $9;$ret$0 = 0;
      break;
     } else {
      $i$312 = 0;
     }
    }
    while(1) {
     $109 = (($points) + ($i$312<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ((($110)) + 44|0);
     $112 = ((($110)) + 48|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ($113|0)==(0);
     if (!($114)) {
      $115 = HEAP32[$group>>2]|0;
      $116 = ((($115)) + 136|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (FUNCTION_TABLE_iiiii[$117 & 127]($group,$4,$111,$$02)|0);
      $119 = ($118|0)==(0);
      if ($119) {
       $prod_Z$0 = $9;$ret$0 = 0;
       break L8;
      }
      $120 = HEAP32[$group>>2]|0;
      $121 = ((($120)) + 132|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($110)) + 4|0);
      $124 = (FUNCTION_TABLE_iiiiii[$122 & 63]($group,$123,$123,$4,$$02)|0);
      $125 = ($124|0)==(0);
      if ($125) {
       $prod_Z$0 = $9;$ret$0 = 0;
       break L8;
      }
      $126 = HEAP32[$group>>2]|0;
      $127 = ((($126)) + 132|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (FUNCTION_TABLE_iiiiii[$128 & 63]($group,$4,$4,$111,$$02)|0);
      $130 = ($129|0)==(0);
      if ($130) {
       $prod_Z$0 = $9;$ret$0 = 0;
       break L8;
      }
      $131 = HEAP32[$group>>2]|0;
      $132 = ((($131)) + 132|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = ((($110)) + 24|0);
      $135 = (FUNCTION_TABLE_iiiiii[$133 & 63]($group,$134,$134,$4,$$02)|0);
      $136 = ($135|0)==(0);
      if ($136) {
       $prod_Z$0 = $9;$ret$0 = 0;
       break L8;
      }
      $137 = HEAP32[$group>>2]|0;
      $138 = ((($137)) + 152|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $143 = (_BN_set_word($111,1)|0);
       $144 = ($143|0)==(0);
       if ($144) {
        $prod_Z$0 = $9;$ret$0 = 0;
        break L8;
       }
      } else {
       $141 = (FUNCTION_TABLE_iiii[$139 & 63]($group,$111,$$02)|0);
       $142 = ($141|0)==(0);
       if ($142) {
        $prod_Z$0 = $9;$ret$0 = 0;
        break L8;
       }
      }
      $145 = ((($110)) + 64|0);
      HEAP32[$145>>2] = 1;
     }
     $146 = (($i$312) + 1)|0;
     $147 = ($146>>>0)<($num>>>0);
     if ($147) {
      $i$312 = $146;
     } else {
      $prod_Z$0 = $9;$ret$0 = 1;
      break;
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($$02);
 $148 = ($new_ctx$0|0)==(0|0);
 if (!($148)) {
  _BN_CTX_free($new_ctx$0);
 }
 $149 = ($prod_Z$0|0)==(0|0);
 if ($149) {
  $$0 = $ret$0;
  return ($$0|0);
 } else {
  $i$410 = 0;
 }
 while(1) {
  $150 = (($prod_Z$0) + ($i$410<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($151|0)==(0|0);
  if ($152) {
   break;
  }
  _BN_clear_free($151);
  $153 = (($i$410) + 1)|0;
  $154 = ($153>>>0)<($num>>>0);
  if ($154) {
   $i$410 = $153;
  } else {
   break;
  }
 }
 _CRYPTO_free($prod_Z$0);
 $$0 = $ret$0;
 return ($$0|0);
}
function _dsa_pub_decode($pkey,$pubkey) {
 $pkey = $pkey|0;
 $pubkey = $pubkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dsa$0 = 0;
 var $p = 0, $palg = 0, $pklen = 0, $pm = 0, $ptype = 0, $pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $p = sp + 20|0;
 $pm = sp + 16|0;
 $pklen = sp + 12|0;
 $ptype = sp + 8|0;
 $pval = sp + 4|0;
 $palg = sp;
 $0 = (_X509_PUBKEY_get0_param(0,$p,$pklen,$palg,$pubkey)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$palg>>2]|0;
 _X509_ALGOR_get0(0,$ptype,$pval,$2);
 $3 = HEAP32[$ptype>>2]|0;
 switch ($3|0) {
 case 16:  {
  $4 = HEAP32[$pval>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$pm>>2] = $6;
  $7 = HEAP32[$4>>2]|0;
  $8 = (_d2i_DSAparams(0,$pm,$7)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   _ERR_put_error(10,117,104,88639,92);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $dsa$0 = $8;
  }
  break;
 }
 case 5: case -1:  {
  $10 = (_DSA_new()|0);
  $11 = ($10|0)==(0|0);
  if ($11) {
   _ERR_put_error(10,117,65,88639,98);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $dsa$0 = $10;
  }
  break;
 }
 default: {
  _ERR_put_error(10,117,105,88639,102);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $12 = HEAP32[$pklen>>2]|0;
 $13 = (_d2i_ASN1_INTEGER(0,$p,$12)|0);
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   _ERR_put_error(10,117,104,88639,107);
  } else {
   $15 = (_ASN1_INTEGER_to_BN($13,0)|0);
   $16 = ((($dsa$0)) + 24|0);
   HEAP32[$16>>2] = $15;
   $17 = ($15|0)==(0|0);
   if ($17) {
    _ERR_put_error(10,117,108,88639,112);
    _ASN1_INTEGER_free($13);
    break;
   }
   _ASN1_INTEGER_free($13);
   (_EVP_PKEY_assign($pkey,116,$dsa$0)|0);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _DSA_free($dsa$0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _dsa_pub_encode($pk,$pkey) {
 $pk = $pk|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $penc = 0, $ptype$0 = 0, $str$0 = 0, $str$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $penc = sp;
 HEAP32[$penc>>2] = 0;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($pkey)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $ptype$0 = -1;$str$0 = 0;
   label = 9;
  } else {
   $5 = ((($1)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $ptype$0 = -1;$str$0 = 0;
    label = 9;
   } else {
    $8 = ((($1)) + 16|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     $ptype$0 = -1;$str$0 = 0;
     label = 9;
    } else {
     $11 = ((($1)) + 20|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $ptype$0 = -1;$str$0 = 0;
      label = 9;
     } else {
      $14 = (_ASN1_STRING_new()|0);
      $15 = ($14|0)==(0|0);
      if ($15) {
       _ERR_put_error(10,118,65,88639,141);
       $str$1 = 0;
       break;
      }
      $16 = ((($14)) + 8|0);
      $17 = (_i2d_DSAparams($1,$16)|0);
      HEAP32[$14>>2] = $17;
      $18 = ($17|0)<(1);
      if ($18) {
       _ERR_put_error(10,118,65,88639,146);
       $str$1 = $14;
      } else {
       $ptype$0 = 16;$str$0 = $14;
       label = 9;
      }
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $19 = ((($1)) + 8|0);
   HEAP32[$19>>2] = 0;
   $20 = (_i2d_DSAPublicKey($1,$penc)|0);
   $21 = ($20|0)<(1);
   if ($21) {
    _ERR_put_error(10,118,65,88639,158);
    $str$1 = $str$0;
    break;
   }
   $22 = (_OBJ_nid2obj(116)|0);
   $23 = HEAP32[$penc>>2]|0;
   $24 = (_X509_PUBKEY_set0_param($pk,$22,$ptype$0,$str$0,$23,$20)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $str$1 = $str$0;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $26 = HEAP32[$penc>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _CRYPTO_free($26);
 }
 $28 = ($str$1|0)==(0|0);
 if ($28) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _ASN1_STRING_free($str$1);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _dsa_pub_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($a)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_BN_cmp($3,$7)|0);
 $9 = ($8|0)==(0);
 $$ = $9&1;
 return ($$|0);
}
function _dsa_pub_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_dsa_print($bp,$1,$indent,1)|0);
 return ($2|0);
}
function _dsa_priv_decode($pkey,$p8) {
 $pkey = $pkey|0;
 $p8 = $p8|0;
 var $$0 = 0, $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ctx$0 = 0, $ctx$1 = 0, $dsa$1 = 0, $ndsa$0 = 0, $ndsa$1 = 0, $ndsa$2 = 0, $ndsa$3 = 0, $or$cond = 0, $p = 0, $palg = 0, $pklen = 0, $pm = 0, $privkey$0 = 0, $privkey$1 = 0, $privkey$2 = 0, $privkey$3 = 0, $ptype = 0, $pval = 0, $q = 0, $ret$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $p = sp + 24|0;
 $pm = sp + 20|0;
 $pklen = sp + 16|0;
 $ptype = sp + 12|0;
 $pval = sp + 8|0;
 $palg = sp + 4|0;
 $q = sp;
 $0 = (_PKCS8_pkey_get0(0,$p,$pklen,$palg,$p8)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$palg>>2]|0;
 _X509_ALGOR_get0(0,$ptype,$pval,$2);
 $3 = HEAP32[$p>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(48);
 do {
  if ($5) {
   $6 = HEAP32[$pklen>>2]|0;
   $7 = (_d2i_ASN1_SEQUENCE_ANY(0,$p,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $ndsa$1 = 0;$privkey$1 = 0;
    label = 25;
   } else {
    $9 = (_sk_num($7)|0);
    $10 = ($9|0)==(2);
    if ($10) {
     $11 = (_sk_value($7,0)|0);
     $12 = (_sk_value($7,1)|0);
     $13 = HEAP32[$11>>2]|0;
     $14 = ($13|0)==(16);
     if ($14) {
      HEAP32[$p8>>2] = 2;
      $15 = ((($11)) + 4|0);
      $16 = HEAP32[$15>>2]|0;
      HEAP32[$pval>>2] = $16;
     } else {
      $17 = HEAP32[$ptype>>2]|0;
      $18 = ($17|0)==(16);
      if (!($18)) {
       $ndsa$1 = $7;$privkey$1 = 0;
       label = 25;
       break;
      }
      HEAP32[$p8>>2] = 3;
     }
     $19 = HEAP32[$12>>2]|0;
     $20 = ($19|0)==(2);
     if ($20) {
      $21 = ((($12)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $ndsa$0 = $7;$privkey$0 = $22;
      label = 15;
     } else {
      $ndsa$1 = $7;$privkey$1 = 0;
      label = 25;
     }
    } else {
     $ndsa$1 = $7;$privkey$1 = 0;
     label = 25;
    }
   }
  } else {
   HEAP32[$q>>2] = $3;
   $23 = HEAP32[$pklen>>2]|0;
   $24 = (_d2i_ASN1_INTEGER(0,$p,$23)|0);
   $25 = ($24|0)==(0|0);
   if ($25) {
    $ndsa$1 = 0;$privkey$1 = 0;
    label = 25;
   } else {
    $26 = ((($24)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(258);
    if ($28) {
     HEAP32[$p8>>2] = 4;
     _ASN1_STRING_clear_free($24);
     $29 = HEAP32[$pklen>>2]|0;
     $30 = (_d2i_ASN1_UINTEGER(0,$q,$29)|0);
     $31 = ($30|0)==(0|0);
     $32 = HEAP32[$ptype>>2]|0;
     $33 = ($32|0)!=(16);
     $or$cond = $31 | $33;
     if ($or$cond) {
      $ndsa$1 = 0;$privkey$1 = $30;
      label = 25;
      break;
     } else {
      $ndsa$0 = 0;$privkey$0 = $30;
      label = 15;
      break;
     }
    } else {
     $$old = HEAP32[$ptype>>2]|0;
     $$old1 = ($$old|0)==(16);
     if ($$old1) {
      $ndsa$0 = 0;$privkey$0 = $24;
      label = 15;
      break;
     } else {
      $ndsa$1 = 0;$privkey$1 = $24;
      label = 25;
      break;
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   $34 = HEAP32[$pval>>2]|0;
   $35 = ((($34)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$pm>>2] = $36;
   $37 = HEAP32[$34>>2]|0;
   $38 = (_d2i_DSAparams(0,$pm,$37)|0);
   $39 = ($38|0)==(0|0);
   if ($39) {
    $ndsa$1 = $ndsa$0;$privkey$1 = $privkey$0;
    label = 25;
   } else {
    $40 = (_ASN1_INTEGER_to_BN($privkey$0,0)|0);
    $41 = ((($38)) + 28|0);
    HEAP32[$41>>2] = $40;
    $42 = ($40|0)==(0|0);
    if ($42) {
     _ERR_put_error(10,115,109,88639,248);
     $ctx$0 = 0;$dsa$1 = $38;$ndsa$2 = $ndsa$0;$privkey$2 = $privkey$0;
     label = 26;
     break;
    }
    $43 = (_BN_new()|0);
    $44 = ((($38)) + 24|0);
    HEAP32[$44>>2] = $43;
    $45 = ($43|0)==(0|0);
    if ($45) {
     _ERR_put_error(10,115,65,88639,253);
     $ctx$0 = 0;$dsa$1 = $38;$ndsa$2 = $ndsa$0;$privkey$2 = $privkey$0;
     label = 26;
     break;
    }
    $46 = (_BN_CTX_new()|0);
    $47 = ($46|0)==(0|0);
    if ($47) {
     _ERR_put_error(10,115,65,88639,257);
     $ctx$0 = 0;$dsa$1 = $38;$ndsa$2 = $ndsa$0;$privkey$2 = $privkey$0;
     label = 26;
     break;
    }
    $48 = HEAP32[$44>>2]|0;
    $49 = ((($38)) + 20|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$41>>2]|0;
    $52 = ((($38)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_BN_mod_exp($48,$50,$51,$53,$46)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     _ERR_put_error(10,115,109,88639,262);
     $ctx$0 = $46;$dsa$1 = $38;$ndsa$2 = $ndsa$0;$privkey$2 = $privkey$0;
     label = 26;
     break;
    } else {
     (_EVP_PKEY_assign($pkey,116,$38)|0);
     $ctx$1 = $46;$ndsa$3 = $ndsa$0;$privkey$3 = $privkey$0;$ret$0 = 1;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  _ERR_put_error(10,115,104,88639,272);
  $ctx$0 = 0;$dsa$1 = 0;$ndsa$2 = $ndsa$1;$privkey$2 = $privkey$1;
  label = 26;
 }
 if ((label|0) == 26) {
  _DSA_free($dsa$1);
  $ctx$1 = $ctx$0;$ndsa$3 = $ndsa$2;$privkey$3 = $privkey$2;$ret$0 = 0;
 }
 _BN_CTX_free($ctx$1);
 $56 = ($ndsa$3|0)==(0|0);
 if ($56) {
  _ASN1_STRING_clear_free($privkey$3);
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 } else {
  _sk_pop_free($ndsa$3,46);
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _dsa_priv_encode($p8,$pkey) {
 $p8 = $p8|0;
 $pkey = $pkey|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dp = sp;
 HEAP32[$dp>>2] = 0;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (_ASN1_STRING_new()|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    _ERR_put_error(10,116,65,88639,299);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $8 = HEAP32[$0>>2]|0;
   $9 = ((($6)) + 8|0);
   $10 = (_i2d_DSAparams($8,$9)|0);
   HEAP32[$6>>2] = $10;
   $11 = ($10|0)<(1);
   do {
    if ($11) {
     _ERR_put_error(10,116,65,88639,305);
    } else {
     $12 = ((($6)) + 4|0);
     HEAP32[$12>>2] = 16;
     $13 = HEAP32[$0>>2]|0;
     $14 = ((($13)) + 28|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (_BN_to_ASN1_INTEGER($15,0)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      _ERR_put_error(10,116,109,88639,314);
      break;
     }
     $18 = (_i2d_ASN1_INTEGER($16,$dp)|0);
     _ASN1_STRING_clear_free($16);
     $19 = (_OBJ_nid2obj(116)|0);
     $20 = HEAP32[$dp>>2]|0;
     $21 = (_PKCS8_pkey_set0($p8,$19,0,16,$6,$20,$18)|0);
     $22 = ($21|0)==(0);
     if (!($22)) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
     $$pre = HEAP32[$dp>>2]|0;
     $23 = ($$pre|0)==(0|0);
     if (!($23)) {
      _CRYPTO_free($$pre);
     }
    }
   } while(0);
   _ASN1_STRING_free($6);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(10,116,101,88639,292);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _dsa_priv_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_dsa_print($bp,$1,$indent,2)|0);
 return ($2|0);
}
function _int_dsa_size($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_DSA_size($1)|0);
 return ($2|0);
}
function _dsa_bits($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_BN_num_bits($3)|0);
 return ($4|0);
}
function _dsa_param_decode($pkey,$pder,$derlen) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 $derlen = $derlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_d2i_DSAparams(0,$pder,$derlen)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(10,119,10,88639,482);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_EVP_PKEY_assign($pkey,116,$0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _dsa_param_encode($pkey,$pder) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_i2d_DSAparams($1,$pder)|0);
 return ($2|0);
}
function _dsa_missing_parameters($pkey) {
 $pkey = $pkey|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return 1;
 }
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  return 1;
 } else {
  $8 = ((($1)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  $$ = $10&1;
  return ($$|0);
 }
 return (0)|0;
}
function _dsa_copy_parameters($to,$from) {
 $to = $to|0;
 $from = $from|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($from)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_BN_dup($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($to)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $12 = $7;
 } else {
  _BN_free($9);
  $$pre = HEAP32[$6>>2]|0;
  $12 = $$pre;
 }
 $11 = ((($12)) + 12|0);
 HEAP32[$11>>2] = $4;
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_BN_dup($15)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = HEAP32[$6>>2]|0;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $23 = $18;
 } else {
  _BN_free($20);
  $$pre1 = HEAP32[$6>>2]|0;
  $23 = $$pre1;
 }
 $22 = ((($23)) + 16|0);
 HEAP32[$22>>2] = $16;
 $24 = HEAP32[$0>>2]|0;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (_BN_dup($26)|0);
 $28 = ($27|0)==(0|0);
 if ($28) {
  $$0 = 0;
  return ($$0|0);
 }
 $29 = HEAP32[$6>>2]|0;
 $30 = ((($29)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $34 = $29;
 } else {
  _BN_free($31);
  $$pre2 = HEAP32[$6>>2]|0;
  $34 = $$pre2;
 }
 $33 = ((($34)) + 20|0);
 HEAP32[$33>>2] = $27;
 $$0 = 1;
 return ($$0|0);
}
function _dsa_cmp_parameters($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($b)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_BN_cmp($3,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  return 0;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$4>>2]|0;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_BN_cmp($12,$15)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP32[$0>>2]|0;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$4>>2]|0;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_BN_cmp($20,$23)|0);
  $25 = ($24|0)==(0);
  $$ = $25&1;
  return ($$|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _dsa_param_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_dsa_print($bp,$1,$indent,0)|0);
 return ($2|0);
}
function _dsa_sig_print($bp,$sigalg,$sig,$indent,$pctx) {
 $bp = $bp|0;
 $sigalg = $sigalg|0;
 $sig = $sig|0;
 $indent = $indent|0;
 $pctx = $pctx|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$7 = 0, $p = 0, $rv$0$ph = 0;
 var $rv$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $0 = ($sig|0)==(0|0);
 if ($0) {
  $1 = (_BIO_puts($bp,90329)|0);
  $not$7 = ($1|0)>(0);
  $$ = $not$7&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($sig)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$p>>2] = $3;
 $4 = HEAP32[$sig>>2]|0;
 $5 = (_d2i_DSA_SIG(0,$p,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $31 = (_X509_signature_dump($bp,$sig,$indent)|0);
  $$0 = $31;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$5>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $19 = 0;
 } else {
  $9 = (_BN_num_bits($7)|0);
  $10 = (($9) + 7)|0;
  $11 = (($10|0) / 8)&-1;
  $19 = $11;
 }
 $12 = ((($5)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $21 = $19;
 } else {
  $15 = (_BN_num_bits($13)|0);
  $16 = (($15) + 7)|0;
  $17 = (($16|0) / 8)&-1;
  $18 = ($19>>>0)<($17>>>0);
  $$6 = $18 ? $17 : $19;
  $21 = $$6;
 }
 $20 = (($21) + 10)|0;
 $22 = (_CRYPTO_malloc($20,88639,548)|0);
 $23 = ($22|0)==(0|0);
 if ($23) {
  _ERR_put_error(10,125,65,88639,550);
  $rv$04 = 0;
 } else {
  $24 = (_BIO_write($bp,90329,1)|0);
  $25 = ($24|0)==(1);
  if ($25) {
   $26 = HEAP32[$5>>2]|0;
   $27 = (_ASN1_bn_print($bp,88651,$26,$22,$indent)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    $rv$0$ph = 0;
   } else {
    $29 = HEAP32[$12>>2]|0;
    $30 = (_ASN1_bn_print($bp,88657,$29,$22,$indent)|0);
    $not$ = ($30|0)!=(0);
    $$1 = $not$&1;
    $rv$0$ph = $$1;
   }
  } else {
   $rv$0$ph = 0;
  }
  _CRYPTO_free($22);
  $rv$04 = $rv$0$ph;
 }
 _DSA_SIG_free($5);
 $$0 = $rv$04;
 STACKTOP = sp;return ($$0|0);
}
function _int_dsa_free($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 _DSA_free($1);
 return;
}
function _dsa_pkey_ctrl($pkey,$op,$arg1,$arg2) {
 $pkey = $pkey|0;
 $op = $op|0;
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alg1 = 0, $alg13 = 0, $alg2 = 0, $alg24 = 0, $snid = 0, $snid1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $snid = sp + 20|0;
 $alg1 = sp + 16|0;
 $alg2 = sp + 12|0;
 $snid1 = sp + 8|0;
 $alg13 = sp + 4|0;
 $alg24 = sp;
 switch ($op|0) {
 case 1:  {
  $0 = ($arg1|0)==(0);
  if ($0) {
   _PKCS7_SIGNER_INFO_get0_algs($arg2,0,$alg1,$alg2);
   $1 = HEAP32[$alg1>>2]|0;
   $2 = ($1|0)==(0|0);
   if ($2) {
    $$0 = -1;
   } else {
    $3 = HEAP32[$1>>2]|0;
    $4 = ($3|0)==(0|0);
    if ($4) {
     $$0 = -1;
    } else {
     $5 = (_OBJ_obj2nid($3)|0);
     $6 = ($5|0)==(0);
     if ($6) {
      $$0 = -1;
     } else {
      $7 = (_EVP_PKEY_id($pkey)|0);
      $8 = (_OBJ_find_sigid_by_algs($snid,$5,$7)|0);
      $9 = ($8|0)==(0);
      if ($9) {
       $$0 = -1;
      } else {
       $10 = HEAP32[$alg2>>2]|0;
       $11 = HEAP32[$snid>>2]|0;
       $12 = (_OBJ_nid2obj($11)|0);
       (_X509_ALGOR_set0($10,$12,-1,0)|0);
       $$0 = 1;
      }
     }
    }
   }
  } else {
   $$0 = 1;
  }
  break;
 }
 case 5:  {
  $13 = ($arg1|0)==(0);
  if ($13) {
   _CMS_SignerInfo_get0_algs($arg2,0,0,$alg13,$alg24);
   $14 = HEAP32[$alg13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$0 = -1;
   } else {
    $16 = HEAP32[$14>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $$0 = -1;
    } else {
     $18 = (_OBJ_obj2nid($16)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $$0 = -1;
     } else {
      $20 = (_EVP_PKEY_id($pkey)|0);
      $21 = (_OBJ_find_sigid_by_algs($snid1,$18,$20)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       $$0 = -1;
      } else {
       $23 = HEAP32[$alg24>>2]|0;
       $24 = HEAP32[$snid1>>2]|0;
       $25 = (_OBJ_nid2obj($24)|0);
       (_X509_ALGOR_set0($23,$25,-1,0)|0);
       $$0 = 1;
      }
     }
    }
   }
  } else {
   $$0 = 1;
  }
  break;
 }
 case 8:  {
  HEAP32[$arg2>>2] = -1;
  $$0 = 1;
  break;
 }
 case 3:  {
  HEAP32[$arg2>>2] = 672;
  $$0 = 2;
  break;
 }
 default: {
  $$0 = -2;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _old_dsa_priv_decode($pkey,$pder,$derlen) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 $derlen = $derlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_d2i_DSAPrivateKey(0,$pder,$derlen)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(10,122,10,88639,517);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_EVP_PKEY_assign($pkey,116,$0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _old_dsa_priv_encode($pkey,$pder) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_i2d_DSAPrivateKey($1,$pder)|0);
 return ($2|0);
}
function _do_dsa_print($bp,$x,$off,$ptype) {
 $bp = $bp|0;
 $x = $x|0;
 $off = $off|0;
 $ptype = $ptype|0;
 var $$ = 0, $$1 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $ktype$0 = 0, $not$ = 0, $priv_key$06 = 0, $priv_key$07 = 0, $pub_key$0 = 0, $ret$0 = 0, $ret$09 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($ptype|0)==(2);
 if ($0) {
  $1 = ((($x)) + 28|0);
  $2 = HEAP32[$1>>2]|0;
  $priv_key$07 = $2;
  label = 4;
 } else {
  $3 = ($ptype|0)>(0);
  if ($3) {
   $priv_key$07 = 0;
   label = 4;
  } else {
   $priv_key$06 = 0;$pub_key$0 = 0;
  }
 }
 if ((label|0) == 4) {
  $4 = ((($x)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $priv_key$06 = $priv_key$07;$pub_key$0 = $5;
 }
 $6 = ($ptype|0)==(1);
 $$ = $6 ? 88663 : 88674;
 $ktype$0 = $0 ? 88689 : $$;
 $7 = ((($x)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $20 = 0;
 } else {
  $10 = (_BN_num_bits($8)|0);
  $11 = (($10) + 7)|0;
  $12 = (($11|0) / 8)&-1;
  $20 = $12;
 }
 $13 = ((($x)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $28 = $20;
 } else {
  $16 = (_BN_num_bits($14)|0);
  $17 = (($16) + 7)|0;
  $18 = (($17|0) / 8)&-1;
  $19 = ($20>>>0)<($18>>>0);
  $$11 = $19 ? $18 : $20;
  $28 = $$11;
 }
 $21 = ((($x)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $34 = $28;
 } else {
  $24 = (_BN_num_bits($22)|0);
  $25 = (($24) + 7)|0;
  $26 = (($25|0) / 8)&-1;
  $27 = ($28>>>0)<($26>>>0);
  $$12 = $27 ? $26 : $28;
  $34 = $$12;
 }
 $29 = ($priv_key$06|0)==(0|0);
 if ($29) {
  $40 = $34;
 } else {
  $30 = (_BN_num_bits($priv_key$06)|0);
  $31 = (($30) + 7)|0;
  $32 = (($31|0) / 8)&-1;
  $33 = ($34>>>0)<($32>>>0);
  $$13 = $33 ? $32 : $34;
  $40 = $$13;
 }
 $35 = ($pub_key$0|0)==(0|0);
 if ($35) {
  $42 = $40;
 } else {
  $36 = (_BN_num_bits($pub_key$0)|0);
  $37 = (($36) + 7)|0;
  $38 = (($37|0) / 8)&-1;
  $39 = ($40>>>0)<($38>>>0);
  $$14 = $39 ? $38 : $40;
  $42 = $$14;
 }
 $41 = (($42) + 10)|0;
 $43 = (_CRYPTO_malloc($41,88639,446)|0);
 $44 = ($43|0)==(0|0);
 if ($44) {
  _ERR_put_error(10,104,65,88639,448);
  $ret$09 = 0;
  STACKTOP = sp;return ($ret$09|0);
 }
 if ($29) {
  label = 20;
 } else {
  $45 = (_BIO_indent($bp,$off,128)|0);
  $46 = ($45|0)==(0);
  if ($46) {
   $ret$0 = 0;
  } else {
   $47 = HEAP32[$7>>2]|0;
   $48 = (_BN_num_bits($47)|0);
   HEAP32[$vararg_buffer>>2] = $ktype$0;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $48;
   $49 = (_BIO_printf($bp,89018,$vararg_buffer)|0);
   $50 = ($49|0)<(1);
   if ($50) {
    $ret$0 = 0;
   } else {
    label = 20;
   }
  }
 }
 if ((label|0) == 20) {
  $51 = (_ASN1_bn_print($bp,88701,$priv_key$06,$43,$off)|0);
  $52 = ($51|0)==(0);
  if ($52) {
   $ret$0 = 0;
  } else {
   $53 = (_ASN1_bn_print($bp,88707,$pub_key$0,$43,$off)|0);
   $54 = ($53|0)==(0);
   if ($54) {
    $ret$0 = 0;
   } else {
    $55 = HEAP32[$7>>2]|0;
    $56 = (_ASN1_bn_print($bp,88713,$55,$43,$off)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $ret$0 = 0;
    } else {
     $58 = HEAP32[$13>>2]|0;
     $59 = (_ASN1_bn_print($bp,88719,$58,$43,$off)|0);
     $60 = ($59|0)==(0);
     if ($60) {
      $ret$0 = 0;
     } else {
      $61 = HEAP32[$21>>2]|0;
      $62 = (_ASN1_bn_print($bp,88725,$61,$43,$off)|0);
      $not$ = ($62|0)!=(0);
      $$1 = $not$&1;
      $ret$0 = $$1;
     }
    }
   }
  }
 }
 _CRYPTO_free($43);
 $ret$09 = $ret$0;
 STACKTOP = sp;return ($ret$09|0);
}
function _d2i_DSA_SIG($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,46692)|0);
 return ($0|0);
}
function _d2i_DSAPrivateKey($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,46720)|0);
 return ($0|0);
}
function _i2d_DSAPrivateKey($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,46720)|0);
 return ($0|0);
}
function _d2i_DSAparams($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,46748)|0);
 return ($0|0);
}
function _i2d_DSAparams($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,46748)|0);
 return ($0|0);
}
function _i2d_DSAPublicKey($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,46804)|0);
 return ($0|0);
}
function _DSA_sign($type,$dgst,$dlen,$sig,$siglen,$dsa) {
 $type = $type|0;
 $dgst = $dgst|0;
 $dlen = $dlen|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $dsa = $dsa|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $sig;
 _RAND_seed($dgst,$dlen);
 $1 = (_DSA_do_sign($dgst,$dlen,$dsa)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$siglen>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $3 = (_ASN1_item_i2d($1,$0,46692)|0);
  HEAP32[$siglen>>2] = $3;
  _DSA_SIG_free($1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _DSA_verify($type,$dgst,$dgst_len,$sigbuf,$siglen,$dsa) {
 $type = $type|0;
 $dgst = $dgst|0;
 $dgst_len = $dgst_len|0;
 $sigbuf = $sigbuf|0;
 $siglen = $siglen|0;
 $dsa = $dsa|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $der = 0, $p = 0, $ret$0 = 0;
 var $ret$01 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $s = sp + 8|0;
 $p = sp + 4|0;
 $der = sp;
 HEAP32[$p>>2] = $sigbuf;
 HEAP32[$der>>2] = 0;
 $0 = (_DSA_SIG_new()|0);
 HEAP32[$s>>2] = $0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_ASN1_item_d2i($s,$p,$siglen,46692)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $ret$01 = -1;
 } else {
  $4 = HEAP32[$s>>2]|0;
  $5 = (_ASN1_item_i2d($4,$der,46692)|0);
  $6 = ($5|0)==($siglen|0);
  if ($6) {
   $7 = HEAP32[$der>>2]|0;
   $8 = (_memcmp($sigbuf,$7,$siglen)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = HEAP32[$s>>2]|0;
    $11 = (_DSA_do_verify($dgst,$dgst_len,$10,$dsa)|0);
    $ret$0 = $11;
   } else {
    $ret$0 = -1;
   }
  } else {
   $ret$0 = -1;
  }
  $12 = ($5|0)>(0);
  if ($12) {
   $13 = HEAP32[$der>>2]|0;
   _OPENSSL_cleanse($13,$5);
   $14 = HEAP32[$der>>2]|0;
   _CRYPTO_free($14);
   $ret$01 = $ret$0;
  } else {
   $ret$01 = $ret$0;
  }
 }
 $15 = HEAP32[$s>>2]|0;
 _DSA_SIG_free($15);
 $$0 = $ret$01;
 STACKTOP = sp;return ($$0|0);
}
function _dsa_cb($operation,$pval,$it,$exarg) {
 $operation = $operation|0;
 $pval = $pval|0;
 $it = $it|0;
 $exarg = $exarg|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($operation|0) {
 case 0:  {
  $0 = (_DSA_new()|0);
  HEAP32[$pval>>2] = $0;
  $1 = ($0|0)==(0|0);
  $$ = $1 ? 0 : 2;
  $$0 = $$;
  break;
 }
 case 2:  {
  $2 = HEAP32[$pval>>2]|0;
  _DSA_free($2);
  HEAP32[$pval>>2] = 0;
  $$0 = 2;
  break;
 }
 default: {
  $$0 = 1;
 }
 }
 return ($$0|0);
}
function _sig_cb($operation,$pval,$it,$exarg) {
 $operation = $operation|0;
 $pval = $pval|0;
 $it = $it|0;
 $exarg = $exarg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($operation|0)==(0);
 if (!($0)) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = (_CRYPTO_malloc(8,88760,73)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(10,114,65,88760,75);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$1>>2] = 0;
  $3 = ((($1)) + 4|0);
  HEAP32[$3>>2] = 0;
  HEAP32[$pval>>2] = $1;
  $$0 = 2;
  return ($$0|0);
 }
 return (0)|0;
}
function _dsa_builtin_paramgen($ret,$bits,$qbits,$evpmd,$seed_in,$seed_len,$seed_out,$counter_ret,$h_ret,$cb) {
 $ret = $ret|0;
 $bits = $bits|0;
 $qbits = $qbits|0;
 $evpmd = $evpmd|0;
 $seed_in = $seed_in|0;
 $seed_len = $seed_len|0;
 $seed_out = $seed_out|0;
 $counter_ret = $counter_ret|0;
 $h_ret = $h_ret|0;
 $cb = $cb|0;
 var $$ = 0, $$0 = 0, $$07 = 0, $$08 = 0, $$1$ph = 0, $$1$us = 0, $$2$lcssa = 0, $$lcssa22 = 0, $$seed_len = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bits$op = 0, $bits$op$op = 0, $bits$op$op$op = 0, $buf = 0, $buf2 = 0, $counter$1 = 0, $counter$1$lcssa121 = 0, $exitcond = 0, $exitcond70 = 0, $h$035 = 0, $h$035$lcssa = 0, $i$040 = 0, $i$040$us = 0, $i$143 = 0, $i$143$us = 0, $i$246 = 0, $k$050 = 0;
 var $m$0 = 0, $m$0$ph = 0, $m$0$us = 0, $md = 0, $not$ = 0, $ok$020 = 0, $ok$02074 = 0, $ok$0207479 = 0, $ok$02077 = 0, $or$cond = 0, $or$cond10 = 0, $seed = 0, $seed_is_random$0$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $seed = sp + 96|0;
 $md = sp + 64|0;
 $buf = sp + 32|0;
 $buf2 = sp;
 $0 = $qbits >>> 3;
 switch ($0|0) {
 case 20: case 28: case 32:  {
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $1 = ($evpmd|0)==(0|0);
 if ($1) {
  $2 = (_EVP_sha1()|0);
  $$07 = $2;
 } else {
  $$07 = $evpmd;
 }
 $3 = ($bits>>>0)<(512);
 $bits$op = (($bits) + 63)|0;
 $bits$op$op = $bits$op & -64;
 $4 = ($seed_len|0)!=(0);
 $5 = ($0>>>0)>($seed_len>>>0);
 $or$cond = $4 & $5;
 $$08 = $or$cond ? 0 : $seed_in;
 $6 = ($0>>>0)<($seed_len>>>0);
 $$seed_len = $6 ? $0 : $seed_len;
 $7 = ($$08|0)!=(0|0);
 if ($7) {
  _memcpy(($seed|0),($$08|0),($$seed_len|0))|0;
 }
 $8 = (_BN_MONT_CTX_new()|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_BN_CTX_new()|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $ok$0207479 = 0;
 } else {
  _BN_CTX_start($10);
  $12 = (_BN_CTX_get($10)|0);
  $13 = (_BN_CTX_get($10)|0);
  $14 = (_BN_CTX_get($10)|0);
  $15 = (_BN_CTX_get($10)|0);
  $16 = (_BN_CTX_get($10)|0);
  $17 = (_BN_CTX_get($10)|0);
  $18 = (_BN_CTX_get($10)|0);
  $19 = (_BN_CTX_get($10)|0);
  $20 = (_BN_value_one()|0);
  $bits$op$op$op = (($bits$op$op) + -1)|0;
  $21 = $3 ? 511 : $bits$op$op$op;
  $22 = (_BN_lshift($19,$20,$21)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $ok$02077 = 0;
   label = 86;
  } else {
   $24 = (($0) + -1)|0;
   $25 = (($md) + ($24)|0);
   $26 = (($21>>>0) / 160)&-1;
   $27 = $0 << 3;
   $28 = ($0|0)==(0);
   $$1$ph = $$seed_len;$m$0$ph = 0;
   L17: while(1) {
    L19: do {
     if ($7) {
      $$1$us = $$1$ph;$m$0$us = $m$0$ph;
      while(1) {
       $29 = (($m$0$us) + 1)|0;
       $30 = (_BN_GENCB_call($cb,0,$m$0$us)|0);
       $31 = ($30|0)==(0);
       if ($31) {
        $ok$020 = 0;
        break L17;
       }
       $32 = ($$1$us|0)==(0);
       if ($32) {
        $33 = (_RAND_pseudo_bytes($seed,$0)|0);
        $34 = ($33|0)<(0);
        if ($34) {
         $ok$020 = 0;
         break L17;
        } else {
         $seed_is_random$0$us = 1;
        }
       } else {
        $seed_is_random$0$us = 0;
       }
       _memcpy(($buf|0),($seed|0),($0|0))|0;
       _memcpy(($buf2|0),($seed|0),($0|0))|0;
       $i$040$us = $24;
       while(1) {
        $37 = (($buf) + ($i$040$us)|0);
        $38 = HEAP8[$37>>0]|0;
        $39 = (($38) + 1)<<24>>24;
        HEAP8[$37>>0] = $39;
        $40 = ($39<<24>>24)==(0);
        if (!($40)) {
         break;
        }
        $35 = (($i$040$us) + -1)|0;
        $36 = ($i$040$us|0)>(0);
        if ($36) {
         $i$040$us = $35;
        } else {
         break;
        }
       }
       $41 = (_EVP_Digest($seed,$0,$md,0,$$07,0)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        $ok$020 = 0;
        break L17;
       }
       $43 = (_EVP_Digest($buf,$0,$buf2,0,$$07,0)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        $ok$020 = 0;
        break L17;
       } else {
        $i$143$us = 0;
       }
       while(1) {
        $58 = (($buf2) + ($i$143$us)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = (($md) + ($i$143$us)|0);
        $61 = HEAP8[$60>>0]|0;
        $62 = $61 ^ $59;
        HEAP8[$60>>0] = $62;
        $63 = (($i$143$us) + 1)|0;
        $exitcond70 = ($63|0)==($0|0);
        if ($exitcond70) {
         break;
        } else {
         $i$143$us = $63;
        }
       }
       $45 = HEAP8[$md>>0]|0;
       $46 = $45&255;
       $47 = $46 | 128;
       $48 = $47&255;
       HEAP8[$md>>0] = $48;
       $49 = HEAP8[$25>>0]|0;
       $50 = $49&255;
       $51 = $50 | 1;
       $52 = $51&255;
       HEAP8[$25>>0] = $52;
       $53 = (_BN_bin2bn($md,$0,$15)|0);
       $54 = ($53|0)==(0|0);
       if ($54) {
        $ok$020 = 0;
        break L17;
       }
       $55 = (_BN_is_prime_fasttest_ex($15,50,$10,$seed_is_random$0$us,$cb)|0);
       $56 = ($55|0)>(0);
       if ($56) {
        $$2$lcssa = 0;$$lcssa22 = $29;
        break L19;
       }
       $57 = ($55|0)==(0);
       if ($57) {
        $$1$us = 0;$m$0$us = $29;
       } else {
        $ok$020 = 0;
        break L17;
       }
      }
     } else {
      $m$0 = $m$0$ph;
      while(1) {
       $64 = (($m$0) + 1)|0;
       $65 = (_BN_GENCB_call($cb,0,$m$0)|0);
       $66 = ($65|0)==(0);
       if ($66) {
        $ok$020 = 0;
        break L17;
       }
       $67 = (_RAND_pseudo_bytes($seed,$0)|0);
       $68 = ($67|0)<(0);
       if ($68) {
        $ok$020 = 0;
        break L17;
       }
       _memcpy(($buf|0),($seed|0),($0|0))|0;
       _memcpy(($buf2|0),($seed|0),($0|0))|0;
       $i$040 = $24;
       while(1) {
        $71 = (($buf) + ($i$040)|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = (($72) + 1)<<24>>24;
        HEAP8[$71>>0] = $73;
        $74 = ($73<<24>>24)==(0);
        if (!($74)) {
         break;
        }
        $69 = (($i$040) + -1)|0;
        $70 = ($i$040|0)>(0);
        if ($70) {
         $i$040 = $69;
        } else {
         break;
        }
       }
       $75 = (_EVP_Digest($seed,$0,$md,0,$$07,0)|0);
       $76 = ($75|0)==(0);
       if ($76) {
        $ok$020 = 0;
        break L17;
       }
       $77 = (_EVP_Digest($buf,$0,$buf2,0,$$07,0)|0);
       $78 = ($77|0)==(0);
       if ($78) {
        $ok$020 = 0;
        break L17;
       } else {
        $i$143 = 0;
       }
       while(1) {
        $79 = (($buf2) + ($i$143)|0);
        $80 = HEAP8[$79>>0]|0;
        $81 = (($md) + ($i$143)|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82 ^ $80;
        HEAP8[$81>>0] = $83;
        $84 = (($i$143) + 1)|0;
        $exitcond = ($84|0)==($0|0);
        if ($exitcond) {
         break;
        } else {
         $i$143 = $84;
        }
       }
       $85 = HEAP8[$md>>0]|0;
       $86 = $85&255;
       $87 = $86 | 128;
       $88 = $87&255;
       HEAP8[$md>>0] = $88;
       $89 = HEAP8[$25>>0]|0;
       $90 = $89&255;
       $91 = $90 | 1;
       $92 = $91&255;
       HEAP8[$25>>0] = $92;
       $93 = (_BN_bin2bn($md,$0,$15)|0);
       $94 = ($93|0)==(0|0);
       if ($94) {
        $ok$020 = 0;
        break L17;
       }
       $95 = (_BN_is_prime_fasttest_ex($15,50,$10,1,$cb)|0);
       $96 = ($95|0)>(0);
       if ($96) {
        $$2$lcssa = $$1$ph;$$lcssa22 = $64;
        break L19;
       }
       $97 = ($95|0)==(0);
       if ($97) {
        $m$0 = $64;
       } else {
        $ok$020 = 0;
        break L17;
       }
      }
     }
    } while(0);
    $98 = (_BN_GENCB_call($cb,2,0)|0);
    $99 = ($98|0)==(0);
    if ($99) {
     $ok$020 = 0;
     break;
    }
    $100 = (_BN_GENCB_call($cb,3,0)|0);
    $101 = ($100|0)==(0);
    if ($101) {
     $ok$020 = 0;
     break;
    } else {
     $counter$1 = 0;
    }
    while(1) {
     $102 = ($counter$1|0)==(0);
     if (!($102)) {
      $103 = (_BN_GENCB_call($cb,0,$counter$1)|0);
      $104 = ($103|0)==(0);
      if ($104) {
       $ok$020 = 0;
       break L17;
      }
     }
     (_BN_set_word($14,0)|0);
     $k$050 = 0;
     while(1) {
      L59: do {
       if (!($28)) {
        $i$246 = $24;
        while(1) {
         $109 = (($buf) + ($i$246)|0);
         $110 = HEAP8[$109>>0]|0;
         $111 = (($110) + 1)<<24>>24;
         HEAP8[$109>>0] = $111;
         $112 = ($111<<24>>24)==(0);
         if (!($112)) {
          break L59;
         }
         $107 = (($i$246) + -1)|0;
         $108 = ($i$246|0)>(0);
         if ($108) {
          $i$246 = $107;
         } else {
          break;
         }
        }
       }
      } while(0);
      $113 = (_EVP_Digest($buf,$0,$md,0,$$07,0)|0);
      $114 = ($113|0)==(0);
      if ($114) {
       $ok$020 = 0;
       break L17;
      }
      $115 = (_BN_bin2bn($md,$0,$12)|0);
      $116 = ($115|0)==(0|0);
      if ($116) {
       $ok$020 = 0;
       break L17;
      }
      $117 = Math_imul($27, $k$050)|0;
      $118 = (_BN_lshift($12,$12,$117)|0);
      $119 = ($118|0)==(0);
      if ($119) {
       $ok$020 = 0;
       break L17;
      }
      $120 = (_BN_add($14,$14,$12)|0);
      $121 = ($120|0)==(0);
      if ($121) {
       $ok$020 = 0;
       break L17;
      }
      $105 = (($k$050) + 1)|0;
      $106 = ($k$050|0)<($26|0);
      if ($106) {
       $k$050 = $105;
      } else {
       break;
      }
     }
     $122 = (_BN_mask_bits($14,$21)|0);
     $123 = ($122|0)==(0);
     if ($123) {
      $ok$020 = 0;
      break L17;
     }
     $124 = (_BN_copy($16,$14)|0);
     $125 = ($124|0)==(0|0);
     if ($125) {
      $ok$020 = 0;
      break L17;
     }
     $126 = (_BN_add($16,$16,$19)|0);
     $127 = ($126|0)==(0);
     if ($127) {
      $ok$020 = 0;
      break L17;
     }
     $128 = (_BN_lshift1($12,$15)|0);
     $129 = ($128|0)==(0);
     if ($129) {
      $ok$020 = 0;
      break L17;
     }
     $130 = (_BN_div(0,$17,$16,$12,$10)|0);
     $131 = ($130|0)==(0);
     if ($131) {
      $ok$020 = 0;
      break L17;
     }
     $132 = (_BN_value_one()|0);
     $133 = (_BN_sub($12,$17,$132)|0);
     $134 = ($133|0)==(0);
     if ($134) {
      $ok$020 = 0;
      break L17;
     }
     $135 = (_BN_sub($18,$16,$12)|0);
     $136 = ($135|0)==(0);
     if ($136) {
      $ok$020 = 0;
      break L17;
     }
     $137 = (_BN_cmp($18,$19)|0);
     $138 = ($137|0)>(-1);
     if ($138) {
      $139 = (_BN_is_prime_fasttest_ex($18,50,$10,1,$cb)|0);
      $140 = ($139|0)>(0);
      if ($140) {
       $counter$1$lcssa121 = $counter$1;
       label = 58;
       break L17;
      }
      $141 = ($139|0)==(0);
      if (!($141)) {
       $ok$020 = 0;
       break L17;
      }
     }
     $142 = (($counter$1) + 1)|0;
     $143 = ($counter$1|0)>(4094);
     if ($143) {
      $$1$ph = $$2$lcssa;$m$0$ph = $$lcssa22;
      continue L17;
     } else {
      $counter$1 = $142;
     }
    }
   }
   L80: do {
    if ((label|0) == 58) {
     $144 = (_BN_GENCB_call($cb,2,1)|0);
     $145 = ($144|0)==(0);
     if ($145) {
      $ok$020 = 0;
     } else {
      $146 = (_BN_value_one()|0);
      $147 = (_BN_sub($19,$18,$146)|0);
      $148 = ($147|0)==(0);
      if ($148) {
       $ok$020 = 0;
      } else {
       $149 = (_BN_div($12,0,$19,$15,$10)|0);
       $150 = ($149|0)==(0);
       if ($150) {
        $ok$020 = 0;
       } else {
        $151 = (_BN_set_word($19,2)|0);
        $152 = ($151|0)==(0);
        if ($152) {
         $ok$020 = 0;
        } else {
         $153 = (_BN_MONT_CTX_set($8,$18,$10)|0);
         $154 = ($153|0)==(0);
         if ($154) {
          $ok$020 = 0;
         } else {
          $155 = (_BN_mod_exp_mont($13,$19,$12,$18,$10,$8)|0);
          $156 = ($155|0)==(0);
          if ($156) {
           $ok$020 = 0;
          } else {
           $157 = ((($13)) + 4|0);
           $158 = ((($13)) + 12|0);
           $h$035 = 2;
           while(1) {
            $159 = HEAP32[$157>>2]|0;
            $160 = ($159|0)==(1);
            if (!($160)) {
             $h$035$lcssa = $h$035;
             break;
            }
            $161 = HEAP32[$13>>2]|0;
            $162 = HEAP32[$161>>2]|0;
            $163 = ($162|0)==(1);
            if (!($163)) {
             $h$035$lcssa = $h$035;
             break;
            }
            $164 = HEAP32[$158>>2]|0;
            $165 = ($164|0)==(0);
            if (!($165)) {
             $h$035$lcssa = $h$035;
             break;
            }
            $166 = (_BN_value_one()|0);
            $167 = (_BN_add($19,$19,$166)|0);
            $168 = ($167|0)==(0);
            if ($168) {
             $ok$020 = 0;
             break L80;
            }
            $169 = (($h$035) + 1)|0;
            $170 = (_BN_mod_exp_mont($13,$19,$12,$18,$10,$8)|0);
            $171 = ($170|0)==(0);
            if ($171) {
             $ok$020 = 0;
             break L80;
            } else {
             $h$035 = $169;
            }
           }
           $172 = (_BN_GENCB_call($cb,3,1)|0);
           $not$ = ($172|0)!=(0);
           $$ = $not$&1;
           if ($not$) {
            $173 = ((($ret)) + 12|0);
            $174 = ((($ret)) + 16|0);
            $175 = ((($ret)) + 20|0);
            $176 = HEAP32[$173>>2]|0;
            $177 = ($176|0)==(0|0);
            if (!($177)) {
             _BN_free($176);
            }
            $178 = HEAP32[$174>>2]|0;
            $179 = ($178|0)==(0|0);
            if (!($179)) {
             _BN_free($178);
            }
            $180 = HEAP32[$175>>2]|0;
            $181 = ($180|0)==(0|0);
            if (!($181)) {
             _BN_free($180);
            }
            $182 = (_BN_dup($18)|0);
            HEAP32[$173>>2] = $182;
            $183 = (_BN_dup($15)|0);
            HEAP32[$174>>2] = $183;
            $184 = (_BN_dup($13)|0);
            HEAP32[$175>>2] = $184;
            $185 = HEAP32[$173>>2]|0;
            $186 = ($185|0)==(0|0);
            if ($186) {
             $ok$020 = 0;
            } else {
             $187 = HEAP32[$174>>2]|0;
             $188 = ($187|0)==(0|0);
             $189 = ($184|0)==(0|0);
             $or$cond10 = $189 | $188;
             if ($or$cond10) {
              $ok$020 = 0;
             } else {
              $190 = ($counter_ret|0)==(0|0);
              if (!($190)) {
               HEAP32[$counter_ret>>2] = $counter$1$lcssa121;
              }
              $191 = ($h_ret|0)==(0|0);
              if (!($191)) {
               HEAP32[$h_ret>>2] = $h$035$lcssa;
              }
              $192 = ($seed_out|0)==(0|0);
              if ($192) {
               $ok$020 = $$;
               break;
              }
              _memcpy(($seed_out|0),($seed|0),($0|0))|0;
              $ok$020 = $$;
             }
            }
           } else {
            $ok$020 = 0;
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   $193 = ($10|0)==(0|0);
   if ($193) {
    $ok$02074 = $ok$020;
   } else {
    $ok$02077 = $ok$020;
    label = 86;
   }
  }
  if ((label|0) == 86) {
   _BN_CTX_end($10);
   _BN_CTX_free($10);
   $ok$02074 = $ok$02077;
  }
  if ($9) {
   $$0 = $ok$02074;
   STACKTOP = sp;return ($$0|0);
  } else {
   $ok$0207479 = $ok$02074;
  }
 }
 _BN_MONT_CTX_free($8);
 $$0 = $ok$0207479;
 STACKTOP = sp;return ($$0|0);
}
function _dsa_builtin_paramgen2($ret,$L,$N,$evpmd,$seed_in,$seed_len,$idx,$seed_out,$counter_ret,$h_ret,$cb) {
 $ret = $ret|0;
 $L = $L|0;
 $N = $N|0;
 $evpmd = $evpmd|0;
 $seed_in = $seed_in|0;
 $seed_len = $seed_len|0;
 $idx = $idx|0;
 $seed_out = $seed_out|0;
 $counter_ret = $counter_ret|0;
 $h_ret = $h_ret|0;
 $cb = $cb|0;
 var $$0 = 0, $$1 = 0, $$seed_len = 0, $$sum = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $counter$1 = 0, $counter$1$lcssa95 = 0, $counter$2 = 0, $ctx$0$ph54 = 0, $h$0 = 0, $h$1 = 0, $h$1$lcssa93 = 0, $i$0 = 0, $i$0$in = 0, $k$033 = 0, $mctx = 0, $md = 0, $mont$0$ph52 = 0, $ok$016 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond8 = 0, $p$0 = 0, $pmd$0 = 0, $q$0 = 0, $seed$0 = 0, $seed$1$ph50 = 0, $seed_tmp$0 = 0, $seed_tmp$1 = 0, $seed_tmp$2$ph48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $md = sp + 24|0;
 $mctx = sp;
 $0 = $N >>> 3;
 _EVP_MD_CTX_init($mctx);
 $1 = ($evpmd|0)==(0|0);
 L1: do {
  if ($1) {
   switch ($N|0) {
   case 160:  {
    $2 = (_EVP_sha1()|0);
    $$0 = $2;
    break L1;
    break;
   }
   case 224:  {
    $3 = (_EVP_sha224()|0);
    $$0 = $3;
    break L1;
    break;
   }
   default: {
    $4 = (_EVP_sha256()|0);
    $$0 = $4;
    break L1;
   }
   }
  } else {
   $$0 = $evpmd;
  }
 } while(0);
 $5 = (_EVP_MD_size($$0)|0);
 $6 = ((($ret)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  label = 8;
 } else {
  $9 = ((($ret)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = ($idx|0)>(-1);
  $or$cond = $12 | $11;
  if ($or$cond) {
   label = 8;
  } else {
   $$1 = $seed_len;$seed$0 = 0;$seed_tmp$1 = 0;
   label = 13;
  }
 }
 if ((label|0) == 8) {
  $13 = ($seed_len|0)==(0);
  $$seed_len = $13 ? $5 : $seed_len;
  $14 = (_CRYPTO_malloc($$seed_len,88775,443)|0);
  $15 = ($seed_out|0)==(0|0);
  if ($15) {
   $16 = (_CRYPTO_malloc($$seed_len,88775,448)|0);
   $seed_tmp$0 = $16;
  } else {
   $seed_tmp$0 = $seed_out;
  }
  $17 = ($14|0)!=(0|0);
  $18 = ($seed_tmp$0|0)!=(0|0);
  $or$cond3 = $17 & $18;
  if ($or$cond3) {
   $19 = ($seed_in|0)==(0|0);
   if ($19) {
    $$1 = $$seed_len;$seed$0 = $14;$seed_tmp$1 = $seed_tmp$0;
    label = 13;
   } else {
    _memcpy(($14|0),($seed_in|0),($$seed_len|0))|0;
    $$1 = $$seed_len;$seed$0 = $14;$seed_tmp$1 = $seed_tmp$0;
    label = 13;
   }
  } else {
   $ctx$0$ph54 = 0;$mont$0$ph52 = 0;$ok$016 = -1;$seed$1$ph50 = $14;$seed_tmp$2$ph48 = $seed_tmp$0;
  }
 }
 L17: do {
  if ((label|0) == 13) {
   $20 = (_BN_CTX_new()|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $ctx$0$ph54 = 0;$mont$0$ph52 = 0;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
   } else {
    $22 = (_BN_MONT_CTX_new()|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     $ctx$0$ph54 = $20;$mont$0$ph52 = 0;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
    } else {
     _BN_CTX_start($20);
     $24 = (_BN_CTX_get($20)|0);
     $25 = (_BN_CTX_get($20)|0);
     $26 = (_BN_CTX_get($20)|0);
     $27 = (_BN_CTX_get($20)|0);
     $28 = (_BN_CTX_get($20)|0);
     $29 = (_BN_CTX_get($20)|0);
     $30 = HEAP32[$6>>2]|0;
     $31 = ($30|0)==(0|0);
     if ($31) {
      label = 19;
     } else {
      $32 = ((($ret)) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($33|0)==(0|0);
      if ($34) {
       label = 19;
      } else {
       $35 = ($idx|0)>(-1);
       if ($35) {
        _memcpy(($seed_tmp$1|0),($seed$0|0),($$1|0))|0;
        $counter$2 = 0;$p$0 = $30;$q$0 = $33;
       } else {
        $counter$2 = 0;$p$0 = $30;$q$0 = $33;
       }
      }
     }
     do {
      if ((label|0) == 19) {
       $36 = (_BN_CTX_get($20)|0);
       $37 = (_BN_CTX_get($20)|0);
       $38 = (_BN_value_one()|0);
       $39 = (($L) + -1)|0;
       $40 = (_BN_lshift($29,$38,$39)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
        break L17;
       }
       $42 = ($seed_in|0)!=(0|0);
       $43 = ($0|0)<($5|0);
       $$sum = (($5) - ($0))|0;
       $44 = (($md) + ($$sum)|0);
       $45 = $43 ? $$sum : 0;
       $pmd$0 = $43 ? $44 : $md;
       $46 = ($0|0)>($5|0);
       $47 = (($md) + ($5)|0);
       $48 = (($0) - ($5))|0;
       $49 = (($0) + -1)|0;
       $$sum7 = (($49) + ($45))|0;
       $50 = (($md) + ($$sum7)|0);
       $51 = $42&1;
       $52 = ($seed_out|0)==(0|0);
       $53 = $5 << 3;
       $54 = $L << 2;
       $55 = (_BN_GENCB_call($cb,0,0)|0);
       $56 = ($55|0)==(0);
       if ($56) {
        $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
        break L17;
       } else {
        $75 = 1;
       }
       L28: while(1) {
        if (!($42)) {
         $57 = (_RAND_pseudo_bytes($seed$0,$$1)|0);
         $58 = ($57|0)<(0);
         if ($58) {
          $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
          break L17;
         }
        }
        $59 = (_EVP_Digest($seed$0,$$1,$md,0,$$0,0)|0);
        $60 = ($59|0)==(0);
        if ($60) {
         $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
         break L17;
        }
        if ($46) {
         _memset(($47|0),0,($48|0))|0;
        }
        $61 = HEAP8[$pmd$0>>0]|0;
        $62 = $61&255;
        $63 = $62 | 128;
        $64 = $63&255;
        HEAP8[$pmd$0>>0] = $64;
        $65 = HEAP8[$50>>0]|0;
        $66 = $65&255;
        $67 = $66 | 1;
        $68 = $67&255;
        HEAP8[$50>>0] = $68;
        $69 = (_BN_bin2bn($pmd$0,$0,$37)|0);
        $70 = ($69|0)==(0|0);
        if ($70) {
         $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
         break L17;
        }
        $71 = (_BN_is_prime_fasttest_ex($37,50,$20,$51,$cb)|0);
        $72 = ($71|0)>(0);
        if ($72) {
         if (!($52)) {
          _memcpy(($seed_out|0),($seed$0|0),($$1|0))|0;
         }
         $78 = (_BN_GENCB_call($cb,2,0)|0);
         $79 = ($78|0)==(0);
         if ($79) {
          $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
          break L17;
         }
         $80 = (_BN_GENCB_call($cb,3,0)|0);
         $81 = ($80|0)==(0);
         if ($81) {
          $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
          break L17;
         }
         $82 = (($39>>>0) / ($53>>>0))&-1;
         $83 = ($82|0)<(0);
         $counter$1 = 0;
         while(1) {
          $84 = ($counter$1|0)==(0);
          if (!($84)) {
           $85 = (_BN_GENCB_call($cb,0,$counter$1)|0);
           $86 = ($85|0)==(0);
           if ($86) {
            $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
            break L17;
           }
          }
          (_BN_set_word($26,0)|0);
          if (!($83)) {
           $k$033 = 0;
           while(1) {
            $i$0$in = $$1;
            while(1) {
             $i$0 = (($i$0$in) + -1)|0;
             $89 = ($i$0|0)>(-1);
             if (!($89)) {
              break;
             }
             $90 = (($seed$0) + ($i$0)|0);
             $91 = HEAP8[$90>>0]|0;
             $92 = (($91) + 1)<<24>>24;
             HEAP8[$90>>0] = $92;
             $93 = ($92<<24>>24)==(0);
             if ($93) {
              $i$0$in = $i$0;
             } else {
              break;
             }
            }
            $94 = (_EVP_Digest($seed$0,$$1,$md,0,$$0,0)|0);
            $95 = ($94|0)==(0);
            if ($95) {
             $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
             break L17;
            }
            $96 = (_BN_bin2bn($md,$5,$24)|0);
            $97 = ($96|0)==(0|0);
            if ($97) {
             $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
             break L17;
            }
            $98 = Math_imul($k$033, $53)|0;
            $99 = (_BN_lshift($24,$24,$98)|0);
            $100 = ($99|0)==(0);
            if ($100) {
             $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
             break L17;
            }
            $101 = (_BN_add($26,$26,$24)|0);
            $102 = ($101|0)==(0);
            if ($102) {
             $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
             break L17;
            }
            $87 = (($k$033) + 1)|0;
            $88 = ($k$033|0)<($82|0);
            if ($88) {
             $k$033 = $87;
            } else {
             break;
            }
           }
          }
          $103 = (_BN_mask_bits($26,$39)|0);
          $104 = ($103|0)==(0);
          if ($104) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $105 = (_BN_copy($27,$26)|0);
          $106 = ($105|0)==(0|0);
          if ($106) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $107 = (_BN_add($27,$27,$29)|0);
          $108 = ($107|0)==(0);
          if ($108) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $109 = (_BN_lshift1($24,$37)|0);
          $110 = ($109|0)==(0);
          if ($110) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $111 = (_BN_div(0,$28,$27,$24,$20)|0);
          $112 = ($111|0)==(0);
          if ($112) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $113 = (_BN_value_one()|0);
          $114 = (_BN_sub($24,$28,$113)|0);
          $115 = ($114|0)==(0);
          if ($115) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $116 = (_BN_sub($36,$27,$24)|0);
          $117 = ($116|0)==(0);
          if ($117) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $118 = (_BN_cmp($36,$29)|0);
          $119 = ($118|0)>(-1);
          if ($119) {
           $120 = (_BN_is_prime_fasttest_ex($36,50,$20,1,$cb)|0);
           $121 = ($120|0)>(0);
           if ($121) {
            $counter$1$lcssa95 = $counter$1;
            label = 61;
            break L28;
           }
           $122 = ($120|0)==(0);
           if (!($122)) {
            $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
            break L17;
           }
          }
          $123 = (($counter$1) + 1)|0;
          $124 = ($123|0)<($54|0);
          if ($124) {
           $counter$1 = $123;
          } else {
           break;
          }
         }
         if ($42) {
          label = 60;
          break;
         }
        } else {
         $73 = ($71|0)==(0);
         if (!($73)) {
          $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
          break L17;
         }
         if ($42) {
          label = 31;
          break;
         }
        }
        $74 = (($75) + 1)|0;
        $76 = (_BN_GENCB_call($cb,0,$75)|0);
        $77 = ($76|0)==(0);
        if ($77) {
         $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
         break L17;
        } else {
         $75 = $74;
        }
       }
       if ((label|0) == 31) {
        _ERR_put_error(10,126,113,88775,525);
        $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = 0;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
        break L17;
       }
       else if ((label|0) == 60) {
        _ERR_put_error(10,126,112,88775,614);
        $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = 0;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
        break L17;
       }
       else if ((label|0) == 61) {
        $125 = (_BN_GENCB_call($cb,2,1)|0);
        $126 = ($125|0)==(0);
        if ($126) {
         $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
         break L17;
        } else {
         $counter$2 = $counter$1$lcssa95;$p$0 = $36;$q$0 = $37;
         break;
        }
       }
      }
     } while(0);
     $127 = (_BN_value_one()|0);
     $128 = (_BN_sub($29,$p$0,$127)|0);
     $129 = ($128|0)==(0);
     if ($129) {
      $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
     } else {
      $130 = (_BN_div($24,0,$29,$q$0,$20)|0);
      $131 = ($130|0)==(0);
      if ($131) {
       $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
      } else {
       $132 = ($idx|0)<(0);
       if ($132) {
        $133 = (_BN_set_word($29,2)|0);
        $134 = ($133|0)==(0);
        if ($134) {
         $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
         break;
        } else {
         $h$0 = 2;
        }
       } else {
        $h$0 = 1;
       }
       $135 = (_BN_MONT_CTX_set($22,$p$0,$20)|0);
       $136 = ($135|0)==(0);
       if ($136) {
        $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
       } else {
        $137 = ($idx|0)>(-1);
        $138 = $idx&255;
        $139 = ((($md)) + 1|0);
        $140 = ((($md)) + 2|0);
        $141 = ((($25)) + 4|0);
        $142 = ((($25)) + 12|0);
        $h$1 = $h$0;
        while(1) {
         if ($137) {
          HEAP8[$md>>0] = $138;
          $143 = $h$1 >>> 8;
          $144 = $143&255;
          HEAP8[$139>>0] = $144;
          $145 = $h$1&255;
          HEAP8[$140>>0] = $145;
          $146 = (_EVP_DigestInit_ex($mctx,$$0,0)|0);
          $147 = ($146|0)==(0);
          if ($147) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $148 = (_EVP_DigestUpdate($mctx,$seed_tmp$1,$$1)|0);
          $149 = ($148|0)==(0);
          if ($149) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $150 = (_EVP_DigestUpdate($mctx,88785,4)|0);
          $151 = ($150|0)==(0);
          if ($151) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $152 = (_EVP_DigestUpdate($mctx,$md,3)|0);
          $153 = ($152|0)==(0);
          if ($153) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $154 = (_EVP_DigestFinal_ex($mctx,$md,0)|0);
          $155 = ($154|0)==(0);
          if ($155) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
          $156 = (_BN_bin2bn($md,$5,$29)|0);
          $157 = ($156|0)==(0|0);
          if ($157) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
         }
         $158 = (_BN_mod_exp_mont($25,$29,$24,$p$0,$20,$22)|0);
         $159 = ($158|0)==(0);
         if ($159) {
          $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
          break L17;
         }
         $160 = HEAP32[$141>>2]|0;
         $161 = ($160|0)==(1);
         if (!($161)) {
          $h$1$lcssa93 = $h$1;
          break;
         }
         $162 = HEAP32[$25>>2]|0;
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(1);
         if (!($164)) {
          $h$1$lcssa93 = $h$1;
          break;
         }
         $165 = HEAP32[$142>>2]|0;
         $166 = ($165|0)==(0);
         if (!($166)) {
          $h$1$lcssa93 = $h$1;
          break;
         }
         if ($132) {
          $167 = (_BN_value_one()|0);
          $168 = (_BN_add($29,$29,$167)|0);
          $169 = ($168|0)==(0);
          if ($169) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           break L17;
          }
         }
         $170 = (($h$1) + 1)|0;
         $171 = ($170>>>0)>(65535);
         $or$cond5 = $137 & $171;
         if ($or$cond5) {
          $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
          break L17;
         } else {
          $h$1 = $170;
         }
        }
        $172 = (_BN_GENCB_call($cb,3,1)|0);
        $173 = ($172|0)==(0);
        if ($173) {
         $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
        } else {
         $174 = ((($ret)) + 16|0);
         $175 = ((($ret)) + 20|0);
         $176 = HEAP32[$6>>2]|0;
         $177 = ($p$0|0)==($176|0);
         if (!($177)) {
          $178 = ($176|0)==(0|0);
          if (!($178)) {
           _BN_free($176);
          }
          $179 = (_BN_dup($p$0)|0);
          HEAP32[$6>>2] = $179;
         }
         $180 = HEAP32[$174>>2]|0;
         $181 = ($q$0|0)==($180|0);
         if (!($181)) {
          $182 = ($180|0)==(0|0);
          if (!($182)) {
           _BN_free($180);
          }
          $183 = (_BN_dup($q$0)|0);
          HEAP32[$174>>2] = $183;
         }
         $184 = HEAP32[$175>>2]|0;
         $185 = ($184|0)==(0|0);
         if (!($185)) {
          _BN_free($184);
         }
         $186 = (_BN_dup($25)|0);
         HEAP32[$175>>2] = $186;
         $187 = HEAP32[$6>>2]|0;
         $188 = ($187|0)==(0|0);
         if ($188) {
          $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
         } else {
          $189 = HEAP32[$174>>2]|0;
          $190 = ($189|0)==(0|0);
          $191 = ($186|0)==(0|0);
          $or$cond8 = $191 | $190;
          if ($or$cond8) {
           $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = -1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
          } else {
           $192 = ($counter_ret|0)==(0|0);
           if (!($192)) {
            HEAP32[$counter_ret>>2] = $counter$2;
           }
           $193 = ($h_ret|0)==(0|0);
           if ($193) {
            $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = 1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           } else {
            HEAP32[$h_ret>>2] = $h$1$lcssa93;
            $ctx$0$ph54 = $20;$mont$0$ph52 = $22;$ok$016 = 1;$seed$1$ph50 = $seed$0;$seed_tmp$2$ph48 = $seed_tmp$1;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $194 = ($seed$1$ph50|0)==(0|0);
 if (!($194)) {
  _CRYPTO_free($seed$1$ph50);
 }
 $195 = ($seed_tmp$2$ph48|0)==($seed_out|0);
 if (!($195)) {
  _CRYPTO_free($seed_tmp$2$ph48);
 }
 $196 = ($ctx$0$ph54|0)==(0|0);
 if (!($196)) {
  _BN_CTX_end($ctx$0$ph54);
  _BN_CTX_free($ctx$0$ph54);
 }
 $197 = ($mont$0$ph52|0)==(0|0);
 if ($197) {
  (_EVP_MD_CTX_cleanup($mctx)|0);
  STACKTOP = sp;return ($ok$016|0);
 }
 _BN_MONT_CTX_free($mont$0$ph52);
 (_EVP_MD_CTX_cleanup($mctx)|0);
 STACKTOP = sp;return ($ok$016|0);
}
function _DSA_generate_key($dsa) {
 $dsa = $dsa|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $local_prk$i = 0, $ok$016$i = 0, $ok$01710$i = 0;
 var $ok$01712$i = 0, $priv_key$0$ph$i = 0, $prk$0$i = 0, $pub_key$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $local_prk$i = sp;
 $0 = ((($dsa)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = (FUNCTION_TABLE_ii[$3 & 127]($dsa)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_BN_CTX_new()|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $ok$01710$i = 0;
 } else {
  $8 = ((($dsa)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $11 = (_BN_new()|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $ok$01712$i = 0;
   } else {
    $priv_key$0$ph$i = $11;
    label = 6;
   }
  } else {
   $priv_key$0$ph$i = $9;
   label = 6;
  }
  if ((label|0) == 6) {
   $13 = ((($dsa)) + 16|0);
   $14 = ((($priv_key$0$ph$i)) + 4|0);
   while(1) {
    $15 = HEAP32[$13>>2]|0;
    $16 = (_BN_rand_range($priv_key$0$ph$i,$15)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $ok$016$i = 0;
     break;
    }
    $18 = HEAP32[$14>>2]|0;
    $19 = ($18|0)==(0);
    if (!($19)) {
     label = 9;
     break;
    }
   }
   do {
    if ((label|0) == 9) {
     $20 = ((($dsa)) + 24|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      $23 = (_BN_new()|0);
      $24 = ($23|0)==(0|0);
      if ($24) {
       $ok$016$i = 0;
       break;
      } else {
       $pub_key$0$i = $23;
      }
     } else {
      $pub_key$0$i = $21;
     }
     $25 = ((($dsa)) + 40|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $26 & 2;
     $28 = ($27|0)==(0);
     if ($28) {
      _BN_init($local_prk$i);
      $29 = HEAP32[$priv_key$0$ph$i>>2]|0;
      HEAP32[$local_prk$i>>2] = $29;
      $30 = HEAP32[$14>>2]|0;
      $31 = ((($local_prk$i)) + 4|0);
      HEAP32[$31>>2] = $30;
      $32 = ((($priv_key$0$ph$i)) + 8|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($local_prk$i)) + 8|0);
      HEAP32[$34>>2] = $33;
      $35 = ((($priv_key$0$ph$i)) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($local_prk$i)) + 12|0);
      HEAP32[$37>>2] = $36;
      $38 = ((($local_prk$i)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $39 & 1;
      $41 = ((($priv_key$0$ph$i)) + 16|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = $42 & -8;
      $44 = $40 | $43;
      $45 = $44 | 6;
      HEAP32[$38>>2] = $45;
      $prk$0$i = $local_prk$i;
     } else {
      $prk$0$i = $priv_key$0$ph$i;
     }
     $46 = ((($dsa)) + 20|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ((($dsa)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (_BN_mod_exp($pub_key$0$i,$47,$prk$0$i,$49,$6)|0);
     $51 = ($50|0)==(0);
     if (!($51)) {
      HEAP32[$8>>2] = $priv_key$0$ph$i;
      HEAP32[$20>>2] = $pub_key$0$i;
      $ok$016$i = 1;
      break;
     }
     $$pr = HEAP32[$20>>2]|0;
     $52 = ($$pr|0)==(0|0);
     if ($52) {
      _BN_free($pub_key$0$i);
      $ok$016$i = 0;
     } else {
      $ok$016$i = 0;
     }
    }
   } while(0);
   $53 = HEAP32[$8>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    _BN_free($priv_key$0$ph$i);
    $ok$01712$i = $ok$016$i;
   } else {
    $ok$01712$i = $ok$016$i;
   }
  }
  _BN_CTX_free($6);
  $ok$01710$i = $ok$01712$i;
 }
 $$0 = $ok$01710$i;
 STACKTOP = sp;return ($$0|0);
}
function _DSA_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_DSA_new_method(0)|0);
 return ($0|0);
}
function _DSA_new_method($engine) {
 $engine = $engine|0;
 var $$0 = 0, $$pre = 0, $$pre$phi12Z2D = 0, $$pre$phi13Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(68,88789,132)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(10,103,65,88789,134);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[47268>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_DSA_OpenSSL()|0);
  HEAP32[47268>>2] = $4;
  $6 = $4;
 } else {
  $6 = $2;
 }
 $5 = ((($0)) + 60|0);
 HEAP32[$5>>2] = $6;
 $7 = ($engine|0)==(0|0);
 do {
  if ($7) {
   $11 = (_ENGINE_get_default_DSA()|0);
   $12 = ((($0)) + 64|0);
   HEAP32[$12>>2] = $11;
   $13 = ($11|0)==(0|0);
   if ($13) {
    $$pre = HEAP32[$5>>2]|0;
    $$pre$phi13Z2D = $12;$24 = $$pre;
   } else {
    $$pre$phi12Z2D = $12;$14 = $11;
    label = 11;
   }
  } else {
   $8 = (_ENGINE_init($engine)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = ((($0)) + 64|0);
    HEAP32[$10>>2] = $engine;
    $$pre$phi12Z2D = $10;$14 = $engine;
    label = 11;
    break;
   }
   _ERR_put_error(10,103,38,88789,141);
   _CRYPTO_free($0);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 11) {
  $15 = (_ENGINE_get_DSA($14)|0);
  HEAP32[$5>>2] = $15;
  $16 = ($15|0)==(0|0);
  if ($16) {
   _ERR_put_error(10,103,38,88789,151);
   $17 = HEAP32[$$pre$phi12Z2D>>2]|0;
   (_ENGINE_finish($17)|0);
   _CRYPTO_free($0);
   $$0 = 0;
   return ($$0|0);
  } else {
   $$pre$phi13Z2D = $$pre$phi12Z2D;$24 = $15;
  }
 }
 HEAP32[$0>>2] = 0;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 8|0);
 HEAP32[$19>>2] = 1;
 $20 = ((($0)) + 12|0);
 $21 = ((($0)) + 44|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($0)) + 48|0);
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;HEAP32[$20+16>>2]=0|0;HEAP32[$20+20>>2]=0|0;HEAP32[$20+24>>2]=0|0;
 HEAP32[$22>>2] = 1;
 $23 = ((($24)) + 32|0);
 $25 = HEAP32[$23>>2]|0;
 $26 = $25 & -1025;
 $27 = ((($0)) + 40|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($0)) + 52|0);
 (_CRYPTO_new_ex_data(7,$0,$28)|0);
 $29 = HEAP32[$5>>2]|0;
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $$0 = $0;
  return ($$0|0);
 }
 $33 = (FUNCTION_TABLE_ii[$31 & 127]($0)|0);
 $34 = ($33|0)==(0);
 if (!($34)) {
  $$0 = $0;
  return ($$0|0);
 }
 $35 = HEAP32[$$pre$phi13Z2D>>2]|0;
 $36 = ($35|0)==(0|0);
 if (!($36)) {
  (_ENGINE_finish($35)|0);
 }
 _CRYPTO_free_ex_data(7,$0,$28);
 _CRYPTO_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _DSA_free($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($r)) + 48|0);
 $2 = (_CRYPTO_add_lock($1,-1,8,88789,196)|0);
 $3 = ($2|0)>(0);
 if ($3) {
  return;
 }
 $4 = ((($r)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  (FUNCTION_TABLE_ii[$7 & 127]($r)|0);
 }
 $9 = ((($r)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  (_ENGINE_finish($10)|0);
 }
 $12 = ((($r)) + 52|0);
 _CRYPTO_free_ex_data(7,$r,$12);
 $13 = ((($r)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _BN_clear_free($14);
 }
 $16 = ((($r)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  _BN_clear_free($17);
 }
 $19 = ((($r)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  _BN_clear_free($20);
 }
 $22 = ((($r)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  _BN_clear_free($23);
 }
 $25 = ((($r)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _BN_clear_free($26);
 }
 $28 = ((($r)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  _BN_clear_free($29);
 }
 $31 = ((($r)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  _BN_clear_free($32);
 }
 _CRYPTO_free($r);
 return;
}
function _DSA_size($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bs = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $bs = sp;
 $buf = sp + 16|0;
 $0 = ((($r)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_BN_num_bits($1)|0);
 $3 = (($2) + 7)|0;
 $4 = (($3|0) / 8)&-1;
 HEAP32[$bs>>2] = $4;
 $5 = ((($bs)) + 8|0);
 HEAP32[$5>>2] = $buf;
 $6 = ((($bs)) + 4|0);
 HEAP32[$6>>2] = 2;
 HEAP8[$buf>>0] = -1;
 $7 = (_i2d_ASN1_INTEGER($bs,0)|0);
 $8 = $7 << 1;
 $9 = (_ASN1_object_size(1,$8,16)|0);
 STACKTOP = sp;return ($9|0);
}
function _DSA_dup_DH($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_DH_new()|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($r)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  label = 5;
 } else {
  $6 = (_BN_dup($4)|0);
  $7 = ((($1)) + 8|0);
  HEAP32[$7>>2] = $6;
  $8 = ($6|0)==(0|0);
  if (!($8)) {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $9 = ((($r)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $12 = (_BN_num_bits($10)|0);
    $13 = ((($1)) + 16|0);
    HEAP32[$13>>2] = $12;
    $14 = HEAP32[$9>>2]|0;
    $15 = (_BN_dup($14)|0);
    $16 = ((($1)) + 36|0);
    HEAP32[$16>>2] = $15;
    $17 = ($15|0)==(0|0);
    if ($17) {
     break;
    }
   }
   $18 = ((($r)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = (_BN_dup($19)|0);
    $22 = ((($1)) + 12|0);
    HEAP32[$22>>2] = $21;
    $23 = ($21|0)==(0|0);
    if ($23) {
     break;
    }
   }
   $24 = ((($r)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = (_BN_dup($25)|0);
    $28 = ((($1)) + 20|0);
    HEAP32[$28>>2] = $27;
    $29 = ($27|0)==(0|0);
    if ($29) {
     break;
    }
   }
   $30 = ((($r)) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if ($32) {
    $$0 = $1;
    return ($$0|0);
   }
   $33 = (_BN_dup($31)|0);
   $34 = ((($1)) + 24|0);
   HEAP32[$34>>2] = $33;
   $35 = ($33|0)==(0|0);
   if (!($35)) {
    $$0 = $1;
    return ($$0|0);
   }
  }
 } while(0);
 _DH_free($1);
 $$0 = 0;
 return ($$0|0);
}
function _DSA_OpenSSL() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (47272|0);
}
function _dsa_do_sign($dgst,$dlen,$dsa) {
 $dgst = $dgst|0;
 $dlen = $dlen|0;
 $dsa = $dsa|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx$0$ph = 0, $ctx$02 = 0, $kinv = 0, $m = 0, $noredo$1 = 0, $r = 0, $reason$0$ph = 0, $ret$05 = 0, $s$0$ph = 0, $xr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $kinv = sp + 44|0;
 $r = sp + 40|0;
 $m = sp + 20|0;
 $xr = sp;
 HEAP32[$kinv>>2] = 0;
 HEAP32[$r>>2] = 0;
 _BN_init($m);
 _BN_init($xr);
 $0 = ((($dsa)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $ctx$0$ph = 0;$reason$0$ph = 101;$s$0$ph = 0;
   label = 24;
  } else {
   $3 = ((($dsa)) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $ctx$0$ph = 0;$reason$0$ph = 101;$s$0$ph = 0;
    label = 24;
   } else {
    $6 = ((($dsa)) + 20|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $ctx$0$ph = 0;$reason$0$ph = 101;$s$0$ph = 0;
     label = 24;
    } else {
     $9 = (_BN_new()|0);
     $10 = ($9|0)==(0|0);
     if ($10) {
      $ctx$0$ph = 0;$reason$0$ph = 3;$s$0$ph = 0;
      label = 24;
     } else {
      $11 = (_BN_CTX_new()|0);
      $12 = ($11|0)==(0|0);
      if ($12) {
       $ctx$0$ph = 0;$reason$0$ph = 3;$s$0$ph = $9;
       label = 24;
      } else {
       $13 = ((($dsa)) + 32|0);
       $14 = ((($dsa)) + 28|0);
       $15 = ((($9)) + 4|0);
       $16 = ((($dsa)) + 36|0);
       $$0 = $dlen;
       while(1) {
        $17 = HEAP32[$13>>2]|0;
        $18 = ($17|0)==(0|0);
        if ($18) {
         label = 9;
        } else {
         $19 = HEAP32[$16>>2]|0;
         $20 = ($19|0)==(0|0);
         if ($20) {
          label = 9;
         } else {
          $23 = $19;
          HEAP32[$kinv>>2] = $17;
          HEAP32[$13>>2] = 0;
          HEAP32[$r>>2] = $23;
          HEAP32[$16>>2] = 0;
          $noredo$1 = 1;
         }
        }
        if ((label|0) == 9) {
         label = 0;
         $21 = (_DSA_sign_setup($dsa,$11,$kinv,$r)|0);
         $22 = ($21|0)==(0);
         if ($22) {
          $ctx$0$ph = $11;$reason$0$ph = 3;$s$0$ph = $9;
          label = 24;
          break L1;
         } else {
          $noredo$1 = 0;
         }
        }
        $24 = HEAP32[$3>>2]|0;
        $25 = (_BN_num_bits($24)|0);
        $26 = (($25) + 7)|0;
        $27 = (($26|0) / 8)&-1;
        $28 = ($$0|0)>($27|0);
        if ($28) {
         $29 = HEAP32[$3>>2]|0;
         $30 = (_BN_num_bits($29)|0);
         $31 = (($30) + 7)|0;
         $32 = (($31|0) / 8)&-1;
         $$1 = $32;
        } else {
         $$1 = $$0;
        }
        $33 = (_BN_bin2bn($dgst,$$1,$m)|0);
        $34 = ($33|0)==(0|0);
        if ($34) {
         $ctx$0$ph = $11;$reason$0$ph = 3;$s$0$ph = $9;
         label = 24;
         break L1;
        }
        $35 = HEAP32[$14>>2]|0;
        $36 = HEAP32[$r>>2]|0;
        $37 = HEAP32[$3>>2]|0;
        $38 = (_BN_mod_mul($xr,$35,$36,$37,$11)|0);
        $39 = ($38|0)==(0);
        if ($39) {
         $ctx$0$ph = $11;$reason$0$ph = 3;$s$0$ph = $9;
         label = 24;
         break L1;
        }
        $40 = (_BN_add($9,$xr,$m)|0);
        $41 = ($40|0)==(0);
        if ($41) {
         $ctx$0$ph = $11;$reason$0$ph = 3;$s$0$ph = $9;
         label = 24;
         break L1;
        }
        $42 = HEAP32[$3>>2]|0;
        $43 = (_BN_cmp($9,$42)|0);
        $44 = ($43|0)>(0);
        if ($44) {
         $45 = HEAP32[$3>>2]|0;
         $46 = (_BN_sub($9,$9,$45)|0);
         $47 = ($46|0)==(0);
         if ($47) {
          $ctx$0$ph = $11;$reason$0$ph = 3;$s$0$ph = $9;
          label = 24;
          break L1;
         }
        }
        $48 = HEAP32[$kinv>>2]|0;
        $49 = HEAP32[$3>>2]|0;
        $50 = (_BN_mod_mul($9,$9,$48,$49,$11)|0);
        $51 = ($50|0)==(0);
        if ($51) {
         $ctx$0$ph = $11;$reason$0$ph = 3;$s$0$ph = $9;
         label = 24;
         break L1;
        }
        $52 = HEAP32[$r>>2]|0;
        $53 = ((($52)) + 4|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0);
        if (!($55)) {
         $56 = HEAP32[$15>>2]|0;
         $57 = ($56|0)==(0);
         if (!($57)) {
          break;
         }
        }
        $58 = ($noredo$1|0)==(0);
        if ($58) {
         $$0 = $$1;
        } else {
         $ctx$0$ph = $11;$reason$0$ph = 110;$s$0$ph = $9;
         label = 24;
         break L1;
        }
       }
       $59 = (_DSA_SIG_new()|0);
       $60 = ($59|0)==(0|0);
       if ($60) {
        $ctx$0$ph = $11;$reason$0$ph = 3;$s$0$ph = $9;
        label = 24;
       } else {
        $61 = HEAP32[$r>>2]|0;
        HEAP32[$59>>2] = $61;
        $62 = ((($59)) + 4|0);
        HEAP32[$62>>2] = $9;
        $ctx$02 = $11;$ret$05 = $59;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 24) {
  _ERR_put_error(10,112,$reason$0$ph,88818,209);
  $63 = HEAP32[$r>>2]|0;
  _BN_free($63);
  _BN_free($s$0$ph);
  $ctx$02 = $ctx$0$ph;$ret$05 = 0;
 }
 $64 = ($ctx$02|0)==(0|0);
 if (!($64)) {
  _BN_CTX_free($ctx$02);
 }
 _BN_clear_free($m);
 _BN_clear_free($xr);
 $65 = HEAP32[$kinv>>2]|0;
 $66 = ($65|0)==(0|0);
 if ($66) {
  STACKTOP = sp;return ($ret$05|0);
 }
 _BN_clear_free($65);
 STACKTOP = sp;return ($ret$05|0);
}
function _dsa_sign_setup($dsa,$ctx_in,$kinvp,$rp) {
 $dsa = $dsa|0;
 $ctx_in = $ctx_in|0;
 $kinvp = $kinvp|0;
 $rp = $rp|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $K$0 = 0, $_tmp_res53$0 = 0, $ctx$0 = 0, $ctx$1$ph$ph = 0, $ctx$11 = 0, $k = 0, $kq = 0, $ret$04 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $k = sp + 20|0;
 $kq = sp;
 $0 = ((($dsa)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($dsa)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($dsa)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    _BN_init($k);
    _BN_init($kq);
    $9 = ($ctx_in|0)==(0|0);
    if ($9) {
     $10 = (_BN_CTX_new()|0);
     $11 = ($10|0)==(0|0);
     if ($11) {
      $ctx$1$ph$ph = 0;
      label = 32;
     } else {
      $ctx$0 = $10;
      label = 7;
     }
    } else {
     $ctx$0 = $ctx_in;
     label = 7;
    }
    L7: do {
     if ((label|0) == 7) {
      $12 = (_BN_new()|0);
      $13 = ($12|0)==(0|0);
      if ($13) {
       $ctx$1$ph$ph = $ctx$0;
       label = 32;
      } else {
       $14 = ((($k)) + 4|0);
       while(1) {
        $15 = HEAP32[$3>>2]|0;
        $16 = (_BN_rand_range($k,$15)|0);
        $17 = ($16|0)==(0);
        if ($17) {
         break;
        }
        $18 = HEAP32[$14>>2]|0;
        $19 = ($18|0)==(0);
        if (!($19)) {
         label = 11;
         break;
        }
       }
       do {
        if ((label|0) == 11) {
         $20 = ((($dsa)) + 40|0);
         $21 = HEAP32[$20>>2]|0;
         $22 = $21 & 2;
         $23 = ($22|0)==(0);
         if ($23) {
          $24 = ((($k)) + 16|0);
          $25 = HEAP32[$24>>2]|0;
          $26 = $25 | 4;
          HEAP32[$24>>2] = $26;
         }
         $27 = $21 & 1;
         $28 = ($27|0)==(0);
         if ($28) {
          $34 = $21;
         } else {
          $29 = ((($dsa)) + 44|0);
          $30 = HEAP32[$0>>2]|0;
          $31 = (_BN_MONT_CTX_set_locked($29,8,$30,$ctx$0)|0);
          $32 = ($31|0)==(0|0);
          if ($32) {
           break;
          }
          $$pre = HEAP32[$20>>2]|0;
          $34 = $$pre;
         }
         $33 = $34 & 2;
         $35 = ($33|0)==(0);
         if ($35) {
          $36 = (_BN_copy($kq,$k)|0);
          $37 = ($36|0)==(0|0);
          if ($37) {
           break;
          }
          $38 = HEAP32[$3>>2]|0;
          $39 = (_BN_add($kq,$kq,$38)|0);
          $40 = ($39|0)==(0);
          if ($40) {
           break;
          }
          $41 = (_BN_num_bits($kq)|0);
          $42 = HEAP32[$3>>2]|0;
          $43 = (_BN_num_bits($42)|0);
          $44 = ($41|0)>($43|0);
          if ($44) {
           $K$0 = $kq;
          } else {
           $45 = HEAP32[$3>>2]|0;
           $46 = (_BN_add($kq,$kq,$45)|0);
           $47 = ($46|0)==(0);
           if ($47) {
            break;
           } else {
            $K$0 = $kq;
           }
          }
         } else {
          $K$0 = $k;
         }
         $48 = ((($dsa)) + 60|0);
         $49 = HEAP32[$48>>2]|0;
         $50 = ((($49)) + 20|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($51|0)==(0|0);
         $53 = HEAP32[$6>>2]|0;
         $54 = HEAP32[$0>>2]|0;
         $55 = ((($dsa)) + 44|0);
         $56 = HEAP32[$55>>2]|0;
         if ($52) {
          $58 = (_BN_mod_exp_mont($12,$53,$K$0,$54,$ctx$0,$56)|0);
          $_tmp_res53$0 = $58;
         } else {
          $57 = (FUNCTION_TABLE_iiiiiiii[$51 & 31]($dsa,$12,$53,$K$0,$54,$ctx$0,$56)|0);
          $_tmp_res53$0 = $57;
         }
         $59 = ($_tmp_res53$0|0)==(0);
         if (!($59)) {
          $60 = HEAP32[$3>>2]|0;
          $61 = (_BN_div(0,$12,$12,$60,$ctx$0)|0);
          $62 = ($61|0)==(0);
          if (!($62)) {
           $63 = HEAP32[$3>>2]|0;
           $64 = (_BN_mod_inverse(0,$k,$63,$ctx$0)|0);
           $65 = ($64|0)==(0|0);
           if (!($65)) {
            $66 = HEAP32[$kinvp>>2]|0;
            $67 = ($66|0)==(0|0);
            if (!($67)) {
             _BN_clear_free($66);
            }
            HEAP32[$kinvp>>2] = $64;
            $68 = HEAP32[$rp>>2]|0;
            $69 = ($68|0)==(0|0);
            if (!($69)) {
             _BN_clear_free($68);
            }
            HEAP32[$rp>>2] = $12;
            $ctx$11 = $ctx$0;$ret$04 = 1;
            break L7;
           }
          }
         }
        }
       } while(0);
       _ERR_put_error(10,107,3,88818,304);
       _BN_clear_free($12);
       $ctx$11 = $ctx$0;$ret$04 = 0;
      }
     }
    } while(0);
    if ((label|0) == 32) {
     _ERR_put_error(10,107,3,88818,304);
     $ctx$11 = $ctx$1$ph$ph;$ret$04 = 0;
    }
    if ($9) {
     _BN_CTX_free($ctx$11);
    }
    _BN_clear_free($k);
    _BN_clear_free($kq);
    $$0 = $ret$04;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 _ERR_put_error(10,107,101,88818,230);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _dsa_do_verify($dgst,$dgst_len,$sig,$dsa) {
 $dgst = $dgst|0;
 $dgst_len = $dgst_len|0;
 $sig = $sig|0;
 $dsa = $dsa|0;
 var $$0 = 0, $$dgst_len = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $_tmp_res53$0 = 0, $mont$0 = 0, $ret$0510 = 0, $ret$059 = 0, $t1 = 0, $u1 = 0, $u2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $u1 = sp + 40|0;
 $u2 = sp + 20|0;
 $t1 = sp;
 $0 = ((($dsa)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($dsa)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($dsa)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = (_BN_num_bits($4)|0);
    switch ($9|0) {
    case 160: case 224: case 256:  {
     break;
    }
    default: {
     _ERR_put_error(10,113,102,88818,330);
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = (_BN_num_bits($10)|0);
    $12 = ($11|0)>(10000);
    if ($12) {
     _ERR_put_error(10,113,103,88818,335);
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    _BN_init($u1);
    _BN_init($u2);
    _BN_init($t1);
    $13 = (_BN_CTX_new()|0);
    $14 = ($13|0)==(0|0);
    if ($14) {
     _ERR_put_error(10,113,3,88818,402);
     $ret$0510 = -1;
    } else {
     $15 = HEAP32[$sig>>2]|0;
     $16 = ((($15)) + 4|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(0);
     L16: do {
      if ($18) {
       $ret$059 = 0;
      } else {
       $19 = ((($15)) + 12|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = ($20|0)==(0);
       if ($21) {
        $22 = HEAP32[$3>>2]|0;
        $23 = (_BN_ucmp($15,$22)|0);
        $24 = ($23|0)>(-1);
        if ($24) {
         $ret$059 = 0;
        } else {
         $25 = ((($sig)) + 4|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ((($26)) + 4|0);
         $28 = HEAP32[$27>>2]|0;
         $29 = ($28|0)==(0);
         if ($29) {
          $ret$059 = 0;
         } else {
          $30 = ((($26)) + 12|0);
          $31 = HEAP32[$30>>2]|0;
          $32 = ($31|0)==(0);
          if ($32) {
           $33 = HEAP32[$3>>2]|0;
           $34 = (_BN_ucmp($26,$33)|0);
           $35 = ($34|0)>(-1);
           if ($35) {
            $ret$059 = 0;
           } else {
            $36 = HEAP32[$25>>2]|0;
            $37 = HEAP32[$3>>2]|0;
            $38 = (_BN_mod_inverse($u2,$36,$37,$13)|0);
            $39 = ($38|0)==(0|0);
            do {
             if (!($39)) {
              $40 = $9 >> 3;
              $41 = ($40|0)<($dgst_len|0);
              $$dgst_len = $41 ? $40 : $dgst_len;
              $42 = (_BN_bin2bn($dgst,$$dgst_len,$u1)|0);
              $43 = ($42|0)==(0|0);
              if (!($43)) {
               $44 = HEAP32[$3>>2]|0;
               $45 = (_BN_mod_mul($u1,$u1,$u2,$44,$13)|0);
               $46 = ($45|0)==(0);
               if (!($46)) {
                $47 = HEAP32[$sig>>2]|0;
                $48 = HEAP32[$3>>2]|0;
                $49 = (_BN_mod_mul($u2,$47,$u2,$48,$13)|0);
                $50 = ($49|0)==(0);
                if (!($50)) {
                 $51 = ((($dsa)) + 40|0);
                 $52 = HEAP32[$51>>2]|0;
                 $53 = $52 & 1;
                 $54 = ($53|0)==(0);
                 if ($54) {
                  $mont$0 = 0;
                 } else {
                  $55 = ((($dsa)) + 44|0);
                  $56 = HEAP32[$0>>2]|0;
                  $57 = (_BN_MONT_CTX_set_locked($55,8,$56,$13)|0);
                  $58 = ($57|0)==(0|0);
                  if ($58) {
                   break;
                  } else {
                   $mont$0 = $57;
                  }
                 }
                 $59 = ((($dsa)) + 60|0);
                 $60 = HEAP32[$59>>2]|0;
                 $61 = ((($60)) + 16|0);
                 $62 = HEAP32[$61>>2]|0;
                 $63 = ($62|0)==(0|0);
                 $64 = HEAP32[$6>>2]|0;
                 $65 = ((($dsa)) + 24|0);
                 $66 = HEAP32[$65>>2]|0;
                 $67 = HEAP32[$0>>2]|0;
                 if ($63) {
                  $69 = (_BN_mod_exp2_mont($t1,$64,$u1,$66,$u2,$67,$13,$mont$0)|0);
                  $_tmp_res53$0 = $69;
                 } else {
                  $68 = (FUNCTION_TABLE_iiiiiiiiii[$62 & 31]($dsa,$t1,$64,$u1,$66,$u2,$67,$13,$mont$0)|0);
                  $_tmp_res53$0 = $68;
                 }
                 $70 = ($_tmp_res53$0|0)==(0);
                 if ($70) {
                  break;
                 }
                 $71 = HEAP32[$3>>2]|0;
                 $72 = (_BN_div(0,$u1,$t1,$71,$13)|0);
                 $73 = ($72|0)==(0);
                 if ($73) {
                  break;
                 }
                 $74 = HEAP32[$sig>>2]|0;
                 $75 = (_BN_ucmp($u1,$74)|0);
                 $76 = ($75|0)==(0);
                 $77 = $76&1;
                 $ret$059 = $77;
                 break L16;
                }
               }
              }
             }
            } while(0);
            _ERR_put_error(10,113,3,88818,402);
            $ret$059 = -1;
           }
          } else {
           $ret$059 = 0;
          }
         }
        }
       } else {
        $ret$059 = 0;
       }
      }
     } while(0);
     _BN_CTX_free($13);
     $ret$0510 = $ret$059;
    }
    _BN_free($u1);
    _BN_free($u2);
    _BN_free($t1);
    $$0 = $ret$0510;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 _ERR_put_error(10,113,101,88818,323);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _dsa_init($dsa) {
 $dsa = $dsa|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dsa)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 return 1;
}
function _dsa_finish($dsa) {
 $dsa = $dsa|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dsa)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return 1;
 }
 _BN_MONT_CTX_free($1);
 return 1;
}
function _pkey_dsa_init($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(24,88883,84)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1024;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 160;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($ctx)) + 20|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($0)) + 12|0);
 $7 = ((($ctx)) + 32|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($ctx)) + 36|0);
 HEAP32[$8>>2] = 2;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_dsa_copy($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(24,88883,84)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1024;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 160;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($dst)) + 20|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($0)) + 12|0);
 $7 = ((($dst)) + 32|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($dst)) + 36|0);
 HEAP32[$8>>2] = 2;
 $9 = ((($src)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$0>>2] = $11;
 $12 = ((($10)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($10)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($10)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 20|0);
 HEAP32[$20>>2] = $19;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_dsa_cleanup($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 _CRYPTO_free($1);
 return;
}
function _pkey_dsa_paramgen($ctx,$pkey) {
 $ctx = $ctx|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cb = 0, $pcb$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cb = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $pcb$0 = 0;
 } else {
  _evp_pkey_set_cb_translate($cb,$ctx);
  $pcb$0 = $cb;
 }
 $5 = (_DSA_new()|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_dsa_builtin_paramgen($5,$7,$9,$11,0,0,0,0,0,$pcb$0)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  _DSA_free($5);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  (_EVP_PKEY_assign($pkey,116,$5)|0);
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _pkey_dsa_keygen($ctx,$pkey) {
 $ctx = $ctx|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(10,121,107,88883,268);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_DSA_new()|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 (_EVP_PKEY_assign($pkey,116,$3)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EVP_PKEY_copy_parameters($pkey,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($pkey)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_DSA_generate_key($9)|0);
 $$0 = $10;
 return ($$0|0);
}
function _pkey_dsa_sign($ctx,$sig,$siglen,$tbs,$tbslen) {
 $ctx = $ctx|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $tbs = $tbs|0;
 $tbslen = $tbslen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sltmp = 0, $type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sltmp = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $type$0 = 64;
 } else {
  $9 = (_EVP_MD_type($7)|0);
  $type$0 = $9;
 }
 $10 = (_DSA_sign($type$0,$tbs,$tbslen,$sig,$sltmp,$5)|0);
 $11 = ($10|0)<(1);
 if ($11) {
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$sltmp>>2]|0;
 HEAP32[$siglen>>2] = $12;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _pkey_dsa_verify($ctx,$sig,$siglen,$tbs,$tbslen) {
 $ctx = $ctx|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $tbs = $tbs|0;
 $tbslen = $tbslen|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $type$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $type$0 = 64;
 } else {
  $9 = (_EVP_MD_type($7)|0);
  $type$0 = $9;
 }
 $10 = (_DSA_verify($type$0,$tbs,$tbslen,$sig,$siglen,$5)|0);
 return ($10|0);
}
function _pkey_dsa_ctrl($ctx,$type,$p1,$p2) {
 $ctx = $ctx|0;
 $type = $type|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($type|0) {
 case 4097:  {
  $2 = ($p1|0)<(256);
  if ($2) {
   $$0 = -2;
   return ($$0|0);
  }
  HEAP32[$1>>2] = $p1;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 4098:  {
  switch ($p1|0) {
  case 0: case 160: case 224: case 256:  {
   break;
  }
  default: {
   $$0 = -2;
   return ($$0|0);
  }
  }
  $3 = ((($1)) + 4|0);
  HEAP32[$3>>2] = $p1;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 4099:  {
  $4 = (_EVP_MD_type($p2)|0);
  $5 = ($4|0)==(64);
  if (!($5)) {
   $6 = (_EVP_MD_type($p2)|0);
   $7 = ($6|0)==(675);
   if (!($7)) {
    $8 = (_EVP_MD_type($p2)|0);
    $9 = ($8|0)==(672);
    if (!($9)) {
     _ERR_put_error(10,120,106,88883,180);
     $$0 = 0;
     return ($$0|0);
    }
   }
  }
  $10 = ((($1)) + 20|0);
  HEAP32[$10>>2] = $p2;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 1:  {
  $11 = (_EVP_MD_type($p2)|0);
  $12 = ($11|0)==(64);
  if (!($12)) {
   $13 = (_EVP_MD_type($p2)|0);
   $14 = ($13|0)==(116);
   if (!($14)) {
    $15 = (_EVP_MD_type($p2)|0);
    $16 = ($15|0)==(66);
    if (!($16)) {
     $17 = (_EVP_MD_type($p2)|0);
     $18 = ($17|0)==(675);
     if (!($18)) {
      $19 = (_EVP_MD_type($p2)|0);
      $20 = ($19|0)==(672);
      if (!($20)) {
       $21 = (_EVP_MD_type($p2)|0);
       $22 = ($21|0)==(673);
       if (!($22)) {
        $23 = (_EVP_MD_type($p2)|0);
        $24 = ($23|0)==(674);
        if (!($24)) {
         _ERR_put_error(10,120,106,88883,194);
         $$0 = 0;
         return ($$0|0);
        }
       }
      }
     }
    }
   }
  }
  $25 = ((($1)) + 20|0);
  HEAP32[$25>>2] = $p2;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 13:  {
  $26 = ((($1)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$p2>>2] = $27;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 2:  {
  _ERR_put_error(10,120,150,88883,211);
  $$0 = -2;
  return ($$0|0);
  break;
 }
 case 11: case 5: case 7:  {
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _pkey_dsa_ctrl_str($ctx,$type,$value) {
 $ctx = $ctx|0;
 $type = $type|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($type,88829)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_atoi($value)|0);
  $3 = (_EVP_PKEY_CTX_ctrl($ctx,116,2,4097,$2,0)|0);
  $$0 = $3;
  return ($$0|0);
 }
 $4 = (_strcmp($type,88847)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_atoi($value)|0);
  $7 = (_EVP_PKEY_CTX_ctrl($ctx,116,2,4098,$6,0)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $8 = (_strcmp($type,88867)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = -2;
  return ($$0|0);
 }
 $10 = (_EVP_get_digestbyname($value)|0);
 $11 = (_EVP_PKEY_CTX_ctrl($ctx,116,2,4099,0,$10)|0);
 $$0 = $11;
 return ($$0|0);
}
function _DSA_do_sign($dgst,$dlen,$dsa) {
 $dgst = $dgst|0;
 $dlen = $dlen|0;
 $dsa = $dsa|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dsa)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 63]($dgst,$dlen,$dsa)|0);
 return ($4|0);
}
function _DSA_sign_setup($dsa,$ctx_in,$kinvp,$rp) {
 $dsa = $dsa|0;
 $ctx_in = $ctx_in|0;
 $kinvp = $kinvp|0;
 $rp = $rp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dsa)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 127]($dsa,$ctx_in,$kinvp,$rp)|0);
 return ($4|0);
}
function _DSA_SIG_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(8,88895,93)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $$0 = $0;
 return ($$0|0);
}
function _DSA_SIG_free($sig) {
 $sig = $sig|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sig|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$sig>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _BN_free($1);
 }
 $3 = ((($sig)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _BN_free($4);
 }
 _CRYPTO_free($sig);
 return;
}
function _DSA_do_verify($dgst,$dgst_len,$sig,$dsa) {
 $dgst = $dgst|0;
 $dgst_len = $dgst_len|0;
 $sig = $sig|0;
 $dsa = $dsa|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dsa)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 127]($dgst,$dgst_len,$sig,$dsa)|0);
 return ($4|0);
}
function _int_dh_param_copy($to,$from,$is_x942) {
 $to = $to|0;
 $from = $from|0;
 $is_x942 = $is_x942|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$0$i = 0, $a$0$i2 = 0, $a$0$i5 = 0, $a$0$i8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($is_x942|0)==(-1);
 if ($0) {
  $1 = ((($from)) + 36|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)!=(0|0);
  $4 = $3&1;
  $$0 = $4;
 } else {
  $$0 = $is_x942;
 }
 $5 = ((($to)) + 8|0);
 $6 = ((($from)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $a$0$i = 0;
 } else {
  $9 = (_BN_dup($7)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$01 = 0;
   return ($$01|0);
  } else {
   $a$0$i = $9;
  }
 }
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _BN_free($11);
 }
 HEAP32[$5>>2] = $a$0$i;
 $13 = ((($to)) + 12|0);
 $14 = ((($from)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $a$0$i2 = 0;
 } else {
  $17 = (_BN_dup($15)|0);
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$01 = 0;
   return ($$01|0);
  } else {
   $a$0$i2 = $17;
  }
 }
 $19 = HEAP32[$13>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  _BN_free($19);
 }
 HEAP32[$13>>2] = $a$0$i2;
 $21 = ($$0|0)==(0);
 if ($21) {
  $51 = ((($from)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($to)) + 16|0);
  HEAP32[$53>>2] = $52;
  $$01 = 1;
  return ($$01|0);
 }
 $22 = ((($to)) + 36|0);
 $23 = ((($from)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $a$0$i5 = 0;
 } else {
  $26 = (_BN_dup($24)|0);
  $27 = ($26|0)==(0|0);
  if ($27) {
   $$01 = 0;
   return ($$01|0);
  } else {
   $a$0$i5 = $26;
  }
 }
 $28 = HEAP32[$22>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  _BN_free($28);
 }
 HEAP32[$22>>2] = $a$0$i5;
 $30 = ((($to)) + 40|0);
 $31 = ((($from)) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $a$0$i8 = 0;
 } else {
  $34 = (_BN_dup($32)|0);
  $35 = ($34|0)==(0|0);
  if ($35) {
   $$01 = 0;
   return ($$01|0);
  } else {
   $a$0$i8 = $34;
  }
 }
 $36 = HEAP32[$30>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  _BN_free($36);
 }
 HEAP32[$30>>2] = $a$0$i8;
 $38 = ((($to)) + 44|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  _CRYPTO_free($39);
  HEAP32[$38>>2] = 0;
  $41 = ((($to)) + 48|0);
  HEAP32[$41>>2] = 0;
 }
 $42 = ((($from)) + 44|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $$01 = 1;
  return ($$01|0);
 }
 $45 = ((($from)) + 48|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (_BUF_memdup($43,$46)|0);
 HEAP32[$38>>2] = $47;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $$01 = 0;
  return ($$01|0);
 }
 $49 = HEAP32[$45>>2]|0;
 $50 = ((($to)) + 48|0);
 HEAP32[$50>>2] = $49;
 $$01 = 1;
 return ($$01|0);
}
function _do_dh_print($bp,$x,$indent,$ptype) {
 $bp = $bp|0;
 $x = $x|0;
 $indent = $indent|0;
 $ptype = $ptype|0;
 var $$ = 0, $$0 = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$9 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0, $ktype$0 = 0, $m$0 = 0, $m$1 = 0, $priv_key$07 = 0, $priv_key$08 = 0, $pub_key$0 = 0, $reason$0 = 0, $ret$0 = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($ptype|0)==(2);
 if ($0) {
  $1 = ((($x)) + 24|0);
  $2 = HEAP32[$1>>2]|0;
  $priv_key$08 = $2;
  label = 4;
 } else {
  $3 = ($ptype|0)>(0);
  if ($3) {
   $priv_key$08 = 0;
   label = 4;
  } else {
   $priv_key$07 = 0;$pub_key$0 = 0;
  }
 }
 if ((label|0) == 4) {
  $4 = ((($x)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $priv_key$07 = $priv_key$08;$pub_key$0 = $5;
 }
 $6 = ((($x)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 L7: do {
  if ($8) {
   $m$0 = 0;$reason$0 = 67;
   label = 42;
  } else {
   $9 = (_BN_num_bits($7)|0);
   $10 = (($9) + 7)|0;
   $11 = (($10|0) / 8)&-1;
   $$off = (($9) + 14)|0;
   $12 = ($$off>>>0)<(15);
   if ($12) {
    $m$0 = 0;$reason$0 = 67;
    label = 42;
   } else {
    $13 = ((($x)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     $27 = $11;
    } else {
     $16 = (_BN_num_bits($14)|0);
     $17 = (($16) + 7)|0;
     $18 = (($17|0) / 8)&-1;
     $19 = ($11>>>0)<($18>>>0);
     $$9 = $19 ? $18 : $11;
     $27 = $$9;
    }
    $20 = ((($x)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $35 = $27;
    } else {
     $23 = (_BN_num_bits($21)|0);
     $24 = (($23) + 7)|0;
     $25 = (($24|0) / 8)&-1;
     $26 = ($27>>>0)<($25>>>0);
     $$10 = $26 ? $25 : $27;
     $35 = $$10;
    }
    $28 = ((($x)) + 40|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if ($30) {
     $43 = $35;
    } else {
     $31 = (_BN_num_bits($29)|0);
     $32 = (($31) + 7)|0;
     $33 = (($32|0) / 8)&-1;
     $34 = ($35>>>0)<($33>>>0);
     $$11 = $34 ? $33 : $35;
     $43 = $$11;
    }
    $36 = ((($x)) + 52|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0|0);
    if ($38) {
     $49 = $43;
    } else {
     $39 = (_BN_num_bits($37)|0);
     $40 = (($39) + 7)|0;
     $41 = (($40|0) / 8)&-1;
     $42 = ($43>>>0)<($41>>>0);
     $$12 = $42 ? $41 : $43;
     $49 = $$12;
    }
    $44 = ($pub_key$0|0)==(0|0);
    if ($44) {
     $55 = $49;
    } else {
     $45 = (_BN_num_bits($pub_key$0)|0);
     $46 = (($45) + 7)|0;
     $47 = (($46|0) / 8)&-1;
     $48 = ($49>>>0)<($47>>>0);
     $$13 = $48 ? $47 : $49;
     $55 = $$13;
    }
    $50 = ($priv_key$07|0)==(0|0);
    if ($50) {
     $57 = $55;
    } else {
     $51 = (_BN_num_bits($priv_key$07)|0);
     $52 = (($51) + 7)|0;
     $53 = (($52|0) / 8)&-1;
     $54 = ($55>>>0)<($53>>>0);
     $$14 = $54 ? $53 : $55;
     $57 = $$14;
    }
    $56 = (($57) + 10)|0;
    $58 = (_CRYPTO_malloc($56,88964,375)|0);
    $59 = ($58|0)==(0|0);
    if ($59) {
     $m$0 = 0;$reason$0 = 65;
     label = 42;
    } else {
     $60 = ($ptype|0)==(1);
     $$ = $60 ? 88975 : 88989;
     $ktype$0 = $0 ? 89003 : $$;
     (_BIO_indent($bp,$indent,128)|0);
     $61 = HEAP32[$6>>2]|0;
     $62 = (_BN_num_bits($61)|0);
     HEAP32[$vararg_buffer>>2] = $ktype$0;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $62;
     $63 = (_BIO_printf($bp,89018,$vararg_buffer)|0);
     $64 = ($63|0)<(1);
     if ($64) {
      $m$0 = $58;$reason$0 = 7;
      label = 42;
     } else {
      $65 = (($indent) + 4)|0;
      $66 = (_ASN1_bn_print($bp,89032,$priv_key$07,$58,$65)|0);
      $67 = ($66|0)==(0);
      if ($67) {
       $m$0 = $58;$reason$0 = 7;
       label = 42;
      } else {
       $68 = (_ASN1_bn_print($bp,89045,$pub_key$0,$58,$65)|0);
       $69 = ($68|0)==(0);
       if ($69) {
        $m$0 = $58;$reason$0 = 7;
        label = 42;
       } else {
        $70 = HEAP32[$6>>2]|0;
        $71 = (_ASN1_bn_print($bp,89057,$70,$58,$65)|0);
        $72 = ($71|0)==(0);
        if ($72) {
         $m$0 = $58;$reason$0 = 7;
         label = 42;
        } else {
         $73 = HEAP32[$13>>2]|0;
         $74 = (_ASN1_bn_print($bp,89064,$73,$58,$65)|0);
         $75 = ($74|0)==(0);
         if ($75) {
          $m$0 = $58;$reason$0 = 7;
          label = 42;
         } else {
          $76 = HEAP32[$20>>2]|0;
          $77 = ($76|0)==(0|0);
          if (!($77)) {
           $78 = (_ASN1_bn_print($bp,89075,$76,$58,$65)|0);
           $79 = ($78|0)==(0);
           if ($79) {
            $m$0 = $58;$reason$0 = 7;
            label = 42;
            break;
           }
          }
          $80 = HEAP32[$28>>2]|0;
          $81 = ($80|0)==(0|0);
          if (!($81)) {
           $82 = (_ASN1_bn_print($bp,89091,$80,$58,$65)|0);
           $83 = ($82|0)==(0);
           if ($83) {
            $m$0 = $58;$reason$0 = 7;
            label = 42;
            break;
           }
          }
          $84 = ((($x)) + 44|0);
          $85 = HEAP32[$84>>2]|0;
          $86 = ($85|0)==(0|0);
          do {
           if (!($86)) {
            (_BIO_indent($bp,$65,128)|0);
            (_BIO_puts($bp,89108)|0);
            $87 = ((($x)) + 48|0);
            $88 = (($indent) + 8)|0;
            $i$0 = 0;
            while(1) {
             $89 = HEAP32[$87>>2]|0;
             $90 = ($i$0|0)<($89|0);
             if (!($90)) {
              break;
             }
             $91 = (($i$0|0) % 15)&-1;
             $92 = ($91|0)==(0);
             if ($92) {
              $93 = (_BIO_puts($bp,90329)|0);
              $94 = ($93|0)<(1);
              if ($94) {
               $m$0 = $58;$reason$0 = 7;
               label = 42;
               break L7;
              }
              $95 = (_BIO_indent($bp,$88,128)|0);
              $96 = ($95|0)==(0);
              if ($96) {
               $m$0 = $58;$reason$0 = 7;
               label = 42;
               break L7;
              }
              $$pre = HEAP32[$87>>2]|0;
              $103 = $$pre;
             } else {
              $103 = $89;
             }
             $97 = HEAP32[$84>>2]|0;
             $98 = (($97) + ($i$0)|0);
             $99 = HEAP8[$98>>0]|0;
             $100 = $99&255;
             $101 = (($i$0) + 1)|0;
             $102 = ($101|0)==($103|0);
             $104 = $102 ? 89936 : 89937;
             HEAP32[$vararg_buffer2>>2] = $100;
             $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
             HEAP32[$vararg_ptr5>>2] = $104;
             $105 = (_BIO_printf($bp,89939,$vararg_buffer2)|0);
             $106 = ($105|0)<(1);
             if ($106) {
              $m$0 = $58;$reason$0 = 7;
              label = 42;
              break L7;
             } else {
              $i$0 = $101;
             }
            }
            $107 = (_BIO_write($bp,90329,1)|0);
            $108 = ($107|0)<(1);
            if ($108) {
             $$0 = 0;
            } else {
             break;
            }
            STACKTOP = sp;return ($$0|0);
           }
          } while(0);
          $109 = HEAP32[$36>>2]|0;
          $110 = ($109|0)==(0|0);
          if (!($110)) {
           $111 = (_ASN1_bn_print($bp,89114,$109,$58,$65)|0);
           $112 = ($111|0)==(0);
           if ($112) {
            $m$0 = $58;$reason$0 = 7;
            label = 42;
            break;
           }
          }
          $113 = ((($x)) + 16|0);
          $114 = HEAP32[$113>>2]|0;
          $115 = ($114|0)==(0);
          if ($115) {
           $m$1 = $58;$ret$0 = 1;
           break;
          }
          (_BIO_indent($bp,$65,128)|0);
          $116 = HEAP32[$113>>2]|0;
          HEAP32[$vararg_buffer6>>2] = $116;
          $117 = (_BIO_printf($bp,89123,$vararg_buffer6)|0);
          $118 = ($117|0)<(1);
          if ($118) {
           $m$0 = $58;$reason$0 = 7;
           label = 42;
          } else {
           $m$1 = $58;$ret$0 = 1;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 42) {
  _ERR_put_error(5,100,$reason$0,88964,428);
  $m$1 = $m$0;$ret$0 = 0;
 }
 $119 = ($m$1|0)==(0|0);
 if ($119) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_free($m$1);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _dh_pub_decode($pkey,$pubkey) {
 $pkey = $pkey|0;
 $pubkey = $pubkey|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p = 0, $palg = 0, $pkey$idx = 0, $pkey$idx$val = 0, $pklen = 0, $pm = 0, $ptype = 0, $pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $p = sp + 20|0;
 $pm = sp + 16|0;
 $pklen = sp + 12|0;
 $ptype = sp + 8|0;
 $pval = sp + 4|0;
 $palg = sp;
 $0 = (_X509_PUBKEY_get0_param(0,$p,$pklen,$palg,$pubkey)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$palg>>2]|0;
 _X509_ALGOR_get0(0,$ptype,$pval,$2);
 $3 = HEAP32[$ptype>>2]|0;
 $4 = ($3|0)==(16);
 if (!($4)) {
  _ERR_put_error(5,108,105,88964,114);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$pval>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$pm>>2] = $7;
 $8 = HEAP32[$5>>2]|0;
 $pkey$idx = ((($pkey)) + 12|0);
 $pkey$idx$val = HEAP32[$pkey$idx>>2]|0;
 $9 = ($pkey$idx$val|0)==(47536|0);
 if ($9) {
  $10 = (_d2i_DHxparams(0,$pm,$8)|0);
  $$0$i = $10;
 } else {
  $11 = (_d2i_DHparams(0,$pm,$8)|0);
  $$0$i = $11;
 }
 $12 = ($$0$i|0)==(0|0);
 if ($12) {
  _ERR_put_error(5,108,104,88964,123);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$pklen>>2]|0;
 $14 = (_d2i_ASN1_INTEGER(0,$p,$13)|0);
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   _ERR_put_error(5,108,104,88964,128);
  } else {
   $16 = (_ASN1_INTEGER_to_BN($14,0)|0);
   $17 = ((($$0$i)) + 20|0);
   HEAP32[$17>>2] = $16;
   $18 = ($16|0)==(0|0);
   if ($18) {
    _ERR_put_error(5,108,109,88964,134);
    _ASN1_INTEGER_free($14);
    break;
   }
   _ASN1_INTEGER_free($14);
   $19 = HEAP32[$pkey$idx>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   (_EVP_PKEY_assign($pkey,$20,$$0$i)|0);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _DH_free($$0$i);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _dh_pub_encode($pk,$pkey) {
 $pk = $pk|0;
 $pkey = $pkey|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $penc = 0, $pkey$idx = 0, $pkey$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $penc = sp;
 HEAP32[$penc>>2] = 0;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ASN1_STRING_new()|0);
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = ((($2)) + 8|0);
   $pkey$idx = ((($pkey)) + 12|0);
   $pkey$idx$val = HEAP32[$pkey$idx>>2]|0;
   $5 = ($pkey$idx$val|0)==(47536|0);
   if ($5) {
    $6 = (_i2d_DHxparams($1,$4)|0);
    $$0$i = $6;
   } else {
    $7 = (_i2d_DHparams($1,$4)|0);
    $$0$i = $7;
   }
   HEAP32[$2>>2] = $$0$i;
   $8 = ($$0$i|0)<(1);
   if ($8) {
    _ERR_put_error(5,109,65,88964,169);
    break;
   }
   $9 = ((($1)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_BN_to_ASN1_INTEGER($10,0)|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = (_i2d_ASN1_INTEGER($11,$penc)|0);
    _ASN1_INTEGER_free($11);
    $14 = ($13|0)<(1);
    if ($14) {
     _ERR_put_error(5,109,65,88964,183);
     break;
    }
    $15 = HEAP32[$pkey$idx>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = (_OBJ_nid2obj($16)|0);
    $18 = HEAP32[$penc>>2]|0;
    $19 = (_X509_PUBKEY_set0_param($pk,$17,16,$2,$18,$13)|0);
    $20 = ($19|0)==(0);
    if (!($20)) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } else {
   _ERR_put_error(5,109,65,88964,164);
  }
 } while(0);
 $21 = HEAP32[$penc>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _CRYPTO_free($21);
 }
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _ASN1_STRING_free($2);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _dh_pub_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($b)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_BN_cmp($3,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$4>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_BN_cmp($12,$15)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = ((($a)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(47536|0);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$4>>2]|0;
  $25 = ((($24)) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_BN_cmp($23,$26)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $29 = HEAP32[$4>>2]|0;
 $30 = ((($29)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$0>>2]|0;
 $33 = ((($32)) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_BN_cmp($31,$34)|0);
 $36 = ($35|0)==(0);
 $$ = $36&1;
 $$0 = $$;
 return ($$0|0);
}
function _dh_public_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_dh_print($bp,$1,$indent,1)|0);
 return ($2|0);
}
function _dh_priv_decode($pkey,$p8) {
 $pkey = $pkey|0;
 $p8 = $p8|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dh$1 = 0, $p = 0, $palg = 0, $pkey$idx = 0, $pkey$idx$val = 0, $pklen = 0, $pm = 0, $privkey$0 = 0, $privkey$1 = 0, $ptype = 0, $pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $p = sp + 20|0;
 $pm = sp + 16|0;
 $pklen = sp + 12|0;
 $ptype = sp + 8|0;
 $pval = sp + 4|0;
 $palg = sp;
 $0 = (_PKCS8_pkey_get0(0,$p,$pklen,$palg,$p8)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$palg>>2]|0;
 _X509_ALGOR_get0(0,$ptype,$pval,$2);
 $3 = HEAP32[$ptype>>2]|0;
 $4 = ($3|0)==(16);
 do {
  if ($4) {
   $5 = HEAP32[$pklen>>2]|0;
   $6 = (_d2i_ASN1_INTEGER(0,$p,$5)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $privkey$0 = 0;
    label = 12;
   } else {
    $8 = HEAP32[$pval>>2]|0;
    $9 = ((($8)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    HEAP32[$pm>>2] = $10;
    $11 = HEAP32[$8>>2]|0;
    $pkey$idx = ((($pkey)) + 12|0);
    $pkey$idx$val = HEAP32[$pkey$idx>>2]|0;
    $12 = ($pkey$idx$val|0)==(47536|0);
    if ($12) {
     $13 = (_d2i_DHxparams(0,$pm,$11)|0);
     $$0$i = $13;
    } else {
     $14 = (_d2i_DHparams(0,$pm,$11)|0);
     $$0$i = $14;
    }
    $15 = ($$0$i|0)==(0|0);
    if ($15) {
     $privkey$0 = $6;
     label = 12;
    } else {
     $16 = (_ASN1_INTEGER_to_BN($6,0)|0);
     $17 = ((($$0$i)) + 24|0);
     HEAP32[$17>>2] = $16;
     $18 = ($16|0)==(0|0);
     if ($18) {
      _ERR_put_error(5,110,106,88964,236);
      $dh$1 = $$0$i;$privkey$1 = $6;
      break;
     }
     $19 = (_DH_generate_key($$0$i)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $dh$1 = $$0$i;$privkey$1 = $6;
     } else {
      $21 = HEAP32[$pkey$idx>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      (_EVP_PKEY_assign($pkey,$22,$$0$i)|0);
      _ASN1_STRING_clear_free($6);
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  } else {
   $privkey$0 = 0;
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  _ERR_put_error(5,110,114,88964,250);
  $dh$1 = 0;$privkey$1 = $privkey$0;
 }
 _DH_free($dh$1);
 _ASN1_STRING_clear_free($privkey$1);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _dh_priv_encode($p8,$pkey) {
 $p8 = $p8|0;
 $pkey = $pkey|0;
 var $$0 = 0, $$0$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, $pkey$idx = 0, $pkey$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dp = sp;
 HEAP32[$dp>>2] = 0;
 $0 = (_ASN1_STRING_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(5,111,65,88964,267);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($pkey)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $pkey$idx = ((($pkey)) + 12|0);
 $pkey$idx$val = HEAP32[$pkey$idx>>2]|0;
 $5 = ($pkey$idx$val|0)==(47536|0);
 if ($5) {
  $6 = (_i2d_DHxparams($3,$4)|0);
  $$0$i = $6;
 } else {
  $7 = (_i2d_DHparams($3,$4)|0);
  $$0$i = $7;
 }
 HEAP32[$0>>2] = $$0$i;
 $8 = ($$0$i|0)<(1);
 do {
  if ($8) {
   _ERR_put_error(5,111,65,88964,273);
  } else {
   $9 = ((($0)) + 4|0);
   HEAP32[$9>>2] = 16;
   $10 = HEAP32[$2>>2]|0;
   $11 = ((($10)) + 24|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_BN_to_ASN1_INTEGER($12,0)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    _ERR_put_error(5,111,106,88964,282);
    break;
   }
   $15 = (_i2d_ASN1_INTEGER($13,$dp)|0);
   _ASN1_STRING_clear_free($13);
   $16 = HEAP32[$pkey$idx>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = (_OBJ_nid2obj($17)|0);
   $19 = HEAP32[$dp>>2]|0;
   $20 = (_PKCS8_pkey_set0($p8,$18,0,16,$0,$19,$15)|0);
   $21 = ($20|0)==(0);
   if (!($21)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $$pre = HEAP32[$dp>>2]|0;
   $22 = ($$pre|0)==(0|0);
   if (!($22)) {
    _CRYPTO_free($$pre);
   }
  }
 } while(0);
 _ASN1_STRING_free($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _dh_private_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_dh_print($bp,$1,$indent,2)|0);
 return ($2|0);
}
function _int_dh_size($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_DH_size($1)|0);
 return ($2|0);
}
function _dh_bits($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_BN_num_bits($3)|0);
 return ($4|0);
}
function _dh_param_decode($pkey,$pder,$derlen) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 $derlen = $derlen|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $pkey$idx = 0, $pkey$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pkey$idx = ((($pkey)) + 12|0);
 $pkey$idx$val = HEAP32[$pkey$idx>>2]|0;
 $0 = ($pkey$idx$val|0)==(47536|0);
 if ($0) {
  $1 = (_d2i_DHxparams(0,$pder,$derlen)|0);
  $$0$i = $1;
 } else {
  $2 = (_d2i_DHparams(0,$pder,$derlen)|0);
  $$0$i = $2;
 }
 $3 = ($$0$i|0)==(0|0);
 if ($3) {
  _ERR_put_error(5,107,5,88964,321);
  $$0 = 0;
  return ($$0|0);
 } else {
  $4 = HEAP32[$pkey$idx>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  (_EVP_PKEY_assign($pkey,$5,$$0$i)|0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _dh_param_encode($pkey,$pder) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $pkey$idx = 0, $pkey$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $pkey$idx = ((($pkey)) + 12|0);
 $pkey$idx$val = HEAP32[$pkey$idx>>2]|0;
 $2 = ($pkey$idx$val|0)==(47536|0);
 if ($2) {
  $3 = (_i2d_DHxparams($1,$pder)|0);
  $$0$i = $3;
  return ($$0$i|0);
 } else {
  $4 = (_i2d_DHparams($1,$pder)|0);
  $$0$i = $4;
  return ($$0$i|0);
 }
 return (0)|0;
}
function _dh_missing_parameters($a) {
 $a = $a|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return 1;
 } else {
  $5 = ((($1)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  $$ = $7&1;
  return ($$|0);
 }
 return (0)|0;
}
function _dh_copy_parameters($to,$from) {
 $to = $to|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($to)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($from)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($from)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(47536|0);
 $7 = $6&1;
 $8 = (_int_dh_param_copy($1,$3,$7)|0);
 return ($8|0);
}
function _dh_cmp_parameters($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($b)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_BN_cmp($3,$7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$4>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_BN_cmp($12,$15)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = ((($a)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(47536|0);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$4>>2]|0;
  $25 = ((($24)) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_BN_cmp($23,$26)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = 1;
 return ($$0|0);
}
function _dh_param_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_dh_print($bp,$1,$indent,0)|0);
 return ($2|0);
}
function _int_dh_free($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 _DH_free($1);
 return;
}
function _dh_pkey_ctrl($pkey,$op,$arg1,$arg2) {
 $pkey = $pkey|0;
 $op = $op|0;
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $$$i3$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i3 = 0, $$pr$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alg$i = 0, $alg$i$i = 0, $aoid$i = 0, $aoid$i$i = 0, $atype$i$i = 0, $aval$i$i = 0, $dukm$0$i = 0, $dukm$0$i$i = 0, $dukmlen$0$i = 0;
 var $dukmlen$0$i$i = 0, $kdf_md$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i2 = 0, $or$cond3$i$i = 0, $p$i$i = 0, $p$i2$i = 0, $penc$i = 0, $phitmp$i = 0, $pubkey$i = 0, $pubkey$i1 = 0, $rv$0$i = 0, $rv$0$ph$i = 0, $rv$0$ph$ph$i$i = 0, $rv$058$i$i = 0, $talg$i = 0, $ukm$i = 0, $ukm$i$i = 0, $wrap_alg$0$i = 0;
 var $wrap_alg$0$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $talg$i = sp + 56|0;
 $aoid$i = sp + 52|0;
 $pubkey$i1 = sp + 48|0;
 $ukm$i = sp + 44|0;
 $penc$i = sp + 40|0;
 $kdf_md$i = sp + 36|0;
 $alg$i$i = sp + 32|0;
 $ukm$i$i = sp + 28|0;
 $p$i2$i = sp + 24|0;
 $aoid$i$i = sp + 20|0;
 $atype$i$i = sp + 16|0;
 $aval$i$i = sp + 12|0;
 $p$i$i = sp + 8|0;
 $alg$i = sp + 4|0;
 $pubkey$i = sp;
 switch ($op|0) {
 case 7:  {
  switch ($arg1|0) {
  case 1:  {
   $0 = (_CMS_RecipientInfo_get0_pkey_ctx($arg2)|0);
   $1 = ($0|0)==(0|0);
   L5: do {
    if ($1) {
     $$0$i = 0;
    } else {
     $2 = (_EVP_PKEY_CTX_get0_peerkey($0)|0);
     $3 = ($2|0)==(0|0);
     L7: do {
      if ($3) {
       $4 = (_CMS_RecipientInfo_kari_get0_orig_id($arg2,$alg$i,$pubkey$i,0,0,0)|0);
       $5 = ($4|0)==(0);
       if ($5) {
        $$0$i = 0;
        break L5;
       }
       $6 = HEAP32[$alg$i>>2]|0;
       $7 = ($6|0)!=(0|0);
       $8 = HEAP32[$pubkey$i>>2]|0;
       $9 = ($8|0)!=(0|0);
       $or$cond$i = $7 & $9;
       if (!($or$cond$i)) {
        $$0$i = 0;
        break L5;
       }
       _X509_ALGOR_get0($aoid$i$i,$atype$i$i,$aval$i$i,$6);
       $10 = HEAP32[$aoid$i$i>>2]|0;
       $11 = (_OBJ_obj2nid($10)|0);
       $12 = ($11|0)!=(920);
       $13 = HEAP32[$atype$i$i>>2]|0;
       $14 = ($13|0)==(5);
       $or$cond$i$i = $12 | $14;
       L11: do {
        if ($or$cond$i$i) {
        } else {
         $15 = (_EVP_PKEY_CTX_get0_pkey($0)|0);
         $16 = ($15|0)==(0|0);
         if ($16) {
          break;
         }
         $17 = HEAP32[$15>>2]|0;
         $18 = ($17|0)==(920);
         if (!($18)) {
          break;
         }
         $19 = ((($15)) + 20|0);
         $20 = HEAP32[$19>>2]|0;
         $21 = (_DH_new()|0);
         $22 = ($21|0)==(0|0);
         if ($22) {
          $$0$i$i$i = 0;
         } else {
          $23 = (_int_dh_param_copy($21,$20,-1)|0);
          $24 = ($23|0)==(0);
          if ($24) {
           _DH_free($21);
           $$0$i$i$i = 0;
          } else {
           $$0$i$i$i = $21;
          }
         }
         $25 = (_ASN1_STRING_length($8)|0);
         $26 = (_ASN1_STRING_data($8)|0);
         HEAP32[$p$i$i>>2] = $26;
         $27 = ($26|0)!=(0|0);
         $28 = ($25|0)!=(0);
         $or$cond3$i$i = $28 & $27;
         do {
          if ($or$cond3$i$i) {
           $29 = (_d2i_ASN1_INTEGER(0,$p$i$i,$25)|0);
           $30 = ($29|0)==(0|0);
           if ($30) {
            _ERR_put_error(5,118,104,88964,687);
            label = 21;
            break;
           }
           $31 = (_ASN1_INTEGER_to_BN($29,0)|0);
           $32 = ((($$0$i$i$i)) + 20|0);
           HEAP32[$32>>2] = $31;
           $33 = ($31|0)==(0|0);
           if ($33) {
            _ERR_put_error(5,118,109,88964,693);
           } else {
            $34 = (_EVP_PKEY_new()|0);
            $35 = ($34|0)==(0|0);
            if (!($35)) {
             $36 = ((($15)) + 12|0);
             $37 = HEAP32[$36>>2]|0;
             $38 = HEAP32[$37>>2]|0;
             (_EVP_PKEY_assign($34,$38,$$0$i$i$i)|0);
             $39 = (_EVP_PKEY_derive_set_peer($0,$34)|0);
             _ASN1_INTEGER_free($29);
             _EVP_PKEY_free($34);
             $phitmp$i = ($39|0)<(1);
             if ($phitmp$i) {
              break L11;
             } else {
              break L7;
             }
            }
           }
           _ASN1_INTEGER_free($29);
          } else {
           label = 21;
          }
         } while(0);
         if ((label|0) == 21) {
          $40 = ($$0$i$i$i|0)==(0|0);
          if ($40) {
           break;
          }
         }
         _DH_free($$0$i$i$i);
        }
       } while(0);
       _ERR_put_error(5,117,113,88964,809);
       $$0$i = 0;
       break L5;
      }
     } while(0);
     $41 = (_CMS_RecipientInfo_kari_get0_alg($arg2,$alg$i$i,$ukm$i$i)|0);
     $42 = ($41|0)==(0);
     L40: do {
      if ($42) {
       $rv$058$i$i = 0;
      } else {
       $43 = HEAP32[$alg$i$i>>2]|0;
       $44 = HEAP32[$43>>2]|0;
       $45 = (_OBJ_obj2nid($44)|0);
       $46 = ($45|0)==(245);
       if (!($46)) {
        _ERR_put_error(5,119,112,88964,735);
        $rv$058$i$i = 0;
        break;
       }
       $47 = (_EVP_PKEY_CTX_ctrl($0,920,1024,4102,2,0)|0);
       $48 = ($47|0)<(1);
       if ($48) {
        $rv$058$i$i = 0;
       } else {
        $49 = (_EVP_sha1()|0);
        $50 = (_EVP_PKEY_CTX_ctrl($0,920,1024,4103,0,$49)|0);
        $51 = ($50|0)<(1);
        if ($51) {
         $rv$058$i$i = 0;
        } else {
         $52 = HEAP32[$alg$i$i>>2]|0;
         $53 = ((($52)) + 4|0);
         $54 = HEAP32[$53>>2]|0;
         $55 = HEAP32[$54>>2]|0;
         $56 = ($55|0)==(16);
         if ($56) {
          $57 = ((($54)) + 4|0);
          $58 = HEAP32[$57>>2]|0;
          $59 = ((($58)) + 8|0);
          $60 = HEAP32[$59>>2]|0;
          HEAP32[$p$i2$i>>2] = $60;
          $61 = HEAP32[$53>>2]|0;
          $62 = ((($61)) + 4|0);
          $63 = HEAP32[$62>>2]|0;
          $64 = HEAP32[$63>>2]|0;
          $65 = (_d2i_X509_ALGOR(0,$p$i2$i,$64)|0);
          $66 = ($65|0)==(0|0);
          if ($66) {
           $rv$058$i$i = 0;
          } else {
           $67 = (_CMS_RecipientInfo_kari_get0_ctx($arg2)|0);
           $68 = ($67|0)==(0|0);
           do {
            if ($68) {
             $rv$0$ph$ph$i$i = 0;
            } else {
             $69 = HEAP32[$65>>2]|0;
             $70 = (_OBJ_obj2nid($69)|0);
             $71 = (_OBJ_nid2sn($70)|0);
             $72 = (_EVP_get_cipherbyname($71)|0);
             $73 = ($72|0)==(0|0);
             if ($73) {
              $rv$0$ph$ph$i$i = 0;
             } else {
              $74 = (_EVP_CIPHER_flags($72)|0);
              $75 = $74 & 983047;
              $76 = ($75|0)==(65538);
              if ($76) {
               $77 = (_EVP_EncryptInit_ex($67,$72,0,0,0)|0);
               $78 = ($77|0)==(0);
               if ($78) {
                $rv$0$ph$ph$i$i = 0;
               } else {
                $79 = ((($65)) + 4|0);
                $80 = HEAP32[$79>>2]|0;
                $81 = (_EVP_CIPHER_asn1_to_param($67,$80)|0);
                $82 = ($81|0)<(1);
                if ($82) {
                 $rv$0$ph$ph$i$i = 0;
                } else {
                 $83 = (_EVP_CIPHER_CTX_key_length($67)|0);
                 $84 = (_EVP_PKEY_CTX_ctrl($0,920,1024,4105,$83,0)|0);
                 $85 = ($84|0)<(1);
                 if ($85) {
                  $rv$0$ph$ph$i$i = 0;
                 } else {
                  $86 = (_EVP_CIPHER_type($72)|0);
                  $87 = (_OBJ_nid2obj($86)|0);
                  $88 = (_EVP_PKEY_CTX_ctrl($0,920,1024,4109,0,$87)|0);
                  $89 = ($88|0)<(1);
                  if ($89) {
                   $rv$0$ph$ph$i$i = 0;
                  } else {
                   $90 = HEAP32[$ukm$i$i>>2]|0;
                   $91 = ($90|0)==(0|0);
                   if ($91) {
                    $dukm$0$i$i = 0;$dukmlen$0$i$i = 0;
                   } else {
                    $92 = (_ASN1_STRING_length($90)|0);
                    $93 = HEAP32[$ukm$i$i>>2]|0;
                    $94 = (_ASN1_STRING_data($93)|0);
                    $95 = (_BUF_memdup($94,$92)|0);
                    $96 = ($95|0)==(0|0);
                    if ($96) {
                     $rv$0$ph$ph$i$i = 0;
                     break;
                    } else {
                     $dukm$0$i$i = $95;$dukmlen$0$i$i = $92;
                    }
                   }
                   $97 = (_EVP_PKEY_CTX_ctrl($0,920,1024,4107,$dukmlen$0$i$i,$dukm$0$i$i)|0);
                   $98 = ($97|0)<(1);
                   $99 = $98&1;
                   $$$i3$i = $99 ^ 1;
                   if (!($98)) {
                    $rv$0$ph$ph$i$i = $$$i3$i;
                    break;
                   }
                   _X509_ALGOR_free($65);
                   $100 = ($dukm$0$i$i|0)==(0|0);
                   if ($100) {
                    $rv$058$i$i = $$$i3$i;
                    break L40;
                   }
                   _CRYPTO_free($dukm$0$i$i);
                   $rv$058$i$i = $$$i3$i;
                   break L40;
                  }
                 }
                }
               }
              } else {
               $rv$0$ph$ph$i$i = 0;
              }
             }
            }
           } while(0);
           _X509_ALGOR_free($65);
           $rv$058$i$i = $rv$0$ph$ph$i$i;
          }
         } else {
          $rv$058$i$i = 0;
         }
        }
       }
      }
     } while(0);
     $101 = ($rv$058$i$i|0)==(0);
     if ($101) {
      _ERR_put_error(5,117,114,88964,815);
      $$0$i = 0;
     } else {
      $$0$i = 1;
     }
    }
   } while(0);
   $$0 = $$0$i;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 0:  {
   HEAP32[$penc$i>>2] = 0;
   $102 = (_CMS_RecipientInfo_get0_pkey_ctx($arg2)|0);
   $103 = ($102|0)==(0|0);
   if ($103) {
    $$0$i3 = 0;
   } else {
    $104 = (_EVP_PKEY_CTX_get0_pkey($102)|0);
    $105 = (_CMS_RecipientInfo_kari_get0_orig_id($arg2,$talg$i,$pubkey$i1,0,0,0)|0);
    $106 = ($105|0)==(0);
    L70: do {
     if ($106) {
      $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
      label = 78;
     } else {
      $107 = HEAP32[$talg$i>>2]|0;
      _X509_ALGOR_get0($aoid$i,0,0,$107);
      $108 = HEAP32[$aoid$i>>2]|0;
      $109 = (_OBJ_nid2obj(0)|0);
      $110 = ($108|0)==($109|0);
      if ($110) {
       $111 = ((($104)) + 20|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ((($112)) + 20|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (_BN_to_ASN1_INTEGER($114,0)|0);
       $116 = ($115|0)==(0|0);
       if ($116) {
        $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
        label = 78;
        break;
       }
       $117 = (_i2d_ASN1_INTEGER($115,$penc$i)|0);
       _ASN1_INTEGER_free($115);
       $118 = ($117|0)<(1);
       if ($118) {
        $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
        label = 78;
        break;
       }
       $119 = HEAP32[$pubkey$i1>>2]|0;
       $120 = HEAP32[$penc$i>>2]|0;
       _ASN1_STRING_set0($119,$120,$117);
       $121 = HEAP32[$pubkey$i1>>2]|0;
       $122 = ((($121)) + 12|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = $123 & -16;
       $125 = $124 | 8;
       HEAP32[$122>>2] = $125;
       HEAP32[$penc$i>>2] = 0;
       $126 = HEAP32[$talg$i>>2]|0;
       $127 = (_OBJ_nid2obj(920)|0);
       (_X509_ALGOR_set0($126,$127,-1,0)|0);
      }
      $128 = (_EVP_PKEY_CTX_ctrl($102,920,1024,4102,-2,0)|0);
      $129 = ($128|0)<(1);
      if ($129) {
       $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
       label = 78;
      } else {
       $130 = (_EVP_PKEY_CTX_ctrl($102,920,1024,4104,0,$kdf_md$i)|0);
       $131 = ($130|0)==(0);
       if ($131) {
        $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
        label = 78;
       } else {
        switch ($128|0) {
        case 1:  {
         $132 = (_EVP_PKEY_CTX_ctrl($102,920,1024,4102,2,0)|0);
         $133 = ($132|0)<(1);
         if ($133) {
          $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
          label = 78;
          break L70;
         }
         break;
        }
        case 2:  {
         break;
        }
        default: {
         $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
         label = 78;
         break L70;
        }
        }
        $134 = HEAP32[$kdf_md$i>>2]|0;
        $135 = ($134|0)==(0|0);
        if ($135) {
         $136 = (_EVP_sha1()|0);
         HEAP32[$kdf_md$i>>2] = $136;
         $137 = (_EVP_PKEY_CTX_ctrl($102,920,1024,4103,0,$136)|0);
         $138 = ($137|0)<(1);
         if ($138) {
          $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
          label = 78;
          break;
         }
        } else {
         $139 = (_EVP_MD_type($134)|0);
         $140 = ($139|0)==(64);
         if (!($140)) {
          $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
          label = 78;
          break;
         }
        }
        $141 = (_CMS_RecipientInfo_kari_get0_alg($arg2,$talg$i,$ukm$i)|0);
        $142 = ($141|0)==(0);
        if ($142) {
         $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
         label = 78;
        } else {
         $143 = (_CMS_RecipientInfo_kari_get0_ctx($arg2)|0);
         $144 = (_EVP_CIPHER_CTX_cipher($143)|0);
         $145 = (_EVP_CIPHER_type($144)|0);
         $146 = (_OBJ_nid2obj($145)|0);
         $147 = (_EVP_PKEY_CTX_ctrl($102,920,1024,4109,0,$146)|0);
         $148 = ($147|0)<(1);
         if ($148) {
          $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
          label = 78;
         } else {
          $149 = (_EVP_CIPHER_CTX_key_length($143)|0);
          $150 = (_X509_ALGOR_new()|0);
          $151 = ($150|0)==(0|0);
          if ($151) {
           $rv$0$ph$i = 0;$wrap_alg$0$ph$i = 0;
           label = 78;
          } else {
           $152 = (_OBJ_nid2obj($145)|0);
           HEAP32[$150>>2] = $152;
           $153 = (_ASN1_TYPE_new()|0);
           $154 = ((($150)) + 4|0);
           HEAP32[$154>>2] = $153;
           $155 = ($153|0)==(0|0);
           if ($155) {
            $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $150;
            label = 78;
           } else {
            $156 = (_EVP_CIPHER_param_to_asn1($143,$153)|0);
            $157 = ($156|0)<(1);
            if ($157) {
             $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $150;
             label = 78;
            } else {
             $158 = HEAP32[$154>>2]|0;
             $159 = (_ASN1_TYPE_get($158)|0);
             $160 = ($159|0)==(0);
             if ($160) {
              $161 = HEAP32[$154>>2]|0;
              _ASN1_TYPE_free($161);
              HEAP32[$154>>2] = 0;
             }
             $162 = (_EVP_PKEY_CTX_ctrl($102,920,1024,4105,$149,0)|0);
             $163 = ($162|0)<(1);
             if ($163) {
              $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $150;
              label = 78;
             } else {
              $164 = HEAP32[$ukm$i>>2]|0;
              $165 = ($164|0)==(0|0);
              if ($165) {
               $dukm$0$i = 0;$dukmlen$0$i = 0;
              } else {
               $166 = (_ASN1_STRING_length($164)|0);
               $167 = HEAP32[$ukm$i>>2]|0;
               $168 = (_ASN1_STRING_data($167)|0);
               $169 = (_BUF_memdup($168,$166)|0);
               $170 = ($169|0)==(0|0);
               if ($170) {
                $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $150;
                label = 78;
                break;
               } else {
                $dukm$0$i = $169;$dukmlen$0$i = $166;
               }
              }
              $171 = (_EVP_PKEY_CTX_ctrl($102,920,1024,4107,$dukmlen$0$i,$dukm$0$i)|0);
              $172 = ($171|0)<(1);
              if ($172) {
               $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $150;
               label = 78;
              } else {
               HEAP32[$penc$i>>2] = 0;
               $173 = (_i2d_X509_ALGOR($150,$penc$i)|0);
               $174 = HEAP32[$penc$i>>2]|0;
               $175 = ($174|0)!=(0|0);
               $176 = ($173|0)!=(0);
               $or$cond$i2 = $176 & $175;
               if ($or$cond$i2) {
                $177 = (_ASN1_STRING_new()|0);
                $178 = ($177|0)==(0|0);
                if ($178) {
                 $rv$0$ph$i = 0;$wrap_alg$0$ph$i = $150;
                 label = 78;
                 break;
                }
                $179 = HEAP32[$penc$i>>2]|0;
                _ASN1_STRING_set0($177,$179,$173);
                HEAP32[$penc$i>>2] = 0;
                $180 = HEAP32[$talg$i>>2]|0;
                $181 = (_OBJ_nid2obj(245)|0);
                (_X509_ALGOR_set0($180,$181,16,$177)|0);
                $rv$0$ph$i = 1;$wrap_alg$0$ph$i = $150;
                label = 78;
               } else {
                $183 = $174;$rv$0$i = 0;$wrap_alg$0$i = $150;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 78) {
     $$pr$i = HEAP32[$penc$i>>2]|0;
     $183 = $$pr$i;$rv$0$i = $rv$0$ph$i;$wrap_alg$0$i = $wrap_alg$0$ph$i;
    }
    $182 = ($183|0)==(0|0);
    if (!($182)) {
     _CRYPTO_free($183);
    }
    $184 = ($wrap_alg$0$i|0)==(0|0);
    if ($184) {
     $$0$i3 = $rv$0$i;
    } else {
     _X509_ALGOR_free($wrap_alg$0$i);
     $$0$i3 = $rv$0$i;
    }
   }
   $$0 = $$0$i3;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  }
  break;
 }
 case 8:  {
  HEAP32[$arg2>>2] = 1;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _d2i_DHparams($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,47644)|0);
 return ($0|0);
}
function _i2d_DHparams($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,47644)|0);
 return ($0|0);
}
function _d2i_DHxparams($a,$pp,$length) {
 $a = $a|0;
 $pp = $pp|0;
 $length = $length|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_DH_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_ASN1_item_d2i(0,$pp,$length,47700)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _DH_free($0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($a|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$a>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _DH_free($5);
  }
  HEAP32[$a>>2] = $0;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 36|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($2)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 12|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($2)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 40|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($2)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $21 = HEAP32[$19>>2]|0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($0)) + 44|0);
  HEAP32[$24>>2] = $23;
  $25 = HEAP32[$21>>2]|0;
  $26 = ((($0)) + 48|0);
  HEAP32[$26>>2] = $25;
  $27 = ((($19)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($0)) + 52|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$22>>2] = 0;
  _ASN1_BIT_STRING_free($21);
  $30 = HEAP32[$18>>2]|0;
  _CRYPTO_free($30);
  HEAP32[$18>>2] = 0;
 }
 _CRYPTO_free($2);
 $$0 = $0;
 return ($$0|0);
}
function _i2d_DHxparams($dh,$pp) {
 $dh = $dh|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bs = 0, $dhv = 0, $dhx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $dhx = sp + 24|0;
 $dhv = sp + 16|0;
 $bs = sp;
 $0 = ((($dh)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$dhx>>2] = $1;
 $2 = ((($dh)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($dhx)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($dh)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($dhx)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($dh)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($dhx)) + 12|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($dh)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 $14 = $12;
 if (!($13)) {
  $15 = ((($dh)) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  $18 = $16;
  if (!($17)) {
   $19 = ((($dh)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)>(0);
   if ($21) {
    $22 = ((($bs)) + 12|0);
    HEAP32[$22>>2] = 8;
    $23 = ((($bs)) + 8|0);
    HEAP32[$23>>2] = $18;
    HEAP32[$bs>>2] = $20;
    HEAP32[$dhv>>2] = $bs;
    $24 = ((($dhv)) + 4|0);
    HEAP32[$24>>2] = $14;
    $25 = ((($dhx)) + 16|0);
    HEAP32[$25>>2] = $dhv;
    $27 = (_ASN1_item_i2d($dhx,$pp,47700)|0);
    STACKTOP = sp;return ($27|0);
   }
  }
 }
 $26 = ((($dhx)) + 16|0);
 HEAP32[$26>>2] = 0;
 $27 = (_ASN1_item_i2d($dhx,$pp,47700)|0);
 STACKTOP = sp;return ($27|0);
}
function _dh_cb($operation,$pval,$it,$exarg) {
 $operation = $operation|0;
 $pval = $pval|0;
 $it = $it|0;
 $exarg = $exarg|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($operation|0) {
 case 0:  {
  $0 = (_DH_new()|0);
  HEAP32[$pval>>2] = $0;
  $1 = ($0|0)==(0|0);
  $$ = $1 ? 0 : 2;
  $$0 = $$;
  break;
 }
 case 2:  {
  $2 = HEAP32[$pval>>2]|0;
  _DH_free($2);
  HEAP32[$pval>>2] = 0;
  $$0 = 2;
  break;
 }
 default: {
  $$0 = 1;
 }
 }
 return ($$0|0);
}
function _DH_check_pub_key($dh,$pub_key,$ret) {
 $dh = $dh|0;
 $pub_key = $pub_key|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ok$0$ph = 0, $ok$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$ret>>2] = 0;
 $0 = (_BN_CTX_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $ok$02 = 0;
  return ($ok$02|0);
 }
 _BN_CTX_start($0);
 $2 = (_BN_CTX_get($0)|0);
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $ok$0$ph = 0;
  } else {
   $4 = (_BN_set_word($2,1)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $ok$0$ph = 0;
   } else {
    $6 = (_BN_cmp($pub_key,$2)|0);
    $7 = ($6|0)<(1);
    if ($7) {
     $8 = HEAP32[$ret>>2]|0;
     $9 = $8 | 1;
     HEAP32[$ret>>2] = $9;
    }
    $10 = ((($dh)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_BN_copy($2,$11)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $ok$0$ph = 0;
    } else {
     $14 = (_BN_sub_word($2,1)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $ok$0$ph = 0;
     } else {
      $16 = (_BN_cmp($pub_key,$2)|0);
      $17 = ($16|0)>(-1);
      if ($17) {
       $18 = HEAP32[$ret>>2]|0;
       $19 = $18 | 2;
       HEAP32[$ret>>2] = $19;
      }
      $20 = ((($dh)) + 36|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($21|0)==(0|0);
      if ($22) {
       $ok$0$ph = 1;
      } else {
       $23 = HEAP32[$10>>2]|0;
       $24 = (_BN_mod_exp($2,$pub_key,$21,$23,$0)|0);
       $25 = ($24|0)==(0);
       if ($25) {
        $ok$0$ph = 0;
       } else {
        $26 = ((($2)) + 4|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = ($27|0)==(1);
        if ($28) {
         $29 = HEAP32[$2>>2]|0;
         $30 = HEAP32[$29>>2]|0;
         $31 = ($30|0)==(1);
         if ($31) {
          $32 = ((($2)) + 12|0);
          $33 = HEAP32[$32>>2]|0;
          $34 = ($33|0)==(0);
          if ($34) {
           $ok$0$ph = 1;
           break;
          }
         }
        }
        $35 = HEAP32[$ret>>2]|0;
        $36 = $35 | 4;
        HEAP32[$ret>>2] = $36;
        $ok$0$ph = 1;
       }
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($0);
 _BN_CTX_free($0);
 $ok$02 = $ok$0$ph;
 return ($ok$02|0);
}
function _DH_generate_parameters_ex($ret,$prime_len,$generator,$cb) {
 $ret = $ret|0;
 $prime_len = $prime_len|0;
 $generator = $generator|0;
 $cb = $cb|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g$0$i = 0, $ok$1$i1 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ret)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = (FUNCTION_TABLE_iiiii[$3 & 127]($ret,$prime_len,$generator,$cb)|0);
  $$0 = $5;
  return ($$0|0);
 }
 $6 = (_BN_CTX_new()|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _ERR_put_error(5,106,3,89223,195);
  $$0 = 0;
  return ($$0|0);
 }
 _BN_CTX_start($6);
 $8 = (_BN_CTX_get($6)|0);
 $9 = (_BN_CTX_get($6)|0);
 $10 = ($8|0)==(0|0);
 $11 = ($9|0)==(0|0);
 $or$cond$i = $10 | $11;
 L9: do {
  if ($or$cond$i) {
   label = 21;
  } else {
   $12 = ((($ret)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = (_BN_new()|0);
    HEAP32[$12>>2] = $15;
    $16 = ($15|0)==(0|0);
    if ($16) {
     label = 21;
     break;
    }
   }
   $17 = ((($ret)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $20 = (_BN_new()|0);
    HEAP32[$17>>2] = $20;
    $21 = ($20|0)==(0|0);
    if ($21) {
     label = 21;
     break;
    }
   }
   $22 = ($generator|0)<(2);
   if ($22) {
    _ERR_put_error(5,106,101,89223,145);
    label = 21;
    break;
   }
   switch ($generator|0) {
   case 2:  {
    $23 = (_BN_set_word($8,24)|0);
    $24 = ($23|0)==(0);
    if ($24) {
     label = 21;
     break L9;
    }
    $25 = (_BN_set_word($9,11)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     label = 21;
     break L9;
    } else {
     $g$0$i = 2;
    }
    break;
   }
   case 5:  {
    $27 = (_BN_set_word($8,10)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     label = 21;
     break L9;
    }
    $29 = (_BN_set_word($9,3)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     label = 21;
     break L9;
    } else {
     $g$0$i = 5;
    }
    break;
   }
   default: {
    $31 = (_BN_set_word($8,2)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     label = 21;
     break L9;
    }
    $33 = (_BN_set_word($9,1)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     label = 21;
     break L9;
    } else {
     $g$0$i = $generator;
    }
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = (_BN_generate_prime_ex($35,$prime_len,1,$8,$9,$cb)|0);
   $37 = ($36|0)==(0);
   if ($37) {
    label = 21;
   } else {
    $38 = (_BN_GENCB_call($cb,3,0)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     label = 21;
    } else {
     $40 = HEAP32[$17>>2]|0;
     $41 = (_BN_set_word($40,$g$0$i)|0);
     $42 = ($41|0)==(0);
     if ($42) {
      label = 21;
     } else {
      $ok$1$i1 = 1;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 21) {
  _ERR_put_error(5,106,3,89223,195);
  $ok$1$i1 = 0;
 }
 _BN_CTX_end($6);
 _BN_CTX_free($6);
 $$0 = $ok$1$i1;
 return ($$0|0);
}
function _DH_KDF_X9_42($out,$outlen,$Z,$Zlen,$key_oid,$ukm,$ukmlen,$md) {
 $out = $out|0;
 $outlen = $outlen|0;
 $Z = $Z|0;
 $Zlen = $Zlen|0;
 $key_oid = $key_oid|0;
 $ukm = $ukm|0;
 $ukmlen = $ukmlen|0;
 $md = $md|0;
 var $$ = 0, $$0$i = 0, $$0$i$i = 0, $$0$i15$i = 0, $$0$i23$i = 0, $$0$i8$i = 0, $$01 = 0, $$0218 = 0, $$0218$lcssa43 = 0, $$0316 = 0, $$0316$lcssa45 = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i7$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $atmp$i = 0, $ctr_atype$i = 0, $ctr_oct$i = 0, $der = 0, $i$017 = 0, $mctx = 0, $mtmp = 0, $or$cond$i = 0;
 var $or$cond$i$i = 0, $or$cond$i14$i = 0, $or$cond$i21$i = 0, $or$cond$i6$i = 0, $pukm_oct$0$i = 0, $q$i$i = 0, $q$i10$i = 0, $q$i17$i = 0, $q$i2$i = 0, $rv$0 = 0, $tag$i$i = 0, $tag$i11$i = 0, $tag$i18$i = 0, $tag$i3$i = 0, $tmplen$i$i = 0, $tmplen$i13$i = 0, $tmplen$i20$i = 0, $tmplen$i5$i = 0, $ukm_oct$i = 0, $xclass$i$i = 0;
 var $xclass$i12$i = 0, $xclass$i19$i = 0, $xclass$i4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $q$i17$i = sp + 140|0;
 $tag$i18$i = sp + 136|0;
 $xclass$i19$i = sp + 132|0;
 $tmplen$i20$i = sp + 128|0;
 $q$i10$i = sp + 124|0;
 $tag$i11$i = sp + 120|0;
 $xclass$i12$i = sp + 116|0;
 $tmplen$i13$i = sp + 112|0;
 $q$i2$i = sp + 108|0;
 $tag$i3$i = sp + 104|0;
 $xclass$i4$i = sp + 100|0;
 $tmplen$i5$i = sp + 96|0;
 $q$i$i = sp + 92|0;
 $tag$i$i = sp + 88|0;
 $xclass$i$i = sp + 84|0;
 $tmplen$i$i = sp + 80|0;
 $atmp$i = sp + 72|0;
 $ctr_oct$i = sp + 56|0;
 $ukm_oct$i = sp + 40|0;
 $ctr_atype$i = sp + 32|0;
 $mctx = sp + 8|0;
 $der = sp;
 $mtmp = sp + 144|0;
 HEAP32[$der>>2] = 0;
 $0 = ($Zlen>>>0)>(1073741824);
 if ($0) {
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $1 = (_EVP_MD_size($md)|0);
 _EVP_MD_CTX_init($mctx);
 $2 = ($ukmlen>>>0)>(1073741824);
 $3 = ($outlen>>>0)>(1073741824);
 $or$cond$i = $3 | $2;
 if ($or$cond$i) {
  $$0$i = 0;$71 = 0;
 } else {
  $4 = ((($ctr_oct$i)) + 8|0);
  HEAP32[$4>>2] = 89232;
  HEAP32[$ctr_oct$i>>2] = 4;
  $5 = ((($ctr_oct$i)) + 12|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($ctr_oct$i)) + 4|0);
  HEAP32[$6>>2] = 4;
  HEAP32[$ctr_atype$i>>2] = 4;
  $7 = ((($ctr_atype$i)) + 4|0);
  HEAP32[$7>>2] = $ctr_oct$i;
  HEAP32[$atmp$i>>2] = $key_oid;
  $8 = ((($atmp$i)) + 4|0);
  HEAP32[$8>>2] = $ctr_atype$i;
  $9 = ($ukm|0)==(0|0);
  if ($9) {
   $pukm_oct$0$i = 0;
  } else {
   $10 = ((($ukm_oct$i)) + 4|0);
   HEAP32[$10>>2] = 4;
   $11 = ((($ukm_oct$i)) + 12|0);
   HEAP32[$11>>2] = 0;
   $12 = ((($ukm_oct$i)) + 8|0);
   HEAP32[$12>>2] = $ukm;
   HEAP32[$ukm_oct$i>>2] = $ukmlen;
   $pukm_oct$0$i = $ukm_oct$i;
  }
  $13 = (_CMS_SharedInfo_encode($der,$atmp$i,$pukm_oct$0$i,$outlen)|0);
  $14 = ($13|0)<(1);
  if ($14) {
   $$0$i = 0;$71 = 0;
  } else {
   $15 = HEAP32[$der>>2]|0;
   HEAP32[$q$i$i>>2] = $15;
   $16 = (_ASN1_get_object($q$i$i,$tmplen$i$i,$tag$i$i,$xclass$i$i,$13)|0);
   $17 = $16 & 128;
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = HEAP32[$tag$i$i>>2]|0;
    $20 = ($19|0)!=(16);
    $21 = HEAP32[$xclass$i$i>>2]|0;
    $22 = ($21|0)!=(0);
    $or$cond$i$i = $20 | $22;
    if ($or$cond$i$i) {
     $$0$i$i = 1;$26 = $15;$27 = $13;
    } else {
     $$pre$i$i = HEAP32[$q$i$i>>2]|0;
     $23 = $$pre$i$i;
     $24 = (($15) + ($13))|0;
     $25 = (($24) - ($23))|0;
     $$0$i$i = 0;$26 = $23;$27 = $25;
    }
   } else {
    $$0$i$i = 1;$26 = $15;$27 = $13;
   }
   if ($$0$i$i) {
    $$0$i = 0;$71 = 0;
   } else {
    HEAP32[$q$i2$i>>2] = $26;
    $28 = (_ASN1_get_object($q$i2$i,$tmplen$i5$i,$tag$i3$i,$xclass$i4$i,$27)|0);
    $29 = $28 & 128;
    $30 = ($29|0)==(0);
    if ($30) {
     $31 = HEAP32[$tag$i3$i>>2]|0;
     $32 = ($31|0)!=(16);
     $33 = HEAP32[$xclass$i4$i>>2]|0;
     $34 = ($33|0)!=(0);
     $or$cond$i6$i = $32 | $34;
     if ($or$cond$i6$i) {
      $$0$i8$i = 1;$38 = $26;$39 = $27;
     } else {
      $$pre$i7$i = HEAP32[$q$i2$i>>2]|0;
      $35 = $$pre$i7$i;
      $36 = (($27) + ($26))|0;
      $37 = (($36) - ($35))|0;
      $$0$i8$i = 0;$38 = $35;$39 = $37;
     }
    } else {
     $$0$i8$i = 1;$38 = $26;$39 = $27;
    }
    if ($$0$i8$i) {
     $$0$i = 0;$71 = 0;
    } else {
     HEAP32[$q$i10$i>>2] = $38;
     $40 = (_ASN1_get_object($q$i10$i,$tmplen$i13$i,$tag$i11$i,$xclass$i12$i,$39)|0);
     $41 = $40 & 128;
     $42 = ($41|0)==(0);
     if ($42) {
      $43 = HEAP32[$tag$i11$i>>2]|0;
      $44 = ($43|0)!=(6);
      $45 = HEAP32[$xclass$i12$i>>2]|0;
      $46 = ($45|0)!=(0);
      $or$cond$i14$i = $44 | $46;
      if ($or$cond$i14$i) {
       $$0$i15$i = 1;$53 = $38;$54 = $39;
      } else {
       $47 = HEAP32[$tmplen$i13$i>>2]|0;
       $48 = HEAP32[$q$i10$i>>2]|0;
       $49 = (($48) + ($47)|0);
       HEAP32[$q$i10$i>>2] = $49;
       $50 = $49;
       $51 = (($39) + ($38))|0;
       $52 = (($51) - ($50))|0;
       $$0$i15$i = 0;$53 = $50;$54 = $52;
      }
     } else {
      $$0$i15$i = 1;$53 = $38;$54 = $39;
     }
     if ($$0$i15$i) {
      $$0$i = 0;$71 = 0;
     } else {
      HEAP32[$q$i17$i>>2] = $53;
      $55 = (_ASN1_get_object($q$i17$i,$tmplen$i20$i,$tag$i18$i,$xclass$i19$i,$54)|0);
      $56 = $55 & 128;
      $57 = ($56|0)==(0);
      if ($57) {
       $58 = HEAP32[$tag$i18$i>>2]|0;
       $59 = ($58|0)!=(4);
       $60 = HEAP32[$xclass$i19$i>>2]|0;
       $61 = ($60|0)!=(0);
       $or$cond$i21$i = $59 | $61;
       if ($or$cond$i21$i) {
        $$0$i23$i = 1;$64 = $53;
       } else {
        $$pre$i22$i = HEAP32[$q$i17$i>>2]|0;
        $62 = $$pre$i22$i;
        $$0$i23$i = 0;$64 = $62;
       }
      } else {
       $$0$i23$i = 1;$64 = $53;
      }
      if ($$0$i23$i) {
       $$0$i = 0;$71 = 0;
      } else {
       $63 = $64;
       $65 = (_CRYPTO_memcmp($63,89232,4)|0);
       $66 = ($65|0)==(0);
       $$ = $66 ? $13 : 0;
       $$0$i = $$;$71 = $64;
      }
     }
    }
   }
  }
 }
 $67 = ($$0$i|0)==(0);
 L31: do {
  if ($67) {
   $rv$0 = 0;
  } else {
   (_EVP_DigestInit_ex($mctx,$md,0)|0);
   $68 = (_EVP_DigestUpdate($mctx,$Z,$Zlen)|0);
   $69 = ($68|0)==(0);
   L33: do {
    if (!($69)) {
     $70 = $71;
     $72 = ((($70)) + 3|0);
     $73 = ((($70)) + 2|0);
     $74 = ((($70)) + 1|0);
     $$0218 = $out;$$0316 = $outlen;$i$017 = 1;
     while(1) {
      $75 = $i$017&255;
      HEAP8[$72>>0] = $75;
      $76 = $i$017 >>> 8;
      $77 = $76&255;
      HEAP8[$73>>0] = $77;
      $78 = $i$017 >>> 16;
      $79 = $78&255;
      HEAP8[$74>>0] = $79;
      $80 = $i$017 >>> 24;
      $81 = $80&255;
      HEAP8[$70>>0] = $81;
      $82 = HEAP32[$der>>2]|0;
      $83 = (_EVP_DigestUpdate($mctx,$82,$$0$i)|0);
      $84 = ($83|0)==(0);
      if ($84) {
       break L33;
      }
      $85 = ($$0316>>>0)<($1>>>0);
      if ($85) {
       $$0218$lcssa43 = $$0218;$$0316$lcssa45 = $$0316;
       break;
      }
      $86 = (_EVP_DigestFinal($mctx,$$0218,0)|0);
      $87 = ($86|0)==(0);
      if ($87) {
       break L33;
      }
      $90 = ($$0316|0)==($1|0);
      if ($90) {
       $rv$0 = 1;
       break L31;
      }
      $91 = (($$0218) + ($1)|0);
      $92 = (($$0316) - ($1))|0;
      $93 = (($i$017) + 1)|0;
      (_EVP_DigestInit_ex($mctx,$md,0)|0);
      $94 = (_EVP_DigestUpdate($mctx,$Z,$Zlen)|0);
      $95 = ($94|0)==(0);
      if ($95) {
       break L33;
      } else {
       $$0218 = $91;$$0316 = $92;$i$017 = $93;
      }
     }
     $88 = (_EVP_DigestFinal($mctx,$mtmp,0)|0);
     $89 = ($88|0)==(0);
     if (!($89)) {
      _memcpy(($$0218$lcssa43|0),($mtmp|0),($$0316$lcssa45|0))|0;
      _OPENSSL_cleanse($mtmp,$1);
      $rv$0 = 1;
      break L31;
     }
    }
   } while(0);
   $rv$0 = 0;
  }
 } while(0);
 $96 = HEAP32[$der>>2]|0;
 $97 = ($96|0)==(0|0);
 if (!($97)) {
  _CRYPTO_free($96);
 }
 (_EVP_MD_CTX_cleanup($mctx)|0);
 $$01 = $rv$0;
 STACKTOP = sp;return ($$01|0);
}
function _DH_generate_key($dh) {
 $dh = $dh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dh)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($dh)|0);
 return ($4|0);
}
function _DH_compute_key($key,$pub_key,$dh) {
 $key = $key|0;
 $pub_key = $pub_key|0;
 $dh = $dh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dh)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 63]($key,$pub_key,$dh)|0);
 return ($4|0);
}
function _DH_compute_key_padded($key,$pub_key,$dh) {
 $key = $key|0;
 $pub_key = $pub_key|0;
 $dh = $dh|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dh)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 63]($key,$pub_key,$dh)|0);
 $5 = ($4|0)<(1);
 if ($5) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($dh)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_BN_num_bits($7)|0);
 $9 = (($8) + 7)|0;
 $10 = (($9|0) / 8)&-1;
 $11 = (($10) - ($4))|0;
 $12 = ($11|0)>(0);
 if (!($12)) {
  $$0 = $10;
  return ($$0|0);
 }
 $13 = (($key) + ($11)|0);
 _memmove(($13|0),($key|0),($4|0))|0;
 _memset(($key|0),0,($11|0))|0;
 $$0 = $10;
 return ($$0|0);
}
function _DH_OpenSSL() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (47952|0);
}
function _generate_key($dh) {
 $dh = $dh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $generate_new_key$0 = 0, $local_prk = 0, $mont$0 = 0, $ok$04 = 0, $priv_key$0 = 0, $priv_key$1$ph = 0, $priv_key$18 = 0, $prk$0 = 0, $pub_key$0 = 0, $pub_key$1$ph = 0, $pub_key$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $local_prk = sp;
 $0 = (_BN_CTX_new()|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $priv_key$1$ph = 0;$pub_key$1$ph = 0;
   label = 23;
  } else {
   $2 = ((($dh)) + 24|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $5 = (_BN_new()|0);
    $6 = ($5|0)==(0|0);
    if ($6) {
     $priv_key$1$ph = 0;$pub_key$1$ph = 0;
     label = 23;
     break;
    } else {
     $generate_new_key$0 = 1;$priv_key$0 = $5;
    }
   } else {
    $generate_new_key$0 = 0;$priv_key$0 = $3;
   }
   $7 = ((($dh)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $10 = (_BN_new()|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $priv_key$1$ph = $priv_key$0;$pub_key$1$ph = 0;
     label = 23;
     break;
    } else {
     $pub_key$0 = $10;
    }
   } else {
    $pub_key$0 = $8;
   }
   $12 = ((($dh)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 1;
   $15 = ($14|0)==(0);
   if ($15) {
    $mont$0 = 0;
   } else {
    $16 = ((($dh)) + 32|0);
    $17 = ((($dh)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (_BN_MONT_CTX_set_locked($16,26,$18,$0)|0);
    $20 = ($19|0)==(0|0);
    if ($20) {
     $priv_key$1$ph = $priv_key$0;$pub_key$1$ph = $pub_key$0;
     label = 23;
     break;
    } else {
     $mont$0 = $19;
    }
   }
   $21 = ($generate_new_key$0|0)==(0);
   L12: do {
    if (!($21)) {
     $22 = ((($dh)) + 36|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      $38 = ((($dh)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==(0);
      if ($40) {
       $41 = ((($dh)) + 8|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (_BN_num_bits($42)|0);
       $44 = (($43) + -1)|0;
       $45 = $44;
      } else {
       $45 = $39;
      }
      $46 = (_BN_rand($priv_key$0,$45,0,0)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       $priv_key$1$ph = $priv_key$0;$pub_key$1$ph = $pub_key$0;
       label = 23;
       break L1;
      } else {
       break;
      }
     }
     $25 = (_BN_rand_range($priv_key$0,$23)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      $priv_key$1$ph = $priv_key$0;$pub_key$1$ph = $pub_key$0;
      label = 23;
      break L1;
     }
     $27 = ((($priv_key$0)) + 4|0);
     $28 = ((($priv_key$0)) + 12|0);
     while(1) {
      $29 = HEAP32[$27>>2]|0;
      switch ($29|0) {
      case 0:  {
       break;
      }
      case 1:  {
       $30 = HEAP32[$priv_key$0>>2]|0;
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(1);
       if (!($32)) {
        break L12;
       }
       $33 = HEAP32[$28>>2]|0;
       $34 = ($33|0)==(0);
       if (!($34)) {
        break L12;
       }
       break;
      }
      default: {
       break L12;
      }
      }
      $35 = HEAP32[$22>>2]|0;
      $36 = (_BN_rand_range($priv_key$0,$35)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       $priv_key$1$ph = $priv_key$0;$pub_key$1$ph = $pub_key$0;
       label = 23;
       break L1;
      }
     }
    }
   } while(0);
   $48 = HEAP32[$12>>2]|0;
   $49 = $48 & 2;
   $50 = ($49|0)==(0);
   if ($50) {
    _BN_init($local_prk);
    $51 = HEAP32[$priv_key$0>>2]|0;
    HEAP32[$local_prk>>2] = $51;
    $52 = ((($priv_key$0)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($local_prk)) + 4|0);
    HEAP32[$54>>2] = $53;
    $55 = ((($priv_key$0)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($local_prk)) + 8|0);
    HEAP32[$57>>2] = $56;
    $58 = ((($priv_key$0)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($local_prk)) + 12|0);
    HEAP32[$60>>2] = $59;
    $61 = ((($local_prk)) + 16|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = $62 & 1;
    $64 = ((($priv_key$0)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $65 & -8;
    $67 = $63 | $66;
    $68 = $67 | 6;
    HEAP32[$61>>2] = $68;
    $prk$0 = $local_prk;
   } else {
    $prk$0 = $priv_key$0;
   }
   $69 = ((($dh)) + 68|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($70)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($dh)) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($dh)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (FUNCTION_TABLE_iiiiiiii[$72 & 31]($dh,$pub_key$0,$74,$prk$0,$76,$0,$mont$0)|0);
   $78 = ($77|0)==(0);
   if ($78) {
    $priv_key$1$ph = $priv_key$0;$pub_key$1$ph = $pub_key$0;
    label = 23;
   } else {
    HEAP32[$7>>2] = $pub_key$0;
    HEAP32[$2>>2] = $priv_key$0;
    $ok$04 = 1;$priv_key$18 = $priv_key$0;$pub_key$16 = $pub_key$0;
   }
  }
 } while(0);
 if ((label|0) == 23) {
  _ERR_put_error(5,103,3,89254,198);
  $ok$04 = 0;$priv_key$18 = $priv_key$1$ph;$pub_key$16 = $pub_key$1$ph;
 }
 $79 = ($pub_key$16|0)==(0|0);
 if (!($79)) {
  $80 = ((($dh)) + 20|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(0|0);
  if ($82) {
   _BN_free($pub_key$16);
  }
 }
 $83 = ($priv_key$18|0)==(0|0);
 if ($83) {
  _BN_CTX_free($0);
  STACKTOP = sp;return ($ok$04|0);
 }
 $84 = ((($dh)) + 24|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  _BN_CTX_free($0);
  STACKTOP = sp;return ($ok$04|0);
 }
 _BN_free($priv_key$18);
 _BN_CTX_free($0);
 STACKTOP = sp;return ($ok$04|0);
}
function _compute_key($key,$pub_key,$dh) {
 $key = $key|0;
 $pub_key = $pub_key|0;
 $dh = $dh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $check_result = 0, $mont$0 = 0;
 var $or$cond = 0, $ret$0$ph = 0, $ret$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $check_result = sp;
 $0 = ((($dh)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_BN_num_bits($1)|0);
 $3 = ($2|0)>(10000);
 if ($3) {
  _ERR_put_error(5,102,103,89254,217);
  $ret$04 = -1;
  STACKTOP = sp;return ($ret$04|0);
 }
 $4 = (_BN_CTX_new()|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $ret$04 = -1;
  STACKTOP = sp;return ($ret$04|0);
 }
 _BN_CTX_start($4);
 $6 = (_BN_CTX_get($4)|0);
 $7 = ((($dh)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   _ERR_put_error(5,102,100,89254,228);
   $ret$0$ph = -1;
  } else {
   $10 = ((($dh)) + 28|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 & 1;
   $13 = ($12|0)==(0);
   if ($13) {
    $mont$0 = 0;
   } else {
    $14 = ((($dh)) + 32|0);
    $15 = HEAP32[$0>>2]|0;
    $16 = (_BN_MONT_CTX_set_locked($14,26,$15,$4)|0);
    $17 = HEAP32[$10>>2]|0;
    $18 = $17 & 2;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = HEAP32[$7>>2]|0;
     $21 = ((($20)) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = $22 | 4;
     HEAP32[$21>>2] = $23;
    }
    $24 = ($16|0)==(0|0);
    if ($24) {
     $ret$0$ph = -1;
     break;
    } else {
     $mont$0 = $16;
    }
   }
   $25 = (_DH_check_pub_key($dh,$pub_key,$check_result)|0);
   $26 = ($25|0)==(0);
   $27 = HEAP32[$check_result>>2]|0;
   $28 = ($27|0)!=(0);
   $or$cond = $26 | $28;
   if ($or$cond) {
    _ERR_put_error(5,102,102,89254,244);
    $ret$0$ph = -1;
    break;
   }
   $29 = ((($dh)) + 68|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$7>>2]|0;
   $34 = HEAP32[$0>>2]|0;
   $35 = (FUNCTION_TABLE_iiiiiiii[$32 & 31]($dh,$6,$pub_key,$33,$34,$4,$mont$0)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    _ERR_put_error(5,102,3,89254,250);
    $ret$0$ph = -1;
    break;
   } else {
    $37 = (_BN_bn2bin($6,$key)|0);
    $ret$0$ph = $37;
    break;
   }
  }
 } while(0);
 _BN_CTX_end($4);
 _BN_CTX_free($4);
 $ret$04 = $ret$0$ph;
 STACKTOP = sp;return ($ret$04|0);
}
function _dh_bn_mod_exp($dh,$r,$a,$p,$m,$ctx,$m_ctx) {
 $dh = $dh|0;
 $r = $r|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $m_ctx = $m_ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = ((($dh)) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 2;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = HEAP32[$a>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = (_BN_mod_exp_mont_word($r,$8,$p,$m,$ctx,$m_ctx)|0);
   $$0 = $9;
   return ($$0|0);
  }
 }
 $10 = (_BN_mod_exp_mont($r,$a,$p,$m,$ctx,$m_ctx)|0);
 $$0 = $10;
 return ($$0|0);
}
function _dh_init($dh) {
 $dh = $dh|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dh)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 return 1;
}
function _dh_finish($dh) {
 $dh = $dh|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dh)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return 1;
 }
 _BN_MONT_CTX_free($1);
 return 1;
}
function _DH_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_DH_new_method(0)|0);
 return ($0|0);
}
function _DH_new_method($engine) {
 $engine = $engine|0;
 var $$0 = 0, $$pre = 0, $$pre$phi12Z2D = 0, $$pre$phi13Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(76,89263,126)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(5,105,65,89263,128);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[47988>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_DH_OpenSSL()|0);
  HEAP32[47988>>2] = $4;
  $6 = $4;
 } else {
  $6 = $2;
 }
 $5 = ((($0)) + 68|0);
 HEAP32[$5>>2] = $6;
 $7 = ($engine|0)==(0|0);
 do {
  if ($7) {
   $11 = (_ENGINE_get_default_DH()|0);
   $12 = ((($0)) + 72|0);
   HEAP32[$12>>2] = $11;
   $13 = ($11|0)==(0|0);
   if ($13) {
    $$pre = HEAP32[$5>>2]|0;
    $$pre$phi13Z2D = $12;$21 = $$pre;
   } else {
    $$pre$phi12Z2D = $12;$14 = $11;
    label = 11;
   }
  } else {
   $8 = (_ENGINE_init($engine)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = ((($0)) + 72|0);
    HEAP32[$10>>2] = $engine;
    $$pre$phi12Z2D = $10;$14 = $engine;
    label = 11;
    break;
   }
   _ERR_put_error(5,105,38,89263,136);
   _CRYPTO_free($0);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 11) {
  $15 = (_ENGINE_get_DH($14)|0);
  HEAP32[$5>>2] = $15;
  $16 = ($15|0)==(0|0);
  if ($16) {
   _ERR_put_error(5,105,38,89263,146);
   $17 = HEAP32[$$pre$phi12Z2D>>2]|0;
   (_ENGINE_finish($17)|0);
   _CRYPTO_free($0);
   $$0 = 0;
   return ($$0|0);
  } else {
   $$pre$phi13Z2D = $$pre$phi12Z2D;$21 = $15;
  }
 }
 $18 = ((($0)) + 32|0);
 $19 = ((($0)) + 56|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;HEAP32[$0+24>>2]=0|0;
 ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP32[$18+12>>2]=0|0;HEAP32[$18+16>>2]=0|0;HEAP32[$18+20>>2]=0|0;
 HEAP32[$19>>2] = 1;
 $20 = ((($21)) + 24|0);
 $22 = HEAP32[$20>>2]|0;
 $23 = $22 & -1025;
 $24 = ((($0)) + 28|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($0)) + 60|0);
 (_CRYPTO_new_ex_data(8,$0,$25)|0);
 $26 = HEAP32[$5>>2]|0;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $$0 = $0;
  return ($$0|0);
 }
 $30 = (FUNCTION_TABLE_ii[$28 & 127]($0)|0);
 $31 = ($30|0)==(0);
 if (!($31)) {
  $$0 = $0;
  return ($$0|0);
 }
 $32 = HEAP32[$$pre$phi13Z2D>>2]|0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  (_ENGINE_finish($32)|0);
 }
 _CRYPTO_free_ex_data(8,$0,$25);
 _CRYPTO_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _DH_free($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($r)) + 56|0);
 $2 = (_CRYPTO_add_lock($1,-1,26,89263,187)|0);
 $3 = ($2|0)>(0);
 if ($3) {
  return;
 }
 $4 = ((($r)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  (FUNCTION_TABLE_ii[$7 & 127]($r)|0);
 }
 $9 = ((($r)) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  (_ENGINE_finish($10)|0);
 }
 $12 = ((($r)) + 60|0);
 _CRYPTO_free_ex_data(8,$r,$12);
 $13 = ((($r)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _BN_clear_free($14);
 }
 $16 = ((($r)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  _BN_clear_free($17);
 }
 $19 = ((($r)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  _BN_clear_free($20);
 }
 $22 = ((($r)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  _BN_clear_free($23);
 }
 $25 = ((($r)) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _CRYPTO_free($26);
 }
 $28 = ((($r)) + 52|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  _BN_clear_free($29);
 }
 $31 = ((($r)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  _BN_clear_free($32);
 }
 $34 = ((($r)) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if (!($36)) {
  _BN_clear_free($35);
 }
 _CRYPTO_free($r);
 return;
}
function _DH_size($dh) {
 $dh = $dh|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dh)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_BN_num_bits($1)|0);
 $3 = (($2) + 7)|0;
 $4 = (($3|0) / 8)&-1;
 return ($4|0);
}
function _pkey_dh_init($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(56,89369,101)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1024;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 2;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 32|0);
 HEAP8[$7>>0] = 1;
 $8 = ((($0)) + 36|0);
 $9 = ((($ctx)) + 20|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;
 HEAP32[$9>>2] = $0;
 $10 = ((($0)) + 24|0);
 $11 = ((($ctx)) + 32|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($ctx)) + 36|0);
 HEAP32[$12>>2] = 2;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_dh_copy($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(56,89369,101)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1024;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 2;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 32|0);
 HEAP8[$7>>0] = 1;
 $8 = ((($0)) + 36|0);
 $9 = ((($dst)) + 20|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;
 HEAP32[$9>>2] = $0;
 $10 = ((($0)) + 24|0);
 $11 = ((($dst)) + 32|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($dst)) + 36|0);
 HEAP32[$12>>2] = 2;
 $13 = ((($src)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$0>>2] = $15;
 $16 = ((($14)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 12|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($14)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 4|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($14)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 8|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($14)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 16|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($14)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 20|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($14)) + 32|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ((($0)) + 32|0);
 HEAP8[$33>>0] = $32;
 $34 = ((($14)) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_OBJ_dup($35)|0);
 $37 = ((($0)) + 36|0);
 HEAP32[$37>>2] = $36;
 $38 = ($36|0)==(0|0);
 if ($38) {
  $$0 = 0;
  return ($$0|0);
 }
 $39 = ((($14)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 40|0);
 HEAP32[$41>>2] = $40;
 $42 = ((($0)) + 44|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $45 = ((($14)) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($14)) + 48|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_BUF_memdup($46,$48)|0);
  HEAP32[$42>>2] = $49;
  $50 = HEAP32[$47>>2]|0;
  $51 = ((($0)) + 48|0);
  HEAP32[$51>>2] = $50;
 }
 $52 = ((($14)) + 52|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($0)) + 52|0);
 HEAP32[$54>>2] = $53;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_dh_cleanup($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($1)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _CRYPTO_free($4);
 }
 $6 = ((($1)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _ASN1_OBJECT_free($7);
 }
 _CRYPTO_free($1);
 return;
}
function _pkey_dh_paramgen($ctx,$pkey) {
 $ctx = $ctx|0;
 $pkey = $pkey|0;
 var $$$i = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cb = 0, $dh$0 = 0, $md$0$i = 0, $pcb$0 = 0, $rv$0$i = 0, $subprime_len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cb = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 0:  {
  $7 = ((($ctx)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $pcb$0 = 0;
  } else {
   _evp_pkey_set_cb_translate($cb,$ctx);
   $pcb$0 = $cb;
  }
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $32 = (_DH_new()|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = HEAP32[$1>>2]|0;
   $35 = ((($1)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_DH_generate_parameters_ex($32,$34,$36,$pcb$0)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    _DH_free($32);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    (_EVP_PKEY_assign($pkey,28,$32)|0);
    $$0 = $37;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $13 = HEAP32[$1>>2]|0;
  $14 = ((($1)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($1)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($11|0)>(2);
  if ($18) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = (_DSA_new()|0);
  $20 = ($19|0)==(0|0);
  if ($20) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = ($15|0)==(-1);
  $22 = ($13|0)>(2047);
  $$$i = $22 ? 256 : 160;
  $subprime_len$0$i = $21 ? $$$i : $15;
  $23 = ($17|0)==(0|0);
  do {
   if ($23) {
    if ($22) {
     $24 = (_EVP_sha256()|0);
     $md$0$i = $24;
     break;
    } else {
     $25 = (_EVP_sha1()|0);
     $md$0$i = $25;
     break;
    }
   } else {
    $md$0$i = $17;
   }
  } while(0);
  $26 = HEAP32[$10>>2]|0;
  switch ($26|0) {
  case 1:  {
   $27 = (_dsa_builtin_paramgen($19,$13,$subprime_len$0$i,$md$0$i,0,0,0,0,0,$pcb$0)|0);
   $rv$0$i = $27;
   label = 18;
   break;
  }
  case 2:  {
   $28 = (_dsa_builtin_paramgen2($19,$13,$subprime_len$0$i,$md$0$i,0,0,-1,0,0,0,$pcb$0)|0);
   $rv$0$i = $28;
   label = 18;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 18) {
   $29 = ($rv$0$i|0)<(1);
   if (!($29)) {
    $30 = (_DSA_dup_DH($19)|0);
    _DSA_free($19);
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    (_EVP_PKEY_assign($pkey,920,$30)|0);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  _DSA_free($19);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $4 = (_DH_get_1024_160()|0);
  $dh$0 = $4;
  break;
 }
 case 2:  {
  $5 = (_DH_get_2048_224()|0);
  $dh$0 = $5;
  break;
 }
 case 3:  {
  $6 = (_DH_get_2048_256()|0);
  $dh$0 = $6;
  break;
 }
 default: {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 }
 (_EVP_PKEY_assign($pkey,920,$dh$0)|0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _pkey_dh_keygen($ctx,$pkey) {
 $ctx = $ctx|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(5,113,107,89369,415);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_DH_new()|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[$ctx>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 (_EVP_PKEY_assign($pkey,$6,$3)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = (_EVP_PKEY_copy_parameters($pkey,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($pkey)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_DH_generate_key($11)|0);
 $$0 = $12;
 return ($$0|0);
}
function _pkey_dh_derive($ctx,$key,$keylen) {
 $ctx = $ctx|0;
 $key = $key|0;
 $keylen = $keylen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($ctx)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = ((($3)) + 20|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($6)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($1)) + 32|0);
   $15 = HEAP8[$14>>0]|0;
   switch ($15<<24>>24) {
   case 1:  {
    $16 = ($key|0)==(0|0);
    if ($16) {
     $17 = (_DH_size($9)|0);
     HEAP32[$keylen>>2] = $17;
     $$0 = 1;
     return ($$0|0);
    }
    $18 = (_DH_compute_key($key,$13,$9)|0);
    $19 = ($18|0)<(0);
    if ($19) {
     $$0 = $18;
     return ($$0|0);
    }
    HEAP32[$keylen>>2] = $18;
    $$0 = 1;
    return ($$0|0);
    break;
   }
   case 2:  {
    $20 = ((($1)) + 52|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0);
    if ($22) {
     $$0 = 0;
     return ($$0|0);
    }
    $23 = ((($1)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if ($25) {
     $$0 = 0;
     return ($$0|0);
    }
    $26 = ($key|0)==(0|0);
    if ($26) {
     HEAP32[$keylen>>2] = $21;
     $$0 = 1;
     return ($$0|0);
    }
    $27 = HEAP32[$keylen>>2]|0;
    $28 = ($27|0)==($21|0);
    if (!($28)) {
     $$0 = 0;
     return ($$0|0);
    }
    $29 = (_DH_size($9)|0);
    $30 = (_CRYPTO_malloc($29,89369,464)|0);
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0 = 0;
     return ($$0|0);
    }
    $32 = (_DH_compute_key_padded($30,$13,$9)|0);
    $33 = ($32|0)<(1);
    if ($33) {
     $ret$0$ph = 0;
    } else {
     $34 = HEAP32[$keylen>>2]|0;
     $35 = HEAP32[$23>>2]|0;
     $36 = ((($1)) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($1)) + 48|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ((($1)) + 40|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (_DH_KDF_X9_42($key,$34,$30,$29,$35,$37,$39,$41)|0);
     $43 = ($42|0)==(0);
     if ($43) {
      $ret$0$ph = 0;
     } else {
      $44 = HEAP32[$20>>2]|0;
      HEAP32[$keylen>>2] = $44;
      $ret$0$ph = 1;
     }
    }
    _OPENSSL_cleanse($30,$29);
    _CRYPTO_free($30);
    $$0 = $ret$0$ph;
    return ($$0|0);
    break;
   }
   default: {
    $$0 = 1;
    return ($$0|0);
   }
   }
  }
 }
 _ERR_put_error(5,112,108,89369,436);
 $$0 = 0;
 return ($$0|0);
}
function _pkey_dh_ctrl($ctx,$type,$p1,$p2) {
 $ctx = $ctx|0;
 $type = $type|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p1$cmp = 0, $p1$off = 0, $p1$off6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 L1: do {
  switch ($type|0) {
  case 4097:  {
   $2 = ($p1|0)<(256);
   if ($2) {
    $$0 = -2;
   } else {
    HEAP32[$1>>2] = $p1;
    $$0 = 1;
   }
   break;
  }
  case 4100:  {
   $3 = ((($1)) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ((($1)) + 12|0);
    HEAP32[$6>>2] = $p1;
    $$0 = 1;
   }
   break;
  }
  case 4098:  {
   $7 = ((($1)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = ((($1)) + 4|0);
    HEAP32[$10>>2] = $p1;
    $$0 = 1;
   } else {
    $$0 = -2;
   }
   break;
  }
  case 4101:  {
   $11 = ($p1>>>0)>(2);
   if ($11) {
    $$0 = -2;
   } else {
    $12 = ((($1)) + 8|0);
    HEAP32[$12>>2] = $p1;
    $$0 = 1;
   }
   break;
  }
  case 4099:  {
   $p1$off6 = (($p1) + -1)|0;
   $13 = ($p1$off6>>>0)>(2);
   if ($13) {
    $$0 = -2;
   } else {
    $14 = ((($1)) + 20|0);
    HEAP32[$14>>2] = $p1;
    $$0 = 1;
   }
   break;
  }
  case 2:  {
   $$0 = 1;
   break;
  }
  case 4102:  {
   $15 = ($p1|0)==(-2);
   if ($15) {
    $16 = ((($1)) + 32|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 << 24 >> 24;
    $$0 = $18;
    break L1;
   }
   $p1$off = (($p1) + -1)|0;
   $p1$cmp = ($p1$off>>>0)>(1);
   if ($p1$cmp) {
    $$0 = -2;
   } else {
    $19 = $p1&255;
    $20 = ((($1)) + 32|0);
    HEAP8[$20>>0] = $19;
    $$0 = 1;
   }
   break;
  }
  case 4103:  {
   $21 = ((($1)) + 40|0);
   HEAP32[$21>>2] = $p2;
   $$0 = 1;
   break;
  }
  case 4104:  {
   $22 = ((($1)) + 40|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$p2>>2] = $23;
   $$0 = 1;
   break;
  }
  case 4105:  {
   $24 = ($p1|0)<(1);
   if ($24) {
    $$0 = -2;
   } else {
    $25 = ((($1)) + 52|0);
    HEAP32[$25>>2] = $p1;
    $$0 = 1;
   }
   break;
  }
  case 4106:  {
   $26 = ((($1)) + 52|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$p2>>2] = $27;
   $$0 = 1;
   break;
  }
  case 4107:  {
   $28 = ((($1)) + 44|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    _CRYPTO_free($29);
   }
   HEAP32[$28>>2] = $p2;
   $31 = ($p2|0)==(0|0);
   $32 = ((($1)) + 48|0);
   if ($31) {
    HEAP32[$32>>2] = 0;
    $$0 = 1;
    break L1;
   } else {
    HEAP32[$32>>2] = $p1;
    $$0 = 1;
    break L1;
   }
   break;
  }
  case 4108:  {
   $33 = ((($1)) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP32[$p2>>2] = $34;
   $35 = ((($1)) + 48|0);
   $36 = HEAP32[$35>>2]|0;
   $$0 = $36;
   break;
  }
  case 4109:  {
   $37 = ((($1)) + 36|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    _ASN1_OBJECT_free($38);
   }
   HEAP32[$37>>2] = $p2;
   $$0 = 1;
   break;
  }
  case 4110:  {
   $40 = ((($1)) + 36|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$p2>>2] = $41;
   $$0 = 1;
   break;
  }
  default: {
   $$0 = -2;
  }
  }
 } while(0);
 return ($$0|0);
}
function _pkey_dh_ctrl_str($ctx,$type,$value) {
 $ctx = $ctx|0;
 $type = $type|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($type,89272)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_atoi($value)|0);
  $3 = (_EVP_PKEY_CTX_ctrl($ctx,28,2,4097,$2,0)|0);
  $$0 = $3;
  return ($$0|0);
 }
 $4 = (_strcmp($type,89294)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_atoi($value)|0);
  $7 = ($6>>>0)>(3);
  if ($7) {
   $$0 = -2;
   return ($$0|0);
  }
  $8 = ((($ctx)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 20|0);
  HEAP32[$10>>2] = $6;
  $$0 = 1;
  return ($$0|0);
 }
 $11 = (_strcmp($type,89305)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = (_atoi($value)|0);
  $14 = (_EVP_PKEY_CTX_ctrl($ctx,28,2,4098,$13,0)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (_strcmp($type,89327)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = (_atoi($value)|0);
  $18 = (_EVP_PKEY_CTX_ctrl($ctx,28,2,4100,$17,0)|0);
  $$0 = $18;
  return ($$0|0);
 }
 $19 = (_strcmp($type,89352)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$0 = -2;
  return ($$0|0);
 }
 $21 = (_atoi($value)|0);
 $22 = (_EVP_PKEY_CTX_ctrl($ctx,28,2,4101,$21,0)|0);
 $$0 = $22;
 return ($$0|0);
}
function _DH_get_1024_160() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_DH_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_BN_dup(48208)|0);
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $2;
 $4 = (_BN_dup(48228)|0);
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $4;
 $6 = (_BN_dup(48248)|0);
 $7 = ((($0)) + 36|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = ($6|0)==(0|0);
 $or$cond = $10 | $9;
 if (!($or$cond)) {
  $11 = HEAP32[$5>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $$0 = $0;
   return ($$0|0);
  }
 }
 _DH_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _DH_get_2048_224() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_DH_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_BN_dup(48268)|0);
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $2;
 $4 = (_BN_dup(48288)|0);
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $4;
 $6 = (_BN_dup(48308)|0);
 $7 = ((($0)) + 36|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = ($6|0)==(0|0);
 $or$cond = $10 | $9;
 if (!($or$cond)) {
  $11 = HEAP32[$5>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $$0 = $0;
   return ($$0|0);
  }
 }
 _DH_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _DH_get_2048_256() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_DH_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_BN_dup(48328)|0);
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $2;
 $4 = (_BN_dup(48348)|0);
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $4;
 $6 = (_BN_dup(48368)|0);
 $7 = ((($0)) + 36|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = ($6|0)==(0|0);
 $or$cond = $10 | $9;
 if (!($or$cond)) {
  $11 = HEAP32[$5>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $$0 = $0;
   return ($$0|0);
  }
 }
 _DH_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _SHA1_Update($c,$data_,$len) {
 $c = $c|0;
 $data_ = $data_|0;
 $len = $len|0;
 var $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$0 = 0, $data$1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  return 1;
 }
 $1 = ((($c)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $len << 3;
 $4 = (($2) + ($3))|0;
 $5 = ($4>>>0)<($2>>>0);
 $6 = ((($c)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  $11 = $8;
 } else {
  $11 = $7;
 }
 $9 = $len >>> 29;
 $10 = (($11) + ($9))|0;
 HEAP32[$6>>2] = $10;
 HEAP32[$1>>2] = $4;
 $12 = ((($c)) + 92|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $$01 = $len;$data$0 = $data_;
  } else {
   $15 = ((($c)) + 28|0);
   $16 = (($13) + ($len))|0;
   $17 = $16 | $len;
   $18 = ($17>>>0)>(63);
   $19 = (($15) + ($13)|0);
   if ($18) {
    $20 = (64 - ($13))|0;
    _memcpy(($19|0),($data_|0),($20|0))|0;
    _sha1_block_data_order($c,$15,1);
    $21 = (($data_) + ($20)|0);
    $22 = (($len) - ($20))|0;
    dest=$15; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$01 = $22;$data$0 = $21;
    break;
   }
   _memcpy(($19|0),($data_|0),($len|0))|0;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($23) + ($len))|0;
   HEAP32[$12>>2] = $24;
   return 1;
  }
 } while(0);
 $25 = $$01 >>> 6;
 $26 = ($25|0)==(0);
 if ($26) {
  $$1 = $$01;$data$1 = $data$0;
 } else {
  _sha1_block_data_order($c,$data$0,$25);
  $27 = $25 << 6;
  $28 = (($data$0) + ($27)|0);
  $29 = (($$01) - ($27))|0;
  $$1 = $29;$data$1 = $28;
 }
 $30 = ($$1|0)==(0);
 if ($30) {
  return 1;
 }
 $31 = ((($c)) + 28|0);
 HEAP32[$12>>2] = $$1;
 _memcpy(($31|0),($data$1|0),($$1|0))|0;
 return 1;
}
function _SHA1_Final($md,$c) {
 $md = $md|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $n$0 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 28|0);
 $1 = ((($c)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2)|0);
 HEAP8[$3>>0] = -128;
 $4 = (($2) + 1)|0;
 $5 = ($4>>>0)>(56);
 if ($5) {
  $6 = (($0) + ($4)|0);
  $7 = (63 - ($2))|0;
  _memset(($6|0),0,($7|0))|0;
  _sha1_block_data_order($c,$0,1);
  $n$0 = 0;
 } else {
  $n$0 = $4;
 }
 $8 = (($0) + ($n$0)|0);
 $9 = (56 - ($n$0))|0;
 _memset(($8|0),0,($9|0))|0;
 $10 = ((($c)) + 84|0);
 $11 = ((($c)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 24;
 $14 = $13&255;
 $15 = ((($10)) + 1|0);
 HEAP8[$10>>0] = $14;
 $16 = $12 >>> 16;
 $17 = $16&255;
 $18 = ((($10)) + 2|0);
 HEAP8[$15>>0] = $17;
 $19 = $12 >>> 8;
 $20 = $19&255;
 $21 = ((($10)) + 3|0);
 HEAP8[$18>>0] = $20;
 $22 = $12&255;
 $23 = ((($c)) + 88|0);
 HEAP8[$21>>0] = $22;
 $24 = ((($c)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 >>> 24;
 $27 = $26&255;
 $28 = ((($23)) + 1|0);
 HEAP8[$23>>0] = $27;
 $29 = $25 >>> 16;
 $30 = $29&255;
 $31 = ((($23)) + 2|0);
 HEAP8[$28>>0] = $30;
 $32 = $25 >>> 8;
 $33 = $32&255;
 $34 = ((($23)) + 3|0);
 HEAP8[$31>>0] = $33;
 $35 = $25&255;
 HEAP8[$34>>0] = $35;
 _sha1_block_data_order($c,$0,1);
 dest=$0; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $36 = HEAP32[$c>>2]|0;
 $37 = $36 >>> 24;
 $38 = $37&255;
 $39 = ((($md)) + 1|0);
 HEAP8[$md>>0] = $38;
 $40 = $36 >>> 16;
 $41 = $40&255;
 $42 = ((($md)) + 2|0);
 HEAP8[$39>>0] = $41;
 $43 = $36 >>> 8;
 $44 = $43&255;
 $45 = ((($md)) + 3|0);
 HEAP8[$42>>0] = $44;
 $46 = $36&255;
 $47 = ((($md)) + 4|0);
 HEAP8[$45>>0] = $46;
 $48 = ((($c)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 24;
 $51 = $50&255;
 $52 = ((($md)) + 5|0);
 HEAP8[$47>>0] = $51;
 $53 = $49 >>> 16;
 $54 = $53&255;
 $55 = ((($md)) + 6|0);
 HEAP8[$52>>0] = $54;
 $56 = $49 >>> 8;
 $57 = $56&255;
 $58 = ((($md)) + 7|0);
 HEAP8[$55>>0] = $57;
 $59 = $49&255;
 $60 = ((($md)) + 8|0);
 HEAP8[$58>>0] = $59;
 $61 = ((($c)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 >>> 24;
 $64 = $63&255;
 $65 = ((($md)) + 9|0);
 HEAP8[$60>>0] = $64;
 $66 = $62 >>> 16;
 $67 = $66&255;
 $68 = ((($md)) + 10|0);
 HEAP8[$65>>0] = $67;
 $69 = $62 >>> 8;
 $70 = $69&255;
 $71 = ((($md)) + 11|0);
 HEAP8[$68>>0] = $70;
 $72 = $62&255;
 $73 = ((($md)) + 12|0);
 HEAP8[$71>>0] = $72;
 $74 = ((($c)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 >>> 24;
 $77 = $76&255;
 $78 = ((($md)) + 13|0);
 HEAP8[$73>>0] = $77;
 $79 = $75 >>> 16;
 $80 = $79&255;
 $81 = ((($md)) + 14|0);
 HEAP8[$78>>0] = $80;
 $82 = $75 >>> 8;
 $83 = $82&255;
 $84 = ((($md)) + 15|0);
 HEAP8[$81>>0] = $83;
 $85 = $75&255;
 $86 = ((($md)) + 16|0);
 HEAP8[$84>>0] = $85;
 $87 = ((($c)) + 16|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 >>> 24;
 $90 = $89&255;
 $91 = ((($md)) + 17|0);
 HEAP8[$86>>0] = $90;
 $92 = $88 >>> 16;
 $93 = $92&255;
 $94 = ((($md)) + 18|0);
 HEAP8[$91>>0] = $93;
 $95 = $88 >>> 8;
 $96 = $95&255;
 $97 = ((($md)) + 19|0);
 HEAP8[$94>>0] = $96;
 $98 = $88&255;
 HEAP8[$97>>0] = $98;
 return 1;
}
function _SHA1_Init($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$c; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$c>>2] = 1732584193;
 $0 = ((($c)) + 4|0);
 HEAP32[$0>>2] = -271733879;
 $1 = ((($c)) + 8|0);
 HEAP32[$1>>2] = -1732584194;
 $2 = ((($c)) + 12|0);
 HEAP32[$2>>2] = 271733878;
 $3 = ((($c)) + 16|0);
 HEAP32[$3>>2] = -1009589776;
 return 1;
}
function _sha1_block_data_order($c,$p,$num) {
 $c = $c|0;
 $p = $p|0;
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $A$0 = 0, $A$0$pre = 0, $B$0 = 0, $B$0$pre = 0, $C$0 = 0, $C$0$pre = 0, $D$0 = 0, $D$0$pre = 0, $E$0 = 0, $data$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 4|0);
 $1 = ((($c)) + 8|0);
 $2 = ((($c)) + 12|0);
 $3 = ((($c)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $D$0$pre = HEAP32[$2>>2]|0;
 $C$0$pre = HEAP32[$1>>2]|0;
 $B$0$pre = HEAP32[$0>>2]|0;
 $A$0$pre = HEAP32[$c>>2]|0;
 $$0 = $num;$A$0 = $A$0$pre;$B$0 = $B$0$pre;$C$0 = $C$0$pre;$D$0 = $D$0$pre;$E$0 = $4;$data$0 = $p;
 while(1) {
  $5 = ((($data$0)) + 1|0);
  $6 = HEAP8[$data$0>>0]|0;
  $7 = $6&255;
  $8 = $7 << 24;
  $9 = ((($data$0)) + 2|0);
  $10 = HEAP8[$5>>0]|0;
  $11 = $10&255;
  $12 = $11 << 16;
  $13 = $12 | $8;
  $14 = ((($data$0)) + 3|0);
  $15 = HEAP8[$9>>0]|0;
  $16 = $15&255;
  $17 = $16 << 8;
  $18 = $13 | $17;
  $19 = ((($data$0)) + 4|0);
  $20 = HEAP8[$14>>0]|0;
  $21 = $20&255;
  $22 = $18 | $21;
  $23 = ((($data$0)) + 5|0);
  $24 = HEAP8[$19>>0]|0;
  $25 = $24&255;
  $26 = $25 << 24;
  $27 = ((($data$0)) + 6|0);
  $28 = HEAP8[$23>>0]|0;
  $29 = $28&255;
  $30 = $29 << 16;
  $31 = $30 | $26;
  $32 = ((($data$0)) + 7|0);
  $33 = HEAP8[$27>>0]|0;
  $34 = $33&255;
  $35 = $34 << 8;
  $36 = $31 | $35;
  $37 = ((($data$0)) + 8|0);
  $38 = HEAP8[$32>>0]|0;
  $39 = $38&255;
  $40 = $36 | $39;
  $41 = $A$0 << 5;
  $42 = $A$0 >>> 27;
  $43 = $41 | $42;
  $44 = $C$0 ^ $D$0;
  $45 = $44 & $B$0;
  $46 = $45 ^ $D$0;
  $47 = (($E$0) + 1518500249)|0;
  $48 = (($47) + ($46))|0;
  $49 = (($48) + ($43))|0;
  $50 = (($49) + ($22))|0;
  $51 = $B$0 << 30;
  $52 = $B$0 >>> 2;
  $53 = $51 | $52;
  $54 = ((($data$0)) + 9|0);
  $55 = HEAP8[$37>>0]|0;
  $56 = $55&255;
  $57 = $56 << 24;
  $58 = ((($data$0)) + 10|0);
  $59 = HEAP8[$54>>0]|0;
  $60 = $59&255;
  $61 = $60 << 16;
  $62 = $61 | $57;
  $63 = ((($data$0)) + 11|0);
  $64 = HEAP8[$58>>0]|0;
  $65 = $64&255;
  $66 = $65 << 8;
  $67 = $62 | $66;
  $68 = ((($data$0)) + 12|0);
  $69 = HEAP8[$63>>0]|0;
  $70 = $69&255;
  $71 = $67 | $70;
  $72 = $50 << 5;
  $73 = $50 >>> 27;
  $74 = $72 | $73;
  $75 = $53 ^ $C$0;
  $76 = $75 & $A$0;
  $77 = $76 ^ $C$0;
  $78 = (($D$0) + 1518500249)|0;
  $79 = (($78) + ($77))|0;
  $80 = (($79) + ($40))|0;
  $81 = (($80) + ($74))|0;
  $82 = $A$0 << 30;
  $83 = $A$0 >>> 2;
  $84 = $82 | $83;
  $85 = ((($data$0)) + 13|0);
  $86 = HEAP8[$68>>0]|0;
  $87 = $86&255;
  $88 = $87 << 24;
  $89 = ((($data$0)) + 14|0);
  $90 = HEAP8[$85>>0]|0;
  $91 = $90&255;
  $92 = $91 << 16;
  $93 = $92 | $88;
  $94 = ((($data$0)) + 15|0);
  $95 = HEAP8[$89>>0]|0;
  $96 = $95&255;
  $97 = $96 << 8;
  $98 = $93 | $97;
  $99 = ((($data$0)) + 16|0);
  $100 = HEAP8[$94>>0]|0;
  $101 = $100&255;
  $102 = $98 | $101;
  $103 = $81 << 5;
  $104 = $81 >>> 27;
  $105 = $103 | $104;
  $106 = $84 ^ $53;
  $107 = $50 & $106;
  $108 = $107 ^ $53;
  $109 = (($C$0) + 1518500249)|0;
  $110 = (($109) + ($108))|0;
  $111 = (($110) + ($71))|0;
  $112 = (($111) + ($105))|0;
  $113 = $50 << 30;
  $114 = $50 >>> 2;
  $115 = $113 | $114;
  $116 = ((($data$0)) + 17|0);
  $117 = HEAP8[$99>>0]|0;
  $118 = $117&255;
  $119 = $118 << 24;
  $120 = ((($data$0)) + 18|0);
  $121 = HEAP8[$116>>0]|0;
  $122 = $121&255;
  $123 = $122 << 16;
  $124 = $123 | $119;
  $125 = ((($data$0)) + 19|0);
  $126 = HEAP8[$120>>0]|0;
  $127 = $126&255;
  $128 = $127 << 8;
  $129 = $124 | $128;
  $130 = ((($data$0)) + 20|0);
  $131 = HEAP8[$125>>0]|0;
  $132 = $131&255;
  $133 = $129 | $132;
  $134 = $112 << 5;
  $135 = $112 >>> 27;
  $136 = $134 | $135;
  $137 = $115 ^ $84;
  $138 = $81 & $137;
  $139 = $138 ^ $84;
  $140 = (($53) + 1518500249)|0;
  $141 = (($140) + ($139))|0;
  $142 = (($141) + ($102))|0;
  $143 = (($142) + ($136))|0;
  $144 = $81 << 30;
  $145 = $81 >>> 2;
  $146 = $144 | $145;
  $147 = ((($data$0)) + 21|0);
  $148 = HEAP8[$130>>0]|0;
  $149 = $148&255;
  $150 = $149 << 24;
  $151 = ((($data$0)) + 22|0);
  $152 = HEAP8[$147>>0]|0;
  $153 = $152&255;
  $154 = $153 << 16;
  $155 = $154 | $150;
  $156 = ((($data$0)) + 23|0);
  $157 = HEAP8[$151>>0]|0;
  $158 = $157&255;
  $159 = $158 << 8;
  $160 = $155 | $159;
  $161 = ((($data$0)) + 24|0);
  $162 = HEAP8[$156>>0]|0;
  $163 = $162&255;
  $164 = $160 | $163;
  $165 = $143 << 5;
  $166 = $143 >>> 27;
  $167 = $165 | $166;
  $168 = $146 ^ $115;
  $169 = $112 & $168;
  $170 = $169 ^ $115;
  $171 = (($84) + 1518500249)|0;
  $172 = (($171) + ($170))|0;
  $173 = (($172) + ($133))|0;
  $174 = (($173) + ($167))|0;
  $175 = $112 << 30;
  $176 = $112 >>> 2;
  $177 = $175 | $176;
  $178 = ((($data$0)) + 25|0);
  $179 = HEAP8[$161>>0]|0;
  $180 = $179&255;
  $181 = $180 << 24;
  $182 = ((($data$0)) + 26|0);
  $183 = HEAP8[$178>>0]|0;
  $184 = $183&255;
  $185 = $184 << 16;
  $186 = $185 | $181;
  $187 = ((($data$0)) + 27|0);
  $188 = HEAP8[$182>>0]|0;
  $189 = $188&255;
  $190 = $189 << 8;
  $191 = $186 | $190;
  $192 = ((($data$0)) + 28|0);
  $193 = HEAP8[$187>>0]|0;
  $194 = $193&255;
  $195 = $191 | $194;
  $196 = $174 << 5;
  $197 = $174 >>> 27;
  $198 = $196 | $197;
  $199 = $177 ^ $146;
  $200 = $143 & $199;
  $201 = $200 ^ $146;
  $202 = (($115) + 1518500249)|0;
  $203 = (($202) + ($201))|0;
  $204 = (($203) + ($164))|0;
  $205 = (($204) + ($198))|0;
  $206 = $143 << 30;
  $207 = $143 >>> 2;
  $208 = $206 | $207;
  $209 = ((($data$0)) + 29|0);
  $210 = HEAP8[$192>>0]|0;
  $211 = $210&255;
  $212 = $211 << 24;
  $213 = ((($data$0)) + 30|0);
  $214 = HEAP8[$209>>0]|0;
  $215 = $214&255;
  $216 = $215 << 16;
  $217 = $216 | $212;
  $218 = ((($data$0)) + 31|0);
  $219 = HEAP8[$213>>0]|0;
  $220 = $219&255;
  $221 = $220 << 8;
  $222 = $217 | $221;
  $223 = ((($data$0)) + 32|0);
  $224 = HEAP8[$218>>0]|0;
  $225 = $224&255;
  $226 = $222 | $225;
  $227 = $205 << 5;
  $228 = $205 >>> 27;
  $229 = $227 | $228;
  $230 = $208 ^ $177;
  $231 = $174 & $230;
  $232 = $231 ^ $177;
  $233 = (($146) + 1518500249)|0;
  $234 = (($233) + ($232))|0;
  $235 = (($234) + ($195))|0;
  $236 = (($235) + ($229))|0;
  $237 = $174 << 30;
  $238 = $174 >>> 2;
  $239 = $237 | $238;
  $240 = ((($data$0)) + 33|0);
  $241 = HEAP8[$223>>0]|0;
  $242 = $241&255;
  $243 = $242 << 24;
  $244 = ((($data$0)) + 34|0);
  $245 = HEAP8[$240>>0]|0;
  $246 = $245&255;
  $247 = $246 << 16;
  $248 = $247 | $243;
  $249 = ((($data$0)) + 35|0);
  $250 = HEAP8[$244>>0]|0;
  $251 = $250&255;
  $252 = $251 << 8;
  $253 = $248 | $252;
  $254 = ((($data$0)) + 36|0);
  $255 = HEAP8[$249>>0]|0;
  $256 = $255&255;
  $257 = $253 | $256;
  $258 = $236 << 5;
  $259 = $236 >>> 27;
  $260 = $258 | $259;
  $261 = $239 ^ $208;
  $262 = $205 & $261;
  $263 = $262 ^ $208;
  $264 = (($177) + 1518500249)|0;
  $265 = (($264) + ($263))|0;
  $266 = (($265) + ($226))|0;
  $267 = (($266) + ($260))|0;
  $268 = $205 << 30;
  $269 = $205 >>> 2;
  $270 = $268 | $269;
  $271 = ((($data$0)) + 37|0);
  $272 = HEAP8[$254>>0]|0;
  $273 = $272&255;
  $274 = $273 << 24;
  $275 = ((($data$0)) + 38|0);
  $276 = HEAP8[$271>>0]|0;
  $277 = $276&255;
  $278 = $277 << 16;
  $279 = $278 | $274;
  $280 = ((($data$0)) + 39|0);
  $281 = HEAP8[$275>>0]|0;
  $282 = $281&255;
  $283 = $282 << 8;
  $284 = $279 | $283;
  $285 = ((($data$0)) + 40|0);
  $286 = HEAP8[$280>>0]|0;
  $287 = $286&255;
  $288 = $284 | $287;
  $289 = $267 << 5;
  $290 = $267 >>> 27;
  $291 = $289 | $290;
  $292 = $270 ^ $239;
  $293 = $236 & $292;
  $294 = $293 ^ $239;
  $295 = (($208) + 1518500249)|0;
  $296 = (($295) + ($294))|0;
  $297 = (($296) + ($257))|0;
  $298 = (($297) + ($291))|0;
  $299 = $236 << 30;
  $300 = $236 >>> 2;
  $301 = $299 | $300;
  $302 = ((($data$0)) + 41|0);
  $303 = HEAP8[$285>>0]|0;
  $304 = $303&255;
  $305 = $304 << 24;
  $306 = ((($data$0)) + 42|0);
  $307 = HEAP8[$302>>0]|0;
  $308 = $307&255;
  $309 = $308 << 16;
  $310 = $309 | $305;
  $311 = ((($data$0)) + 43|0);
  $312 = HEAP8[$306>>0]|0;
  $313 = $312&255;
  $314 = $313 << 8;
  $315 = $310 | $314;
  $316 = ((($data$0)) + 44|0);
  $317 = HEAP8[$311>>0]|0;
  $318 = $317&255;
  $319 = $315 | $318;
  $320 = $298 << 5;
  $321 = $298 >>> 27;
  $322 = $320 | $321;
  $323 = $301 ^ $270;
  $324 = $267 & $323;
  $325 = $324 ^ $270;
  $326 = (($239) + 1518500249)|0;
  $327 = (($326) + ($325))|0;
  $328 = (($327) + ($288))|0;
  $329 = (($328) + ($322))|0;
  $330 = $267 << 30;
  $331 = $267 >>> 2;
  $332 = $330 | $331;
  $333 = ((($data$0)) + 45|0);
  $334 = HEAP8[$316>>0]|0;
  $335 = $334&255;
  $336 = $335 << 24;
  $337 = ((($data$0)) + 46|0);
  $338 = HEAP8[$333>>0]|0;
  $339 = $338&255;
  $340 = $339 << 16;
  $341 = $340 | $336;
  $342 = ((($data$0)) + 47|0);
  $343 = HEAP8[$337>>0]|0;
  $344 = $343&255;
  $345 = $344 << 8;
  $346 = $341 | $345;
  $347 = ((($data$0)) + 48|0);
  $348 = HEAP8[$342>>0]|0;
  $349 = $348&255;
  $350 = $346 | $349;
  $351 = $329 << 5;
  $352 = $329 >>> 27;
  $353 = $351 | $352;
  $354 = $332 ^ $301;
  $355 = $298 & $354;
  $356 = $355 ^ $301;
  $357 = (($270) + 1518500249)|0;
  $358 = (($357) + ($356))|0;
  $359 = (($358) + ($319))|0;
  $360 = (($359) + ($353))|0;
  $361 = $298 << 30;
  $362 = $298 >>> 2;
  $363 = $361 | $362;
  $364 = ((($data$0)) + 49|0);
  $365 = HEAP8[$347>>0]|0;
  $366 = $365&255;
  $367 = $366 << 24;
  $368 = ((($data$0)) + 50|0);
  $369 = HEAP8[$364>>0]|0;
  $370 = $369&255;
  $371 = $370 << 16;
  $372 = $371 | $367;
  $373 = ((($data$0)) + 51|0);
  $374 = HEAP8[$368>>0]|0;
  $375 = $374&255;
  $376 = $375 << 8;
  $377 = $372 | $376;
  $378 = ((($data$0)) + 52|0);
  $379 = HEAP8[$373>>0]|0;
  $380 = $379&255;
  $381 = $377 | $380;
  $382 = $360 << 5;
  $383 = $360 >>> 27;
  $384 = $382 | $383;
  $385 = $363 ^ $332;
  $386 = $329 & $385;
  $387 = $386 ^ $332;
  $388 = (($301) + 1518500249)|0;
  $389 = (($388) + ($387))|0;
  $390 = (($389) + ($350))|0;
  $391 = (($390) + ($384))|0;
  $392 = $329 << 30;
  $393 = $329 >>> 2;
  $394 = $392 | $393;
  $395 = ((($data$0)) + 53|0);
  $396 = HEAP8[$378>>0]|0;
  $397 = $396&255;
  $398 = $397 << 24;
  $399 = ((($data$0)) + 54|0);
  $400 = HEAP8[$395>>0]|0;
  $401 = $400&255;
  $402 = $401 << 16;
  $403 = $402 | $398;
  $404 = ((($data$0)) + 55|0);
  $405 = HEAP8[$399>>0]|0;
  $406 = $405&255;
  $407 = $406 << 8;
  $408 = $403 | $407;
  $409 = ((($data$0)) + 56|0);
  $410 = HEAP8[$404>>0]|0;
  $411 = $410&255;
  $412 = $408 | $411;
  $413 = $391 << 5;
  $414 = $391 >>> 27;
  $415 = $413 | $414;
  $416 = $394 ^ $363;
  $417 = $360 & $416;
  $418 = $417 ^ $363;
  $419 = (($332) + 1518500249)|0;
  $420 = (($419) + ($418))|0;
  $421 = (($420) + ($381))|0;
  $422 = (($421) + ($415))|0;
  $423 = $360 << 30;
  $424 = $360 >>> 2;
  $425 = $423 | $424;
  $426 = ((($data$0)) + 57|0);
  $427 = HEAP8[$409>>0]|0;
  $428 = $427&255;
  $429 = $428 << 24;
  $430 = ((($data$0)) + 58|0);
  $431 = HEAP8[$426>>0]|0;
  $432 = $431&255;
  $433 = $432 << 16;
  $434 = $433 | $429;
  $435 = ((($data$0)) + 59|0);
  $436 = HEAP8[$430>>0]|0;
  $437 = $436&255;
  $438 = $437 << 8;
  $439 = $434 | $438;
  $440 = ((($data$0)) + 60|0);
  $441 = HEAP8[$435>>0]|0;
  $442 = $441&255;
  $443 = $439 | $442;
  $444 = $422 << 5;
  $445 = $422 >>> 27;
  $446 = $444 | $445;
  $447 = $425 ^ $394;
  $448 = $391 & $447;
  $449 = $448 ^ $394;
  $450 = (($363) + 1518500249)|0;
  $451 = (($450) + ($449))|0;
  $452 = (($451) + ($412))|0;
  $453 = (($452) + ($446))|0;
  $454 = $391 << 30;
  $455 = $391 >>> 2;
  $456 = $454 | $455;
  $457 = ((($data$0)) + 61|0);
  $458 = HEAP8[$440>>0]|0;
  $459 = $458&255;
  $460 = $459 << 24;
  $461 = ((($data$0)) + 62|0);
  $462 = HEAP8[$457>>0]|0;
  $463 = $462&255;
  $464 = $463 << 16;
  $465 = $464 | $460;
  $466 = ((($data$0)) + 63|0);
  $467 = HEAP8[$461>>0]|0;
  $468 = $467&255;
  $469 = $468 << 8;
  $470 = $465 | $469;
  $471 = ((($data$0)) + 64|0);
  $472 = HEAP8[$466>>0]|0;
  $473 = $472&255;
  $474 = $470 | $473;
  $475 = $453 << 5;
  $476 = $453 >>> 27;
  $477 = $475 | $476;
  $478 = $456 ^ $425;
  $479 = $422 & $478;
  $480 = $479 ^ $425;
  $481 = (($394) + 1518500249)|0;
  $482 = (($481) + ($480))|0;
  $483 = (($482) + ($443))|0;
  $484 = (($483) + ($477))|0;
  $485 = $422 << 30;
  $486 = $422 >>> 2;
  $487 = $485 | $486;
  $488 = $484 << 5;
  $489 = $484 >>> 27;
  $490 = $488 | $489;
  $491 = $487 ^ $456;
  $492 = $453 & $491;
  $493 = $492 ^ $456;
  $494 = (($425) + 1518500249)|0;
  $495 = (($494) + ($493))|0;
  $496 = (($495) + ($474))|0;
  $497 = (($496) + ($490))|0;
  $498 = $453 << 30;
  $499 = $453 >>> 2;
  $500 = $498 | $499;
  $501 = $71 ^ $22;
  $502 = $501 ^ $257;
  $503 = $502 ^ $412;
  $504 = $503 << 1;
  $505 = $503 >>> 31;
  $506 = $504 | $505;
  $507 = (($456) + 1518500249)|0;
  $508 = $497 << 5;
  $509 = $497 >>> 27;
  $510 = $508 | $509;
  $511 = $500 ^ $487;
  $512 = $484 & $511;
  $513 = $512 ^ $487;
  $514 = (($507) + ($506))|0;
  $515 = (($514) + ($513))|0;
  $516 = (($515) + ($510))|0;
  $517 = $484 << 30;
  $518 = $484 >>> 2;
  $519 = $517 | $518;
  $520 = $102 ^ $40;
  $521 = $520 ^ $288;
  $522 = $521 ^ $443;
  $523 = $522 << 1;
  $524 = $522 >>> 31;
  $525 = $523 | $524;
  $526 = (($487) + 1518500249)|0;
  $527 = $516 << 5;
  $528 = $516 >>> 27;
  $529 = $527 | $528;
  $530 = $519 ^ $500;
  $531 = $497 & $530;
  $532 = $531 ^ $500;
  $533 = (($526) + ($525))|0;
  $534 = (($533) + ($532))|0;
  $535 = (($534) + ($529))|0;
  $536 = $497 << 30;
  $537 = $497 >>> 2;
  $538 = $536 | $537;
  $539 = $133 ^ $71;
  $540 = $539 ^ $319;
  $541 = $540 ^ $474;
  $542 = $541 << 1;
  $543 = $541 >>> 31;
  $544 = $542 | $543;
  $545 = (($500) + 1518500249)|0;
  $546 = $535 << 5;
  $547 = $535 >>> 27;
  $548 = $546 | $547;
  $549 = $538 ^ $519;
  $550 = $516 & $549;
  $551 = $550 ^ $519;
  $552 = (($545) + ($544))|0;
  $553 = (($552) + ($551))|0;
  $554 = (($553) + ($548))|0;
  $555 = $516 << 30;
  $556 = $516 >>> 2;
  $557 = $555 | $556;
  $558 = $164 ^ $102;
  $559 = $558 ^ $350;
  $560 = $559 ^ $506;
  $561 = $560 << 1;
  $562 = $560 >>> 31;
  $563 = $561 | $562;
  $564 = $554 << 5;
  $565 = $554 >>> 27;
  $566 = $564 | $565;
  $567 = $557 ^ $538;
  $568 = $535 & $567;
  $569 = $568 ^ $538;
  $570 = (($563) + 1518500249)|0;
  $571 = (($570) + ($519))|0;
  $572 = (($571) + ($569))|0;
  $573 = (($572) + ($566))|0;
  $574 = $535 << 30;
  $575 = $535 >>> 2;
  $576 = $574 | $575;
  $577 = $195 ^ $133;
  $578 = $577 ^ $381;
  $579 = $578 ^ $525;
  $580 = $579 << 1;
  $581 = $579 >>> 31;
  $582 = $580 | $581;
  $583 = $573 << 5;
  $584 = $573 >>> 27;
  $585 = $583 | $584;
  $586 = $576 ^ $557;
  $587 = $586 ^ $554;
  $588 = (($582) + 1859775393)|0;
  $589 = (($588) + ($538))|0;
  $590 = (($589) + ($587))|0;
  $591 = (($590) + ($585))|0;
  $592 = $554 << 30;
  $593 = $554 >>> 2;
  $594 = $592 | $593;
  $595 = $226 ^ $164;
  $596 = $595 ^ $412;
  $597 = $596 ^ $544;
  $598 = $597 << 1;
  $599 = $597 >>> 31;
  $600 = $598 | $599;
  $601 = $591 << 5;
  $602 = $591 >>> 27;
  $603 = $601 | $602;
  $604 = $594 ^ $576;
  $605 = $604 ^ $573;
  $606 = (($600) + 1859775393)|0;
  $607 = (($606) + ($557))|0;
  $608 = (($607) + ($605))|0;
  $609 = (($608) + ($603))|0;
  $610 = $573 << 30;
  $611 = $573 >>> 2;
  $612 = $610 | $611;
  $613 = $257 ^ $195;
  $614 = $613 ^ $443;
  $615 = $614 ^ $563;
  $616 = $615 << 1;
  $617 = $615 >>> 31;
  $618 = $616 | $617;
  $619 = $609 << 5;
  $620 = $609 >>> 27;
  $621 = $619 | $620;
  $622 = $612 ^ $594;
  $623 = $622 ^ $591;
  $624 = (($618) + 1859775393)|0;
  $625 = (($624) + ($576))|0;
  $626 = (($625) + ($623))|0;
  $627 = (($626) + ($621))|0;
  $628 = $591 << 30;
  $629 = $591 >>> 2;
  $630 = $628 | $629;
  $631 = $288 ^ $226;
  $632 = $631 ^ $474;
  $633 = $632 ^ $582;
  $634 = $633 << 1;
  $635 = $633 >>> 31;
  $636 = $634 | $635;
  $637 = $627 << 5;
  $638 = $627 >>> 27;
  $639 = $637 | $638;
  $640 = $630 ^ $612;
  $641 = $640 ^ $609;
  $642 = (($636) + 1859775393)|0;
  $643 = (($642) + ($594))|0;
  $644 = (($643) + ($641))|0;
  $645 = (($644) + ($639))|0;
  $646 = $609 << 30;
  $647 = $609 >>> 2;
  $648 = $646 | $647;
  $649 = $319 ^ $257;
  $650 = $649 ^ $506;
  $651 = $650 ^ $600;
  $652 = $651 << 1;
  $653 = $651 >>> 31;
  $654 = $652 | $653;
  $655 = $645 << 5;
  $656 = $645 >>> 27;
  $657 = $655 | $656;
  $658 = $648 ^ $630;
  $659 = $658 ^ $627;
  $660 = (($654) + 1859775393)|0;
  $661 = (($660) + ($612))|0;
  $662 = (($661) + ($659))|0;
  $663 = (($662) + ($657))|0;
  $664 = $627 << 30;
  $665 = $627 >>> 2;
  $666 = $664 | $665;
  $667 = $350 ^ $288;
  $668 = $667 ^ $525;
  $669 = $668 ^ $618;
  $670 = $669 << 1;
  $671 = $669 >>> 31;
  $672 = $670 | $671;
  $673 = $663 << 5;
  $674 = $663 >>> 27;
  $675 = $673 | $674;
  $676 = $666 ^ $648;
  $677 = $676 ^ $645;
  $678 = (($672) + 1859775393)|0;
  $679 = (($678) + ($630))|0;
  $680 = (($679) + ($677))|0;
  $681 = (($680) + ($675))|0;
  $682 = $645 << 30;
  $683 = $645 >>> 2;
  $684 = $682 | $683;
  $685 = $381 ^ $319;
  $686 = $685 ^ $544;
  $687 = $686 ^ $636;
  $688 = $687 << 1;
  $689 = $687 >>> 31;
  $690 = $688 | $689;
  $691 = $681 << 5;
  $692 = $681 >>> 27;
  $693 = $691 | $692;
  $694 = $684 ^ $666;
  $695 = $694 ^ $663;
  $696 = (($690) + 1859775393)|0;
  $697 = (($696) + ($648))|0;
  $698 = (($697) + ($695))|0;
  $699 = (($698) + ($693))|0;
  $700 = $663 << 30;
  $701 = $663 >>> 2;
  $702 = $700 | $701;
  $703 = $412 ^ $350;
  $704 = $703 ^ $563;
  $705 = $704 ^ $654;
  $706 = $705 << 1;
  $707 = $705 >>> 31;
  $708 = $706 | $707;
  $709 = $699 << 5;
  $710 = $699 >>> 27;
  $711 = $709 | $710;
  $712 = $702 ^ $684;
  $713 = $712 ^ $681;
  $714 = (($708) + 1859775393)|0;
  $715 = (($714) + ($666))|0;
  $716 = (($715) + ($713))|0;
  $717 = (($716) + ($711))|0;
  $718 = $681 << 30;
  $719 = $681 >>> 2;
  $720 = $718 | $719;
  $721 = $443 ^ $381;
  $722 = $721 ^ $582;
  $723 = $722 ^ $672;
  $724 = $723 << 1;
  $725 = $723 >>> 31;
  $726 = $724 | $725;
  $727 = $717 << 5;
  $728 = $717 >>> 27;
  $729 = $727 | $728;
  $730 = $720 ^ $702;
  $731 = $730 ^ $699;
  $732 = (($726) + 1859775393)|0;
  $733 = (($732) + ($684))|0;
  $734 = (($733) + ($731))|0;
  $735 = (($734) + ($729))|0;
  $736 = $699 << 30;
  $737 = $699 >>> 2;
  $738 = $736 | $737;
  $739 = $474 ^ $412;
  $740 = $739 ^ $600;
  $741 = $740 ^ $690;
  $742 = $741 << 1;
  $743 = $741 >>> 31;
  $744 = $742 | $743;
  $745 = $735 << 5;
  $746 = $735 >>> 27;
  $747 = $745 | $746;
  $748 = $738 ^ $720;
  $749 = $748 ^ $717;
  $750 = (($744) + 1859775393)|0;
  $751 = (($750) + ($702))|0;
  $752 = (($751) + ($749))|0;
  $753 = (($752) + ($747))|0;
  $754 = $717 << 30;
  $755 = $717 >>> 2;
  $756 = $754 | $755;
  $757 = $443 ^ $506;
  $758 = $757 ^ $618;
  $759 = $758 ^ $708;
  $760 = $759 << 1;
  $761 = $759 >>> 31;
  $762 = $760 | $761;
  $763 = $753 << 5;
  $764 = $753 >>> 27;
  $765 = $763 | $764;
  $766 = $756 ^ $738;
  $767 = $766 ^ $735;
  $768 = (($762) + 1859775393)|0;
  $769 = (($768) + ($720))|0;
  $770 = (($769) + ($767))|0;
  $771 = (($770) + ($765))|0;
  $772 = $735 << 30;
  $773 = $735 >>> 2;
  $774 = $772 | $773;
  $775 = $474 ^ $525;
  $776 = $775 ^ $636;
  $777 = $776 ^ $726;
  $778 = $777 << 1;
  $779 = $777 >>> 31;
  $780 = $778 | $779;
  $781 = $771 << 5;
  $782 = $771 >>> 27;
  $783 = $781 | $782;
  $784 = $774 ^ $756;
  $785 = $784 ^ $753;
  $786 = (($780) + 1859775393)|0;
  $787 = (($786) + ($738))|0;
  $788 = (($787) + ($785))|0;
  $789 = (($788) + ($783))|0;
  $790 = $753 << 30;
  $791 = $753 >>> 2;
  $792 = $790 | $791;
  $793 = $544 ^ $506;
  $794 = $793 ^ $654;
  $795 = $794 ^ $744;
  $796 = $795 << 1;
  $797 = $795 >>> 31;
  $798 = $796 | $797;
  $799 = $789 << 5;
  $800 = $789 >>> 27;
  $801 = $799 | $800;
  $802 = $792 ^ $774;
  $803 = $802 ^ $771;
  $804 = (($798) + 1859775393)|0;
  $805 = (($804) + ($756))|0;
  $806 = (($805) + ($803))|0;
  $807 = (($806) + ($801))|0;
  $808 = $771 << 30;
  $809 = $771 >>> 2;
  $810 = $808 | $809;
  $811 = $525 ^ $563;
  $812 = $811 ^ $672;
  $813 = $812 ^ $762;
  $814 = $813 << 1;
  $815 = $813 >>> 31;
  $816 = $814 | $815;
  $817 = $807 << 5;
  $818 = $807 >>> 27;
  $819 = $817 | $818;
  $820 = $810 ^ $792;
  $821 = $820 ^ $789;
  $822 = (($816) + 1859775393)|0;
  $823 = (($822) + ($774))|0;
  $824 = (($823) + ($821))|0;
  $825 = (($824) + ($819))|0;
  $826 = $789 << 30;
  $827 = $789 >>> 2;
  $828 = $826 | $827;
  $829 = $544 ^ $582;
  $830 = $829 ^ $690;
  $831 = $830 ^ $780;
  $832 = $831 << 1;
  $833 = $831 >>> 31;
  $834 = $832 | $833;
  $835 = $825 << 5;
  $836 = $825 >>> 27;
  $837 = $835 | $836;
  $838 = $828 ^ $810;
  $839 = $838 ^ $807;
  $840 = (($834) + 1859775393)|0;
  $841 = (($840) + ($792))|0;
  $842 = (($841) + ($839))|0;
  $843 = (($842) + ($837))|0;
  $844 = $807 << 30;
  $845 = $807 >>> 2;
  $846 = $844 | $845;
  $847 = $600 ^ $563;
  $848 = $847 ^ $708;
  $849 = $848 ^ $798;
  $850 = $849 << 1;
  $851 = $849 >>> 31;
  $852 = $850 | $851;
  $853 = $843 << 5;
  $854 = $843 >>> 27;
  $855 = $853 | $854;
  $856 = $846 ^ $828;
  $857 = $856 ^ $825;
  $858 = (($852) + 1859775393)|0;
  $859 = (($858) + ($810))|0;
  $860 = (($859) + ($857))|0;
  $861 = (($860) + ($855))|0;
  $862 = $825 << 30;
  $863 = $825 >>> 2;
  $864 = $862 | $863;
  $865 = $582 ^ $618;
  $866 = $865 ^ $726;
  $867 = $866 ^ $816;
  $868 = $867 << 1;
  $869 = $867 >>> 31;
  $870 = $868 | $869;
  $871 = $861 << 5;
  $872 = $861 >>> 27;
  $873 = $871 | $872;
  $874 = $864 ^ $846;
  $875 = $874 ^ $843;
  $876 = (($870) + 1859775393)|0;
  $877 = (($876) + ($828))|0;
  $878 = (($877) + ($875))|0;
  $879 = (($878) + ($873))|0;
  $880 = $843 << 30;
  $881 = $843 >>> 2;
  $882 = $880 | $881;
  $883 = $600 ^ $636;
  $884 = $883 ^ $744;
  $885 = $884 ^ $834;
  $886 = $885 << 1;
  $887 = $885 >>> 31;
  $888 = $886 | $887;
  $889 = $879 << 5;
  $890 = $879 >>> 27;
  $891 = $889 | $890;
  $892 = $882 ^ $864;
  $893 = $892 ^ $861;
  $894 = (($888) + 1859775393)|0;
  $895 = (($894) + ($846))|0;
  $896 = (($895) + ($893))|0;
  $897 = (($896) + ($891))|0;
  $898 = $861 << 30;
  $899 = $861 >>> 2;
  $900 = $898 | $899;
  $901 = $654 ^ $618;
  $902 = $901 ^ $762;
  $903 = $902 ^ $852;
  $904 = $903 << 1;
  $905 = $903 >>> 31;
  $906 = $904 | $905;
  $907 = $897 << 5;
  $908 = $897 >>> 27;
  $909 = $907 | $908;
  $910 = $900 ^ $882;
  $911 = $910 ^ $879;
  $912 = (($906) + 1859775393)|0;
  $913 = (($912) + ($864))|0;
  $914 = (($913) + ($911))|0;
  $915 = (($914) + ($909))|0;
  $916 = $879 << 30;
  $917 = $879 >>> 2;
  $918 = $916 | $917;
  $919 = $636 ^ $672;
  $920 = $919 ^ $780;
  $921 = $920 ^ $870;
  $922 = $921 << 1;
  $923 = $921 >>> 31;
  $924 = $922 | $923;
  $925 = $915 << 5;
  $926 = $915 >>> 27;
  $927 = $925 | $926;
  $928 = $918 ^ $900;
  $929 = $928 ^ $897;
  $930 = (($924) + 1859775393)|0;
  $931 = (($930) + ($882))|0;
  $932 = (($931) + ($929))|0;
  $933 = (($932) + ($927))|0;
  $934 = $897 << 30;
  $935 = $897 >>> 2;
  $936 = $934 | $935;
  $937 = $654 ^ $690;
  $938 = $937 ^ $798;
  $939 = $938 ^ $888;
  $940 = $939 << 1;
  $941 = $939 >>> 31;
  $942 = $940 | $941;
  $943 = $933 << 5;
  $944 = $933 >>> 27;
  $945 = $943 | $944;
  $946 = $915 & $936;
  $947 = $915 | $936;
  $948 = $947 & $918;
  $949 = $948 | $946;
  $950 = (($942) + -1894007588)|0;
  $951 = (($950) + ($900))|0;
  $952 = (($951) + ($949))|0;
  $953 = (($952) + ($945))|0;
  $954 = $915 << 30;
  $955 = $915 >>> 2;
  $956 = $954 | $955;
  $957 = $708 ^ $672;
  $958 = $957 ^ $816;
  $959 = $958 ^ $906;
  $960 = $959 << 1;
  $961 = $959 >>> 31;
  $962 = $960 | $961;
  $963 = $953 << 5;
  $964 = $953 >>> 27;
  $965 = $963 | $964;
  $966 = $933 & $956;
  $967 = $933 | $956;
  $968 = $967 & $936;
  $969 = $968 | $966;
  $970 = (($962) + -1894007588)|0;
  $971 = (($970) + ($918))|0;
  $972 = (($971) + ($969))|0;
  $973 = (($972) + ($965))|0;
  $974 = $933 << 30;
  $975 = $933 >>> 2;
  $976 = $974 | $975;
  $977 = $690 ^ $726;
  $978 = $977 ^ $834;
  $979 = $978 ^ $924;
  $980 = $979 << 1;
  $981 = $979 >>> 31;
  $982 = $980 | $981;
  $983 = $973 << 5;
  $984 = $973 >>> 27;
  $985 = $983 | $984;
  $986 = $953 & $976;
  $987 = $953 | $976;
  $988 = $987 & $956;
  $989 = $988 | $986;
  $990 = (($982) + -1894007588)|0;
  $991 = (($990) + ($936))|0;
  $992 = (($991) + ($989))|0;
  $993 = (($992) + ($985))|0;
  $994 = $953 << 30;
  $995 = $953 >>> 2;
  $996 = $994 | $995;
  $997 = $708 ^ $744;
  $998 = $997 ^ $852;
  $999 = $998 ^ $942;
  $1000 = $999 << 1;
  $1001 = $999 >>> 31;
  $1002 = $1000 | $1001;
  $1003 = $993 << 5;
  $1004 = $993 >>> 27;
  $1005 = $1003 | $1004;
  $1006 = $973 & $996;
  $1007 = $973 | $996;
  $1008 = $1007 & $976;
  $1009 = $1008 | $1006;
  $1010 = (($1002) + -1894007588)|0;
  $1011 = (($1010) + ($956))|0;
  $1012 = (($1011) + ($1009))|0;
  $1013 = (($1012) + ($1005))|0;
  $1014 = $973 << 30;
  $1015 = $973 >>> 2;
  $1016 = $1014 | $1015;
  $1017 = $762 ^ $726;
  $1018 = $1017 ^ $870;
  $1019 = $1018 ^ $962;
  $1020 = $1019 << 1;
  $1021 = $1019 >>> 31;
  $1022 = $1020 | $1021;
  $1023 = $1013 << 5;
  $1024 = $1013 >>> 27;
  $1025 = $1023 | $1024;
  $1026 = $993 & $1016;
  $1027 = $993 | $1016;
  $1028 = $1027 & $996;
  $1029 = $1028 | $1026;
  $1030 = (($1022) + -1894007588)|0;
  $1031 = (($1030) + ($976))|0;
  $1032 = (($1031) + ($1029))|0;
  $1033 = (($1032) + ($1025))|0;
  $1034 = $993 << 30;
  $1035 = $993 >>> 2;
  $1036 = $1034 | $1035;
  $1037 = $744 ^ $780;
  $1038 = $1037 ^ $888;
  $1039 = $1038 ^ $982;
  $1040 = $1039 << 1;
  $1041 = $1039 >>> 31;
  $1042 = $1040 | $1041;
  $1043 = $1033 << 5;
  $1044 = $1033 >>> 27;
  $1045 = $1043 | $1044;
  $1046 = $1013 & $1036;
  $1047 = $1013 | $1036;
  $1048 = $1047 & $1016;
  $1049 = $1048 | $1046;
  $1050 = (($1042) + -1894007588)|0;
  $1051 = (($1050) + ($996))|0;
  $1052 = (($1051) + ($1049))|0;
  $1053 = (($1052) + ($1045))|0;
  $1054 = $1013 << 30;
  $1055 = $1013 >>> 2;
  $1056 = $1054 | $1055;
  $1057 = $762 ^ $798;
  $1058 = $1057 ^ $906;
  $1059 = $1058 ^ $1002;
  $1060 = $1059 << 1;
  $1061 = $1059 >>> 31;
  $1062 = $1060 | $1061;
  $1063 = $1053 << 5;
  $1064 = $1053 >>> 27;
  $1065 = $1063 | $1064;
  $1066 = $1033 & $1056;
  $1067 = $1033 | $1056;
  $1068 = $1067 & $1036;
  $1069 = $1068 | $1066;
  $1070 = (($1062) + -1894007588)|0;
  $1071 = (($1070) + ($1016))|0;
  $1072 = (($1071) + ($1069))|0;
  $1073 = (($1072) + ($1065))|0;
  $1074 = $1033 << 30;
  $1075 = $1033 >>> 2;
  $1076 = $1074 | $1075;
  $1077 = $816 ^ $780;
  $1078 = $1077 ^ $924;
  $1079 = $1078 ^ $1022;
  $1080 = $1079 << 1;
  $1081 = $1079 >>> 31;
  $1082 = $1080 | $1081;
  $1083 = $1073 << 5;
  $1084 = $1073 >>> 27;
  $1085 = $1083 | $1084;
  $1086 = $1053 & $1076;
  $1087 = $1053 | $1076;
  $1088 = $1087 & $1056;
  $1089 = $1088 | $1086;
  $1090 = (($1082) + -1894007588)|0;
  $1091 = (($1090) + ($1036))|0;
  $1092 = (($1091) + ($1089))|0;
  $1093 = (($1092) + ($1085))|0;
  $1094 = $1053 << 30;
  $1095 = $1053 >>> 2;
  $1096 = $1094 | $1095;
  $1097 = $798 ^ $834;
  $1098 = $1097 ^ $942;
  $1099 = $1098 ^ $1042;
  $1100 = $1099 << 1;
  $1101 = $1099 >>> 31;
  $1102 = $1100 | $1101;
  $1103 = $1093 << 5;
  $1104 = $1093 >>> 27;
  $1105 = $1103 | $1104;
  $1106 = $1073 & $1096;
  $1107 = $1073 | $1096;
  $1108 = $1107 & $1076;
  $1109 = $1108 | $1106;
  $1110 = (($1102) + -1894007588)|0;
  $1111 = (($1110) + ($1056))|0;
  $1112 = (($1111) + ($1109))|0;
  $1113 = (($1112) + ($1105))|0;
  $1114 = $1073 << 30;
  $1115 = $1073 >>> 2;
  $1116 = $1114 | $1115;
  $1117 = $816 ^ $852;
  $1118 = $1117 ^ $962;
  $1119 = $1118 ^ $1062;
  $1120 = $1119 << 1;
  $1121 = $1119 >>> 31;
  $1122 = $1120 | $1121;
  $1123 = $1113 << 5;
  $1124 = $1113 >>> 27;
  $1125 = $1123 | $1124;
  $1126 = $1093 & $1116;
  $1127 = $1093 | $1116;
  $1128 = $1127 & $1096;
  $1129 = $1128 | $1126;
  $1130 = (($1122) + -1894007588)|0;
  $1131 = (($1130) + ($1076))|0;
  $1132 = (($1131) + ($1129))|0;
  $1133 = (($1132) + ($1125))|0;
  $1134 = $1093 << 30;
  $1135 = $1093 >>> 2;
  $1136 = $1134 | $1135;
  $1137 = $870 ^ $834;
  $1138 = $1137 ^ $982;
  $1139 = $1138 ^ $1082;
  $1140 = $1139 << 1;
  $1141 = $1139 >>> 31;
  $1142 = $1140 | $1141;
  $1143 = $1133 << 5;
  $1144 = $1133 >>> 27;
  $1145 = $1143 | $1144;
  $1146 = $1113 & $1136;
  $1147 = $1113 | $1136;
  $1148 = $1147 & $1116;
  $1149 = $1148 | $1146;
  $1150 = (($1142) + -1894007588)|0;
  $1151 = (($1150) + ($1096))|0;
  $1152 = (($1151) + ($1149))|0;
  $1153 = (($1152) + ($1145))|0;
  $1154 = $1113 << 30;
  $1155 = $1113 >>> 2;
  $1156 = $1154 | $1155;
  $1157 = $852 ^ $888;
  $1158 = $1157 ^ $1002;
  $1159 = $1158 ^ $1102;
  $1160 = $1159 << 1;
  $1161 = $1159 >>> 31;
  $1162 = $1160 | $1161;
  $1163 = $1153 << 5;
  $1164 = $1153 >>> 27;
  $1165 = $1163 | $1164;
  $1166 = $1133 & $1156;
  $1167 = $1133 | $1156;
  $1168 = $1167 & $1136;
  $1169 = $1168 | $1166;
  $1170 = (($1162) + -1894007588)|0;
  $1171 = (($1170) + ($1116))|0;
  $1172 = (($1171) + ($1169))|0;
  $1173 = (($1172) + ($1165))|0;
  $1174 = $1133 << 30;
  $1175 = $1133 >>> 2;
  $1176 = $1174 | $1175;
  $1177 = $870 ^ $906;
  $1178 = $1177 ^ $1022;
  $1179 = $1178 ^ $1122;
  $1180 = $1179 << 1;
  $1181 = $1179 >>> 31;
  $1182 = $1180 | $1181;
  $1183 = $1173 << 5;
  $1184 = $1173 >>> 27;
  $1185 = $1183 | $1184;
  $1186 = $1153 & $1176;
  $1187 = $1153 | $1176;
  $1188 = $1187 & $1156;
  $1189 = $1188 | $1186;
  $1190 = (($1182) + -1894007588)|0;
  $1191 = (($1190) + ($1136))|0;
  $1192 = (($1191) + ($1189))|0;
  $1193 = (($1192) + ($1185))|0;
  $1194 = $1153 << 30;
  $1195 = $1153 >>> 2;
  $1196 = $1194 | $1195;
  $1197 = $924 ^ $888;
  $1198 = $1197 ^ $1042;
  $1199 = $1198 ^ $1142;
  $1200 = $1199 << 1;
  $1201 = $1199 >>> 31;
  $1202 = $1200 | $1201;
  $1203 = $1193 << 5;
  $1204 = $1193 >>> 27;
  $1205 = $1203 | $1204;
  $1206 = $1173 & $1196;
  $1207 = $1173 | $1196;
  $1208 = $1207 & $1176;
  $1209 = $1208 | $1206;
  $1210 = (($1202) + -1894007588)|0;
  $1211 = (($1210) + ($1156))|0;
  $1212 = (($1211) + ($1209))|0;
  $1213 = (($1212) + ($1205))|0;
  $1214 = $1173 << 30;
  $1215 = $1173 >>> 2;
  $1216 = $1214 | $1215;
  $1217 = $906 ^ $942;
  $1218 = $1217 ^ $1062;
  $1219 = $1218 ^ $1162;
  $1220 = $1219 << 1;
  $1221 = $1219 >>> 31;
  $1222 = $1220 | $1221;
  $1223 = $1213 << 5;
  $1224 = $1213 >>> 27;
  $1225 = $1223 | $1224;
  $1226 = $1193 & $1216;
  $1227 = $1193 | $1216;
  $1228 = $1227 & $1196;
  $1229 = $1228 | $1226;
  $1230 = (($1222) + -1894007588)|0;
  $1231 = (($1230) + ($1176))|0;
  $1232 = (($1231) + ($1229))|0;
  $1233 = (($1232) + ($1225))|0;
  $1234 = $1193 << 30;
  $1235 = $1193 >>> 2;
  $1236 = $1234 | $1235;
  $1237 = $924 ^ $962;
  $1238 = $1237 ^ $1082;
  $1239 = $1238 ^ $1182;
  $1240 = $1239 << 1;
  $1241 = $1239 >>> 31;
  $1242 = $1240 | $1241;
  $1243 = $1233 << 5;
  $1244 = $1233 >>> 27;
  $1245 = $1243 | $1244;
  $1246 = $1213 & $1236;
  $1247 = $1213 | $1236;
  $1248 = $1247 & $1216;
  $1249 = $1248 | $1246;
  $1250 = (($1242) + -1894007588)|0;
  $1251 = (($1250) + ($1196))|0;
  $1252 = (($1251) + ($1249))|0;
  $1253 = (($1252) + ($1245))|0;
  $1254 = $1213 << 30;
  $1255 = $1213 >>> 2;
  $1256 = $1254 | $1255;
  $1257 = $982 ^ $942;
  $1258 = $1257 ^ $1102;
  $1259 = $1258 ^ $1202;
  $1260 = $1259 << 1;
  $1261 = $1259 >>> 31;
  $1262 = $1260 | $1261;
  $1263 = $1253 << 5;
  $1264 = $1253 >>> 27;
  $1265 = $1263 | $1264;
  $1266 = $1233 & $1256;
  $1267 = $1233 | $1256;
  $1268 = $1267 & $1236;
  $1269 = $1268 | $1266;
  $1270 = (($1262) + -1894007588)|0;
  $1271 = (($1270) + ($1216))|0;
  $1272 = (($1271) + ($1269))|0;
  $1273 = (($1272) + ($1265))|0;
  $1274 = $1233 << 30;
  $1275 = $1233 >>> 2;
  $1276 = $1274 | $1275;
  $1277 = $962 ^ $1002;
  $1278 = $1277 ^ $1122;
  $1279 = $1278 ^ $1222;
  $1280 = $1279 << 1;
  $1281 = $1279 >>> 31;
  $1282 = $1280 | $1281;
  $1283 = $1273 << 5;
  $1284 = $1273 >>> 27;
  $1285 = $1283 | $1284;
  $1286 = $1253 & $1276;
  $1287 = $1253 | $1276;
  $1288 = $1287 & $1256;
  $1289 = $1288 | $1286;
  $1290 = (($1282) + -1894007588)|0;
  $1291 = (($1290) + ($1236))|0;
  $1292 = (($1291) + ($1289))|0;
  $1293 = (($1292) + ($1285))|0;
  $1294 = $1253 << 30;
  $1295 = $1253 >>> 2;
  $1296 = $1294 | $1295;
  $1297 = $982 ^ $1022;
  $1298 = $1297 ^ $1142;
  $1299 = $1298 ^ $1242;
  $1300 = $1299 << 1;
  $1301 = $1299 >>> 31;
  $1302 = $1300 | $1301;
  $1303 = $1293 << 5;
  $1304 = $1293 >>> 27;
  $1305 = $1303 | $1304;
  $1306 = $1273 & $1296;
  $1307 = $1273 | $1296;
  $1308 = $1307 & $1276;
  $1309 = $1308 | $1306;
  $1310 = (($1302) + -1894007588)|0;
  $1311 = (($1310) + ($1256))|0;
  $1312 = (($1311) + ($1309))|0;
  $1313 = (($1312) + ($1305))|0;
  $1314 = $1273 << 30;
  $1315 = $1273 >>> 2;
  $1316 = $1314 | $1315;
  $1317 = $1042 ^ $1002;
  $1318 = $1317 ^ $1162;
  $1319 = $1318 ^ $1262;
  $1320 = $1319 << 1;
  $1321 = $1319 >>> 31;
  $1322 = $1320 | $1321;
  $1323 = $1313 << 5;
  $1324 = $1313 >>> 27;
  $1325 = $1323 | $1324;
  $1326 = $1293 & $1316;
  $1327 = $1293 | $1316;
  $1328 = $1327 & $1296;
  $1329 = $1328 | $1326;
  $1330 = (($1322) + -1894007588)|0;
  $1331 = (($1330) + ($1276))|0;
  $1332 = (($1331) + ($1329))|0;
  $1333 = (($1332) + ($1325))|0;
  $1334 = $1293 << 30;
  $1335 = $1293 >>> 2;
  $1336 = $1334 | $1335;
  $1337 = $1022 ^ $1062;
  $1338 = $1337 ^ $1182;
  $1339 = $1338 ^ $1282;
  $1340 = $1339 << 1;
  $1341 = $1339 >>> 31;
  $1342 = $1340 | $1341;
  $1343 = $1333 << 5;
  $1344 = $1333 >>> 27;
  $1345 = $1343 | $1344;
  $1346 = $1336 ^ $1316;
  $1347 = $1346 ^ $1313;
  $1348 = (($1342) + -899497514)|0;
  $1349 = (($1348) + ($1296))|0;
  $1350 = (($1349) + ($1347))|0;
  $1351 = (($1350) + ($1345))|0;
  $1352 = $1313 << 30;
  $1353 = $1313 >>> 2;
  $1354 = $1352 | $1353;
  $1355 = $1042 ^ $1082;
  $1356 = $1355 ^ $1202;
  $1357 = $1356 ^ $1302;
  $1358 = $1357 << 1;
  $1359 = $1357 >>> 31;
  $1360 = $1358 | $1359;
  $1361 = $1351 << 5;
  $1362 = $1351 >>> 27;
  $1363 = $1361 | $1362;
  $1364 = $1354 ^ $1336;
  $1365 = $1364 ^ $1333;
  $1366 = (($1360) + -899497514)|0;
  $1367 = (($1366) + ($1316))|0;
  $1368 = (($1367) + ($1365))|0;
  $1369 = (($1368) + ($1363))|0;
  $1370 = $1333 << 30;
  $1371 = $1333 >>> 2;
  $1372 = $1370 | $1371;
  $1373 = $1102 ^ $1062;
  $1374 = $1373 ^ $1222;
  $1375 = $1374 ^ $1322;
  $1376 = $1375 << 1;
  $1377 = $1375 >>> 31;
  $1378 = $1376 | $1377;
  $1379 = $1369 << 5;
  $1380 = $1369 >>> 27;
  $1381 = $1379 | $1380;
  $1382 = $1372 ^ $1354;
  $1383 = $1382 ^ $1351;
  $1384 = (($1378) + -899497514)|0;
  $1385 = (($1384) + ($1336))|0;
  $1386 = (($1385) + ($1383))|0;
  $1387 = (($1386) + ($1381))|0;
  $1388 = $1351 << 30;
  $1389 = $1351 >>> 2;
  $1390 = $1388 | $1389;
  $1391 = $1082 ^ $1122;
  $1392 = $1391 ^ $1242;
  $1393 = $1392 ^ $1342;
  $1394 = $1393 << 1;
  $1395 = $1393 >>> 31;
  $1396 = $1394 | $1395;
  $1397 = $1387 << 5;
  $1398 = $1387 >>> 27;
  $1399 = $1397 | $1398;
  $1400 = $1390 ^ $1372;
  $1401 = $1400 ^ $1369;
  $1402 = (($1396) + -899497514)|0;
  $1403 = (($1402) + ($1354))|0;
  $1404 = (($1403) + ($1401))|0;
  $1405 = (($1404) + ($1399))|0;
  $1406 = $1369 << 30;
  $1407 = $1369 >>> 2;
  $1408 = $1406 | $1407;
  $1409 = $1102 ^ $1142;
  $1410 = $1409 ^ $1262;
  $1411 = $1410 ^ $1360;
  $1412 = $1411 << 1;
  $1413 = $1411 >>> 31;
  $1414 = $1412 | $1413;
  $1415 = $1405 << 5;
  $1416 = $1405 >>> 27;
  $1417 = $1415 | $1416;
  $1418 = $1408 ^ $1390;
  $1419 = $1418 ^ $1387;
  $1420 = (($1414) + -899497514)|0;
  $1421 = (($1420) + ($1372))|0;
  $1422 = (($1421) + ($1419))|0;
  $1423 = (($1422) + ($1417))|0;
  $1424 = $1387 << 30;
  $1425 = $1387 >>> 2;
  $1426 = $1424 | $1425;
  $1427 = $1162 ^ $1122;
  $1428 = $1427 ^ $1282;
  $1429 = $1428 ^ $1378;
  $1430 = $1429 << 1;
  $1431 = $1429 >>> 31;
  $1432 = $1430 | $1431;
  $1433 = $1423 << 5;
  $1434 = $1423 >>> 27;
  $1435 = $1433 | $1434;
  $1436 = $1426 ^ $1408;
  $1437 = $1436 ^ $1405;
  $1438 = (($1432) + -899497514)|0;
  $1439 = (($1438) + ($1390))|0;
  $1440 = (($1439) + ($1437))|0;
  $1441 = (($1440) + ($1435))|0;
  $1442 = $1405 << 30;
  $1443 = $1405 >>> 2;
  $1444 = $1442 | $1443;
  $1445 = $1142 ^ $1182;
  $1446 = $1445 ^ $1302;
  $1447 = $1446 ^ $1396;
  $1448 = $1447 << 1;
  $1449 = $1447 >>> 31;
  $1450 = $1448 | $1449;
  $1451 = $1441 << 5;
  $1452 = $1441 >>> 27;
  $1453 = $1451 | $1452;
  $1454 = $1444 ^ $1426;
  $1455 = $1454 ^ $1423;
  $1456 = (($1450) + -899497514)|0;
  $1457 = (($1456) + ($1408))|0;
  $1458 = (($1457) + ($1455))|0;
  $1459 = (($1458) + ($1453))|0;
  $1460 = $1423 << 30;
  $1461 = $1423 >>> 2;
  $1462 = $1460 | $1461;
  $1463 = $1162 ^ $1202;
  $1464 = $1463 ^ $1322;
  $1465 = $1464 ^ $1414;
  $1466 = $1465 << 1;
  $1467 = $1465 >>> 31;
  $1468 = $1466 | $1467;
  $1469 = $1459 << 5;
  $1470 = $1459 >>> 27;
  $1471 = $1469 | $1470;
  $1472 = $1462 ^ $1444;
  $1473 = $1472 ^ $1441;
  $1474 = (($1468) + -899497514)|0;
  $1475 = (($1474) + ($1426))|0;
  $1476 = (($1475) + ($1473))|0;
  $1477 = (($1476) + ($1471))|0;
  $1478 = $1441 << 30;
  $1479 = $1441 >>> 2;
  $1480 = $1478 | $1479;
  $1481 = $1222 ^ $1182;
  $1482 = $1481 ^ $1342;
  $1483 = $1482 ^ $1432;
  $1484 = $1483 << 1;
  $1485 = $1483 >>> 31;
  $1486 = $1484 | $1485;
  $1487 = $1477 << 5;
  $1488 = $1477 >>> 27;
  $1489 = $1487 | $1488;
  $1490 = $1480 ^ $1462;
  $1491 = $1490 ^ $1459;
  $1492 = (($1486) + -899497514)|0;
  $1493 = (($1492) + ($1444))|0;
  $1494 = (($1493) + ($1491))|0;
  $1495 = (($1494) + ($1489))|0;
  $1496 = $1459 << 30;
  $1497 = $1459 >>> 2;
  $1498 = $1496 | $1497;
  $1499 = $1202 ^ $1242;
  $1500 = $1499 ^ $1360;
  $1501 = $1500 ^ $1450;
  $1502 = $1501 << 1;
  $1503 = $1501 >>> 31;
  $1504 = $1502 | $1503;
  $1505 = $1495 << 5;
  $1506 = $1495 >>> 27;
  $1507 = $1505 | $1506;
  $1508 = $1498 ^ $1480;
  $1509 = $1508 ^ $1477;
  $1510 = (($1504) + -899497514)|0;
  $1511 = (($1510) + ($1462))|0;
  $1512 = (($1511) + ($1509))|0;
  $1513 = (($1512) + ($1507))|0;
  $1514 = $1477 << 30;
  $1515 = $1477 >>> 2;
  $1516 = $1514 | $1515;
  $1517 = $1222 ^ $1262;
  $1518 = $1517 ^ $1378;
  $1519 = $1518 ^ $1468;
  $1520 = $1519 << 1;
  $1521 = $1519 >>> 31;
  $1522 = $1520 | $1521;
  $1523 = $1513 << 5;
  $1524 = $1513 >>> 27;
  $1525 = $1523 | $1524;
  $1526 = $1516 ^ $1498;
  $1527 = $1526 ^ $1495;
  $1528 = (($1522) + -899497514)|0;
  $1529 = (($1528) + ($1480))|0;
  $1530 = (($1529) + ($1527))|0;
  $1531 = (($1530) + ($1525))|0;
  $1532 = $1495 << 30;
  $1533 = $1495 >>> 2;
  $1534 = $1532 | $1533;
  $1535 = $1282 ^ $1242;
  $1536 = $1535 ^ $1396;
  $1537 = $1536 ^ $1486;
  $1538 = $1537 << 1;
  $1539 = $1537 >>> 31;
  $1540 = $1538 | $1539;
  $1541 = $1531 << 5;
  $1542 = $1531 >>> 27;
  $1543 = $1541 | $1542;
  $1544 = $1534 ^ $1516;
  $1545 = $1544 ^ $1513;
  $1546 = (($1540) + -899497514)|0;
  $1547 = (($1546) + ($1498))|0;
  $1548 = (($1547) + ($1545))|0;
  $1549 = (($1548) + ($1543))|0;
  $1550 = $1513 << 30;
  $1551 = $1513 >>> 2;
  $1552 = $1550 | $1551;
  $1553 = $1262 ^ $1302;
  $1554 = $1553 ^ $1414;
  $1555 = $1554 ^ $1504;
  $1556 = $1555 << 1;
  $1557 = $1555 >>> 31;
  $1558 = $1556 | $1557;
  $1559 = $1549 << 5;
  $1560 = $1549 >>> 27;
  $1561 = $1559 | $1560;
  $1562 = $1552 ^ $1534;
  $1563 = $1562 ^ $1531;
  $1564 = (($1558) + -899497514)|0;
  $1565 = (($1564) + ($1516))|0;
  $1566 = (($1565) + ($1563))|0;
  $1567 = (($1566) + ($1561))|0;
  $1568 = $1531 << 30;
  $1569 = $1531 >>> 2;
  $1570 = $1568 | $1569;
  $1571 = $1282 ^ $1322;
  $1572 = $1571 ^ $1432;
  $1573 = $1572 ^ $1522;
  $1574 = $1573 << 1;
  $1575 = $1573 >>> 31;
  $1576 = $1574 | $1575;
  $1577 = $1567 << 5;
  $1578 = $1567 >>> 27;
  $1579 = $1577 | $1578;
  $1580 = $1570 ^ $1552;
  $1581 = $1580 ^ $1549;
  $1582 = (($1576) + -899497514)|0;
  $1583 = (($1582) + ($1534))|0;
  $1584 = (($1583) + ($1581))|0;
  $1585 = (($1584) + ($1579))|0;
  $1586 = $1549 << 30;
  $1587 = $1549 >>> 2;
  $1588 = $1586 | $1587;
  $1589 = $1342 ^ $1302;
  $1590 = $1589 ^ $1450;
  $1591 = $1590 ^ $1540;
  $1592 = $1591 << 1;
  $1593 = $1591 >>> 31;
  $1594 = $1592 | $1593;
  $1595 = $1585 << 5;
  $1596 = $1585 >>> 27;
  $1597 = $1595 | $1596;
  $1598 = $1588 ^ $1570;
  $1599 = $1598 ^ $1567;
  $1600 = (($1594) + -899497514)|0;
  $1601 = (($1600) + ($1552))|0;
  $1602 = (($1601) + ($1599))|0;
  $1603 = (($1602) + ($1597))|0;
  $1604 = $1567 << 30;
  $1605 = $1567 >>> 2;
  $1606 = $1604 | $1605;
  $1607 = $1322 ^ $1360;
  $1608 = $1607 ^ $1468;
  $1609 = $1608 ^ $1558;
  $1610 = $1609 << 1;
  $1611 = $1609 >>> 31;
  $1612 = $1610 | $1611;
  $1613 = $1603 << 5;
  $1614 = $1603 >>> 27;
  $1615 = $1613 | $1614;
  $1616 = $1606 ^ $1588;
  $1617 = $1616 ^ $1585;
  $1618 = (($1612) + -899497514)|0;
  $1619 = (($1618) + ($1570))|0;
  $1620 = (($1619) + ($1617))|0;
  $1621 = (($1620) + ($1615))|0;
  $1622 = $1585 << 30;
  $1623 = $1585 >>> 2;
  $1624 = $1622 | $1623;
  $1625 = $1342 ^ $1378;
  $1626 = $1625 ^ $1486;
  $1627 = $1626 ^ $1576;
  $1628 = $1627 << 1;
  $1629 = $1627 >>> 31;
  $1630 = $1628 | $1629;
  $1631 = $1621 << 5;
  $1632 = $1621 >>> 27;
  $1633 = $1631 | $1632;
  $1634 = $1624 ^ $1606;
  $1635 = $1634 ^ $1603;
  $1636 = (($1630) + -899497514)|0;
  $1637 = (($1636) + ($1588))|0;
  $1638 = (($1637) + ($1635))|0;
  $1639 = (($1638) + ($1633))|0;
  $1640 = $1603 << 30;
  $1641 = $1603 >>> 2;
  $1642 = $1640 | $1641;
  $1643 = $1396 ^ $1360;
  $1644 = $1643 ^ $1504;
  $1645 = $1644 ^ $1594;
  $1646 = $1645 << 1;
  $1647 = $1645 >>> 31;
  $1648 = $1646 | $1647;
  $1649 = $1639 << 5;
  $1650 = $1639 >>> 27;
  $1651 = $1649 | $1650;
  $1652 = $1642 ^ $1624;
  $1653 = $1652 ^ $1621;
  $1654 = (($1648) + -899497514)|0;
  $1655 = (($1654) + ($1606))|0;
  $1656 = (($1655) + ($1653))|0;
  $1657 = (($1656) + ($1651))|0;
  $1658 = $1621 << 30;
  $1659 = $1621 >>> 2;
  $1660 = $1658 | $1659;
  $1661 = $1378 ^ $1414;
  $1662 = $1661 ^ $1522;
  $1663 = $1662 ^ $1612;
  $1664 = $1663 << 1;
  $1665 = $1663 >>> 31;
  $1666 = $1664 | $1665;
  $1667 = $1657 << 5;
  $1668 = $1657 >>> 27;
  $1669 = $1667 | $1668;
  $1670 = $1660 ^ $1642;
  $1671 = $1670 ^ $1639;
  $1672 = (($1666) + -899497514)|0;
  $1673 = (($1672) + ($1624))|0;
  $1674 = (($1673) + ($1671))|0;
  $1675 = (($1674) + ($1669))|0;
  $1676 = $1639 << 30;
  $1677 = $1639 >>> 2;
  $1678 = $1676 | $1677;
  $1679 = $1396 ^ $1432;
  $1680 = $1679 ^ $1540;
  $1681 = $1680 ^ $1630;
  $1682 = $1681 << 1;
  $1683 = $1681 >>> 31;
  $1684 = $1682 | $1683;
  $1685 = $1675 << 5;
  $1686 = $1675 >>> 27;
  $1687 = $1685 | $1686;
  $1688 = $1678 ^ $1660;
  $1689 = $1688 ^ $1657;
  $1690 = $1657 << 30;
  $1691 = $1657 >>> 2;
  $1692 = $1690 | $1691;
  $1693 = (($A$0) + -899497514)|0;
  $1694 = (($1693) + ($1684))|0;
  $1695 = (($1694) + ($1642))|0;
  $1696 = (($1695) + ($1689))|0;
  $1697 = (($1696) + ($1687))|0;
  HEAP32[$c>>2] = $1697;
  $1698 = HEAP32[$0>>2]|0;
  $1699 = (($1675) + ($1698))|0;
  HEAP32[$0>>2] = $1699;
  $1700 = HEAP32[$1>>2]|0;
  $1701 = (($1692) + ($1700))|0;
  HEAP32[$1>>2] = $1701;
  $1702 = HEAP32[$2>>2]|0;
  $1703 = (($1678) + ($1702))|0;
  HEAP32[$2>>2] = $1703;
  $1704 = HEAP32[$3>>2]|0;
  $1705 = (($1660) + ($1704))|0;
  HEAP32[$3>>2] = $1705;
  $1706 = (($$0) + -1)|0;
  $1707 = ($1706|0)==(0);
  if ($1707) {
   break;
  } else {
   $$0 = $1706;$A$0 = $1697;$B$0 = $1699;$C$0 = $1701;$D$0 = $1703;$E$0 = $1705;$data$0 = $471;
  }
 }
 return;
}
function _SHA224_Init($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$c; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$c>>2] = -1056596264;
 $0 = ((($c)) + 4|0);
 HEAP32[$0>>2] = 914150663;
 $1 = ((($c)) + 8|0);
 HEAP32[$1>>2] = 812702999;
 $2 = ((($c)) + 12|0);
 HEAP32[$2>>2] = -150054599;
 $3 = ((($c)) + 16|0);
 HEAP32[$3>>2] = -4191439;
 $4 = ((($c)) + 20|0);
 HEAP32[$4>>2] = 1750603025;
 $5 = ((($c)) + 24|0);
 HEAP32[$5>>2] = 1694076839;
 $6 = ((($c)) + 28|0);
 HEAP32[$6>>2] = -1090891868;
 $7 = ((($c)) + 108|0);
 HEAP32[$7>>2] = 28;
 return 1;
}
function _SHA256_Init($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$c; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$c>>2] = 1779033703;
 $0 = ((($c)) + 4|0);
 HEAP32[$0>>2] = -1150833019;
 $1 = ((($c)) + 8|0);
 HEAP32[$1>>2] = 1013904242;
 $2 = ((($c)) + 12|0);
 HEAP32[$2>>2] = -1521486534;
 $3 = ((($c)) + 16|0);
 HEAP32[$3>>2] = 1359893119;
 $4 = ((($c)) + 20|0);
 HEAP32[$4>>2] = -1694144372;
 $5 = ((($c)) + 24|0);
 HEAP32[$5>>2] = 528734635;
 $6 = ((($c)) + 28|0);
 HEAP32[$6>>2] = 1541459225;
 $7 = ((($c)) + 108|0);
 HEAP32[$7>>2] = 32;
 return 1;
}
function _SHA256_Update($c,$data_,$len) {
 $c = $c|0;
 $data_ = $data_|0;
 $len = $len|0;
 var $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$0 = 0, $data$1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($len|0)==(0);
 if ($0) {
  return 1;
 }
 $1 = ((($c)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $len << 3;
 $4 = (($2) + ($3))|0;
 $5 = ($4>>>0)<($2>>>0);
 $6 = ((($c)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  $11 = $8;
 } else {
  $11 = $7;
 }
 $9 = $len >>> 29;
 $10 = (($11) + ($9))|0;
 HEAP32[$6>>2] = $10;
 HEAP32[$1>>2] = $4;
 $12 = ((($c)) + 104|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $$01 = $len;$data$0 = $data_;
  } else {
   $15 = ((($c)) + 40|0);
   $16 = (($13) + ($len))|0;
   $17 = $16 | $len;
   $18 = ($17>>>0)>(63);
   $19 = (($15) + ($13)|0);
   if ($18) {
    $20 = (64 - ($13))|0;
    _memcpy(($19|0),($data_|0),($20|0))|0;
    _sha256_block_data_order($c,$15,1);
    $21 = (($data_) + ($20)|0);
    $22 = (($len) - ($20))|0;
    dest=$15; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$01 = $22;$data$0 = $21;
    break;
   }
   _memcpy(($19|0),($data_|0),($len|0))|0;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($23) + ($len))|0;
   HEAP32[$12>>2] = $24;
   return 1;
  }
 } while(0);
 $25 = $$01 >>> 6;
 $26 = ($25|0)==(0);
 if ($26) {
  $$1 = $$01;$data$1 = $data$0;
 } else {
  _sha256_block_data_order($c,$data$0,$25);
  $27 = $25 << 6;
  $28 = (($data$0) + ($27)|0);
  $29 = (($$01) - ($27))|0;
  $$1 = $29;$data$1 = $28;
 }
 $30 = ($$1|0)==(0);
 if ($30) {
  return 1;
 }
 $31 = ((($c)) + 40|0);
 HEAP32[$12>>2] = $$1;
 _memcpy(($31|0),($data$1|0),($$1|0))|0;
 return 1;
}
function _SHA256_Final($md,$c) {
 $md = $md|0;
 $c = $c|0;
 var $$0 = 0, $$26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n$0 = 0, $nn$27 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 40|0);
 $1 = ((($c)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2)|0);
 HEAP8[$3>>0] = -128;
 $4 = (($2) + 1)|0;
 $5 = ($4>>>0)>(56);
 if ($5) {
  $6 = (($0) + ($4)|0);
  $7 = (63 - ($2))|0;
  _memset(($6|0),0,($7|0))|0;
  _sha256_block_data_order($c,$0,1);
  $n$0 = 0;
 } else {
  $n$0 = $4;
 }
 $8 = (($0) + ($n$0)|0);
 $9 = (56 - ($n$0))|0;
 _memset(($8|0),0,($9|0))|0;
 $10 = ((($c)) + 96|0);
 $11 = ((($c)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 24;
 $14 = $13&255;
 $15 = ((($10)) + 1|0);
 HEAP8[$10>>0] = $14;
 $16 = $12 >>> 16;
 $17 = $16&255;
 $18 = ((($10)) + 2|0);
 HEAP8[$15>>0] = $17;
 $19 = $12 >>> 8;
 $20 = $19&255;
 $21 = ((($10)) + 3|0);
 HEAP8[$18>>0] = $20;
 $22 = $12&255;
 $23 = ((($c)) + 100|0);
 HEAP8[$21>>0] = $22;
 $24 = ((($c)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 >>> 24;
 $27 = $26&255;
 $28 = ((($23)) + 1|0);
 HEAP8[$23>>0] = $27;
 $29 = $25 >>> 16;
 $30 = $29&255;
 $31 = ((($23)) + 2|0);
 HEAP8[$28>>0] = $30;
 $32 = $25 >>> 8;
 $33 = $32&255;
 $34 = ((($23)) + 3|0);
 HEAP8[$31>>0] = $33;
 $35 = $25&255;
 HEAP8[$34>>0] = $35;
 _sha256_block_data_order($c,$0,1);
 $36 = ((($c)) + 108|0);
 dest=$0; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $37 = HEAP32[$36>>2]|0;
 switch ($37|0) {
 case 28:  {
  $140 = HEAP32[$c>>2]|0;
  $141 = $140 >>> 24;
  $142 = $141&255;
  $143 = ((($md)) + 1|0);
  HEAP8[$md>>0] = $142;
  $144 = $140 >>> 16;
  $145 = $144&255;
  $146 = ((($md)) + 2|0);
  HEAP8[$143>>0] = $145;
  $147 = $140 >>> 8;
  $148 = $147&255;
  $149 = ((($md)) + 3|0);
  HEAP8[$146>>0] = $148;
  $150 = $140&255;
  $151 = ((($md)) + 4|0);
  HEAP8[$149>>0] = $150;
  $152 = ((($c)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $153 >>> 24;
  $155 = $154&255;
  $156 = ((($md)) + 5|0);
  HEAP8[$151>>0] = $155;
  $157 = $153 >>> 16;
  $158 = $157&255;
  $159 = ((($md)) + 6|0);
  HEAP8[$156>>0] = $158;
  $160 = $153 >>> 8;
  $161 = $160&255;
  $162 = ((($md)) + 7|0);
  HEAP8[$159>>0] = $161;
  $163 = $153&255;
  $164 = ((($md)) + 8|0);
  HEAP8[$162>>0] = $163;
  $165 = ((($c)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 >>> 24;
  $168 = $167&255;
  $169 = ((($md)) + 9|0);
  HEAP8[$164>>0] = $168;
  $170 = $166 >>> 16;
  $171 = $170&255;
  $172 = ((($md)) + 10|0);
  HEAP8[$169>>0] = $171;
  $173 = $166 >>> 8;
  $174 = $173&255;
  $175 = ((($md)) + 11|0);
  HEAP8[$172>>0] = $174;
  $176 = $166&255;
  $177 = ((($md)) + 12|0);
  HEAP8[$175>>0] = $176;
  $178 = ((($c)) + 12|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179 >>> 24;
  $181 = $180&255;
  $182 = ((($md)) + 13|0);
  HEAP8[$177>>0] = $181;
  $183 = $179 >>> 16;
  $184 = $183&255;
  $185 = ((($md)) + 14|0);
  HEAP8[$182>>0] = $184;
  $186 = $179 >>> 8;
  $187 = $186&255;
  $188 = ((($md)) + 15|0);
  HEAP8[$185>>0] = $187;
  $189 = $179&255;
  $190 = ((($md)) + 16|0);
  HEAP8[$188>>0] = $189;
  $191 = ((($c)) + 16|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $192 >>> 24;
  $194 = $193&255;
  $195 = ((($md)) + 17|0);
  HEAP8[$190>>0] = $194;
  $196 = $192 >>> 16;
  $197 = $196&255;
  $198 = ((($md)) + 18|0);
  HEAP8[$195>>0] = $197;
  $199 = $192 >>> 8;
  $200 = $199&255;
  $201 = ((($md)) + 19|0);
  HEAP8[$198>>0] = $200;
  $202 = $192&255;
  $203 = ((($md)) + 20|0);
  HEAP8[$201>>0] = $202;
  $204 = ((($c)) + 20|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $205 >>> 24;
  $207 = $206&255;
  $208 = ((($md)) + 21|0);
  HEAP8[$203>>0] = $207;
  $209 = $205 >>> 16;
  $210 = $209&255;
  $211 = ((($md)) + 22|0);
  HEAP8[$208>>0] = $210;
  $212 = $205 >>> 8;
  $213 = $212&255;
  $214 = ((($md)) + 23|0);
  HEAP8[$211>>0] = $213;
  $215 = $205&255;
  $216 = ((($md)) + 24|0);
  HEAP8[$214>>0] = $215;
  $217 = ((($c)) + 24|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $218 >>> 24;
  $220 = $219&255;
  $221 = ((($md)) + 25|0);
  HEAP8[$216>>0] = $220;
  $222 = $218 >>> 16;
  $223 = $222&255;
  $224 = ((($md)) + 26|0);
  HEAP8[$221>>0] = $223;
  $225 = $218 >>> 8;
  $226 = $225&255;
  $227 = ((($md)) + 27|0);
  HEAP8[$224>>0] = $226;
  $228 = $218&255;
  HEAP8[$227>>0] = $228;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 32:  {
  $38 = HEAP32[$c>>2]|0;
  $39 = $38 >>> 24;
  $40 = $39&255;
  $41 = ((($md)) + 1|0);
  HEAP8[$md>>0] = $40;
  $42 = $38 >>> 16;
  $43 = $42&255;
  $44 = ((($md)) + 2|0);
  HEAP8[$41>>0] = $43;
  $45 = $38 >>> 8;
  $46 = $45&255;
  $47 = ((($md)) + 3|0);
  HEAP8[$44>>0] = $46;
  $48 = $38&255;
  $49 = ((($md)) + 4|0);
  HEAP8[$47>>0] = $48;
  $50 = ((($c)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 >>> 24;
  $53 = $52&255;
  $54 = ((($md)) + 5|0);
  HEAP8[$49>>0] = $53;
  $55 = $51 >>> 16;
  $56 = $55&255;
  $57 = ((($md)) + 6|0);
  HEAP8[$54>>0] = $56;
  $58 = $51 >>> 8;
  $59 = $58&255;
  $60 = ((($md)) + 7|0);
  HEAP8[$57>>0] = $59;
  $61 = $51&255;
  $62 = ((($md)) + 8|0);
  HEAP8[$60>>0] = $61;
  $63 = ((($c)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64 >>> 24;
  $66 = $65&255;
  $67 = ((($md)) + 9|0);
  HEAP8[$62>>0] = $66;
  $68 = $64 >>> 16;
  $69 = $68&255;
  $70 = ((($md)) + 10|0);
  HEAP8[$67>>0] = $69;
  $71 = $64 >>> 8;
  $72 = $71&255;
  $73 = ((($md)) + 11|0);
  HEAP8[$70>>0] = $72;
  $74 = $64&255;
  $75 = ((($md)) + 12|0);
  HEAP8[$73>>0] = $74;
  $76 = ((($c)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 >>> 24;
  $79 = $78&255;
  $80 = ((($md)) + 13|0);
  HEAP8[$75>>0] = $79;
  $81 = $77 >>> 16;
  $82 = $81&255;
  $83 = ((($md)) + 14|0);
  HEAP8[$80>>0] = $82;
  $84 = $77 >>> 8;
  $85 = $84&255;
  $86 = ((($md)) + 15|0);
  HEAP8[$83>>0] = $85;
  $87 = $77&255;
  $88 = ((($md)) + 16|0);
  HEAP8[$86>>0] = $87;
  $89 = ((($c)) + 16|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90 >>> 24;
  $92 = $91&255;
  $93 = ((($md)) + 17|0);
  HEAP8[$88>>0] = $92;
  $94 = $90 >>> 16;
  $95 = $94&255;
  $96 = ((($md)) + 18|0);
  HEAP8[$93>>0] = $95;
  $97 = $90 >>> 8;
  $98 = $97&255;
  $99 = ((($md)) + 19|0);
  HEAP8[$96>>0] = $98;
  $100 = $90&255;
  $101 = ((($md)) + 20|0);
  HEAP8[$99>>0] = $100;
  $102 = ((($c)) + 20|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $103 >>> 24;
  $105 = $104&255;
  $106 = ((($md)) + 21|0);
  HEAP8[$101>>0] = $105;
  $107 = $103 >>> 16;
  $108 = $107&255;
  $109 = ((($md)) + 22|0);
  HEAP8[$106>>0] = $108;
  $110 = $103 >>> 8;
  $111 = $110&255;
  $112 = ((($md)) + 23|0);
  HEAP8[$109>>0] = $111;
  $113 = $103&255;
  $114 = ((($md)) + 24|0);
  HEAP8[$112>>0] = $113;
  $115 = ((($c)) + 24|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 >>> 24;
  $118 = $117&255;
  $119 = ((($md)) + 25|0);
  HEAP8[$114>>0] = $118;
  $120 = $116 >>> 16;
  $121 = $120&255;
  $122 = ((($md)) + 26|0);
  HEAP8[$119>>0] = $121;
  $123 = $116 >>> 8;
  $124 = $123&255;
  $125 = ((($md)) + 27|0);
  HEAP8[$122>>0] = $124;
  $126 = $116&255;
  $127 = ((($md)) + 28|0);
  HEAP8[$125>>0] = $126;
  $128 = ((($c)) + 28|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $129 >>> 24;
  $131 = $130&255;
  $132 = ((($md)) + 29|0);
  HEAP8[$127>>0] = $131;
  $133 = $129 >>> 16;
  $134 = $133&255;
  $135 = ((($md)) + 30|0);
  HEAP8[$132>>0] = $134;
  $136 = $129 >>> 8;
  $137 = $136&255;
  $138 = ((($md)) + 31|0);
  HEAP8[$135>>0] = $137;
  $139 = $129&255;
  HEAP8[$138>>0] = $139;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $229 = ($37>>>0)>(32);
  if ($229) {
   $$0 = 0;
   return ($$0|0);
  }
  $230 = ($37>>>0)>(3);
  if ($230) {
   $$26 = $md;$nn$27 = 0;
  } else {
   $$0 = 1;
   return ($$0|0);
  }
  while(1) {
   $231 = (($c) + ($nn$27<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $232 >>> 24;
   $234 = $233&255;
   $235 = ((($$26)) + 1|0);
   HEAP8[$$26>>0] = $234;
   $236 = $232 >>> 16;
   $237 = $236&255;
   $238 = ((($$26)) + 2|0);
   HEAP8[$235>>0] = $237;
   $239 = $232 >>> 8;
   $240 = $239&255;
   $241 = ((($$26)) + 3|0);
   HEAP8[$238>>0] = $240;
   $242 = $232&255;
   $243 = ((($$26)) + 4|0);
   HEAP8[$241>>0] = $242;
   $244 = (($nn$27) + 1)|0;
   $245 = HEAP32[$36>>2]|0;
   $246 = $245 >>> 2;
   $247 = ($244>>>0)<($246>>>0);
   if ($247) {
    $$26 = $243;$nn$27 = $244;
   } else {
    $$0 = 1;
    break;
   }
  }
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _sha256_block_data_order($ctx,$in,$num) {
 $ctx = $ctx|0;
 $in = $in|0;
 $num = $num|0;
 var $$in = 0, $$lcssa = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $$lcssa50 = 0, $$lcssa51 = 0, $$lcssa52 = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $$pre24 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
 var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0;
 var $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0;
 var $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0;
 var $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0;
 var $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0;
 var $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0;
 var $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0;
 var $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0;
 var $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0;
 var $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0;
 var $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0;
 var $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0;
 var $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0;
 var $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0;
 var $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0;
 var $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0;
 var $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $X = 0, $a$19 = 0, $b$17 = 0, $c$16 = 0, $d$11 = 0, $data$010 = 0, $e$12 = 0, $f$13 = 0, $g$14 = 0, $h$15 = 0, $i$08 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $X = sp;
 $0 = ($num|0)==(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ((($ctx)) + 4|0);
 $2 = ((($ctx)) + 8|0);
 $3 = ((($ctx)) + 12|0);
 $4 = ((($ctx)) + 16|0);
 $5 = ((($ctx)) + 20|0);
 $6 = ((($ctx)) + 24|0);
 $7 = ((($ctx)) + 28|0);
 $8 = ((($X)) + 4|0);
 $9 = ((($X)) + 8|0);
 $10 = ((($X)) + 12|0);
 $11 = ((($X)) + 16|0);
 $12 = ((($X)) + 20|0);
 $13 = ((($X)) + 24|0);
 $14 = ((($X)) + 28|0);
 $15 = ((($X)) + 32|0);
 $16 = ((($X)) + 36|0);
 $17 = ((($X)) + 40|0);
 $18 = ((($X)) + 44|0);
 $19 = ((($X)) + 48|0);
 $20 = ((($X)) + 52|0);
 $21 = ((($X)) + 56|0);
 $22 = ((($X)) + 60|0);
 $$pre = HEAP32[$ctx>>2]|0;
 $$pre18 = HEAP32[$1>>2]|0;
 $$pre19 = HEAP32[$2>>2]|0;
 $$pre20 = HEAP32[$4>>2]|0;
 $$pre21 = HEAP32[$5>>2]|0;
 $$pre22 = HEAP32[$6>>2]|0;
 $$pre23 = HEAP32[$7>>2]|0;
 $$pre24 = HEAP32[$3>>2]|0;
 $$in = $num;$42 = $$pre20;$54 = $$pre21;$57 = $$pre22;$60 = $$pre23;$65 = $$pre;$77 = $$pre18;$79 = $$pre19;$85 = $$pre24;$data$010 = $in;
 while(1) {
  $23 = ((($data$010)) + 1|0);
  $24 = HEAP8[$data$010>>0]|0;
  $25 = $24&255;
  $26 = $25 << 24;
  $27 = ((($data$010)) + 2|0);
  $28 = HEAP8[$23>>0]|0;
  $29 = $28&255;
  $30 = $29 << 16;
  $31 = $30 | $26;
  $32 = ((($data$010)) + 3|0);
  $33 = HEAP8[$27>>0]|0;
  $34 = $33&255;
  $35 = $34 << 8;
  $36 = $31 | $35;
  $37 = ((($data$010)) + 4|0);
  $38 = HEAP8[$32>>0]|0;
  $39 = $38&255;
  $40 = $36 | $39;
  HEAP32[$X>>2] = $40;
  $41 = $42 << 26;
  $43 = $42 >>> 6;
  $44 = $41 | $43;
  $45 = $42 << 21;
  $46 = $42 >>> 11;
  $47 = $45 | $46;
  $48 = $44 ^ $47;
  $49 = $42 << 7;
  $50 = $42 >>> 25;
  $51 = $49 | $50;
  $52 = $48 ^ $51;
  $53 = $54 & $42;
  $55 = $42 ^ -1;
  $56 = $57 & $55;
  $58 = $56 ^ $53;
  $59 = (($60) + 1116352408)|0;
  $61 = (($59) + ($52))|0;
  $62 = (($61) + ($58))|0;
  $63 = (($62) + ($40))|0;
  $64 = $65 << 30;
  $66 = $65 >>> 2;
  $67 = $64 | $66;
  $68 = $65 << 19;
  $69 = $65 >>> 13;
  $70 = $68 | $69;
  $71 = $67 ^ $70;
  $72 = $65 << 10;
  $73 = $65 >>> 22;
  $74 = $72 | $73;
  $75 = $71 ^ $74;
  $76 = $77 & $65;
  $78 = $79 & $65;
  $80 = $78 ^ $76;
  $81 = $79 & $77;
  $82 = $80 ^ $81;
  $83 = (($82) + ($75))|0;
  $84 = (($63) + ($85))|0;
  $86 = (($83) + ($63))|0;
  $87 = ((($data$010)) + 5|0);
  $88 = HEAP8[$37>>0]|0;
  $89 = $88&255;
  $90 = $89 << 24;
  $91 = ((($data$010)) + 6|0);
  $92 = HEAP8[$87>>0]|0;
  $93 = $92&255;
  $94 = $93 << 16;
  $95 = $94 | $90;
  $96 = ((($data$010)) + 7|0);
  $97 = HEAP8[$91>>0]|0;
  $98 = $97&255;
  $99 = $98 << 8;
  $100 = $95 | $99;
  $101 = ((($data$010)) + 8|0);
  $102 = HEAP8[$96>>0]|0;
  $103 = $102&255;
  $104 = $100 | $103;
  HEAP32[$8>>2] = $104;
  $105 = $84 << 26;
  $106 = $84 >>> 6;
  $107 = $105 | $106;
  $108 = $84 << 21;
  $109 = $84 >>> 11;
  $110 = $108 | $109;
  $111 = $107 ^ $110;
  $112 = $84 << 7;
  $113 = $84 >>> 25;
  $114 = $112 | $113;
  $115 = $111 ^ $114;
  $116 = $84 & $42;
  $117 = $84 ^ -1;
  $118 = $54 & $117;
  $119 = $116 ^ $118;
  $120 = (($57) + 1899447441)|0;
  $121 = (($120) + ($119))|0;
  $122 = (($121) + ($104))|0;
  $123 = (($122) + ($115))|0;
  $124 = $86 << 30;
  $125 = $86 >>> 2;
  $126 = $124 | $125;
  $127 = $86 << 19;
  $128 = $86 >>> 13;
  $129 = $127 | $128;
  $130 = $126 ^ $129;
  $131 = $86 << 10;
  $132 = $86 >>> 22;
  $133 = $131 | $132;
  $134 = $130 ^ $133;
  $135 = $86 & $65;
  $136 = $86 & $77;
  $137 = $136 ^ $76;
  $138 = $137 ^ $135;
  $139 = (($134) + ($138))|0;
  $140 = (($123) + ($79))|0;
  $141 = (($139) + ($123))|0;
  $142 = ((($data$010)) + 9|0);
  $143 = HEAP8[$101>>0]|0;
  $144 = $143&255;
  $145 = $144 << 24;
  $146 = ((($data$010)) + 10|0);
  $147 = HEAP8[$142>>0]|0;
  $148 = $147&255;
  $149 = $148 << 16;
  $150 = $149 | $145;
  $151 = ((($data$010)) + 11|0);
  $152 = HEAP8[$146>>0]|0;
  $153 = $152&255;
  $154 = $153 << 8;
  $155 = $150 | $154;
  $156 = ((($data$010)) + 12|0);
  $157 = HEAP8[$151>>0]|0;
  $158 = $157&255;
  $159 = $155 | $158;
  HEAP32[$9>>2] = $159;
  $160 = $140 << 26;
  $161 = $140 >>> 6;
  $162 = $160 | $161;
  $163 = $140 << 21;
  $164 = $140 >>> 11;
  $165 = $163 | $164;
  $166 = $162 ^ $165;
  $167 = $140 << 7;
  $168 = $140 >>> 25;
  $169 = $167 | $168;
  $170 = $166 ^ $169;
  $171 = $140 & $84;
  $172 = $140 ^ -1;
  $173 = $42 & $172;
  $174 = $171 ^ $173;
  $175 = (($54) + -1245643825)|0;
  $176 = (($175) + ($159))|0;
  $177 = (($176) + ($174))|0;
  $178 = (($177) + ($170))|0;
  $179 = $141 << 30;
  $180 = $141 >>> 2;
  $181 = $179 | $180;
  $182 = $141 << 19;
  $183 = $141 >>> 13;
  $184 = $182 | $183;
  $185 = $181 ^ $184;
  $186 = $141 << 10;
  $187 = $141 >>> 22;
  $188 = $186 | $187;
  $189 = $185 ^ $188;
  $190 = $141 & $86;
  $191 = $141 & $65;
  $192 = $191 ^ $135;
  $193 = $192 ^ $190;
  $194 = (($189) + ($193))|0;
  $195 = (($178) + ($77))|0;
  $196 = (($194) + ($178))|0;
  $197 = ((($data$010)) + 13|0);
  $198 = HEAP8[$156>>0]|0;
  $199 = $198&255;
  $200 = $199 << 24;
  $201 = ((($data$010)) + 14|0);
  $202 = HEAP8[$197>>0]|0;
  $203 = $202&255;
  $204 = $203 << 16;
  $205 = $204 | $200;
  $206 = ((($data$010)) + 15|0);
  $207 = HEAP8[$201>>0]|0;
  $208 = $207&255;
  $209 = $208 << 8;
  $210 = $205 | $209;
  $211 = ((($data$010)) + 16|0);
  $212 = HEAP8[$206>>0]|0;
  $213 = $212&255;
  $214 = $210 | $213;
  HEAP32[$10>>2] = $214;
  $215 = $195 << 26;
  $216 = $195 >>> 6;
  $217 = $215 | $216;
  $218 = $195 << 21;
  $219 = $195 >>> 11;
  $220 = $218 | $219;
  $221 = $217 ^ $220;
  $222 = $195 << 7;
  $223 = $195 >>> 25;
  $224 = $222 | $223;
  $225 = $221 ^ $224;
  $226 = $195 & $140;
  $227 = $195 ^ -1;
  $228 = $84 & $227;
  $229 = $226 ^ $228;
  $230 = (($42) + -373957723)|0;
  $231 = (($230) + ($214))|0;
  $232 = (($231) + ($229))|0;
  $233 = (($232) + ($225))|0;
  $234 = $196 << 30;
  $235 = $196 >>> 2;
  $236 = $234 | $235;
  $237 = $196 << 19;
  $238 = $196 >>> 13;
  $239 = $237 | $238;
  $240 = $236 ^ $239;
  $241 = $196 << 10;
  $242 = $196 >>> 22;
  $243 = $241 | $242;
  $244 = $240 ^ $243;
  $245 = $196 & $141;
  $246 = $196 & $86;
  $247 = $246 ^ $190;
  $248 = $247 ^ $245;
  $249 = (($244) + ($248))|0;
  $250 = (($233) + ($65))|0;
  $251 = (($249) + ($233))|0;
  $252 = ((($data$010)) + 17|0);
  $253 = HEAP8[$211>>0]|0;
  $254 = $253&255;
  $255 = $254 << 24;
  $256 = ((($data$010)) + 18|0);
  $257 = HEAP8[$252>>0]|0;
  $258 = $257&255;
  $259 = $258 << 16;
  $260 = $259 | $255;
  $261 = ((($data$010)) + 19|0);
  $262 = HEAP8[$256>>0]|0;
  $263 = $262&255;
  $264 = $263 << 8;
  $265 = $260 | $264;
  $266 = ((($data$010)) + 20|0);
  $267 = HEAP8[$261>>0]|0;
  $268 = $267&255;
  $269 = $265 | $268;
  HEAP32[$11>>2] = $269;
  $270 = $250 << 26;
  $271 = $250 >>> 6;
  $272 = $270 | $271;
  $273 = $250 << 21;
  $274 = $250 >>> 11;
  $275 = $273 | $274;
  $276 = $272 ^ $275;
  $277 = $250 << 7;
  $278 = $250 >>> 25;
  $279 = $277 | $278;
  $280 = $276 ^ $279;
  $281 = $250 & $195;
  $282 = $250 ^ -1;
  $283 = $140 & $282;
  $284 = $281 ^ $283;
  $285 = (($84) + 961987163)|0;
  $286 = (($285) + ($269))|0;
  $287 = (($286) + ($284))|0;
  $288 = (($287) + ($280))|0;
  $289 = $251 << 30;
  $290 = $251 >>> 2;
  $291 = $289 | $290;
  $292 = $251 << 19;
  $293 = $251 >>> 13;
  $294 = $292 | $293;
  $295 = $291 ^ $294;
  $296 = $251 << 10;
  $297 = $251 >>> 22;
  $298 = $296 | $297;
  $299 = $295 ^ $298;
  $300 = $251 & $196;
  $301 = $251 & $141;
  $302 = $301 ^ $245;
  $303 = $302 ^ $300;
  $304 = (($299) + ($303))|0;
  $305 = (($288) + ($86))|0;
  $306 = (($304) + ($288))|0;
  $307 = ((($data$010)) + 21|0);
  $308 = HEAP8[$266>>0]|0;
  $309 = $308&255;
  $310 = $309 << 24;
  $311 = ((($data$010)) + 22|0);
  $312 = HEAP8[$307>>0]|0;
  $313 = $312&255;
  $314 = $313 << 16;
  $315 = $314 | $310;
  $316 = ((($data$010)) + 23|0);
  $317 = HEAP8[$311>>0]|0;
  $318 = $317&255;
  $319 = $318 << 8;
  $320 = $315 | $319;
  $321 = ((($data$010)) + 24|0);
  $322 = HEAP8[$316>>0]|0;
  $323 = $322&255;
  $324 = $320 | $323;
  HEAP32[$12>>2] = $324;
  $325 = $305 << 26;
  $326 = $305 >>> 6;
  $327 = $325 | $326;
  $328 = $305 << 21;
  $329 = $305 >>> 11;
  $330 = $328 | $329;
  $331 = $327 ^ $330;
  $332 = $305 << 7;
  $333 = $305 >>> 25;
  $334 = $332 | $333;
  $335 = $331 ^ $334;
  $336 = $305 & $250;
  $337 = $305 ^ -1;
  $338 = $195 & $337;
  $339 = $336 ^ $338;
  $340 = (($140) + 1508970993)|0;
  $341 = (($340) + ($324))|0;
  $342 = (($341) + ($339))|0;
  $343 = (($342) + ($335))|0;
  $344 = $306 << 30;
  $345 = $306 >>> 2;
  $346 = $344 | $345;
  $347 = $306 << 19;
  $348 = $306 >>> 13;
  $349 = $347 | $348;
  $350 = $346 ^ $349;
  $351 = $306 << 10;
  $352 = $306 >>> 22;
  $353 = $351 | $352;
  $354 = $350 ^ $353;
  $355 = $306 & $251;
  $356 = $306 & $196;
  $357 = $356 ^ $300;
  $358 = $357 ^ $355;
  $359 = (($354) + ($358))|0;
  $360 = (($343) + ($141))|0;
  $361 = (($359) + ($343))|0;
  $362 = ((($data$010)) + 25|0);
  $363 = HEAP8[$321>>0]|0;
  $364 = $363&255;
  $365 = $364 << 24;
  $366 = ((($data$010)) + 26|0);
  $367 = HEAP8[$362>>0]|0;
  $368 = $367&255;
  $369 = $368 << 16;
  $370 = $369 | $365;
  $371 = ((($data$010)) + 27|0);
  $372 = HEAP8[$366>>0]|0;
  $373 = $372&255;
  $374 = $373 << 8;
  $375 = $370 | $374;
  $376 = ((($data$010)) + 28|0);
  $377 = HEAP8[$371>>0]|0;
  $378 = $377&255;
  $379 = $375 | $378;
  HEAP32[$13>>2] = $379;
  $380 = $360 << 26;
  $381 = $360 >>> 6;
  $382 = $380 | $381;
  $383 = $360 << 21;
  $384 = $360 >>> 11;
  $385 = $383 | $384;
  $386 = $382 ^ $385;
  $387 = $360 << 7;
  $388 = $360 >>> 25;
  $389 = $387 | $388;
  $390 = $386 ^ $389;
  $391 = $360 & $305;
  $392 = $360 ^ -1;
  $393 = $250 & $392;
  $394 = $391 ^ $393;
  $395 = (($195) + -1841331548)|0;
  $396 = (($395) + ($379))|0;
  $397 = (($396) + ($394))|0;
  $398 = (($397) + ($390))|0;
  $399 = $361 << 30;
  $400 = $361 >>> 2;
  $401 = $399 | $400;
  $402 = $361 << 19;
  $403 = $361 >>> 13;
  $404 = $402 | $403;
  $405 = $401 ^ $404;
  $406 = $361 << 10;
  $407 = $361 >>> 22;
  $408 = $406 | $407;
  $409 = $405 ^ $408;
  $410 = $361 & $306;
  $411 = $361 & $251;
  $412 = $411 ^ $355;
  $413 = $412 ^ $410;
  $414 = (($409) + ($413))|0;
  $415 = (($398) + ($196))|0;
  $416 = (($414) + ($398))|0;
  $417 = ((($data$010)) + 29|0);
  $418 = HEAP8[$376>>0]|0;
  $419 = $418&255;
  $420 = $419 << 24;
  $421 = ((($data$010)) + 30|0);
  $422 = HEAP8[$417>>0]|0;
  $423 = $422&255;
  $424 = $423 << 16;
  $425 = $424 | $420;
  $426 = ((($data$010)) + 31|0);
  $427 = HEAP8[$421>>0]|0;
  $428 = $427&255;
  $429 = $428 << 8;
  $430 = $425 | $429;
  $431 = ((($data$010)) + 32|0);
  $432 = HEAP8[$426>>0]|0;
  $433 = $432&255;
  $434 = $430 | $433;
  HEAP32[$14>>2] = $434;
  $435 = $415 << 26;
  $436 = $415 >>> 6;
  $437 = $435 | $436;
  $438 = $415 << 21;
  $439 = $415 >>> 11;
  $440 = $438 | $439;
  $441 = $437 ^ $440;
  $442 = $415 << 7;
  $443 = $415 >>> 25;
  $444 = $442 | $443;
  $445 = $441 ^ $444;
  $446 = $415 & $360;
  $447 = $415 ^ -1;
  $448 = $305 & $447;
  $449 = $446 ^ $448;
  $450 = (($434) + -1424204075)|0;
  $451 = (($450) + ($250))|0;
  $452 = (($451) + ($449))|0;
  $453 = (($452) + ($445))|0;
  $454 = $416 << 30;
  $455 = $416 >>> 2;
  $456 = $454 | $455;
  $457 = $416 << 19;
  $458 = $416 >>> 13;
  $459 = $457 | $458;
  $460 = $456 ^ $459;
  $461 = $416 << 10;
  $462 = $416 >>> 22;
  $463 = $461 | $462;
  $464 = $460 ^ $463;
  $465 = $416 & $361;
  $466 = $416 & $306;
  $467 = $466 ^ $410;
  $468 = $467 ^ $465;
  $469 = (($464) + ($468))|0;
  $470 = (($453) + ($251))|0;
  $471 = (($469) + ($453))|0;
  $472 = ((($data$010)) + 33|0);
  $473 = HEAP8[$431>>0]|0;
  $474 = $473&255;
  $475 = $474 << 24;
  $476 = ((($data$010)) + 34|0);
  $477 = HEAP8[$472>>0]|0;
  $478 = $477&255;
  $479 = $478 << 16;
  $480 = $479 | $475;
  $481 = ((($data$010)) + 35|0);
  $482 = HEAP8[$476>>0]|0;
  $483 = $482&255;
  $484 = $483 << 8;
  $485 = $480 | $484;
  $486 = ((($data$010)) + 36|0);
  $487 = HEAP8[$481>>0]|0;
  $488 = $487&255;
  $489 = $485 | $488;
  HEAP32[$15>>2] = $489;
  $490 = $470 << 26;
  $491 = $470 >>> 6;
  $492 = $490 | $491;
  $493 = $470 << 21;
  $494 = $470 >>> 11;
  $495 = $493 | $494;
  $496 = $492 ^ $495;
  $497 = $470 << 7;
  $498 = $470 >>> 25;
  $499 = $497 | $498;
  $500 = $496 ^ $499;
  $501 = $470 & $415;
  $502 = $470 ^ -1;
  $503 = $360 & $502;
  $504 = $501 ^ $503;
  $505 = (($489) + -670586216)|0;
  $506 = (($505) + ($305))|0;
  $507 = (($506) + ($504))|0;
  $508 = (($507) + ($500))|0;
  $509 = $471 << 30;
  $510 = $471 >>> 2;
  $511 = $509 | $510;
  $512 = $471 << 19;
  $513 = $471 >>> 13;
  $514 = $512 | $513;
  $515 = $511 ^ $514;
  $516 = $471 << 10;
  $517 = $471 >>> 22;
  $518 = $516 | $517;
  $519 = $515 ^ $518;
  $520 = $471 & $416;
  $521 = $471 & $361;
  $522 = $521 ^ $465;
  $523 = $522 ^ $520;
  $524 = (($519) + ($523))|0;
  $525 = (($508) + ($306))|0;
  $526 = (($524) + ($508))|0;
  $527 = ((($data$010)) + 37|0);
  $528 = HEAP8[$486>>0]|0;
  $529 = $528&255;
  $530 = $529 << 24;
  $531 = ((($data$010)) + 38|0);
  $532 = HEAP8[$527>>0]|0;
  $533 = $532&255;
  $534 = $533 << 16;
  $535 = $534 | $530;
  $536 = ((($data$010)) + 39|0);
  $537 = HEAP8[$531>>0]|0;
  $538 = $537&255;
  $539 = $538 << 8;
  $540 = $535 | $539;
  $541 = ((($data$010)) + 40|0);
  $542 = HEAP8[$536>>0]|0;
  $543 = $542&255;
  $544 = $540 | $543;
  HEAP32[$16>>2] = $544;
  $545 = $525 << 26;
  $546 = $525 >>> 6;
  $547 = $545 | $546;
  $548 = $525 << 21;
  $549 = $525 >>> 11;
  $550 = $548 | $549;
  $551 = $547 ^ $550;
  $552 = $525 << 7;
  $553 = $525 >>> 25;
  $554 = $552 | $553;
  $555 = $551 ^ $554;
  $556 = $525 & $470;
  $557 = $525 ^ -1;
  $558 = $415 & $557;
  $559 = $556 ^ $558;
  $560 = (($544) + 310598401)|0;
  $561 = (($560) + ($360))|0;
  $562 = (($561) + ($559))|0;
  $563 = (($562) + ($555))|0;
  $564 = $526 << 30;
  $565 = $526 >>> 2;
  $566 = $564 | $565;
  $567 = $526 << 19;
  $568 = $526 >>> 13;
  $569 = $567 | $568;
  $570 = $566 ^ $569;
  $571 = $526 << 10;
  $572 = $526 >>> 22;
  $573 = $571 | $572;
  $574 = $570 ^ $573;
  $575 = $526 & $471;
  $576 = $526 & $416;
  $577 = $576 ^ $520;
  $578 = $577 ^ $575;
  $579 = (($574) + ($578))|0;
  $580 = (($563) + ($361))|0;
  $581 = (($579) + ($563))|0;
  $582 = ((($data$010)) + 41|0);
  $583 = HEAP8[$541>>0]|0;
  $584 = $583&255;
  $585 = $584 << 24;
  $586 = ((($data$010)) + 42|0);
  $587 = HEAP8[$582>>0]|0;
  $588 = $587&255;
  $589 = $588 << 16;
  $590 = $589 | $585;
  $591 = ((($data$010)) + 43|0);
  $592 = HEAP8[$586>>0]|0;
  $593 = $592&255;
  $594 = $593 << 8;
  $595 = $590 | $594;
  $596 = ((($data$010)) + 44|0);
  $597 = HEAP8[$591>>0]|0;
  $598 = $597&255;
  $599 = $595 | $598;
  HEAP32[$17>>2] = $599;
  $600 = $580 << 26;
  $601 = $580 >>> 6;
  $602 = $600 | $601;
  $603 = $580 << 21;
  $604 = $580 >>> 11;
  $605 = $603 | $604;
  $606 = $602 ^ $605;
  $607 = $580 << 7;
  $608 = $580 >>> 25;
  $609 = $607 | $608;
  $610 = $606 ^ $609;
  $611 = $580 & $525;
  $612 = $580 ^ -1;
  $613 = $470 & $612;
  $614 = $611 ^ $613;
  $615 = (($599) + 607225278)|0;
  $616 = (($615) + ($415))|0;
  $617 = (($616) + ($614))|0;
  $618 = (($617) + ($610))|0;
  $619 = $581 << 30;
  $620 = $581 >>> 2;
  $621 = $619 | $620;
  $622 = $581 << 19;
  $623 = $581 >>> 13;
  $624 = $622 | $623;
  $625 = $621 ^ $624;
  $626 = $581 << 10;
  $627 = $581 >>> 22;
  $628 = $626 | $627;
  $629 = $625 ^ $628;
  $630 = $581 & $526;
  $631 = $581 & $471;
  $632 = $631 ^ $575;
  $633 = $632 ^ $630;
  $634 = (($629) + ($633))|0;
  $635 = (($618) + ($416))|0;
  $636 = (($634) + ($618))|0;
  $637 = ((($data$010)) + 45|0);
  $638 = HEAP8[$596>>0]|0;
  $639 = $638&255;
  $640 = $639 << 24;
  $641 = ((($data$010)) + 46|0);
  $642 = HEAP8[$637>>0]|0;
  $643 = $642&255;
  $644 = $643 << 16;
  $645 = $644 | $640;
  $646 = ((($data$010)) + 47|0);
  $647 = HEAP8[$641>>0]|0;
  $648 = $647&255;
  $649 = $648 << 8;
  $650 = $645 | $649;
  $651 = ((($data$010)) + 48|0);
  $652 = HEAP8[$646>>0]|0;
  $653 = $652&255;
  $654 = $650 | $653;
  HEAP32[$18>>2] = $654;
  $655 = $635 << 26;
  $656 = $635 >>> 6;
  $657 = $655 | $656;
  $658 = $635 << 21;
  $659 = $635 >>> 11;
  $660 = $658 | $659;
  $661 = $657 ^ $660;
  $662 = $635 << 7;
  $663 = $635 >>> 25;
  $664 = $662 | $663;
  $665 = $661 ^ $664;
  $666 = $635 & $580;
  $667 = $635 ^ -1;
  $668 = $525 & $667;
  $669 = $666 ^ $668;
  $670 = (($654) + 1426881987)|0;
  $671 = (($670) + ($470))|0;
  $672 = (($671) + ($669))|0;
  $673 = (($672) + ($665))|0;
  $674 = $636 << 30;
  $675 = $636 >>> 2;
  $676 = $674 | $675;
  $677 = $636 << 19;
  $678 = $636 >>> 13;
  $679 = $677 | $678;
  $680 = $676 ^ $679;
  $681 = $636 << 10;
  $682 = $636 >>> 22;
  $683 = $681 | $682;
  $684 = $680 ^ $683;
  $685 = $636 & $581;
  $686 = $636 & $526;
  $687 = $686 ^ $630;
  $688 = $687 ^ $685;
  $689 = (($684) + ($688))|0;
  $690 = (($673) + ($471))|0;
  $691 = (($689) + ($673))|0;
  $692 = ((($data$010)) + 49|0);
  $693 = HEAP8[$651>>0]|0;
  $694 = $693&255;
  $695 = $694 << 24;
  $696 = ((($data$010)) + 50|0);
  $697 = HEAP8[$692>>0]|0;
  $698 = $697&255;
  $699 = $698 << 16;
  $700 = $699 | $695;
  $701 = ((($data$010)) + 51|0);
  $702 = HEAP8[$696>>0]|0;
  $703 = $702&255;
  $704 = $703 << 8;
  $705 = $700 | $704;
  $706 = ((($data$010)) + 52|0);
  $707 = HEAP8[$701>>0]|0;
  $708 = $707&255;
  $709 = $705 | $708;
  HEAP32[$19>>2] = $709;
  $710 = $690 << 26;
  $711 = $690 >>> 6;
  $712 = $710 | $711;
  $713 = $690 << 21;
  $714 = $690 >>> 11;
  $715 = $713 | $714;
  $716 = $712 ^ $715;
  $717 = $690 << 7;
  $718 = $690 >>> 25;
  $719 = $717 | $718;
  $720 = $716 ^ $719;
  $721 = $690 & $635;
  $722 = $690 ^ -1;
  $723 = $580 & $722;
  $724 = $721 ^ $723;
  $725 = (($709) + 1925078388)|0;
  $726 = (($725) + ($525))|0;
  $727 = (($726) + ($724))|0;
  $728 = (($727) + ($720))|0;
  $729 = $691 << 30;
  $730 = $691 >>> 2;
  $731 = $729 | $730;
  $732 = $691 << 19;
  $733 = $691 >>> 13;
  $734 = $732 | $733;
  $735 = $731 ^ $734;
  $736 = $691 << 10;
  $737 = $691 >>> 22;
  $738 = $736 | $737;
  $739 = $735 ^ $738;
  $740 = $691 & $636;
  $741 = $691 & $581;
  $742 = $741 ^ $685;
  $743 = $742 ^ $740;
  $744 = (($739) + ($743))|0;
  $745 = (($728) + ($526))|0;
  $746 = (($744) + ($728))|0;
  $747 = ((($data$010)) + 53|0);
  $748 = HEAP8[$706>>0]|0;
  $749 = $748&255;
  $750 = $749 << 24;
  $751 = ((($data$010)) + 54|0);
  $752 = HEAP8[$747>>0]|0;
  $753 = $752&255;
  $754 = $753 << 16;
  $755 = $754 | $750;
  $756 = ((($data$010)) + 55|0);
  $757 = HEAP8[$751>>0]|0;
  $758 = $757&255;
  $759 = $758 << 8;
  $760 = $755 | $759;
  $761 = ((($data$010)) + 56|0);
  $762 = HEAP8[$756>>0]|0;
  $763 = $762&255;
  $764 = $760 | $763;
  HEAP32[$20>>2] = $764;
  $765 = $745 << 26;
  $766 = $745 >>> 6;
  $767 = $765 | $766;
  $768 = $745 << 21;
  $769 = $745 >>> 11;
  $770 = $768 | $769;
  $771 = $767 ^ $770;
  $772 = $745 << 7;
  $773 = $745 >>> 25;
  $774 = $772 | $773;
  $775 = $771 ^ $774;
  $776 = $745 & $690;
  $777 = $745 ^ -1;
  $778 = $635 & $777;
  $779 = $776 ^ $778;
  $780 = (($764) + -2132889090)|0;
  $781 = (($780) + ($580))|0;
  $782 = (($781) + ($779))|0;
  $783 = (($782) + ($775))|0;
  $784 = $746 << 30;
  $785 = $746 >>> 2;
  $786 = $784 | $785;
  $787 = $746 << 19;
  $788 = $746 >>> 13;
  $789 = $787 | $788;
  $790 = $786 ^ $789;
  $791 = $746 << 10;
  $792 = $746 >>> 22;
  $793 = $791 | $792;
  $794 = $790 ^ $793;
  $795 = $746 & $691;
  $796 = $746 & $636;
  $797 = $796 ^ $740;
  $798 = $797 ^ $795;
  $799 = (($794) + ($798))|0;
  $800 = (($783) + ($581))|0;
  $801 = (($799) + ($783))|0;
  $802 = ((($data$010)) + 57|0);
  $803 = HEAP8[$761>>0]|0;
  $804 = $803&255;
  $805 = $804 << 24;
  $806 = ((($data$010)) + 58|0);
  $807 = HEAP8[$802>>0]|0;
  $808 = $807&255;
  $809 = $808 << 16;
  $810 = $809 | $805;
  $811 = ((($data$010)) + 59|0);
  $812 = HEAP8[$806>>0]|0;
  $813 = $812&255;
  $814 = $813 << 8;
  $815 = $810 | $814;
  $816 = ((($data$010)) + 60|0);
  $817 = HEAP8[$811>>0]|0;
  $818 = $817&255;
  $819 = $815 | $818;
  HEAP32[$21>>2] = $819;
  $820 = $800 << 26;
  $821 = $800 >>> 6;
  $822 = $820 | $821;
  $823 = $800 << 21;
  $824 = $800 >>> 11;
  $825 = $823 | $824;
  $826 = $822 ^ $825;
  $827 = $800 << 7;
  $828 = $800 >>> 25;
  $829 = $827 | $828;
  $830 = $826 ^ $829;
  $831 = $800 & $745;
  $832 = $800 ^ -1;
  $833 = $690 & $832;
  $834 = $831 ^ $833;
  $835 = (($819) + -1680079193)|0;
  $836 = (($835) + ($635))|0;
  $837 = (($836) + ($834))|0;
  $838 = (($837) + ($830))|0;
  $839 = $801 << 30;
  $840 = $801 >>> 2;
  $841 = $839 | $840;
  $842 = $801 << 19;
  $843 = $801 >>> 13;
  $844 = $842 | $843;
  $845 = $841 ^ $844;
  $846 = $801 << 10;
  $847 = $801 >>> 22;
  $848 = $846 | $847;
  $849 = $845 ^ $848;
  $850 = $801 & $746;
  $851 = $801 & $691;
  $852 = $851 ^ $795;
  $853 = $852 ^ $850;
  $854 = (($849) + ($853))|0;
  $855 = (($838) + ($636))|0;
  $856 = (($854) + ($838))|0;
  $857 = ((($data$010)) + 61|0);
  $858 = HEAP8[$816>>0]|0;
  $859 = $858&255;
  $860 = $859 << 24;
  $861 = ((($data$010)) + 62|0);
  $862 = HEAP8[$857>>0]|0;
  $863 = $862&255;
  $864 = $863 << 16;
  $865 = $864 | $860;
  $866 = ((($data$010)) + 63|0);
  $867 = HEAP8[$861>>0]|0;
  $868 = $867&255;
  $869 = $868 << 8;
  $870 = $865 | $869;
  $871 = HEAP8[$866>>0]|0;
  $872 = $871&255;
  $873 = $870 | $872;
  HEAP32[$22>>2] = $873;
  $874 = $855 << 26;
  $875 = $855 >>> 6;
  $876 = $874 | $875;
  $877 = $855 << 21;
  $878 = $855 >>> 11;
  $879 = $877 | $878;
  $880 = $876 ^ $879;
  $881 = $855 << 7;
  $882 = $855 >>> 25;
  $883 = $881 | $882;
  $884 = $880 ^ $883;
  $885 = $855 & $800;
  $886 = $855 ^ -1;
  $887 = $745 & $886;
  $888 = $885 ^ $887;
  $889 = (($873) + -1046744716)|0;
  $890 = (($889) + ($690))|0;
  $891 = (($890) + ($888))|0;
  $892 = (($891) + ($884))|0;
  $893 = $856 << 30;
  $894 = $856 >>> 2;
  $895 = $893 | $894;
  $896 = $856 << 19;
  $897 = $856 >>> 13;
  $898 = $896 | $897;
  $899 = $895 ^ $898;
  $900 = $856 << 10;
  $901 = $856 >>> 22;
  $902 = $900 | $901;
  $903 = $899 ^ $902;
  $904 = $801 ^ $746;
  $905 = $856 & $904;
  $906 = $905 ^ $850;
  $907 = (($903) + ($906))|0;
  $908 = (($907) + ($892))|0;
  $909 = (($892) + ($691))|0;
  $a$19 = $908;$b$17 = $856;$c$16 = $801;$d$11 = $746;$e$12 = $909;$f$13 = $855;$g$14 = $800;$h$15 = $745;$i$08 = 16;
  while(1) {
   $910 = $i$08 | 1;
   $911 = $910 & 9;
   $912 = (($X) + ($911<<2)|0);
   $913 = HEAP32[$912>>2]|0;
   $914 = $913 << 25;
   $915 = $913 >>> 7;
   $916 = $914 | $915;
   $917 = $913 << 14;
   $918 = $913 >>> 18;
   $919 = $917 | $918;
   $920 = $913 >>> 3;
   $921 = $919 ^ $920;
   $922 = $921 ^ $916;
   $923 = (($i$08) + 14)|0;
   $924 = $923 & 14;
   $925 = (($X) + ($924<<2)|0);
   $926 = HEAP32[$925>>2]|0;
   $927 = $926 << 15;
   $928 = $926 >>> 17;
   $929 = $927 | $928;
   $930 = $926 << 13;
   $931 = $926 >>> 19;
   $932 = $930 | $931;
   $933 = $926 >>> 10;
   $934 = $932 ^ $933;
   $935 = $934 ^ $929;
   $936 = (($i$08) + 9)|0;
   $937 = $936 & 9;
   $938 = (($X) + ($937<<2)|0);
   $939 = HEAP32[$938>>2]|0;
   $940 = $i$08 & 8;
   $941 = (($X) + ($940<<2)|0);
   $942 = HEAP32[$941>>2]|0;
   $943 = (($942) + ($939))|0;
   $944 = (($943) + ($922))|0;
   $945 = (($944) + ($935))|0;
   HEAP32[$941>>2] = $945;
   $946 = $e$12 << 26;
   $947 = $e$12 >>> 6;
   $948 = $946 | $947;
   $949 = $e$12 << 21;
   $950 = $e$12 >>> 11;
   $951 = $949 | $950;
   $952 = $948 ^ $951;
   $953 = $e$12 << 7;
   $954 = $e$12 >>> 25;
   $955 = $953 | $954;
   $956 = $952 ^ $955;
   $957 = (($956) + ($h$15))|0;
   $958 = $f$13 & $e$12;
   $959 = $e$12 ^ -1;
   $960 = $g$14 & $959;
   $961 = $960 ^ $958;
   $962 = (($957) + ($961))|0;
   $963 = (49748 + ($i$08<<2)|0);
   $964 = HEAP32[$963>>2]|0;
   $965 = (($962) + ($964))|0;
   $966 = (($965) + ($945))|0;
   $967 = $a$19 << 30;
   $968 = $a$19 >>> 2;
   $969 = $967 | $968;
   $970 = $a$19 << 19;
   $971 = $a$19 >>> 13;
   $972 = $970 | $971;
   $973 = $969 ^ $972;
   $974 = $a$19 << 10;
   $975 = $a$19 >>> 22;
   $976 = $974 | $975;
   $977 = $973 ^ $976;
   $978 = $a$19 & $b$17;
   $979 = $a$19 ^ $b$17;
   $980 = $979 & $c$16;
   $981 = $980 ^ $978;
   $982 = (($977) + ($981))|0;
   $983 = (($966) + ($d$11))|0;
   $984 = (($982) + ($966))|0;
   $985 = (($910) + 1)|0;
   $986 = $985 & 11;
   $987 = (($X) + ($986<<2)|0);
   $988 = HEAP32[$987>>2]|0;
   $989 = $988 << 25;
   $990 = $988 >>> 7;
   $991 = $989 | $990;
   $992 = $988 << 14;
   $993 = $988 >>> 18;
   $994 = $992 | $993;
   $995 = $988 >>> 3;
   $996 = $994 ^ $995;
   $997 = $996 ^ $991;
   $998 = (($910) + 14)|0;
   $999 = $998 & 15;
   $1000 = (($X) + ($999<<2)|0);
   $1001 = HEAP32[$1000>>2]|0;
   $1002 = $1001 << 15;
   $1003 = $1001 >>> 17;
   $1004 = $1002 | $1003;
   $1005 = $1001 << 13;
   $1006 = $1001 >>> 19;
   $1007 = $1005 | $1006;
   $1008 = $1001 >>> 10;
   $1009 = $1007 ^ $1008;
   $1010 = $1009 ^ $1004;
   $1011 = (($910) + 9)|0;
   $1012 = $1011 & 11;
   $1013 = (($X) + ($1012<<2)|0);
   $1014 = HEAP32[$1013>>2]|0;
   $1015 = HEAP32[$912>>2]|0;
   $1016 = (($1015) + ($1014))|0;
   $1017 = (($1016) + ($997))|0;
   $1018 = (($1017) + ($1010))|0;
   HEAP32[$912>>2] = $1018;
   $1019 = $983 << 26;
   $1020 = $983 >>> 6;
   $1021 = $1019 | $1020;
   $1022 = $983 << 21;
   $1023 = $983 >>> 11;
   $1024 = $1022 | $1023;
   $1025 = $1021 ^ $1024;
   $1026 = $983 << 7;
   $1027 = $983 >>> 25;
   $1028 = $1026 | $1027;
   $1029 = $1025 ^ $1028;
   $1030 = $983 & $e$12;
   $1031 = $983 ^ -1;
   $1032 = $f$13 & $1031;
   $1033 = $1030 ^ $1032;
   $1034 = (49748 + ($910<<2)|0);
   $1035 = HEAP32[$1034>>2]|0;
   $1036 = (($1035) + ($g$14))|0;
   $1037 = (($1036) + ($1033))|0;
   $1038 = (($1037) + ($1018))|0;
   $1039 = (($1038) + ($1029))|0;
   $1040 = $984 << 30;
   $1041 = $984 >>> 2;
   $1042 = $1040 | $1041;
   $1043 = $984 << 19;
   $1044 = $984 >>> 13;
   $1045 = $1043 | $1044;
   $1046 = $1042 ^ $1045;
   $1047 = $984 << 10;
   $1048 = $984 >>> 22;
   $1049 = $1047 | $1048;
   $1050 = $1046 ^ $1049;
   $1051 = $984 & $a$19;
   $1052 = $984 & $b$17;
   $1053 = $1052 ^ $978;
   $1054 = $1053 ^ $1051;
   $1055 = (($1050) + ($1054))|0;
   $1056 = (($1039) + ($c$16))|0;
   $1057 = (($1055) + ($1039))|0;
   $1058 = $i$08 | 2;
   $1059 = $940 | 3;
   $1060 = (($X) + ($1059<<2)|0);
   $1061 = HEAP32[$1060>>2]|0;
   $1062 = $1061 << 25;
   $1063 = $1061 >>> 7;
   $1064 = $1062 | $1063;
   $1065 = $1061 << 14;
   $1066 = $1061 >>> 18;
   $1067 = $1065 | $1066;
   $1068 = $1061 >>> 3;
   $1069 = $1067 ^ $1068;
   $1070 = $1069 ^ $1064;
   $1071 = (($1058) + 14)|0;
   $1072 = $1071 & 14;
   $1073 = (($X) + ($1072<<2)|0);
   $1074 = HEAP32[$1073>>2]|0;
   $1075 = $1074 << 15;
   $1076 = $1074 >>> 17;
   $1077 = $1075 | $1076;
   $1078 = $1074 << 13;
   $1079 = $1074 >>> 19;
   $1080 = $1078 | $1079;
   $1081 = $1074 >>> 10;
   $1082 = $1080 ^ $1081;
   $1083 = $1082 ^ $1077;
   $1084 = (($1058) + 9)|0;
   $1085 = $1084 & 11;
   $1086 = (($X) + ($1085<<2)|0);
   $1087 = HEAP32[$1086>>2]|0;
   $1088 = $1058 & 10;
   $1089 = (($X) + ($1088<<2)|0);
   $1090 = HEAP32[$1089>>2]|0;
   $1091 = (($1090) + ($1087))|0;
   $1092 = (($1091) + ($1070))|0;
   $1093 = (($1092) + ($1083))|0;
   HEAP32[$1089>>2] = $1093;
   $1094 = $1056 << 26;
   $1095 = $1056 >>> 6;
   $1096 = $1094 | $1095;
   $1097 = $1056 << 21;
   $1098 = $1056 >>> 11;
   $1099 = $1097 | $1098;
   $1100 = $1096 ^ $1099;
   $1101 = $1056 << 7;
   $1102 = $1056 >>> 25;
   $1103 = $1101 | $1102;
   $1104 = $1100 ^ $1103;
   $1105 = $1056 & $983;
   $1106 = $1056 ^ -1;
   $1107 = $e$12 & $1106;
   $1108 = $1105 ^ $1107;
   $1109 = (49748 + ($1058<<2)|0);
   $1110 = HEAP32[$1109>>2]|0;
   $1111 = (($1110) + ($f$13))|0;
   $1112 = (($1111) + ($1093))|0;
   $1113 = (($1112) + ($1108))|0;
   $1114 = (($1113) + ($1104))|0;
   $1115 = $1057 << 30;
   $1116 = $1057 >>> 2;
   $1117 = $1115 | $1116;
   $1118 = $1057 << 19;
   $1119 = $1057 >>> 13;
   $1120 = $1118 | $1119;
   $1121 = $1117 ^ $1120;
   $1122 = $1057 << 10;
   $1123 = $1057 >>> 22;
   $1124 = $1122 | $1123;
   $1125 = $1121 ^ $1124;
   $1126 = $1057 & $984;
   $1127 = $1057 & $a$19;
   $1128 = $1127 ^ $1051;
   $1129 = $1128 ^ $1126;
   $1130 = (($1125) + ($1129))|0;
   $1131 = (($1114) + ($b$17))|0;
   $1132 = (($1130) + ($1114))|0;
   $1133 = $i$08 | 3;
   $1134 = (($1133) + 1)|0;
   $1135 = $1134 & 15;
   $1136 = (($X) + ($1135<<2)|0);
   $1137 = HEAP32[$1136>>2]|0;
   $1138 = $1137 << 25;
   $1139 = $1137 >>> 7;
   $1140 = $1138 | $1139;
   $1141 = $1137 << 14;
   $1142 = $1137 >>> 18;
   $1143 = $1141 | $1142;
   $1144 = $1137 >>> 3;
   $1145 = $1143 ^ $1144;
   $1146 = $1145 ^ $1140;
   $1147 = (($1133) + 14)|0;
   $1148 = $1147 & 15;
   $1149 = (($X) + ($1148<<2)|0);
   $1150 = HEAP32[$1149>>2]|0;
   $1151 = $1150 << 15;
   $1152 = $1150 >>> 17;
   $1153 = $1151 | $1152;
   $1154 = $1150 << 13;
   $1155 = $1150 >>> 19;
   $1156 = $1154 | $1155;
   $1157 = $1150 >>> 10;
   $1158 = $1156 ^ $1157;
   $1159 = $1158 ^ $1153;
   $1160 = (($1133) + 9)|0;
   $1161 = $1160 & 15;
   $1162 = (($X) + ($1161<<2)|0);
   $1163 = HEAP32[$1162>>2]|0;
   $1164 = $1133 & 11;
   $1165 = (($X) + ($1164<<2)|0);
   $1166 = HEAP32[$1165>>2]|0;
   $1167 = (($1166) + ($1163))|0;
   $1168 = (($1167) + ($1146))|0;
   $1169 = (($1168) + ($1159))|0;
   HEAP32[$1165>>2] = $1169;
   $1170 = $1131 << 26;
   $1171 = $1131 >>> 6;
   $1172 = $1170 | $1171;
   $1173 = $1131 << 21;
   $1174 = $1131 >>> 11;
   $1175 = $1173 | $1174;
   $1176 = $1172 ^ $1175;
   $1177 = $1131 << 7;
   $1178 = $1131 >>> 25;
   $1179 = $1177 | $1178;
   $1180 = $1176 ^ $1179;
   $1181 = $1131 & $1056;
   $1182 = $1131 ^ -1;
   $1183 = $983 & $1182;
   $1184 = $1181 ^ $1183;
   $1185 = (49748 + ($1133<<2)|0);
   $1186 = HEAP32[$1185>>2]|0;
   $1187 = (($1186) + ($e$12))|0;
   $1188 = (($1187) + ($1169))|0;
   $1189 = (($1188) + ($1184))|0;
   $1190 = (($1189) + ($1180))|0;
   $1191 = $1132 << 30;
   $1192 = $1132 >>> 2;
   $1193 = $1191 | $1192;
   $1194 = $1132 << 19;
   $1195 = $1132 >>> 13;
   $1196 = $1194 | $1195;
   $1197 = $1193 ^ $1196;
   $1198 = $1132 << 10;
   $1199 = $1132 >>> 22;
   $1200 = $1198 | $1199;
   $1201 = $1197 ^ $1200;
   $1202 = $1132 & $1057;
   $1203 = $1132 & $984;
   $1204 = $1203 ^ $1126;
   $1205 = $1204 ^ $1202;
   $1206 = (($1201) + ($1205))|0;
   $1207 = (($1190) + ($a$19))|0;
   $1208 = (($1206) + ($1190))|0;
   $1209 = $i$08 | 4;
   $1210 = $940 | 5;
   $1211 = (($X) + ($1210<<2)|0);
   $1212 = HEAP32[$1211>>2]|0;
   $1213 = $1212 << 25;
   $1214 = $1212 >>> 7;
   $1215 = $1213 | $1214;
   $1216 = $1212 << 14;
   $1217 = $1212 >>> 18;
   $1218 = $1216 | $1217;
   $1219 = $1212 >>> 3;
   $1220 = $1218 ^ $1219;
   $1221 = $1220 ^ $1215;
   $1222 = (($1209) + 14)|0;
   $1223 = $1222 & 14;
   $1224 = (($X) + ($1223<<2)|0);
   $1225 = HEAP32[$1224>>2]|0;
   $1226 = $1225 << 15;
   $1227 = $1225 >>> 17;
   $1228 = $1226 | $1227;
   $1229 = $1225 << 13;
   $1230 = $1225 >>> 19;
   $1231 = $1229 | $1230;
   $1232 = $1225 >>> 10;
   $1233 = $1231 ^ $1232;
   $1234 = $1233 ^ $1228;
   $1235 = (($1209) + 9)|0;
   $1236 = $1235 & 13;
   $1237 = (($X) + ($1236<<2)|0);
   $1238 = HEAP32[$1237>>2]|0;
   $1239 = $1209 & 12;
   $1240 = (($X) + ($1239<<2)|0);
   $1241 = HEAP32[$1240>>2]|0;
   $1242 = (($1241) + ($1238))|0;
   $1243 = (($1242) + ($1221))|0;
   $1244 = (($1243) + ($1234))|0;
   HEAP32[$1240>>2] = $1244;
   $1245 = $1207 << 26;
   $1246 = $1207 >>> 6;
   $1247 = $1245 | $1246;
   $1248 = $1207 << 21;
   $1249 = $1207 >>> 11;
   $1250 = $1248 | $1249;
   $1251 = $1247 ^ $1250;
   $1252 = $1207 << 7;
   $1253 = $1207 >>> 25;
   $1254 = $1252 | $1253;
   $1255 = $1251 ^ $1254;
   $1256 = $1207 & $1131;
   $1257 = $1207 ^ -1;
   $1258 = $1056 & $1257;
   $1259 = $1256 ^ $1258;
   $1260 = (49748 + ($1209<<2)|0);
   $1261 = HEAP32[$1260>>2]|0;
   $1262 = (($1261) + ($983))|0;
   $1263 = (($1262) + ($1244))|0;
   $1264 = (($1263) + ($1259))|0;
   $1265 = (($1264) + ($1255))|0;
   $1266 = $1208 << 30;
   $1267 = $1208 >>> 2;
   $1268 = $1266 | $1267;
   $1269 = $1208 << 19;
   $1270 = $1208 >>> 13;
   $1271 = $1269 | $1270;
   $1272 = $1268 ^ $1271;
   $1273 = $1208 << 10;
   $1274 = $1208 >>> 22;
   $1275 = $1273 | $1274;
   $1276 = $1272 ^ $1275;
   $1277 = $1208 & $1132;
   $1278 = $1208 & $1057;
   $1279 = $1278 ^ $1202;
   $1280 = $1279 ^ $1277;
   $1281 = (($1276) + ($1280))|0;
   $1282 = (($1265) + ($984))|0;
   $1283 = (($1281) + ($1265))|0;
   $1284 = $i$08 | 5;
   $1285 = (($1284) + 1)|0;
   $1286 = $1285 & 15;
   $1287 = (($X) + ($1286<<2)|0);
   $1288 = HEAP32[$1287>>2]|0;
   $1289 = $1288 << 25;
   $1290 = $1288 >>> 7;
   $1291 = $1289 | $1290;
   $1292 = $1288 << 14;
   $1293 = $1288 >>> 18;
   $1294 = $1292 | $1293;
   $1295 = $1288 >>> 3;
   $1296 = $1294 ^ $1295;
   $1297 = $1296 ^ $1291;
   $1298 = (($1284) + 14)|0;
   $1299 = $1298 & 15;
   $1300 = (($X) + ($1299<<2)|0);
   $1301 = HEAP32[$1300>>2]|0;
   $1302 = $1301 << 15;
   $1303 = $1301 >>> 17;
   $1304 = $1302 | $1303;
   $1305 = $1301 << 13;
   $1306 = $1301 >>> 19;
   $1307 = $1305 | $1306;
   $1308 = $1301 >>> 10;
   $1309 = $1307 ^ $1308;
   $1310 = $1309 ^ $1304;
   $1311 = (($1284) + 9)|0;
   $1312 = $1311 & 15;
   $1313 = (($X) + ($1312<<2)|0);
   $1314 = HEAP32[$1313>>2]|0;
   $1315 = $1284 & 13;
   $1316 = (($X) + ($1315<<2)|0);
   $1317 = HEAP32[$1316>>2]|0;
   $1318 = (($1317) + ($1314))|0;
   $1319 = (($1318) + ($1297))|0;
   $1320 = (($1319) + ($1310))|0;
   HEAP32[$1316>>2] = $1320;
   $1321 = $1282 << 26;
   $1322 = $1282 >>> 6;
   $1323 = $1321 | $1322;
   $1324 = $1282 << 21;
   $1325 = $1282 >>> 11;
   $1326 = $1324 | $1325;
   $1327 = $1323 ^ $1326;
   $1328 = $1282 << 7;
   $1329 = $1282 >>> 25;
   $1330 = $1328 | $1329;
   $1331 = $1327 ^ $1330;
   $1332 = $1282 & $1207;
   $1333 = $1282 ^ -1;
   $1334 = $1131 & $1333;
   $1335 = $1332 ^ $1334;
   $1336 = (49748 + ($1284<<2)|0);
   $1337 = HEAP32[$1336>>2]|0;
   $1338 = (($1337) + ($1056))|0;
   $1339 = (($1338) + ($1320))|0;
   $1340 = (($1339) + ($1335))|0;
   $1341 = (($1340) + ($1331))|0;
   $1342 = $1283 << 30;
   $1343 = $1283 >>> 2;
   $1344 = $1342 | $1343;
   $1345 = $1283 << 19;
   $1346 = $1283 >>> 13;
   $1347 = $1345 | $1346;
   $1348 = $1344 ^ $1347;
   $1349 = $1283 << 10;
   $1350 = $1283 >>> 22;
   $1351 = $1349 | $1350;
   $1352 = $1348 ^ $1351;
   $1353 = $1283 & $1208;
   $1354 = $1283 & $1132;
   $1355 = $1354 ^ $1277;
   $1356 = $1355 ^ $1353;
   $1357 = (($1352) + ($1356))|0;
   $1358 = (($1341) + ($1057))|0;
   $1359 = (($1357) + ($1341))|0;
   $1360 = $i$08 | 6;
   $1361 = $940 | 7;
   $1362 = (($X) + ($1361<<2)|0);
   $1363 = HEAP32[$1362>>2]|0;
   $1364 = $1363 << 25;
   $1365 = $1363 >>> 7;
   $1366 = $1364 | $1365;
   $1367 = $1363 << 14;
   $1368 = $1363 >>> 18;
   $1369 = $1367 | $1368;
   $1370 = $1363 >>> 3;
   $1371 = $1369 ^ $1370;
   $1372 = $1371 ^ $1366;
   $1373 = (($1360) + 14)|0;
   $1374 = $1373 & 14;
   $1375 = (($X) + ($1374<<2)|0);
   $1376 = HEAP32[$1375>>2]|0;
   $1377 = $1376 << 15;
   $1378 = $1376 >>> 17;
   $1379 = $1377 | $1378;
   $1380 = $1376 << 13;
   $1381 = $1376 >>> 19;
   $1382 = $1380 | $1381;
   $1383 = $1376 >>> 10;
   $1384 = $1382 ^ $1383;
   $1385 = $1384 ^ $1379;
   $1386 = (($1360) + 9)|0;
   $1387 = $1386 & 15;
   $1388 = (($X) + ($1387<<2)|0);
   $1389 = HEAP32[$1388>>2]|0;
   $1390 = $1360 & 14;
   $1391 = (($X) + ($1390<<2)|0);
   $1392 = HEAP32[$1391>>2]|0;
   $1393 = (($1392) + ($1389))|0;
   $1394 = (($1393) + ($1372))|0;
   $1395 = (($1394) + ($1385))|0;
   HEAP32[$1391>>2] = $1395;
   $1396 = $1358 << 26;
   $1397 = $1358 >>> 6;
   $1398 = $1396 | $1397;
   $1399 = $1358 << 21;
   $1400 = $1358 >>> 11;
   $1401 = $1399 | $1400;
   $1402 = $1398 ^ $1401;
   $1403 = $1358 << 7;
   $1404 = $1358 >>> 25;
   $1405 = $1403 | $1404;
   $1406 = $1402 ^ $1405;
   $1407 = $1358 & $1282;
   $1408 = $1358 ^ -1;
   $1409 = $1207 & $1408;
   $1410 = $1407 ^ $1409;
   $1411 = (49748 + ($1360<<2)|0);
   $1412 = HEAP32[$1411>>2]|0;
   $1413 = (($1412) + ($1131))|0;
   $1414 = (($1413) + ($1395))|0;
   $1415 = (($1414) + ($1410))|0;
   $1416 = (($1415) + ($1406))|0;
   $1417 = $1359 << 30;
   $1418 = $1359 >>> 2;
   $1419 = $1417 | $1418;
   $1420 = $1359 << 19;
   $1421 = $1359 >>> 13;
   $1422 = $1420 | $1421;
   $1423 = $1419 ^ $1422;
   $1424 = $1359 << 10;
   $1425 = $1359 >>> 22;
   $1426 = $1424 | $1425;
   $1427 = $1423 ^ $1426;
   $1428 = $1359 & $1283;
   $1429 = $1359 & $1208;
   $1430 = $1429 ^ $1353;
   $1431 = $1430 ^ $1428;
   $1432 = (($1427) + ($1431))|0;
   $1433 = (($1416) + ($1132))|0;
   $1434 = (($1432) + ($1416))|0;
   $1435 = $i$08 | 7;
   $1436 = (($1435) + 1)|0;
   $1437 = $1436 & 15;
   $1438 = (($X) + ($1437<<2)|0);
   $1439 = HEAP32[$1438>>2]|0;
   $1440 = $1439 << 25;
   $1441 = $1439 >>> 7;
   $1442 = $1440 | $1441;
   $1443 = $1439 << 14;
   $1444 = $1439 >>> 18;
   $1445 = $1443 | $1444;
   $1446 = $1439 >>> 3;
   $1447 = $1445 ^ $1446;
   $1448 = $1447 ^ $1442;
   $1449 = (($1435) + 14)|0;
   $1450 = $1449 & 15;
   $1451 = (($X) + ($1450<<2)|0);
   $1452 = HEAP32[$1451>>2]|0;
   $1453 = $1452 << 15;
   $1454 = $1452 >>> 17;
   $1455 = $1453 | $1454;
   $1456 = $1452 << 13;
   $1457 = $1452 >>> 19;
   $1458 = $1456 | $1457;
   $1459 = $1452 >>> 10;
   $1460 = $1458 ^ $1459;
   $1461 = $1460 ^ $1455;
   $1462 = (($1435) + 9)|0;
   $1463 = $1462 & 15;
   $1464 = (($X) + ($1463<<2)|0);
   $1465 = HEAP32[$1464>>2]|0;
   $1466 = $1435 & 15;
   $1467 = (($X) + ($1466<<2)|0);
   $1468 = HEAP32[$1467>>2]|0;
   $1469 = (($1468) + ($1465))|0;
   $1470 = (($1469) + ($1448))|0;
   $1471 = (($1470) + ($1461))|0;
   HEAP32[$1467>>2] = $1471;
   $1472 = $1433 << 26;
   $1473 = $1433 >>> 6;
   $1474 = $1472 | $1473;
   $1475 = $1433 << 21;
   $1476 = $1433 >>> 11;
   $1477 = $1475 | $1476;
   $1478 = $1474 ^ $1477;
   $1479 = $1433 << 7;
   $1480 = $1433 >>> 25;
   $1481 = $1479 | $1480;
   $1482 = $1478 ^ $1481;
   $1483 = $1433 & $1358;
   $1484 = $1433 ^ -1;
   $1485 = $1282 & $1484;
   $1486 = $1483 ^ $1485;
   $1487 = (49748 + ($1435<<2)|0);
   $1488 = HEAP32[$1487>>2]|0;
   $1489 = (($1488) + ($1207))|0;
   $1490 = (($1489) + ($1471))|0;
   $1491 = (($1490) + ($1486))|0;
   $1492 = (($1491) + ($1482))|0;
   $1493 = $1434 << 30;
   $1494 = $1434 >>> 2;
   $1495 = $1493 | $1494;
   $1496 = $1434 << 19;
   $1497 = $1434 >>> 13;
   $1498 = $1496 | $1497;
   $1499 = $1495 ^ $1498;
   $1500 = $1434 << 10;
   $1501 = $1434 >>> 22;
   $1502 = $1500 | $1501;
   $1503 = $1499 ^ $1502;
   $1504 = $1359 ^ $1283;
   $1505 = $1434 & $1504;
   $1506 = $1505 ^ $1428;
   $1507 = (($1503) + ($1506))|0;
   $1508 = (($1492) + ($1208))|0;
   $1509 = (($1507) + ($1492))|0;
   $1510 = (($i$08) + 8)|0;
   $1511 = ($1510|0)<(64);
   if ($1511) {
    $a$19 = $1509;$b$17 = $1434;$c$16 = $1359;$d$11 = $1283;$e$12 = $1508;$f$13 = $1433;$g$14 = $1358;$h$15 = $1282;$i$08 = $1510;
   } else {
    $$lcssa = $1282;$$lcssa46 = $1283;$$lcssa47 = $1358;$$lcssa48 = $1359;$$lcssa49 = $1433;$$lcssa50 = $1434;$$lcssa51 = $1508;$$lcssa52 = $1509;
    break;
   }
  }
  $1512 = (($$in) + -1)|0;
  $1513 = ((($data$010)) + 64|0);
  $1514 = HEAP32[$ctx>>2]|0;
  $1515 = (($1514) + ($$lcssa52))|0;
  HEAP32[$ctx>>2] = $1515;
  $1516 = HEAP32[$1>>2]|0;
  $1517 = (($1516) + ($$lcssa50))|0;
  HEAP32[$1>>2] = $1517;
  $1518 = HEAP32[$2>>2]|0;
  $1519 = (($1518) + ($$lcssa48))|0;
  HEAP32[$2>>2] = $1519;
  $1520 = HEAP32[$3>>2]|0;
  $1521 = (($1520) + ($$lcssa46))|0;
  HEAP32[$3>>2] = $1521;
  $1522 = HEAP32[$4>>2]|0;
  $1523 = (($1522) + ($$lcssa51))|0;
  HEAP32[$4>>2] = $1523;
  $1524 = HEAP32[$5>>2]|0;
  $1525 = (($1524) + ($$lcssa49))|0;
  HEAP32[$5>>2] = $1525;
  $1526 = HEAP32[$6>>2]|0;
  $1527 = (($1526) + ($$lcssa47))|0;
  HEAP32[$6>>2] = $1527;
  $1528 = HEAP32[$7>>2]|0;
  $1529 = (($1528) + ($$lcssa))|0;
  HEAP32[$7>>2] = $1529;
  $1530 = ($1512|0)==(0);
  if ($1530) {
   break;
  } else {
   $$in = $1512;$42 = $1523;$54 = $1525;$57 = $1527;$60 = $1529;$65 = $1515;$77 = $1517;$79 = $1519;$85 = $1521;$data$010 = $1513;
  }
 }
 STACKTOP = sp;return;
}
function _BN_add($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$b = 0, $b$a = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $14 = (_BN_uadd($r,$a,$b)|0);
  $15 = ((($r)) + 12|0);
  HEAP32[$15>>2] = $1;
  $$0 = $14;
  return ($$0|0);
 }
 $5 = ($1|0)==(0);
 $b$a = $5 ? $b : $a;
 $a$b = $5 ? $a : $b;
 $6 = (_BN_ucmp($a$b,$b$a)|0);
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = (_BN_usub($r,$b$a,$a$b)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
  $10 = ((($r)) + 12|0);
  HEAP32[$10>>2] = 1;
  $$0 = 1;
  return ($$0|0);
 } else {
  $11 = (_BN_usub($r,$a$b,$b$a)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = 0;
   return ($$0|0);
  }
  $13 = ((($r)) + 12|0);
  HEAP32[$13>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_usub($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $ap$017 = 0, $ap$1 = 0, $ap$2 = 0, $ap$311 = 0, $bp$018 = 0, $carry$021 = 0, $carry$1 = 0, $carry$1$v = 0, $dif$0 = 0, $dif$1 = 0, $dif$210 = 0, $ftl$06 = 0, $i$020 = 0, $not$ = 0, $or$cond = 0;
 var $or$cond38 = 0, $rp$019 = 0, $rp$1 = 0, $rp$2 = 0, $rp$312 = 0, $scevgep = 0, $scevgep33 = 0, $t1$0 = 0, $tmp_top$0$lcssa = 0, $tmp_top$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4|0)<(0);
 if ($5) {
  _ERR_put_error(3,115,100,89380,183);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($r)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($1|0)>($7|0);
 if ($8) {
  $9 = (_bn_expand2($r,$1)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $11 = HEAP32[$a>>2]|0;
 $12 = HEAP32[$r>>2]|0;
 $13 = ($3|0)==(0);
 if ($13) {
  $ap$2 = $11;$dif$1 = $4;$rp$2 = $12;
 } else {
  $14 = HEAP32[$b>>2]|0;
  $scevgep = (($12) + ($3<<2)|0);
  $ap$017 = $11;$bp$018 = $14;$carry$021 = 0;$i$020 = $3;$rp$019 = $12;
  while(1) {
   $15 = ((($ap$017)) + 4|0);
   $16 = HEAP32[$ap$017>>2]|0;
   $17 = ((($bp$018)) + 4|0);
   $18 = HEAP32[$bp$018>>2]|0;
   $19 = ($carry$021|0)==(0);
   $20 = ($16>>>0)<=($18>>>0);
   $21 = ($16>>>0)<($18>>>0);
   $not$ = $19 ^ 1;
   $22 = $not$ << 31 >> 31;
   $$pn = (($16) + ($22))|0;
   $carry$1$v = $19 ? $21 : $20;
   $carry$1 = $carry$1$v&1;
   $t1$0 = (($$pn) - ($18))|0;
   $23 = ((($rp$019)) + 4|0);
   HEAP32[$rp$019>>2] = $t1$0;
   $24 = (($i$020) + -1)|0;
   $25 = ($24|0)==(0);
   if ($25) {
    break;
   } else {
    $ap$017 = $15;$bp$018 = $17;$carry$021 = $carry$1;$i$020 = $24;$rp$019 = $23;
   }
  }
  $scevgep33 = (($11) + ($3<<2)|0);
  if ($carry$1$v) {
   $26 = ($1|0)==($3|0);
   if ($26) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $ap$1 = $scevgep33;$dif$0 = $4;$rp$1 = $scevgep;
    while(1) {
     $27 = (($dif$0) + -1)|0;
     $28 = ((($ap$1)) + 4|0);
     $29 = HEAP32[$ap$1>>2]|0;
     $30 = (($29) + -1)|0;
     $31 = ((($rp$1)) + 4|0);
     HEAP32[$rp$1>>2] = $30;
     $32 = ($29|0)==(0);
     $33 = ($27|0)!=(0);
     $or$cond = $33 & $32;
     if ($or$cond) {
      $ap$1 = $28;$dif$0 = $27;$rp$1 = $31;
     } else {
      $ap$2 = $28;$dif$1 = $27;$rp$2 = $31;
      break;
     }
    }
   }
  } else {
   $ap$2 = $scevgep33;$dif$1 = $4;$rp$2 = $scevgep;
  }
 }
 $34 = ($rp$2|0)==($ap$2|0);
 $35 = ($dif$1|0)==(0);
 $or$cond38 = $34 | $35;
 L20: do {
  if (!($or$cond38)) {
   $ap$311 = $ap$2;$dif$210 = $dif$1;$rp$312 = $rp$2;
   while(1) {
    $36 = HEAP32[$ap$311>>2]|0;
    HEAP32[$rp$312>>2] = $36;
    $37 = ($dif$210|0)==(1);
    if ($37) {
     break L20;
    }
    $38 = ((($ap$311)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($rp$312)) + 4|0);
    HEAP32[$40>>2] = $39;
    $41 = ($dif$210|0)==(2);
    if ($41) {
     break L20;
    }
    $42 = ((($ap$311)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($rp$312)) + 8|0);
    HEAP32[$44>>2] = $43;
    $45 = ($dif$210|0)==(3);
    if ($45) {
     break L20;
    }
    $46 = (($dif$210) + -4)|0;
    $47 = ((($ap$311)) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($rp$312)) + 12|0);
    HEAP32[$49>>2] = $48;
    $50 = ((($rp$312)) + 16|0);
    $51 = ((($ap$311)) + 16|0);
    $52 = ($46|0)==(0);
    if ($52) {
     break;
    } else {
     $ap$311 = $51;$dif$210 = $46;$rp$312 = $50;
    }
   }
  }
 } while(0);
 $53 = ((($r)) + 4|0);
 HEAP32[$53>>2] = $1;
 $54 = ((($r)) + 12|0);
 HEAP32[$54>>2] = 0;
 $55 = ($1|0)>(0);
 if (!($55)) {
  $$0 = 1;
  return ($$0|0);
 }
 $56 = (($1) + -1)|0;
 $57 = (($12) + ($56<<2)|0);
 $ftl$06 = $57;$tmp_top$07 = $1;
 while(1) {
  $58 = HEAP32[$ftl$06>>2]|0;
  $59 = ($58|0)==(0);
  if (!($59)) {
   $tmp_top$0$lcssa = $tmp_top$07;
   break;
  }
  $60 = ((($ftl$06)) + -4|0);
  $61 = (($tmp_top$07) + -1)|0;
  $62 = ($tmp_top$07|0)>(1);
  if ($62) {
   $ftl$06 = $60;$tmp_top$07 = $61;
  } else {
   $tmp_top$0$lcssa = $61;
   break;
  }
 }
 HEAP32[$53>>2] = $tmp_top$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _BN_uadd($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a$b = 0, $ap$0 = 0, $ap$2 = 0, $ap$310 = 0, $b$a = 0, $dif$0 = 0, $dif$2 = 0, $dif$311 = 0, $or$cond = 0, $rp$0 = 0, $rp$0$lcssa = 0, $rp$2 = 0, $rp$312 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 $a$b = $4 ? $a : $b;
 $b$a = $4 ? $b : $a;
 $5 = ((($b$a)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($a$b)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) - ($8))|0;
 $10 = ((($r)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($6|0)<($11|0);
 if (!($12)) {
  $13 = (($6) + 1)|0;
  $14 = (_bn_expand2($r,$13)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $16 = ((($r)) + 4|0);
 HEAP32[$16>>2] = $6;
 $17 = HEAP32[$b$a>>2]|0;
 $18 = HEAP32[$a$b>>2]|0;
 $19 = HEAP32[$r>>2]|0;
 $20 = (_bn_add_words($19,$17,$18,$8)|0);
 $21 = (($19) + ($8<<2)|0);
 $22 = (($17) + ($8<<2)|0);
 $23 = ($20|0)==(0);
 L5: do {
  if ($23) {
   $ap$2 = $22;$dif$2 = $9;$rp$2 = $21;
   label = 7;
  } else {
   $ap$0 = $22;$dif$0 = $9;$rp$0 = $21;
   while(1) {
    $24 = ($dif$0|0)==(0);
    if ($24) {
     $rp$0$lcssa = $rp$0;
     break;
    }
    $25 = (($dif$0) + -1)|0;
    $26 = ((($ap$0)) + 4|0);
    $27 = HEAP32[$ap$0>>2]|0;
    $28 = (($27) + 1)|0;
    $29 = ((($rp$0)) + 4|0);
    HEAP32[$rp$0>>2] = $28;
    $30 = ($28|0)==(0);
    if ($30) {
     $ap$0 = $26;$dif$0 = $25;$rp$0 = $29;
    } else {
     $ap$2 = $26;$dif$2 = $25;$rp$2 = $29;
     label = 7;
     break L5;
    }
   }
   HEAP32[$rp$0$lcssa>>2] = 1;
   $31 = HEAP32[$16>>2]|0;
   $32 = (($31) + 1)|0;
   HEAP32[$16>>2] = $32;
  }
 } while(0);
 if ((label|0) == 7) {
  $33 = ($dif$2|0)==(0);
  $34 = ($rp$2|0)==($ap$2|0);
  $or$cond = $33 | $34;
  if (!($or$cond)) {
   $ap$310 = $ap$2;$dif$311 = $dif$2;$rp$312 = $rp$2;
   while(1) {
    $35 = (($dif$311) + -1)|0;
    $36 = ((($ap$310)) + 4|0);
    $37 = HEAP32[$ap$310>>2]|0;
    $38 = ((($rp$312)) + 4|0);
    HEAP32[$rp$312>>2] = $37;
    $39 = ($35|0)==(0);
    if ($39) {
     break;
    } else {
     $ap$310 = $36;$dif$311 = $35;$rp$312 = $38;
    }
   }
  }
 }
 $40 = ((($r)) + 12|0);
 HEAP32[$40>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _BN_sub($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$026 = 0, $$027 = 0, $$3 = 0, $$5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$b = 0, $b$a = 0, $neg$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = ((($b)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($2) {
  if ($5) {
   $$018 = $a;$$026 = $b;$neg$010 = 0;
   label = 4;
  } else {
   $$019 = $a;$$027 = $b;
  }
 } else {
  $a$b = $5 ? $a : $b;
  $b$a = $5 ? $b : $a;
  $6 = $5&1;
  $$3 = $6 ^ 1;
  if ($5) {
   $$019 = $b$a;$$027 = $a$b;
  } else {
   $$018 = $b$a;$$026 = $a$b;$neg$010 = $$3;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $7 = (_BN_uadd($r,$$018,$$026)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
  $9 = ((($r)) + 12|0);
  HEAP32[$9>>2] = $neg$010;
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ((($$019)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($$027)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)>($13|0);
 $$5 = $14 ? $11 : $13;
 $15 = ((($r)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($$5|0)>($16|0);
 if ($17) {
  $18 = (_bn_expand2($r,$$5)|0);
  $19 = ($18|0)==(0|0);
  if ($19) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $20 = (_BN_ucmp($$019,$$027)|0);
 $21 = ($20|0)<(0);
 if ($21) {
  $22 = (_BN_usub($r,$$027,$$019)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $$0 = 0;
   return ($$0|0);
  }
  $24 = ((($r)) + 12|0);
  HEAP32[$24>>2] = 1;
  $$0 = 1;
  return ($$0|0);
 } else {
  $25 = (_BN_usub($r,$$019,$$027)|0);
  $26 = ($25|0)==(0);
  if ($26) {
   $$0 = 0;
   return ($$0|0);
  }
  $27 = ((($r)) + 12|0);
  HEAP32[$27>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _bn_mul_add_words($rp,$ap,$num,$w) {
 $rp = $rp|0;
 $ap = $ap|0;
 $num = $num|0;
 $w = $w|0;
 var $$0 = 0, $$01$lcssa25 = 0, $$0114 = 0, $$02$lcssa26 = 0, $$0213 = 0, $$04$lcssa27 = 0, $$0412 = 0, $$110 = 0, $$139 = 0, $$158 = 0, $$lcssa32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $c1$0$lcssa28 = 0, $c1$011 = 0, $c1$17 = 0, $scevgep = 0, $scevgep24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)<(1);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($num>>>0)>(3);
 if ($1) {
  $2 = (($num) + -4)|0;
  $3 = $2 & -4;
  $4 = (($3) + 4)|0;
  $scevgep = (($rp) + ($4<<2)|0);
  $$0114 = $rp;$$0213 = $ap;$$0412 = $num;$c1$011 = 0;
  while(1) {
   $7 = HEAP32[$$0213>>2]|0;
   $8 = (___muldi3(($7|0),0,($w|0),0)|0);
   $9 = tempRet0;
   $10 = HEAP32[$$0114>>2]|0;
   $11 = (_i64Add(($10|0),0,($c1$011|0),0)|0);
   $12 = tempRet0;
   $13 = (_i64Add(($11|0),($12|0),($8|0),($9|0))|0);
   $14 = tempRet0;
   HEAP32[$$0114>>2] = $13;
   $15 = ((($$0213)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (___muldi3(($16|0),0,($w|0),0)|0);
   $18 = tempRet0;
   $19 = ((($$0114)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_i64Add(($17|0),($18|0),($20|0),0)|0);
   $22 = tempRet0;
   $23 = (_i64Add(($21|0),($22|0),($14|0),0)|0);
   $24 = tempRet0;
   HEAP32[$19>>2] = $23;
   $25 = ((($$0213)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (___muldi3(($26|0),0,($w|0),0)|0);
   $28 = tempRet0;
   $29 = ((($$0114)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_i64Add(($27|0),($28|0),($30|0),0)|0);
   $32 = tempRet0;
   $33 = (_i64Add(($31|0),($32|0),($24|0),0)|0);
   $34 = tempRet0;
   HEAP32[$29>>2] = $33;
   $35 = ((($$0213)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (___muldi3(($36|0),0,($w|0),0)|0);
   $38 = tempRet0;
   $39 = ((($$0114)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_i64Add(($37|0),($38|0),($40|0),0)|0);
   $42 = tempRet0;
   $43 = (_i64Add(($41|0),($42|0),($34|0),0)|0);
   $44 = tempRet0;
   HEAP32[$39>>2] = $43;
   $45 = ((($$0213)) + 16|0);
   $46 = ((($$0114)) + 16|0);
   $47 = (($$0412) + -4)|0;
   $48 = ($47>>>0)>(3);
   if ($48) {
    $$0114 = $46;$$0213 = $45;$$0412 = $47;$c1$011 = $44;
   } else {
    $$lcssa32 = $44;
    break;
   }
  }
  $5 = (($2) - ($3))|0;
  $scevgep24 = (($ap) + ($4<<2)|0);
  $6 = ($2|0)==($3|0);
  if ($6) {
   $$0 = $$lcssa32;
   return ($$0|0);
  } else {
   $$01$lcssa25 = $scevgep;$$02$lcssa26 = $scevgep24;$$04$lcssa27 = $5;$c1$0$lcssa28 = $$lcssa32;
  }
 } else {
  $$01$lcssa25 = $rp;$$02$lcssa26 = $ap;$$04$lcssa27 = $num;$c1$0$lcssa28 = 0;
 }
 $$110 = $$01$lcssa25;$$139 = $$02$lcssa26;$$158 = $$04$lcssa27;$c1$17 = $c1$0$lcssa28;
 while(1) {
  $49 = HEAP32[$$139>>2]|0;
  $50 = (___muldi3(($49|0),0,($w|0),0)|0);
  $51 = tempRet0;
  $52 = HEAP32[$$110>>2]|0;
  $53 = (_i64Add(($52|0),0,($c1$17|0),0)|0);
  $54 = tempRet0;
  $55 = (_i64Add(($53|0),($54|0),($50|0),($51|0))|0);
  $56 = tempRet0;
  HEAP32[$$110>>2] = $55;
  $57 = ((($$139)) + 4|0);
  $58 = ((($$110)) + 4|0);
  $59 = (($$158) + -1)|0;
  $60 = ($59|0)==(0);
  if ($60) {
   $$0 = $56;
   break;
  } else {
   $$110 = $58;$$139 = $57;$$158 = $59;$c1$17 = $56;
  }
 }
 return ($$0|0);
}
function _bn_mul_words($rp,$ap,$num,$w) {
 $rp = $rp|0;
 $ap = $ap|0;
 $num = $num|0;
 $w = $w|0;
 var $$0 = 0, $$01$lcssa25 = 0, $$0114 = 0, $$02$lcssa26 = 0, $$0213 = 0, $$04$lcssa27 = 0, $$0412 = 0, $$110 = 0, $$139 = 0, $$158 = 0, $$lcssa32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c1$0$lcssa28 = 0, $c1$011 = 0, $c1$17 = 0;
 var $scevgep = 0, $scevgep24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)<(1);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($num>>>0)>(3);
 if ($1) {
  $2 = (($num) + -4)|0;
  $3 = $2 & -4;
  $4 = (($3) + 4)|0;
  $scevgep = (($rp) + ($4<<2)|0);
  $$0114 = $rp;$$0213 = $ap;$$0412 = $num;$c1$011 = 0;
  while(1) {
   $7 = HEAP32[$$0213>>2]|0;
   $8 = (___muldi3(($7|0),0,($w|0),0)|0);
   $9 = tempRet0;
   $10 = (_i64Add(($8|0),($9|0),($c1$011|0),0)|0);
   $11 = tempRet0;
   HEAP32[$$0114>>2] = $10;
   $12 = ((($$0213)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (___muldi3(($13|0),0,($w|0),0)|0);
   $15 = tempRet0;
   $16 = (_i64Add(($11|0),0,($14|0),($15|0))|0);
   $17 = tempRet0;
   $18 = ((($$0114)) + 4|0);
   HEAP32[$18>>2] = $16;
   $19 = ((($$0213)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (___muldi3(($20|0),0,($w|0),0)|0);
   $22 = tempRet0;
   $23 = (_i64Add(($17|0),0,($21|0),($22|0))|0);
   $24 = tempRet0;
   $25 = ((($$0114)) + 8|0);
   HEAP32[$25>>2] = $23;
   $26 = ((($$0213)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (___muldi3(($27|0),0,($w|0),0)|0);
   $29 = tempRet0;
   $30 = (_i64Add(($24|0),0,($28|0),($29|0))|0);
   $31 = tempRet0;
   $32 = ((($$0114)) + 12|0);
   HEAP32[$32>>2] = $30;
   $33 = ((($$0213)) + 16|0);
   $34 = ((($$0114)) + 16|0);
   $35 = (($$0412) + -4)|0;
   $36 = ($35>>>0)>(3);
   if ($36) {
    $$0114 = $34;$$0213 = $33;$$0412 = $35;$c1$011 = $31;
   } else {
    $$lcssa32 = $31;
    break;
   }
  }
  $5 = (($2) - ($3))|0;
  $scevgep24 = (($ap) + ($4<<2)|0);
  $6 = ($2|0)==($3|0);
  if ($6) {
   $$0 = $$lcssa32;
   return ($$0|0);
  } else {
   $$01$lcssa25 = $scevgep;$$02$lcssa26 = $scevgep24;$$04$lcssa27 = $5;$c1$0$lcssa28 = $$lcssa32;
  }
 } else {
  $$01$lcssa25 = $rp;$$02$lcssa26 = $ap;$$04$lcssa27 = $num;$c1$0$lcssa28 = 0;
 }
 $$110 = $$01$lcssa25;$$139 = $$02$lcssa26;$$158 = $$04$lcssa27;$c1$17 = $c1$0$lcssa28;
 while(1) {
  $37 = HEAP32[$$139>>2]|0;
  $38 = (___muldi3(($37|0),0,($w|0),0)|0);
  $39 = tempRet0;
  $40 = (_i64Add(($38|0),($39|0),($c1$17|0),0)|0);
  $41 = tempRet0;
  HEAP32[$$110>>2] = $40;
  $42 = ((($$139)) + 4|0);
  $43 = ((($$110)) + 4|0);
  $44 = (($$158) + -1)|0;
  $45 = ($44|0)==(0);
  if ($45) {
   $$0 = $41;
   break;
  } else {
   $$110 = $43;$$139 = $42;$$158 = $44;$c1$17 = $41;
  }
 }
 return ($$0|0);
}
function _bn_sqr_words($r,$a,$n) {
 $r = $r|0;
 $a = $a|0;
 $n = $n|0;
 var $$011 = 0, $$0110 = 0, $$039 = 0, $$127 = 0, $$146 = 0, $$18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(1);
 if ($0) {
  return;
 }
 $1 = ($n>>>0)>(3);
 if ($1) {
  $2 = (($n) + -4)|0;
  $3 = $2 >>> 2;
  $4 = $3 << 2;
  $5 = $3 << 3;
  $6 = (($5) + 8)|0;
  $7 = (($4) + 4)|0;
  $$011 = $r;$$0110 = $a;$$039 = $n;
  while(1) {
   $10 = HEAP32[$$0110>>2]|0;
   $11 = (___muldi3(($10|0),0,($10|0),0)|0);
   $12 = tempRet0;
   HEAP32[$$011>>2] = $11;
   $13 = ((($$011)) + 4|0);
   HEAP32[$13>>2] = $12;
   $14 = ((($$0110)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (___muldi3(($15|0),0,($15|0),0)|0);
   $17 = tempRet0;
   $18 = ((($$011)) + 8|0);
   HEAP32[$18>>2] = $16;
   $19 = ((($$011)) + 12|0);
   HEAP32[$19>>2] = $17;
   $20 = ((($$0110)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (___muldi3(($21|0),0,($21|0),0)|0);
   $23 = tempRet0;
   $24 = ((($$011)) + 16|0);
   HEAP32[$24>>2] = $22;
   $25 = ((($$011)) + 20|0);
   HEAP32[$25>>2] = $23;
   $26 = ((($$0110)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (___muldi3(($27|0),0,($27|0),0)|0);
   $29 = tempRet0;
   $30 = ((($$011)) + 24|0);
   HEAP32[$30>>2] = $28;
   $31 = ((($$011)) + 28|0);
   HEAP32[$31>>2] = $29;
   $32 = ((($$0110)) + 16|0);
   $33 = ((($$011)) + 32|0);
   $34 = (($$039) + -4)|0;
   $35 = ($34>>>0)>(3);
   if ($35) {
    $$011 = $33;$$0110 = $32;$$039 = $34;
   } else {
    break;
   }
  }
  $8 = (($2) - ($4))|0;
  $scevgep = (($r) + ($6<<2)|0);
  $scevgep17 = (($a) + ($7<<2)|0);
  $9 = ($2|0)==($4|0);
  if ($9) {
   return;
  } else {
   $$127 = $scevgep17;$$146 = $8;$$18 = $scevgep;
  }
 } else {
  $$127 = $a;$$146 = $n;$$18 = $r;
 }
 while(1) {
  $36 = HEAP32[$$127>>2]|0;
  $37 = (___muldi3(($36|0),0,($36|0),0)|0);
  $38 = tempRet0;
  HEAP32[$$18>>2] = $37;
  $39 = ((($$18)) + 4|0);
  HEAP32[$39>>2] = $38;
  $40 = ((($$127)) + 4|0);
  $41 = ((($$18)) + 8|0);
  $42 = (($$146) + -1)|0;
  $43 = ($42|0)==(0);
  if ($43) {
   break;
  } else {
   $$127 = $40;$$146 = $42;$$18 = $41;
  }
 }
 return;
}
function _bn_div_words($h,$l,$d) {
 $h = $h|0;
 $l = $l|0;
 $d = $d|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $h$ = 0, $q$0 = 0, $q$1$lcssa = 0;
 var $q$15 = 0, $q$2 = 0, $q$2$lcssa = 0, $ret$0 = 0, $ret$0$lcssa = 0, $th$0$lcssa = 0, $th$06 = 0, $tl$0$lcssa = 0, $tl$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($d|0)==(0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = (_BN_num_bits_word($d)|0);
 $2 = (32 - ($1))|0;
 $3 = ($h>>>0)<($d>>>0);
 $4 = $3 ? 0 : $d;
 $h$ = (($h) - ($4))|0;
 $5 = ($2|0)==(0);
 if ($5) {
  $$02 = $d;$$03 = $l;$$1 = $h$;
 } else {
  $6 = $d << $2;
  $7 = $h$ << $2;
  $8 = $l >>> $1;
  $9 = $7 | $8;
  $10 = $l << $2;
  $$02 = $6;$$03 = $10;$$1 = $9;
 }
 $11 = $$02 >>> 16;
 $12 = $$02 & 65535;
 $$14 = $$03;$$2 = $$1;$count$0 = 2;$ret$0 = 0;
 while(1) {
  $13 = $$2 >>> 16;
  $14 = ($13|0)==($11|0);
  if ($14) {
   $q$0 = 65535;
  } else {
   $15 = (($$2>>>0) / ($11>>>0))&-1;
   $q$0 = $15;
  }
  $16 = Math_imul($q$0, $11)|0;
  $17 = Math_imul($q$0, $12)|0;
  $18 = (($$2) - ($16))|0;
  $19 = ($18>>>0)>(65535);
  L12: do {
   if ($19) {
    $q$1$lcssa = $q$0;$th$0$lcssa = $16;$tl$0$lcssa = $17;
   } else {
    $20 = $$14 >>> 16;
    $22 = $18;$q$15 = $q$0;$th$06 = $16;$tl$07 = $17;
    while(1) {
     $21 = $22 << 16;
     $23 = $21 | $20;
     $24 = ($tl$07>>>0)>($23>>>0);
     if (!($24)) {
      $q$1$lcssa = $q$15;$th$0$lcssa = $th$06;$tl$0$lcssa = $tl$07;
      break L12;
     }
     $25 = (($q$15) + -1)|0;
     $26 = (($th$06) - ($11))|0;
     $27 = (($tl$07) - ($12))|0;
     $28 = (($$2) - ($26))|0;
     $29 = ($28>>>0)>(65535);
     if ($29) {
      $q$1$lcssa = $25;$th$0$lcssa = $26;$tl$0$lcssa = $27;
      break;
     } else {
      $22 = $28;$q$15 = $25;$th$06 = $26;$tl$07 = $27;
     }
    }
   }
  } while(0);
  $30 = $tl$0$lcssa >>> 16;
  $31 = $tl$0$lcssa << 16;
  $32 = (($30) + ($th$0$lcssa))|0;
  $33 = ($$14>>>0)<($31>>>0);
  $34 = $33&1;
  $$ = (($32) + ($34))|0;
  $35 = (($$14) - ($31))|0;
  $36 = ($$2>>>0)<($$>>>0);
  $37 = $36 << 31 >> 31;
  $q$2 = (($37) + ($q$1$lcssa))|0;
  $38 = (($count$0) + -1)|0;
  $39 = ($38|0)==(0);
  if ($39) {
   $q$2$lcssa = $q$2;$ret$0$lcssa = $ret$0;
   break;
  }
  $40 = $36 ? $$02 : 0;
  $$3 = (($$2) - ($$))|0;
  $41 = (($$3) + ($40))|0;
  $42 = $q$2 << 16;
  $43 = $41 << 16;
  $44 = $35 >>> 16;
  $45 = $43 | $44;
  $46 = $35 << 16;
  $$14 = $46;$$2 = $45;$count$0 = $38;$ret$0 = $42;
 }
 $47 = $q$2$lcssa | $ret$0$lcssa;
 $$0 = $47;
 return ($$0|0);
}
function _bn_add_words($r,$a,$b,$n) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0116 = 0, $$017 = 0, $$0315 = 0, $$0514 = 0, $$07 = 0, $$112 = 0, $$1211 = 0, $$1410 = 0, $$169 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep31 = 0, $scevgep32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(1);
 if ($0) {
  $$07 = 0;
  return ($$07|0);
 }
 $1 = ($n>>>0)>(3);
 if ($1) {
  $2 = (($n) + -4)|0;
  $3 = $2 & -4;
  $4 = (($3) + 4)|0;
  $scevgep31 = (($b) + ($4<<2)|0);
  $$0116 = $b;$$017 = $n;$$0315 = $a;$$0514 = $r;$10 = 0;$9 = 0;
  while(1) {
   $7 = HEAP32[$$0315>>2]|0;
   $8 = HEAP32[$$0116>>2]|0;
   $11 = (_i64Add(($7|0),0,($9|0),($10|0))|0);
   $12 = tempRet0;
   $13 = (_i64Add(($11|0),($12|0),($8|0),0)|0);
   $14 = tempRet0;
   HEAP32[$$0514>>2] = $13;
   $15 = ((($$0315)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($$0116)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_i64Add(($18|0),0,($16|0),0)|0);
   $20 = tempRet0;
   $21 = (_i64Add(($19|0),($20|0),($14|0),0)|0);
   $22 = tempRet0;
   $23 = ((($$0514)) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = ((($$0315)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($$0116)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_i64Add(($27|0),0,($25|0),0)|0);
   $29 = tempRet0;
   $30 = (_i64Add(($28|0),($29|0),($22|0),0)|0);
   $31 = tempRet0;
   $32 = ((($$0514)) + 8|0);
   HEAP32[$32>>2] = $30;
   $33 = ((($$0315)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($$0116)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_i64Add(($36|0),0,($34|0),0)|0);
   $38 = tempRet0;
   $39 = (_i64Add(($37|0),($38|0),($31|0),0)|0);
   $40 = tempRet0;
   $41 = ((($$0514)) + 12|0);
   HEAP32[$41>>2] = $39;
   $42 = ((($$0315)) + 16|0);
   $43 = ((($$0116)) + 16|0);
   $44 = ((($$0514)) + 16|0);
   $45 = (($$017) + -4)|0;
   $46 = ($45>>>0)>(3);
   if ($46) {
    $$0116 = $43;$$017 = $45;$$0315 = $42;$$0514 = $44;$10 = 0;$9 = $40;
   } else {
    $60 = $40;$61 = 0;
    break;
   }
  }
  $5 = (($2) - ($3))|0;
  $scevgep = (($r) + ($4<<2)|0);
  $scevgep32 = (($a) + ($4<<2)|0);
  $6 = ($2|0)==($3|0);
  if ($6) {
   $$07 = $60;
   return ($$07|0);
  } else {
   $$112 = $5;$$1211 = $scevgep31;$$1410 = $scevgep32;$$169 = $scevgep;$49 = $60;$50 = $61;
  }
 } else {
  $$112 = $n;$$1211 = $b;$$1410 = $a;$$169 = $r;$49 = 0;$50 = 0;
 }
 while(1) {
  $47 = HEAP32[$$1410>>2]|0;
  $48 = HEAP32[$$1211>>2]|0;
  $51 = (_i64Add(($47|0),0,($49|0),($50|0))|0);
  $52 = tempRet0;
  $53 = (_i64Add(($51|0),($52|0),($48|0),0)|0);
  $54 = tempRet0;
  HEAP32[$$169>>2] = $53;
  $55 = ((($$1410)) + 4|0);
  $56 = ((($$1211)) + 4|0);
  $57 = ((($$169)) + 4|0);
  $58 = (($$112) + -1)|0;
  $59 = ($58|0)==(0);
  if ($59) {
   $62 = $54;$63 = 0;
   break;
  } else {
   $$112 = $58;$$1211 = $56;$$1410 = $55;$$169 = $57;$49 = $54;$50 = 0;
  }
 }
 $$07 = $62;
 return ($$07|0);
}
function _bn_sub_words($r,$a,$b,$n) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0120 = 0, $$021 = 0, $$0319 = 0, $$0518 = 0, $$07 = 0, $$116 = 0, $$1215 = 0, $$1414 = 0, $$1613 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $c$022 = 0, $c$1 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$4$lcssa = 0, $c$517 = 0, $c$6 = 0, $scevgep = 0, $scevgep32 = 0;
 var $scevgep33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(1);
 if ($0) {
  $$07 = 0;
  return ($$07|0);
 }
 $1 = ($n>>>0)>(3);
 if ($1) {
  $2 = (($n) + -4)|0;
  $3 = $2 & -4;
  $4 = (($3) + 4)|0;
  $scevgep32 = (($b) + ($4<<2)|0);
  $$0120 = $b;$$021 = $n;$$0319 = $a;$$0518 = $r;$c$022 = 0;
  while(1) {
   $7 = HEAP32[$$0319>>2]|0;
   $8 = HEAP32[$$0120>>2]|0;
   $9 = (($7) - ($c$022))|0;
   $10 = (($9) - ($8))|0;
   HEAP32[$$0518>>2] = $10;
   $11 = ($7|0)==($8|0);
   $12 = ($7>>>0)<($8>>>0);
   $13 = $12&1;
   $c$1 = $11 ? $c$022 : $13;
   $14 = ((($$0319)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($$0120)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($15) - ($17))|0;
   $19 = (($18) - ($c$1))|0;
   $20 = ((($$0518)) + 4|0);
   HEAP32[$20>>2] = $19;
   $21 = ($15|0)==($17|0);
   $22 = ($15>>>0)<($17>>>0);
   $23 = $22&1;
   $c$2 = $21 ? $c$1 : $23;
   $24 = ((($$0319)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($$0120)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) - ($27))|0;
   $29 = (($28) - ($c$2))|0;
   $30 = ((($$0518)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = ($25|0)==($27|0);
   $32 = ($25>>>0)<($27>>>0);
   $33 = $32&1;
   $c$3 = $31 ? $c$2 : $33;
   $34 = ((($$0319)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($$0120)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($35) - ($37))|0;
   $39 = (($38) - ($c$3))|0;
   $40 = ((($$0518)) + 12|0);
   HEAP32[$40>>2] = $39;
   $41 = ($35|0)==($37|0);
   $42 = ($35>>>0)<($37>>>0);
   $43 = $42&1;
   $c$4 = $41 ? $c$3 : $43;
   $44 = ((($$0319)) + 16|0);
   $45 = ((($$0120)) + 16|0);
   $46 = ((($$0518)) + 16|0);
   $47 = (($$021) + -4)|0;
   $48 = ($47>>>0)>(3);
   if ($48) {
    $$0120 = $45;$$021 = $47;$$0319 = $44;$$0518 = $46;$c$022 = $c$4;
   } else {
    $c$4$lcssa = $c$4;
    break;
   }
  }
  $5 = (($2) - ($3))|0;
  $scevgep = (($r) + ($4<<2)|0);
  $scevgep33 = (($a) + ($4<<2)|0);
  $6 = ($2|0)==($3|0);
  if ($6) {
   $$07 = $c$4$lcssa;
   return ($$07|0);
  } else {
   $$116 = $5;$$1215 = $scevgep32;$$1414 = $scevgep33;$$1613 = $scevgep;$c$517 = $c$4$lcssa;
  }
 } else {
  $$116 = $n;$$1215 = $b;$$1414 = $a;$$1613 = $r;$c$517 = 0;
 }
 while(1) {
  $49 = HEAP32[$$1414>>2]|0;
  $50 = HEAP32[$$1215>>2]|0;
  $51 = (($49) - ($c$517))|0;
  $52 = (($51) - ($50))|0;
  HEAP32[$$1613>>2] = $52;
  $53 = ($49|0)==($50|0);
  $54 = ($49>>>0)<($50>>>0);
  $55 = $54&1;
  $c$6 = $53 ? $c$517 : $55;
  $56 = ((($$1414)) + 4|0);
  $57 = ((($$1215)) + 4|0);
  $58 = ((($$1613)) + 4|0);
  $59 = (($$116) + -1)|0;
  $60 = ($59|0)==(0);
  if ($60) {
   $$07 = $c$6;
   break;
  } else {
   $$116 = $59;$$1215 = $57;$$1414 = $56;$$1613 = $58;$c$517 = $c$6;
  }
 }
 return ($$07|0);
}
function _bn_mul_comba8($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$36 = 0, $$37 = 0, $$38 = 0, $$39 = 0, $$40 = 0, $$c1$11 = 0, $$c1$13 = 0, $$c1$16 = 0, $$c1$18 = 0, $$c1$2 = 0, $$c1$4 = 0, $$c1$7 = 0, $$c1$9 = 0, $$c2$1 = 0, $$c2$11 = 0, $$c2$13 = 0, $$c2$16 = 0, $$c2$18 = 0, $$c2$4 = 0;
 var $$c2$6 = 0, $$c2$9 = 0, $$c3$1 = 0, $$c3$10 = 0, $$c3$13 = 0, $$c3$15 = 0, $$c3$18 = 0, $$c3$3 = 0, $$c3$6 = 0, $$c3$8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$1 = 0, $c1$11 = 0, $c1$13 = 0, $c1$16 = 0, $c1$18 = 0, $c1$2 = 0, $c1$21 = 0, $c1$4 = 0, $c1$6 = 0, $c1$7 = 0, $c1$9 = 0, $c2$1 = 0;
 var $c2$11 = 0, $c2$13 = 0, $c2$15 = 0, $c2$16 = 0, $c2$18 = 0, $c2$4 = 0, $c2$6 = 0, $c2$8 = 0, $c2$9 = 0, $c3$1 = 0, $c3$10 = 0, $c3$13 = 0, $c3$15 = 0, $c3$17 = 0, $c3$18 = 0, $c3$20 = 0, $c3$3 = 0, $c3$6 = 0, $c3$8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = (___muldi3(($1|0),0,($0|0),0)|0);
 $3 = tempRet0;
 HEAP32[$r>>2] = $2;
 $4 = HEAP32[$a>>2]|0;
 $5 = ((($b)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___muldi3(($6|0),0,($4|0),0)|0);
 $8 = tempRet0;
 $9 = (_i64Add(($7|0),($8|0),($3|0),0)|0);
 $10 = tempRet0;
 $11 = ((($a)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$b>>2]|0;
 $14 = (___muldi3(($13|0),0,($12|0),0)|0);
 $15 = tempRet0;
 $16 = (_i64Add(($14|0),($15|0),($9|0),0)|0);
 $17 = tempRet0;
 $18 = (($17) + ($10))|0;
 $19 = ($18>>>0)<($17>>>0);
 $c1$1 = $19&1;
 $20 = ((($r)) + 4|0);
 HEAP32[$20>>2] = $16;
 $21 = ((($a)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$b>>2]|0;
 $24 = (___muldi3(($23|0),0,($22|0),0)|0);
 $25 = tempRet0;
 $26 = (_i64Add(($18|0),0,($24|0),($25|0))|0);
 $27 = tempRet0;
 $28 = (($27) + ($c1$1))|0;
 $29 = ($28>>>0)<($27>>>0);
 $$ = $29&1;
 $30 = HEAP32[$11>>2]|0;
 $31 = HEAP32[$5>>2]|0;
 $32 = (___muldi3(($31|0),0,($30|0),0)|0);
 $33 = tempRet0;
 (_i64Add(($26|0),0,($32|0),($33|0))|0);
 $34 = tempRet0;
 $35 = (($34) + ($28))|0;
 $36 = ($35>>>0)<($34>>>0);
 $37 = $29 ? 2 : 1;
 $c2$1 = $36 ? $37 : $$;
 $38 = HEAP32[$a>>2]|0;
 $39 = ((($b)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (___muldi3(($40|0),0,($38|0),0)|0);
 $42 = tempRet0;
 $43 = (_i64Add(($26|0),($27|0),($32|0),($33|0))|0);
 $44 = tempRet0;
 $45 = (_i64Add(($43|0),0,($41|0),($42|0))|0);
 $46 = tempRet0;
 $47 = (($35) + ($46))|0;
 $48 = ($47>>>0)<($46>>>0);
 $49 = $48&1;
 $$c2$1 = (($49) + ($c2$1))|0;
 $50 = ((($r)) + 8|0);
 HEAP32[$50>>2] = $45;
 $51 = HEAP32[$a>>2]|0;
 $52 = ((($b)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (___muldi3(($53|0),0,($51|0),0)|0);
 $55 = tempRet0;
 $56 = (_i64Add(($47|0),0,($54|0),($55|0))|0);
 $57 = tempRet0;
 $58 = (($$c2$1) + ($57))|0;
 $59 = ($58>>>0)<($57>>>0);
 $c3$1 = $59&1;
 $60 = HEAP32[$11>>2]|0;
 $61 = HEAP32[$39>>2]|0;
 $62 = (___muldi3(($61|0),0,($60|0),0)|0);
 $63 = tempRet0;
 (_i64Add(($56|0),0,($62|0),($63|0))|0);
 $64 = tempRet0;
 $65 = (($64) + ($58))|0;
 $66 = ($65>>>0)<($64>>>0);
 $67 = $59 ? 2 : 1;
 $$c3$1 = $66 ? $67 : $c3$1;
 $68 = HEAP32[$21>>2]|0;
 $69 = HEAP32[$5>>2]|0;
 $70 = (___muldi3(($69|0),0,($68|0),0)|0);
 $71 = tempRet0;
 $72 = (_i64Add(($56|0),($57|0),($62|0),($63|0))|0);
 $73 = tempRet0;
 (_i64Add(($72|0),0,($70|0),($71|0))|0);
 $74 = tempRet0;
 $75 = (($65) + ($74))|0;
 $76 = ($75>>>0)<($74>>>0);
 $77 = $76&1;
 $c3$3 = (($77) + ($$c3$1))|0;
 $78 = ((($a)) + 12|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[$b>>2]|0;
 $81 = (___muldi3(($80|0),0,($79|0),0)|0);
 $82 = tempRet0;
 $83 = (_i64Add(($72|0),($73|0),($70|0),($71|0))|0);
 $84 = tempRet0;
 $85 = (_i64Add(($83|0),0,($81|0),($82|0))|0);
 $86 = tempRet0;
 $87 = (($75) + ($86))|0;
 $88 = ($87>>>0)<($86>>>0);
 $89 = $88&1;
 $$c3$3 = (($c3$3) + ($89))|0;
 $90 = ((($r)) + 12|0);
 HEAP32[$90>>2] = $85;
 $91 = ((($a)) + 16|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = HEAP32[$b>>2]|0;
 $94 = (___muldi3(($93|0),0,($92|0),0)|0);
 $95 = tempRet0;
 $96 = (_i64Add(($87|0),0,($94|0),($95|0))|0);
 $97 = tempRet0;
 $98 = (($$c3$3) + ($97))|0;
 $99 = ($98>>>0)<($97>>>0);
 $c1$2 = $99&1;
 $100 = HEAP32[$78>>2]|0;
 $101 = HEAP32[$5>>2]|0;
 $102 = (___muldi3(($101|0),0,($100|0),0)|0);
 $103 = tempRet0;
 (_i64Add(($96|0),0,($102|0),($103|0))|0);
 $104 = tempRet0;
 $105 = (($104) + ($98))|0;
 $106 = ($105>>>0)<($104>>>0);
 $107 = $99 ? 2 : 1;
 $$c1$2 = $106 ? $107 : $c1$2;
 $108 = HEAP32[$21>>2]|0;
 $109 = HEAP32[$39>>2]|0;
 $110 = (___muldi3(($109|0),0,($108|0),0)|0);
 $111 = tempRet0;
 $112 = (_i64Add(($96|0),($97|0),($102|0),($103|0))|0);
 $113 = tempRet0;
 (_i64Add(($112|0),0,($110|0),($111|0))|0);
 $114 = tempRet0;
 $115 = (($105) + ($114))|0;
 $116 = ($115>>>0)<($114>>>0);
 $117 = $116&1;
 $c1$4 = (($117) + ($$c1$2))|0;
 $118 = HEAP32[$11>>2]|0;
 $119 = HEAP32[$52>>2]|0;
 $120 = (___muldi3(($119|0),0,($118|0),0)|0);
 $121 = tempRet0;
 $122 = (_i64Add(($112|0),($113|0),($110|0),($111|0))|0);
 $123 = tempRet0;
 (_i64Add(($122|0),0,($120|0),($121|0))|0);
 $124 = tempRet0;
 $125 = (($115) + ($124))|0;
 $126 = ($125>>>0)<($124>>>0);
 $127 = $126&1;
 $$c1$4 = (($c1$4) + ($127))|0;
 $128 = HEAP32[$a>>2]|0;
 $129 = ((($b)) + 16|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (___muldi3(($130|0),0,($128|0),0)|0);
 $132 = tempRet0;
 $133 = (_i64Add(($122|0),($123|0),($120|0),($121|0))|0);
 $134 = tempRet0;
 $135 = (_i64Add(($133|0),0,($131|0),($132|0))|0);
 $136 = tempRet0;
 $137 = (($125) + ($136))|0;
 $138 = ($137>>>0)<($136>>>0);
 $139 = $138&1;
 $c1$6 = (($$c1$4) + ($139))|0;
 $140 = ((($r)) + 16|0);
 HEAP32[$140>>2] = $135;
 $141 = HEAP32[$a>>2]|0;
 $142 = ((($b)) + 20|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (___muldi3(($143|0),0,($141|0),0)|0);
 $145 = tempRet0;
 $146 = (_i64Add(($137|0),0,($144|0),($145|0))|0);
 $147 = tempRet0;
 $148 = (($c1$6) + ($147))|0;
 $149 = ($148>>>0)<($147>>>0);
 $$36 = $149&1;
 $150 = HEAP32[$11>>2]|0;
 $151 = HEAP32[$129>>2]|0;
 $152 = (___muldi3(($151|0),0,($150|0),0)|0);
 $153 = tempRet0;
 (_i64Add(($146|0),0,($152|0),($153|0))|0);
 $154 = tempRet0;
 $155 = (($154) + ($148))|0;
 $156 = ($155>>>0)<($154>>>0);
 $157 = $149 ? 2 : 1;
 $c2$4 = $156 ? $157 : $$36;
 $158 = HEAP32[$21>>2]|0;
 $159 = HEAP32[$52>>2]|0;
 $160 = (___muldi3(($159|0),0,($158|0),0)|0);
 $161 = tempRet0;
 $162 = (_i64Add(($146|0),($147|0),($152|0),($153|0))|0);
 $163 = tempRet0;
 (_i64Add(($162|0),0,($160|0),($161|0))|0);
 $164 = tempRet0;
 $165 = (($155) + ($164))|0;
 $166 = ($165>>>0)<($164>>>0);
 $167 = $166&1;
 $$c2$4 = (($167) + ($c2$4))|0;
 $168 = HEAP32[$78>>2]|0;
 $169 = HEAP32[$39>>2]|0;
 $170 = (___muldi3(($169|0),0,($168|0),0)|0);
 $171 = tempRet0;
 $172 = (_i64Add(($162|0),($163|0),($160|0),($161|0))|0);
 $173 = tempRet0;
 (_i64Add(($172|0),0,($170|0),($171|0))|0);
 $174 = tempRet0;
 $175 = (($165) + ($174))|0;
 $176 = ($175>>>0)<($174>>>0);
 $177 = $176&1;
 $c2$6 = (($$c2$4) + ($177))|0;
 $178 = HEAP32[$91>>2]|0;
 $179 = HEAP32[$5>>2]|0;
 $180 = (___muldi3(($179|0),0,($178|0),0)|0);
 $181 = tempRet0;
 $182 = (_i64Add(($172|0),($173|0),($170|0),($171|0))|0);
 $183 = tempRet0;
 (_i64Add(($182|0),0,($180|0),($181|0))|0);
 $184 = tempRet0;
 $185 = (($175) + ($184))|0;
 $186 = ($185>>>0)<($184>>>0);
 $187 = $186&1;
 $$c2$6 = (($c2$6) + ($187))|0;
 $188 = ((($a)) + 20|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = HEAP32[$b>>2]|0;
 $191 = (___muldi3(($190|0),0,($189|0),0)|0);
 $192 = tempRet0;
 $193 = (_i64Add(($182|0),($183|0),($180|0),($181|0))|0);
 $194 = tempRet0;
 $195 = (_i64Add(($193|0),0,($191|0),($192|0))|0);
 $196 = tempRet0;
 $197 = (($185) + ($196))|0;
 $198 = ($197>>>0)<($196>>>0);
 $199 = $198&1;
 $c2$8 = (($$c2$6) + ($199))|0;
 $200 = ((($r)) + 20|0);
 HEAP32[$200>>2] = $195;
 $201 = ((($a)) + 24|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = HEAP32[$b>>2]|0;
 $204 = (___muldi3(($203|0),0,($202|0),0)|0);
 $205 = tempRet0;
 $206 = (_i64Add(($197|0),0,($204|0),($205|0))|0);
 $207 = tempRet0;
 $208 = (($c2$8) + ($207))|0;
 $209 = ($208>>>0)<($207>>>0);
 $$37 = $209&1;
 $210 = HEAP32[$188>>2]|0;
 $211 = HEAP32[$5>>2]|0;
 $212 = (___muldi3(($211|0),0,($210|0),0)|0);
 $213 = tempRet0;
 (_i64Add(($206|0),0,($212|0),($213|0))|0);
 $214 = tempRet0;
 $215 = (($214) + ($208))|0;
 $216 = ($215>>>0)<($214>>>0);
 $217 = $209 ? 2 : 1;
 $c3$6 = $216 ? $217 : $$37;
 $218 = HEAP32[$91>>2]|0;
 $219 = HEAP32[$39>>2]|0;
 $220 = (___muldi3(($219|0),0,($218|0),0)|0);
 $221 = tempRet0;
 $222 = (_i64Add(($206|0),($207|0),($212|0),($213|0))|0);
 $223 = tempRet0;
 (_i64Add(($222|0),0,($220|0),($221|0))|0);
 $224 = tempRet0;
 $225 = (($215) + ($224))|0;
 $226 = ($225>>>0)<($224>>>0);
 $227 = $226&1;
 $$c3$6 = (($227) + ($c3$6))|0;
 $228 = HEAP32[$78>>2]|0;
 $229 = HEAP32[$52>>2]|0;
 $230 = (___muldi3(($229|0),0,($228|0),0)|0);
 $231 = tempRet0;
 $232 = (_i64Add(($222|0),($223|0),($220|0),($221|0))|0);
 $233 = tempRet0;
 (_i64Add(($232|0),0,($230|0),($231|0))|0);
 $234 = tempRet0;
 $235 = (($225) + ($234))|0;
 $236 = ($235>>>0)<($234>>>0);
 $237 = $236&1;
 $c3$8 = (($$c3$6) + ($237))|0;
 $238 = HEAP32[$21>>2]|0;
 $239 = HEAP32[$129>>2]|0;
 $240 = (___muldi3(($239|0),0,($238|0),0)|0);
 $241 = tempRet0;
 $242 = (_i64Add(($232|0),($233|0),($230|0),($231|0))|0);
 $243 = tempRet0;
 (_i64Add(($242|0),0,($240|0),($241|0))|0);
 $244 = tempRet0;
 $245 = (($235) + ($244))|0;
 $246 = ($245>>>0)<($244>>>0);
 $247 = $246&1;
 $$c3$8 = (($c3$8) + ($247))|0;
 $248 = HEAP32[$11>>2]|0;
 $249 = HEAP32[$142>>2]|0;
 $250 = (___muldi3(($249|0),0,($248|0),0)|0);
 $251 = tempRet0;
 $252 = (_i64Add(($242|0),($243|0),($240|0),($241|0))|0);
 $253 = tempRet0;
 (_i64Add(($252|0),0,($250|0),($251|0))|0);
 $254 = tempRet0;
 $255 = (($245) + ($254))|0;
 $256 = ($255>>>0)<($254>>>0);
 $257 = $256&1;
 $c3$10 = (($$c3$8) + ($257))|0;
 $258 = HEAP32[$a>>2]|0;
 $259 = ((($b)) + 24|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = (___muldi3(($260|0),0,($258|0),0)|0);
 $262 = tempRet0;
 $263 = (_i64Add(($252|0),($253|0),($250|0),($251|0))|0);
 $264 = tempRet0;
 $265 = (_i64Add(($261|0),($262|0),($263|0),0)|0);
 $266 = tempRet0;
 $267 = (($255) + ($266))|0;
 $268 = ($267>>>0)<($266>>>0);
 $269 = $268&1;
 $$c3$10 = (($c3$10) + ($269))|0;
 $270 = ((($r)) + 24|0);
 HEAP32[$270>>2] = $265;
 $271 = HEAP32[$a>>2]|0;
 $272 = ((($b)) + 28|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = (___muldi3(($273|0),0,($271|0),0)|0);
 $275 = tempRet0;
 $276 = (_i64Add(($267|0),0,($274|0),($275|0))|0);
 $277 = tempRet0;
 $278 = (($$c3$10) + ($277))|0;
 $279 = ($278>>>0)<($277>>>0);
 $c1$7 = $279&1;
 $280 = HEAP32[$11>>2]|0;
 $281 = HEAP32[$259>>2]|0;
 $282 = (___muldi3(($281|0),0,($280|0),0)|0);
 $283 = tempRet0;
 (_i64Add(($276|0),0,($282|0),($283|0))|0);
 $284 = tempRet0;
 $285 = (($284) + ($278))|0;
 $286 = ($285>>>0)<($284>>>0);
 $287 = $279 ? 2 : 1;
 $$c1$7 = $286 ? $287 : $c1$7;
 $288 = HEAP32[$21>>2]|0;
 $289 = HEAP32[$142>>2]|0;
 $290 = (___muldi3(($289|0),0,($288|0),0)|0);
 $291 = tempRet0;
 $292 = (_i64Add(($276|0),($277|0),($282|0),($283|0))|0);
 $293 = tempRet0;
 (_i64Add(($292|0),0,($290|0),($291|0))|0);
 $294 = tempRet0;
 $295 = (($285) + ($294))|0;
 $296 = ($295>>>0)<($294>>>0);
 $297 = $296&1;
 $c1$9 = (($297) + ($$c1$7))|0;
 $298 = HEAP32[$78>>2]|0;
 $299 = HEAP32[$129>>2]|0;
 $300 = (___muldi3(($299|0),0,($298|0),0)|0);
 $301 = tempRet0;
 $302 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
 $303 = tempRet0;
 (_i64Add(($302|0),0,($300|0),($301|0))|0);
 $304 = tempRet0;
 $305 = (($295) + ($304))|0;
 $306 = ($305>>>0)<($304>>>0);
 $307 = $306&1;
 $$c1$9 = (($c1$9) + ($307))|0;
 $308 = HEAP32[$91>>2]|0;
 $309 = HEAP32[$52>>2]|0;
 $310 = (___muldi3(($309|0),0,($308|0),0)|0);
 $311 = tempRet0;
 $312 = (_i64Add(($302|0),($303|0),($300|0),($301|0))|0);
 $313 = tempRet0;
 (_i64Add(($310|0),($311|0),($312|0),0)|0);
 $314 = tempRet0;
 $315 = (($305) + ($314))|0;
 $316 = ($315>>>0)<($314>>>0);
 $317 = $316&1;
 $c1$11 = (($$c1$9) + ($317))|0;
 $318 = HEAP32[$188>>2]|0;
 $319 = HEAP32[$39>>2]|0;
 $320 = (___muldi3(($319|0),0,($318|0),0)|0);
 $321 = tempRet0;
 $322 = (_i64Add(($310|0),($311|0),($312|0),($313|0))|0);
 $323 = tempRet0;
 (_i64Add(($320|0),($321|0),($322|0),0)|0);
 $324 = tempRet0;
 $325 = (($324) + ($315))|0;
 $326 = ($325>>>0)<($324>>>0);
 $327 = $326&1;
 $$c1$11 = (($c1$11) + ($327))|0;
 $328 = HEAP32[$201>>2]|0;
 $329 = HEAP32[$5>>2]|0;
 $330 = (___muldi3(($329|0),0,($328|0),0)|0);
 $331 = tempRet0;
 $332 = (_i64Add(($320|0),($321|0),($322|0),($323|0))|0);
 $333 = tempRet0;
 (_i64Add(($330|0),($331|0),($332|0),0)|0);
 $334 = tempRet0;
 $335 = (($334) + ($325))|0;
 $336 = ($335>>>0)<($334>>>0);
 $337 = $336&1;
 $c1$13 = (($$c1$11) + ($337))|0;
 $338 = ((($a)) + 28|0);
 $339 = HEAP32[$338>>2]|0;
 $340 = HEAP32[$b>>2]|0;
 $341 = (___muldi3(($340|0),0,($339|0),0)|0);
 $342 = tempRet0;
 $343 = (_i64Add(($330|0),($331|0),($332|0),($333|0))|0);
 $344 = tempRet0;
 $345 = (_i64Add(($341|0),($342|0),($343|0),0)|0);
 $346 = tempRet0;
 $347 = (($346) + ($335))|0;
 $348 = ($347>>>0)<($346>>>0);
 $349 = $348&1;
 $$c1$13 = (($c1$13) + ($349))|0;
 $350 = ((($r)) + 28|0);
 HEAP32[$350>>2] = $345;
 $351 = HEAP32[$338>>2]|0;
 $352 = HEAP32[$5>>2]|0;
 $353 = (___muldi3(($352|0),0,($351|0),0)|0);
 $354 = tempRet0;
 $355 = (_i64Add(($347|0),0,($353|0),($354|0))|0);
 $356 = tempRet0;
 $357 = (($$c1$13) + ($356))|0;
 $358 = ($357>>>0)<($356>>>0);
 $c2$9 = $358&1;
 $359 = HEAP32[$201>>2]|0;
 $360 = HEAP32[$39>>2]|0;
 $361 = (___muldi3(($360|0),0,($359|0),0)|0);
 $362 = tempRet0;
 (_i64Add(($355|0),0,($361|0),($362|0))|0);
 $363 = tempRet0;
 $364 = (($363) + ($357))|0;
 $365 = ($364>>>0)<($363>>>0);
 $366 = $358 ? 2 : 1;
 $$c2$9 = $365 ? $366 : $c2$9;
 $367 = HEAP32[$188>>2]|0;
 $368 = HEAP32[$52>>2]|0;
 $369 = (___muldi3(($368|0),0,($367|0),0)|0);
 $370 = tempRet0;
 $371 = (_i64Add(($355|0),($356|0),($361|0),($362|0))|0);
 $372 = tempRet0;
 (_i64Add(($371|0),0,($369|0),($370|0))|0);
 $373 = tempRet0;
 $374 = (($364) + ($373))|0;
 $375 = ($374>>>0)<($373>>>0);
 $376 = $375&1;
 $c2$11 = (($376) + ($$c2$9))|0;
 $377 = HEAP32[$91>>2]|0;
 $378 = HEAP32[$129>>2]|0;
 $379 = (___muldi3(($378|0),0,($377|0),0)|0);
 $380 = tempRet0;
 $381 = (_i64Add(($371|0),($372|0),($369|0),($370|0))|0);
 $382 = tempRet0;
 (_i64Add(($381|0),0,($379|0),($380|0))|0);
 $383 = tempRet0;
 $384 = (($374) + ($383))|0;
 $385 = ($384>>>0)<($383>>>0);
 $386 = $385&1;
 $$c2$11 = (($c2$11) + ($386))|0;
 $387 = HEAP32[$78>>2]|0;
 $388 = HEAP32[$142>>2]|0;
 $389 = (___muldi3(($388|0),0,($387|0),0)|0);
 $390 = tempRet0;
 $391 = (_i64Add(($381|0),($382|0),($379|0),($380|0))|0);
 $392 = tempRet0;
 (_i64Add(($389|0),($390|0),($391|0),0)|0);
 $393 = tempRet0;
 $394 = (($384) + ($393))|0;
 $395 = ($394>>>0)<($393>>>0);
 $396 = $395&1;
 $c2$13 = (($$c2$11) + ($396))|0;
 $397 = HEAP32[$21>>2]|0;
 $398 = HEAP32[$259>>2]|0;
 $399 = (___muldi3(($398|0),0,($397|0),0)|0);
 $400 = tempRet0;
 $401 = (_i64Add(($389|0),($390|0),($391|0),($392|0))|0);
 $402 = tempRet0;
 (_i64Add(($399|0),($400|0),($401|0),0)|0);
 $403 = tempRet0;
 $404 = (($403) + ($394))|0;
 $405 = ($404>>>0)<($403>>>0);
 $406 = $405&1;
 $$c2$13 = (($c2$13) + ($406))|0;
 $407 = HEAP32[$11>>2]|0;
 $408 = HEAP32[$272>>2]|0;
 $409 = (___muldi3(($408|0),0,($407|0),0)|0);
 $410 = tempRet0;
 $411 = (_i64Add(($399|0),($400|0),($401|0),($402|0))|0);
 $412 = tempRet0;
 $413 = (_i64Add(($409|0),($410|0),($411|0),0)|0);
 $414 = tempRet0;
 $415 = (($414) + ($404))|0;
 $416 = ($415>>>0)<($414>>>0);
 $417 = $416&1;
 $c2$15 = (($$c2$13) + ($417))|0;
 $418 = ((($r)) + 32|0);
 HEAP32[$418>>2] = $413;
 $419 = HEAP32[$21>>2]|0;
 $420 = HEAP32[$272>>2]|0;
 $421 = (___muldi3(($420|0),0,($419|0),0)|0);
 $422 = tempRet0;
 $423 = (_i64Add(($415|0),0,($421|0),($422|0))|0);
 $424 = tempRet0;
 $425 = (($c2$15) + ($424))|0;
 $426 = ($425>>>0)<($424>>>0);
 $$38 = $426&1;
 $427 = HEAP32[$78>>2]|0;
 $428 = HEAP32[$259>>2]|0;
 $429 = (___muldi3(($428|0),0,($427|0),0)|0);
 $430 = tempRet0;
 (_i64Add(($423|0),0,($429|0),($430|0))|0);
 $431 = tempRet0;
 $432 = (($431) + ($425))|0;
 $433 = ($432>>>0)<($431>>>0);
 $434 = $426 ? 2 : 1;
 $c3$13 = $433 ? $434 : $$38;
 $435 = HEAP32[$91>>2]|0;
 $436 = HEAP32[$142>>2]|0;
 $437 = (___muldi3(($436|0),0,($435|0),0)|0);
 $438 = tempRet0;
 $439 = (_i64Add(($423|0),($424|0),($429|0),($430|0))|0);
 $440 = tempRet0;
 (_i64Add(($439|0),0,($437|0),($438|0))|0);
 $441 = tempRet0;
 $442 = (($432) + ($441))|0;
 $443 = ($442>>>0)<($441>>>0);
 $444 = $443&1;
 $$c3$13 = (($444) + ($c3$13))|0;
 $445 = HEAP32[$188>>2]|0;
 $446 = HEAP32[$129>>2]|0;
 $447 = (___muldi3(($446|0),0,($445|0),0)|0);
 $448 = tempRet0;
 $449 = (_i64Add(($439|0),($440|0),($437|0),($438|0))|0);
 $450 = tempRet0;
 (_i64Add(($449|0),0,($447|0),($448|0))|0);
 $451 = tempRet0;
 $452 = (($442) + ($451))|0;
 $453 = ($452>>>0)<($451>>>0);
 $454 = $453&1;
 $c3$15 = (($$c3$13) + ($454))|0;
 $455 = HEAP32[$201>>2]|0;
 $456 = HEAP32[$52>>2]|0;
 $457 = (___muldi3(($456|0),0,($455|0),0)|0);
 $458 = tempRet0;
 $459 = (_i64Add(($449|0),($450|0),($447|0),($448|0))|0);
 $460 = tempRet0;
 (_i64Add(($457|0),($458|0),($459|0),0)|0);
 $461 = tempRet0;
 $462 = (($452) + ($461))|0;
 $463 = ($462>>>0)<($461>>>0);
 $464 = $463&1;
 $$c3$15 = (($c3$15) + ($464))|0;
 $465 = HEAP32[$338>>2]|0;
 $466 = HEAP32[$39>>2]|0;
 $467 = (___muldi3(($466|0),0,($465|0),0)|0);
 $468 = tempRet0;
 $469 = (_i64Add(($457|0),($458|0),($459|0),($460|0))|0);
 $470 = tempRet0;
 $471 = (_i64Add(($467|0),($468|0),($469|0),0)|0);
 $472 = tempRet0;
 $473 = (($472) + ($462))|0;
 $474 = ($473>>>0)<($472>>>0);
 $475 = $474&1;
 $c3$17 = (($$c3$15) + ($475))|0;
 $476 = ((($r)) + 36|0);
 HEAP32[$476>>2] = $471;
 $477 = HEAP32[$338>>2]|0;
 $478 = HEAP32[$52>>2]|0;
 $479 = (___muldi3(($478|0),0,($477|0),0)|0);
 $480 = tempRet0;
 $481 = (_i64Add(($473|0),0,($479|0),($480|0))|0);
 $482 = tempRet0;
 $483 = (($c3$17) + ($482))|0;
 $484 = ($483>>>0)<($482>>>0);
 $$39 = $484&1;
 $485 = HEAP32[$201>>2]|0;
 $486 = HEAP32[$129>>2]|0;
 $487 = (___muldi3(($486|0),0,($485|0),0)|0);
 $488 = tempRet0;
 (_i64Add(($481|0),0,($487|0),($488|0))|0);
 $489 = tempRet0;
 $490 = (($489) + ($483))|0;
 $491 = ($490>>>0)<($489>>>0);
 $492 = $484 ? 2 : 1;
 $c1$16 = $491 ? $492 : $$39;
 $493 = HEAP32[$188>>2]|0;
 $494 = HEAP32[$142>>2]|0;
 $495 = (___muldi3(($494|0),0,($493|0),0)|0);
 $496 = tempRet0;
 $497 = (_i64Add(($481|0),($482|0),($487|0),($488|0))|0);
 $498 = tempRet0;
 (_i64Add(($497|0),0,($495|0),($496|0))|0);
 $499 = tempRet0;
 $500 = (($490) + ($499))|0;
 $501 = ($500>>>0)<($499>>>0);
 $502 = $501&1;
 $$c1$16 = (($502) + ($c1$16))|0;
 $503 = HEAP32[$91>>2]|0;
 $504 = HEAP32[$259>>2]|0;
 $505 = (___muldi3(($504|0),0,($503|0),0)|0);
 $506 = tempRet0;
 $507 = (_i64Add(($497|0),($498|0),($495|0),($496|0))|0);
 $508 = tempRet0;
 (_i64Add(($507|0),0,($505|0),($506|0))|0);
 $509 = tempRet0;
 $510 = (($500) + ($509))|0;
 $511 = ($510>>>0)<($509>>>0);
 $512 = $511&1;
 $c1$18 = (($$c1$16) + ($512))|0;
 $513 = HEAP32[$78>>2]|0;
 $514 = HEAP32[$272>>2]|0;
 $515 = (___muldi3(($514|0),0,($513|0),0)|0);
 $516 = tempRet0;
 $517 = (_i64Add(($507|0),($508|0),($505|0),($506|0))|0);
 $518 = tempRet0;
 $519 = (_i64Add(($515|0),($516|0),($517|0),0)|0);
 $520 = tempRet0;
 $521 = (($510) + ($520))|0;
 $522 = ($521>>>0)<($520>>>0);
 $523 = $522&1;
 $$c1$18 = (($c1$18) + ($523))|0;
 $524 = ((($r)) + 40|0);
 HEAP32[$524>>2] = $519;
 $525 = HEAP32[$91>>2]|0;
 $526 = HEAP32[$272>>2]|0;
 $527 = (___muldi3(($526|0),0,($525|0),0)|0);
 $528 = tempRet0;
 $529 = (_i64Add(($521|0),0,($527|0),($528|0))|0);
 $530 = tempRet0;
 $531 = (($$c1$18) + ($530))|0;
 $532 = ($531>>>0)<($530>>>0);
 $c2$16 = $532&1;
 $533 = HEAP32[$188>>2]|0;
 $534 = HEAP32[$259>>2]|0;
 $535 = (___muldi3(($534|0),0,($533|0),0)|0);
 $536 = tempRet0;
 (_i64Add(($529|0),0,($535|0),($536|0))|0);
 $537 = tempRet0;
 $538 = (($537) + ($531))|0;
 $539 = ($538>>>0)<($537>>>0);
 $540 = $532 ? 2 : 1;
 $$c2$16 = $539 ? $540 : $c2$16;
 $541 = HEAP32[$201>>2]|0;
 $542 = HEAP32[$142>>2]|0;
 $543 = (___muldi3(($542|0),0,($541|0),0)|0);
 $544 = tempRet0;
 $545 = (_i64Add(($529|0),($530|0),($535|0),($536|0))|0);
 $546 = tempRet0;
 (_i64Add(($545|0),0,($543|0),($544|0))|0);
 $547 = tempRet0;
 $548 = (($538) + ($547))|0;
 $549 = ($548>>>0)<($547>>>0);
 $550 = $549&1;
 $c2$18 = (($550) + ($$c2$16))|0;
 $551 = HEAP32[$338>>2]|0;
 $552 = HEAP32[$129>>2]|0;
 $553 = (___muldi3(($552|0),0,($551|0),0)|0);
 $554 = tempRet0;
 $555 = (_i64Add(($545|0),($546|0),($543|0),($544|0))|0);
 $556 = tempRet0;
 $557 = (_i64Add(($555|0),0,($553|0),($554|0))|0);
 $558 = tempRet0;
 $559 = (($548) + ($558))|0;
 $560 = ($559>>>0)<($558>>>0);
 $561 = $560&1;
 $$c2$18 = (($c2$18) + ($561))|0;
 $562 = ((($r)) + 44|0);
 HEAP32[$562>>2] = $557;
 $563 = HEAP32[$338>>2]|0;
 $564 = HEAP32[$142>>2]|0;
 $565 = (___muldi3(($564|0),0,($563|0),0)|0);
 $566 = tempRet0;
 $567 = (_i64Add(($559|0),0,($565|0),($566|0))|0);
 $568 = tempRet0;
 $569 = (($$c2$18) + ($568))|0;
 $570 = ($569>>>0)<($568>>>0);
 $c3$18 = $570&1;
 $571 = HEAP32[$201>>2]|0;
 $572 = HEAP32[$259>>2]|0;
 $573 = (___muldi3(($572|0),0,($571|0),0)|0);
 $574 = tempRet0;
 (_i64Add(($567|0),0,($573|0),($574|0))|0);
 $575 = tempRet0;
 $576 = (($575) + ($569))|0;
 $577 = ($576>>>0)<($575>>>0);
 $578 = $570 ? 2 : 1;
 $$c3$18 = $577 ? $578 : $c3$18;
 $579 = HEAP32[$188>>2]|0;
 $580 = HEAP32[$272>>2]|0;
 $581 = (___muldi3(($580|0),0,($579|0),0)|0);
 $582 = tempRet0;
 $583 = (_i64Add(($567|0),($568|0),($573|0),($574|0))|0);
 $584 = tempRet0;
 $585 = (_i64Add(($583|0),0,($581|0),($582|0))|0);
 $586 = tempRet0;
 $587 = (($576) + ($586))|0;
 $588 = ($587>>>0)<($586>>>0);
 $589 = $588&1;
 $c3$20 = (($589) + ($$c3$18))|0;
 $590 = ((($r)) + 48|0);
 HEAP32[$590>>2] = $585;
 $591 = HEAP32[$201>>2]|0;
 $592 = HEAP32[$272>>2]|0;
 $593 = (___muldi3(($592|0),0,($591|0),0)|0);
 $594 = tempRet0;
 $595 = (_i64Add(($587|0),0,($593|0),($594|0))|0);
 $596 = tempRet0;
 $597 = (($c3$20) + ($596))|0;
 $598 = ($597>>>0)<($596>>>0);
 $$40 = $598&1;
 $599 = HEAP32[$338>>2]|0;
 $600 = HEAP32[$259>>2]|0;
 $601 = (___muldi3(($600|0),0,($599|0),0)|0);
 $602 = tempRet0;
 $603 = (_i64Add(($595|0),0,($601|0),($602|0))|0);
 $604 = tempRet0;
 $605 = (($604) + ($597))|0;
 $606 = ($605>>>0)<($604>>>0);
 $607 = $598 ? 2 : 1;
 $c1$21 = $606 ? $607 : $$40;
 $608 = ((($r)) + 52|0);
 HEAP32[$608>>2] = $603;
 $609 = HEAP32[$338>>2]|0;
 $610 = HEAP32[$272>>2]|0;
 $611 = (___muldi3(($610|0),0,($609|0),0)|0);
 $612 = tempRet0;
 $613 = (_i64Add(($605|0),0,($611|0),($612|0))|0);
 $614 = tempRet0;
 $615 = (($614) + ($c1$21))|0;
 $616 = ((($r)) + 56|0);
 HEAP32[$616>>2] = $613;
 $617 = ((($r)) + 60|0);
 HEAP32[$617>>2] = $615;
 return;
}
function _bn_mul_comba4($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$4 = 0, $$c1$2 = 0, $$c2$1 = 0, $$c3$1 = 0, $$c3$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$1 = 0, $c1$2 = 0, $c1$4 = 0, $c2$1 = 0, $c2$4 = 0, $c3$1 = 0, $c3$3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = (___muldi3(($1|0),0,($0|0),0)|0);
 $3 = tempRet0;
 HEAP32[$r>>2] = $2;
 $4 = HEAP32[$a>>2]|0;
 $5 = ((($b)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___muldi3(($6|0),0,($4|0),0)|0);
 $8 = tempRet0;
 $9 = (_i64Add(($7|0),($8|0),($3|0),0)|0);
 $10 = tempRet0;
 $11 = ((($a)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$b>>2]|0;
 $14 = (___muldi3(($13|0),0,($12|0),0)|0);
 $15 = tempRet0;
 $16 = (_i64Add(($14|0),($15|0),($9|0),0)|0);
 $17 = tempRet0;
 $18 = (($17) + ($10))|0;
 $19 = ($18>>>0)<($17>>>0);
 $c1$1 = $19&1;
 $20 = ((($r)) + 4|0);
 HEAP32[$20>>2] = $16;
 $21 = ((($a)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$b>>2]|0;
 $24 = (___muldi3(($23|0),0,($22|0),0)|0);
 $25 = tempRet0;
 $26 = (_i64Add(($18|0),0,($24|0),($25|0))|0);
 $27 = tempRet0;
 $28 = (($27) + ($c1$1))|0;
 $29 = ($28>>>0)<($27>>>0);
 $$ = $29&1;
 $30 = HEAP32[$11>>2]|0;
 $31 = HEAP32[$5>>2]|0;
 $32 = (___muldi3(($31|0),0,($30|0),0)|0);
 $33 = tempRet0;
 (_i64Add(($26|0),0,($32|0),($33|0))|0);
 $34 = tempRet0;
 $35 = (($34) + ($28))|0;
 $36 = ($35>>>0)<($34>>>0);
 $37 = $29 ? 2 : 1;
 $c2$1 = $36 ? $37 : $$;
 $38 = HEAP32[$a>>2]|0;
 $39 = ((($b)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (___muldi3(($40|0),0,($38|0),0)|0);
 $42 = tempRet0;
 $43 = (_i64Add(($26|0),($27|0),($32|0),($33|0))|0);
 $44 = tempRet0;
 $45 = (_i64Add(($43|0),0,($41|0),($42|0))|0);
 $46 = tempRet0;
 $47 = (($35) + ($46))|0;
 $48 = ($47>>>0)<($46>>>0);
 $49 = $48&1;
 $$c2$1 = (($49) + ($c2$1))|0;
 $50 = ((($r)) + 8|0);
 HEAP32[$50>>2] = $45;
 $51 = HEAP32[$a>>2]|0;
 $52 = ((($b)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (___muldi3(($53|0),0,($51|0),0)|0);
 $55 = tempRet0;
 $56 = (_i64Add(($47|0),0,($54|0),($55|0))|0);
 $57 = tempRet0;
 $58 = (($$c2$1) + ($57))|0;
 $59 = ($58>>>0)<($57>>>0);
 $c3$1 = $59&1;
 $60 = HEAP32[$11>>2]|0;
 $61 = HEAP32[$39>>2]|0;
 $62 = (___muldi3(($61|0),0,($60|0),0)|0);
 $63 = tempRet0;
 (_i64Add(($56|0),0,($62|0),($63|0))|0);
 $64 = tempRet0;
 $65 = (($64) + ($58))|0;
 $66 = ($65>>>0)<($64>>>0);
 $67 = $59 ? 2 : 1;
 $$c3$1 = $66 ? $67 : $c3$1;
 $68 = HEAP32[$21>>2]|0;
 $69 = HEAP32[$5>>2]|0;
 $70 = (___muldi3(($69|0),0,($68|0),0)|0);
 $71 = tempRet0;
 $72 = (_i64Add(($56|0),($57|0),($62|0),($63|0))|0);
 $73 = tempRet0;
 (_i64Add(($72|0),0,($70|0),($71|0))|0);
 $74 = tempRet0;
 $75 = (($65) + ($74))|0;
 $76 = ($75>>>0)<($74>>>0);
 $77 = $76&1;
 $c3$3 = (($77) + ($$c3$1))|0;
 $78 = ((($a)) + 12|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[$b>>2]|0;
 $81 = (___muldi3(($80|0),0,($79|0),0)|0);
 $82 = tempRet0;
 $83 = (_i64Add(($72|0),($73|0),($70|0),($71|0))|0);
 $84 = tempRet0;
 $85 = (_i64Add(($83|0),0,($81|0),($82|0))|0);
 $86 = tempRet0;
 $87 = (($75) + ($86))|0;
 $88 = ($87>>>0)<($86>>>0);
 $89 = $88&1;
 $$c3$3 = (($c3$3) + ($89))|0;
 $90 = ((($r)) + 12|0);
 HEAP32[$90>>2] = $85;
 $91 = HEAP32[$78>>2]|0;
 $92 = HEAP32[$5>>2]|0;
 $93 = (___muldi3(($92|0),0,($91|0),0)|0);
 $94 = tempRet0;
 $95 = (_i64Add(($87|0),0,($93|0),($94|0))|0);
 $96 = tempRet0;
 $97 = (($$c3$3) + ($96))|0;
 $98 = ($97>>>0)<($96>>>0);
 $c1$2 = $98&1;
 $99 = HEAP32[$21>>2]|0;
 $100 = HEAP32[$39>>2]|0;
 $101 = (___muldi3(($100|0),0,($99|0),0)|0);
 $102 = tempRet0;
 (_i64Add(($95|0),0,($101|0),($102|0))|0);
 $103 = tempRet0;
 $104 = (($103) + ($97))|0;
 $105 = ($104>>>0)<($103>>>0);
 $106 = $98 ? 2 : 1;
 $$c1$2 = $105 ? $106 : $c1$2;
 $107 = HEAP32[$11>>2]|0;
 $108 = HEAP32[$52>>2]|0;
 $109 = (___muldi3(($108|0),0,($107|0),0)|0);
 $110 = tempRet0;
 $111 = (_i64Add(($95|0),($96|0),($101|0),($102|0))|0);
 $112 = tempRet0;
 $113 = (_i64Add(($111|0),0,($109|0),($110|0))|0);
 $114 = tempRet0;
 $115 = (($104) + ($114))|0;
 $116 = ($115>>>0)<($114>>>0);
 $117 = $116&1;
 $c1$4 = (($117) + ($$c1$2))|0;
 $118 = ((($r)) + 16|0);
 HEAP32[$118>>2] = $113;
 $119 = HEAP32[$21>>2]|0;
 $120 = HEAP32[$52>>2]|0;
 $121 = (___muldi3(($120|0),0,($119|0),0)|0);
 $122 = tempRet0;
 $123 = (_i64Add(($115|0),0,($121|0),($122|0))|0);
 $124 = tempRet0;
 $125 = (($c1$4) + ($124))|0;
 $126 = ($125>>>0)<($124>>>0);
 $$4 = $126&1;
 $127 = HEAP32[$78>>2]|0;
 $128 = HEAP32[$39>>2]|0;
 $129 = (___muldi3(($128|0),0,($127|0),0)|0);
 $130 = tempRet0;
 $131 = (_i64Add(($123|0),0,($129|0),($130|0))|0);
 $132 = tempRet0;
 $133 = (($132) + ($125))|0;
 $134 = ($133>>>0)<($132>>>0);
 $135 = $126 ? 2 : 1;
 $c2$4 = $134 ? $135 : $$4;
 $136 = ((($r)) + 20|0);
 HEAP32[$136>>2] = $131;
 $137 = HEAP32[$78>>2]|0;
 $138 = HEAP32[$52>>2]|0;
 $139 = (___muldi3(($138|0),0,($137|0),0)|0);
 $140 = tempRet0;
 $141 = (_i64Add(($133|0),0,($139|0),($140|0))|0);
 $142 = tempRet0;
 $143 = (($142) + ($c2$4))|0;
 $144 = ((($r)) + 24|0);
 HEAP32[$144>>2] = $141;
 $145 = ((($r)) + 28|0);
 HEAP32[$145>>2] = $143;
 return;
}
function _bn_sqr_comba8($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$ = 0, $$36 = 0, $$37 = 0, $$38 = 0, $$39 = 0, $$40 = 0, $$c1$11 = 0, $$c1$13 = 0, $$c1$16 = 0, $$c1$18 = 0, $$c1$2 = 0, $$c1$4 = 0, $$c1$7 = 0, $$c1$9 = 0, $$c2$1 = 0, $$c2$11 = 0, $$c2$13 = 0, $$c2$16 = 0, $$c2$18 = 0, $$c2$4 = 0;
 var $$c2$6 = 0, $$c2$9 = 0, $$c3$1 = 0, $$c3$10 = 0, $$c3$13 = 0, $$c3$15 = 0, $$c3$18 = 0, $$c3$3 = 0, $$c3$6 = 0, $$c3$8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c1$1 = 0, $c1$11 = 0, $c1$13 = 0, $c1$16 = 0, $c1$18 = 0, $c1$2 = 0, $c1$21 = 0, $c1$4 = 0, $c1$6 = 0, $c1$7 = 0, $c1$9 = 0, $c2$1 = 0, $c2$11 = 0, $c2$13 = 0, $c2$15 = 0, $c2$16 = 0, $c2$18 = 0, $c2$4 = 0, $c2$6 = 0;
 var $c2$8 = 0, $c2$9 = 0, $c3$1 = 0, $c3$10 = 0, $c3$13 = 0, $c3$15 = 0, $c3$17 = 0, $c3$18 = 0, $c3$20 = 0, $c3$3 = 0, $c3$6 = 0, $c3$8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = (___muldi3(($0|0),0,($0|0),0)|0);
 $2 = tempRet0;
 HEAP32[$r>>2] = $1;
 $3 = ((($a)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$a>>2]|0;
 $6 = (___muldi3(($5|0),0,($4|0),0)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),($2|0),0)|0);
 $9 = tempRet0;
 $10 = (_i64Add(($8|0),0,($6|0),($7|0))|0);
 $11 = tempRet0;
 $12 = (($11) + ($9))|0;
 $13 = ($12>>>0)<($11>>>0);
 $c1$1 = $13&1;
 $14 = ((($r)) + 4|0);
 HEAP32[$14>>2] = $10;
 $15 = HEAP32[$3>>2]|0;
 $16 = (___muldi3(($15|0),0,($15|0),0)|0);
 $17 = tempRet0;
 $18 = (_i64Add(($12|0),0,($16|0),($17|0))|0);
 $19 = tempRet0;
 $20 = (($19) + ($c1$1))|0;
 $21 = ($20>>>0)<($19>>>0);
 $$ = $21&1;
 $22 = ((($a)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$a>>2]|0;
 $25 = (___muldi3(($24|0),0,($23|0),0)|0);
 $26 = tempRet0;
 (_i64Add(($18|0),0,($25|0),($26|0))|0);
 $27 = tempRet0;
 $28 = (($27) + ($20))|0;
 $29 = ($28>>>0)<($27>>>0);
 $30 = $21 ? 2 : 1;
 $c2$1 = $29 ? $30 : $$;
 $31 = (_i64Add(($18|0),($19|0),($25|0),($26|0))|0);
 $32 = tempRet0;
 $33 = (_i64Add(($31|0),0,($25|0),($26|0))|0);
 $34 = tempRet0;
 $35 = (($28) + ($34))|0;
 $36 = ($35>>>0)<($34>>>0);
 $37 = $36&1;
 $$c2$1 = (($37) + ($c2$1))|0;
 $38 = ((($r)) + 8|0);
 HEAP32[$38>>2] = $33;
 $39 = ((($a)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$a>>2]|0;
 $42 = (___muldi3(($41|0),0,($40|0),0)|0);
 $43 = tempRet0;
 $44 = (_i64Add(($35|0),0,($42|0),($43|0))|0);
 $45 = tempRet0;
 $46 = (($$c2$1) + ($45))|0;
 $47 = ($46>>>0)<($45>>>0);
 $c3$1 = $47&1;
 (_i64Add(($44|0),0,($42|0),($43|0))|0);
 $48 = tempRet0;
 $49 = (($48) + ($46))|0;
 $50 = ($49>>>0)<($48>>>0);
 $51 = $47 ? 2 : 1;
 $$c3$1 = $50 ? $51 : $c3$1;
 $52 = HEAP32[$22>>2]|0;
 $53 = HEAP32[$3>>2]|0;
 $54 = (___muldi3(($53|0),0,($52|0),0)|0);
 $55 = tempRet0;
 $56 = (_i64Add(($44|0),($45|0),($42|0),($43|0))|0);
 $57 = tempRet0;
 (_i64Add(($56|0),0,($54|0),($55|0))|0);
 $58 = tempRet0;
 $59 = (($49) + ($58))|0;
 $60 = ($59>>>0)<($58>>>0);
 $61 = $60&1;
 $c3$3 = (($61) + ($$c3$1))|0;
 $62 = (_i64Add(($56|0),($57|0),($54|0),($55|0))|0);
 $63 = tempRet0;
 $64 = (_i64Add(($62|0),0,($54|0),($55|0))|0);
 $65 = tempRet0;
 $66 = (($59) + ($65))|0;
 $67 = ($66>>>0)<($65>>>0);
 $68 = $67&1;
 $$c3$3 = (($c3$3) + ($68))|0;
 $69 = ((($r)) + 12|0);
 HEAP32[$69>>2] = $64;
 $70 = HEAP32[$22>>2]|0;
 $71 = (___muldi3(($70|0),0,($70|0),0)|0);
 $72 = tempRet0;
 $73 = (_i64Add(($66|0),0,($71|0),($72|0))|0);
 $74 = tempRet0;
 $75 = (($$c3$3) + ($74))|0;
 $76 = ($75>>>0)<($74>>>0);
 $c1$2 = $76&1;
 $77 = HEAP32[$39>>2]|0;
 $78 = HEAP32[$3>>2]|0;
 $79 = (___muldi3(($78|0),0,($77|0),0)|0);
 $80 = tempRet0;
 (_i64Add(($73|0),0,($79|0),($80|0))|0);
 $81 = tempRet0;
 $82 = (($81) + ($75))|0;
 $83 = ($82>>>0)<($81>>>0);
 $84 = $76 ? 2 : 1;
 $$c1$2 = $83 ? $84 : $c1$2;
 $85 = (_i64Add(($73|0),($74|0),($79|0),($80|0))|0);
 $86 = tempRet0;
 (_i64Add(($85|0),0,($79|0),($80|0))|0);
 $87 = tempRet0;
 $88 = (($82) + ($87))|0;
 $89 = ($88>>>0)<($87>>>0);
 $90 = $89&1;
 $c1$4 = (($90) + ($$c1$2))|0;
 $91 = ((($a)) + 16|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = HEAP32[$a>>2]|0;
 $94 = (___muldi3(($93|0),0,($92|0),0)|0);
 $95 = tempRet0;
 $96 = (_i64Add(($85|0),($86|0),($79|0),($80|0))|0);
 $97 = tempRet0;
 (_i64Add(($96|0),0,($94|0),($95|0))|0);
 $98 = tempRet0;
 $99 = (($88) + ($98))|0;
 $100 = ($99>>>0)<($98>>>0);
 $101 = $100&1;
 $$c1$4 = (($c1$4) + ($101))|0;
 $102 = (_i64Add(($96|0),($97|0),($94|0),($95|0))|0);
 $103 = tempRet0;
 $104 = (_i64Add(($102|0),0,($94|0),($95|0))|0);
 $105 = tempRet0;
 $106 = (($99) + ($105))|0;
 $107 = ($106>>>0)<($105>>>0);
 $108 = $107&1;
 $c1$6 = (($$c1$4) + ($108))|0;
 $109 = ((($r)) + 16|0);
 HEAP32[$109>>2] = $104;
 $110 = ((($a)) + 20|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = HEAP32[$a>>2]|0;
 $113 = (___muldi3(($112|0),0,($111|0),0)|0);
 $114 = tempRet0;
 $115 = (_i64Add(($106|0),0,($113|0),($114|0))|0);
 $116 = tempRet0;
 $117 = (($c1$6) + ($116))|0;
 $118 = ($117>>>0)<($116>>>0);
 $$36 = $118&1;
 (_i64Add(($115|0),0,($113|0),($114|0))|0);
 $119 = tempRet0;
 $120 = (($119) + ($117))|0;
 $121 = ($120>>>0)<($119>>>0);
 $122 = $118 ? 2 : 1;
 $c2$4 = $121 ? $122 : $$36;
 $123 = HEAP32[$91>>2]|0;
 $124 = HEAP32[$3>>2]|0;
 $125 = (___muldi3(($124|0),0,($123|0),0)|0);
 $126 = tempRet0;
 $127 = (_i64Add(($115|0),($116|0),($113|0),($114|0))|0);
 $128 = tempRet0;
 (_i64Add(($127|0),0,($125|0),($126|0))|0);
 $129 = tempRet0;
 $130 = (($120) + ($129))|0;
 $131 = ($130>>>0)<($129>>>0);
 $132 = $131&1;
 $$c2$4 = (($132) + ($c2$4))|0;
 $133 = (_i64Add(($127|0),($128|0),($125|0),($126|0))|0);
 $134 = tempRet0;
 (_i64Add(($133|0),0,($125|0),($126|0))|0);
 $135 = tempRet0;
 $136 = (($130) + ($135))|0;
 $137 = ($136>>>0)<($135>>>0);
 $138 = $137&1;
 $c2$6 = (($$c2$4) + ($138))|0;
 $139 = HEAP32[$39>>2]|0;
 $140 = HEAP32[$22>>2]|0;
 $141 = (___muldi3(($140|0),0,($139|0),0)|0);
 $142 = tempRet0;
 $143 = (_i64Add(($133|0),($134|0),($125|0),($126|0))|0);
 $144 = tempRet0;
 (_i64Add(($143|0),0,($141|0),($142|0))|0);
 $145 = tempRet0;
 $146 = (($136) + ($145))|0;
 $147 = ($146>>>0)<($145>>>0);
 $148 = $147&1;
 $$c2$6 = (($c2$6) + ($148))|0;
 $149 = (_i64Add(($143|0),($144|0),($141|0),($142|0))|0);
 $150 = tempRet0;
 $151 = (_i64Add(($149|0),0,($141|0),($142|0))|0);
 $152 = tempRet0;
 $153 = (($146) + ($152))|0;
 $154 = ($153>>>0)<($152>>>0);
 $155 = $154&1;
 $c2$8 = (($$c2$6) + ($155))|0;
 $156 = ((($r)) + 20|0);
 HEAP32[$156>>2] = $151;
 $157 = HEAP32[$39>>2]|0;
 $158 = (___muldi3(($157|0),0,($157|0),0)|0);
 $159 = tempRet0;
 $160 = (_i64Add(($153|0),0,($158|0),($159|0))|0);
 $161 = tempRet0;
 $162 = (($c2$8) + ($161))|0;
 $163 = ($162>>>0)<($161>>>0);
 $$37 = $163&1;
 $164 = HEAP32[$91>>2]|0;
 $165 = HEAP32[$22>>2]|0;
 $166 = (___muldi3(($165|0),0,($164|0),0)|0);
 $167 = tempRet0;
 (_i64Add(($160|0),0,($166|0),($167|0))|0);
 $168 = tempRet0;
 $169 = (($168) + ($162))|0;
 $170 = ($169>>>0)<($168>>>0);
 $171 = $163 ? 2 : 1;
 $c3$6 = $170 ? $171 : $$37;
 $172 = (_i64Add(($160|0),($161|0),($166|0),($167|0))|0);
 $173 = tempRet0;
 (_i64Add(($172|0),0,($166|0),($167|0))|0);
 $174 = tempRet0;
 $175 = (($169) + ($174))|0;
 $176 = ($175>>>0)<($174>>>0);
 $177 = $176&1;
 $$c3$6 = (($177) + ($c3$6))|0;
 $178 = HEAP32[$110>>2]|0;
 $179 = HEAP32[$3>>2]|0;
 $180 = (___muldi3(($179|0),0,($178|0),0)|0);
 $181 = tempRet0;
 $182 = (_i64Add(($172|0),($173|0),($166|0),($167|0))|0);
 $183 = tempRet0;
 (_i64Add(($182|0),0,($180|0),($181|0))|0);
 $184 = tempRet0;
 $185 = (($175) + ($184))|0;
 $186 = ($185>>>0)<($184>>>0);
 $187 = $186&1;
 $c3$8 = (($$c3$6) + ($187))|0;
 $188 = (_i64Add(($182|0),($183|0),($180|0),($181|0))|0);
 $189 = tempRet0;
 (_i64Add(($188|0),0,($180|0),($181|0))|0);
 $190 = tempRet0;
 $191 = (($185) + ($190))|0;
 $192 = ($191>>>0)<($190>>>0);
 $193 = $192&1;
 $$c3$8 = (($c3$8) + ($193))|0;
 $194 = ((($a)) + 24|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = HEAP32[$a>>2]|0;
 $197 = (___muldi3(($196|0),0,($195|0),0)|0);
 $198 = tempRet0;
 $199 = (_i64Add(($188|0),($189|0),($180|0),($181|0))|0);
 $200 = tempRet0;
 (_i64Add(($199|0),0,($197|0),($198|0))|0);
 $201 = tempRet0;
 $202 = (($191) + ($201))|0;
 $203 = ($202>>>0)<($201>>>0);
 $204 = $203&1;
 $c3$10 = (($$c3$8) + ($204))|0;
 $205 = (_i64Add(($199|0),($200|0),($197|0),($198|0))|0);
 $206 = tempRet0;
 $207 = (_i64Add(($205|0),0,($197|0),($198|0))|0);
 $208 = tempRet0;
 $209 = (($202) + ($208))|0;
 $210 = ($209>>>0)<($208>>>0);
 $211 = $210&1;
 $$c3$10 = (($c3$10) + ($211))|0;
 $212 = ((($r)) + 24|0);
 HEAP32[$212>>2] = $207;
 $213 = ((($a)) + 28|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = HEAP32[$a>>2]|0;
 $216 = (___muldi3(($215|0),0,($214|0),0)|0);
 $217 = tempRet0;
 $218 = (_i64Add(($209|0),0,($216|0),($217|0))|0);
 $219 = tempRet0;
 $220 = (($$c3$10) + ($219))|0;
 $221 = ($220>>>0)<($219>>>0);
 $c1$7 = $221&1;
 (_i64Add(($218|0),0,($216|0),($217|0))|0);
 $222 = tempRet0;
 $223 = (($222) + ($220))|0;
 $224 = ($223>>>0)<($222>>>0);
 $225 = $221 ? 2 : 1;
 $$c1$7 = $224 ? $225 : $c1$7;
 $226 = HEAP32[$194>>2]|0;
 $227 = HEAP32[$3>>2]|0;
 $228 = (___muldi3(($227|0),0,($226|0),0)|0);
 $229 = tempRet0;
 $230 = (_i64Add(($218|0),($219|0),($216|0),($217|0))|0);
 $231 = tempRet0;
 (_i64Add(($230|0),0,($228|0),($229|0))|0);
 $232 = tempRet0;
 $233 = (($223) + ($232))|0;
 $234 = ($233>>>0)<($232>>>0);
 $235 = $234&1;
 $c1$9 = (($235) + ($$c1$7))|0;
 $236 = (_i64Add(($230|0),($231|0),($228|0),($229|0))|0);
 $237 = tempRet0;
 (_i64Add(($236|0),0,($228|0),($229|0))|0);
 $238 = tempRet0;
 $239 = (($233) + ($238))|0;
 $240 = ($239>>>0)<($238>>>0);
 $241 = $240&1;
 $$c1$9 = (($c1$9) + ($241))|0;
 $242 = HEAP32[$110>>2]|0;
 $243 = HEAP32[$22>>2]|0;
 $244 = (___muldi3(($243|0),0,($242|0),0)|0);
 $245 = tempRet0;
 $246 = (_i64Add(($236|0),($237|0),($228|0),($229|0))|0);
 $247 = tempRet0;
 (_i64Add(($246|0),0,($244|0),($245|0))|0);
 $248 = tempRet0;
 $249 = (($239) + ($248))|0;
 $250 = ($249>>>0)<($248>>>0);
 $251 = $250&1;
 $c1$11 = (($$c1$9) + ($251))|0;
 $252 = (_i64Add(($246|0),($247|0),($244|0),($245|0))|0);
 $253 = tempRet0;
 (_i64Add(($252|0),0,($244|0),($245|0))|0);
 $254 = tempRet0;
 $255 = (($249) + ($254))|0;
 $256 = ($255>>>0)<($254>>>0);
 $257 = $256&1;
 $$c1$11 = (($c1$11) + ($257))|0;
 $258 = HEAP32[$91>>2]|0;
 $259 = HEAP32[$39>>2]|0;
 $260 = (___muldi3(($259|0),0,($258|0),0)|0);
 $261 = tempRet0;
 $262 = (_i64Add(($252|0),($253|0),($244|0),($245|0))|0);
 $263 = tempRet0;
 (_i64Add(($262|0),0,($260|0),($261|0))|0);
 $264 = tempRet0;
 $265 = (($255) + ($264))|0;
 $266 = ($265>>>0)<($264>>>0);
 $267 = $266&1;
 $c1$13 = (($$c1$11) + ($267))|0;
 $268 = (_i64Add(($262|0),($263|0),($260|0),($261|0))|0);
 $269 = tempRet0;
 $270 = (_i64Add(($268|0),0,($260|0),($261|0))|0);
 $271 = tempRet0;
 $272 = (($265) + ($271))|0;
 $273 = ($272>>>0)<($271>>>0);
 $274 = $273&1;
 $$c1$13 = (($c1$13) + ($274))|0;
 $275 = ((($r)) + 28|0);
 HEAP32[$275>>2] = $270;
 $276 = HEAP32[$91>>2]|0;
 $277 = (___muldi3(($276|0),0,($276|0),0)|0);
 $278 = tempRet0;
 $279 = (_i64Add(($272|0),0,($277|0),($278|0))|0);
 $280 = tempRet0;
 $281 = (($$c1$13) + ($280))|0;
 $282 = ($281>>>0)<($280>>>0);
 $c2$9 = $282&1;
 $283 = HEAP32[$110>>2]|0;
 $284 = HEAP32[$39>>2]|0;
 $285 = (___muldi3(($284|0),0,($283|0),0)|0);
 $286 = tempRet0;
 (_i64Add(($279|0),0,($285|0),($286|0))|0);
 $287 = tempRet0;
 $288 = (($287) + ($281))|0;
 $289 = ($288>>>0)<($287>>>0);
 $290 = $282 ? 2 : 1;
 $$c2$9 = $289 ? $290 : $c2$9;
 $291 = (_i64Add(($279|0),($280|0),($285|0),($286|0))|0);
 $292 = tempRet0;
 (_i64Add(($291|0),0,($285|0),($286|0))|0);
 $293 = tempRet0;
 $294 = (($288) + ($293))|0;
 $295 = ($294>>>0)<($293>>>0);
 $296 = $295&1;
 $c2$11 = (($296) + ($$c2$9))|0;
 $297 = HEAP32[$194>>2]|0;
 $298 = HEAP32[$22>>2]|0;
 $299 = (___muldi3(($298|0),0,($297|0),0)|0);
 $300 = tempRet0;
 $301 = (_i64Add(($291|0),($292|0),($285|0),($286|0))|0);
 $302 = tempRet0;
 (_i64Add(($301|0),0,($299|0),($300|0))|0);
 $303 = tempRet0;
 $304 = (($294) + ($303))|0;
 $305 = ($304>>>0)<($303>>>0);
 $306 = $305&1;
 $$c2$11 = (($c2$11) + ($306))|0;
 $307 = (_i64Add(($301|0),($302|0),($299|0),($300|0))|0);
 $308 = tempRet0;
 (_i64Add(($307|0),0,($299|0),($300|0))|0);
 $309 = tempRet0;
 $310 = (($304) + ($309))|0;
 $311 = ($310>>>0)<($309>>>0);
 $312 = $311&1;
 $c2$13 = (($$c2$11) + ($312))|0;
 $313 = HEAP32[$213>>2]|0;
 $314 = HEAP32[$3>>2]|0;
 $315 = (___muldi3(($314|0),0,($313|0),0)|0);
 $316 = tempRet0;
 $317 = (_i64Add(($307|0),($308|0),($299|0),($300|0))|0);
 $318 = tempRet0;
 (_i64Add(($317|0),0,($315|0),($316|0))|0);
 $319 = tempRet0;
 $320 = (($310) + ($319))|0;
 $321 = ($320>>>0)<($319>>>0);
 $322 = $321&1;
 $$c2$13 = (($c2$13) + ($322))|0;
 $323 = (_i64Add(($317|0),($318|0),($315|0),($316|0))|0);
 $324 = tempRet0;
 $325 = (_i64Add(($323|0),0,($315|0),($316|0))|0);
 $326 = tempRet0;
 $327 = (($320) + ($326))|0;
 $328 = ($327>>>0)<($326>>>0);
 $329 = $328&1;
 $c2$15 = (($$c2$13) + ($329))|0;
 $330 = ((($r)) + 32|0);
 HEAP32[$330>>2] = $325;
 $331 = HEAP32[$213>>2]|0;
 $332 = HEAP32[$22>>2]|0;
 $333 = (___muldi3(($332|0),0,($331|0),0)|0);
 $334 = tempRet0;
 $335 = (_i64Add(($327|0),0,($333|0),($334|0))|0);
 $336 = tempRet0;
 $337 = (($c2$15) + ($336))|0;
 $338 = ($337>>>0)<($336>>>0);
 $$38 = $338&1;
 (_i64Add(($335|0),0,($333|0),($334|0))|0);
 $339 = tempRet0;
 $340 = (($339) + ($337))|0;
 $341 = ($340>>>0)<($339>>>0);
 $342 = $338 ? 2 : 1;
 $c3$13 = $341 ? $342 : $$38;
 $343 = HEAP32[$194>>2]|0;
 $344 = HEAP32[$39>>2]|0;
 $345 = (___muldi3(($344|0),0,($343|0),0)|0);
 $346 = tempRet0;
 $347 = (_i64Add(($335|0),($336|0),($333|0),($334|0))|0);
 $348 = tempRet0;
 (_i64Add(($347|0),0,($345|0),($346|0))|0);
 $349 = tempRet0;
 $350 = (($340) + ($349))|0;
 $351 = ($350>>>0)<($349>>>0);
 $352 = $351&1;
 $$c3$13 = (($352) + ($c3$13))|0;
 $353 = (_i64Add(($347|0),($348|0),($345|0),($346|0))|0);
 $354 = tempRet0;
 (_i64Add(($353|0),0,($345|0),($346|0))|0);
 $355 = tempRet0;
 $356 = (($350) + ($355))|0;
 $357 = ($356>>>0)<($355>>>0);
 $358 = $357&1;
 $c3$15 = (($$c3$13) + ($358))|0;
 $359 = HEAP32[$110>>2]|0;
 $360 = HEAP32[$91>>2]|0;
 $361 = (___muldi3(($360|0),0,($359|0),0)|0);
 $362 = tempRet0;
 $363 = (_i64Add(($353|0),($354|0),($345|0),($346|0))|0);
 $364 = tempRet0;
 (_i64Add(($363|0),0,($361|0),($362|0))|0);
 $365 = tempRet0;
 $366 = (($356) + ($365))|0;
 $367 = ($366>>>0)<($365>>>0);
 $368 = $367&1;
 $$c3$15 = (($c3$15) + ($368))|0;
 $369 = (_i64Add(($363|0),($364|0),($361|0),($362|0))|0);
 $370 = tempRet0;
 $371 = (_i64Add(($369|0),0,($361|0),($362|0))|0);
 $372 = tempRet0;
 $373 = (($366) + ($372))|0;
 $374 = ($373>>>0)<($372>>>0);
 $375 = $374&1;
 $c3$17 = (($$c3$15) + ($375))|0;
 $376 = ((($r)) + 36|0);
 HEAP32[$376>>2] = $371;
 $377 = HEAP32[$110>>2]|0;
 $378 = (___muldi3(($377|0),0,($377|0),0)|0);
 $379 = tempRet0;
 $380 = (_i64Add(($373|0),0,($378|0),($379|0))|0);
 $381 = tempRet0;
 $382 = (($c3$17) + ($381))|0;
 $383 = ($382>>>0)<($381>>>0);
 $$39 = $383&1;
 $384 = HEAP32[$194>>2]|0;
 $385 = HEAP32[$91>>2]|0;
 $386 = (___muldi3(($385|0),0,($384|0),0)|0);
 $387 = tempRet0;
 (_i64Add(($380|0),0,($386|0),($387|0))|0);
 $388 = tempRet0;
 $389 = (($388) + ($382))|0;
 $390 = ($389>>>0)<($388>>>0);
 $391 = $383 ? 2 : 1;
 $c1$16 = $390 ? $391 : $$39;
 $392 = (_i64Add(($380|0),($381|0),($386|0),($387|0))|0);
 $393 = tempRet0;
 (_i64Add(($392|0),0,($386|0),($387|0))|0);
 $394 = tempRet0;
 $395 = (($389) + ($394))|0;
 $396 = ($395>>>0)<($394>>>0);
 $397 = $396&1;
 $$c1$16 = (($397) + ($c1$16))|0;
 $398 = HEAP32[$213>>2]|0;
 $399 = HEAP32[$39>>2]|0;
 $400 = (___muldi3(($399|0),0,($398|0),0)|0);
 $401 = tempRet0;
 $402 = (_i64Add(($392|0),($393|0),($386|0),($387|0))|0);
 $403 = tempRet0;
 (_i64Add(($402|0),0,($400|0),($401|0))|0);
 $404 = tempRet0;
 $405 = (($395) + ($404))|0;
 $406 = ($405>>>0)<($404>>>0);
 $407 = $406&1;
 $c1$18 = (($$c1$16) + ($407))|0;
 $408 = (_i64Add(($402|0),($403|0),($400|0),($401|0))|0);
 $409 = tempRet0;
 $410 = (_i64Add(($408|0),0,($400|0),($401|0))|0);
 $411 = tempRet0;
 $412 = (($405) + ($411))|0;
 $413 = ($412>>>0)<($411>>>0);
 $414 = $413&1;
 $$c1$18 = (($c1$18) + ($414))|0;
 $415 = ((($r)) + 40|0);
 HEAP32[$415>>2] = $410;
 $416 = HEAP32[$213>>2]|0;
 $417 = HEAP32[$91>>2]|0;
 $418 = (___muldi3(($417|0),0,($416|0),0)|0);
 $419 = tempRet0;
 $420 = (_i64Add(($412|0),0,($418|0),($419|0))|0);
 $421 = tempRet0;
 $422 = (($$c1$18) + ($421))|0;
 $423 = ($422>>>0)<($421>>>0);
 $c2$16 = $423&1;
 (_i64Add(($420|0),0,($418|0),($419|0))|0);
 $424 = tempRet0;
 $425 = (($424) + ($422))|0;
 $426 = ($425>>>0)<($424>>>0);
 $427 = $423 ? 2 : 1;
 $$c2$16 = $426 ? $427 : $c2$16;
 $428 = HEAP32[$194>>2]|0;
 $429 = HEAP32[$110>>2]|0;
 $430 = (___muldi3(($429|0),0,($428|0),0)|0);
 $431 = tempRet0;
 $432 = (_i64Add(($420|0),($421|0),($418|0),($419|0))|0);
 $433 = tempRet0;
 (_i64Add(($432|0),0,($430|0),($431|0))|0);
 $434 = tempRet0;
 $435 = (($425) + ($434))|0;
 $436 = ($435>>>0)<($434>>>0);
 $437 = $436&1;
 $c2$18 = (($437) + ($$c2$16))|0;
 $438 = (_i64Add(($432|0),($433|0),($430|0),($431|0))|0);
 $439 = tempRet0;
 $440 = (_i64Add(($438|0),0,($430|0),($431|0))|0);
 $441 = tempRet0;
 $442 = (($435) + ($441))|0;
 $443 = ($442>>>0)<($441>>>0);
 $444 = $443&1;
 $$c2$18 = (($c2$18) + ($444))|0;
 $445 = ((($r)) + 44|0);
 HEAP32[$445>>2] = $440;
 $446 = HEAP32[$194>>2]|0;
 $447 = (___muldi3(($446|0),0,($446|0),0)|0);
 $448 = tempRet0;
 $449 = (_i64Add(($442|0),0,($447|0),($448|0))|0);
 $450 = tempRet0;
 $451 = (($$c2$18) + ($450))|0;
 $452 = ($451>>>0)<($450>>>0);
 $c3$18 = $452&1;
 $453 = HEAP32[$213>>2]|0;
 $454 = HEAP32[$110>>2]|0;
 $455 = (___muldi3(($454|0),0,($453|0),0)|0);
 $456 = tempRet0;
 (_i64Add(($449|0),0,($455|0),($456|0))|0);
 $457 = tempRet0;
 $458 = (($457) + ($451))|0;
 $459 = ($458>>>0)<($457>>>0);
 $460 = $452 ? 2 : 1;
 $$c3$18 = $459 ? $460 : $c3$18;
 $461 = (_i64Add(($449|0),($450|0),($455|0),($456|0))|0);
 $462 = tempRet0;
 $463 = (_i64Add(($461|0),0,($455|0),($456|0))|0);
 $464 = tempRet0;
 $465 = (($458) + ($464))|0;
 $466 = ($465>>>0)<($464>>>0);
 $467 = $466&1;
 $c3$20 = (($467) + ($$c3$18))|0;
 $468 = ((($r)) + 48|0);
 HEAP32[$468>>2] = $463;
 $469 = HEAP32[$213>>2]|0;
 $470 = HEAP32[$194>>2]|0;
 $471 = (___muldi3(($470|0),0,($469|0),0)|0);
 $472 = tempRet0;
 $473 = (_i64Add(($465|0),0,($471|0),($472|0))|0);
 $474 = tempRet0;
 $475 = (($c3$20) + ($474))|0;
 $476 = ($475>>>0)<($474>>>0);
 $$40 = $476&1;
 $477 = (_i64Add(($473|0),0,($471|0),($472|0))|0);
 $478 = tempRet0;
 $479 = (($478) + ($475))|0;
 $480 = ($479>>>0)<($478>>>0);
 $481 = $476 ? 2 : 1;
 $c1$21 = $480 ? $481 : $$40;
 $482 = ((($r)) + 52|0);
 HEAP32[$482>>2] = $477;
 $483 = HEAP32[$213>>2]|0;
 $484 = (___muldi3(($483|0),0,($483|0),0)|0);
 $485 = tempRet0;
 $486 = (_i64Add(($479|0),0,($484|0),($485|0))|0);
 $487 = tempRet0;
 $488 = (($487) + ($c1$21))|0;
 $489 = ((($r)) + 56|0);
 HEAP32[$489>>2] = $486;
 $490 = ((($r)) + 60|0);
 HEAP32[$490>>2] = $488;
 return;
}
function _bn_sqr_comba4($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$ = 0, $$4 = 0, $$c1$2 = 0, $$c2$1 = 0, $$c3$1 = 0, $$c3$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c1$1 = 0, $c1$2 = 0, $c1$4 = 0, $c2$1 = 0, $c2$4 = 0, $c3$1 = 0, $c3$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = (___muldi3(($0|0),0,($0|0),0)|0);
 $2 = tempRet0;
 HEAP32[$r>>2] = $1;
 $3 = ((($a)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$a>>2]|0;
 $6 = (___muldi3(($5|0),0,($4|0),0)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),($2|0),0)|0);
 $9 = tempRet0;
 $10 = (_i64Add(($8|0),0,($6|0),($7|0))|0);
 $11 = tempRet0;
 $12 = (($11) + ($9))|0;
 $13 = ($12>>>0)<($11>>>0);
 $c1$1 = $13&1;
 $14 = ((($r)) + 4|0);
 HEAP32[$14>>2] = $10;
 $15 = HEAP32[$3>>2]|0;
 $16 = (___muldi3(($15|0),0,($15|0),0)|0);
 $17 = tempRet0;
 $18 = (_i64Add(($12|0),0,($16|0),($17|0))|0);
 $19 = tempRet0;
 $20 = (($19) + ($c1$1))|0;
 $21 = ($20>>>0)<($19>>>0);
 $$ = $21&1;
 $22 = ((($a)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$a>>2]|0;
 $25 = (___muldi3(($24|0),0,($23|0),0)|0);
 $26 = tempRet0;
 (_i64Add(($18|0),0,($25|0),($26|0))|0);
 $27 = tempRet0;
 $28 = (($27) + ($20))|0;
 $29 = ($28>>>0)<($27>>>0);
 $30 = $21 ? 2 : 1;
 $c2$1 = $29 ? $30 : $$;
 $31 = (_i64Add(($18|0),($19|0),($25|0),($26|0))|0);
 $32 = tempRet0;
 $33 = (_i64Add(($31|0),0,($25|0),($26|0))|0);
 $34 = tempRet0;
 $35 = (($28) + ($34))|0;
 $36 = ($35>>>0)<($34>>>0);
 $37 = $36&1;
 $$c2$1 = (($37) + ($c2$1))|0;
 $38 = ((($r)) + 8|0);
 HEAP32[$38>>2] = $33;
 $39 = ((($a)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$a>>2]|0;
 $42 = (___muldi3(($41|0),0,($40|0),0)|0);
 $43 = tempRet0;
 $44 = (_i64Add(($35|0),0,($42|0),($43|0))|0);
 $45 = tempRet0;
 $46 = (($$c2$1) + ($45))|0;
 $47 = ($46>>>0)<($45>>>0);
 $c3$1 = $47&1;
 (_i64Add(($44|0),0,($42|0),($43|0))|0);
 $48 = tempRet0;
 $49 = (($48) + ($46))|0;
 $50 = ($49>>>0)<($48>>>0);
 $51 = $47 ? 2 : 1;
 $$c3$1 = $50 ? $51 : $c3$1;
 $52 = HEAP32[$22>>2]|0;
 $53 = HEAP32[$3>>2]|0;
 $54 = (___muldi3(($53|0),0,($52|0),0)|0);
 $55 = tempRet0;
 $56 = (_i64Add(($44|0),($45|0),($42|0),($43|0))|0);
 $57 = tempRet0;
 (_i64Add(($56|0),0,($54|0),($55|0))|0);
 $58 = tempRet0;
 $59 = (($49) + ($58))|0;
 $60 = ($59>>>0)<($58>>>0);
 $61 = $60&1;
 $c3$3 = (($61) + ($$c3$1))|0;
 $62 = (_i64Add(($56|0),($57|0),($54|0),($55|0))|0);
 $63 = tempRet0;
 $64 = (_i64Add(($62|0),0,($54|0),($55|0))|0);
 $65 = tempRet0;
 $66 = (($59) + ($65))|0;
 $67 = ($66>>>0)<($65>>>0);
 $68 = $67&1;
 $$c3$3 = (($c3$3) + ($68))|0;
 $69 = ((($r)) + 12|0);
 HEAP32[$69>>2] = $64;
 $70 = HEAP32[$22>>2]|0;
 $71 = (___muldi3(($70|0),0,($70|0),0)|0);
 $72 = tempRet0;
 $73 = (_i64Add(($66|0),0,($71|0),($72|0))|0);
 $74 = tempRet0;
 $75 = (($$c3$3) + ($74))|0;
 $76 = ($75>>>0)<($74>>>0);
 $c1$2 = $76&1;
 $77 = HEAP32[$39>>2]|0;
 $78 = HEAP32[$3>>2]|0;
 $79 = (___muldi3(($78|0),0,($77|0),0)|0);
 $80 = tempRet0;
 (_i64Add(($73|0),0,($79|0),($80|0))|0);
 $81 = tempRet0;
 $82 = (($81) + ($75))|0;
 $83 = ($82>>>0)<($81>>>0);
 $84 = $76 ? 2 : 1;
 $$c1$2 = $83 ? $84 : $c1$2;
 $85 = (_i64Add(($73|0),($74|0),($79|0),($80|0))|0);
 $86 = tempRet0;
 $87 = (_i64Add(($85|0),0,($79|0),($80|0))|0);
 $88 = tempRet0;
 $89 = (($82) + ($88))|0;
 $90 = ($89>>>0)<($88>>>0);
 $91 = $90&1;
 $c1$4 = (($91) + ($$c1$2))|0;
 $92 = ((($r)) + 16|0);
 HEAP32[$92>>2] = $87;
 $93 = HEAP32[$39>>2]|0;
 $94 = HEAP32[$22>>2]|0;
 $95 = (___muldi3(($94|0),0,($93|0),0)|0);
 $96 = tempRet0;
 $97 = (_i64Add(($89|0),0,($95|0),($96|0))|0);
 $98 = tempRet0;
 $99 = (($c1$4) + ($98))|0;
 $100 = ($99>>>0)<($98>>>0);
 $$4 = $100&1;
 $101 = (_i64Add(($97|0),0,($95|0),($96|0))|0);
 $102 = tempRet0;
 $103 = (($102) + ($99))|0;
 $104 = ($103>>>0)<($102>>>0);
 $105 = $100 ? 2 : 1;
 $c2$4 = $104 ? $105 : $$4;
 $106 = ((($r)) + 20|0);
 HEAP32[$106>>2] = $101;
 $107 = HEAP32[$39>>2]|0;
 $108 = (___muldi3(($107|0),0,($107|0),0)|0);
 $109 = tempRet0;
 $110 = (_i64Add(($103|0),0,($108|0),($109|0))|0);
 $111 = tempRet0;
 $112 = (($111) + ($c2$4))|0;
 $113 = ((($r)) + 24|0);
 HEAP32[$113>>2] = $110;
 $114 = ((($r)) + 28|0);
 HEAP32[$114>>2] = $112;
 return;
}
function _BN_BLINDING_new($A,$Ai,$mod) {
 $A = $A|0;
 $Ai = $Ai|0;
 $mod = $mod|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(44,89389,141)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(3,102,65,89389,142);
  $$0 = 0;
  return ($$0|0);
 }
 dest=$0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = ($A|0)==(0|0);
 if ($2) {
  label = 5;
 } else {
  $3 = (_BN_dup($A)|0);
  HEAP32[$0>>2] = $3;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $5 = ($Ai|0)==(0|0);
   if (!($5)) {
    $6 = (_BN_dup($Ai)|0);
    $7 = ((($0)) + 4|0);
    HEAP32[$7>>2] = $6;
    $8 = ($6|0)==(0|0);
    if ($8) {
     break;
    }
   }
   $9 = (_BN_dup($mod)|0);
   $10 = ((($0)) + 12|0);
   HEAP32[$10>>2] = $9;
   $11 = ($9|0)==(0|0);
   if (!($11)) {
    $12 = ((($mod)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 & 4;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = ((($9)) + 16|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $17 | 4;
     HEAP32[$16>>2] = $18;
    }
    $19 = ((($0)) + 28|0);
    HEAP32[$19>>2] = -1;
    $20 = ((($0)) + 20|0);
    _CRYPTO_THREADID_current($20);
    $$0 = $0;
    return ($$0|0);
   }
  }
 } while(0);
 $21 = HEAP32[$0>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _BN_free($21);
 }
 $23 = ((($0)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _BN_free($24);
 }
 $26 = ((($0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _BN_free($27);
 }
 $29 = ((($0)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  _BN_free($30);
 }
 _CRYPTO_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _BN_BLINDING_free($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$r>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _BN_free($1);
 }
 $3 = ((($r)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _BN_free($4);
 }
 $6 = ((($r)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _BN_free($7);
 }
 $9 = ((($r)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  _BN_free($10);
 }
 _CRYPTO_free($r);
 return;
}
function _BN_BLINDING_update($b,$ctx) {
 $b = $b|0;
 $ctx = $ctx|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   label = 3;
  } else {
   $2 = ((($b)) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    label = 3;
   } else {
    $5 = ((($b)) + 28|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(-1);
    if ($7) {
     HEAP32[$5>>2] = 1;
     label = 10;
    } else {
     $8 = (($6) + 1)|0;
     HEAP32[$5>>2] = $8;
     $9 = ($8|0)==(32);
     if ($9) {
      $10 = ((($b)) + 8|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($11|0)==(0|0);
      if ($12) {
       label = 10;
      } else {
       $13 = ((($b)) + 32|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = $14 & 2;
       $16 = ($15|0)==(0);
       if ($16) {
        $17 = (_BN_BLINDING_create_param($b,0,0,$ctx,0,0)|0);
        $18 = ($17|0)==(0|0);
        if ($18) {
         $$pre$phiZ2D = $5;$ret$0 = 0;
         break;
        }
       } else {
        label = 10;
       }
      }
     } else {
      label = 10;
     }
    }
    if ((label|0) == 10) {
     $19 = ((($b)) + 32|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = $20 & 1;
     $22 = ($21|0)==(0);
     if ($22) {
      $23 = ((($b)) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (_BN_mod_mul($0,$0,$0,$24,$ctx)|0);
      $26 = ($25|0)==(0);
      if ($26) {
       $$pre$phiZ2D = $5;$ret$0 = 0;
       break;
      }
      $27 = HEAP32[$2>>2]|0;
      $28 = HEAP32[$23>>2]|0;
      $29 = (_BN_mod_mul($27,$27,$27,$28,$ctx)|0);
      $30 = ($29|0)==(0);
      if ($30) {
       $$pre$phiZ2D = $5;$ret$0 = 0;
       break;
      }
     }
    }
    $$pre$phiZ2D = $5;$ret$0 = 1;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  _ERR_put_error(3,103,107,89389,196);
  $$pre = ((($b)) + 28|0);
  $$pre$phiZ2D = $$pre;$ret$0 = 0;
 }
 $31 = HEAP32[$$pre$phiZ2D>>2]|0;
 $32 = ($31|0)==(32);
 if (!($32)) {
  return ($ret$0|0);
 }
 HEAP32[$$pre$phiZ2D>>2] = 0;
 return ($ret$0|0);
}
function _BN_BLINDING_create_param($b,$e,$m,$ctx,$bn_mod_exp,$m_ctx) {
 $b = $b|0;
 $e = $e|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $bn_mod_exp = $bn_mod_exp|0;
 $m_ctx = $m_ctx|0;
 var $$0 = 0, $$old3 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$old$old = 0, $or$cond2 = 0, $or$cond4 = 0, $ret$05 = 0, $retry_counter$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($b|0)==(0|0);
 if ($0) {
  $1 = (_BN_BLINDING_new(0,0,$m)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $ret$05 = $1;
  }
 } else {
  $ret$05 = $b;
 }
 $3 = HEAP32[$ret$05>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_BN_new()|0);
  HEAP32[$ret$05>>2] = $5;
  $6 = ($5|0)==(0|0);
  if ($6) {
   label = 26;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 L7: do {
  if ((label|0) == 5) {
   $7 = ((($ret$05)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $10 = (_BN_new()|0);
    HEAP32[$7>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     label = 26;
     break;
    }
   }
   $12 = ($e|0)==(0|0);
   $$phi$trans$insert = ((($ret$05)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($12) {
    $16 = $$pre;
   } else {
    $13 = ($$pre|0)==(0|0);
    if (!($13)) {
     _BN_free($$pre);
    }
    $14 = (_BN_dup($e)|0);
    HEAP32[$$phi$trans$insert>>2] = $14;
    $16 = $14;
   }
   $15 = ($16|0)==(0|0);
   if ($15) {
    label = 26;
   } else {
    $17 = ($bn_mod_exp|0)==(0|0);
    if (!($17)) {
     $18 = ((($ret$05)) + 40|0);
     HEAP32[$18>>2] = $bn_mod_exp;
    }
    $19 = ($m_ctx|0)==(0|0);
    if (!($19)) {
     $20 = ((($ret$05)) + 36|0);
     HEAP32[$20>>2] = $m_ctx;
    }
    $21 = HEAP32[$ret$05>>2]|0;
    $22 = ((($ret$05)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_BN_rand_range($21,$23)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     label = 26;
    } else {
     $retry_counter$013 = 32;
     while(1) {
      $26 = HEAP32[$7>>2]|0;
      $27 = HEAP32[$ret$05>>2]|0;
      $28 = HEAP32[$22>>2]|0;
      $29 = (_BN_mod_inverse($26,$27,$28,$ctx)|0);
      $30 = ($29|0)==(0|0);
      if (!($30)) {
       break;
      }
      $31 = (_ERR_peek_last_error()|0);
      $32 = $31 & 4095;
      $33 = ($32|0)==(108);
      if (!($33)) {
       label = 26;
       break L7;
      }
      $34 = ($retry_counter$013|0)==(0);
      if ($34) {
       label = 20;
       break;
      }
      $35 = (($retry_counter$013) + -1)|0;
      _ERR_clear_error();
      $36 = HEAP32[$ret$05>>2]|0;
      $37 = HEAP32[$22>>2]|0;
      $38 = (_BN_rand_range($36,$37)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       label = 26;
       break L7;
      } else {
       $retry_counter$013 = $35;
      }
     }
     if ((label|0) == 20) {
      _ERR_put_error(3,128,113,89389,358);
      label = 26;
      break;
     }
     $40 = ((($ret$05)) + 40|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(0|0);
     if (!($42)) {
      $43 = ((($ret$05)) + 36|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $46 = HEAP32[$ret$05>>2]|0;
       $47 = HEAP32[$$phi$trans$insert>>2]|0;
       $48 = HEAP32[$22>>2]|0;
       $49 = (FUNCTION_TABLE_iiiiiii[$41 & 31]($46,$46,$47,$48,$ctx,$44)|0);
       $50 = ($49|0)==(0);
       $or$cond2 = $0 & $50;
       if ($or$cond2) {
        break;
       } else {
        $$0 = $ret$05;
       }
       return ($$0|0);
      }
     }
     $51 = HEAP32[$ret$05>>2]|0;
     $52 = HEAP32[$$phi$trans$insert>>2]|0;
     $53 = HEAP32[$22>>2]|0;
     $54 = (_BN_mod_exp($51,$51,$52,$53,$ctx)|0);
     $55 = ($54|0)==(0);
     $or$cond4 = $0 & $55;
     if (!($or$cond4)) {
      $$0 = $ret$05;
      return ($$0|0);
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $$old3 = ($ret$05|0)!=(0|0);
  $or$cond$old$old = $0 & $$old3;
  if (!($or$cond$old$old)) {
   $$0 = $ret$05;
   return ($$0|0);
  }
 }
 $56 = HEAP32[$ret$05>>2]|0;
 $57 = ($56|0)==(0|0);
 if (!($57)) {
  _BN_free($56);
 }
 $58 = ((($ret$05)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(0|0);
 if (!($60)) {
  _BN_free($59);
 }
 $61 = ((($ret$05)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0|0);
 if (!($63)) {
  _BN_free($62);
 }
 $64 = ((($ret$05)) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)==(0|0);
 if (!($66)) {
  _BN_free($65);
 }
 _CRYPTO_free($ret$05);
 $$0 = 0;
 return ($$0|0);
}
function _BN_BLINDING_convert_ex($n,$r,$b,$ctx) {
 $n = $n|0;
 $r = $r|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$ret$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $not$ = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$b>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($b)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($b)) + 28|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    HEAP32[$5>>2] = 0;
   } else {
    $8 = (_BN_BLINDING_update($b,$ctx)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   $10 = ($r|0)==(0|0);
   if ($10) {
    $ret$0 = 1;
   } else {
    $11 = HEAP32[$2>>2]|0;
    $12 = (_BN_copy($r,$11)|0);
    $not$ = ($12|0)!=(0|0);
    $$ = $not$&1;
    $ret$0 = $$;
   }
   $13 = HEAP32[$b>>2]|0;
   $14 = ((($b)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_BN_mod_mul($n,$n,$13,$15,$ctx)|0);
   $17 = ($16|0)==(0);
   $$ret$0 = $17 ? 0 : $ret$0;
   $$0 = $$ret$0;
   return ($$0|0);
  }
 }
 _ERR_put_error(3,100,107,89389,234);
 $$0 = 0;
 return ($$0|0);
}
function _BN_BLINDING_invert_ex($n,$r,$b,$ctx) {
 $n = $n|0;
 $r = $r|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if (!($0)) {
  $1 = ((($b)) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_BN_mod_mul($n,$n,$r,$2,$ctx)|0);
  $$0 = $3;
  return ($$0|0);
 }
 $4 = ((($b)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _ERR_put_error(3,101,107,89389,271);
  $$0 = 0;
  return ($$0|0);
 } else {
  $7 = ((($b)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_BN_mod_mul($n,$n,$5,$8,$ctx)|0);
  $$0 = $9;
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_BLINDING_thread_id($b) {
 $b = $b|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 20|0);
 return ($0|0);
}
function _BN_CTX_new() {
 var $$0 = 0, $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(44,89400,216)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(3,106,65,89400,218);
  $$0 = 0;
  return ($$0|0);
 } else {
  dest=$0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_CTX_free($ctx) {
 $ctx = $ctx|0;
 var $$cast$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ctx|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($ctx)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($ctx)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  _CRYPTO_free($5);
 }
 $6 = HEAP32[$ctx>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($ctx)) + 4|0);
  $10 = $6;
  while(1) {
   $9 = HEAP32[$10>>2]|0;
   $11 = ($9|0)==(0|0);
   if (!($11)) {
    _BN_clear_free($10);
   }
   $12 = ((($10)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    _BN_clear_free($12);
   }
   $15 = ((($10)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    _BN_clear_free($15);
   }
   $18 = ((($10)) + 60|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    _BN_clear_free($18);
   }
   $21 = ((($10)) + 80|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    _BN_clear_free($21);
   }
   $24 = ((($10)) + 100|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    _BN_clear_free($24);
   }
   $27 = ((($10)) + 120|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    _BN_clear_free($27);
   }
   $30 = ((($10)) + 140|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    _BN_clear_free($30);
   }
   $33 = ((($10)) + 160|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if (!($35)) {
    _BN_clear_free($33);
   }
   $36 = ((($10)) + 180|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    _BN_clear_free($36);
   }
   $39 = ((($10)) + 200|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0|0);
   if (!($41)) {
    _BN_clear_free($39);
   }
   $42 = ((($10)) + 220|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(0|0);
   if (!($44)) {
    _BN_clear_free($42);
   }
   $45 = ((($10)) + 240|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0|0);
   if (!($47)) {
    _BN_clear_free($45);
   }
   $48 = ((($10)) + 260|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0|0);
   if (!($50)) {
    _BN_clear_free($48);
   }
   $51 = ((($10)) + 280|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   if (!($53)) {
    _BN_clear_free($51);
   }
   $54 = ((($10)) + 300|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   if (!($56)) {
    _BN_clear_free($54);
   }
   $57 = HEAP32[$ctx>>2]|0;
   $58 = ((($57)) + 324|0);
   $59 = HEAP32[$58>>2]|0;
   HEAP32[$8>>2] = $59;
   _CRYPTO_free($57);
   $60 = HEAP32[$8>>2]|0;
   HEAP32[$ctx>>2] = $60;
   $$cast$i = $60;
   $61 = ($60|0)==(0);
   if ($61) {
    break;
   } else {
    $10 = $$cast$i;
   }
  }
 }
 _CRYPTO_free($ctx);
 return;
}
function _BN_CTX_start($ctx) {
 $ctx = $ctx|0;
 var $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($ctx)) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $7 = ((($ctx)) + 20|0);
   $8 = ((($ctx)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($ctx)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($ctx)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = ($11|0)==(0);
    $16 = ($11*3)|0;
    $17 = $16 >>> 1;
    $18 = $15 ? 32 : $17;
    $19 = $18 << 2;
    $20 = (_CRYPTO_malloc($19,89400,338)|0);
    $21 = ($20|0)==(0|0);
    if ($21) {
     _ERR_put_error(3,129,109,89400,262);
     $33 = HEAP32[$0>>2]|0;
     $34 = (($33) + 1)|0;
     HEAP32[$0>>2] = $34;
     return;
    }
    $22 = HEAP32[$10>>2]|0;
    $23 = ($22|0)==(0);
    if (!($23)) {
     $24 = HEAP32[$7>>2]|0;
     $25 = $22 << 2;
     _memcpy(($20|0),($24|0),($25|0))|0;
    }
    $26 = HEAP32[$12>>2]|0;
    $27 = ($26|0)==(0);
    if (!($27)) {
     $28 = HEAP32[$7>>2]|0;
     _CRYPTO_free($28);
    }
    HEAP32[$7>>2] = $20;
    HEAP32[$12>>2] = $18;
    $$pre$i = HEAP32[$10>>2]|0;
    $30 = $$pre$i;$32 = $20;
   } else {
    $$pre1$i = HEAP32[$7>>2]|0;
    $30 = $11;$32 = $$pre1$i;
   }
   $29 = (($30) + 1)|0;
   HEAP32[$10>>2] = $29;
   $31 = (($32) + ($30<<2)|0);
   HEAP32[$31>>2] = $9;
   return;
  }
 }
 $6 = (($1) + 1)|0;
 HEAP32[$0>>2] = $6;
 return;
}
function _BN_CTX_end($ctx) {
 $ctx = $ctx|0;
 var $$in$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset$0$be$i = 0, $offset$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($1) + -1)|0;
  HEAP32[$0>>2] = $3;
  return;
 }
 $4 = ((($ctx)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($ctx)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($ctx)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12>>>0)>($10>>>0);
 if ($13) {
  $14 = (($12) - ($10))|0;
  $15 = ((($ctx)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - ($14))|0;
  HEAP32[$15>>2] = $17;
  $18 = ($12|0)==($10|0);
  if (!($18)) {
   $19 = (($16) + 15)|0;
   $20 = $19 & 15;
   $21 = ((($ctx)) + 4|0);
   $$in$i = $14;$offset$01$i = $20;
   while(1) {
    $22 = (($$in$i) + -1)|0;
    $23 = ($offset$01$i|0)==(0);
    if ($23) {
     $24 = HEAP32[$21>>2]|0;
     $25 = ((($24)) + 320|0);
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$21>>2] = $26;
     $offset$0$be$i = 15;
    } else {
     $27 = (($offset$01$i) + -1)|0;
     $offset$0$be$i = $27;
    }
    $28 = ($22|0)==(0);
    if ($28) {
     break;
    } else {
     $$in$i = $22;$offset$01$i = $offset$0$be$i;
    }
   }
  }
 }
 HEAP32[$11>>2] = $10;
 $29 = ((($ctx)) + 40|0);
 HEAP32[$29>>2] = 0;
 return;
}
function _BN_CTX_get($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $$0$i = 0, $$pre$phi4$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($ctx)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($ctx)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($ctx)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 if ($10) {
  $11 = (_CRYPTO_malloc(328,89400,407)|0);
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($11)) + 20|0);
   _BN_init($11);
   $14 = ((($11)) + 40|0);
   _BN_init($13);
   $15 = ((($11)) + 60|0);
   _BN_init($14);
   $16 = ((($11)) + 80|0);
   _BN_init($15);
   $17 = ((($11)) + 100|0);
   _BN_init($16);
   $18 = ((($11)) + 120|0);
   _BN_init($17);
   $19 = ((($11)) + 140|0);
   _BN_init($18);
   $20 = ((($11)) + 160|0);
   _BN_init($19);
   $21 = ((($11)) + 180|0);
   _BN_init($20);
   $22 = ((($11)) + 200|0);
   _BN_init($21);
   $23 = ((($11)) + 220|0);
   _BN_init($22);
   $24 = ((($11)) + 240|0);
   _BN_init($23);
   $25 = ((($11)) + 260|0);
   _BN_init($24);
   $26 = ((($11)) + 280|0);
   _BN_init($25);
   $27 = ((($11)) + 300|0);
   _BN_init($26);
   _BN_init($27);
   $28 = ((($ctx)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 320|0);
   HEAP32[$30>>2] = $29;
   $31 = ((($11)) + 324|0);
   HEAP32[$31>>2] = 0;
   $32 = HEAP32[$ctx>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    HEAP32[$28>>2] = $11;
    $34 = ((($ctx)) + 4|0);
    HEAP32[$34>>2] = $11;
    HEAP32[$ctx>>2] = $11;
   } else {
    $35 = $29;
    $36 = ((($35)) + 324|0);
    HEAP32[$36>>2] = $11;
    HEAP32[$28>>2] = $11;
    $37 = ((($ctx)) + 4|0);
    HEAP32[$37>>2] = $11;
   }
   $38 = HEAP32[$8>>2]|0;
   $39 = (($38) + 16)|0;
   HEAP32[$8>>2] = $39;
   $40 = HEAP32[$6>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$6>>2] = $41;
   $$0$i = $11;
   label = 14;
  }
 } else {
  $42 = ($7|0)==(0);
  if ($42) {
   $43 = HEAP32[$ctx>>2]|0;
   $44 = ((($ctx)) + 4|0);
   HEAP32[$44>>2] = $43;
   $45 = $43;
   $$pre$phi4$iZ2D = 0;$55 = $45;
  } else {
   $46 = $7 & 15;
   $47 = ($46|0)==(0);
   $48 = ((($ctx)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   if ($47) {
    $50 = ((($49)) + 324|0);
    $51 = HEAP32[$50>>2]|0;
    HEAP32[$48>>2] = $51;
    $52 = $51;
    $$pre$phi4$iZ2D = 0;$55 = $52;
   } else {
    $$pre$phi4$iZ2D = $46;$55 = $49;
   }
  }
  $53 = (($7) + 1)|0;
  HEAP32[$6>>2] = $53;
  $54 = (($55) + (($$pre$phi4$iZ2D*20)|0)|0);
  $$0$i = $54;
  label = 14;
 }
 if ((label|0) == 14) {
  $56 = ($$0$i|0)==(0|0);
  if (!($56)) {
   (_BN_set_word($$0$i,0)|0);
   $57 = ((($ctx)) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 1)|0;
   HEAP32[$57>>2] = $59;
   $$0 = $$0$i;
   return ($$0|0);
  }
 }
 HEAP32[$3>>2] = 1;
 _ERR_put_error(3,116,109,89400,297);
 $$0 = 0;
 return ($$0|0);
}
function _BN_div($dv,$rm,$num,$divisor,$ctx) {
 $dv = $dv|0;
 $rm = $rm|0;
 $num = $num|0;
 $divisor = $divisor|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$lcssa = 0, $$pr = 0, $$pre = 0, $$pre$phi52Z2D = 0, $$pre43 = 0, $$pre44 = 0, $$pre51 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ftl$011 = 0, $ftl1$07 = 0, $i$032 = 0, $i$129 = 0, $no_branch$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $q$019 = 0, $q$1 = 0, $q$2 = 0, $rem$020 = 0, $res$0 = 0, $resp$1$ph = 0, $resp$128 = 0, $tmp_top$0$lcssa = 0, $tmp_top$012 = 0;
 var $tmp_top2$0$lcssa = 0, $tmp_top2$08 = 0, $wnum = 0, $wnump$027 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $wnum = sp;
 $0 = ((($num)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($1) + -1)|0;
  $4 = HEAP32[$num>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $8 = ((($divisor)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)>(0);
   if ($10) {
    $11 = (($9) + -1)|0;
    $12 = HEAP32[$divisor>>2]|0;
    $13 = (($12) + ($11<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ((($num)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 & 4;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = ((($divisor)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 & 4;
    $23 = ($22|0)==(0);
    if ($23) {
     $no_branch$0 = 0;
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
   if ((label|0) == 8) {
    $no_branch$0 = 1;
   }
   $24 = ($9|0)==(0);
   if ($24) {
    _ERR_put_error(3,107,103,89409,229);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $25 = ($no_branch$0|0)!=(0);
   if (!($25)) {
    $26 = (_BN_ucmp($num,$divisor)|0);
    $27 = ($26|0)<(0);
    if ($27) {
     $28 = ($rm|0)==(0|0);
     if (!($28)) {
      $29 = (_BN_copy($rm,$num)|0);
      $30 = ($29|0)==(0|0);
      if ($30) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $31 = ($dv|0)==(0|0);
     if ($31) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
     (_BN_set_word($dv,0)|0);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
   _BN_CTX_start($ctx);
   $32 = (_BN_CTX_get($ctx)|0);
   $33 = (_BN_CTX_get($ctx)|0);
   $34 = (_BN_CTX_get($ctx)|0);
   $35 = ($dv|0)==(0|0);
   if ($35) {
    $36 = (_BN_CTX_get($ctx)|0);
    $res$0 = $36;
   } else {
    $res$0 = $dv;
   }
   $37 = ($34|0)==(0|0);
   $38 = ($res$0|0)==(0|0);
   $or$cond = $37 | $38;
   $39 = ($32|0)==(0|0);
   $or$cond3 = $39 | $or$cond;
   $40 = ($33|0)==(0|0);
   $or$cond5 = $40 | $or$cond3;
   L32: do {
    if (!($or$cond5)) {
     $41 = (_BN_num_bits($divisor)|0);
     $42 = (($41|0) % 32)&-1;
     $43 = (32 - ($42))|0;
     $44 = (_BN_lshift($34,$divisor,$43)|0);
     $45 = ($44|0)==(0);
     if (!($45)) {
      $46 = ((($34)) + 12|0);
      HEAP32[$46>>2] = 0;
      $47 = (($43) + 32)|0;
      $48 = (_BN_lshift($33,$num,$47)|0);
      $49 = ($48|0)==(0);
      if (!($49)) {
       $50 = ((($33)) + 12|0);
       HEAP32[$50>>2] = 0;
       $51 = ((($33)) + 4|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ((($34)) + 4|0);
       do {
        if ($25) {
         $54 = HEAP32[$53>>2]|0;
         $55 = (($54) + 1)|0;
         $56 = ($52|0)>($55|0);
         if ($56) {
          $73 = ((($33)) + 8|0);
          $74 = HEAP32[$73>>2]|0;
          $75 = ($52|0)<($74|0);
          if ($75) {
           $81 = $52;
          } else {
           $76 = (($52) + 1)|0;
           $77 = (_bn_expand2($33,$76)|0);
           $78 = ($77|0)==(0|0);
           if ($78) {
            break L32;
           }
           $$pre44 = HEAP32[$51>>2]|0;
           $81 = $$pre44;
          }
          $79 = HEAP32[$33>>2]|0;
          $80 = (($79) + ($81<<2)|0);
          HEAP32[$80>>2] = 0;
          $82 = HEAP32[$51>>2]|0;
          $83 = (($82) + 1)|0;
          HEAP32[$51>>2] = $83;
          $$pre$phi52Z2D = $73;$86 = $83;
          break;
         }
         $57 = (($54) + 2)|0;
         $58 = ((($33)) + 8|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = ($57|0)>($59|0);
         if ($60) {
          $61 = (_bn_expand2($33,$57)|0);
          $62 = ($61|0)==(0|0);
          if ($62) {
           break L32;
          }
          $$pre = HEAP32[$51>>2]|0;
          $$pre43 = HEAP32[$53>>2]|0;
          $64 = $$pre43;$66 = $$pre;
         } else {
          $64 = $54;$66 = $52;
         }
         $63 = (($64) + 2)|0;
         $65 = ($66|0)<($63|0);
         if ($65) {
          $67 = HEAP32[$33>>2]|0;
          $i$032 = $66;
          while(1) {
           $68 = (($67) + ($i$032<<2)|0);
           HEAP32[$68>>2] = 0;
           $69 = (($i$032) + 1)|0;
           $70 = HEAP32[$53>>2]|0;
           $71 = (($70) + 2)|0;
           $72 = ($69|0)<($71|0);
           if ($72) {
            $i$032 = $69;
           } else {
            $$lcssa = $71;
            break;
           }
          }
         } else {
          $$lcssa = $63;
         }
         HEAP32[$51>>2] = $$lcssa;
         $$pre$phi52Z2D = $58;$86 = $$lcssa;
        } else {
         $$pre51 = ((($33)) + 8|0);
         $$pre$phi52Z2D = $$pre51;$86 = $52;
        }
       } while(0);
       $84 = HEAP32[$53>>2]|0;
       $85 = (($86) - ($84))|0;
       $87 = ((($wnum)) + 12|0);
       HEAP32[$87>>2] = 0;
       $88 = HEAP32[$33>>2]|0;
       $89 = (($88) + ($85<<2)|0);
       HEAP32[$wnum>>2] = $89;
       $90 = ((($wnum)) + 4|0);
       HEAP32[$90>>2] = $84;
       $91 = HEAP32[$$pre$phi52Z2D>>2]|0;
       $92 = (($91) - ($85))|0;
       $93 = ((($wnum)) + 8|0);
       HEAP32[$93>>2] = $92;
       $94 = (($84) + -1)|0;
       $95 = HEAP32[$34>>2]|0;
       $96 = (($95) + ($94<<2)|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ($84|0)==(1);
       if ($98) {
        $145 = 0;$146 = 0;
       } else {
        $99 = (($84) + -2)|0;
        $100 = (($95) + ($99<<2)|0);
        $101 = HEAP32[$100>>2]|0;
        $145 = $101;$146 = 0;
       }
       $102 = (($86) + -1)|0;
       $103 = HEAP32[$33>>2]|0;
       $104 = (($103) + ($102<<2)|0);
       $105 = ((($num)) + 12|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ((($divisor)) + 12|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = $108 ^ $106;
       $110 = ((($res$0)) + 12|0);
       HEAP32[$110>>2] = $109;
       $111 = ((($res$0)) + 8|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ($85|0)<($112|0);
       if (!($113)) {
        $114 = (($85) + 1)|0;
        $115 = (_bn_expand2($res$0,$114)|0);
        $116 = ($115|0)==(0|0);
        if ($116) {
         break;
        }
       }
       $117 = (($85) - ($no_branch$0))|0;
       $118 = ((($res$0)) + 4|0);
       HEAP32[$118>>2] = $117;
       $119 = (($85) + -1)|0;
       $120 = HEAP32[$res$0>>2]|0;
       $121 = (($120) + ($119<<2)|0);
       $122 = (($84) + 1)|0;
       $123 = ((($32)) + 8|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ($84|0)<($124|0);
       if (!($125)) {
        $126 = (_bn_expand2($32,$122)|0);
        $127 = ($126|0)==(0|0);
        if ($127) {
         break;
        }
       }
       do {
        if ($25) {
         label = 46;
        } else {
         $128 = (_BN_ucmp($wnum,$34)|0);
         $129 = ($128|0)>(-1);
         if ($129) {
          $130 = HEAP32[$wnum>>2]|0;
          $131 = HEAP32[$34>>2]|0;
          (_bn_sub_words($130,$130,$131,$84)|0);
          HEAP32[$121>>2] = 1;
          label = 46;
          break;
         } else {
          $132 = HEAP32[$118>>2]|0;
          $133 = (($132) + -1)|0;
          HEAP32[$118>>2] = $133;
          $135 = $133;
          break;
         }
        }
       } while(0);
       if ((label|0) == 46) {
        $$pr = HEAP32[$118>>2]|0;
        $135 = $$pr;
       }
       $134 = ($135|0)==(0);
       if ($134) {
        HEAP32[$110>>2] = 0;
        $resp$1$ph = $121;
       } else {
        $$sum = (($85) + -2)|0;
        $136 = (($120) + ($$sum<<2)|0);
        $resp$1$ph = $136;
       }
       $137 = ($85|0)>(1);
       if ($137) {
        $i$129 = 0;$resp$128 = $resp$1$ph;$wnump$027 = $104;
        while(1) {
         $138 = HEAP32[$wnump$027>>2]|0;
         $139 = ((($wnump$027)) + -4|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ($138|0)==($97|0);
         L81: do {
          if ($141) {
           $q$1 = -1;
          } else {
           $142 = (_bn_div_words($138,$140,$97)|0);
           $143 = Math_imul($142, $97)|0;
           $144 = (($140) - ($143))|0;
           $147 = (___muldi3(($142|0),0,($145|0),($146|0))|0);
           $148 = tempRet0;
           $149 = ((($wnump$027)) + -8|0);
           $150 = HEAP32[$149>>2]|0;
           $151 = ($148>>>0)>($144>>>0);
           $152 = ($147>>>0)>($150>>>0);
           $153 = ($148|0)==($144|0);
           $154 = $153 & $152;
           $155 = $151 | $154;
           if ($155) {
            $166 = $147;$167 = $148;$q$019 = $142;$rem$020 = $144;
           } else {
            $q$1 = $142;
            break;
           }
           while(1) {
            $164 = (($q$019) + -1)|0;
            $158 = (($rem$020) + ($97))|0;
            $165 = ($158>>>0)<($97>>>0);
            $160 = (_i64Subtract(($166|0),($167|0),($145|0),($146|0))|0);
            $157 = tempRet0;
            if ($165) {
             $q$1 = $164;
             break L81;
            }
            $156 = ($157>>>0)>($158>>>0);
            $159 = ($160>>>0)>($150>>>0);
            $161 = ($157|0)==($158|0);
            $162 = $161 & $159;
            $163 = $156 | $162;
            if ($163) {
             $166 = $160;$167 = $157;$q$019 = $164;$rem$020 = $158;
            } else {
             $q$1 = $164;
             break;
            }
           }
          }
         } while(0);
         $168 = HEAP32[$32>>2]|0;
         $169 = HEAP32[$34>>2]|0;
         $170 = (_bn_mul_words($168,$169,$84,$q$1)|0);
         $171 = HEAP32[$32>>2]|0;
         $172 = (($171) + ($84<<2)|0);
         HEAP32[$172>>2] = $170;
         $173 = HEAP32[$wnum>>2]|0;
         $174 = ((($173)) + -4|0);
         HEAP32[$wnum>>2] = $174;
         $175 = HEAP32[$32>>2]|0;
         $176 = (_bn_sub_words($174,$174,$175,$122)|0);
         $177 = ($176|0)==(0);
         do {
          if ($177) {
           $q$2 = $q$1;
          } else {
           $178 = (($q$1) + -1)|0;
           $179 = HEAP32[$wnum>>2]|0;
           $180 = HEAP32[$34>>2]|0;
           $181 = (_bn_add_words($179,$179,$180,$84)|0);
           $182 = ($181|0)==(0);
           if ($182) {
            $q$2 = $178;
            break;
           }
           $183 = HEAP32[$wnump$027>>2]|0;
           $184 = (($183) + 1)|0;
           HEAP32[$wnump$027>>2] = $184;
           $q$2 = $178;
          }
         } while(0);
         HEAP32[$resp$128>>2] = $q$2;
         $185 = (($i$129) + 1)|0;
         $186 = ((($resp$128)) + -4|0);
         $187 = ($185|0)<($119|0);
         if ($187) {
          $i$129 = $185;$resp$128 = $186;$wnump$027 = $139;
         } else {
          break;
         }
        }
       }
       $188 = HEAP32[$51>>2]|0;
       $189 = ($188|0)>(0);
       if ($189) {
        $190 = HEAP32[$33>>2]|0;
        $191 = (($188) + -1)|0;
        $192 = (($190) + ($191<<2)|0);
        $ftl$011 = $192;$tmp_top$012 = $188;
        while(1) {
         $193 = HEAP32[$ftl$011>>2]|0;
         $194 = ($193|0)==(0);
         if (!($194)) {
          $tmp_top$0$lcssa = $tmp_top$012;
          break;
         }
         $195 = ((($ftl$011)) + -4|0);
         $196 = (($tmp_top$012) + -1)|0;
         $197 = ($tmp_top$012|0)>(1);
         if ($197) {
          $ftl$011 = $195;$tmp_top$012 = $196;
         } else {
          $tmp_top$0$lcssa = $196;
          break;
         }
        }
        HEAP32[$51>>2] = $tmp_top$0$lcssa;
       }
       $198 = ($rm|0)==(0|0);
       do {
        if (!($198)) {
         $199 = HEAP32[$105>>2]|0;
         (_BN_rshift($rm,$33,$47)|0);
         $200 = ((($rm)) + 4|0);
         $201 = HEAP32[$200>>2]|0;
         $202 = ($201|0)==(0);
         if ($202) {
          break;
         }
         $203 = ((($rm)) + 12|0);
         HEAP32[$203>>2] = $199;
        }
       } while(0);
       do {
        if ($25) {
         $204 = HEAP32[$118>>2]|0;
         $205 = ($204|0)>(0);
         if (!($205)) {
          break;
         }
         $206 = HEAP32[$res$0>>2]|0;
         $207 = (($204) + -1)|0;
         $208 = (($206) + ($207<<2)|0);
         $ftl1$07 = $208;$tmp_top2$08 = $204;
         while(1) {
          $209 = HEAP32[$ftl1$07>>2]|0;
          $210 = ($209|0)==(0);
          if (!($210)) {
           $tmp_top2$0$lcssa = $tmp_top2$08;
           break;
          }
          $211 = ((($ftl1$07)) + -4|0);
          $212 = (($tmp_top2$08) + -1)|0;
          $213 = ($tmp_top2$08|0)>(1);
          if ($213) {
           $ftl1$07 = $211;$tmp_top2$08 = $212;
          } else {
           $tmp_top2$0$lcssa = $212;
           break;
          }
         }
         HEAP32[$118>>2] = $tmp_top2$0$lcssa;
        }
       } while(0);
       _BN_CTX_end($ctx);
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   } while(0);
   _BN_CTX_end($ctx);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _ERR_put_error(3,107,107,89409,207);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _BN_mod_exp($r,$a,$p,$m,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($m)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = HEAP32[$m>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 1;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = ((($a)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(1);
   if ($9) {
    $10 = ((($a)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0);
    if ($12) {
     $13 = ((($p)) + 16|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = $14 & 4;
     $16 = ($15|0)==(0);
     if ($16) {
      $17 = HEAP32[$a>>2]|0;
      $18 = HEAP32[$17>>2]|0;
      $19 = (_BN_mod_exp_mont_word($r,$18,$p,$m,$ctx,0)|0);
      $ret$0 = $19;
      return ($ret$0|0);
     }
    }
   }
   $20 = (_BN_mod_exp_mont($r,$a,$p,$m,$ctx,0)|0);
   $ret$0 = $20;
   return ($ret$0|0);
  }
 }
 $21 = (_BN_mod_exp_recp($r,$a,$p,$m,$ctx)|0);
 $ret$0 = $21;
 return ($ret$0|0);
}
function _BN_mod_exp_mont_word($rr,$a,$p,$m,$ctx,$in_mont) {
 $rr = $rr|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $in_mont = $in_mont|0;
 var $$0 = 0, $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $b$026 = 0, $mont$0 = 0, $mont$1 = 0, $next_w$010 = 0, $next_w$09 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $r$0$lcssa = 0, $r$029 = 0, $r$211 = 0, $r$212 = 0, $r$5 = 0;
 var $r$617 = 0, $r_is_one$0$lcssa = 0, $r_is_one$027 = 0, $r_is_one$28 = 0, $r_is_one$5 = 0, $ret$1 = 0, $ret$121 = 0, $t$0$lcssa = 0, $t$030 = 0, $t$213 = 0, $t$214 = 0, $t$5 = 0, $w$0$lcssa = 0, $w$028 = 0, $w$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _ERR_put_error(3,117,66,89418,1221);
  $$0 = -1;
  return ($$0|0);
 }
 $4 = ((($m)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[$m>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 1;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = ($5|0)==(1);
   if ($11) {
    $12 = (($a>>>0) % ($8>>>0))&-1;
    $$06 = $12;
   } else {
    $$06 = $a;
   }
   $13 = (_BN_num_bits($p)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = HEAP32[$4>>2]|0;
    $16 = ($15|0)==(1);
    if ($16) {
     $17 = HEAP32[$m>>2]|0;
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(1);
     if ($19) {
      $20 = ((($m)) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($21|0)==(0);
      if ($22) {
       (_BN_set_word($rr,0)|0);
       $$0 = 1;
       return ($$0|0);
      }
     }
    }
    $23 = (_BN_set_word($rr,1)|0);
    $$0 = $23;
    return ($$0|0);
   }
   $24 = ($$06|0)==(0);
   if ($24) {
    (_BN_set_word($rr,0)|0);
    $$0 = 1;
    return ($$0|0);
   }
   _BN_CTX_start($ctx);
   $25 = (_BN_CTX_get($ctx)|0);
   $26 = (_BN_CTX_get($ctx)|0);
   $27 = (_BN_CTX_get($ctx)|0);
   $28 = ($25|0)==(0|0);
   $29 = ($26|0)==(0|0);
   $or$cond = $28 | $29;
   $30 = ($27|0)==(0|0);
   $or$cond3 = $or$cond | $30;
   do {
    if ($or$cond3) {
     $ret$121 = 0;
    } else {
     $31 = ($in_mont|0)==(0|0);
     if ($31) {
      $32 = (_BN_MONT_CTX_new()|0);
      $33 = ($32|0)==(0|0);
      if ($33) {
       $ret$121 = 0;
       break;
      }
      $34 = (_BN_MONT_CTX_set($32,$m,$ctx)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       $mont$1 = $32;$ret$1 = 0;
      } else {
       $mont$0 = $32;
       label = 20;
      }
     } else {
      $mont$0 = $in_mont;
      label = 20;
     }
     L30: do {
      if ((label|0) == 20) {
       $36 = (($13) + -2)|0;
       $37 = ($36|0)>(-1);
       if ($37) {
        $38 = ((($mont$0)) + 4|0);
        $b$026 = $36;$r$029 = $26;$r_is_one$027 = 1;$t$030 = $27;$w$028 = $$06;
        while(1) {
         $39 = Math_imul($w$028, $w$028)|0;
         $40 = (($39>>>0) / ($w$028>>>0))&-1;
         $41 = ($40|0)==($w$028|0);
         $42 = ($r_is_one$027|0)==(0);
         do {
          if ($41) {
           if ($42) {
            $next_w$09 = $39;$r$211 = $r$029;$t$213 = $t$030;
            label = 29;
           } else {
            $84 = 1;$next_w$010 = $39;$r$212 = $r$029;$r_is_one$28 = $r_is_one$027;$t$214 = $t$030;
           }
          } else {
           if ($42) {
            $47 = (_BN_mul_word($r$029,$w$028)|0);
            $48 = ($47|0)==(0);
            if ($48) {
             $mont$1 = $mont$0;$ret$1 = 0;
             break L30;
            }
            $49 = (_BN_div(0,$t$030,$r$029,$m,$ctx)|0);
            $50 = ($49|0)==(0);
            if ($50) {
             $mont$1 = $mont$0;$ret$1 = 0;
             break L30;
            } else {
             $next_w$09 = 1;$r$211 = $t$030;$t$213 = $r$029;
             label = 29;
             break;
            }
           } else {
            $43 = (_BN_set_word($r$029,$w$028)|0);
            $44 = ($43|0)==(0);
            if ($44) {
             $mont$1 = $mont$0;$ret$1 = 0;
             break L30;
            }
            $45 = (_BN_mod_mul_montgomery($r$029,$r$029,$38,$mont$0,$ctx)|0);
            $46 = ($45|0)==(0);
            if ($46) {
             $mont$1 = $mont$0;$ret$1 = 0;
             break L30;
            } else {
             $next_w$09 = 1;$r$211 = $r$029;$t$213 = $t$030;
             label = 29;
             break;
            }
           }
          }
         } while(0);
         if ((label|0) == 29) {
          label = 0;
          $51 = (_BN_mod_mul_montgomery($r$211,$r$211,$r$211,$mont$0,$ctx)|0);
          $52 = ($51|0)==(0);
          if ($52) {
           $mont$1 = $mont$0;$ret$1 = 0;
           break L30;
          } else {
           $84 = 0;$next_w$010 = $next_w$09;$r$212 = $r$211;$r_is_one$28 = 0;$t$214 = $t$213;
          }
         }
         $53 = (_BN_is_bit_set($p,$b$026)|0);
         $54 = ($53|0)==(0);
         do {
          if ($54) {
           $r$5 = $r$212;$r_is_one$5 = $r_is_one$28;$t$5 = $t$214;$w$1 = $next_w$010;
          } else {
           $55 = Math_imul($next_w$010, $$06)|0;
           $56 = (($55>>>0) / ($$06>>>0))&-1;
           $57 = ($56|0)==($next_w$010|0);
           if ($57) {
            $r$5 = $r$212;$r_is_one$5 = $r_is_one$28;$t$5 = $t$214;$w$1 = $55;
           } else {
            if ($84) {
             $58 = (_BN_set_word($r$212,$next_w$010)|0);
             $59 = ($58|0)==(0);
             if ($59) {
              $mont$1 = $mont$0;$ret$1 = 0;
              break L30;
             }
             $60 = (_BN_mod_mul_montgomery($r$212,$r$212,$38,$mont$0,$ctx)|0);
             $61 = ($60|0)==(0);
             if ($61) {
              $mont$1 = $mont$0;$ret$1 = 0;
              break L30;
             } else {
              $r$5 = $r$212;$r_is_one$5 = 0;$t$5 = $t$214;$w$1 = $$06;
              break;
             }
            } else {
             $62 = (_BN_mul_word($r$212,$next_w$010)|0);
             $63 = ($62|0)==(0);
             if ($63) {
              $mont$1 = $mont$0;$ret$1 = 0;
              break L30;
             }
             $64 = (_BN_div(0,$t$214,$r$212,$m,$ctx)|0);
             $65 = ($64|0)==(0);
             if ($65) {
              $mont$1 = $mont$0;$ret$1 = 0;
              break L30;
             } else {
              $r$5 = $t$214;$r_is_one$5 = $r_is_one$28;$t$5 = $r$212;$w$1 = $$06;
              break;
             }
            }
           }
          }
         } while(0);
         $66 = (($b$026) + -1)|0;
         $67 = ($b$026|0)>(0);
         if ($67) {
          $b$026 = $66;$r$029 = $r$5;$r_is_one$027 = $r_is_one$5;$t$030 = $t$5;$w$028 = $w$1;
         } else {
          $r$0$lcssa = $r$5;$r_is_one$0$lcssa = $r_is_one$5;$t$0$lcssa = $t$5;$w$0$lcssa = $w$1;
          break;
         }
        }
       } else {
        $r$0$lcssa = $26;$r_is_one$0$lcssa = 1;$t$0$lcssa = $27;$w$0$lcssa = $$06;
       }
       $68 = ($w$0$lcssa|0)==(1);
       $69 = ($r_is_one$0$lcssa|0)==(0);
       do {
        if ($68) {
         if ($69) {
          $r$617 = $r$0$lcssa;
          label = 46;
         } else {
          $79 = (_BN_set_word($rr,1)|0);
          $80 = ($79|0)==(0);
          if ($80) {
           $mont$1 = $mont$0;$ret$1 = 0;
           break L30;
          }
         }
        } else {
         if ($69) {
          $75 = (_BN_mul_word($r$0$lcssa,$w$0$lcssa)|0);
          $76 = ($75|0)==(0);
          if ($76) {
           $mont$1 = $mont$0;$ret$1 = 0;
           break L30;
          }
          $77 = (_BN_div(0,$t$0$lcssa,$r$0$lcssa,$m,$ctx)|0);
          $78 = ($77|0)==(0);
          if ($78) {
           $mont$1 = $mont$0;$ret$1 = 0;
           break L30;
          } else {
           $r$617 = $t$0$lcssa;
           label = 46;
           break;
          }
         } else {
          $70 = (_BN_set_word($r$0$lcssa,$w$0$lcssa)|0);
          $71 = ($70|0)==(0);
          if ($71) {
           $mont$1 = $mont$0;$ret$1 = 0;
           break L30;
          }
          $72 = ((($mont$0)) + 4|0);
          $73 = (_BN_mod_mul_montgomery($r$0$lcssa,$r$0$lcssa,$72,$mont$0,$ctx)|0);
          $74 = ($73|0)==(0);
          if ($74) {
           $mont$1 = $mont$0;$ret$1 = 0;
           break L30;
          } else {
           $r$617 = $r$0$lcssa;
           label = 46;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 46) {
        $81 = (_BN_from_montgomery($rr,$r$617,$mont$0,$ctx)|0);
        $82 = ($81|0)==(0);
        if ($82) {
         $mont$1 = $mont$0;$ret$1 = 0;
         break;
        }
       }
       $mont$1 = $mont$0;$ret$1 = 1;
      }
     } while(0);
     $83 = ($mont$1|0)!=(0|0);
     $or$cond5 = $31 & $83;
     if ($or$cond5) {
      _BN_MONT_CTX_free($mont$1);
      $ret$121 = $ret$1;
     } else {
      $ret$121 = $ret$1;
     }
    }
   } while(0);
   _BN_CTX_end($ctx);
   $$0 = $ret$121;
   return ($$0|0);
  }
 }
 _ERR_put_error(3,117,102,89418,1229);
 $$0 = 0;
 return ($$0|0);
}
function _BN_mod_exp_mont($rr,$a,$p,$m,$ctx,$in_mont) {
 $rr = $rr|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $in_mont = $in_mont|0;
 var $$ = 0, $$0 = 0, $$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $aa$0 = 0, $exitcond = 0, $ftl$031 = 0, $i$042 = 0, $i$139 = 0, $i$222 = 0, $i$329 = 0, $mont$0 = 0, $mont$1 = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond4 = 0, $ret$1 = 0, $ret$18 = 0, $start$0$ph = 0;
 var $tmp_top$0$lcssa = 0, $tmp_top$032 = 0, $val = 0, $wend$0$lcssa = 0, $wend$020 = 0, $wend$1 = 0, $wstart$0$lcssa = 0, $wstart$0$ph = 0, $wstart$019 = 0, $wstart$019$us = 0, $wvalue$0$lcssa = 0, $wvalue$021 = 0, $wvalue$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $val = sp;
 $0 = ((($p)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (_BN_mod_exp_mont_consttime($rr,$a,$p,$m,$ctx,$in_mont)|0);
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($m)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = HEAP32[$m>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 1;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = (_BN_num_bits($p)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = HEAP32[$5>>2]|0;
    $15 = ($14|0)==(1);
    if ($15) {
     $16 = HEAP32[$m>>2]|0;
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(1);
     if ($18) {
      $19 = ((($m)) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0);
      if ($21) {
       (_BN_set_word($rr,0)|0);
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
    $22 = (_BN_set_word($rr,1)|0);
    $$0 = $22;
    STACKTOP = sp;return ($$0|0);
   }
   _BN_CTX_start($ctx);
   $23 = (_BN_CTX_get($ctx)|0);
   $24 = (_BN_CTX_get($ctx)|0);
   $25 = (_BN_CTX_get($ctx)|0);
   HEAP32[$val>>2] = $25;
   $notlhs = ($23|0)==(0|0);
   $notrhs = ($24|0)==(0|0);
   $or$cond$not = $notlhs | $notrhs;
   $26 = ($25|0)==(0|0);
   $or$cond4 = $or$cond$not | $26;
   do {
    if ($or$cond4) {
     $ret$18 = 0;
    } else {
     $27 = ($in_mont|0)==(0|0);
     if ($27) {
      $28 = (_BN_MONT_CTX_new()|0);
      $29 = ($28|0)==(0|0);
      if ($29) {
       $ret$18 = 0;
       break;
      }
      $30 = (_BN_MONT_CTX_set($28,$m,$ctx)|0);
      $31 = ($30|0)==(0);
      if ($31) {
       $mont$1 = $28;$ret$1 = 0;
      } else {
       $mont$0 = $28;
       label = 16;
      }
     } else {
      $mont$0 = $in_mont;
      label = 16;
     }
     L23: do {
      if ((label|0) == 16) {
       $32 = ((($a)) + 12|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(0);
       if ($34) {
        $35 = (_BN_ucmp($a,$m)|0);
        $36 = ($35|0)>(-1);
        if ($36) {
         label = 18;
        } else {
         $aa$0 = $a;
        }
       } else {
        label = 18;
       }
       if ((label|0) == 18) {
        $37 = (_BN_nnmod($25,$a,$m,$ctx)|0);
        $38 = ($37|0)==(0);
        if ($38) {
         $mont$1 = $mont$0;$ret$1 = 0;
         break;
        } else {
         $aa$0 = $25;
        }
       }
       $39 = ((($aa$0)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(0);
       if ($41) {
        (_BN_set_word($rr,0)|0);
        $mont$1 = $mont$0;$ret$1 = 1;
        break;
       }
       $42 = ((($mont$0)) + 4|0);
       $43 = (_BN_mod_mul_montgomery($25,$aa$0,$42,$mont$0,$ctx)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        $mont$1 = $mont$0;$ret$1 = 0;
       } else {
        $45 = ($12|0)>(671);
        if ($45) {
         $$ph = 6;
         label = 26;
        } else {
         $46 = ($12|0)>(239);
         if ($46) {
          $$ph = 5;
          label = 26;
         } else {
          $47 = ($12|0)>(79);
          if ($47) {
           $$ph = 4;
           label = 26;
          } else {
           $48 = ($12|0)>(23);
           if ($48) {
            $$ph = 3;
            label = 26;
           } else {
            $98 = 1;
           }
          }
         }
        }
        if ((label|0) == 26) {
         $49 = (_BN_mod_mul_montgomery($23,$25,$25,$mont$0,$ctx)|0);
         $50 = ($49|0)==(0);
         if ($50) {
          $mont$1 = $mont$0;$ret$1 = 0;
          break;
         }
         $51 = (($$ph) + -1)|0;
         $52 = 1 << $51;
         $53 = ($52|0)>(1);
         if ($53) {
          $i$042 = 1;
          while(1) {
           $56 = (_BN_CTX_get($ctx)|0);
           $57 = (($val) + ($i$042<<2)|0);
           HEAP32[$57>>2] = $56;
           $58 = ($56|0)==(0|0);
           if ($58) {
            $mont$1 = $mont$0;$ret$1 = 0;
            break L23;
           }
           $59 = (($i$042) + -1)|0;
           $60 = (($val) + ($59<<2)|0);
           $61 = HEAP32[$60>>2]|0;
           $62 = (_BN_mod_mul_montgomery($56,$61,$23,$mont$0,$ctx)|0);
           $63 = ($62|0)==(0);
           $55 = (($i$042) + 1)|0;
           if ($63) {
            $mont$1 = $mont$0;$ret$1 = 0;
            break L23;
           }
           $54 = ($55|0)<($52|0);
           if ($54) {
            $i$042 = $55;
           } else {
            $98 = $$ph;
            break;
           }
          }
         } else {
          $98 = $$ph;
         }
        }
        $64 = (($12) + -1)|0;
        $65 = HEAP32[$5>>2]|0;
        $66 = (($65) + -1)|0;
        $67 = HEAP32[$m>>2]|0;
        $68 = (($67) + ($66<<2)|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)<(0);
        if ($70) {
         $71 = ((($24)) + 8|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = ($65|0)>($72|0);
         if ($73) {
          $74 = (_bn_expand2($24,$65)|0);
          $75 = ($74|0)==(0|0);
          if ($75) {
           $mont$1 = $mont$0;$ret$1 = 0;
           break;
          }
          $$pre = HEAP32[$m>>2]|0;
          $77 = $$pre;
         } else {
          $77 = $67;
         }
         $76 = HEAP32[$77>>2]|0;
         $78 = (0 - ($76))|0;
         $79 = HEAP32[$24>>2]|0;
         HEAP32[$79>>2] = $78;
         $80 = ($65|0)>(1);
         if ($80) {
          $i$139 = 1;
          while(1) {
           $81 = (($77) + ($i$139<<2)|0);
           $82 = HEAP32[$81>>2]|0;
           $83 = $82 ^ -1;
           $84 = (($79) + ($i$139<<2)|0);
           HEAP32[$84>>2] = $83;
           $85 = (($i$139) + 1)|0;
           $exitcond = ($85|0)==($65|0);
           if ($exitcond) {
            break;
           } else {
            $i$139 = $85;
           }
          }
         }
         $86 = ((($24)) + 4|0);
         HEAP32[$86>>2] = $65;
         $87 = ($65|0)>(0);
         if ($87) {
          $88 = (($79) + ($66<<2)|0);
          $ftl$031 = $88;$tmp_top$032 = $65;
          while(1) {
           $89 = HEAP32[$ftl$031>>2]|0;
           $90 = ($89|0)==(0);
           if (!($90)) {
            $tmp_top$0$lcssa = $tmp_top$032;
            break;
           }
           $91 = ((($ftl$031)) + -4|0);
           $92 = (($tmp_top$032) + -1)|0;
           $93 = ($tmp_top$032|0)>(1);
           if ($93) {
            $ftl$031 = $91;$tmp_top$032 = $92;
           } else {
            $tmp_top$0$lcssa = $92;
            break;
           }
          }
          HEAP32[$86>>2] = $tmp_top$0$lcssa;
         }
        } else {
         $94 = (_BN_value_one()|0);
         $95 = (_BN_mod_mul_montgomery($24,$94,$42,$mont$0,$ctx)|0);
         $96 = ($95|0)==(0);
         if ($96) {
          $mont$1 = $mont$0;$ret$1 = 0;
          break;
         }
        }
        $97 = ($98|0)>(1);
        $start$0$ph = 1;$wstart$0$ph = $64;
        L63: while(1) {
         $99 = (_BN_is_bit_set($p,$wstart$0$ph)|0);
         $100 = ($99|0)==(0);
         L65: do {
          if ($100) {
           $101 = ($start$0$ph|0)==(0);
           if ($101) {
            $wstart$019$us = $wstart$0$ph;
           } else {
            $wstart$019 = $wstart$0$ph;
            while(1) {
             $108 = ($wstart$019|0)==(0);
             if ($108) {
              break L63;
             }
             $109 = (($wstart$019) + -1)|0;
             $110 = (_BN_is_bit_set($p,$109)|0);
             $111 = ($110|0)==(0);
             if ($111) {
              $wstart$019 = $109;
             } else {
              $wstart$0$lcssa = $109;
              break L65;
             }
            }
           }
           while(1) {
            $102 = (_BN_mod_mul_montgomery($24,$24,$24,$mont$0,$ctx)|0);
            $103 = ($102|0)==(0);
            if ($103) {
             $mont$1 = $mont$0;$ret$1 = 0;
             break L23;
            }
            $104 = ($wstart$019$us|0)==(0);
            if ($104) {
             break L63;
            }
            $105 = (($wstart$019$us) + -1)|0;
            $106 = (_BN_is_bit_set($p,$105)|0);
            $107 = ($106|0)==(0);
            if ($107) {
             $wstart$019$us = $105;
            } else {
             $wstart$0$lcssa = $105;
             break;
            }
           }
          } else {
           $wstart$0$lcssa = $wstart$0$ph;
          }
         } while(0);
         L76: do {
          if ($97) {
           $i$222 = 1;$wend$020 = 0;$wvalue$021 = 1;
           while(1) {
            $112 = (($wstart$0$lcssa) - ($i$222))|0;
            $113 = ($112|0)<(0);
            if ($113) {
             $wend$0$lcssa = $wend$020;$wvalue$0$lcssa = $wvalue$021;
             break L76;
            }
            $114 = (_BN_is_bit_set($p,$112)|0);
            $115 = ($114|0)==(0);
            if ($115) {
             $wend$1 = $wend$020;$wvalue$1 = $wvalue$021;
            } else {
             $116 = (($i$222) - ($wend$020))|0;
             $117 = $wvalue$021 << $116;
             $118 = $117 | 1;
             $wend$1 = $i$222;$wvalue$1 = $118;
            }
            $119 = (($i$222) + 1)|0;
            $120 = ($119|0)<($98|0);
            if ($120) {
             $i$222 = $119;$wend$020 = $wend$1;$wvalue$021 = $wvalue$1;
            } else {
             $wend$0$lcssa = $wend$1;$wvalue$0$lcssa = $wvalue$1;
             break;
            }
           }
          } else {
           $wend$0$lcssa = 0;$wvalue$0$lcssa = 1;
          }
         } while(0);
         $121 = (($wend$0$lcssa) + 1)|0;
         $122 = ($start$0$ph|0)==(0);
         $123 = ($wend$0$lcssa|0)>(-1);
         $or$cond = $122 & $123;
         if ($or$cond) {
          $i$329 = 0;
          while(1) {
           $126 = (_BN_mod_mul_montgomery($24,$24,$24,$mont$0,$ctx)|0);
           $127 = ($126|0)==(0);
           $125 = (($i$329) + 1)|0;
           if ($127) {
            $mont$1 = $mont$0;$ret$1 = 0;
            break L23;
           }
           $124 = ($125|0)<($121|0);
           if ($124) {
            $i$329 = $125;
           } else {
            break;
           }
          }
         }
         $128 = $wvalue$0$lcssa >> 1;
         $129 = (($val) + ($128<<2)|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = (_BN_mod_mul_montgomery($24,$24,$130,$mont$0,$ctx)|0);
         $132 = ($131|0)==(0);
         if ($132) {
          $mont$1 = $mont$0;$ret$1 = 0;
          break L23;
         }
         $133 = (($wstart$0$lcssa) - ($121))|0;
         $134 = ($133|0)<(0);
         if ($134) {
          break;
         } else {
          $start$0$ph = 0;$wstart$0$ph = $133;
         }
        }
        $135 = (_BN_from_montgomery($rr,$24,$mont$0,$ctx)|0);
        $not$ = ($135|0)!=(0);
        $$ = $not$&1;
        $mont$1 = $mont$0;$ret$1 = $$;
       }
      }
     } while(0);
     $136 = ($mont$1|0)!=(0|0);
     $or$cond3 = $27 & $136;
     if ($or$cond3) {
      _BN_MONT_CTX_free($mont$1);
      $ret$18 = $ret$1;
     } else {
      $ret$18 = $ret$1;
     }
    }
   } while(0);
   _BN_CTX_end($ctx);
   $$0 = $ret$18;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(3,109,102,89418,422);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _BN_mod_exp_recp($r,$a,$p,$m,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $i$022 = 0, $i$112 = 0, $i$220 = 0;
 var $or$cond = 0, $or$cond37 = 0, $recp = 0, $ret$1 = 0, $start$0$ph = 0, $val = 0, $wend$0$lcssa = 0, $wend$011 = 0, $wend$1 = 0, $wstart$0$lcssa = 0, $wstart$0$ph = 0, $wstart$010 = 0, $wstart$010$us = 0, $wvalue$0$lcssa = 0, $wvalue$013 = 0, $wvalue$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $val = sp + 56|0;
 $recp = sp;
 $0 = ((($p)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _ERR_put_error(3,125,66,89418,281);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_BN_num_bits($p)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($m)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP32[$m>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = ((($m)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0);
    if ($14) {
     (_BN_set_word($r,0)|0);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
  $15 = (_BN_set_word($r,1)|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 _BN_CTX_start($ctx);
 $16 = (_BN_CTX_get($ctx)|0);
 $17 = (_BN_CTX_get($ctx)|0);
 HEAP32[$val>>2] = $17;
 $18 = ($16|0)==(0|0);
 $19 = ($17|0)==(0|0);
 $or$cond = $18 | $19;
 L15: do {
  if ($or$cond) {
   $ret$1 = 0;
  } else {
   _BN_RECP_CTX_init($recp);
   $20 = ((($m)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0);
   if ($22) {
    $28 = (_BN_RECP_CTX_set($recp,$m,$ctx)|0);
    $29 = ($28|0)<(1);
    if ($29) {
     $ret$1 = 0;
     break;
    }
   } else {
    $23 = (_BN_copy($16,$m)|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     $ret$1 = 0;
     break;
    }
    $25 = ((($16)) + 12|0);
    HEAP32[$25>>2] = 0;
    $26 = (_BN_RECP_CTX_set($recp,$16,$ctx)|0);
    $27 = ($26|0)<(1);
    if ($27) {
     $ret$1 = 0;
     break;
    }
   }
   $30 = (_BN_nnmod($17,$a,$m,$ctx)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $ret$1 = 0;
   } else {
    $32 = ((($17)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0);
    if ($34) {
     (_BN_set_word($r,0)|0);
     $ret$1 = 1;
     break;
    }
    $35 = ($4|0)>(671);
    if ($35) {
     $$ph = 6;
     label = 21;
    } else {
     $36 = ($4|0)>(239);
     if ($36) {
      $$ph = 5;
      label = 21;
     } else {
      $37 = ($4|0)>(79);
      if ($37) {
       $$ph = 4;
       label = 21;
      } else {
       $38 = ($4|0)>(23);
       if ($38) {
        $$ph = 3;
        label = 21;
       } else {
        $58 = 1;
       }
      }
     }
    }
    if ((label|0) == 21) {
     $39 = (_BN_mod_mul_reciprocal($16,$17,$17,$recp,$ctx)|0);
     $40 = ($39|0)==(0);
     if ($40) {
      $ret$1 = 0;
      break;
     }
     $41 = (($$ph) + -1)|0;
     $42 = 1 << $41;
     $43 = ($42|0)>(1);
     if ($43) {
      $i$022 = 1;
      while(1) {
       $46 = (_BN_CTX_get($ctx)|0);
       $47 = (($val) + ($i$022<<2)|0);
       HEAP32[$47>>2] = $46;
       $48 = ($46|0)==(0|0);
       if ($48) {
        $ret$1 = 0;
        break L15;
       }
       $49 = (($i$022) + -1)|0;
       $50 = (($val) + ($49<<2)|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = (_BN_mod_mul_reciprocal($46,$51,$16,$recp,$ctx)|0);
       $53 = ($52|0)==(0);
       $45 = (($i$022) + 1)|0;
       if ($53) {
        $ret$1 = 0;
        break L15;
       }
       $44 = ($45|0)<($42|0);
       if ($44) {
        $i$022 = $45;
       } else {
        $58 = $$ph;
        break;
       }
      }
     } else {
      $58 = $$ph;
     }
    }
    $54 = (_BN_set_word($r,1)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $ret$1 = 0;
    } else {
     $56 = (($4) + -1)|0;
     $57 = ($58|0)>(1);
     $start$0$ph = 1;$wstart$0$ph = $56;
     while(1) {
      $59 = (_BN_is_bit_set($p,$wstart$0$ph)|0);
      $60 = ($59|0)==(0);
      L41: do {
       if ($60) {
        $61 = ($start$0$ph|0)==(0);
        if ($61) {
         $wstart$010$us = $wstart$0$ph;
        } else {
         $wstart$010 = $wstart$0$ph;
         while(1) {
          $68 = ($wstart$010|0)==(0);
          if ($68) {
           $ret$1 = 1;
           break L15;
          }
          $69 = (($wstart$010) + -1)|0;
          $70 = (_BN_is_bit_set($p,$69)|0);
          $71 = ($70|0)==(0);
          if ($71) {
           $wstart$010 = $69;
          } else {
           $wstart$0$lcssa = $69;
           break L41;
          }
         }
        }
        while(1) {
         $62 = (_BN_mod_mul_reciprocal($r,$r,$r,$recp,$ctx)|0);
         $63 = ($62|0)==(0);
         if ($63) {
          $ret$1 = 0;
          break L15;
         }
         $64 = ($wstart$010$us|0)==(0);
         if ($64) {
          $ret$1 = 1;
          break L15;
         }
         $65 = (($wstart$010$us) + -1)|0;
         $66 = (_BN_is_bit_set($p,$65)|0);
         $67 = ($66|0)==(0);
         if ($67) {
          $wstart$010$us = $65;
         } else {
          $wstart$0$lcssa = $65;
          break;
         }
        }
       } else {
        $wstart$0$lcssa = $wstart$0$ph;
       }
      } while(0);
      L52: do {
       if ($57) {
        $i$112 = 1;$wend$011 = 0;$wvalue$013 = 1;
        while(1) {
         $72 = (($wstart$0$lcssa) - ($i$112))|0;
         $73 = ($72|0)<(0);
         if ($73) {
          $wend$0$lcssa = $wend$011;$wvalue$0$lcssa = $wvalue$013;
          break L52;
         }
         $74 = (_BN_is_bit_set($p,$72)|0);
         $75 = ($74|0)==(0);
         if ($75) {
          $wend$1 = $wend$011;$wvalue$1 = $wvalue$013;
         } else {
          $76 = (($i$112) - ($wend$011))|0;
          $77 = $wvalue$013 << $76;
          $78 = $77 | 1;
          $wend$1 = $i$112;$wvalue$1 = $78;
         }
         $79 = (($i$112) + 1)|0;
         $80 = ($79|0)<($58|0);
         if ($80) {
          $i$112 = $79;$wend$011 = $wend$1;$wvalue$013 = $wvalue$1;
         } else {
          $wend$0$lcssa = $wend$1;$wvalue$0$lcssa = $wvalue$1;
          break;
         }
        }
       } else {
        $wend$0$lcssa = 0;$wvalue$0$lcssa = 1;
       }
      } while(0);
      $81 = (($wend$0$lcssa) + 1)|0;
      $82 = ($start$0$ph|0)==(0);
      $83 = ($wend$0$lcssa|0)>(-1);
      $or$cond37 = $82 & $83;
      if ($or$cond37) {
       $i$220 = 0;
       while(1) {
        $86 = (_BN_mod_mul_reciprocal($r,$r,$r,$recp,$ctx)|0);
        $87 = ($86|0)==(0);
        $85 = (($i$220) + 1)|0;
        if ($87) {
         $ret$1 = 0;
         break L15;
        }
        $84 = ($85|0)<($81|0);
        if ($84) {
         $i$220 = $85;
        } else {
         break;
        }
       }
      }
      $88 = $wvalue$0$lcssa >> 1;
      $89 = (($val) + ($88<<2)|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (_BN_mod_mul_reciprocal($r,$r,$90,$recp,$ctx)|0);
      $92 = ($91|0)==(0);
      if ($92) {
       $ret$1 = 0;
       break L15;
      }
      $93 = (($wstart$0$lcssa) - ($81))|0;
      $94 = ($93|0)<(0);
      if ($94) {
       $ret$1 = 1;
       break;
      } else {
       $start$0$ph = 0;$wstart$0$ph = $93;
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($ctx);
 _BN_RECP_CTX_free($recp);
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _BN_mod_exp_mont_consttime($rr,$a,$p,$m,$ctx,$in_mont) {
 $rr = $rr|0;
 $a = $a|0;
 $p = $p|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $in_mont = $in_mont|0;
 var $$ = 0, $$0 = 0, $$alloca_mul = 0, $$lcssa = 0, $$lcssa67 = 0, $$lcssa68 = 0, $$powerbufFree$0 = 0, $$sum = 0, $$top$i = 0, $$top$i14 = 0, $$top$i20 = 0, $$top$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $am = 0, $am$idx$val = 0, $am$idx3$val = 0, $bits$0$lcssa = 0, $bits$042 = 0, $bits$1 = 0;
 var $bits$239 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i12 = 0, $exitcond$i18 = 0, $exitcond$i24 = 0, $i$02$i = 0, $i$02$i10 = 0, $i$02$i16 = 0, $i$02$i22 = 0, $i$048 = 0, $i$146 = 0, $i$244 = 0, $i$341 = 0, $j$01$i = 0, $j$01$i11 = 0, $j$01$i17 = 0, $j$01$i23 = 0, $mont$0 = 0, $mont$1 = 0;
 var $not$ = 0, $or$cond = 0, $powerbuf$0 = 0, $powerbufFree$0 = 0, $powerbufFree$2 = 0, $powerbufLen$0 = 0, $ret$1 = 0, $ret$12732 = 0, $tmp = 0, $tmp$idx$val = 0, $tmp$idx2$val = 0, $tmp$idx4$val = 0, $tmp$idx5$val = 0, $tmp$idx6$val = 0, $tmp$idx7$val = 0, $wvalue$0$lcssa = 0, $wvalue$043 = 0, $wvalue$140 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $tmp = sp + 20|0;
 $am = sp;
 $0 = ((($m)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = HEAP32[$m>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 1;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = (_BN_num_bits($p)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = HEAP32[$0>>2]|0;
    $10 = ($9|0)==(1);
    if ($10) {
     $11 = HEAP32[$m>>2]|0;
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(1);
     if ($13) {
      $14 = ((($m)) + 12|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = ($15|0)==(0);
      if ($16) {
       (_BN_set_word($rr,0)|0);
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
    $17 = (_BN_set_word($rr,1)|0);
    $$0 = $17;
    STACKTOP = sp;return ($$0|0);
   }
   _BN_CTX_start($ctx);
   $18 = ($in_mont|0)==(0|0);
   if ($18) {
    $19 = (_BN_MONT_CTX_new()|0);
    $20 = ($19|0)==(0|0);
    if ($20) {
     $ret$12732 = 0;
    } else {
     $21 = (_BN_MONT_CTX_set($19,$m,$ctx)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      $mont$1 = $19;$powerbuf$0 = 0;$powerbufFree$2 = 0;$powerbufLen$0 = 0;$ret$1 = 0;
      label = 58;
     } else {
      $mont$0 = $19;
      label = 13;
     }
    }
   } else {
    $mont$0 = $in_mont;
    label = 13;
   }
   L17: do {
    if ((label|0) == 13) {
     $23 = ($7|0)>(937);
     if ($23) {
      $29 = 6;
     } else {
      $24 = ($7|0)>(306);
      if ($24) {
       $29 = 5;
      } else {
       $25 = ($7|0)>(89);
       if ($25) {
        $29 = 4;
       } else {
        $26 = ($7|0)>(22);
        $27 = $26 ? 3 : 1;
        $29 = $27;
       }
      }
     }
     $28 = 1 << $29;
     $30 = $1 << $29;
     $31 = $1 << 1;
     $32 = ($31|0)>($28|0);
     $33 = $32 ? $31 : $28;
     $34 = (($33) + ($30))|0;
     $35 = $34 << 2;
     $36 = ($35|0)<(3072);
     $37 = (($35) + 64)|0;
     if ($36) {
      $$alloca_mul = $37;
      $38 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
      $powerbufFree$0 = $38;
     } else {
      $39 = (_CRYPTO_malloc($37,89418,813)|0);
      $40 = ($39|0)==(0|0);
      if ($40) {
       $mont$1 = $mont$0;$powerbuf$0 = 0;$powerbufFree$2 = 0;$powerbufLen$0 = $35;$ret$1 = 0;
       label = 58;
       break;
      } else {
       $powerbufFree$0 = $39;
      }
     }
     $41 = $powerbufFree$0;
     $42 = $41 & 63;
     $43 = (64 - ($42))|0;
     $44 = (($powerbufFree$0) + ($43)|0);
     _memset(($44|0),0,($35|0))|0;
     $$powerbufFree$0 = $36 ? 0 : $powerbufFree$0;
     $45 = $1 << 2;
     $46 = $45 << $29;
     $$sum = (($43) + ($46))|0;
     $47 = (($powerbufFree$0) + ($$sum)|0);
     HEAP32[$tmp>>2] = $47;
     $48 = (($47) + ($1<<2)|0);
     HEAP32[$am>>2] = $48;
     $49 = ((($am)) + 4|0);
     HEAP32[$49>>2] = 0;
     $50 = ((($tmp)) + 4|0);
     HEAP32[$50>>2] = 0;
     $51 = ((($am)) + 8|0);
     HEAP32[$51>>2] = $1;
     $52 = ((($tmp)) + 8|0);
     HEAP32[$52>>2] = $1;
     $53 = ((($am)) + 12|0);
     HEAP32[$53>>2] = 0;
     $54 = ((($tmp)) + 12|0);
     HEAP32[$54>>2] = 0;
     $55 = ((($am)) + 16|0);
     HEAP32[$55>>2] = 2;
     $56 = ((($tmp)) + 16|0);
     HEAP32[$56>>2] = 2;
     $57 = (($1) + -1)|0;
     $58 = HEAP32[$m>>2]|0;
     $59 = (($58) + ($57<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)<(0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = (0 - ($62))|0;
      HEAP32[$47>>2] = $63;
      $64 = ($1|0)>(1);
      if ($64) {
       $i$048 = 1;
       while(1) {
        $65 = (($58) + ($i$048<<2)|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = $66 ^ -1;
        $68 = (($47) + ($i$048<<2)|0);
        HEAP32[$68>>2] = $67;
        $69 = (($i$048) + 1)|0;
        $exitcond = ($69|0)==($1|0);
        if ($exitcond) {
         break;
        } else {
         $i$048 = $69;
        }
       }
      }
      HEAP32[$50>>2] = $1;
     } else {
      $70 = (_BN_value_one()|0);
      $71 = ((($mont$0)) + 4|0);
      $72 = (_BN_mod_mul_montgomery($tmp,$70,$71,$mont$0,$ctx)|0);
      $73 = ($72|0)==(0);
      if ($73) {
       $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
       label = 58;
       break;
      }
     }
     $74 = ((($a)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)==(0);
     if ($76) {
      $77 = (_BN_ucmp($a,$m)|0);
      $78 = ($77|0)>(-1);
      if ($78) {
       label = 27;
      } else {
       $84 = ((($mont$0)) + 4|0);
       $85 = (_BN_mod_mul_montgomery($am,$a,$84,$mont$0,$ctx)|0);
       $86 = ($85|0)==(0);
       if ($86) {
        $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
        label = 58;
        break;
       }
      }
     } else {
      label = 27;
     }
     if ((label|0) == 27) {
      $79 = (_BN_div(0,$am,$a,$m,$ctx)|0);
      $80 = ($79|0)==(0);
      if ($80) {
       $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
       label = 58;
       break;
      }
      $81 = ((($mont$0)) + 4|0);
      $82 = (_BN_mod_mul_montgomery($am,$am,$81,$mont$0,$ctx)|0);
      $83 = ($82|0)==(0);
      if ($83) {
       $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
       label = 58;
       break;
      }
     }
     $tmp$idx$val = HEAP32[$tmp>>2]|0;
     $tmp$idx2$val = HEAP32[$50>>2]|0;
     $87 = ($tmp$idx2$val|0)<($1|0);
     $$top$i = $87 ? $tmp$idx2$val : $1;
     $88 = ($$top$i|0)>(0);
     if ($88) {
      $89 = ($1|0)<($tmp$idx2$val|0);
      $90 = $89 ? $1 : $tmp$idx2$val;
      $i$02$i = 0;$j$01$i = 0;
      while(1) {
       $91 = (($tmp$idx$val) + ($i$02$i<<2)|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($44) + ($j$01$i<<2)|0);
       HEAP32[$93>>2] = $92;
       $94 = (($i$02$i) + 1)|0;
       $95 = (($j$01$i) + ($28))|0;
       $exitcond$i = ($94|0)==($90|0);
       if ($exitcond$i) {
        break;
       } else {
        $i$02$i = $94;$j$01$i = $95;
       }
      }
     }
     $am$idx$val = HEAP32[$am>>2]|0;
     $am$idx3$val = HEAP32[$49>>2]|0;
     $96 = ($am$idx3$val|0)<($1|0);
     $$top$i8 = $96 ? $am$idx3$val : $1;
     $97 = ($$top$i8|0)>(0);
     if ($97) {
      $98 = ($1|0)<($am$idx3$val|0);
      $99 = $98 ? $1 : $am$idx3$val;
      $i$02$i10 = 0;$j$01$i11 = 1;
      while(1) {
       $100 = (($am$idx$val) + ($i$02$i10<<2)|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = (($44) + ($j$01$i11<<2)|0);
       HEAP32[$102>>2] = $101;
       $103 = (($i$02$i10) + 1)|0;
       $104 = (($j$01$i11) + ($28))|0;
       $exitcond$i12 = ($103|0)==($99|0);
       if ($exitcond$i12) {
        break;
       } else {
        $i$02$i10 = $103;$j$01$i11 = $104;
       }
      }
     }
     $105 = ($29>>>0)>(1);
     if ($105) {
      $106 = (_BN_mod_mul_montgomery($tmp,$am,$am,$mont$0,$ctx)|0);
      $107 = ($106|0)==(0);
      if ($107) {
       $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
       label = 58;
       break;
      }
      $tmp$idx4$val = HEAP32[$tmp>>2]|0;
      $tmp$idx5$val = HEAP32[$50>>2]|0;
      $108 = ($tmp$idx5$val|0)<($1|0);
      $$top$i14 = $108 ? $tmp$idx5$val : $1;
      $109 = ($$top$i14|0)>(0);
      if ($109) {
       $110 = ($1|0)<($tmp$idx5$val|0);
       $111 = $110 ? $1 : $tmp$idx5$val;
       $i$02$i16 = 0;$j$01$i17 = 2;
       while(1) {
        $112 = (($tmp$idx4$val) + ($i$02$i16<<2)|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = (($44) + ($j$01$i17<<2)|0);
        HEAP32[$114>>2] = $113;
        $115 = (($i$02$i16) + 1)|0;
        $116 = (($j$01$i17) + ($28))|0;
        $exitcond$i18 = ($115|0)==($111|0);
        if ($exitcond$i18) {
         break;
        } else {
         $i$02$i16 = $115;$j$01$i17 = $116;
        }
       }
      }
      $117 = ($28|0)>(3);
      if ($117) {
       $i$146 = 3;
       while(1) {
        $118 = (_BN_mod_mul_montgomery($tmp,$am,$tmp,$mont$0,$ctx)|0);
        $119 = ($118|0)==(0);
        if ($119) {
         $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
         label = 58;
         break L17;
        }
        $tmp$idx6$val = HEAP32[$tmp>>2]|0;
        $tmp$idx7$val = HEAP32[$50>>2]|0;
        $120 = ($tmp$idx7$val|0)<($1|0);
        $$top$i20 = $120 ? $tmp$idx7$val : $1;
        $121 = ($$top$i20|0)>(0);
        if ($121) {
         $122 = ($1|0)<($tmp$idx7$val|0);
         $123 = $122 ? $1 : $tmp$idx7$val;
         $i$02$i22 = 0;$j$01$i23 = $i$146;
         while(1) {
          $124 = (($tmp$idx6$val) + ($i$02$i22<<2)|0);
          $125 = HEAP32[$124>>2]|0;
          $126 = (($44) + ($j$01$i23<<2)|0);
          HEAP32[$126>>2] = $125;
          $127 = (($i$02$i22) + 1)|0;
          $128 = (($j$01$i23) + ($28))|0;
          $exitcond$i24 = ($127|0)==($123|0);
          if ($exitcond$i24) {
           break;
          } else {
           $i$02$i22 = $127;$j$01$i23 = $128;
          }
         }
        }
        $129 = (($i$146) + 1)|0;
        $130 = ($129|0)<($28|0);
        if ($130) {
         $i$146 = $129;
        } else {
         break;
        }
       }
      }
     }
     $131 = (($7) + -1)|0;
     $132 = (($131|0) % ($29|0))&-1;
     $133 = ($132|0)>(-1);
     if ($133) {
      $134 = (($7) + -3)|0;
      $bits$042 = $131;$i$244 = $132;$wvalue$043 = 0;
      while(1) {
       $135 = $wvalue$043 << 1;
       $136 = (_BN_is_bit_set($p,$bits$042)|0);
       $137 = (($136) + ($135))|0;
       $138 = (($i$244) + -1)|0;
       $139 = (($bits$042) + -1)|0;
       $140 = ($i$244|0)>(0);
       if ($140) {
        $bits$042 = $139;$i$244 = $138;$wvalue$043 = $137;
       } else {
        $$lcssa68 = $137;
        break;
       }
      }
      $141 = (($134) - ($132))|0;
      $142 = (($141) + 1)|0;
      $bits$0$lcssa = $142;$wvalue$0$lcssa = $$lcssa68;
     } else {
      $bits$0$lcssa = $131;$wvalue$0$lcssa = 0;
     }
     $143 = (_MOD_EXP_CTIME_COPY_FROM_PREBUF($tmp,$1,$44,$wvalue$0$lcssa,$29)|0);
     $144 = ($143|0)==(0);
     if ($144) {
      $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
      label = 58;
     } else {
      $bits$1 = $bits$0$lcssa;
      while(1) {
       $145 = ($bits$1|0)>(-1);
       if ($145) {
        $bits$239 = $bits$1;$i$341 = 0;$wvalue$140 = 0;
       } else {
        break;
       }
       while(1) {
        $146 = (_BN_mod_mul_montgomery($tmp,$tmp,$tmp,$mont$0,$ctx)|0);
        $147 = ($146|0)==(0);
        if ($147) {
         $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
         label = 58;
         break L17;
        }
        $148 = $wvalue$140 << 1;
        $149 = (_BN_is_bit_set($p,$bits$239)|0);
        $150 = (($149) + ($148))|0;
        $151 = (($i$341) + 1)|0;
        $152 = (($bits$239) + -1)|0;
        $153 = ($151|0)<($29|0);
        if ($153) {
         $bits$239 = $152;$i$341 = $151;$wvalue$140 = $150;
        } else {
         $$lcssa = $150;$$lcssa67 = $152;
         break;
        }
       }
       $154 = (_MOD_EXP_CTIME_COPY_FROM_PREBUF($am,$1,$44,$$lcssa,$29)|0);
       $155 = ($154|0)==(0);
       if ($155) {
        $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
        label = 58;
        break L17;
       }
       $156 = (_BN_mod_mul_montgomery($tmp,$tmp,$am,$mont$0,$ctx)|0);
       $157 = ($156|0)==(0);
       if ($157) {
        $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = 0;
        label = 58;
        break L17;
       } else {
        $bits$1 = $$lcssa67;
       }
      }
      $158 = (_BN_from_montgomery($rr,$tmp,$mont$0,$ctx)|0);
      $not$ = ($158|0)!=(0);
      $$ = $not$&1;
      $mont$1 = $mont$0;$powerbuf$0 = $44;$powerbufFree$2 = $$powerbufFree$0;$powerbufLen$0 = $35;$ret$1 = $$;
      label = 58;
     }
    }
   } while(0);
   if ((label|0) == 58) {
    $159 = ($mont$1|0)!=(0|0);
    $or$cond = $18 & $159;
    if ($or$cond) {
     _BN_MONT_CTX_free($mont$1);
    }
    $160 = ($powerbuf$0|0)==(0|0);
    if ($160) {
     $ret$12732 = $ret$1;
    } else {
     _OPENSSL_cleanse($powerbuf$0,$powerbufLen$0);
     $161 = ($powerbufFree$2|0)==(0|0);
     if ($161) {
      $ret$12732 = $ret$1;
     } else {
      _CRYPTO_free($powerbufFree$2);
      $ret$12732 = $ret$1;
     }
    }
   }
   _BN_CTX_end($ctx);
   $$0 = $ret$12732;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(3,124,102,89418,716);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _MOD_EXP_CTIME_COPY_FROM_PREBUF($b,$top,$buf,$idx,$window) {
 $b = $b|0;
 $top = $top|0;
 $buf = $buf|0;
 $idx = $idx|0;
 $window = $window|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa34 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $acc$08$us = 0, $acc1$016$us = 0, $exitcond = 0, $exitcond25 = 0;
 var $ftl$04 = 0, $i$014$us = 0, $i$121$us = 0, $j$09$us = 0, $j$115$us = 0, $table$013$us = 0, $table$120$us = 0, $tmp_top$0$lcssa = 0, $tmp_top$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 1 << $window;
 $1 = ((($b)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<($top|0);
 if ($3) {
  $4 = (_bn_expand2($b,$top)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $6 = ($window|0)<(4);
 do {
  if ($6) {
   $7 = ($top|0)>(0);
   if ($7) {
    $8 = HEAP32[$b>>2]|0;
    $i$014$us = 0;$table$013$us = $buf;
    while(1) {
     $acc$08$us = 0;$j$09$us = 0;
     while(1) {
      $12 = (($table$013$us) + ($j$09$us<<2)|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = $j$09$us ^ $idx;
      $15 = $14 ^ -2147483648;
      $16 = (($14) + -1)|0;
      $17 = $16 & $15;
      $18 = $17 >> 31;
      $19 = $13 & $18;
      $20 = $19 | $acc$08$us;
      $21 = (($j$09$us) + 1)|0;
      $22 = ($21|0)<($0|0);
      if ($22) {
       $acc$08$us = $20;$j$09$us = $21;
      } else {
       $$lcssa = $20;
       break;
      }
     }
     $9 = (($8) + ($i$014$us<<2)|0);
     HEAP32[$9>>2] = $$lcssa;
     $10 = (($i$014$us) + 1)|0;
     $11 = (($table$013$us) + ($0<<2)|0);
     $exitcond = ($10|0)==($top|0);
     if ($exitcond) {
      label = 16;
      break;
     } else {
      $i$014$us = $10;$table$013$us = $11;
     }
    }
   } else {
    label = 15;
   }
  } else {
   $23 = (($window) + -2)|0;
   $24 = 1 << $23;
   $25 = $idx >> $23;
   $26 = (($24) + -1)|0;
   $27 = $26 & $idx;
   $28 = $25 ^ -2147483648;
   $29 = (($25) + -1)|0;
   $30 = $29 & $28;
   $31 = $30 >> 31;
   $32 = $25 ^ 1;
   $33 = (($32) + -1)|0;
   $34 = $33 & $28;
   $35 = $34 >> 31;
   $36 = $25 ^ 2;
   $37 = (($36) + -1)|0;
   $38 = $37 & $28;
   $39 = $38 >> 31;
   $40 = $25 ^ 3;
   $41 = (($40) + -1)|0;
   $42 = $41 & $28;
   $43 = $42 >> 31;
   $44 = ($top|0)>(0);
   if ($44) {
    $45 = ($23|0)==(31);
    $46 = HEAP32[$b>>2]|0;
    $47 = $24 << 1;
    $48 = 3 << $23;
    if ($45) {
     $49 = $top << 2;
     _memset(($46|0),0,($49|0))|0;
     $50 = ((($b)) + 4|0);
     HEAP32[$50>>2] = $top;
     $92 = $50;
     break;
    } else {
     $i$121$us = 0;$table$120$us = $buf;
    }
    while(1) {
     $acc1$016$us = 0;$j$115$us = 0;
     while(1) {
      $54 = (($table$120$us) + ($j$115$us<<2)|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = $55 & $31;
      $57 = (($j$115$us) + ($24))|0;
      $58 = (($table$120$us) + ($57<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $59 & $35;
      $61 = $60 | $56;
      $62 = (($j$115$us) + ($47))|0;
      $63 = (($table$120$us) + ($62<<2)|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $64 & $39;
      $66 = $61 | $65;
      $67 = (($j$115$us) + ($48))|0;
      $68 = (($table$120$us) + ($67<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = $69 & $43;
      $71 = $66 | $70;
      $72 = $j$115$us ^ $27;
      $73 = $72 ^ -2147483648;
      $74 = (($72) + -1)|0;
      $75 = $74 & $73;
      $76 = $75 >> 31;
      $77 = $71 & $76;
      $78 = $77 | $acc1$016$us;
      $79 = (($j$115$us) + 1)|0;
      $80 = ($79|0)<($24|0);
      if ($80) {
       $acc1$016$us = $78;$j$115$us = $79;
      } else {
       $$lcssa34 = $78;
       break;
      }
     }
     $51 = (($46) + ($i$121$us<<2)|0);
     HEAP32[$51>>2] = $$lcssa34;
     $52 = (($i$121$us) + 1)|0;
     $53 = (($table$120$us) + ($0<<2)|0);
     $exitcond25 = ($52|0)==($top|0);
     if ($exitcond25) {
      label = 16;
      break;
     } else {
      $i$121$us = $52;$table$120$us = $53;
     }
    }
   } else {
    label = 15;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $81 = ((($b)) + 4|0);
  HEAP32[$81>>2] = $top;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 16) {
  $82 = ((($b)) + 4|0);
  HEAP32[$82>>2] = $top;
  $83 = ($top|0)>(0);
  if ($83) {
   $92 = $82;
  } else {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $84 = HEAP32[$b>>2]|0;
 $85 = (($top) + -1)|0;
 $86 = (($84) + ($85<<2)|0);
 $ftl$04 = $86;$tmp_top$05 = $top;
 while(1) {
  $87 = HEAP32[$ftl$04>>2]|0;
  $88 = ($87|0)==(0);
  if (!($88)) {
   $tmp_top$0$lcssa = $tmp_top$05;
   break;
  }
  $89 = ((($ftl$04)) + -4|0);
  $90 = (($tmp_top$05) + -1)|0;
  $91 = ($tmp_top$05|0)>(1);
  if ($91) {
   $ftl$04 = $89;$tmp_top$05 = $90;
  } else {
   $tmp_top$0$lcssa = $90;
   break;
  }
 }
 HEAP32[$92>>2] = $tmp_top$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _BN_mod_exp2_mont($rr,$a1,$p1,$a2,$p2,$m,$ctx,$in_mont) {
 $rr = $rr|0;
 $a1 = $a1|0;
 $p1 = $p1|0;
 $a2 = $a2|0;
 $p2 = $p2|0;
 $m = $m|0;
 $ctx = $ctx|0;
 $in_mont = $in_mont|0;
 var $$ = 0, $$0 = 0, $$11 = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a_mod_m$0 = 0, $a_mod_m$1 = 0, $b$036 = 0, $b$036$in = 0, $i$041 = 0, $i$138 = 0, $i$2 = 0, $i$2$in = 0, $i$2$lcssa = 0, $i$323 = 0, $i$4 = 0, $i$4$in = 0, $i$4$lcssa = 0, $i$525 = 0, $mont$0 = 0;
 var $mont$1 = 0, $not$ = 0, $not$14 = 0, $not$15 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3$not = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $r_is_one$0$be = 0, $r_is_one$035 = 0, $r_is_one$1 = 0, $ret$0 = 0, $ret$013 = 0, $val1 = 0, $val2 = 0, $wpos1$029 = 0;
 var $wpos1$1 = 0, $wpos2$030 = 0, $wpos2$1 = 0, $wvalue1$033 = 0, $wvalue1$122 = 0, $wvalue1$3 = 0, $wvalue1$4 = 0, $wvalue2$0$be = 0, $wvalue2$034 = 0, $wvalue2$124 = 0, $wvalue2$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $val1 = sp + 128|0;
 $val2 = sp;
 $0 = HEAP32[$m>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  _ERR_put_error(3,118,102,89427,138);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_BN_num_bits($p1)|0);
 $5 = (_BN_num_bits($p2)|0);
 $6 = $5 | $4;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (_BN_set_word($rr,1)|0);
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($4|0)>($5|0);
 $10 = $9 ? $4 : $5;
 _BN_CTX_start($ctx);
 $11 = (_BN_CTX_get($ctx)|0);
 $12 = (_BN_CTX_get($ctx)|0);
 $13 = (_BN_CTX_get($ctx)|0);
 HEAP32[$val1>>2] = $13;
 $14 = (_BN_CTX_get($ctx)|0);
 HEAP32[$val2>>2] = $14;
 $notlhs = ($11|0)==(0|0);
 $notrhs = ($12|0)==(0|0);
 $or$cond3$not = $notlhs | $notrhs;
 $15 = ($13|0)==(0|0);
 $or$cond = $or$cond3$not | $15;
 $16 = ($14|0)==(0|0);
 $or$cond7 = $16 | $or$cond;
 do {
  if ($or$cond7) {
   $ret$013 = 0;
  } else {
   $17 = ($in_mont|0)==(0|0);
   if ($17) {
    $18 = (_BN_MONT_CTX_new()|0);
    $19 = ($18|0)==(0|0);
    if ($19) {
     $ret$013 = 0;
     break;
    }
    $20 = (_BN_MONT_CTX_set($18,$m,$ctx)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $mont$1 = $18;$ret$0 = 0;
    } else {
     $mont$0 = $18;
     label = 9;
    }
   } else {
    $mont$0 = $in_mont;
    label = 9;
   }
   L14: do {
    if ((label|0) == 9) {
     $22 = ($4|0)>(671);
     if ($22) {
      $46 = 6;
     } else {
      $23 = ($4|0)>(239);
      if ($23) {
       $46 = 5;
      } else {
       $24 = ($4|0)>(79);
       if ($24) {
        $46 = 4;
       } else {
        $25 = ($4|0)>(23);
        $26 = $25 ? 3 : 1;
        $46 = $26;
       }
      }
     }
     $27 = ($5|0)>(671);
     if ($27) {
      $75 = 6;
     } else {
      $28 = ($5|0)>(239);
      if ($28) {
       $75 = 5;
      } else {
       $29 = ($5|0)>(79);
       if ($29) {
        $75 = 4;
       } else {
        $30 = ($5|0)>(23);
        $31 = $30 ? 3 : 1;
        $75 = $31;
       }
      }
     }
     $32 = ((($a1)) + 12|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = (_BN_ucmp($a1,$m)|0);
      $36 = ($35|0)>(-1);
      if ($36) {
       label = 19;
      } else {
       $a_mod_m$0 = $a1;
      }
     } else {
      label = 19;
     }
     if ((label|0) == 19) {
      $37 = (_BN_div(0,$13,$a1,$m,$ctx)|0);
      $38 = ($37|0)==(0);
      if ($38) {
       $mont$1 = $mont$0;$ret$0 = 0;
       break;
      } else {
       $a_mod_m$0 = $13;
      }
     }
     $39 = ((($a_mod_m$0)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(0);
     if ($41) {
      (_BN_set_word($rr,0)|0);
      $mont$1 = $mont$0;$ret$0 = 1;
      break;
     }
     $42 = ((($mont$0)) + 4|0);
     $43 = (_BN_mod_mul_montgomery($13,$a_mod_m$0,$42,$mont$0,$ctx)|0);
     $44 = ($43|0)==(0);
     if ($44) {
      $mont$1 = $mont$0;$ret$0 = 0;
     } else {
      $45 = ($46>>>0)>(1);
      if ($45) {
       $47 = (_BN_mod_mul_montgomery($11,$13,$13,$mont$0,$ctx)|0);
       $48 = ($47|0)==(0);
       if ($48) {
        $mont$1 = $mont$0;$ret$0 = 0;
        break;
       }
       $49 = (($46) + -1)|0;
       $50 = 1 << $49;
       $51 = ($50|0)>(1);
       if ($51) {
        $i$041 = 1;
        while(1) {
         $54 = (_BN_CTX_get($ctx)|0);
         $55 = (($val1) + ($i$041<<2)|0);
         HEAP32[$55>>2] = $54;
         $56 = ($54|0)==(0|0);
         if ($56) {
          $mont$1 = $mont$0;$ret$0 = 0;
          break L14;
         }
         $57 = (($i$041) + -1)|0;
         $58 = (($val1) + ($57<<2)|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = (_BN_mod_mul_montgomery($54,$59,$11,$mont$0,$ctx)|0);
         $61 = ($60|0)==(0);
         $53 = (($i$041) + 1)|0;
         if ($61) {
          $mont$1 = $mont$0;$ret$0 = 0;
          break L14;
         }
         $52 = ($53|0)<($50|0);
         if ($52) {
          $i$041 = $53;
         } else {
          break;
         }
        }
       }
      }
      $62 = ((($a2)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0);
      if ($64) {
       $65 = (_BN_ucmp($a2,$m)|0);
       $66 = ($65|0)>(-1);
       if ($66) {
        label = 31;
       } else {
        $a_mod_m$1 = $a2;
       }
      } else {
       label = 31;
      }
      if ((label|0) == 31) {
       $67 = (_BN_div(0,$14,$a2,$m,$ctx)|0);
       $68 = ($67|0)==(0);
       if ($68) {
        $mont$1 = $mont$0;$ret$0 = 0;
        break;
       } else {
        $a_mod_m$1 = $14;
       }
      }
      $69 = ((($a_mod_m$1)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)==(0);
      if ($71) {
       (_BN_set_word($rr,0)|0);
       $mont$1 = $mont$0;$ret$0 = 1;
       break;
      }
      $72 = (_BN_mod_mul_montgomery($14,$a_mod_m$1,$42,$mont$0,$ctx)|0);
      $73 = ($72|0)==(0);
      if ($73) {
       $mont$1 = $mont$0;$ret$0 = 0;
      } else {
       $74 = ($75>>>0)>(1);
       if ($74) {
        $76 = (_BN_mod_mul_montgomery($11,$14,$14,$mont$0,$ctx)|0);
        $77 = ($76|0)==(0);
        if ($77) {
         $mont$1 = $mont$0;$ret$0 = 0;
         break;
        }
        $78 = (($75) + -1)|0;
        $79 = 1 << $78;
        $80 = ($79|0)>(1);
        if ($80) {
         $i$138 = 1;
         while(1) {
          $83 = (_BN_CTX_get($ctx)|0);
          $84 = (($val2) + ($i$138<<2)|0);
          HEAP32[$84>>2] = $83;
          $85 = ($83|0)==(0|0);
          if ($85) {
           $mont$1 = $mont$0;$ret$0 = 0;
           break L14;
          }
          $86 = (($i$138) + -1)|0;
          $87 = (($val2) + ($86<<2)|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = (_BN_mod_mul_montgomery($83,$88,$11,$mont$0,$ctx)|0);
          $90 = ($89|0)==(0);
          $82 = (($i$138) + 1)|0;
          if ($90) {
           $mont$1 = $mont$0;$ret$0 = 0;
           break L14;
          }
          $81 = ($82|0)<($79|0);
          if ($81) {
           $i$138 = $82;
          } else {
           break;
          }
         }
        }
       }
       $91 = (_BN_value_one()|0);
       $92 = (_BN_mod_mul_montgomery($12,$91,$42,$mont$0,$ctx)|0);
       $93 = ($92|0)==(0);
       if ($93) {
        $mont$1 = $mont$0;$ret$0 = 0;
       } else {
        $94 = ($10|0)>(0);
        if ($94) {
         $b$036$in = $10;$r_is_one$035 = 1;$wpos1$029 = 0;$wpos2$030 = 0;$wvalue1$033 = 0;$wvalue2$034 = 0;
         while(1) {
          $b$036 = (($b$036$in) + -1)|0;
          $95 = ($r_is_one$035|0)==(0);
          if ($95) {
           $96 = (_BN_mod_mul_montgomery($12,$12,$12,$mont$0,$ctx)|0);
           $97 = ($96|0)==(0);
           if ($97) {
            $mont$1 = $mont$0;$ret$0 = 0;
            break L14;
           }
          }
          $98 = ($wvalue1$033|0)==(0);
          do {
           if ($98) {
            $99 = (_BN_is_bit_set($p1,$b$036)|0);
            $100 = ($99|0)==(0);
            if ($100) {
             $wpos1$1 = $wpos1$029;$wvalue1$3 = 0;
             break;
            }
            $101 = (($b$036) - ($46))|0;
            $i$2$in = $101;
            while(1) {
             $i$2 = (($i$2$in) + 1)|0;
             $102 = (_BN_is_bit_set($p1,$i$2)|0);
             $103 = ($102|0)==(0);
             if ($103) {
              $i$2$in = $i$2;
             } else {
              $i$2$lcssa = $i$2;
              break;
             }
            }
            $104 = (($b$036$in) + -2)|0;
            $105 = ($104|0)<($i$2$lcssa|0);
            if ($105) {
             $wpos1$1 = $i$2$lcssa;$wvalue1$3 = 1;
             break;
            } else {
             $i$323 = $104;$wvalue1$122 = 1;
            }
            while(1) {
             $106 = $wvalue1$122 << 1;
             $107 = (_BN_is_bit_set($p1,$i$323)|0);
             $not$15 = ($107|0)!=(0);
             $108 = $not$15&1;
             $$ = $108 | $106;
             $109 = (($i$323) + -1)|0;
             $110 = ($i$323|0)>($i$2$lcssa|0);
             if ($110) {
              $i$323 = $109;$wvalue1$122 = $$;
             } else {
              $wpos1$1 = $i$2$lcssa;$wvalue1$3 = $$;
              break;
             }
            }
           } else {
            $wpos1$1 = $wpos1$029;$wvalue1$3 = $wvalue1$033;
           }
          } while(0);
          $111 = ($wvalue2$034|0)==(0);
          do {
           if ($111) {
            $112 = (_BN_is_bit_set($p2,$b$036)|0);
            $113 = ($112|0)==(0);
            if ($113) {
             $wpos2$1 = $wpos2$030;$wvalue2$3 = 0;
             break;
            }
            $114 = (($b$036) - ($75))|0;
            $i$4$in = $114;
            while(1) {
             $i$4 = (($i$4$in) + 1)|0;
             $115 = (_BN_is_bit_set($p2,$i$4)|0);
             $116 = ($115|0)==(0);
             if ($116) {
              $i$4$in = $i$4;
             } else {
              $i$4$lcssa = $i$4;
              break;
             }
            }
            $117 = (($b$036$in) + -2)|0;
            $118 = ($117|0)<($i$4$lcssa|0);
            if ($118) {
             $wpos2$1 = $i$4$lcssa;$wvalue2$3 = 1;
             break;
            } else {
             $i$525 = $117;$wvalue2$124 = 1;
            }
            while(1) {
             $119 = $wvalue2$124 << 1;
             $120 = (_BN_is_bit_set($p2,$i$525)|0);
             $not$14 = ($120|0)!=(0);
             $121 = $not$14&1;
             $$8 = $121 | $119;
             $122 = (($i$525) + -1)|0;
             $123 = ($i$525|0)>($i$4$lcssa|0);
             if ($123) {
              $i$525 = $122;$wvalue2$124 = $$8;
             } else {
              $wpos2$1 = $i$4$lcssa;$wvalue2$3 = $$8;
              break;
             }
            }
           } else {
            $wpos2$1 = $wpos2$030;$wvalue2$3 = $wvalue2$034;
           }
          } while(0);
          $124 = ($wvalue1$3|0)!=(0);
          $125 = ($b$036|0)==($wpos1$1|0);
          $or$cond9 = $125 & $124;
          if ($or$cond9) {
           $126 = $wvalue1$3 >> 1;
           $127 = (($val1) + ($126<<2)|0);
           $128 = HEAP32[$127>>2]|0;
           $129 = (_BN_mod_mul_montgomery($12,$12,$128,$mont$0,$ctx)|0);
           $130 = ($129|0)==(0);
           if ($130) {
            $mont$1 = $mont$0;$ret$0 = 0;
            break L14;
           } else {
            $r_is_one$1 = 0;$wvalue1$4 = 0;
           }
          } else {
           $r_is_one$1 = $r_is_one$035;$wvalue1$4 = $wvalue1$3;
          }
          $131 = ($wvalue2$3|0)!=(0);
          $132 = ($b$036|0)==($wpos2$1|0);
          $or$cond10 = $132 & $131;
          if ($or$cond10) {
           $133 = $wvalue2$3 >> 1;
           $134 = (($val2) + ($133<<2)|0);
           $135 = HEAP32[$134>>2]|0;
           $136 = (_BN_mod_mul_montgomery($12,$12,$135,$mont$0,$ctx)|0);
           $137 = ($136|0)==(0);
           if ($137) {
            $mont$1 = $mont$0;$ret$0 = 0;
            break L14;
           } else {
            $r_is_one$0$be = 0;$wvalue2$0$be = 0;
           }
          } else {
           $r_is_one$0$be = $r_is_one$1;$wvalue2$0$be = $wvalue2$3;
          }
          $138 = ($b$036$in|0)>(1);
          if ($138) {
           $b$036$in = $b$036;$r_is_one$035 = $r_is_one$0$be;$wpos1$029 = $wpos1$1;$wpos2$030 = $wpos2$1;$wvalue1$033 = $wvalue1$4;$wvalue2$034 = $wvalue2$0$be;
          } else {
           break;
          }
         }
        }
        $139 = (_BN_from_montgomery($rr,$12,$mont$0,$ctx)|0);
        $not$ = ($139|0)!=(0);
        $$11 = $not$&1;
        $mont$1 = $mont$0;$ret$0 = $$11;
       }
      }
     }
    }
   } while(0);
   $140 = ($mont$1|0)!=(0|0);
   $or$cond5 = $17 & $140;
   if ($or$cond5) {
    _BN_MONT_CTX_free($mont$1);
    $ret$013 = $ret$0;
   } else {
    $ret$013 = $ret$0;
   }
  }
 } while(0);
 _BN_CTX_end($ctx);
 $$0 = $ret$013;
 STACKTOP = sp;return ($$0|0);
}
function _BN_gcd($r,$in_a,$in_b,$ctx) {
 $r = $r|0;
 $in_a = $in_a|0;
 $in_b = $in_b|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0$$01$i = 0, $$0$$013$i = 0, $$0$$015$i = 0, $$0$ph$be$i = 0, $$0$ph22$i = 0, $$01$$0$i = 0, $$01$$04$i = 0, $$01$$06$i = 0, $$01$ph$be$i = 0, $$01$ph$lcssa16$i = 0, $$01$ph21$i = 0, $$02$i = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, $or$cond = 0, $ret$0 = 0, $shifts$0$lcssa$i = 0, $shifts$0$ph23$i = 0, $shifts$017$i = 0, $shifts$017$i$lcssa = 0, $shifts$017$i$lcssa70 = 0, $shifts$017$i73 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($ctx);
 $0 = (_BN_CTX_get($ctx)|0);
 $1 = (_BN_CTX_get($ctx)|0);
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  return ($ret$0|0);
 }
 $4 = (_BN_copy($0,$in_a)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  return ($ret$0|0);
 }
 $6 = (_BN_copy($1,$in_b)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  return ($ret$0|0);
 }
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 12|0);
 HEAP32[$9>>2] = 0;
 $10 = (_BN_cmp($0,$1)|0);
 $11 = ($10|0)<(0);
 $$ = $11 ? $1 : $0;
 $$2 = $11 ? $0 : $1;
 $12 = ((($$2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $$02$i = $$;
  } else {
   $$0$ph22$i = $$2;$$01$ph21$i = $$;$56 = $12;$63 = $13;$shifts$0$ph23$i = 0;
   L11: while(1) {
    $15 = ((($$01$ph21$i)) + 4|0);
    $41 = $63;$shifts$017$i = $shifts$0$ph23$i;
    while(1) {
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)>(0);
     if ($17) {
      $18 = HEAP32[$$01$ph21$i>>2]|0;
      $19 = HEAP32[$18>>2]|0;
      $20 = $19 & 1;
      $21 = ($20|0)==(0);
      if (!($21)) {
       $$lcssa = $41;$shifts$017$i$lcssa = $shifts$017$i;
       label = 8;
       break;
      }
     }
     $40 = ($41|0)>(0);
     if ($40) {
      $42 = HEAP32[$$0$ph22$i>>2]|0;
      $43 = HEAP32[$42>>2]|0;
      $44 = $43 & 1;
      $45 = ($44|0)==(0);
      if (!($45)) {
       $shifts$017$i$lcssa70 = $shifts$017$i;
       label = 18;
       break;
      }
     }
     $50 = (_BN_rshift1($$01$ph21$i,$$01$ph21$i)|0);
     $51 = ($50|0)==(0);
     if ($51) {
      $ret$0 = 0;
      label = 27;
      break L11;
     }
     $52 = (_BN_rshift1($$0$ph22$i,$$0$ph22$i)|0);
     $53 = ($52|0)==(0);
     if ($53) {
      $ret$0 = 0;
      label = 27;
      break L11;
     }
     $54 = (($shifts$017$i) + 1)|0;
     $55 = HEAP32[$56>>2]|0;
     $57 = ($55|0)==(0);
     if ($57) {
      $$01$ph$lcssa16$i = $$01$ph21$i;$shifts$0$lcssa$i = $54;
      label = 23;
      break L11;
     } else {
      $41 = $55;$shifts$017$i = $54;
     }
    }
    do {
     if ((label|0) == 8) {
      label = 0;
      $22 = ($$lcssa|0)>(0);
      if ($22) {
       $23 = HEAP32[$$0$ph22$i>>2]|0;
       $24 = HEAP32[$23>>2]|0;
       $25 = $24 & 1;
       $26 = ($25|0)==(0);
       if (!($26)) {
        $27 = (_BN_sub($$01$ph21$i,$$01$ph21$i,$$0$ph22$i)|0);
        $28 = ($27|0)==(0);
        if ($28) {
         $ret$0 = 0;
         label = 27;
         break L11;
        }
        $29 = (_BN_rshift1($$01$ph21$i,$$01$ph21$i)|0);
        $30 = ($29|0)==(0);
        if ($30) {
         $ret$0 = 0;
         label = 27;
         break L11;
        }
        $31 = (_BN_cmp($$01$ph21$i,$$0$ph22$i)|0);
        $32 = ($31|0)<(0);
        $$0$$01$i = $32 ? $$0$ph22$i : $$01$ph21$i;
        $$01$$0$i = $32 ? $$01$ph21$i : $$0$ph22$i;
        $$0$ph$be$i = $$01$$0$i;$$01$ph$be$i = $$0$$01$i;$shifts$017$i73 = $shifts$017$i$lcssa;
        break;
       }
      }
      $36 = (_BN_rshift1($$0$ph22$i,$$0$ph22$i)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       $ret$0 = 0;
       label = 27;
       break L11;
      }
      $38 = (_BN_cmp($$01$ph21$i,$$0$ph22$i)|0);
      $39 = ($38|0)<(0);
      $$0$$013$i = $39 ? $$0$ph22$i : $$01$ph21$i;
      $$01$$04$i = $39 ? $$01$ph21$i : $$0$ph22$i;
      $$0$ph$be$i = $$01$$04$i;$$01$ph$be$i = $$0$$013$i;$shifts$017$i73 = $shifts$017$i$lcssa;
     }
     else if ((label|0) == 18) {
      label = 0;
      $46 = (_BN_rshift1($$01$ph21$i,$$01$ph21$i)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       $ret$0 = 0;
       label = 27;
       break L11;
      }
      $48 = (_BN_cmp($$01$ph21$i,$$0$ph22$i)|0);
      $49 = ($48|0)<(0);
      $$0$$015$i = $49 ? $$0$ph22$i : $$01$ph21$i;
      $$01$$06$i = $49 ? $$01$ph21$i : $$0$ph22$i;
      $$0$ph$be$i = $$01$$06$i;$$01$ph$be$i = $$0$$015$i;$shifts$017$i73 = $shifts$017$i$lcssa70;
     }
    } while(0);
    $33 = ((($$0$ph$be$i)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0);
    if ($35) {
     $$01$ph$lcssa16$i = $$01$ph$be$i;$shifts$0$lcssa$i = $shifts$017$i73;
     label = 23;
     break;
    } else {
     $$0$ph22$i = $$0$ph$be$i;$$01$ph21$i = $$01$ph$be$i;$56 = $33;$63 = $34;$shifts$0$ph23$i = $shifts$017$i73;
    }
   }
   if ((label|0) == 23) {
    $58 = ($shifts$0$lcssa$i|0)==(0);
    if ($58) {
     $$02$i = $$01$ph$lcssa16$i;
     break;
    }
    $59 = (_BN_lshift($$01$ph$lcssa16$i,$$01$ph$lcssa16$i,$shifts$0$lcssa$i)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     $ret$0 = 0;
    } else {
     $$02$i = $$01$ph$lcssa16$i;
     break;
    }
    _BN_CTX_end($ctx);
    return ($ret$0|0);
   }
   else if ((label|0) == 27) {
    _BN_CTX_end($ctx);
    return ($ret$0|0);
   }
  }
 } while(0);
 $61 = ($$02$i|0)==(0|0);
 if ($61) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  return ($ret$0|0);
 }
 $62 = (_BN_copy($r,$$02$i)|0);
 $not$ = ($62|0)!=(0|0);
 $$3 = $not$&1;
 $ret$0 = $$3;
 _BN_CTX_end($ctx);
 return ($ret$0|0);
}
function _BN_mod_inverse($in,$a,$n,$ctx) {
 $in = $in|0;
 $a = $a|0;
 $n = $n|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre19$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A$0$lcssa21$i = 0, $A$0$lcssa22$i = 0, $A$012$i = 0, $A$012$i$phi = 0, $A$035 = 0, $A$035$phi = 0, $A$115 = 0, $A$116 = 0, $B$010$i = 0, $B$010$i$lcssa81 = 0, $B$010$i$phi = 0;
 var $B$034 = 0, $B$034$lcssa77 = 0, $B$034$phi = 0, $M$033 = 0, $M$033$phi = 0, $M$07$i = 0, $M$07$i$phi = 0, $R$02 = 0, $R$02$i = 0, $R$1 = 0, $R$1$i = 0, $X$031 = 0, $X$031$lcssa78 = 0, $X$031$phi = 0, $X$09$i = 0, $X$09$i$lcssa82 = 0, $X$09$i$phi = 0, $Y$0$lcssa23$i = 0, $Y$0$lcssa24$i = 0, $Y$032 = 0;
 var $Y$032$phi = 0, $Y$08$i = 0, $Y$08$i$phi = 0, $Y$113 = 0, $Y$114 = 0, $local_A$i = 0, $local_B$i = 0, $or$cond = 0, $or$cond$i = 0, $phitmp = 0, $phitmp$i = 0, $ret$0 = 0, $ret$0$i = 0, $shift$0 = 0, $shift$1 = 0, $shift$1$lcssa = 0, $sign$011$i = 0, $sign$011$i$lcssa80 = 0, $sign$036 = 0, $sign$036$lcssa76 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $local_A$i = sp + 20|0;
 $local_B$i = sp;
 $0 = ((($a)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($n)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 4;
  $7 = ($6|0)==(0);
  if ($7) {
   _BN_CTX_start($ctx);
   $94 = (_BN_CTX_get($ctx)|0);
   $95 = (_BN_CTX_get($ctx)|0);
   $96 = (_BN_CTX_get($ctx)|0);
   $97 = (_BN_CTX_get($ctx)|0);
   $98 = (_BN_CTX_get($ctx)|0);
   $99 = (_BN_CTX_get($ctx)|0);
   $100 = (_BN_CTX_get($ctx)|0);
   $101 = ($100|0)==(0|0);
   L4: do {
    if ($101) {
     $R$1 = 0;$ret$0 = 0;
    } else {
     $102 = ($in|0)==(0|0);
     if ($102) {
      $103 = (_BN_new()|0);
      $104 = ($103|0)==(0|0);
      if ($104) {
       $R$1 = 0;$ret$0 = 0;
       break;
      } else {
       $R$02 = $103;
      }
     } else {
      $R$02 = $in;
     }
     (_BN_set_word($96,1)|0);
     (_BN_set_word($99,0)|0);
     $105 = (_BN_copy($95,$a)|0);
     $106 = ($105|0)==(0|0);
     if ($106) {
      $R$1 = $R$02;$ret$0 = 0;
     } else {
      $107 = (_BN_copy($94,$n)|0);
      $108 = ($107|0)==(0|0);
      if ($108) {
       $R$1 = $R$02;$ret$0 = 0;
      } else {
       $109 = ((($94)) + 12|0);
       HEAP32[$109>>2] = 0;
       $110 = ((($95)) + 12|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($111|0)==(0);
       if ($112) {
        $113 = (_BN_ucmp($95,$94)|0);
        $114 = ($113|0)>(-1);
        if ($114) {
         label = 40;
        }
       } else {
        label = 40;
       }
       if ((label|0) == 40) {
        $115 = (_BN_nnmod($95,$95,$94,$ctx)|0);
        $116 = ($115|0)==(0);
        if ($116) {
         $R$1 = $R$02;$ret$0 = 0;
         break;
        }
       }
       $117 = ((($n)) + 4|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = ($118|0)>(0);
       if ($119) {
        $120 = HEAP32[$n>>2]|0;
        $121 = HEAP32[$120>>2]|0;
        $122 = $121 & 1;
        $123 = ($122|0)==(0);
        if ($123) {
         label = 43;
        } else {
         $129 = (_BN_num_bits($n)|0);
         $130 = ($129|0)<(2049);
         if ($130) {
          $131 = ((($95)) + 4|0);
          $132 = HEAP32[$131>>2]|0;
          $133 = ($132|0)==(0);
          if ($133) {
           $A$116 = $94;$Y$113 = $99;
           label = 97;
          } else {
           $134 = ((($96)) + 4|0);
           $135 = ((($99)) + 4|0);
           $shift$0 = 0;
           while(1) {
            $136 = (_BN_is_bit_set($95,$shift$0)|0);
            $137 = ($136|0)==(0);
            if ($137) {
             $138 = (($shift$0) + 1)|0;
             $139 = HEAP32[$134>>2]|0;
             $140 = ($139|0)>(0);
             if ($140) {
              $141 = HEAP32[$96>>2]|0;
              $142 = HEAP32[$141>>2]|0;
              $143 = $142 & 1;
              $144 = ($143|0)==(0);
              if (!($144)) {
               $145 = (_BN_uadd($96,$96,$n)|0);
               $146 = ($145|0)==(0);
               if ($146) {
                $R$1 = $R$02;$ret$0 = 0;
                break L4;
               }
              }
             }
             $147 = (_BN_rshift1($96,$96)|0);
             $148 = ($147|0)==(0);
             if ($148) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             } else {
              $shift$0 = $138;
              continue;
             }
            }
            $149 = ($shift$0|0)>(0);
            if ($149) {
             $150 = (_BN_rshift($95,$95,$shift$0)|0);
             $151 = ($150|0)==(0);
             if ($151) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             } else {
              $shift$1 = 0;
             }
            } else {
             $shift$1 = 0;
            }
            while(1) {
             $152 = (_BN_is_bit_set($94,$shift$1)|0);
             $153 = ($152|0)==(0);
             if (!($153)) {
              $shift$1$lcssa = $shift$1;
              break;
             }
             $154 = (($shift$1) + 1)|0;
             $155 = HEAP32[$135>>2]|0;
             $156 = ($155|0)>(0);
             do {
              if ($156) {
               $157 = HEAP32[$99>>2]|0;
               $158 = HEAP32[$157>>2]|0;
               $159 = $158 & 1;
               $160 = ($159|0)==(0);
               if ($160) {
                break;
               }
               $161 = (_BN_uadd($99,$99,$n)|0);
               $162 = ($161|0)==(0);
               if ($162) {
                $R$1 = $R$02;$ret$0 = 0;
                break L4;
               }
              }
             } while(0);
             $163 = (_BN_rshift1($99,$99)|0);
             $164 = ($163|0)==(0);
             if ($164) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             } else {
              $shift$1 = $154;
             }
            }
            $165 = ($shift$1$lcssa|0)>(0);
            if ($165) {
             $166 = (_BN_rshift($94,$94,$shift$1$lcssa)|0);
             $167 = ($166|0)==(0);
             if ($167) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             }
            }
            $168 = (_BN_ucmp($95,$94)|0);
            $169 = ($168|0)>(-1);
            if ($169) {
             $170 = (_BN_uadd($96,$96,$99)|0);
             $171 = ($170|0)==(0);
             if ($171) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             }
             $172 = (_BN_usub($95,$95,$94)|0);
             $173 = ($172|0)==(0);
             if ($173) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             }
            } else {
             $174 = (_BN_uadd($99,$99,$96)|0);
             $175 = ($174|0)==(0);
             if ($175) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             }
             $176 = (_BN_usub($94,$94,$95)|0);
             $177 = ($176|0)==(0);
             if ($177) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             }
            }
            $178 = HEAP32[$131>>2]|0;
            $179 = ($178|0)==(0);
            if ($179) {
             $A$116 = $94;$Y$113 = $99;
             label = 97;
             break;
            } else {
             $shift$0 = 0;
            }
           }
          }
         } else {
          label = 43;
         }
        }
       } else {
        label = 43;
       }
       if ((label|0) == 43) {
        $124 = ((($95)) + 4|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = ($125|0)==(0);
        if ($126) {
         $A$116 = $94;$Y$113 = $99;
         label = 97;
        } else {
         $127 = ((($97)) + 4|0);
         $128 = ((($97)) + 12|0);
         $A$035 = $94;$B$034 = $95;$M$033 = $98;$X$031 = $96;$Y$032 = $99;$sign$036 = -1;
         while(1) {
          $180 = (_BN_num_bits($A$035)|0);
          $181 = (_BN_num_bits($B$034)|0);
          $182 = ($180|0)==($181|0);
          do {
           if ($182) {
            $183 = (_BN_set_word($97,1)|0);
            $184 = ($183|0)==(0);
            if ($184) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            }
            $185 = (_BN_sub($M$033,$A$035,$B$034)|0);
            $186 = ($185|0)==(0);
            if ($186) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            }
           } else {
            $187 = (_BN_num_bits($A$035)|0);
            $188 = (_BN_num_bits($B$034)|0);
            $189 = (($188) + 1)|0;
            $190 = ($187|0)==($189|0);
            if (!($190)) {
             $211 = (_BN_div($97,$M$033,$A$035,$B$034,$ctx)|0);
             $212 = ($211|0)==(0);
             if ($212) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             } else {
              break;
             }
            }
            $191 = (_BN_lshift1($100,$B$034)|0);
            $192 = ($191|0)==(0);
            if ($192) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            }
            $193 = (_BN_ucmp($A$035,$100)|0);
            $194 = ($193|0)<(0);
            if ($194) {
             $195 = (_BN_set_word($97,1)|0);
             $196 = ($195|0)==(0);
             if ($196) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             }
             $197 = (_BN_sub($M$033,$A$035,$B$034)|0);
             $198 = ($197|0)==(0);
             if ($198) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             } else {
              break;
             }
            }
            $199 = (_BN_sub($M$033,$A$035,$100)|0);
            $200 = ($199|0)==(0);
            if ($200) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            }
            $201 = (_BN_add($97,$100,$B$034)|0);
            $202 = ($201|0)==(0);
            if ($202) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            }
            $203 = (_BN_ucmp($A$035,$97)|0);
            $204 = ($203|0)<(0);
            if ($204) {
             $205 = (_BN_set_word($97,2)|0);
             $206 = ($205|0)==(0);
             if ($206) {
              $R$1 = $R$02;$ret$0 = 0;
              break L4;
             } else {
              break;
             }
            }
            $207 = (_BN_set_word($97,3)|0);
            $208 = ($207|0)==(0);
            if ($208) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            }
            $209 = (_BN_sub($M$033,$M$033,$B$034)|0);
            $210 = ($209|0)==(0);
            if ($210) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            }
           }
          } while(0);
          $213 = HEAP32[$127>>2]|0;
          $214 = ($213|0)==(1);
          L73: do {
           if ($214) {
            $215 = HEAP32[$97>>2]|0;
            $216 = HEAP32[$215>>2]|0;
            switch ($216|0) {
            case 1:  {
             $217 = HEAP32[$128>>2]|0;
             $218 = ($217|0)==(0);
             if ($218) {
              $219 = (_BN_add($A$035,$X$031,$Y$032)|0);
              $220 = ($219|0)==(0);
              if ($220) {
               $R$1 = $R$02;$ret$0 = 0;
               break L4;
              } else {
               break L73;
              }
             }
             break;
            }
            case 2:  {
             $221 = HEAP32[$128>>2]|0;
             $222 = ($221|0)==(0);
             if ($222) {
              $223 = (_BN_lshift1($A$035,$X$031)|0);
              $224 = ($223|0)==(0);
              if ($224) {
               $R$1 = $R$02;$ret$0 = 0;
               break L4;
              } else {
               label = 94;
               break L73;
              }
             }
             break;
            }
            case 4:  {
             $225 = HEAP32[$128>>2]|0;
             $226 = ($225|0)==(0);
             if ($226) {
              $227 = (_BN_lshift($A$035,$X$031,2)|0);
              $228 = ($227|0)==(0);
              if ($228) {
               $R$1 = $R$02;$ret$0 = 0;
               break L4;
              } else {
               label = 94;
               break L73;
              }
             }
             break;
            }
            default: {
            }
            }
            $229 = (_BN_copy($A$035,$X$031)|0);
            $230 = ($229|0)==(0|0);
            if ($230) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            }
            $231 = HEAP32[$97>>2]|0;
            $232 = HEAP32[$231>>2]|0;
            $233 = (_BN_mul_word($A$035,$232)|0);
            $234 = ($233|0)==(0);
            if ($234) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            } else {
             label = 94;
            }
           } else {
            $235 = (_BN_mul($A$035,$97,$X$031,$ctx)|0);
            $236 = ($235|0)==(0);
            if ($236) {
             $R$1 = $R$02;$ret$0 = 0;
             break L4;
            } else {
             label = 94;
            }
           }
          } while(0);
          if ((label|0) == 94) {
           label = 0;
           $237 = (_BN_add($A$035,$A$035,$Y$032)|0);
           $238 = ($237|0)==(0);
           if ($238) {
            $R$1 = $R$02;$ret$0 = 0;
            break L4;
           }
          }
          $239 = (0 - ($sign$036))|0;
          $240 = ((($M$033)) + 4|0);
          $241 = HEAP32[$240>>2]|0;
          $242 = ($241|0)==(0);
          if ($242) {
           $B$034$lcssa77 = $B$034;$X$031$lcssa78 = $X$031;$sign$036$lcssa76 = $sign$036;
           break;
          } else {
           $Y$032$phi = $X$031;$X$031$phi = $A$035;$M$033$phi = $Y$032;$B$034$phi = $M$033;$A$035$phi = $B$034;$sign$036 = $239;$Y$032 = $Y$032$phi;$X$031 = $X$031$phi;$M$033 = $M$033$phi;$B$034 = $B$034$phi;$A$035 = $A$035$phi;
          }
         }
         $phitmp = ($sign$036$lcssa76|0)>(0);
         if ($phitmp) {
          $A$116 = $B$034$lcssa77;$Y$113 = $X$031$lcssa78;
          label = 97;
         } else {
          $A$115 = $B$034$lcssa77;$Y$114 = $X$031$lcssa78;
         }
        }
       }
       if ((label|0) == 97) {
        $243 = (_BN_sub($Y$113,$n,$Y$113)|0);
        $244 = ($243|0)==(0);
        if ($244) {
         $R$1 = $R$02;$ret$0 = 0;
         break;
        } else {
         $A$115 = $A$116;$Y$114 = $Y$113;
        }
       }
       $245 = ((($A$115)) + 4|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ($246|0)==(1);
       if ($247) {
        $248 = HEAP32[$A$115>>2]|0;
        $249 = HEAP32[$248>>2]|0;
        $250 = ($249|0)==(1);
        if ($250) {
         $251 = ((($A$115)) + 12|0);
         $252 = HEAP32[$251>>2]|0;
         $253 = ($252|0)==(0);
         if ($253) {
          $254 = ((($Y$114)) + 12|0);
          $255 = HEAP32[$254>>2]|0;
          $256 = ($255|0)==(0);
          if ($256) {
           $257 = (_BN_ucmp($Y$114,$n)|0);
           $258 = ($257|0)<(0);
           if ($258) {
            $259 = (_BN_copy($R$02,$Y$114)|0);
            $260 = ($259|0)==(0|0);
            if ($260) {
             $R$1 = $R$02;$ret$0 = 0;
             break;
            }
           } else {
            label = 104;
           }
          } else {
           label = 104;
          }
          if ((label|0) == 104) {
           $261 = (_BN_nnmod($R$02,$Y$114,$n,$ctx)|0);
           $262 = ($261|0)==(0);
           if ($262) {
            $R$1 = $R$02;$ret$0 = 0;
            break;
           }
          }
          $R$1 = $R$02;$ret$0 = $R$02;
          break;
         }
        }
       }
       _ERR_put_error(3,110,108,89437,525);
       $R$1 = $R$02;$ret$0 = 0;
      }
     }
    }
   } while(0);
   $263 = ($ret$0|0)==(0|0);
   $264 = ($in|0)==(0|0);
   $or$cond = $264 & $263;
   if ($or$cond) {
    _BN_free($R$1);
   }
   _BN_CTX_end($ctx);
   $$0 = $ret$0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _BN_CTX_start($ctx);
 $8 = (_BN_CTX_get($ctx)|0);
 $9 = (_BN_CTX_get($ctx)|0);
 $10 = (_BN_CTX_get($ctx)|0);
 $11 = (_BN_CTX_get($ctx)|0);
 $12 = (_BN_CTX_get($ctx)|0);
 $13 = (_BN_CTX_get($ctx)|0);
 $14 = (_BN_CTX_get($ctx)|0);
 $15 = ($14|0)==(0|0);
 L109: do {
  if ($15) {
   $R$1$i = 0;$ret$0$i = 0;
  } else {
   $16 = ($in|0)==(0|0);
   if ($16) {
    $17 = (_BN_new()|0);
    $18 = ($17|0)==(0|0);
    if ($18) {
     $R$1$i = 0;$ret$0$i = 0;
     break;
    } else {
     $R$02$i = $17;
    }
   } else {
    $R$02$i = $in;
   }
   (_BN_set_word($10,1)|0);
   (_BN_set_word($13,0)|0);
   $19 = (_BN_copy($9,$a)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    $R$1$i = $R$02$i;$ret$0$i = 0;
   } else {
    $21 = (_BN_copy($8,$n)|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     $R$1$i = $R$02$i;$ret$0$i = 0;
    } else {
     $23 = ((($8)) + 12|0);
     HEAP32[$23>>2] = 0;
     $24 = ((($9)) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(0);
     do {
      if ($26) {
       $27 = (_BN_ucmp($9,$8)|0);
       $28 = ($27|0)>(-1);
       if ($28) {
        $$pre$i = HEAP32[$24>>2]|0;
        $38 = $$pre$i;
        label = 12;
        break;
       } else {
        $$pre19$i = ((($9)) + 4|0);
        $$pre$phi$iZ2D = $$pre19$i;
        break;
       }
      } else {
       $38 = $25;
       label = 12;
      }
     } while(0);
     if ((label|0) == 12) {
      $29 = ((($local_B$i)) + 16|0);
      HEAP32[$29>>2] = 0;
      $30 = HEAP32[$9>>2]|0;
      HEAP32[$local_B$i>>2] = $30;
      $31 = ((($9)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ((($local_B$i)) + 4|0);
      HEAP32[$33>>2] = $32;
      $34 = ((($9)) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($local_B$i)) + 8|0);
      HEAP32[$36>>2] = $35;
      $37 = ((($local_B$i)) + 12|0);
      HEAP32[$37>>2] = $38;
      $39 = ((($9)) + 16|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = $40 & -8;
      $42 = $41 | 6;
      HEAP32[$29>>2] = $42;
      $43 = (_BN_nnmod($9,$local_B$i,$8,$ctx)|0);
      $44 = ($43|0)==(0);
      if ($44) {
       $R$1$i = $R$02$i;$ret$0$i = 0;
       break;
      } else {
       $$pre$phi$iZ2D = $31;
      }
     }
     $45 = HEAP32[$$pre$phi$iZ2D>>2]|0;
     $46 = ($45|0)==(0);
     if ($46) {
      $A$0$lcssa22$i = $8;$Y$0$lcssa24$i = $13;
      label = 20;
     } else {
      $47 = ((($local_A$i)) + 16|0);
      $48 = ((($local_A$i)) + 4|0);
      $49 = ((($local_A$i)) + 8|0);
      $50 = ((($local_A$i)) + 12|0);
      $A$012$i = $8;$B$010$i = $9;$M$07$i = $12;$X$09$i = $10;$Y$08$i = $13;$sign$011$i = -1;
      while(1) {
       HEAP32[$47>>2] = 0;
       $51 = HEAP32[$A$012$i>>2]|0;
       HEAP32[$local_A$i>>2] = $51;
       $52 = ((($A$012$i)) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       HEAP32[$48>>2] = $53;
       $54 = ((($A$012$i)) + 8|0);
       $55 = HEAP32[$54>>2]|0;
       HEAP32[$49>>2] = $55;
       $56 = ((($A$012$i)) + 12|0);
       $57 = HEAP32[$56>>2]|0;
       HEAP32[$50>>2] = $57;
       $58 = ((($A$012$i)) + 16|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = $59 & -8;
       $61 = $60 | 6;
       HEAP32[$47>>2] = $61;
       $62 = (_BN_div($11,$M$07$i,$local_A$i,$B$010$i,$ctx)|0);
       $63 = ($62|0)==(0);
       if ($63) {
        $R$1$i = $R$02$i;$ret$0$i = 0;
        break L109;
       }
       $64 = (_BN_mul($A$012$i,$11,$X$09$i,$ctx)|0);
       $65 = ($64|0)==(0);
       if ($65) {
        $R$1$i = $R$02$i;$ret$0$i = 0;
        break L109;
       }
       $66 = (_BN_add($A$012$i,$A$012$i,$Y$08$i)|0);
       $67 = ($66|0)==(0);
       if ($67) {
        $R$1$i = $R$02$i;$ret$0$i = 0;
        break L109;
       }
       $68 = (0 - ($sign$011$i))|0;
       $69 = ((($M$07$i)) + 4|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($70|0)==(0);
       if ($71) {
        $B$010$i$lcssa81 = $B$010$i;$X$09$i$lcssa82 = $X$09$i;$sign$011$i$lcssa80 = $sign$011$i;
        break;
       } else {
        $Y$08$i$phi = $X$09$i;$X$09$i$phi = $A$012$i;$M$07$i$phi = $Y$08$i;$B$010$i$phi = $M$07$i;$A$012$i$phi = $B$010$i;$sign$011$i = $68;$Y$08$i = $Y$08$i$phi;$X$09$i = $X$09$i$phi;$M$07$i = $M$07$i$phi;$B$010$i = $B$010$i$phi;$A$012$i = $A$012$i$phi;
       }
      }
      $phitmp$i = ($sign$011$i$lcssa80|0)>(0);
      if ($phitmp$i) {
       $A$0$lcssa22$i = $B$010$i$lcssa81;$Y$0$lcssa24$i = $X$09$i$lcssa82;
       label = 20;
      } else {
       $A$0$lcssa21$i = $B$010$i$lcssa81;$Y$0$lcssa23$i = $X$09$i$lcssa82;
      }
     }
     if ((label|0) == 20) {
      $72 = (_BN_sub($Y$0$lcssa24$i,$n,$Y$0$lcssa24$i)|0);
      $73 = ($72|0)==(0);
      if ($73) {
       $R$1$i = $R$02$i;$ret$0$i = 0;
       break;
      } else {
       $A$0$lcssa21$i = $A$0$lcssa22$i;$Y$0$lcssa23$i = $Y$0$lcssa24$i;
      }
     }
     $74 = ((($A$0$lcssa21$i)) + 4|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)==(1);
     if ($76) {
      $77 = HEAP32[$A$0$lcssa21$i>>2]|0;
      $78 = HEAP32[$77>>2]|0;
      $79 = ($78|0)==(1);
      if ($79) {
       $80 = ((($A$0$lcssa21$i)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==(0);
       if ($82) {
        $83 = ((($Y$0$lcssa23$i)) + 12|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ($84|0)==(0);
        if ($85) {
         $86 = (_BN_ucmp($Y$0$lcssa23$i,$n)|0);
         $87 = ($86|0)<(0);
         if ($87) {
          $88 = (_BN_copy($R$02$i,$Y$0$lcssa23$i)|0);
          $89 = ($88|0)==(0|0);
          if ($89) {
           $R$1$i = $R$02$i;$ret$0$i = 0;
           break;
          }
         } else {
          label = 27;
         }
        } else {
         label = 27;
        }
        if ((label|0) == 27) {
         $90 = (_BN_nnmod($R$02$i,$Y$0$lcssa23$i,$n,$ctx)|0);
         $91 = ($90|0)==(0);
         if ($91) {
          $R$1$i = $R$02$i;$ret$0$i = 0;
          break;
         }
        }
        $R$1$i = $R$02$i;$ret$0$i = $R$02$i;
        break;
       }
      }
     }
     _ERR_put_error(3,139,108,89437,692);
     $R$1$i = $R$02$i;$ret$0$i = 0;
    }
   }
  }
 } while(0);
 $92 = ($ret$0$i|0)==(0|0);
 $93 = ($in|0)==(0|0);
 $or$cond$i = $93 & $92;
 if ($or$cond$i) {
  _BN_free($R$1$i);
 }
 _BN_CTX_end($ctx);
 $$0 = $ret$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _BN_kronecker($a,$b,$ctx) {
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A$07 = 0, $A$07$phi = 0, $B$0$lcssa = 0, $B$08 = 0, $B$08$phi = 0, $err$0$lcssa = 0, $err$1 = 0, $i$0 = 0, $i$0$lcssa = 0, $i$1 = 0, $i$1$lcssa = 0, $phitmp = 0, $ret$0 = 0, $ret$0$ = 0, $ret$1$lcssa = 0;
 var $ret$1$lcssa$ = 0, $ret$1$ph = 0, $ret$16 = 0, $ret$2 = 0, $ret$2$ = 0, $ret$4 = 0, $ret$4$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($ctx);
 $0 = (_BN_CTX_get($ctx)|0);
 $1 = (_BN_CTX_get($ctx)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $err$1 = 0;$ret$4 = -2;
  } else {
   $3 = (_BN_copy($0,$a)|0);
   $4 = ($3|0)==(0|0);
   $5 = $4&1;
   if ($4) {
    $err$1 = $5;$ret$4 = -2;
   } else {
    $6 = (_BN_copy($1,$b)|0);
    $7 = ($6|0)==(0|0);
    $8 = $7&1;
    if ($7) {
     $err$1 = $8;$ret$4 = -2;
    } else {
     $9 = ((($1)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0);
     $12 = ((($0)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     if ($11) {
      $14 = ($13|0)==(1);
      if ($14) {
       $15 = HEAP32[$0>>2]|0;
       $16 = HEAP32[$15>>2]|0;
       $17 = ($16|0)==(1);
       if ($17) {
        $err$1 = $8;$ret$4 = 1;
        break;
       }
      }
      $err$1 = $8;$ret$4 = 0;
      break;
     }
     $18 = ($13|0)>(0);
     if ($18) {
      $19 = HEAP32[$0>>2]|0;
      $20 = HEAP32[$19>>2]|0;
      $21 = $20 & 1;
      $22 = ($21|0)==(0);
      if ($22) {
       label = 10;
      } else {
       $i$0 = 0;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      $23 = ($10|0)>(0);
      if (!($23)) {
       $err$1 = $8;$ret$4 = 0;
       break;
      }
      $24 = HEAP32[$1>>2]|0;
      $25 = HEAP32[$24>>2]|0;
      $26 = $25 & 1;
      $27 = ($26|0)==(0);
      if ($27) {
       $err$1 = $8;$ret$4 = 0;
       break;
      } else {
       $i$0 = 0;
      }
     }
     while(1) {
      $28 = (_BN_is_bit_set($1,$i$0)|0);
      $29 = ($28|0)==(0);
      $30 = (($i$0) + 1)|0;
      if ($29) {
       $i$0 = $30;
      } else {
       $i$0$lcssa = $i$0;
       break;
      }
     }
     $31 = (_BN_rshift($1,$1,$i$0$lcssa)|0);
     $32 = ($31|0)==(0);
     $33 = $32&1;
     if ($32) {
      $err$1 = $33;$ret$4 = -2;
     } else {
      $34 = $i$0$lcssa & 1;
      $35 = ($34|0)==(0);
      if ($35) {
       $ret$0 = 1;
      } else {
       $36 = HEAP32[$12>>2]|0;
       $37 = ($36|0)==(0);
       if ($37) {
        $41 = 0;
       } else {
        $38 = HEAP32[$0>>2]|0;
        $39 = HEAP32[$38>>2]|0;
        $phitmp = $39 & 7;
        $41 = $phitmp;
       }
       $40 = (50004 + ($41<<2)|0);
       $42 = HEAP32[$40>>2]|0;
       $ret$0 = $42;
      }
      $43 = ((($1)) + 12|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0);
      if ($45) {
       $ret$1$ph = $ret$0;
      } else {
       HEAP32[$43>>2] = 0;
       $46 = ((($0)) + 12|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0);
       $49 = (0 - ($ret$0))|0;
       $ret$0$ = $48 ? $ret$0 : $49;
       $ret$1$ph = $ret$0$;
      }
      $50 = HEAP32[$12>>2]|0;
      $51 = ($50|0)==(0);
      if ($51) {
       $B$0$lcssa = $1;$err$0$lcssa = $33;$ret$1$lcssa = $ret$1$ph;
      } else {
       $80 = $12;$A$07 = $0;$B$08 = $1;$ret$16 = $ret$1$ph;
       while(1) {
        $i$1 = 0;
        while(1) {
         $58 = (_BN_is_bit_set($A$07,$i$1)|0);
         $59 = ($58|0)==(0);
         $60 = (($i$1) + 1)|0;
         if ($59) {
          $i$1 = $60;
         } else {
          $i$1$lcssa = $i$1;
          break;
         }
        }
        $61 = (_BN_rshift($A$07,$A$07,$i$1$lcssa)|0);
        $62 = ($61|0)==(0);
        $63 = $62&1;
        if ($62) {
         $err$1 = $63;$ret$4 = $ret$16;
         break L1;
        }
        $64 = $i$1$lcssa & 1;
        $65 = ($64|0)==(0);
        if ($65) {
         $ret$2 = $ret$16;
        } else {
         $66 = ((($B$08)) + 4|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = ($67|0)==(0);
         if ($68) {
          $72 = 0;
         } else {
          $69 = HEAP32[$B$08>>2]|0;
          $70 = HEAP32[$69>>2]|0;
          $72 = $70;
         }
         $71 = $72 & 7;
         $73 = (50004 + ($71<<2)|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = Math_imul($74, $ret$16)|0;
         $ret$2 = $75;
        }
        $76 = ((($A$07)) + 12|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ($77|0)==(0);
        $79 = HEAP32[$80>>2]|0;
        $81 = ($79|0)==(0);
        if ($78) {
         if ($81) {
          $94 = 0;
         } else {
          $86 = HEAP32[$A$07>>2]|0;
          $87 = HEAP32[$86>>2]|0;
          $94 = $87;
         }
        } else {
         if ($81) {
          $85 = 0;
         } else {
          $82 = HEAP32[$A$07>>2]|0;
          $83 = HEAP32[$82>>2]|0;
          $85 = $83;
         }
         $84 = $85 ^ -1;
         $94 = $84;
        }
        $88 = ((($B$08)) + 4|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = ($89|0)==(0);
        if ($90) {
         $96 = 0;
        } else {
         $91 = HEAP32[$B$08>>2]|0;
         $92 = HEAP32[$91>>2]|0;
         $96 = $92;
        }
        $93 = $94 & 2;
        $95 = $93 & $96;
        $97 = ($95|0)==(0);
        $98 = (0 - ($ret$2))|0;
        $ret$2$ = $97 ? $ret$2 : $98;
        $99 = (_BN_nnmod($B$08,$B$08,$A$07,$ctx)|0);
        $100 = ($99|0)==(0);
        $101 = $100&1;
        if ($100) {
         $err$1 = $101;$ret$4 = $ret$2$;
         break L1;
        }
        HEAP32[$76>>2] = 0;
        $102 = HEAP32[$88>>2]|0;
        $103 = ($102|0)==(0);
        if ($103) {
         $B$0$lcssa = $A$07;$err$0$lcssa = $101;$ret$1$lcssa = $ret$2$;
         break;
        } else {
         $B$08$phi = $A$07;$A$07$phi = $B$08;$80 = $88;$ret$16 = $ret$2$;$B$08 = $B$08$phi;$A$07 = $A$07$phi;
        }
       }
      }
      $52 = ((($B$0$lcssa)) + 4|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($53|0)==(1);
      if ($54) {
       $55 = HEAP32[$B$0$lcssa>>2]|0;
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(1);
       $ret$1$lcssa$ = $57 ? $ret$1$lcssa : 0;
       $err$1 = $err$0$lcssa;$ret$4 = $ret$1$lcssa$;
      } else {
       $err$1 = $err$0$lcssa;$ret$4 = 0;
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($ctx);
 $104 = ($err$1|0)==(0);
 $ret$4$ = $104 ? $ret$4 : -2;
 return ($ret$4$|0);
}
function _BN_value_one() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50036|0);
}
function _BN_num_bits_word($l) {
 $l = $l|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l>>>0)>(65535);
 if ($0) {
  $1 = ($l>>>0)>(16777215);
  if ($1) {
   $2 = $l >>> 24;
   $3 = (89446 + ($2)|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4&255;
   $6 = (($5) + 24)|0;
   $$0 = $6;
   return ($$0|0);
  } else {
   $7 = $l >>> 16;
   $8 = (89446 + ($7)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = (($10) + 16)|0;
   $$0 = $11;
   return ($$0|0);
  }
 } else {
  $12 = $l & 65280;
  $13 = ($12|0)==(0);
  if ($13) {
   $19 = (89446 + ($l)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $$0 = $21;
   return ($$0|0);
  } else {
   $14 = $l >>> 8;
   $15 = (89446 + ($14)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = (($17) + 8)|0;
   $$0 = $18;
   return ($$0|0);
  }
 }
 return (0)|0;
}
function _BN_num_bits($a) {
 $a = $a|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = ($1|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $2 << 5;
 $5 = HEAP32[$a>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(65535);
 do {
  if ($8) {
   $9 = ($7>>>0)>(16777215);
   if ($9) {
    $10 = $7 >>> 24;
    $11 = (89446 + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = (($13) + 24)|0;
    $$0$i = $14;
    break;
   } else {
    $15 = $7 >>> 16;
    $16 = (89446 + ($15)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (($18) + 16)|0;
    $$0$i = $19;
    break;
   }
  } else {
   $20 = $7 & 65280;
   $21 = ($20|0)==(0);
   if ($21) {
    $27 = (89446 + ($7)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $$0$i = $29;
    break;
   } else {
    $22 = $7 >>> 8;
    $23 = (89446 + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = (($25) + 8)|0;
    $$0$i = $26;
    break;
   }
  }
 } while(0);
 $30 = (($$0$i) + ($4))|0;
 $$0 = $30;
 return ($$0|0);
}
function _BN_clear_free($a) {
 $a = $a|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$a>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$pre = ((($a)) + 16|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $3 = ((($a)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 << 2;
  _OPENSSL_cleanse($1,$5);
  $6 = ((($a)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[$a>>2]|0;
   _CRYPTO_free($10);
   $$pre$phiZ2D = $6;
  } else {
   $$pre$phiZ2D = $6;
  }
 }
 $11 = HEAP32[$$pre$phiZ2D>>2]|0;
 $12 = $11 & 1;
 _OPENSSL_cleanse($a,20);
 $13 = ($12|0)==(0);
 if ($13) {
  return;
 }
 _CRYPTO_free($a);
 return;
}
function _BN_free($a) {
 $a = $a|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$a>>2]|0;
 $2 = ($1|0)==(0|0);
 $$pre = ((($a)) + 16|0);
 if (!($2)) {
  $3 = HEAP32[$$pre>>2]|0;
  $4 = $3 & 2;
  $5 = ($4|0)==(0);
  if ($5) {
   _CRYPTO_free($1);
  }
 }
 $6 = HEAP32[$$pre>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $6 | 32768;
  HEAP32[$$pre>>2] = $9;
  HEAP32[$a>>2] = 0;
  return;
 } else {
  _CRYPTO_free($a);
  return;
 }
}
function _BN_init($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$a>>2]=0|0;HEAP32[$a+4>>2]=0|0;HEAP32[$a+8>>2]=0|0;HEAP32[$a+12>>2]=0|0;HEAP32[$a+16>>2]=0|0;
 return;
}
function _BN_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(20,89702,272)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(3,113,65,89702,273);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = ((($0)) + 16|0);
  HEAP32[$2>>2] = 1;
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_dup($a) {
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_CRYPTO_malloc(20,89702,272)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(3,113,65,89702,273);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 16|0);
 HEAP32[$3>>2] = 1;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 $4 = (_BN_copy($1,$a)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $1;
  return ($$0|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = HEAP32[$3>>2]|0;
  $9 = $8 & 2;
  $10 = ($9|0)==(0);
  if ($10) {
   _CRYPTO_free($6);
  }
 }
 $11 = HEAP32[$3>>2]|0;
 $12 = $11 & 1;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $11 | 32768;
  HEAP32[$3>>2] = $14;
  HEAP32[$1>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 } else {
  _CRYPTO_free($1);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _bn_expand2($b,$words) {
 $b = $b|0;
 $words = $words|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($words|0);
 if (!($2)) {
  $$0 = $b;
  return ($$0|0);
 }
 $3 = (_bn_expand_internal($b,$words)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[$b>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _CRYPTO_free($5);
 }
 HEAP32[$b>>2] = $3;
 HEAP32[$0>>2] = $words;
 $$0 = $b;
 return ($$0|0);
}
function _BN_copy($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $$pre = 0, $$pre10 = 0, $$pre11 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $A$0$lcssa = 0, $A$03 = 0, $B$0$lcssa = 0, $B$02 = 0, $i$04 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==($b|0);
 if ($0) {
  $$0 = $a;
  return ($$0|0);
 }
 $1 = ((($b)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($a)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($4|0);
 if ($5) {
  $6 = (_bn_expand_internal($a,$2)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 0;
   return ($$0|0);
  }
  $8 = HEAP32[$a>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   _CRYPTO_free($8);
  }
  HEAP32[$a>>2] = $6;
  HEAP32[$3>>2] = $2;
  $$pre9 = HEAP32[$1>>2]|0;
  $12 = $$pre9;$29 = $6;
 } else {
  $$pre = HEAP32[$a>>2]|0;
  $12 = $2;$29 = $$pre;
 }
 $10 = HEAP32[$b>>2]|0;
 $11 = $12 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = $11 << 2;
  $scevgep = (($10) + ($14<<2)|0);
  $A$03 = $29;$B$02 = $10;$i$04 = $11;
  while(1) {
   $15 = HEAP32[$B$02>>2]|0;
   $16 = ((($B$02)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($B$02)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($B$02)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$A$03>>2] = $15;
   $22 = ((($A$03)) + 4|0);
   HEAP32[$22>>2] = $17;
   $23 = ((($A$03)) + 8|0);
   HEAP32[$23>>2] = $19;
   $24 = ((($A$03)) + 12|0);
   HEAP32[$24>>2] = $21;
   $25 = (($i$04) + -1)|0;
   $26 = ((($A$03)) + 16|0);
   $27 = ((($B$02)) + 16|0);
   $28 = ($i$04|0)>(1);
   if ($28) {
    $A$03 = $26;$B$02 = $27;$i$04 = $25;
   } else {
    break;
   }
  }
  $scevgep7 = (($29) + ($14<<2)|0);
  $$pre10 = HEAP32[$1>>2]|0;
  $31 = $$pre10;$A$0$lcssa = $scevgep7;$B$0$lcssa = $scevgep;
 } else {
  $31 = $12;$A$0$lcssa = $29;$B$0$lcssa = $10;
 }
 $30 = $31 & 3;
 switch ($30|0) {
 case 3:  {
  $32 = ((($B$0$lcssa)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($A$0$lcssa)) + 8|0);
  HEAP32[$34>>2] = $33;
  label = 14;
  break;
 }
 case 2:  {
  label = 14;
  break;
 }
 case 1:  {
  label = 15;
  break;
 }
 default: {
  $40 = $31;
 }
 }
 if ((label|0) == 14) {
  $35 = ((($B$0$lcssa)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($A$0$lcssa)) + 4|0);
  HEAP32[$37>>2] = $36;
  label = 15;
 }
 if ((label|0) == 15) {
  $38 = HEAP32[$B$0$lcssa>>2]|0;
  HEAP32[$A$0$lcssa>>2] = $38;
  $$pre11 = HEAP32[$1>>2]|0;
  $40 = $$pre11;
 }
 $39 = ((($a)) + 4|0);
 HEAP32[$39>>2] = $40;
 $41 = ((($b)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($a)) + 12|0);
 HEAP32[$43>>2] = $42;
 $$0 = $a;
 return ($$0|0);
}
function _BN_set_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $$pre = HEAP32[$a>>2]|0;
  $8 = $$pre;
 } else {
  $3 = (_bn_expand_internal($a,1)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
   return ($$0|0);
  }
  $5 = HEAP32[$a>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _CRYPTO_free($5);
  }
  HEAP32[$a>>2] = $3;
  HEAP32[$0>>2] = 1;
  $8 = $3;
 }
 $7 = ((($a)) + 12|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$8>>2] = $w;
 $9 = ($w|0)!=(0);
 $10 = $9&1;
 $11 = ((($a)) + 4|0);
 HEAP32[$11>>2] = $10;
 $$0 = 1;
 return ($$0|0);
}
function _BN_bin2bn($s,$len,$ret) {
 $s = $s|0;
 $len = $len|0;
 $ret = $ret|0;
 var $$01 = 0, $$02 = 0, $$02$ph = 0, $$05 = 0, $$lcssa = 0, $$lcssa27 = 0, $$lcssa28 = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bn$06 = 0, $ftl$010 = 0, $i$0$ph = 0, $l$0 = 0, $m$0 = 0, $m$0$ph = 0, $n$0 = 0, $n$0$ph = 0, $or$cond = 0, $tmp_top$0$lcssa = 0, $tmp_top$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ret|0)==(0|0);
 do {
  if ($0) {
   $1 = (_CRYPTO_malloc(20,89702,272)|0);
   $2 = ($1|0)==(0|0);
   if (!($2)) {
    $3 = ((($1)) + 16|0);
    HEAP32[$3>>2] = 1;
    ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
    $$05 = $1;$bn$06 = $1;
    break;
   }
   _ERR_put_error(3,113,65,89702,273);
   $$01 = 0;
   return ($$01|0);
  } else {
   $$05 = $ret;$bn$06 = 0;
  }
 } while(0);
 $4 = ($len|0)==(0);
 if ($4) {
  $5 = ((($$05)) + 4|0);
  HEAP32[$5>>2] = 0;
  $$01 = $$05;
  return ($$01|0);
 }
 $6 = (($len) + -1)|0;
 $7 = $6 >>> 2;
 $8 = (($7) + 1)|0;
 $9 = $6 & 3;
 $10 = ((($$05)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($7|0)>=($11|0);
 $13 = ($11|0)<($8|0);
 $or$cond = $12 & $13;
 do {
  if ($or$cond) {
   $14 = (_bn_expand_internal($$05,$8)|0);
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $16 = HEAP32[$$05>>2]|0;
    $17 = ($16|0)==(0|0);
    if (!($17)) {
     _CRYPTO_free($16);
    }
    HEAP32[$$05>>2] = $14;
    HEAP32[$10>>2] = $8;
    $$pre$phiZ2D = $$05;
    break;
   }
   $18 = ($bn$06|0)==(0|0);
   if ($18) {
    $$01 = 0;
    return ($$01|0);
   }
   $19 = HEAP32[$bn$06>>2]|0;
   $20 = ($19|0)==(0|0);
   $$pre$i = ((($bn$06)) + 16|0);
   if (!($20)) {
    $21 = HEAP32[$$pre$i>>2]|0;
    $22 = $21 & 2;
    $23 = ($22|0)==(0);
    if ($23) {
     _CRYPTO_free($19);
    }
   }
   $24 = HEAP32[$$pre$i>>2]|0;
   $25 = $24 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = $24 | 32768;
    HEAP32[$$pre$i>>2] = $27;
    HEAP32[$bn$06>>2] = 0;
    $$01 = 0;
    return ($$01|0);
   } else {
    _CRYPTO_free($bn$06);
    $$01 = 0;
    return ($$01|0);
   }
  } else {
   $$pre$phiZ2D = $$05;
  }
 } while(0);
 $28 = ((($$05)) + 4|0);
 HEAP32[$28>>2] = $8;
 $29 = ((($$05)) + 12|0);
 HEAP32[$29>>2] = 0;
 $$02$ph = $s;$i$0$ph = $8;$m$0$ph = $9;$n$0$ph = $len;
 L34: while(1) {
  $$02 = $$02$ph;$l$0 = 0;$m$0 = $m$0$ph;$n$0 = $n$0$ph;
  while(1) {
   $30 = (($n$0) + -1)|0;
   $31 = ($n$0|0)==(0);
   if ($31) {
    break L34;
   }
   $32 = $l$0 << 8;
   $33 = ((($$02)) + 1|0);
   $34 = HEAP8[$$02>>0]|0;
   $35 = $34&255;
   $36 = $35 | $32;
   $37 = (($m$0) + -1)|0;
   $38 = ($m$0|0)==(0);
   if ($38) {
    $$lcssa = $33;$$lcssa27 = $30;$$lcssa28 = $36;
    break;
   } else {
    $$02 = $33;$l$0 = $36;$m$0 = $37;$n$0 = $30;
   }
  }
  $39 = (($i$0$ph) + -1)|0;
  $40 = HEAP32[$$pre$phiZ2D>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  HEAP32[$41>>2] = $$lcssa28;
  $$02$ph = $$lcssa;$i$0$ph = $39;$m$0$ph = 3;$n$0$ph = $$lcssa27;
 }
 $42 = HEAP32[$28>>2]|0;
 $43 = ($42|0)>(0);
 if (!($43)) {
  $$01 = $$05;
  return ($$01|0);
 }
 $44 = HEAP32[$$pre$phiZ2D>>2]|0;
 $45 = (($42) + -1)|0;
 $46 = (($44) + ($45<<2)|0);
 $ftl$010 = $46;$tmp_top$011 = $42;
 while(1) {
  $47 = HEAP32[$ftl$010>>2]|0;
  $48 = ($47|0)==(0);
  if (!($48)) {
   $tmp_top$0$lcssa = $tmp_top$011;
   break;
  }
  $49 = ((($ftl$010)) + -4|0);
  $50 = (($tmp_top$011) + -1)|0;
  $51 = ($tmp_top$011|0)>(1);
  if ($51) {
   $ftl$010 = $49;$tmp_top$011 = $50;
  } else {
   $tmp_top$0$lcssa = $50;
   break;
  }
 }
 HEAP32[$28>>2] = $tmp_top$0$lcssa;
 $$01 = $$05;
 return ($$01|0);
}
function _BN_bn2bin($a,$to) {
 $a = $a|0;
 $to = $to|0;
 var $$0$i$i = 0, $$0$i3 = 0, $$02 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $phitmp$off = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = ($1|0)==(0);
 if ($3) {
  $$0$i3 = 0;
  return ($$0$i3|0);
 }
 $4 = $2 << 5;
 $5 = HEAP32[$a>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(65535);
 do {
  if ($8) {
   $9 = ($7>>>0)>(16777215);
   if ($9) {
    $10 = $7 >>> 24;
    $11 = (89446 + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = (($13) + 24)|0;
    $$0$i$i = $14;
    break;
   } else {
    $15 = $7 >>> 16;
    $16 = (89446 + ($15)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (($18) + 16)|0;
    $$0$i$i = $19;
    break;
   }
  } else {
   $20 = $7 & 65280;
   $21 = ($20|0)==(0);
   if ($21) {
    $27 = (89446 + ($7)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $$0$i$i = $29;
    break;
   } else {
    $22 = $7 >>> 8;
    $23 = (89446 + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = (($25) + 8)|0;
    $$0$i$i = $26;
    break;
   }
  }
 } while(0);
 $30 = $4 | 7;
 $phitmp = (($30) + ($$0$i$i))|0;
 $phitmp1 = (($phitmp|0) / 8)&-1;
 $phitmp$off = (($phitmp) + 7)|0;
 $31 = ($phitmp$off>>>0)<(15);
 if ($31) {
  $$0$i3 = 0;
  return ($$0$i3|0);
 }
 $$02 = $to;$$in = $phitmp1;
 while(1) {
  $32 = (($$in) + -1)|0;
  $33 = (($32|0) / 4)&-1;
  $34 = HEAP32[$a>>2]|0;
  $35 = (($34) + ($33<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($32|0) % 4)&-1;
  $38 = $37 << 3;
  $39 = $36 >>> $38;
  $40 = $39&255;
  $41 = ((($$02)) + 1|0);
  HEAP8[$$02>>0] = $40;
  $42 = ($32|0)==(0);
  if ($42) {
   $$0$i3 = $phitmp1;
   break;
  } else {
   $$02 = $41;$$in = $32;
  }
 }
 return ($$0$i3|0);
}
function _BN_ucmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0;
 var $i$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $5 = (($1) - ($3))|0;
  $$0 = $5;
  return ($$0|0);
 }
 $6 = HEAP32[$a>>2]|0;
 $7 = HEAP32[$b>>2]|0;
 $i$0$in = $1;
 while(1) {
  $i$0 = (($i$0$in) + -1)|0;
  $8 = ($i$0$in|0)>(0);
  if (!($8)) {
   $$0 = 0;
   label = 7;
   break;
  }
  $9 = (($6) + ($i$0<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($i$0<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)==($12|0);
  if ($13) {
   $i$0$in = $i$0;
  } else {
   $$lcssa = $10;$$lcssa6 = $12;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $14 = ($$lcssa>>>0)>($$lcssa6>>>0);
 $15 = $14 ? 1 : -1;
 $$0 = $15;
 return ($$0|0);
}
function _BN_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$$ = 0, $$0 = 0, $$3 = 0, $$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$in = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 $1 = ($b|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $2 = $1&1;
  $$ = $2 ^ 1;
  $$$ = $0 ? $$ : -1;
  return ($$$|0);
 }
 $3 = ((($a)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($b)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 $8 = ($4|0)==(0);
 $$3 = $8 ? 1 : -1;
 if (!($7)) {
  $$0 = $$3;
  return ($$0|0);
 }
 $$4 = $8 ? -1 : 1;
 $9 = ((($a)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($b)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)>($12|0);
 if ($13) {
  $$0 = $$3;
  return ($$0|0);
 }
 $14 = ($10|0)<($12|0);
 if ($14) {
  $$0 = $$4;
  return ($$0|0);
 }
 $i$0$in = $10;
 while(1) {
  $i$0 = (($i$0$in) + -1)|0;
  $15 = ($i$0$in|0)>(0);
  if (!($15)) {
   $$0 = 0;
   label = 10;
   break;
  }
  $16 = HEAP32[$a>>2]|0;
  $17 = (($16) + ($i$0<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$b>>2]|0;
  $20 = (($19) + ($i$0<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18>>>0)>($21>>>0);
  if ($22) {
   $$0 = $$3;
   label = 10;
   break;
  }
  $23 = ($18>>>0)<($21>>>0);
  if ($23) {
   $$0 = $$4;
   label = 10;
   break;
  } else {
   $i$0$in = $i$0;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_set_bit($a,$n) {
 $a = $a|0;
 $n = $n|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($n|0) / 32)&-1;
 $2 = ((($a)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>($1|0);
 if (!($4)) {
  $5 = (($1) + 1)|0;
  $6 = ((($a)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($1|0)>=($7|0);
  $9 = ($7|0)<($5|0);
  $or$cond = $8 & $9;
  if ($or$cond) {
   $10 = (_bn_expand_internal($a,$5)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$0 = 0;
    return ($$0|0);
   }
   $12 = HEAP32[$a>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    _CRYPTO_free($12);
   }
   HEAP32[$a>>2] = $10;
   HEAP32[$6>>2] = $5;
   $$pre = HEAP32[$2>>2]|0;
   $15 = $$pre;
  } else {
   $15 = $3;
  }
  $14 = ($1|0)<($15|0);
  if (!($14)) {
   $16 = HEAP32[$a>>2]|0;
   $scevgep = (($16) + ($15<<2)|0);
   $17 = (($5) - ($15))|0;
   $18 = $17 << 2;
   _memset(($scevgep|0),0,($18|0))|0;
  }
  HEAP32[$2>>2] = $5;
 }
 $19 = $n & 31;
 $20 = 1 << $19;
 $21 = HEAP32[$a>>2]|0;
 $22 = (($21) + ($1<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 | $20;
 HEAP32[$22>>2] = $24;
 $$0 = 1;
 return ($$0|0);
}
function _BN_is_bit_set($a,$n) {
 $a = $a|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($n|0) / 32)&-1;
 $2 = ((($a)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>($1|0);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[$a>>2]|0;
 $6 = (($5) + ($1<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $n & 31;
 $9 = $7 >>> $8;
 $10 = $9 & 1;
 $$0 = $10;
 return ($$0|0);
}
function _BN_mask_bits($a,$n) {
 $a = $a|0;
 $n = $n|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ftl$01 = 0, $tmp_top$0$lcssa = 0, $tmp_top$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($n|0) / 32)&-1;
 $2 = (($n|0) % 32)&-1;
 $3 = ((($a)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)<($4|0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($2|0)==(0);
 if ($6) {
  HEAP32[$3>>2] = $1;
  $15 = $1;
 } else {
  $7 = (($1) + 1)|0;
  HEAP32[$3>>2] = $7;
  $8 = -1 << $2;
  $9 = $8 ^ -1;
  $10 = HEAP32[$a>>2]|0;
  $11 = (($10) + ($1<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & $9;
  HEAP32[$11>>2] = $13;
  $$pr = HEAP32[$3>>2]|0;
  $15 = $$pr;
 }
 $14 = ($15|0)>(0);
 if (!($14)) {
  $$0 = 1;
  return ($$0|0);
 }
 $16 = HEAP32[$a>>2]|0;
 $17 = (($15) + -1)|0;
 $18 = (($16) + ($17<<2)|0);
 $ftl$01 = $18;$tmp_top$02 = $15;
 while(1) {
  $19 = HEAP32[$ftl$01>>2]|0;
  $20 = ($19|0)==(0);
  if (!($20)) {
   $tmp_top$0$lcssa = $tmp_top$02;
   break;
  }
  $21 = ((($ftl$01)) + -4|0);
  $22 = (($tmp_top$02) + -1)|0;
  $23 = ($tmp_top$02|0)>(1);
  if ($23) {
   $ftl$01 = $21;$tmp_top$02 = $22;
  } else {
   $tmp_top$0$lcssa = $22;
   break;
  }
 }
 HEAP32[$3>>2] = $tmp_top$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _BN_set_negative($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($b|0)==(0);
 if (!($0)) {
  $1 = ((($a)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = ((($a)) + 12|0);
   HEAP32[$4>>2] = 1;
   return;
  }
 }
 $5 = ((($a)) + 12|0);
 HEAP32[$5>>2] = 0;
 return;
}
function _bn_cmp_words($a,$b,$n) {
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + -1)|0;
 $1 = (($a) + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($b) + ($0<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $6 = ($2>>>0)>($4>>>0);
  $7 = $6 ? 1 : -1;
  $$0 = $7;
  return ($$0|0);
 }
 $8 = (($n) + -2)|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $i$02 = $8;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $12 = (($a) + ($i$02<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($b) + ($i$02<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13|0)==($15|0);
  if (!($16)) {
   $$lcssa = $13;$$lcssa16 = $15;
   break;
  }
  $10 = (($i$02) + -1)|0;
  $11 = ($i$02|0)>(0);
  if ($11) {
   $i$02 = $10;
  } else {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $17 = ($$lcssa>>>0)>($$lcssa16>>>0);
 $18 = $17 ? 1 : -1;
 $$0 = $18;
 return ($$0|0);
}
function _bn_cmp_part_words($a,$b,$cl,$dl) {
 $a = $a|0;
 $b = $b|0;
 $cl = $cl|0;
 $dl = $dl|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa30 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$i = 0, $i$09 = 0, $i$18 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($cl) + -1)|0;
 $1 = ($dl|0)<(0);
 L1: do {
  if ($1) {
   $i$09 = $dl;
   while(1) {
    $4 = (($0) - ($i$09))|0;
    $5 = (($b) + ($4<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0);
    if (!($7)) {
     $$0 = -1;
     break;
    }
    $2 = (($i$09) + 1)|0;
    $3 = ($i$09|0)<(-1);
    if ($3) {
     $i$09 = $2;
    } else {
     break L1;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $8 = ($dl|0)>(0);
 L7: do {
  if ($8) {
   $i$18 = $dl;
   while(1) {
    $11 = (($i$18) + ($0))|0;
    $12 = (($a) + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $$0 = 1;
     break;
    }
    $9 = (($i$18) + -1)|0;
    $10 = ($i$18|0)>(1);
    if ($10) {
     $i$18 = $9;
    } else {
     break L7;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $15 = (($a) + ($0<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($b) + ($0<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)==($18|0);
 if (!($19)) {
  $20 = ($16>>>0)>($18>>>0);
  $21 = $20 ? 1 : -1;
  $$0 = $21;
  return ($$0|0);
 }
 $22 = (($cl) + -2)|0;
 $23 = ($22|0)>(-1);
 if ($23) {
  $i$02$i = $22;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $26 = (($a) + ($i$02$i<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($b) + ($i$02$i<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($27|0)==($29|0);
  if (!($30)) {
   $$lcssa = $27;$$lcssa30 = $29;
   break;
  }
  $24 = (($i$02$i) + -1)|0;
  $25 = ($i$02$i|0)>(0);
  if ($25) {
   $i$02$i = $24;
  } else {
   $$0 = 0;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 $31 = ($$lcssa>>>0)>($$lcssa30>>>0);
 $32 = $31 ? 1 : -1;
 $$0 = $32;
 return ($$0|0);
}
function _bn_expand_internal($b,$words) {
 $b = $b|0;
 $words = $words|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $A$0$lcssa = 0, $A$03 = 0, $B$0$lcssa = 0, $B$02 = 0, $i$01 = 0, $scevgep = 0, $scevgep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($words|0)>(16777215);
 if ($0) {
  _ERR_put_error(3,120,114,89702,296);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($b)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _ERR_put_error(3,120,105,89702,300);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = $words << 2;
 $6 = (_CRYPTO_malloc($5,89702,303)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _ERR_put_error(3,120,65,89702,305);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = HEAP32[$b>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = $6;
  return ($$0|0);
 }
 $10 = ((($b)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >> 2;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = (($12) + -2)|0;
  $15 = $14 << 2;
  $16 = (($15) + 8)|0;
  $17 = $14 << 4;
  $18 = (($17) + 32)|0;
  $scevgep6 = (($6) + ($18)|0);
  $A$03 = $6;$B$02 = $8;$i$01 = $12;
  while(1) {
   $19 = HEAP32[$B$02>>2]|0;
   $20 = ((($B$02)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($B$02)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($B$02)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$A$03>>2] = $19;
   $26 = ((($A$03)) + 4|0);
   HEAP32[$26>>2] = $21;
   $27 = ((($A$03)) + 8|0);
   HEAP32[$27>>2] = $23;
   $28 = ((($A$03)) + 12|0);
   HEAP32[$28>>2] = $25;
   $29 = (($i$01) + -1)|0;
   $30 = ((($A$03)) + 16|0);
   $31 = ((($B$02)) + 16|0);
   $32 = ($i$01|0)>(1);
   if ($32) {
    $A$03 = $30;$B$02 = $31;$i$01 = $29;
   } else {
    break;
   }
  }
  $scevgep = (($8) + ($16<<2)|0);
  $$pre = HEAP32[$10>>2]|0;
  $34 = $$pre;$A$0$lcssa = $scevgep6;$B$0$lcssa = $scevgep;
 } else {
  $34 = $11;$A$0$lcssa = $6;$B$0$lcssa = $8;
 }
 $33 = $34 & 3;
 switch ($33|0) {
 case 3:  {
  $35 = ((($B$0$lcssa)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($A$0$lcssa)) + 8|0);
  HEAP32[$37>>2] = $36;
  label = 14;
  break;
 }
 case 2:  {
  label = 14;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  $$0 = $6;
  return ($$0|0);
 }
 }
 if ((label|0) == 14) {
  $38 = ((($B$0$lcssa)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($A$0$lcssa)) + 4|0);
  HEAP32[$40>>2] = $39;
 }
 $41 = HEAP32[$B$0$lcssa>>2]|0;
 HEAP32[$A$0$lcssa>>2] = $41;
 $$0 = $6;
 return ($$0|0);
}
function _BN_nnmod($r,$m,$d,$ctx) {
 $r = $r|0;
 $m = $m|0;
 $d = $d|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_div(0,$r,$m,$d,$ctx)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($r)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ((($d)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7 ? 49 : 50;
 $9 = (FUNCTION_TABLE_iiii[$8 & 63]($r,$r,$d)|0);
 $$0 = $9;
 return ($$0|0);
}
function _BN_mod_add($r,$a,$b,$m,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $m = $m|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_add($r,$a,$b)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_BN_div(0,$r,$r,$m,$ctx)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($r)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = ((($m)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 $10 = $9 ? 49 : 50;
 $11 = (FUNCTION_TABLE_iiii[$10 & 63]($r,$r,$m)|0);
 $$0 = $11;
 return ($$0|0);
}
function _BN_mod_add_quick($r,$a,$b,$m) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $m = $m|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_uadd($r,$a,$b)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_BN_ucmp($r,$m)|0);
  $3 = ($2|0)>(-1);
  if ($3) {
   $4 = (_BN_usub($r,$r,$m)|0);
   $$0 = $4;
  } else {
   $$0 = 1;
  }
 }
 return ($$0|0);
}
function _BN_mod_sub($r,$a,$b,$m,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $m = $m|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_sub($r,$a,$b)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_BN_div(0,$r,$r,$m,$ctx)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($r)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = ((($m)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 $10 = $9 ? 49 : 50;
 $11 = (FUNCTION_TABLE_iiii[$10 & 63]($r,$r,$m)|0);
 $$0 = $11;
 return ($$0|0);
}
function _BN_mod_sub_quick($r,$a,$b,$m) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $m = $m|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_sub($r,$a,$b)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($r)) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = (_BN_add($r,$r,$m)|0);
   $$0 = $5;
  }
 }
 return ($$0|0);
}
function _BN_mod_mul($r,$a,$b,$m,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $m = $m|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($ctx);
 $0 = (_BN_CTX_get($ctx)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $ret$0 = 0;
  } else {
   $2 = ($a|0)==($b|0);
   if ($2) {
    $3 = (_BN_sqr($0,$a,$ctx)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $ret$0 = 0;
     break;
    }
   } else {
    $5 = (_BN_mul($0,$a,$b,$ctx)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $ret$0 = 0;
     break;
    }
   }
   $7 = (_BN_div(0,$r,$0,$m,$ctx)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$0$i = 1;
   } else {
    $9 = ((($r)) + 12|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     $$0$i = 0;
    } else {
     $12 = ((($m)) + 12|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)!=(0);
     $15 = $14 ? 49 : 50;
     $16 = (FUNCTION_TABLE_iiii[$15 & 63]($r,$r,$m)|0);
     $phitmp = ($16|0)==(0);
     $$0$i = $phitmp;
    }
   }
   $17 = $$0$i&1;
   $$ = $17 ^ 1;
   $ret$0 = $$;
  }
 } while(0);
 _BN_CTX_end($ctx);
 return ($ret$0|0);
}
function _BN_mod_sqr($r,$a,$m,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $m = $m|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_sqr($r,$a,$ctx)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_BN_div(0,$r,$r,$m,$ctx)|0);
 $$0 = $2;
 return ($$0|0);
}
function _BN_mod_lshift1_quick($r,$a,$m) {
 $r = $r|0;
 $a = $a|0;
 $m = $m|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_lshift1($r,$a)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_BN_cmp($r,$m)|0);
  $3 = ($2|0)>(-1);
  if ($3) {
   $4 = (_BN_sub($r,$r,$m)|0);
   $$0 = $4;
  } else {
   $$0 = 1;
  }
 }
 return ($$0|0);
}
function _BN_mod_lshift_quick($r,$a,$n,$m) {
 $r = $r|0;
 $a = $a|0;
 $n = $n|0;
 $m = $m|0;
 var $$0 = 0, $$01$ = 0, $$012 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==($a|0);
 if (!($0)) {
  $1 = (_BN_copy($r,$a)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $3 = ($n|0)>(0);
 if ($3) {
  $$012 = $n;
 } else {
  $$0 = 1;
  return ($$0|0);
 }
 while(1) {
  $4 = (_BN_num_bits($m)|0);
  $5 = (_BN_num_bits($r)|0);
  $6 = (($4) - ($5))|0;
  $7 = ($6|0)<(0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = ($6|0)>($$012|0);
  $$01$ = $8 ? $$012 : $6;
  $9 = ($$01$|0)==(0);
  if ($9) {
   $13 = (_BN_lshift1($r,$r)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 0;
    label = 14;
    break;
   }
   $15 = (($$012) + -1)|0;
   $$1 = $15;
  } else {
   $10 = (_BN_lshift($r,$r,$$01$)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = 0;
    label = 14;
    break;
   }
   $12 = (($$012) - ($$01$))|0;
   $$1 = $12;
  }
  $16 = (_BN_cmp($r,$m)|0);
  $17 = ($16|0)>(-1);
  if ($17) {
   $19 = (_BN_sub($r,$r,$m)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$0 = 0;
    label = 14;
    break;
   }
  }
  $18 = ($$1|0)>(0);
  if ($18) {
   $$012 = $$1;
  } else {
   $$0 = 1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 5) {
  _ERR_put_error(3,119,110,89711,289);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 14) {
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_mod_mul_montgomery($r,$a,$b,$mont,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $mont = $mont|0;
 $ctx = $ctx|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($ctx);
 $0 = (_BN_CTX_get($ctx)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $ret$0 = 0;
  } else {
   $2 = ($a|0)==($b|0);
   if ($2) {
    $3 = (_BN_sqr($0,$a,$ctx)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $ret$0 = 0;
     break;
    }
   } else {
    $5 = (_BN_mul($0,$a,$b,$ctx)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $ret$0 = 0;
     break;
    }
   }
   $7 = (_BN_from_montgomery_word($r,$0,$mont)|0);
   $not$ = ($7|0)!=(0);
   $$ = $not$&1;
   $ret$0 = $$;
  }
 } while(0);
 _BN_CTX_end($ctx);
 return ($ret$0|0);
}
function _BN_from_montgomery($ret,$a,$mont,$ctx) {
 $ret = $ret|0;
 $a = $a|0;
 $mont = $mont|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $retn$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($ctx);
 $0 = (_BN_CTX_get($ctx)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $retn$0 = 0;
 } else {
  $2 = (_BN_copy($0,$a)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $retn$0 = 0;
  } else {
   $4 = (_BN_from_montgomery_word($ret,$0,$mont)|0);
   $retn$0 = $4;
  }
 }
 _BN_CTX_end($ctx);
 return ($retn$0|0);
}
function _BN_MONT_CTX_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(76,89720,341)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 _BN_init($2);
 $3 = ((($0)) + 24|0);
 _BN_init($3);
 $4 = ((($0)) + 44|0);
 _BN_init($4);
 $5 = ((($0)) + 68|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 64|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 72|0);
 HEAP32[$7>>2] = 1;
 $$0 = $0;
 return ($$0|0);
}
function _BN_MONT_CTX_free($mont) {
 $mont = $mont|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mont|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mont)) + 4|0);
 _BN_clear_free($1);
 $2 = ((($mont)) + 24|0);
 _BN_clear_free($2);
 $3 = ((($mont)) + 44|0);
 _BN_clear_free($3);
 $4 = ((($mont)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 }
 _CRYPTO_free($mont);
 return;
}
function _BN_MONT_CTX_set($mont,$mod,$ctx) {
 $mont = $mont|0;
 $mod = $mod|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $not$ = 0, $ret$0 = 0, $tmod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tmod = sp + 8|0;
 $buf = sp;
 $0 = ((($mod)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _BN_CTX_start($ctx);
 $3 = (_BN_CTX_get($ctx)|0);
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $ret$0 = 0;
  } else {
   $5 = ((($mont)) + 4|0);
   $6 = ((($mont)) + 24|0);
   $7 = (_BN_copy($6,$mod)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $ret$0 = 0;
   } else {
    $9 = ((($mont)) + 36|0);
    HEAP32[$9>>2] = 0;
    _BN_init($tmod);
    HEAP32[$tmod>>2] = $buf;
    $10 = ((($tmod)) + 8|0);
    HEAP32[$10>>2] = 2;
    $11 = ((($tmod)) + 12|0);
    HEAP32[$11>>2] = 0;
    $12 = (_BN_num_bits($mod)|0);
    $13 = (($12) + 31)|0;
    $14 = (($13|0) / 32)&-1;
    $15 = $14 << 5;
    HEAP32[$mont>>2] = $15;
    (_BN_set_word($5,0)|0);
    $16 = (_BN_set_bit($5,32)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $ret$0 = 0;
    } else {
     $18 = HEAP32[$mod>>2]|0;
     $19 = HEAP32[$18>>2]|0;
     HEAP32[$buf>>2] = $19;
     $20 = ((($buf)) + 4|0);
     HEAP32[$20>>2] = 0;
     $21 = ($19|0)!=(0);
     $22 = $21&1;
     $23 = ((($tmod)) + 4|0);
     HEAP32[$23>>2] = $22;
     $24 = (_BN_mod_inverse($3,$5,$tmod,$ctx)|0);
     $25 = ($24|0)==(0|0);
     if ($25) {
      $ret$0 = 0;
     } else {
      $26 = (_BN_lshift($3,$3,32)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       $ret$0 = 0;
      } else {
       $28 = ((($3)) + 4|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29|0)==(0);
       if ($30) {
        $33 = (_BN_set_word($3,-1)|0);
        $34 = ($33|0)==(0);
        if ($34) {
         $ret$0 = 0;
         break;
        }
       } else {
        $31 = (_BN_sub_word($3,1)|0);
        $32 = ($31|0)==(0);
        if ($32) {
         $ret$0 = 0;
         break;
        }
       }
       $35 = (_BN_div($3,0,$3,$tmod,$ctx)|0);
       $36 = ($35|0)==(0);
       if ($36) {
        $ret$0 = 0;
       } else {
        $37 = HEAP32[$28>>2]|0;
        $38 = ($37|0)>(0);
        if ($38) {
         $39 = HEAP32[$3>>2]|0;
         $40 = HEAP32[$39>>2]|0;
         $42 = $40;
        } else {
         $42 = 0;
        }
        $41 = ((($mont)) + 64|0);
        HEAP32[$41>>2] = $42;
        $43 = ((($mont)) + 68|0);
        HEAP32[$43>>2] = 0;
        (_BN_set_word($5,0)|0);
        $44 = HEAP32[$mont>>2]|0;
        $45 = $44 << 1;
        $46 = (_BN_set_bit($5,$45)|0);
        $47 = ($46|0)==(0);
        if ($47) {
         $ret$0 = 0;
        } else {
         $48 = (_BN_div(0,$5,$5,$6,$ctx)|0);
         $not$ = ($48|0)!=(0);
         $$ = $not$&1;
         $ret$0 = $$;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($ctx);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _BN_MONT_CTX_copy($to,$from) {
 $to = $to|0;
 $from = $from|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($to|0)==($from|0);
 if ($0) {
  $$0 = $to;
  return ($$0|0);
 }
 $1 = ((($to)) + 4|0);
 $2 = ((($from)) + 4|0);
 $3 = (_BN_copy($1,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($to)) + 24|0);
 $6 = ((($from)) + 24|0);
 $7 = (_BN_copy($5,$6)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ((($to)) + 44|0);
 $10 = ((($from)) + 44|0);
 $11 = (_BN_copy($9,$10)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = HEAP32[$from>>2]|0;
 HEAP32[$to>>2] = $13;
 $14 = ((($from)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($to)) + 64|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($from)) + 68|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($to)) + 68|0);
 HEAP32[$19>>2] = $18;
 $$0 = $to;
 return ($$0|0);
}
function _BN_MONT_CTX_set_locked($pmont,$lock,$mod,$ctx) {
 $pmont = $pmont|0;
 $lock = $lock|0;
 $mod = $mod|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_lock(5,$lock,89720,527);
 $0 = HEAP32[$pmont>>2]|0;
 _CRYPTO_lock(6,$lock,89720,529);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (_CRYPTO_malloc(76,89720,341)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$2>>2] = 0;
 $4 = ((($2)) + 4|0);
 _BN_init($4);
 $5 = ((($2)) + 24|0);
 _BN_init($5);
 $6 = ((($2)) + 44|0);
 _BN_init($6);
 $7 = ((($2)) + 68|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($2)) + 64|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($2)) + 72|0);
 HEAP32[$9>>2] = 1;
 $10 = (_BN_MONT_CTX_set($2,$mod,$ctx)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  _BN_clear_free($4);
  _BN_clear_free($5);
  _BN_clear_free($6);
  $12 = HEAP32[$9>>2]|0;
  $13 = $12 & 1;
  $14 = ($13|0)==(0);
  if ($14) {
   $$0 = 0;
   return ($$0|0);
  }
  _CRYPTO_free($2);
  $$0 = 0;
  return ($$0|0);
 }
 _CRYPTO_lock(9,$lock,89720,550);
 $15 = HEAP32[$pmont>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$pmont>>2] = $2;
  $ret$0 = $2;
 } else {
  _BN_clear_free($4);
  _BN_clear_free($5);
  _BN_clear_free($6);
  $17 = HEAP32[$9>>2]|0;
  $18 = $17 & 1;
  $19 = ($18|0)==(0);
  if (!($19)) {
   _CRYPTO_free($2);
  }
  $20 = HEAP32[$pmont>>2]|0;
  $ret$0 = $20;
 }
 _CRYPTO_lock(10,$lock,89720,556);
 $$0 = $ret$0;
 return ($$0|0);
}
function _BN_from_montgomery_word($ret,$r,$mont) {
 $ret = $ret|0;
 $r = $r|0;
 $mont = $mont|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $carry$0$lcssa = 0;
 var $carry$025 = 0, $exitcond = 0, $exitcond41 = 0, $ftl$010 = 0, $ftl1$06 = 0, $i$124 = 0, $i$2$lcssa = 0, $i$221 = 0, $i$318 = 0, $rp$026 = 0, $scevgep = 0, $tmp_top$0$lcssa = 0, $tmp_top$011 = 0, $tmp_top2$0$lcssa = 0, $tmp_top2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($mont)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($ret)) + 4|0);
  HEAP32[$3>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 $4 = $1 << 1;
 $5 = ((($r)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)>($6|0);
 if ($7) {
  $8 = (_bn_expand2($r,$4)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $10 = ((($mont)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($r)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 ^ $11;
 HEAP32[$12>>2] = $14;
 $15 = ((($mont)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$r>>2]|0;
 $18 = ((($r)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<($4|0);
 if ($20) {
  $scevgep = (($17) + ($19<<2)|0);
  $21 = $1 << 3;
  $22 = $19 << 2;
  $23 = (($21) - ($22))|0;
  _memset(($scevgep|0),0,($23|0))|0;
 }
 HEAP32[$18>>2] = $4;
 $24 = ((($mont)) + 64|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($1|0)>(0);
 if ($26) {
  $carry$025 = 0;$i$124 = 0;$rp$026 = $17;
  while(1) {
   $27 = HEAP32[$rp$026>>2]|0;
   $28 = Math_imul($27, $25)|0;
   $29 = (_bn_mul_add_words($rp$026,$16,$1,$28)|0);
   $30 = (($29) + ($carry$025))|0;
   $31 = (($rp$026) + ($1<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + ($32))|0;
   $34 = ($30|0)!=(0);
   $35 = $34&1;
   $36 = $35 | $carry$025;
   $37 = ($33>>>0)<=($32>>>0);
   $38 = $37&1;
   $39 = $36 & $38;
   HEAP32[$31>>2] = $33;
   $40 = (($i$124) + 1)|0;
   $41 = ((($rp$026)) + 4|0);
   $exitcond41 = ($40|0)==($1|0);
   if ($exitcond41) {
    $carry$0$lcssa = $39;
    break;
   } else {
    $carry$025 = $39;$i$124 = $40;$rp$026 = $41;
   }
  }
 } else {
  $carry$0$lcssa = 0;
 }
 $42 = ((($ret)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($1|0)>($43|0);
 if ($44) {
  $45 = (_bn_expand2($ret,$1)|0);
  $46 = ($45|0)==(0|0);
  if ($46) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $47 = ((($ret)) + 4|0);
 HEAP32[$47>>2] = $1;
 $48 = HEAP32[$12>>2]|0;
 $49 = ((($ret)) + 12|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAP32[$ret>>2]|0;
 $51 = HEAP32[$r>>2]|0;
 $52 = (($51) + ($1<<2)|0);
 $53 = (_bn_sub_words($50,$52,$16,$1)|0);
 $54 = (($carry$0$lcssa) - ($53))|0;
 $55 = $50;
 $56 = $54 ^ -1;
 $57 = $55 & $56;
 $58 = $52;
 $59 = $58 & $54;
 $60 = $57 | $59;
 $61 = $60;
 $62 = (($1) + -4)|0;
 $63 = ($1|0)>(4);
 if ($63) {
  $i$221 = 0;
  while(1) {
   $67 = (($61) + ($i$221<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $i$221 | 1;
   $70 = (($61) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $i$221 | 2;
   $73 = (($61) + ($72<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum1 = (($i$221) + ($1))|0;
   $75 = (($51) + ($$sum1<<2)|0);
   HEAP32[$75>>2] = 0;
   $76 = $i$221 | 3;
   $77 = (($61) + ($76<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $$sum2 = (($69) + ($1))|0;
   $79 = (($51) + ($$sum2<<2)|0);
   HEAP32[$79>>2] = 0;
   $80 = (($50) + ($i$221<<2)|0);
   HEAP32[$80>>2] = $68;
   $$sum3 = (($72) + ($1))|0;
   $81 = (($51) + ($$sum3<<2)|0);
   HEAP32[$81>>2] = 0;
   $82 = (($50) + ($69<<2)|0);
   HEAP32[$82>>2] = $71;
   $$sum4 = (($76) + ($1))|0;
   $83 = (($51) + ($$sum4<<2)|0);
   HEAP32[$83>>2] = 0;
   $84 = (($50) + ($72<<2)|0);
   HEAP32[$84>>2] = $74;
   $85 = (($50) + ($76<<2)|0);
   HEAP32[$85>>2] = $78;
   $86 = (($i$221) + 4)|0;
   $87 = ($86|0)<($62|0);
   if ($87) {
    $i$221 = $86;
   } else {
    break;
   }
  }
  $64 = (($1) + -1)|0;
  $65 = $64 & -4;
  $i$2$lcssa = $65;
 } else {
  $i$2$lcssa = 0;
 }
 $66 = ($i$2$lcssa|0)<($1|0);
 if ($66) {
  $i$318 = $i$2$lcssa;
  while(1) {
   $88 = (($61) + ($i$318<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($50) + ($i$318<<2)|0);
   HEAP32[$90>>2] = $89;
   $$sum = (($i$318) + ($1))|0;
   $91 = (($51) + ($$sum<<2)|0);
   HEAP32[$91>>2] = 0;
   $92 = (($i$318) + 1)|0;
   $exitcond = ($92|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $i$318 = $92;
   }
  }
 }
 $93 = HEAP32[$18>>2]|0;
 $94 = ($93|0)>(0);
 if ($94) {
  $95 = HEAP32[$r>>2]|0;
  $96 = (($93) + -1)|0;
  $97 = (($95) + ($96<<2)|0);
  $ftl$010 = $97;$tmp_top$011 = $93;
  while(1) {
   $98 = HEAP32[$ftl$010>>2]|0;
   $99 = ($98|0)==(0);
   if (!($99)) {
    $tmp_top$0$lcssa = $tmp_top$011;
    break;
   }
   $100 = ((($ftl$010)) + -4|0);
   $101 = (($tmp_top$011) + -1)|0;
   $102 = ($tmp_top$011|0)>(1);
   if ($102) {
    $ftl$010 = $100;$tmp_top$011 = $101;
   } else {
    $tmp_top$0$lcssa = $101;
    break;
   }
  }
  HEAP32[$18>>2] = $tmp_top$0$lcssa;
 }
 $103 = HEAP32[$47>>2]|0;
 $104 = ($103|0)>(0);
 if (!($104)) {
  $$0 = 1;
  return ($$0|0);
 }
 $105 = HEAP32[$ret>>2]|0;
 $106 = (($103) + -1)|0;
 $107 = (($105) + ($106<<2)|0);
 $ftl1$06 = $107;$tmp_top2$07 = $103;
 while(1) {
  $108 = HEAP32[$ftl1$06>>2]|0;
  $109 = ($108|0)==(0);
  if (!($109)) {
   $tmp_top2$0$lcssa = $tmp_top2$07;
   break;
  }
  $110 = ((($ftl1$06)) + -4|0);
  $111 = (($tmp_top2$07) + -1)|0;
  $112 = ($tmp_top2$07|0)>(1);
  if ($112) {
   $ftl1$06 = $110;$tmp_top2$07 = $111;
  } else {
   $tmp_top2$0$lcssa = $111;
   break;
  }
 }
 HEAP32[$47>>2] = $tmp_top2$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _bn_sub_part_words($r,$a,$b,$cl,$dl) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $cl = $cl|0;
 $dl = $dl|0;
 var $$01 = 0, $$0227 = 0, $$028 = 0, $$03$lcssa$ph$ph = 0, $$0344 = 0, $$0626 = 0, $$145 = 0, $$17$lcssa$ph$ph = 0, $$1743 = 0, $$2$ph$ph = 0, $$2537 = 0, $$3936 = 0, $$738 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0;
 var $c$0$ = 0, $c$0$$ = 0, $c$0$$$ = 0, $c$0$$$$ = 0, $c$0$25 = 0, $c$0$29 = 0, $c$5$ = 0, $c$5$$ = 0, $c$5$$$ = 0, $c$5$$$$ = 0, $c$546 = 0, $sum = 0, $sum59 = 0, $sum60 = 0, $sum61 = 0, $sum62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bn_sub_words($r,$a,$b,$cl)|0);
 $1 = ($dl|0)==(0);
 if ($1) {
  $$01 = $0;
  return ($$01|0);
 }
 $2 = (($r) + ($cl<<2)|0);
 $3 = (($b) + ($cl<<2)|0);
 $4 = ($dl|0)<(0);
 if ($4) {
  $5 = HEAP32[$3>>2]|0;
  $sum = (($5) + ($0))|0;
  $6 = (0 - ($sum))|0;
  HEAP32[$2>>2] = $6;
  $7 = ($5|0)==(0);
  $c$0$25 = $7 ? $0 : 1;
  $8 = ($dl|0)>(-2);
  if ($8) {
   $$01 = $c$0$25;
   return ($$01|0);
  } else {
   $$0227 = $3;$$028 = $dl;$$0626 = $2;$c$0$29 = $c$0$25;
  }
  while(1) {
   $9 = ((($$0227)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $sum59 = (($10) + ($c$0$29))|0;
   $11 = (0 - ($sum59))|0;
   $12 = ((($$0626)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = ($10|0)==(0);
   $c$0$$ = $13 ? $c$0$29 : 1;
   $14 = (($$028) + 2)|0;
   $15 = ($14|0)>(-1);
   if ($15) {
    $$01 = $c$0$$;
    label = 19;
    break;
   }
   $16 = ((($$0227)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $sum60 = (($17) + ($c$0$$))|0;
   $18 = (0 - ($sum60))|0;
   $19 = ((($$0626)) + 8|0);
   HEAP32[$19>>2] = $18;
   $20 = ($17|0)==(0);
   $c$0$$$ = $20 ? $c$0$$ : 1;
   $21 = (($$028) + 3)|0;
   $22 = ($21|0)>(-1);
   if ($22) {
    $$01 = $c$0$$$;
    label = 19;
    break;
   }
   $23 = ((($$0227)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $sum61 = (($24) + ($c$0$$$))|0;
   $25 = (0 - ($sum61))|0;
   $26 = ((($$0626)) + 12|0);
   HEAP32[$26>>2] = $25;
   $27 = ($24|0)==(0);
   $c$0$$$$ = $27 ? $c$0$$$ : 1;
   $28 = (($$028) + 4)|0;
   $29 = ($28|0)>(-1);
   if ($29) {
    $$01 = $c$0$$$$;
    label = 19;
    break;
   }
   $30 = ((($$0227)) + 16|0);
   $31 = ((($$0626)) + 16|0);
   $32 = HEAP32[$30>>2]|0;
   $sum62 = (($32) + ($c$0$$$$))|0;
   $33 = (0 - ($sum62))|0;
   HEAP32[$31>>2] = $33;
   $34 = ($32|0)==(0);
   $c$0$ = $34 ? $c$0$$$$ : 1;
   $35 = ($28|0)>(-2);
   if ($35) {
    $$01 = $c$0$;
    label = 19;
    break;
   } else {
    $$0227 = $30;$$028 = $28;$$0626 = $31;$c$0$29 = $c$0$;
   }
  }
  if ((label|0) == 19) {
   return ($$01|0);
  }
 }
 $36 = (($a) + ($cl<<2)|0);
 $37 = ($0|0)==(0);
 L19: do {
  if ($37) {
   $$03$lcssa$ph$ph = $36;$$17$lcssa$ph$ph = $2;$$2$ph$ph = $dl;
  } else {
   $$0344 = $36;$$145 = $dl;$$1743 = $2;$c$546 = $0;
   while(1) {
    $38 = HEAP32[$$0344>>2]|0;
    $39 = (($38) - ($c$546))|0;
    HEAP32[$$1743>>2] = $39;
    $40 = ($38|0)==(0);
    $c$5$ = $40 ? $c$546 : 0;
    $41 = ($$145|0)<(2);
    if ($41) {
     $$01 = $c$5$;
     label = 19;
     break;
    }
    $42 = ((($$0344)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) - ($c$5$))|0;
    $45 = ((($$1743)) + 4|0);
    HEAP32[$45>>2] = $44;
    $46 = ($43|0)==(0);
    $c$5$$ = $46 ? $c$5$ : 0;
    $47 = (($$145) + -2)|0;
    $48 = ($47|0)<(1);
    if ($48) {
     $$01 = $c$5$$;
     label = 19;
     break;
    }
    $49 = ((($$0344)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) - ($c$5$$))|0;
    $52 = ((($$1743)) + 8|0);
    HEAP32[$52>>2] = $51;
    $53 = ($50|0)==(0);
    $c$5$$$ = $53 ? $c$5$$ : 0;
    $54 = (($$145) + -3)|0;
    $55 = ($54|0)<(1);
    if ($55) {
     $$01 = $c$5$$$;
     label = 19;
     break;
    }
    $56 = ((($$0344)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) - ($c$5$$$))|0;
    $59 = ((($$1743)) + 12|0);
    HEAP32[$59>>2] = $58;
    $60 = ($57|0)==(0);
    $c$5$$$$ = $60 ? $c$5$$$ : 0;
    $61 = (($$145) + -4)|0;
    $62 = ($61|0)<(1);
    if ($62) {
     $$01 = $c$5$$$$;
     label = 19;
     break;
    }
    $63 = ((($$0344)) + 16|0);
    $64 = ((($$1743)) + 16|0);
    $65 = ($c$5$$$$|0)==(0);
    if ($65) {
     $$03$lcssa$ph$ph = $63;$$17$lcssa$ph$ph = $64;$$2$ph$ph = $61;
     break L19;
    } else {
     $$0344 = $63;$$145 = $61;$$1743 = $64;$c$546 = $c$5$$$;
    }
   }
   if ((label|0) == 19) {
    return ($$01|0);
   }
  }
 } while(0);
 $66 = HEAP32[$$03$lcssa$ph$ph>>2]|0;
 HEAP32[$$17$lcssa$ph$ph>>2] = $66;
 $67 = ($$2$ph$ph|0)<(2);
 if ($67) {
  $$01 = 0;
  return ($$01|0);
 } else {
  $$2537 = $$03$lcssa$ph$ph;$$3936 = $$17$lcssa$ph$ph;$$738 = $$2$ph$ph;
 }
 while(1) {
  $68 = ((($$2537)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($$3936)) + 4|0);
  HEAP32[$70>>2] = $69;
  $71 = (($$738) + -2)|0;
  $72 = ($71|0)<(1);
  if ($72) {
   $$01 = 0;
   label = 19;
   break;
  }
  $73 = ((($$2537)) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($$3936)) + 8|0);
  HEAP32[$75>>2] = $74;
  $76 = (($$738) + -3)|0;
  $77 = ($76|0)<(1);
  if ($77) {
   $$01 = 0;
   label = 19;
   break;
  }
  $78 = ((($$2537)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($$3936)) + 12|0);
  HEAP32[$80>>2] = $79;
  $81 = (($$738) + -4)|0;
  $82 = ($81|0)<(1);
  if ($82) {
   $$01 = 0;
   label = 19;
   break;
  }
  $83 = ((($$2537)) + 16|0);
  $84 = ((($$3936)) + 16|0);
  $85 = HEAP32[$83>>2]|0;
  HEAP32[$84>>2] = $85;
  $86 = ($81|0)<(2);
  if ($86) {
   $$01 = 0;
   label = 19;
   break;
  } else {
   $$2537 = $83;$$3936 = $84;$$738 = $81;
  }
 }
 if ((label|0) == 19) {
  return ($$01|0);
 }
 return (0)|0;
}
function _bn_mul_recursive($r,$a,$b,$n2,$dna,$dnb,$t) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $n2 = $n2|0;
 $dna = $dna|0;
 $dnb = $dnb|0;
 $t = $t|0;
 var $$pre$phi12Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $c1$0 = 0, $neg$0 = 0, $p$0 = 0, $zero$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($n2|0) / 2)&-1;
 $1 = (($0) + ($dna))|0;
 $2 = (($0) + ($dnb))|0;
 $3 = ($n2|0)==(8);
 $4 = $dnb | $dna;
 $5 = ($4|0)==(0);
 $6 = $3 & $5;
 if ($6) {
  _bn_mul_comba8($r,$a,$b);
  return;
 }
 $7 = ($n2|0)<(16);
 if ($7) {
  $8 = (($dna) + ($n2))|0;
  $9 = (($dnb) + ($n2))|0;
  _bn_mul_normal($r,$a,$8,$b,$9);
  $10 = (($dnb) + ($dna))|0;
  $11 = ($10|0)<(0);
  if (!($11)) {
   return;
  }
  $12 = $n2 << 1;
  $13 = (($12) + ($dna))|0;
  $14 = (($13) + ($dnb))|0;
  $15 = (($r) + ($14<<2)|0);
  $16 = (0 - ($10))|0;
  $17 = $16 << 2;
  _memset(($15|0),0,($17|0))|0;
  return;
 }
 $18 = (($a) + ($0<<2)|0);
 $19 = (0 - ($dna))|0;
 $20 = (_bn_cmp_part_words($a,$18,$1,$19)|0);
 $21 = (($b) + ($0<<2)|0);
 $22 = (_bn_cmp_part_words($21,$b,$2,$dnb)|0);
 $23 = ($20*3)|0;
 $24 = (($23) + ($22))|0;
 switch ($24|0) {
 case -4:  {
  (_bn_sub_part_words($t,$18,$a,$1,$dna)|0);
  $25 = (($t) + ($0<<2)|0);
  $26 = (0 - ($dnb))|0;
  (_bn_sub_part_words($25,$b,$21,$2,$26)|0);
  $neg$0 = 0;$zero$0 = 0;
  break;
 }
 case -3:  {
  $neg$0 = 0;$zero$0 = 1;
  break;
 }
 case -2:  {
  (_bn_sub_part_words($t,$18,$a,$1,$dna)|0);
  $27 = (($t) + ($0<<2)|0);
  (_bn_sub_part_words($27,$21,$b,$2,$dnb)|0);
  $neg$0 = 1;$zero$0 = 0;
  break;
 }
 case 1: case 0: case -1:  {
  $neg$0 = 0;$zero$0 = 1;
  break;
 }
 case 2:  {
  (_bn_sub_part_words($t,$a,$18,$1,$19)|0);
  $28 = (($t) + ($0<<2)|0);
  $29 = (0 - ($dnb))|0;
  (_bn_sub_part_words($28,$b,$21,$2,$29)|0);
  $neg$0 = 1;$zero$0 = 0;
  break;
 }
 case 3:  {
  $neg$0 = 0;$zero$0 = 1;
  break;
 }
 case 4:  {
  (_bn_sub_part_words($t,$a,$18,$1,$19)|0);
  $30 = (($t) + ($0<<2)|0);
  (_bn_sub_part_words($30,$21,$b,$2,$dnb)|0);
  $neg$0 = 0;$zero$0 = 0;
  break;
 }
 default: {
  $neg$0 = 0;$zero$0 = 0;
 }
 }
 $31 = $n2 & -2;
 $32 = ($31|0)==(8);
 $33 = $32 & $5;
 do {
  if ($33) {
   $34 = ($zero$0|0)==(0);
   $35 = (($t) + ($n2<<2)|0);
   if ($34) {
    $36 = (($t) + ($0<<2)|0);
    _bn_mul_comba4($35,$t,$36);
   } else {
    ;HEAP32[$35>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;HEAP32[$35+12>>2]=0|0;HEAP32[$35+16>>2]=0|0;HEAP32[$35+20>>2]=0|0;HEAP32[$35+24>>2]=0|0;HEAP32[$35+28>>2]=0|0;
   }
   _bn_mul_comba4($r,$a,$b);
   $37 = (($r) + ($n2<<2)|0);
   _bn_mul_comba4($37,$18,$21);
   $$pre$phi12Z2D = $35;$$pre$phiZ2D = $37;
  } else {
   $38 = ($31|0)==(16);
   $39 = $38 & $5;
   if ($39) {
    $40 = ($zero$0|0)==(0);
    $41 = (($t) + ($n2<<2)|0);
    if ($40) {
     $42 = (($t) + ($0<<2)|0);
     _bn_mul_comba8($41,$t,$42);
    } else {
     dest=$41; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    }
    _bn_mul_comba8($r,$a,$b);
    $43 = (($r) + ($n2<<2)|0);
    _bn_mul_comba8($43,$18,$21);
    $$pre$phi12Z2D = $41;$$pre$phiZ2D = $43;
    break;
   } else {
    $44 = $n2 << 1;
    $45 = (($t) + ($44<<2)|0);
    $46 = ($zero$0|0)==(0);
    $47 = (($t) + ($n2<<2)|0);
    if ($46) {
     $48 = (($t) + ($0<<2)|0);
     _bn_mul_recursive($47,$t,$48,$0,0,0,$45);
    } else {
     $49 = $n2 << 2;
     _memset(($47|0),0,($49|0))|0;
    }
    _bn_mul_recursive($r,$a,$b,$0,0,0,$45);
    $50 = (($r) + ($n2<<2)|0);
    _bn_mul_recursive($50,$18,$21,$0,$dna,$dnb,$45);
    $$pre$phi12Z2D = $47;$$pre$phiZ2D = $50;
    break;
   }
  }
 } while(0);
 $51 = (_bn_add_words($t,$r,$$pre$phiZ2D,$n2)|0);
 $52 = ($neg$0|0)==(0);
 if ($52) {
  $55 = (_bn_add_words($$pre$phi12Z2D,$$pre$phi12Z2D,$t,$n2)|0);
  $56 = (($55) + ($51))|0;
  $c1$0 = $56;
 } else {
  $53 = (_bn_sub_words($$pre$phi12Z2D,$t,$$pre$phi12Z2D,$n2)|0);
  $54 = (($51) - ($53))|0;
  $c1$0 = $54;
 }
 $57 = (($r) + ($0<<2)|0);
 $58 = (_bn_add_words($57,$57,$$pre$phi12Z2D,$n2)|0);
 $59 = (($58) + ($c1$0))|0;
 $60 = ($59|0)==(0);
 if ($60) {
  return;
 }
 $61 = (($0) + ($n2))|0;
 $62 = (($r) + ($61<<2)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($59))|0;
 HEAP32[$62>>2] = $64;
 $65 = ($64>>>0)<($59>>>0);
 if ($65) {
  $p$0 = $62;
 } else {
  return;
 }
 while(1) {
  $66 = ((($p$0)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 1)|0;
  HEAP32[$66>>2] = $68;
  $69 = ($68|0)==(0);
  if ($69) {
   $p$0 = $66;
  } else {
   break;
  }
 }
 return;
}
function _bn_mul_normal($r,$a,$na,$b,$nb) {
 $r = $r|0;
 $a = $a|0;
 $na = $na|0;
 $b = $b|0;
 $nb = $nb|0;
 var $$09 = 0, $$146 = 0, $$17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$b = 0, $b$a = 0, $na$nb = 0, $nb$na = 0;
 var $rr$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($na|0)<($nb|0);
 $nb$na = $0 ? $nb : $na;
 $a$b = $0 ? $a : $b;
 $na$nb = $0 ? $na : $nb;
 $b$a = $0 ? $b : $a;
 $1 = (($r) + ($nb$na<<2)|0);
 $2 = ($na$nb|0)<(1);
 if ($2) {
  (_bn_mul_words($r,$b$a,$nb$na,0)|0);
  return;
 }
 $3 = HEAP32[$a$b>>2]|0;
 $4 = (_bn_mul_words($r,$b$a,$nb$na,$3)|0);
 HEAP32[$1>>2] = $4;
 $5 = ($na$nb|0)<(2);
 if ($5) {
  return;
 } else {
  $$09 = $r;$$146 = $a$b;$$17 = $na$nb;$rr$08 = $1;
 }
 while(1) {
  $6 = ((($$09)) + 4|0);
  $7 = ((($$146)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_bn_mul_add_words($6,$b$a,$nb$na,$8)|0);
  $10 = ((($rr$08)) + 4|0);
  HEAP32[$10>>2] = $9;
  $11 = (($$17) + -2)|0;
  $12 = ($11|0)<(1);
  if ($12) {
   label = 8;
   break;
  }
  $13 = ((($$09)) + 8|0);
  $14 = ((($$146)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_bn_mul_add_words($13,$b$a,$nb$na,$15)|0);
  $17 = ((($rr$08)) + 8|0);
  HEAP32[$17>>2] = $16;
  $18 = (($$17) + -3)|0;
  $19 = ($18|0)<(1);
  if ($19) {
   label = 8;
   break;
  }
  $20 = ((($$09)) + 12|0);
  $21 = ((($$146)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_bn_mul_add_words($20,$b$a,$nb$na,$22)|0);
  $24 = ((($rr$08)) + 12|0);
  HEAP32[$24>>2] = $23;
  $25 = (($$17) + -4)|0;
  $26 = ($25|0)<(1);
  if ($26) {
   label = 8;
   break;
  }
  $27 = ((($$09)) + 16|0);
  $28 = ((($$146)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_bn_mul_add_words($27,$b$a,$nb$na,$29)|0);
  $31 = ((($rr$08)) + 16|0);
  HEAP32[$31>>2] = $30;
  $32 = ($25|0)<(2);
  if ($32) {
   label = 8;
   break;
  } else {
   $$09 = $27;$$146 = $28;$$17 = $25;$rr$08 = $31;
  }
 }
 if ((label|0) == 8) {
  return;
 }
}
function _bn_mul_part_recursive($r,$a,$b,$n,$tna,$tnb,$t) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 $tna = $tna|0;
 $tnb = $tnb|0;
 $t = $t|0;
 var $$lcssa = 0, $$lcssa11 = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $c1$0 = 0, $i$0 = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $p$0 = 0, $tna$tnb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 1;
 $1 = ($n|0)<(8);
 if ($1) {
  $2 = (($tna) + ($n))|0;
  $3 = (($tnb) + ($n))|0;
  _bn_mul_normal($r,$a,$2,$b,$3);
  return;
 }
 $4 = (($a) + ($n<<2)|0);
 $5 = (($n) - ($tna))|0;
 $6 = (_bn_cmp_part_words($a,$4,$tna,$5)|0);
 $7 = (($b) + ($n<<2)|0);
 $8 = (($tnb) - ($n))|0;
 $9 = (_bn_cmp_part_words($7,$b,$tnb,$8)|0);
 $10 = ($6*3)|0;
 $11 = (($10) + ($9))|0;
 switch ($11|0) {
 case -4:  {
  $12 = (($tna) - ($n))|0;
  (_bn_sub_part_words($t,$4,$a,$tna,$12)|0);
  $13 = (($t) + ($n<<2)|0);
  $14 = (($n) - ($tnb))|0;
  (_bn_sub_part_words($13,$b,$7,$tnb,$14)|0);
  $neg$0 = 0;
  break;
 }
 case -2: case -3:  {
  $15 = (($tna) - ($n))|0;
  (_bn_sub_part_words($t,$4,$a,$tna,$15)|0);
  $16 = (($t) + ($n<<2)|0);
  (_bn_sub_part_words($16,$7,$b,$tnb,$8)|0);
  $neg$0 = 1;
  break;
 }
 case 2: case 1: case 0: case -1:  {
  (_bn_sub_part_words($t,$a,$4,$tna,$5)|0);
  $17 = (($t) + ($n<<2)|0);
  $18 = (($n) - ($tnb))|0;
  (_bn_sub_part_words($17,$b,$7,$tnb,$18)|0);
  $neg$0 = 1;
  break;
 }
 case 4: case 3:  {
  (_bn_sub_part_words($t,$a,$4,$tna,$5)|0);
  $19 = (($t) + ($n<<2)|0);
  (_bn_sub_part_words($19,$7,$b,$tnb,$8)|0);
  $neg$0 = 0;
  break;
 }
 default: {
  $neg$0 = 0;
 }
 }
 $20 = ($n|0)==(8);
 do {
  if ($20) {
   $21 = (($t) + ($0<<2)|0);
   $22 = ((($t)) + 32|0);
   _bn_mul_comba8($21,$t,$22);
   _bn_mul_comba8($r,$a,$b);
   $23 = (($r) + ($0<<2)|0);
   _bn_mul_normal($23,$4,$tna,$7,$tnb);
   $24 = (($0) + ($tna))|0;
   $25 = (($24) + ($tnb))|0;
   $26 = (($r) + ($25<<2)|0);
   $27 = (($0) - ($tna))|0;
   $28 = (($27) - ($tnb))|0;
   $29 = $28 << 2;
   _memset(($26|0),0,($29|0))|0;
   $$pre$phi7Z2D = $21;$$pre$phiZ2D = $23;
  } else {
   $30 = $n << 2;
   $31 = (($t) + ($30<<2)|0);
   $32 = (($t) + ($0<<2)|0);
   $33 = (($t) + ($n<<2)|0);
   _bn_mul_recursive($32,$t,$33,$n,0,0,$31);
   _bn_mul_recursive($r,$a,$b,$n,0,0,$31);
   $34 = (($n|0) / 2)&-1;
   $35 = ($tna|0)>($tnb|0);
   $tna$tnb = $35 ? $tna : $tnb;
   $36 = ($tna$tnb|0)==($34|0);
   if ($36) {
    $37 = (($r) + ($0<<2)|0);
    $38 = (($tna) - ($34))|0;
    $39 = (($tnb) - ($34))|0;
    _bn_mul_recursive($37,$4,$7,$34,$38,$39,$31);
    $40 = $34 << 1;
    $41 = (($40) + ($0))|0;
    $42 = (($r) + ($41<<2)|0);
    $43 = (($0) - ($40))|0;
    $44 = $43 << 2;
    _memset(($42|0),0,($44|0))|0;
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $37;
    break;
   }
   $45 = ($tna$tnb|0)>($34|0);
   $46 = (($r) + ($0<<2)|0);
   if ($45) {
    $47 = (($tna) - ($34))|0;
    $48 = (($tnb) - ($34))|0;
    _bn_mul_part_recursive($46,$4,$7,$34,$47,$48,$31);
    $49 = (($0) + ($tna))|0;
    $50 = (($49) + ($tnb))|0;
    $51 = (($r) + ($50<<2)|0);
    $52 = (($0) - ($tna))|0;
    $53 = (($52) - ($tnb))|0;
    $54 = $53 << 2;
    _memset(($51|0),0,($54|0))|0;
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $46;
    break;
   }
   $55 = $n << 3;
   _memset(($46|0),0,($55|0))|0;
   $56 = ($tna|0)<(16);
   $57 = ($tnb|0)<(16);
   $or$cond = $56 & $57;
   if ($or$cond) {
    _bn_mul_normal($46,$4,$tna,$7,$tnb);
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $46;
    break;
   } else {
    $i$0 = $34;
   }
   while(1) {
    $58 = (($i$0|0) / 2)&-1;
    $59 = ($58|0)<($tna|0);
    $60 = ($58|0)<($tnb|0);
    $or$cond2 = $59 | $60;
    if ($or$cond2) {
     $$lcssa = $58;
     label = 17;
     break;
    }
    $63 = ($58|0)==($tna|0);
    $64 = ($58|0)==($tnb|0);
    $or$cond3 = $63 | $64;
    if ($or$cond3) {
     $$lcssa11 = $58;
     label = 19;
     break;
    } else {
     $i$0 = $58;
    }
   }
   if ((label|0) == 17) {
    $61 = (($tna) - ($$lcssa))|0;
    $62 = (($tnb) - ($$lcssa))|0;
    _bn_mul_part_recursive($46,$4,$7,$$lcssa,$61,$62,$31);
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $46;
    break;
   }
   else if ((label|0) == 19) {
    $65 = (($tna) - ($$lcssa11))|0;
    $66 = (($tnb) - ($$lcssa11))|0;
    _bn_mul_recursive($46,$4,$7,$$lcssa11,$65,$66,$31);
    $$pre$phi7Z2D = $32;$$pre$phiZ2D = $46;
    break;
   }
  }
 } while(0);
 $67 = (_bn_add_words($t,$r,$$pre$phiZ2D,$0)|0);
 $68 = ($neg$0|0)==(0);
 if ($68) {
  $71 = (_bn_add_words($$pre$phi7Z2D,$$pre$phi7Z2D,$t,$0)|0);
  $72 = (($71) + ($67))|0;
  $c1$0 = $72;
 } else {
  $69 = (_bn_sub_words($$pre$phi7Z2D,$t,$$pre$phi7Z2D,$0)|0);
  $70 = (($67) - ($69))|0;
  $c1$0 = $70;
 }
 $73 = (($r) + ($n<<2)|0);
 $74 = (_bn_add_words($73,$73,$$pre$phi7Z2D,$0)|0);
 $75 = (($74) + ($c1$0))|0;
 $76 = ($75|0)==(0);
 if ($76) {
  return;
 }
 $77 = ($n*3)|0;
 $78 = (($r) + ($77<<2)|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + ($75))|0;
 HEAP32[$78>>2] = $80;
 $81 = ($80>>>0)<($75>>>0);
 if ($81) {
  $p$0 = $78;
 } else {
  return;
 }
 while(1) {
  $82 = ((($p$0)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[$82>>2] = $84;
  $85 = ($84|0)==(0);
  if ($85) {
   $p$0 = $82;
  } else {
   break;
  }
 }
 return;
}
function _BN_mul($r,$a,$b,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$off = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $ftl$018 = 0, $j$1 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond7 = 0, $or$cond8 = 0, $ret$0 = 0, $rr$0 = 0, $tmp_top$0$lcssa = 0, $tmp_top$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(0);
 $5 = ($3|0)==(0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  (_BN_set_word($r,0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $6 = (($3) + ($1))|0;
 _BN_CTX_start($ctx);
 $7 = ($r|0)==($a|0);
 $8 = ($r|0)==($b|0);
 $or$cond8 = $7 | $8;
 if ($or$cond8) {
  $9 = (_BN_CTX_get($ctx)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $ret$0 = 0;
  } else {
   $rr$0 = $9;
   label = 5;
  }
 } else {
  $rr$0 = $r;
  label = 5;
 }
 L7: do {
  if ((label|0) == 5) {
   $11 = ((($a)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($b)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 ^ $12;
   $16 = ((($rr$0)) + 12|0);
   HEAP32[$16>>2] = $15;
   $17 = (($1) - ($3))|0;
   $18 = ($1|0)==($3|0);
   $19 = ($1|0)==(8);
   $or$cond7 = $19 & $18;
   do {
    if ($or$cond7) {
     $20 = ((($rr$0)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)>(15);
     if (!($22)) {
      $23 = (_bn_expand2($rr$0,16)|0);
      $24 = ($23|0)==(0|0);
      if ($24) {
       $ret$0 = 0;
       break L7;
      }
     }
     $25 = ((($rr$0)) + 4|0);
     HEAP32[$25>>2] = 16;
     $26 = HEAP32[$rr$0>>2]|0;
     $27 = HEAP32[$a>>2]|0;
     $28 = HEAP32[$b>>2]|0;
     _bn_mul_comba8($26,$27,$28);
     $$pre$phiZ2D = $25;
    } else {
     $29 = ($1|0)>(15);
     $30 = ($3|0)>(15);
     $or$cond3 = $29 & $30;
     $$off = (($17) + 1)|0;
     $31 = ($$off>>>0)<(3);
     $or$cond10 = $or$cond3 & $31;
     if (!($or$cond10)) {
      $77 = ((($rr$0)) + 8|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($6|0)>($78|0);
      if ($79) {
       $80 = (_bn_expand2($rr$0,$6)|0);
       $81 = ($80|0)==(0|0);
       if ($81) {
        $ret$0 = 0;
        break L7;
       }
      }
      $82 = ((($rr$0)) + 4|0);
      HEAP32[$82>>2] = $6;
      $83 = HEAP32[$rr$0>>2]|0;
      $84 = HEAP32[$a>>2]|0;
      $85 = HEAP32[$b>>2]|0;
      _bn_mul_normal($83,$84,$1,$85,$3);
      $$pre$phiZ2D = $82;
      break;
     }
     $32 = ($17|0)>(-1);
     if ($32) {
      $33 = (_BN_num_bits_word($1)|0);
      $j$1 = $33;
     } else {
      $34 = ($17|0)==(-1);
      if ($34) {
       $35 = (_BN_num_bits_word($3)|0);
       $j$1 = $35;
      } else {
       $j$1 = 0;
      }
     }
     $36 = (($j$1) + -1)|0;
     $37 = 1 << $36;
     $38 = (_BN_CTX_get($ctx)|0);
     $39 = ($38|0)==(0|0);
     if ($39) {
      $ret$0 = 0;
      break L7;
     }
     $40 = ($1|0)>($37|0);
     $41 = ($3|0)>($37|0);
     $or$cond11 = $40 | $41;
     if ($or$cond11) {
      $42 = $37 << 3;
      $43 = ((($38)) + 8|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($42|0)>($44|0);
      if ($45) {
       $46 = (_bn_expand2($38,$42)|0);
       $47 = ($46|0)==(0|0);
       if ($47) {
        $ret$0 = 0;
        break L7;
       }
      }
      $48 = ((($rr$0)) + 8|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($42|0)>($49|0);
      if ($50) {
       $51 = (_bn_expand2($rr$0,$42)|0);
       $52 = ($51|0)==(0|0);
       if ($52) {
        $ret$0 = 0;
        break L7;
       }
      }
      $53 = HEAP32[$rr$0>>2]|0;
      $54 = HEAP32[$a>>2]|0;
      $55 = HEAP32[$b>>2]|0;
      $56 = (($1) - ($37))|0;
      $57 = (($3) - ($37))|0;
      $58 = HEAP32[$38>>2]|0;
      _bn_mul_part_recursive($53,$54,$55,$37,$56,$57,$58);
     } else {
      $59 = $37 << 2;
      $60 = ((($38)) + 8|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($59|0)>($61|0);
      if ($62) {
       $63 = (_bn_expand2($38,$59)|0);
       $64 = ($63|0)==(0|0);
       if ($64) {
        $ret$0 = 0;
        break L7;
       }
      }
      $65 = ((($rr$0)) + 8|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($59|0)>($66|0);
      if ($67) {
       $68 = (_bn_expand2($rr$0,$59)|0);
       $69 = ($68|0)==(0|0);
       if ($69) {
        $ret$0 = 0;
        break L7;
       }
      }
      $70 = HEAP32[$rr$0>>2]|0;
      $71 = HEAP32[$a>>2]|0;
      $72 = HEAP32[$b>>2]|0;
      $73 = (($1) - ($37))|0;
      $74 = (($3) - ($37))|0;
      $75 = HEAP32[$38>>2]|0;
      _bn_mul_recursive($70,$71,$72,$37,$73,$74,$75);
     }
     $76 = ((($rr$0)) + 4|0);
     HEAP32[$76>>2] = $6;
     $$pre$phiZ2D = $76;
    }
   } while(0);
   $86 = HEAP32[$$pre$phiZ2D>>2]|0;
   $87 = ($86|0)>(0);
   if ($87) {
    $88 = HEAP32[$rr$0>>2]|0;
    $89 = (($86) + -1)|0;
    $90 = (($88) + ($89<<2)|0);
    $ftl$018 = $90;$tmp_top$019 = $86;
    while(1) {
     $91 = HEAP32[$ftl$018>>2]|0;
     $92 = ($91|0)==(0);
     if (!($92)) {
      $tmp_top$0$lcssa = $tmp_top$019;
      break;
     }
     $93 = ((($ftl$018)) + -4|0);
     $94 = (($tmp_top$019) + -1)|0;
     $95 = ($tmp_top$019|0)>(1);
     if ($95) {
      $ftl$018 = $93;$tmp_top$019 = $94;
     } else {
      $tmp_top$0$lcssa = $94;
      break;
     }
    }
    HEAP32[$$pre$phiZ2D>>2] = $tmp_top$0$lcssa;
   }
   $96 = ($rr$0|0)==($r|0);
   if ($96) {
    $ret$0 = 1;
   } else {
    (_BN_copy($r,$rr$0)|0);
    $ret$0 = 1;
   }
  }
 } while(0);
 _BN_CTX_end($ctx);
 $$0 = $ret$0;
 return ($$0|0);
}
function _BN_get0_nist_prime_192() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50060|0);
}
function _BN_get0_nist_prime_224() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50080|0);
}
function _BN_get0_nist_prime_256() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50100|0);
}
function _BN_get0_nist_prime_384() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50120|0);
}
function _BN_get0_nist_prime_521() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50140|0);
}
function _BN_nist_mod_192($r,$a,$field,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $field = $field|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$demorgan = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c_d = 0, $carry$0 = 0, $i$0$lcssa$i7 = 0, $not$ = 0, $r_d$0 = 0, $scevgep = 0, $scevgep$i = 0;
 var $tmp_top$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $buf = sp + 24|0;
 $c_d = sp;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$a>>2]|0;
 $3 = ((($a)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_BN_ucmp($a,50160)|0);
  $7 = ($6|0)>(-1);
  if (!($7)) {
   $9 = (_BN_ucmp(50060,$a)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    (_BN_set_word($r,0)|0);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = ($9|0)>(0);
   $12 = ($r|0)==($a|0);
   if ($11) {
    if ($12) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $13 = (_BN_copy($r,$a)|0);
    $14 = ($13|0)!=(0|0);
    $15 = $14&1;
    $$0 = $15;
    STACKTOP = sp;return ($$0|0);
   }
   if ($12) {
    $r_d$0 = $2;
   } else {
    $16 = ((($r)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)>(5);
    if (!($18)) {
     $19 = (_bn_expand2($r,6)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $21 = HEAP32[$r>>2]|0;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$21>>2] = $22;
    $23 = ((($2)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($21)) + 4|0);
    HEAP32[$25>>2] = $24;
    $26 = ((($2)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($21)) + 8|0);
    HEAP32[$28>>2] = $27;
    $29 = ((($2)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($21)) + 12|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($2)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($21)) + 16|0);
    HEAP32[$34>>2] = $33;
    $35 = ((($2)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($21)) + 20|0);
    HEAP32[$37>>2] = $36;
    $r_d$0 = $21;
   }
   $38 = (($1) + -6)|0;
   $39 = ($1|0)>(6);
   if ($39) {
    $scevgep = ((($2)) + 24|0);
    $40 = $1 << 2;
    $41 = (($40) + -24)|0;
    _memcpy(($buf|0),($scevgep|0),($41|0))|0;
    $42 = ($38|0)<(6);
    if ($42) {
     $i$0$lcssa$i7 = $38;
     label = 15;
    }
   } else {
    $i$0$lcssa$i7 = 0;
    label = 15;
   }
   if ((label|0) == 15) {
    $scevgep$i = (($buf) + ($i$0$lcssa$i7<<2)|0);
    $43 = (6 - ($i$0$lcssa$i7))|0;
    $44 = $43 << 2;
    _memset(($scevgep$i|0),0,($44|0))|0;
   }
   $45 = HEAP32[$r_d$0>>2]|0;
   $46 = HEAP32[$buf>>2]|0;
   $47 = (_i64Add(($46|0),0,($45|0),0)|0);
   $48 = tempRet0;
   $49 = ((($buf)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (_i64Add(($47|0),($48|0),($50|0),0)|0);
   $52 = tempRet0;
   HEAP32[$r_d$0>>2] = $51;
   $53 = ((($r_d$0)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (_i64Add(($52|0),0,($54|0),0)|0);
   $56 = tempRet0;
   $57 = ((($buf)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (_i64Add(($55|0),($56|0),($58|0),0)|0);
   $60 = tempRet0;
   $61 = ((($buf)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_i64Add(($59|0),($60|0),($62|0),0)|0);
   $64 = tempRet0;
   HEAP32[$53>>2] = $63;
   $65 = ((($r_d$0)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($buf)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (_i64Add(($46|0),0,($66|0),0)|0);
   $70 = tempRet0;
   $71 = (_i64Add(($69|0),($70|0),($64|0),0)|0);
   $72 = tempRet0;
   $73 = (_i64Add(($71|0),($72|0),($68|0),0)|0);
   $74 = tempRet0;
   $75 = (_i64Add(($73|0),($74|0),($50|0),0)|0);
   $76 = tempRet0;
   HEAP32[$65>>2] = $75;
   $77 = ((($r_d$0)) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($buf)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (_i64Add(($58|0),0,($78|0),0)|0);
   $82 = tempRet0;
   $83 = (_i64Add(($81|0),($82|0),($80|0),0)|0);
   $84 = tempRet0;
   $85 = (_i64Add(($83|0),($84|0),($76|0),0)|0);
   $86 = tempRet0;
   $87 = (_i64Add(($85|0),($86|0),($62|0),0)|0);
   $88 = tempRet0;
   HEAP32[$77>>2] = $87;
   $89 = ((($r_d$0)) + 16|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (_i64Add(($68|0),0,($90|0),0)|0);
   $92 = tempRet0;
   $93 = (_i64Add(($91|0),($92|0),($50|0),0)|0);
   $94 = tempRet0;
   $95 = (_i64Add(($93|0),($94|0),($88|0),0)|0);
   $96 = tempRet0;
   HEAP32[$89>>2] = $95;
   $97 = ((($r_d$0)) + 20|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (_i64Add(($80|0),0,($98|0),0)|0);
   $100 = tempRet0;
   $101 = (_i64Add(($99|0),($100|0),($62|0),0)|0);
   $102 = tempRet0;
   $103 = (_i64Add(($101|0),($102|0),($96|0),0)|0);
   $104 = tempRet0;
   HEAP32[$97>>2] = $103;
   $105 = ($104|0)==(0);
   if ($105) {
    $carry$0 = 1;
   } else {
    $106 = (($104) + -1)|0;
    $107 = (50180 + (($106*24)|0)|0);
    $108 = (_bn_sub_words($r_d$0,$r_d$0,$107,6)|0);
    $carry$0 = $108;
   }
   $109 = (_bn_sub_words($c_d,$r_d$0,50180,6)|0);
   $110 = (0 - ($109))|0;
   $111 = (0 - ($carry$0))|0;
   $112 = $c_d;
   $$demorgan = $110 & $111;
   $113 = $$demorgan ^ -1;
   $114 = $112 & $113;
   $115 = $r_d$0;
   $116 = $115 & $111;
   $117 = $116 & $110;
   $118 = $114 | $117;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   HEAP32[$r_d$0>>2] = $120;
   $121 = ((($119)) + 4|0);
   $122 = HEAP32[$121>>2]|0;
   HEAP32[$53>>2] = $122;
   $123 = ((($119)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   HEAP32[$65>>2] = $124;
   $125 = ((($119)) + 12|0);
   $126 = HEAP32[$125>>2]|0;
   HEAP32[$77>>2] = $126;
   $127 = ((($119)) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   HEAP32[$89>>2] = $128;
   $129 = ((($119)) + 20|0);
   $130 = HEAP32[$129>>2]|0;
   HEAP32[$97>>2] = $130;
   $131 = ((($r)) + 4|0);
   HEAP32[$131>>2] = 6;
   $132 = HEAP32[$r>>2]|0;
   $133 = ((($132)) + 20|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($134|0)==(0);
   if ($135) {
    $136 = ((($132)) + 16|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($137|0)==(0);
    if ($138) {
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==(0);
     if ($141) {
      $142 = ((($132)) + 8|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ($143|0)==(0);
      if ($144) {
       $145 = ((($132)) + 4|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ($146|0)==(0);
       if ($147) {
        $148 = HEAP32[$132>>2]|0;
        $not$ = ($148|0)!=(0);
        $$ = $not$&1;
        $tmp_top$0$lcssa = $$;
       } else {
        $tmp_top$0$lcssa = 2;
       }
      } else {
       $tmp_top$0$lcssa = 3;
      }
     } else {
      $tmp_top$0$lcssa = 4;
     }
    } else {
     $tmp_top$0$lcssa = 5;
    }
   } else {
    $tmp_top$0$lcssa = 6;
   }
   HEAP32[$131>>2] = $tmp_top$0$lcssa;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (_BN_nnmod($r,$a,50060,$ctx)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _BN_nist_mod_224($r,$a,$field,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $field = $field|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$demorgan = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c_d = 0, $carry$0 = 0, $i$0$lcssa$i7 = 0, $not$ = 0, $r_d$0 = 0;
 var $scevgep = 0, $scevgep$i = 0, $tmp_top$0$lcssa = 0, $u$sroa$0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $buf = sp + 28|0;
 $c_d = sp;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$a>>2]|0;
 $3 = ((($a)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_BN_ucmp($a,50252)|0);
  $7 = ($6|0)>(-1);
  if (!($7)) {
   $9 = (_BN_ucmp(50080,$a)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    (_BN_set_word($r,0)|0);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = ($9|0)>(0);
   $12 = ($r|0)==($a|0);
   if ($11) {
    if ($12) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $13 = (_BN_copy($r,$a)|0);
    $14 = ($13|0)!=(0|0);
    $15 = $14&1;
    $$0 = $15;
    STACKTOP = sp;return ($$0|0);
   }
   if ($12) {
    $r_d$0 = $2;
   } else {
    $16 = ((($r)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)>(6);
    if (!($18)) {
     $19 = (_bn_expand2($r,7)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $21 = HEAP32[$r>>2]|0;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$21>>2] = $22;
    $23 = ((($2)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($21)) + 4|0);
    HEAP32[$25>>2] = $24;
    $26 = ((($2)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($21)) + 8|0);
    HEAP32[$28>>2] = $27;
    $29 = ((($2)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($21)) + 12|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($2)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($21)) + 16|0);
    HEAP32[$34>>2] = $33;
    $35 = ((($2)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($21)) + 20|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($2)) + 24|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($21)) + 24|0);
    HEAP32[$40>>2] = $39;
    $r_d$0 = $21;
   }
   $41 = (($1) + -7)|0;
   $42 = ($1|0)>(7);
   if ($42) {
    $scevgep = ((($2)) + 28|0);
    $43 = $1 << 2;
    $44 = (($43) + -28)|0;
    _memcpy(($buf|0),($scevgep|0),($44|0))|0;
    $45 = ($41|0)<(7);
    if ($45) {
     $i$0$lcssa$i7 = $41;
     label = 15;
    }
   } else {
    $i$0$lcssa$i7 = 0;
    label = 15;
   }
   if ((label|0) == 15) {
    $scevgep$i = (($buf) + ($i$0$lcssa$i7<<2)|0);
    $46 = (7 - ($i$0$lcssa$i7))|0;
    $47 = $46 << 2;
    _memset(($scevgep$i|0),0,($47|0))|0;
   }
   $48 = HEAP32[$r_d$0>>2]|0;
   $49 = HEAP32[$buf>>2]|0;
   $50 = (_i64Subtract(($48|0),0,($49|0),0)|0);
   $51 = tempRet0;
   $52 = ((($buf)) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (_i64Subtract(($50|0),($51|0),($53|0),0)|0);
   $55 = tempRet0;
   HEAP32[$r_d$0>>2] = $54;
   $56 = (_bitshift64Ashr(($54|0),($55|0),32)|0);
   $57 = tempRet0;
   $58 = ((($r_d$0)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (_i64Add(($56|0),($57|0),($59|0),0)|0);
   $61 = tempRet0;
   $62 = ((($buf)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (_i64Subtract(($60|0),($61|0),($63|0),0)|0);
   $65 = tempRet0;
   $66 = ((($buf)) + 20|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (_i64Subtract(($64|0),($65|0),($67|0),0)|0);
   $69 = tempRet0;
   HEAP32[$58>>2] = $68;
   $70 = (_bitshift64Ashr(($68|0),($69|0),32)|0);
   $71 = tempRet0;
   $72 = ((($r_d$0)) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($buf)) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ((($buf)) + 24|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_i64Subtract(($73|0),0,($75|0),0)|0);
   $79 = tempRet0;
   $80 = (_i64Add(($78|0),($79|0),($70|0),($71|0))|0);
   $81 = tempRet0;
   $82 = (_i64Subtract(($80|0),($81|0),($77|0),0)|0);
   $83 = tempRet0;
   HEAP32[$72>>2] = $82;
   $84 = (_bitshift64Ashr(($82|0),($83|0),32)|0);
   $85 = tempRet0;
   $86 = ((($r_d$0)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($buf)) + 12|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (_i64Add(($49|0),0,($87|0),0)|0);
   $91 = tempRet0;
   $92 = (_i64Add(($90|0),($91|0),($84|0),($85|0))|0);
   $93 = tempRet0;
   $94 = (_i64Add(($92|0),($93|0),($53|0),0)|0);
   $95 = tempRet0;
   $96 = (_i64Subtract(($94|0),($95|0),($89|0),0)|0);
   $97 = tempRet0;
   HEAP32[$86>>2] = $96;
   $98 = (_bitshift64Ashr(($96|0),($97|0),32)|0);
   $99 = tempRet0;
   $100 = ((($r_d$0)) + 16|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (_i64Add(($63|0),0,($101|0),0)|0);
   $103 = tempRet0;
   $104 = (_i64Add(($102|0),($103|0),($67|0),0)|0);
   $105 = tempRet0;
   $106 = (_i64Add(($104|0),($105|0),($98|0),($99|0))|0);
   $107 = tempRet0;
   $108 = (_i64Subtract(($106|0),($107|0),($53|0),0)|0);
   $109 = tempRet0;
   HEAP32[$100>>2] = $108;
   $110 = (_bitshift64Ashr(($108|0),($109|0),32)|0);
   $111 = tempRet0;
   $112 = ((($r_d$0)) + 20|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (_i64Add(($75|0),0,($113|0),0)|0);
   $115 = tempRet0;
   $116 = (_i64Add(($114|0),($115|0),($77|0),0)|0);
   $117 = tempRet0;
   $118 = (_i64Subtract(($116|0),($117|0),($67|0),0)|0);
   $119 = tempRet0;
   $120 = (_i64Add(($118|0),($119|0),($110|0),($111|0))|0);
   $121 = tempRet0;
   HEAP32[$112>>2] = $120;
   $122 = (_bitshift64Ashr(($120|0),($121|0),32)|0);
   $123 = tempRet0;
   $124 = ((($r_d$0)) + 24|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (_i64Add(($89|0),0,($125|0),0)|0);
   $127 = tempRet0;
   $128 = (_i64Subtract(($126|0),($127|0),($77|0),0)|0);
   $129 = tempRet0;
   $130 = (_i64Add(($128|0),($129|0),($122|0),($123|0))|0);
   $131 = tempRet0;
   HEAP32[$124>>2] = $130;
   $132 = ($131|0)>(0);
   if ($132) {
    $133 = (($131) + -1)|0;
    $134 = (50272 + (($133*28)|0)|0);
    $135 = (_bn_sub_words($r_d$0,$r_d$0,$134,7)|0);
    $carry$0 = $135;$u$sroa$0$0 = (67);
   } else {
    $136 = ($131|0)<(0);
    if ($136) {
     $137 = $131 ^ -1;
     $138 = (50272 + (($137*28)|0)|0);
     $139 = (_bn_add_words($r_d$0,$r_d$0,$138,7)|0);
     $140 = (0 - ($139))|0;
     $141 = $140 & (67);
     $142 = (($139) + -1)|0;
     $143 = $142 & (68);
     $144 = $143 | $141;
     $carry$0 = $139;$u$sroa$0$0 = $144;
    } else {
     $carry$0 = 1;$u$sroa$0$0 = (67);
    }
   }
   $145 = $u$sroa$0$0;
   $146 = (FUNCTION_TABLE_iiiii[$145 & 127]($c_d,$r_d$0,50272,7)|0);
   $147 = (0 - ($146))|0;
   $148 = (0 - ($carry$0))|0;
   $149 = $c_d;
   $$demorgan = $147 & $148;
   $150 = $$demorgan ^ -1;
   $151 = $149 & $150;
   $152 = $r_d$0;
   $153 = $152 & $148;
   $154 = $153 & $147;
   $155 = $151 | $154;
   $156 = $155;
   $157 = HEAP32[$156>>2]|0;
   HEAP32[$r_d$0>>2] = $157;
   $158 = ((($156)) + 4|0);
   $159 = HEAP32[$158>>2]|0;
   HEAP32[$58>>2] = $159;
   $160 = ((($156)) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   HEAP32[$72>>2] = $161;
   $162 = ((($156)) + 12|0);
   $163 = HEAP32[$162>>2]|0;
   HEAP32[$86>>2] = $163;
   $164 = ((($156)) + 16|0);
   $165 = HEAP32[$164>>2]|0;
   HEAP32[$100>>2] = $165;
   $166 = ((($156)) + 20|0);
   $167 = HEAP32[$166>>2]|0;
   HEAP32[$112>>2] = $167;
   $168 = ((($156)) + 24|0);
   $169 = HEAP32[$168>>2]|0;
   HEAP32[$124>>2] = $169;
   $170 = ((($r)) + 4|0);
   HEAP32[$170>>2] = 7;
   $171 = HEAP32[$r>>2]|0;
   $172 = ((($171)) + 24|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = ($173|0)==(0);
   if ($174) {
    $175 = ((($171)) + 20|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = ($176|0)==(0);
    if ($177) {
     $178 = ((($171)) + 16|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = ($179|0)==(0);
     if ($180) {
      $181 = ((($171)) + 12|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = ($182|0)==(0);
      if ($183) {
       $184 = ((($171)) + 8|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0);
       if ($186) {
        $187 = ((($171)) + 4|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0);
        if ($189) {
         $190 = HEAP32[$171>>2]|0;
         $not$ = ($190|0)!=(0);
         $$ = $not$&1;
         $tmp_top$0$lcssa = $$;
        } else {
         $tmp_top$0$lcssa = 2;
        }
       } else {
        $tmp_top$0$lcssa = 3;
       }
      } else {
       $tmp_top$0$lcssa = 4;
      }
     } else {
      $tmp_top$0$lcssa = 5;
     }
    } else {
     $tmp_top$0$lcssa = 6;
    }
   } else {
    $tmp_top$0$lcssa = 7;
   }
   HEAP32[$170>>2] = $tmp_top$0$lcssa;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (_BN_nnmod($r,$a,50080,$ctx)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _BN_nist_mod_256($r,$a,$field,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $field = $field|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$demorgan = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $buf = 0, $c_d = 0, $carry$0 = 0, $i$0$lcssa$i7 = 0, $not$ = 0, $r_d$0 = 0, $scevgep = 0, $scevgep$i = 0, $tmp_top$0$lcssa = 0, $u$sroa$0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $buf = sp + 32|0;
 $c_d = sp;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$a>>2]|0;
 $3 = ((($a)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_BN_ucmp($a,50328)|0);
  $7 = ($6|0)>(-1);
  if (!($7)) {
   $9 = (_BN_ucmp(50100,$a)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    (_BN_set_word($r,0)|0);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = ($9|0)>(0);
   $12 = ($r|0)==($a|0);
   if ($11) {
    if ($12) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $13 = (_BN_copy($r,$a)|0);
    $14 = ($13|0)!=(0|0);
    $15 = $14&1;
    $$0 = $15;
    STACKTOP = sp;return ($$0|0);
   }
   if ($12) {
    $r_d$0 = $2;
   } else {
    $16 = ((($r)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)>(7);
    if (!($18)) {
     $19 = (_bn_expand2($r,8)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $21 = HEAP32[$r>>2]|0;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$21>>2] = $22;
    $23 = ((($2)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($21)) + 4|0);
    HEAP32[$25>>2] = $24;
    $26 = ((($2)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($21)) + 8|0);
    HEAP32[$28>>2] = $27;
    $29 = ((($2)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($21)) + 12|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($2)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($21)) + 16|0);
    HEAP32[$34>>2] = $33;
    $35 = ((($2)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($21)) + 20|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($2)) + 24|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($21)) + 24|0);
    HEAP32[$40>>2] = $39;
    $41 = ((($2)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($21)) + 28|0);
    HEAP32[$43>>2] = $42;
    $r_d$0 = $21;
   }
   $44 = (($1) + -8)|0;
   $45 = ($1|0)>(8);
   if ($45) {
    $scevgep = ((($2)) + 32|0);
    $46 = $1 << 2;
    $47 = (($46) + -32)|0;
    _memcpy(($buf|0),($scevgep|0),($47|0))|0;
    $48 = ($44|0)<(8);
    if ($48) {
     $i$0$lcssa$i7 = $44;
     label = 15;
    }
   } else {
    $i$0$lcssa$i7 = 0;
    label = 15;
   }
   if ((label|0) == 15) {
    $scevgep$i = (($buf) + ($i$0$lcssa$i7<<2)|0);
    $49 = (8 - ($i$0$lcssa$i7))|0;
    $50 = $49 << 2;
    _memset(($scevgep$i|0),0,($50|0))|0;
   }
   $51 = HEAP32[$r_d$0>>2]|0;
   $52 = HEAP32[$buf>>2]|0;
   $53 = (_i64Add(($52|0),0,($51|0),0)|0);
   $54 = tempRet0;
   $55 = ((($buf)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (_i64Add(($53|0),($54|0),($56|0),0)|0);
   $58 = tempRet0;
   $59 = ((($buf)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (_i64Subtract(($57|0),($58|0),($60|0),0)|0);
   $62 = tempRet0;
   $63 = ((($buf)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (_i64Subtract(($61|0),($62|0),($64|0),0)|0);
   $66 = tempRet0;
   $67 = ((($buf)) + 20|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (_i64Subtract(($65|0),($66|0),($68|0),0)|0);
   $70 = tempRet0;
   $71 = ((($buf)) + 24|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (_i64Subtract(($69|0),($70|0),($72|0),0)|0);
   $74 = tempRet0;
   HEAP32[$r_d$0>>2] = $73;
   $75 = (_bitshift64Ashr(($73|0),($74|0),32)|0);
   $76 = tempRet0;
   $77 = ((($r_d$0)) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (_i64Add(($75|0),($76|0),($78|0),0)|0);
   $80 = tempRet0;
   $81 = (_i64Add(($79|0),($80|0),($56|0),0)|0);
   $82 = tempRet0;
   $83 = ((($buf)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (_i64Add(($81|0),($82|0),($84|0),0)|0);
   $86 = tempRet0;
   $87 = (_i64Subtract(($85|0),($86|0),($64|0),0)|0);
   $88 = tempRet0;
   $89 = (_i64Subtract(($87|0),($88|0),($68|0),0)|0);
   $90 = tempRet0;
   $91 = (_i64Subtract(($89|0),($90|0),($72|0),0)|0);
   $92 = tempRet0;
   $93 = ((($buf)) + 28|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (_i64Subtract(($91|0),($92|0),($94|0),0)|0);
   $96 = tempRet0;
   HEAP32[$77>>2] = $95;
   $97 = (_bitshift64Ashr(($95|0),($96|0),32)|0);
   $98 = tempRet0;
   $99 = ((($r_d$0)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (_i64Add(($84|0),0,($100|0),0)|0);
   $102 = tempRet0;
   $103 = (_i64Add(($101|0),($102|0),($97|0),($98|0))|0);
   $104 = tempRet0;
   $105 = (_i64Add(($103|0),($104|0),($60|0),0)|0);
   $106 = tempRet0;
   $107 = (_i64Subtract(($105|0),($106|0),($68|0),0)|0);
   $108 = tempRet0;
   $109 = (_i64Subtract(($107|0),($108|0),($72|0),0)|0);
   $110 = tempRet0;
   $111 = (_i64Subtract(($109|0),($110|0),($94|0),0)|0);
   $112 = tempRet0;
   HEAP32[$99>>2] = $111;
   $113 = (_bitshift64Ashr(($111|0),($112|0),32)|0);
   $114 = tempRet0;
   $115 = ((($r_d$0)) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (_bitshift64Shl(($64|0),0,1)|0);
   $118 = tempRet0;
   $119 = (_bitshift64Shl(($60|0),0,1)|0);
   $120 = tempRet0;
   $121 = (_i64Add(($113|0),($114|0),($116|0),0)|0);
   $122 = tempRet0;
   $123 = (_i64Add(($121|0),($122|0),($68|0),0)|0);
   $124 = tempRet0;
   $125 = (_i64Subtract(($123|0),($124|0),($94|0),0)|0);
   $126 = tempRet0;
   $127 = (_i64Subtract(($125|0),($126|0),($52|0),0)|0);
   $128 = tempRet0;
   $129 = (_i64Subtract(($127|0),($128|0),($56|0),0)|0);
   $130 = tempRet0;
   $131 = (_i64Add(($129|0),($130|0),($117|0),($118|0))|0);
   $132 = tempRet0;
   $133 = (_i64Add(($131|0),($132|0),($119|0),($120|0))|0);
   $134 = tempRet0;
   HEAP32[$115>>2] = $133;
   $135 = (_bitshift64Ashr(($133|0),($134|0),32)|0);
   $136 = tempRet0;
   $137 = ((($r_d$0)) + 16|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (_bitshift64Shl(($68|0),0,1)|0);
   $140 = tempRet0;
   $141 = (_i64Add(($72|0),0,($138|0),0)|0);
   $142 = tempRet0;
   $143 = (_i64Subtract(($141|0),($142|0),($56|0),0)|0);
   $144 = tempRet0;
   $145 = (_i64Subtract(($143|0),($144|0),($84|0),0)|0);
   $146 = tempRet0;
   $147 = (_i64Add(($145|0),($146|0),($135|0),($136|0))|0);
   $148 = tempRet0;
   $149 = (_i64Add(($147|0),($148|0),($139|0),($140|0))|0);
   $150 = tempRet0;
   $151 = (_i64Add(($149|0),($150|0),($117|0),($118|0))|0);
   $152 = tempRet0;
   HEAP32[$137>>2] = $151;
   $153 = (_bitshift64Ashr(($151|0),($152|0),32)|0);
   $154 = tempRet0;
   $155 = ((($r_d$0)) + 20|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (_bitshift64Shl(($72|0),0,1)|0);
   $158 = tempRet0;
   $159 = (_i64Add(($94|0),0,($156|0),0)|0);
   $160 = tempRet0;
   $161 = (_i64Subtract(($159|0),($160|0),($84|0),0)|0);
   $162 = tempRet0;
   $163 = (_i64Subtract(($161|0),($162|0),($60|0),0)|0);
   $164 = tempRet0;
   $165 = (_i64Add(($163|0),($164|0),($153|0),($154|0))|0);
   $166 = tempRet0;
   $167 = (_i64Add(($165|0),($166|0),($157|0),($158|0))|0);
   $168 = tempRet0;
   $169 = (_i64Add(($167|0),($168|0),($139|0),($140|0))|0);
   $170 = tempRet0;
   HEAP32[$155>>2] = $169;
   $171 = (_bitshift64Ashr(($169|0),($170|0),32)|0);
   $172 = tempRet0;
   $173 = ((($r_d$0)) + 24|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = HEAP32[$buf>>2]|0;
   $176 = (_bitshift64Shl(($94|0),0,1)|0);
   $177 = tempRet0;
   $178 = (___muldi3(($72|0),0,3,0)|0);
   $179 = tempRet0;
   $180 = (_i64Add(($68|0),0,($174|0),0)|0);
   $181 = tempRet0;
   $182 = (_i64Subtract(($180|0),($181|0),($175|0),0)|0);
   $183 = tempRet0;
   $184 = (_i64Subtract(($182|0),($183|0),($56|0),0)|0);
   $185 = tempRet0;
   $186 = (_i64Add(($184|0),($185|0),($171|0),($172|0))|0);
   $187 = tempRet0;
   $188 = (_i64Add(($186|0),($187|0),($176|0),($177|0))|0);
   $189 = tempRet0;
   $190 = (_i64Add(($188|0),($189|0),($178|0),($179|0))|0);
   $191 = tempRet0;
   HEAP32[$173>>2] = $190;
   $192 = (_bitshift64Ashr(($190|0),($191|0),32)|0);
   $193 = tempRet0;
   $194 = ((($r_d$0)) + 28|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = HEAP32[$59>>2]|0;
   $197 = HEAP32[$63>>2]|0;
   $198 = HEAP32[$67>>2]|0;
   $199 = (___muldi3(($94|0),0,3,0)|0);
   $200 = tempRet0;
   $201 = (_i64Add(($175|0),0,($195|0),0)|0);
   $202 = tempRet0;
   $203 = (_i64Subtract(($201|0),($202|0),($84|0),0)|0);
   $204 = tempRet0;
   $205 = (_i64Subtract(($203|0),($204|0),($196|0),0)|0);
   $206 = tempRet0;
   $207 = (_i64Subtract(($205|0),($206|0),($197|0),0)|0);
   $208 = tempRet0;
   $209 = (_i64Subtract(($207|0),($208|0),($198|0),0)|0);
   $210 = tempRet0;
   $211 = (_i64Add(($209|0),($210|0),($192|0),($193|0))|0);
   $212 = tempRet0;
   $213 = (_i64Add(($211|0),($212|0),($199|0),($200|0))|0);
   $214 = tempRet0;
   HEAP32[$194>>2] = $213;
   $215 = ($214|0)>(0);
   if ($215) {
    $216 = (($214) + -1)|0;
    $217 = (50348 + ($216<<5)|0);
    $218 = (_bn_sub_words($r_d$0,$r_d$0,$217,8)|0);
    $carry$0 = $218;$u$sroa$0$0 = (67);
   } else {
    $219 = ($214|0)<(0);
    if ($219) {
     $220 = $214 ^ -1;
     $221 = (50348 + ($220<<5)|0);
     $222 = (_bn_add_words($r_d$0,$r_d$0,$221,8)|0);
     $223 = (0 - ($222))|0;
     $224 = $223 & (67);
     $225 = (($222) + -1)|0;
     $226 = $225 & (68);
     $227 = $226 | $224;
     $carry$0 = $222;$u$sroa$0$0 = $227;
    } else {
     $carry$0 = 1;$u$sroa$0$0 = (67);
    }
   }
   $228 = $u$sroa$0$0;
   $229 = (FUNCTION_TABLE_iiiii[$228 & 127]($c_d,$r_d$0,50348,8)|0);
   $230 = (0 - ($229))|0;
   $231 = (0 - ($carry$0))|0;
   $232 = $c_d;
   $$demorgan = $230 & $231;
   $233 = $$demorgan ^ -1;
   $234 = $232 & $233;
   $235 = $r_d$0;
   $236 = $235 & $231;
   $237 = $236 & $230;
   $238 = $234 | $237;
   $239 = $238;
   $240 = HEAP32[$239>>2]|0;
   HEAP32[$r_d$0>>2] = $240;
   $241 = ((($239)) + 4|0);
   $242 = HEAP32[$241>>2]|0;
   HEAP32[$77>>2] = $242;
   $243 = ((($239)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   HEAP32[$99>>2] = $244;
   $245 = ((($239)) + 12|0);
   $246 = HEAP32[$245>>2]|0;
   HEAP32[$115>>2] = $246;
   $247 = ((($239)) + 16|0);
   $248 = HEAP32[$247>>2]|0;
   HEAP32[$137>>2] = $248;
   $249 = ((($239)) + 20|0);
   $250 = HEAP32[$249>>2]|0;
   HEAP32[$155>>2] = $250;
   $251 = ((($239)) + 24|0);
   $252 = HEAP32[$251>>2]|0;
   HEAP32[$173>>2] = $252;
   $253 = ((($239)) + 28|0);
   $254 = HEAP32[$253>>2]|0;
   HEAP32[$194>>2] = $254;
   $255 = ((($r)) + 4|0);
   HEAP32[$255>>2] = 8;
   $256 = HEAP32[$r>>2]|0;
   $257 = ((($256)) + 28|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = ($258|0)==(0);
   if ($259) {
    $260 = ((($256)) + 24|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)==(0);
    if ($262) {
     $263 = ((($256)) + 20|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = ($264|0)==(0);
     if ($265) {
      $266 = ((($256)) + 16|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = ($267|0)==(0);
      if ($268) {
       $269 = ((($256)) + 12|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $272 = ((($256)) + 8|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ($273|0)==(0);
        if ($274) {
         $275 = ((($256)) + 4|0);
         $276 = HEAP32[$275>>2]|0;
         $277 = ($276|0)==(0);
         if ($277) {
          $278 = HEAP32[$256>>2]|0;
          $not$ = ($278|0)!=(0);
          $$ = $not$&1;
          $tmp_top$0$lcssa = $$;
         } else {
          $tmp_top$0$lcssa = 2;
         }
        } else {
         $tmp_top$0$lcssa = 3;
        }
       } else {
        $tmp_top$0$lcssa = 4;
       }
      } else {
       $tmp_top$0$lcssa = 5;
      }
     } else {
      $tmp_top$0$lcssa = 6;
     }
    } else {
     $tmp_top$0$lcssa = 7;
    }
   } else {
    $tmp_top$0$lcssa = 8;
   }
   HEAP32[$255>>2] = $tmp_top$0$lcssa;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (_BN_nnmod($r,$a,50100,$ctx)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _BN_nist_mod_384($r,$a,$field,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $field = $field|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$demorgan = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c_d = 0, $carry$0 = 0, $i$0$lcssa$i7 = 0;
 var $not$ = 0, $r_d$0 = 0, $scevgep = 0, $scevgep$i = 0, $tmp_top$0$lcssa = 0, $u$sroa$0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $buf = sp + 48|0;
 $c_d = sp;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$a>>2]|0;
 $3 = ((($a)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_BN_ucmp($a,50508)|0);
  $7 = ($6|0)>(-1);
  if (!($7)) {
   $9 = (_BN_ucmp(50120,$a)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    (_BN_set_word($r,0)|0);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = ($9|0)>(0);
   $12 = ($r|0)==($a|0);
   if ($11) {
    if ($12) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $13 = (_BN_copy($r,$a)|0);
    $14 = ($13|0)!=(0|0);
    $15 = $14&1;
    $$0 = $15;
    STACKTOP = sp;return ($$0|0);
   }
   if ($12) {
    $r_d$0 = $2;
   } else {
    $16 = ((($r)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)>(11);
    if (!($18)) {
     $19 = (_bn_expand2($r,12)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $21 = HEAP32[$r>>2]|0;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$21>>2] = $22;
    $23 = ((($2)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($21)) + 4|0);
    HEAP32[$25>>2] = $24;
    $26 = ((($2)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($21)) + 8|0);
    HEAP32[$28>>2] = $27;
    $29 = ((($2)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($21)) + 12|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($2)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($21)) + 16|0);
    HEAP32[$34>>2] = $33;
    $35 = ((($2)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($21)) + 20|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($2)) + 24|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($21)) + 24|0);
    HEAP32[$40>>2] = $39;
    $41 = ((($2)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($21)) + 28|0);
    HEAP32[$43>>2] = $42;
    $44 = ((($2)) + 32|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($21)) + 32|0);
    HEAP32[$46>>2] = $45;
    $47 = ((($2)) + 36|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($21)) + 36|0);
    HEAP32[$49>>2] = $48;
    $50 = ((($2)) + 40|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($21)) + 40|0);
    HEAP32[$52>>2] = $51;
    $53 = ((($2)) + 44|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($21)) + 44|0);
    HEAP32[$55>>2] = $54;
    $r_d$0 = $21;
   }
   $56 = (($1) + -12)|0;
   $57 = ($1|0)>(12);
   if ($57) {
    $scevgep = ((($2)) + 48|0);
    $58 = $1 << 2;
    $59 = (($58) + -48)|0;
    _memcpy(($buf|0),($scevgep|0),($59|0))|0;
    $60 = ($56|0)<(12);
    if ($60) {
     $i$0$lcssa$i7 = $56;
     label = 15;
    }
   } else {
    $i$0$lcssa$i7 = 0;
    label = 15;
   }
   if ((label|0) == 15) {
    $scevgep$i = (($buf) + ($i$0$lcssa$i7<<2)|0);
    $61 = (12 - ($i$0$lcssa$i7))|0;
    $62 = $61 << 2;
    _memset(($scevgep$i|0),0,($62|0))|0;
   }
   $63 = HEAP32[$r_d$0>>2]|0;
   $64 = HEAP32[$buf>>2]|0;
   $65 = (_i64Add(($64|0),0,($63|0),0)|0);
   $66 = tempRet0;
   $67 = ((($buf)) + 36|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (_i64Add(($65|0),($66|0),($68|0),0)|0);
   $70 = tempRet0;
   $71 = ((($buf)) + 32|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (_i64Add(($69|0),($70|0),($72|0),0)|0);
   $74 = tempRet0;
   $75 = ((($buf)) + 44|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (_i64Subtract(($73|0),($74|0),($76|0),0)|0);
   $78 = tempRet0;
   HEAP32[$r_d$0>>2] = $77;
   $79 = (_bitshift64Ashr(($77|0),($78|0),32)|0);
   $80 = tempRet0;
   $81 = ((($r_d$0)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (_i64Add(($79|0),($80|0),($82|0),0)|0);
   $84 = tempRet0;
   $85 = ((($buf)) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (_i64Add(($83|0),($84|0),($86|0),0)|0);
   $88 = tempRet0;
   $89 = ((($buf)) + 40|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (_i64Add(($87|0),($88|0),($90|0),0)|0);
   $92 = tempRet0;
   $93 = (_i64Add(($91|0),($92|0),($76|0),0)|0);
   $94 = tempRet0;
   $95 = (_i64Subtract(($93|0),($94|0),($64|0),0)|0);
   $96 = tempRet0;
   $97 = (_i64Subtract(($95|0),($96|0),($72|0),0)|0);
   $98 = tempRet0;
   HEAP32[$81>>2] = $97;
   $99 = (_bitshift64Ashr(($97|0),($98|0),32)|0);
   $100 = tempRet0;
   $101 = ((($r_d$0)) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($buf)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (_i64Add(($104|0),0,($102|0),0)|0);
   $106 = tempRet0;
   $107 = (_i64Add(($105|0),($106|0),($99|0),($100|0))|0);
   $108 = tempRet0;
   $109 = (_i64Add(($107|0),($108|0),($76|0),0)|0);
   $110 = tempRet0;
   $111 = (_i64Subtract(($109|0),($110|0),($86|0),0)|0);
   $112 = tempRet0;
   $113 = (_i64Subtract(($111|0),($112|0),($68|0),0)|0);
   $114 = tempRet0;
   HEAP32[$101>>2] = $113;
   $115 = (_bitshift64Ashr(($113|0),($114|0),32)|0);
   $116 = tempRet0;
   $117 = ((($r_d$0)) + 12|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ((($buf)) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (_i64Add(($120|0),0,($118|0),0)|0);
   $122 = tempRet0;
   $123 = (_i64Add(($121|0),($122|0),($64|0),0)|0);
   $124 = tempRet0;
   $125 = (_i64Add(($123|0),($124|0),($115|0),($116|0))|0);
   $126 = tempRet0;
   $127 = (_i64Add(($125|0),($126|0),($72|0),0)|0);
   $128 = tempRet0;
   $129 = (_i64Add(($127|0),($128|0),($68|0),0)|0);
   $130 = tempRet0;
   $131 = (_i64Subtract(($129|0),($130|0),($104|0),0)|0);
   $132 = tempRet0;
   $133 = (_i64Subtract(($131|0),($132|0),($90|0),0)|0);
   $134 = tempRet0;
   $135 = (_i64Subtract(($133|0),($134|0),($76|0),0)|0);
   $136 = tempRet0;
   HEAP32[$117>>2] = $135;
   $137 = (_bitshift64Ashr(($135|0),($136|0),32)|0);
   $138 = tempRet0;
   $139 = ((($r_d$0)) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($buf)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (___muldi3(($76|0),0,-2,-1)|0);
   $144 = tempRet0;
   $145 = (_bitshift64Shl(($68|0),0,1)|0);
   $146 = tempRet0;
   $147 = (_i64Add(($142|0),0,($140|0),0)|0);
   $148 = tempRet0;
   $149 = (_i64Add(($147|0),($148|0),($86|0),0)|0);
   $150 = tempRet0;
   $151 = (_i64Add(($149|0),($150|0),($137|0),($138|0))|0);
   $152 = tempRet0;
   $153 = (_i64Add(($151|0),($152|0),($64|0),0)|0);
   $154 = tempRet0;
   $155 = (_i64Add(($153|0),($154|0),($72|0),0)|0);
   $156 = tempRet0;
   $157 = (_i64Add(($155|0),($156|0),($90|0),0)|0);
   $158 = tempRet0;
   $159 = (_i64Subtract(($157|0),($158|0),($120|0),0)|0);
   $160 = tempRet0;
   $161 = (_i64Add(($159|0),($160|0),($143|0),($144|0))|0);
   $162 = tempRet0;
   $163 = (_i64Add(($161|0),($162|0),($145|0),($146|0))|0);
   $164 = tempRet0;
   HEAP32[$139>>2] = $163;
   $165 = (_bitshift64Ashr(($163|0),($164|0),32)|0);
   $166 = tempRet0;
   $167 = ((($r_d$0)) + 20|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ((($buf)) + 20|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (_bitshift64Shl(($90|0),0,1)|0);
   $172 = tempRet0;
   $173 = (_i64Add(($170|0),0,($168|0),0)|0);
   $174 = tempRet0;
   $175 = (_i64Add(($173|0),($174|0),($104|0),0)|0);
   $176 = tempRet0;
   $177 = (_i64Add(($175|0),($176|0),($86|0),0)|0);
   $178 = tempRet0;
   $179 = (_i64Add(($177|0),($178|0),($68|0),0)|0);
   $180 = tempRet0;
   $181 = (_i64Add(($179|0),($180|0),($76|0),0)|0);
   $182 = tempRet0;
   $183 = (_i64Add(($181|0),($182|0),($165|0),($166|0))|0);
   $184 = tempRet0;
   $185 = (_i64Subtract(($183|0),($184|0),($142|0),0)|0);
   $186 = tempRet0;
   $187 = (_i64Add(($185|0),($186|0),($171|0),($172|0))|0);
   $188 = tempRet0;
   HEAP32[$167>>2] = $187;
   $189 = (_bitshift64Ashr(($187|0),($188|0),32)|0);
   $190 = tempRet0;
   $191 = ((($r_d$0)) + 24|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ((($buf)) + 24|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (_bitshift64Shl(($76|0),0,1)|0);
   $196 = tempRet0;
   $197 = (_i64Add(($194|0),0,($192|0),0)|0);
   $198 = tempRet0;
   $199 = (_i64Add(($197|0),($198|0),($120|0),0)|0);
   $200 = tempRet0;
   $201 = (_i64Add(($199|0),($200|0),($104|0),0)|0);
   $202 = tempRet0;
   $203 = (_i64Add(($201|0),($202|0),($90|0),0)|0);
   $204 = tempRet0;
   $205 = (_i64Subtract(($203|0),($204|0),($170|0),0)|0);
   $206 = tempRet0;
   $207 = (_i64Add(($205|0),($206|0),($189|0),($190|0))|0);
   $208 = tempRet0;
   $209 = (_i64Add(($207|0),($208|0),($195|0),($196|0))|0);
   $210 = tempRet0;
   HEAP32[$191>>2] = $209;
   $211 = (_bitshift64Ashr(($209|0),($210|0),32)|0);
   $212 = tempRet0;
   $213 = ((($r_d$0)) + 28|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ((($buf)) + 28|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = HEAP32[$75>>2]|0;
   $218 = (_i64Add(($216|0),0,($214|0),0)|0);
   $219 = tempRet0;
   $220 = (_i64Add(($218|0),($219|0),($142|0),0)|0);
   $221 = tempRet0;
   $222 = (_i64Add(($220|0),($221|0),($120|0),0)|0);
   $223 = tempRet0;
   $224 = (_i64Add(($222|0),($223|0),($217|0),0)|0);
   $225 = tempRet0;
   $226 = (_i64Subtract(($224|0),($225|0),($194|0),0)|0);
   $227 = tempRet0;
   $228 = (_i64Add(($226|0),($227|0),($211|0),($212|0))|0);
   $229 = tempRet0;
   HEAP32[$213>>2] = $228;
   $230 = (_bitshift64Ashr(($228|0),($229|0),32)|0);
   $231 = tempRet0;
   $232 = ((($r_d$0)) + 32|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[$71>>2]|0;
   $235 = (_i64Add(($234|0),0,($233|0),0)|0);
   $236 = tempRet0;
   $237 = (_i64Add(($235|0),($236|0),($170|0),0)|0);
   $238 = tempRet0;
   $239 = (_i64Add(($237|0),($238|0),($142|0),0)|0);
   $240 = tempRet0;
   $241 = (_i64Subtract(($239|0),($240|0),($216|0),0)|0);
   $242 = tempRet0;
   $243 = (_i64Add(($241|0),($242|0),($230|0),($231|0))|0);
   $244 = tempRet0;
   HEAP32[$232>>2] = $243;
   $245 = (_bitshift64Ashr(($243|0),($244|0),32)|0);
   $246 = tempRet0;
   $247 = ((($r_d$0)) + 36|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = HEAP32[$67>>2]|0;
   $250 = (_i64Add(($249|0),0,($248|0),0)|0);
   $251 = tempRet0;
   $252 = (_i64Add(($250|0),($251|0),($194|0),0)|0);
   $253 = tempRet0;
   $254 = (_i64Add(($252|0),($253|0),($170|0),0)|0);
   $255 = tempRet0;
   $256 = (_i64Subtract(($254|0),($255|0),($234|0),0)|0);
   $257 = tempRet0;
   $258 = (_i64Add(($256|0),($257|0),($245|0),($246|0))|0);
   $259 = tempRet0;
   HEAP32[$247>>2] = $258;
   $260 = (_bitshift64Ashr(($258|0),($259|0),32)|0);
   $261 = tempRet0;
   $262 = ((($r_d$0)) + 40|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = HEAP32[$89>>2]|0;
   $265 = (_i64Add(($264|0),0,($263|0),0)|0);
   $266 = tempRet0;
   $267 = (_i64Add(($265|0),($266|0),($216|0),0)|0);
   $268 = tempRet0;
   $269 = (_i64Add(($267|0),($268|0),($194|0),0)|0);
   $270 = tempRet0;
   $271 = (_i64Subtract(($269|0),($270|0),($249|0),0)|0);
   $272 = tempRet0;
   $273 = (_i64Add(($271|0),($272|0),($260|0),($261|0))|0);
   $274 = tempRet0;
   HEAP32[$262>>2] = $273;
   $275 = (_bitshift64Ashr(($273|0),($274|0),32)|0);
   $276 = tempRet0;
   $277 = ((($r_d$0)) + 44|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = (_i64Add(($217|0),0,($278|0),0)|0);
   $280 = tempRet0;
   $281 = (_i64Add(($279|0),($280|0),($234|0),0)|0);
   $282 = tempRet0;
   $283 = (_i64Add(($281|0),($282|0),($216|0),0)|0);
   $284 = tempRet0;
   $285 = (_i64Subtract(($283|0),($284|0),($264|0),0)|0);
   $286 = tempRet0;
   $287 = (_i64Add(($285|0),($286|0),($275|0),($276|0))|0);
   $288 = tempRet0;
   HEAP32[$277>>2] = $287;
   $289 = ($288|0)>(0);
   if ($289) {
    $290 = (($288) + -1)|0;
    $291 = (50528 + (($290*48)|0)|0);
    $292 = (_bn_sub_words($r_d$0,$r_d$0,$291,12)|0);
    $carry$0 = $292;$u$sroa$0$0 = (67);
   } else {
    $293 = ($288|0)<(0);
    if ($293) {
     $294 = $288 ^ -1;
     $295 = (50528 + (($294*48)|0)|0);
     $296 = (_bn_add_words($r_d$0,$r_d$0,$295,12)|0);
     $297 = (0 - ($296))|0;
     $298 = $297 & (67);
     $299 = (($296) + -1)|0;
     $300 = $299 & (68);
     $301 = $300 | $298;
     $carry$0 = $296;$u$sroa$0$0 = $301;
    } else {
     $carry$0 = 1;$u$sroa$0$0 = (67);
    }
   }
   $302 = $u$sroa$0$0;
   $303 = (FUNCTION_TABLE_iiiii[$302 & 127]($c_d,$r_d$0,50528,12)|0);
   $304 = (0 - ($303))|0;
   $305 = (0 - ($carry$0))|0;
   $306 = $c_d;
   $$demorgan = $304 & $305;
   $307 = $$demorgan ^ -1;
   $308 = $306 & $307;
   $309 = $r_d$0;
   $310 = $309 & $305;
   $311 = $310 & $304;
   $312 = $308 | $311;
   $313 = $312;
   $314 = HEAP32[$313>>2]|0;
   HEAP32[$r_d$0>>2] = $314;
   $315 = ((($313)) + 4|0);
   $316 = HEAP32[$315>>2]|0;
   HEAP32[$81>>2] = $316;
   $317 = ((($313)) + 8|0);
   $318 = HEAP32[$317>>2]|0;
   HEAP32[$101>>2] = $318;
   $319 = ((($313)) + 12|0);
   $320 = HEAP32[$319>>2]|0;
   HEAP32[$117>>2] = $320;
   $321 = ((($313)) + 16|0);
   $322 = HEAP32[$321>>2]|0;
   HEAP32[$139>>2] = $322;
   $323 = ((($313)) + 20|0);
   $324 = HEAP32[$323>>2]|0;
   HEAP32[$167>>2] = $324;
   $325 = ((($313)) + 24|0);
   $326 = HEAP32[$325>>2]|0;
   HEAP32[$191>>2] = $326;
   $327 = ((($313)) + 28|0);
   $328 = HEAP32[$327>>2]|0;
   HEAP32[$213>>2] = $328;
   $329 = ((($313)) + 32|0);
   $330 = HEAP32[$329>>2]|0;
   HEAP32[$232>>2] = $330;
   $331 = ((($313)) + 36|0);
   $332 = HEAP32[$331>>2]|0;
   HEAP32[$247>>2] = $332;
   $333 = ((($313)) + 40|0);
   $334 = HEAP32[$333>>2]|0;
   HEAP32[$262>>2] = $334;
   $335 = ((($313)) + 44|0);
   $336 = HEAP32[$335>>2]|0;
   HEAP32[$277>>2] = $336;
   $337 = ((($r)) + 4|0);
   HEAP32[$337>>2] = 12;
   $338 = HEAP32[$r>>2]|0;
   $339 = ((($338)) + 44|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = ($340|0)==(0);
   if ($341) {
    $342 = ((($338)) + 40|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = ($343|0)==(0);
    if ($344) {
     $345 = ((($338)) + 36|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = ($346|0)==(0);
     if ($347) {
      $348 = ((($338)) + 32|0);
      $349 = HEAP32[$348>>2]|0;
      $350 = ($349|0)==(0);
      if ($350) {
       $351 = ((($338)) + 28|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ($352|0)==(0);
       if ($353) {
        $354 = ((($338)) + 24|0);
        $355 = HEAP32[$354>>2]|0;
        $356 = ($355|0)==(0);
        if ($356) {
         $357 = ((($338)) + 20|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358|0)==(0);
         if ($359) {
          $360 = ((($338)) + 16|0);
          $361 = HEAP32[$360>>2]|0;
          $362 = ($361|0)==(0);
          if ($362) {
           $363 = ((($338)) + 12|0);
           $364 = HEAP32[$363>>2]|0;
           $365 = ($364|0)==(0);
           if ($365) {
            $366 = ((($338)) + 8|0);
            $367 = HEAP32[$366>>2]|0;
            $368 = ($367|0)==(0);
            if ($368) {
             $369 = ((($338)) + 4|0);
             $370 = HEAP32[$369>>2]|0;
             $371 = ($370|0)==(0);
             if ($371) {
              $372 = HEAP32[$338>>2]|0;
              $not$ = ($372|0)!=(0);
              $$ = $not$&1;
              $tmp_top$0$lcssa = $$;
             } else {
              $tmp_top$0$lcssa = 2;
             }
            } else {
             $tmp_top$0$lcssa = 3;
            }
           } else {
            $tmp_top$0$lcssa = 4;
           }
          } else {
           $tmp_top$0$lcssa = 5;
          }
         } else {
          $tmp_top$0$lcssa = 6;
         }
        } else {
         $tmp_top$0$lcssa = 7;
        }
       } else {
        $tmp_top$0$lcssa = 8;
       }
      } else {
       $tmp_top$0$lcssa = 9;
      }
     } else {
      $tmp_top$0$lcssa = 10;
     }
    } else {
     $tmp_top$0$lcssa = 11;
    }
   } else {
    $tmp_top$0$lcssa = 12;
   }
   HEAP32[$337>>2] = $tmp_top$0$lcssa;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (_BN_nnmod($r,$a,50120,$ctx)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _BN_nist_mod_521($r,$a,$field,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $field = $field|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i6 = 0, $i$0$lcssa$i7 = 0, $i$02$i = 0, $not$ = 0;
 var $r_d$0 = 0, $scevgep$i = 0, $t_d = 0, $tmp_top$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $t_d = sp;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$a>>2]|0;
 $3 = ((($a)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_BN_ucmp($a,50768)|0);
  $7 = ($6|0)>(-1);
  if (!($7)) {
   $9 = (_BN_ucmp(50140,$a)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    (_BN_set_word($r,0)|0);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = ($9|0)>(0);
   $12 = ($r|0)==($a|0);
   if ($11) {
    if ($12) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $13 = (_BN_copy($r,$a)|0);
    $14 = ($13|0)!=(0|0);
    $15 = $14&1;
    $$0 = $15;
    STACKTOP = sp;return ($$0|0);
   }
   if ($12) {
    $r_d$0 = $2;
   } else {
    $16 = ((($r)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)>(16);
    if (!($18)) {
     $19 = (_bn_expand2($r,17)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $21 = HEAP32[$r>>2]|0;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$21>>2] = $22;
    $23 = ((($2)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($21)) + 4|0);
    HEAP32[$25>>2] = $24;
    $26 = ((($2)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($21)) + 8|0);
    HEAP32[$28>>2] = $27;
    $29 = ((($2)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($21)) + 12|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($2)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($21)) + 16|0);
    HEAP32[$34>>2] = $33;
    $35 = ((($2)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($21)) + 20|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($2)) + 24|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($21)) + 24|0);
    HEAP32[$40>>2] = $39;
    $41 = ((($2)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($21)) + 28|0);
    HEAP32[$43>>2] = $42;
    $44 = ((($2)) + 32|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($21)) + 32|0);
    HEAP32[$46>>2] = $45;
    $47 = ((($2)) + 36|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($21)) + 36|0);
    HEAP32[$49>>2] = $48;
    $50 = ((($2)) + 40|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($21)) + 40|0);
    HEAP32[$52>>2] = $51;
    $53 = ((($2)) + 44|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($21)) + 44|0);
    HEAP32[$55>>2] = $54;
    $56 = ((($2)) + 48|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ((($21)) + 48|0);
    HEAP32[$58>>2] = $57;
    $59 = ((($2)) + 52|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ((($21)) + 52|0);
    HEAP32[$61>>2] = $60;
    $62 = ((($2)) + 56|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($21)) + 56|0);
    HEAP32[$64>>2] = $63;
    $65 = ((($2)) + 60|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($21)) + 60|0);
    HEAP32[$67>>2] = $66;
    $68 = ((($2)) + 64|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($21)) + 64|0);
    HEAP32[$70>>2] = $69;
    $r_d$0 = $21;
   }
   $71 = (($1) + -16)|0;
   $72 = ($1|0)>(16);
   if ($72) {
    $i$02$i = 0;
    while(1) {
     $$sum = (($i$02$i) + 16)|0;
     $76 = (($2) + ($$sum<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($t_d) + ($i$02$i<<2)|0);
     HEAP32[$78>>2] = $77;
     $79 = (($i$02$i) + 1)|0;
     $exitcond$i6 = ($79|0)==($71|0);
     if ($exitcond$i6) {
      break;
     } else {
      $i$02$i = $79;
     }
    }
    $73 = ($71|0)<(17);
    if ($73) {
     $i$0$lcssa$i7 = $71;
     label = 15;
    }
   } else {
    $i$0$lcssa$i7 = 0;
    label = 15;
   }
   if ((label|0) == 15) {
    $scevgep$i = (($t_d) + ($i$0$lcssa$i7<<2)|0);
    $74 = (17 - ($i$0$lcssa$i7))|0;
    $75 = $74 << 2;
    _memset(($scevgep$i|0),0,($75|0))|0;
   }
   $80 = HEAP32[$t_d>>2]|0;
   $81 = $80 >>> 9;
   $82 = ((($t_d)) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83 << 23;
   $85 = $84 | $81;
   HEAP32[$t_d>>2] = $85;
   $86 = $83 >>> 9;
   $87 = ((($t_d)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 << 23;
   $90 = $89 | $86;
   HEAP32[$82>>2] = $90;
   $91 = $88 >>> 9;
   $92 = ((($t_d)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $93 << 23;
   $95 = $94 | $91;
   HEAP32[$87>>2] = $95;
   $96 = $93 >>> 9;
   $97 = ((($t_d)) + 16|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $98 << 23;
   $100 = $99 | $96;
   HEAP32[$92>>2] = $100;
   $101 = $98 >>> 9;
   $102 = ((($t_d)) + 20|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $103 << 23;
   $105 = $104 | $101;
   HEAP32[$97>>2] = $105;
   $106 = $103 >>> 9;
   $107 = ((($t_d)) + 24|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $108 << 23;
   $110 = $109 | $106;
   HEAP32[$102>>2] = $110;
   $111 = $108 >>> 9;
   $112 = ((($t_d)) + 28|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $113 << 23;
   $115 = $114 | $111;
   HEAP32[$107>>2] = $115;
   $116 = $113 >>> 9;
   $117 = ((($t_d)) + 32|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118 << 23;
   $120 = $119 | $116;
   HEAP32[$112>>2] = $120;
   $121 = $118 >>> 9;
   $122 = ((($t_d)) + 36|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $123 << 23;
   $125 = $124 | $121;
   HEAP32[$117>>2] = $125;
   $126 = $123 >>> 9;
   $127 = ((($t_d)) + 40|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $128 << 23;
   $130 = $129 | $126;
   HEAP32[$122>>2] = $130;
   $131 = $128 >>> 9;
   $132 = ((($t_d)) + 44|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $133 << 23;
   $135 = $134 | $131;
   HEAP32[$127>>2] = $135;
   $136 = $133 >>> 9;
   $137 = ((($t_d)) + 48|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138 << 23;
   $140 = $139 | $136;
   HEAP32[$132>>2] = $140;
   $141 = $138 >>> 9;
   $142 = ((($t_d)) + 52|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $143 << 23;
   $145 = $144 | $141;
   HEAP32[$137>>2] = $145;
   $146 = $143 >>> 9;
   $147 = ((($t_d)) + 56|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $148 << 23;
   $150 = $149 | $146;
   HEAP32[$142>>2] = $150;
   $151 = $148 >>> 9;
   $152 = ((($t_d)) + 60|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $153 << 23;
   $155 = $154 | $151;
   HEAP32[$147>>2] = $155;
   $156 = $153 >>> 9;
   $157 = ((($t_d)) + 64|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $158 << 23;
   $160 = $159 | $156;
   HEAP32[$152>>2] = $160;
   $161 = $158 >>> 9;
   HEAP32[$157>>2] = $161;
   $162 = ((($r_d$0)) + 64|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $163 & 511;
   HEAP32[$162>>2] = $164;
   (_bn_add_words($r_d$0,$r_d$0,$t_d,17)|0);
   $165 = (_bn_sub_words($t_d,$r_d$0,50788,17)|0);
   $166 = (0 - ($165))|0;
   $167 = $t_d;
   $168 = (($165) + -1)|0;
   $169 = $168 & $167;
   $170 = $r_d$0;
   $171 = $170 & $166;
   $172 = $169 | $171;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   HEAP32[$r_d$0>>2] = $174;
   $175 = ((($173)) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ((($r_d$0)) + 4|0);
   HEAP32[$177>>2] = $176;
   $178 = ((($173)) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = ((($r_d$0)) + 8|0);
   HEAP32[$180>>2] = $179;
   $181 = ((($173)) + 12|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ((($r_d$0)) + 12|0);
   HEAP32[$183>>2] = $182;
   $184 = ((($173)) + 16|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = ((($r_d$0)) + 16|0);
   HEAP32[$186>>2] = $185;
   $187 = ((($173)) + 20|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ((($r_d$0)) + 20|0);
   HEAP32[$189>>2] = $188;
   $190 = ((($173)) + 24|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ((($r_d$0)) + 24|0);
   HEAP32[$192>>2] = $191;
   $193 = ((($173)) + 28|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = ((($r_d$0)) + 28|0);
   HEAP32[$195>>2] = $194;
   $196 = ((($173)) + 32|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = ((($r_d$0)) + 32|0);
   HEAP32[$198>>2] = $197;
   $199 = ((($173)) + 36|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ((($r_d$0)) + 36|0);
   HEAP32[$201>>2] = $200;
   $202 = ((($173)) + 40|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ((($r_d$0)) + 40|0);
   HEAP32[$204>>2] = $203;
   $205 = ((($173)) + 44|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ((($r_d$0)) + 44|0);
   HEAP32[$207>>2] = $206;
   $208 = ((($173)) + 48|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = ((($r_d$0)) + 48|0);
   HEAP32[$210>>2] = $209;
   $211 = ((($173)) + 52|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ((($r_d$0)) + 52|0);
   HEAP32[$213>>2] = $212;
   $214 = ((($173)) + 56|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = ((($r_d$0)) + 56|0);
   HEAP32[$216>>2] = $215;
   $217 = ((($173)) + 60|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = ((($r_d$0)) + 60|0);
   HEAP32[$219>>2] = $218;
   $220 = ((($173)) + 64|0);
   $221 = HEAP32[$220>>2]|0;
   HEAP32[$162>>2] = $221;
   $222 = ((($r)) + 4|0);
   HEAP32[$222>>2] = 17;
   $223 = HEAP32[$r>>2]|0;
   $224 = ((($223)) + 64|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = ($225|0)==(0);
   do {
    if ($226) {
     $227 = ((($223)) + 60|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = ($228|0)==(0);
     if ($229) {
      $230 = ((($223)) + 56|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = ($231|0)==(0);
      if ($232) {
       $233 = ((($223)) + 52|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = ((($223)) + 48|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = ($237|0)==(0);
        if ($238) {
         $239 = ((($223)) + 44|0);
         $240 = HEAP32[$239>>2]|0;
         $241 = ($240|0)==(0);
         if ($241) {
          $242 = ((($223)) + 40|0);
          $243 = HEAP32[$242>>2]|0;
          $244 = ($243|0)==(0);
          if ($244) {
           $245 = ((($223)) + 36|0);
           $246 = HEAP32[$245>>2]|0;
           $247 = ($246|0)==(0);
           if ($247) {
            $248 = ((($223)) + 32|0);
            $249 = HEAP32[$248>>2]|0;
            $250 = ($249|0)==(0);
            if ($250) {
             $251 = ((($223)) + 28|0);
             $252 = HEAP32[$251>>2]|0;
             $253 = ($252|0)==(0);
             if ($253) {
              $254 = ((($223)) + 24|0);
              $255 = HEAP32[$254>>2]|0;
              $256 = ($255|0)==(0);
              if ($256) {
               $257 = ((($223)) + 20|0);
               $258 = HEAP32[$257>>2]|0;
               $259 = ($258|0)==(0);
               if ($259) {
                $260 = ((($223)) + 16|0);
                $261 = HEAP32[$260>>2]|0;
                $262 = ($261|0)==(0);
                if (!($262)) {
                 $tmp_top$0$lcssa = 5;
                 break;
                }
                $263 = ((($223)) + 12|0);
                $264 = HEAP32[$263>>2]|0;
                $265 = ($264|0)==(0);
                if (!($265)) {
                 $tmp_top$0$lcssa = 4;
                 break;
                }
                $266 = ((($223)) + 8|0);
                $267 = HEAP32[$266>>2]|0;
                $268 = ($267|0)==(0);
                if (!($268)) {
                 $tmp_top$0$lcssa = 3;
                 break;
                }
                $269 = ((($223)) + 4|0);
                $270 = HEAP32[$269>>2]|0;
                $271 = ($270|0)==(0);
                if (!($271)) {
                 $tmp_top$0$lcssa = 2;
                 break;
                }
                $272 = HEAP32[$223>>2]|0;
                $not$ = ($272|0)!=(0);
                $$ = $not$&1;
                $tmp_top$0$lcssa = $$;
               } else {
                $tmp_top$0$lcssa = 6;
               }
              } else {
               $tmp_top$0$lcssa = 7;
              }
             } else {
              $tmp_top$0$lcssa = 8;
             }
            } else {
             $tmp_top$0$lcssa = 9;
            }
           } else {
            $tmp_top$0$lcssa = 10;
           }
          } else {
           $tmp_top$0$lcssa = 11;
          }
         } else {
          $tmp_top$0$lcssa = 12;
         }
        } else {
         $tmp_top$0$lcssa = 13;
        }
       } else {
        $tmp_top$0$lcssa = 14;
       }
      } else {
       $tmp_top$0$lcssa = 15;
      }
     } else {
      $tmp_top$0$lcssa = 16;
     }
    } else {
     $tmp_top$0$lcssa = 17;
    }
   } while(0);
   HEAP32[$222>>2] = $tmp_top$0$lcssa;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (_BN_nnmod($r,$a,50140,$ctx)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _BN_GENCB_call($cb,$a,$b) {
 $cb = $cb|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cb|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = HEAP32[$cb>>2]|0;
   switch ($1|0) {
   case 1:  {
    break;
   }
   case 2:  {
    $7 = ((($cb)) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (FUNCTION_TABLE_iiii[$8 & 63]($a,$b,$cb)|0);
    $$0 = $9;
    break L1;
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $2 = ((($cb)) + 8|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 1;
   } else {
    $5 = ((($cb)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    FUNCTION_TABLE_viii[$3 & 31]($a,$b,$6);
    $$0 = 1;
   }
  }
 } while(0);
 return ($$0|0);
}
function _BN_generate_prime_ex($ret,$bits,$safe,$add,$rem,$cb) {
 $ret = $ret|0;
 $bits = $bits|0;
 $safe = $safe|0;
 $add = $add|0;
 $rem = $rem|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1$0 = 0, $delta$0$i = 0, $delta$0$i$lcssa = 0, $exitcond$i = 0, $found$015 = 0, $found$017 = 0, $i$01$i = 0, $i$01$i3 = 0, $i$027 = 0, $i$04$i = 0, $i$15$i = 0, $mods$i = 0, $not$$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4096|0;
 $mods$i = sp;
 $0 = ($bits|0)>(1299);
 if ($0) {
  $112 = 2;
 } else {
  $1 = ($bits|0)>(849);
  if ($1) {
   $112 = 3;
  } else {
   $2 = ($bits|0)>(649);
   if ($2) {
    $112 = 4;
   } else {
    $3 = ($bits|0)>(549);
    if ($3) {
     $112 = 5;
    } else {
     $4 = ($bits|0)>(449);
     if ($4) {
      $112 = 6;
     } else {
      $5 = ($bits|0)>(399);
      if ($5) {
       $112 = 7;
      } else {
       $6 = ($bits|0)>(349);
       if ($6) {
        $112 = 8;
       } else {
        $7 = ($bits|0)>(299);
        if ($7) {
         $112 = 9;
        } else {
         $8 = ($bits|0)>(249);
         if ($8) {
          $112 = 12;
         } else {
          $9 = ($bits|0)>(199);
          if ($9) {
           $112 = 15;
          } else {
           $10 = ($bits|0)>(149);
           $11 = $10 ? 18 : 27;
           $112 = $11;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $12 = (_BN_CTX_new()|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $found$015 = 0;
  STACKTOP = sp;return ($found$015|0);
 }
 _BN_CTX_start($12);
 $14 = (_BN_CTX_get($12)|0);
 $15 = ($14|0)==(0|0);
 L16: do {
  if ($15) {
   $found$017 = 0;
  } else {
   $16 = ($add|0)==(0|0);
   $17 = ($cb|0)==(0|0);
   $18 = ($safe|0)==(0);
   $19 = ((($cb)) + 8|0);
   $20 = ((($cb)) + 4|0);
   $21 = ((($cb)) + 8|0);
   $22 = ($rem|0)==(0|0);
   $23 = (($bits) + -1)|0;
   $c1$0 = 0;
   L18: while(1) {
    do {
     if ($16) {
      $24 = (_BN_rand($ret,$bits,1,1)|0);
      $25 = ($24|0)==(0);
      if ($25) {
       label = 23;
       break L18;
      } else {
       $i$04$i = 1;
      }
      L22: while(1) {
       $28 = (53752 + ($i$04$i<<1)|0);
       $29 = HEAP16[$28>>1]|0;
       $30 = $29&65535;
       $31 = (_BN_mod_word($ret,$30)|0);
       $32 = $31&65535;
       $33 = (($mods$i) + ($i$04$i<<1)|0);
       HEAP16[$33>>1] = $32;
       $34 = (($i$04$i) + 1)|0;
       $exitcond$i = ($34|0)==(2048);
       if ($exitcond$i) {
        $delta$0$i = 0;
       } else {
        $i$04$i = $34;
        continue;
       }
       while(1) {
        $i$15$i = 1;
        while(1) {
         $37 = (($mods$i) + ($i$15$i<<1)|0);
         $38 = HEAP16[$37>>1]|0;
         $39 = $38&65535;
         $40 = (($39) + ($delta$0$i))|0;
         $41 = (53752 + ($i$15$i<<1)|0);
         $42 = HEAP16[$41>>1]|0;
         $43 = $42&65535;
         $44 = (($40>>>0) % ($43>>>0))&-1;
         $45 = ($44>>>0)<(2);
         $36 = (($i$15$i) + 1)|0;
         if ($45) {
          break;
         }
         $35 = ($36|0)<(2048);
         if ($35) {
          $i$15$i = $36;
         } else {
          $delta$0$i$lcssa = $delta$0$i;
          break L22;
         }
        }
        $46 = (($delta$0$i) + 2)|0;
        $47 = ($46>>>0)>(4294949432);
        if ($47) {
         break;
        } else {
         $delta$0$i = $46;
        }
       }
       $26 = (_BN_rand($ret,$bits,1,1)|0);
       $27 = ($26|0)==(0);
       if ($27) {
        label = 23;
        break L18;
       } else {
        $i$04$i = 1;
       }
      }
      $48 = (_BN_add_word($ret,$delta$0$i$lcssa)|0);
      $not$$i = ($48|0)==(0);
      if ($not$$i) {
       $found$017 = 0;
       break L16;
      }
     } else {
      _BN_CTX_start($12);
      $49 = (_BN_CTX_get($12)|0);
      if ($18) {
       $84 = ($49|0)==(0|0);
       if ($84) {
        label = 55;
        break L18;
       }
       $85 = (_BN_rand($ret,$bits,0,1)|0);
       $86 = ($85|0)==(0);
       if ($86) {
        label = 55;
        break L18;
       }
       $87 = (_BN_div(0,$49,$ret,$add,$12)|0);
       $88 = ($87|0)==(0);
       if ($88) {
        label = 55;
        break L18;
       }
       $89 = (_BN_sub($ret,$ret,$49)|0);
       $90 = ($89|0)==(0);
       if ($90) {
        label = 55;
        break L18;
       }
       if ($22) {
        $91 = (_BN_add_word($ret,1)|0);
        $92 = ($91|0)==(0);
        if ($92) {
         label = 55;
         break L18;
        } else {
         $i$01$i3 = 1;
        }
       } else {
        $93 = (_BN_add($ret,$ret,$rem)|0);
        $94 = ($93|0)==(0);
        if ($94) {
         label = 55;
         break L18;
        } else {
         $i$01$i3 = 1;
        }
       }
       while(1) {
        $95 = (53752 + ($i$01$i3<<1)|0);
        $96 = HEAP16[$95>>1]|0;
        $97 = $96&65535;
        $98 = (_BN_mod_word($ret,$97)|0);
        $99 = ($98>>>0)<(2);
        if ($99) {
         $100 = (_BN_add($ret,$ret,$add)|0);
         $101 = ($100|0)==(0);
         if ($101) {
          label = 55;
          break L18;
         } else {
          $i$01$i3 = 1;
          continue;
         }
        } else {
         $102 = (($i$01$i3) + 1)|0;
         $103 = ($102|0)<(2048);
         if ($103) {
          $i$01$i3 = $102;
          continue;
         } else {
          break;
         }
        }
       }
       _BN_CTX_end($12);
       break;
      }
      $50 = (_BN_CTX_get($12)|0);
      $51 = (_BN_CTX_get($12)|0);
      $52 = ($51|0)==(0|0);
      if ($52) {
       label = 43;
       break L18;
      }
      $53 = (_BN_rshift1($51,$add)|0);
      $54 = ($53|0)==(0);
      if ($54) {
       label = 43;
       break L18;
      }
      $55 = (_BN_rand($50,$23,0,1)|0);
      $56 = ($55|0)==(0);
      if ($56) {
       label = 43;
       break L18;
      }
      $57 = (_BN_div(0,$49,$50,$51,$12)|0);
      $58 = ($57|0)==(0);
      if ($58) {
       label = 43;
       break L18;
      }
      $59 = (_BN_sub($50,$50,$49)|0);
      $60 = ($59|0)==(0);
      if ($60) {
       label = 43;
       break L18;
      }
      if ($22) {
       $61 = (_BN_add_word($50,1)|0);
       $62 = ($61|0)==(0);
       if ($62) {
        label = 43;
        break L18;
       }
      } else {
       $63 = (_BN_rshift1($49,$rem)|0);
       $64 = ($63|0)==(0);
       if ($64) {
        label = 43;
        break L18;
       }
       $65 = (_BN_add($50,$50,$49)|0);
       $66 = ($65|0)==(0);
       if ($66) {
        label = 43;
        break L18;
       }
      }
      $67 = (_BN_lshift1($ret,$50)|0);
      $68 = ($67|0)==(0);
      if ($68) {
       label = 43;
       break L18;
      }
      $69 = (_BN_add_word($ret,1)|0);
      $70 = ($69|0)==(0);
      if ($70) {
       label = 43;
       break L18;
      } else {
       $i$01$i = 1;
      }
      while(1) {
       $71 = (53752 + ($i$01$i<<1)|0);
       $72 = HEAP16[$71>>1]|0;
       $73 = $72&65535;
       $74 = (_BN_mod_word($ret,$73)|0);
       $75 = ($74|0)==(0);
       if (!($75)) {
        $76 = (_BN_mod_word($50,$73)|0);
        $77 = ($76|0)==(0);
        if (!($77)) {
         $82 = (($i$01$i) + 1)|0;
         $83 = ($82|0)<(2048);
         if ($83) {
          $i$01$i = $82;
          continue;
         } else {
          break;
         }
        }
       }
       $78 = (_BN_add($ret,$ret,$add)|0);
       $79 = ($78|0)==(0);
       if ($79) {
        label = 43;
        break L18;
       }
       $80 = (_BN_add($50,$50,$51)|0);
       $81 = ($80|0)==(0);
       if ($81) {
        label = 43;
        break L18;
       } else {
        $i$01$i = 1;
       }
      }
      _BN_CTX_end($12);
     }
    } while(0);
    $104 = (($c1$0) + 1)|0;
    L69: do {
     if (!($17)) {
      $105 = HEAP32[$cb>>2]|0;
      switch ($105|0) {
      case 1:  {
       break;
      }
      case 2:  {
       $109 = HEAP32[$21>>2]|0;
       $110 = (FUNCTION_TABLE_iiii[$109 & 63](0,$c1$0,$cb)|0);
       $111 = ($110|0)==(0);
       if ($111) {
        $found$017 = 0;
        break L16;
       } else {
        break L69;
       }
       break;
      }
      default: {
       $found$017 = 0;
       break L16;
      }
      }
      $106 = HEAP32[$19>>2]|0;
      $107 = ($106|0)==(0|0);
      if (!($107)) {
       $108 = HEAP32[$20>>2]|0;
       FUNCTION_TABLE_viii[$106 & 31](0,$c1$0,$108);
      }
     }
    } while(0);
    if ($18) {
     $113 = (_BN_is_prime_fasttest_ex($ret,$112,$12,0,$cb)|0);
     switch ($113|0) {
     case -1:  {
      $found$017 = 0;
      break L16;
      break;
     }
     case 0:  {
      $c1$0 = $104;
      continue L18;
      break;
     }
     default: {
      label = 72;
      break L18;
     }
     }
    }
    $114 = (_BN_rshift1($14,$ret)|0);
    $115 = ($114|0)==(0);
    if ($115) {
     $found$017 = 0;
     break L16;
    } else {
     $i$027 = 0;
    }
    while(1) {
     $116 = (_BN_is_prime_fasttest_ex($ret,1,$12,0,$cb)|0);
     switch ($116|0) {
     case -1:  {
      $found$017 = 0;
      break L16;
      break;
     }
     case 0:  {
      $c1$0 = $104;
      continue L18;
      break;
     }
     default: {
     }
     }
     $117 = (_BN_is_prime_fasttest_ex($14,1,$12,0,$cb)|0);
     switch ($117|0) {
     case -1:  {
      $found$017 = 0;
      break L16;
      break;
     }
     case 0:  {
      $c1$0 = $104;
      continue L18;
      break;
     }
     default: {
     }
     }
     L83: do {
      if (!($17)) {
       $118 = HEAP32[$cb>>2]|0;
       switch ($118|0) {
       case 1:  {
        break;
       }
       case 2:  {
        $122 = HEAP32[$21>>2]|0;
        $123 = (FUNCTION_TABLE_iiii[$122 & 63](2,$c1$0,$cb)|0);
        $124 = ($123|0)==(0);
        if ($124) {
         $found$017 = 0;
         break L16;
        } else {
         break L83;
        }
        break;
       }
       default: {
        $found$017 = 0;
        break L16;
       }
       }
       $119 = HEAP32[$19>>2]|0;
       $120 = ($119|0)==(0|0);
       if (!($120)) {
        $121 = HEAP32[$20>>2]|0;
        FUNCTION_TABLE_viii[$119 & 31](2,$c1$0,$121);
       }
      }
     } while(0);
     $125 = (($i$027) + 1)|0;
     $126 = ($125|0)<($112|0);
     if ($126) {
      $i$027 = $125;
     } else {
      $found$017 = 1;
      break L16;
     }
    }
   }
   if ((label|0) == 23) {
    $found$017 = 0;
    break;
   }
   else if ((label|0) == 43) {
    _BN_CTX_end($12);
    $found$017 = 0;
    break;
   }
   else if ((label|0) == 55) {
    _BN_CTX_end($12);
    $found$017 = 0;
    break;
   }
   else if ((label|0) == 72) {
    $found$017 = 1;
    break;
   }
  }
 } while(0);
 _BN_CTX_end($12);
 _BN_CTX_free($12);
 $found$015 = $found$017;
 STACKTOP = sp;return ($found$015|0);
}
function _BN_is_prime_fasttest_ex($a,$checks,$ctx_passed,$do_trial_division,$cb) {
 $a = $a|0;
 $checks = $checks|0;
 $ctx_passed = $ctx_passed|0;
 $do_trial_division = $do_trial_division|0;
 $cb = $cb|0;
 var $$0 = 0, $$01 = 0, $$01$i = 0, $$01$i$us = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A$0 = 0, $ctx$0 = 0, $i$031 = 0, $i$121 = 0, $i$121$us = 0, $k$0 = 0, $k$0$lcssa = 0, $mont$0 = 0, $mont$012 = 0, $mont$013 = 0, $or$cond = 0;
 var $ret$0 = 0, $ret$010 = 0, $ret$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_value_one()|0);
 $1 = (_BN_cmp($a,$0)|0);
 $2 = ($1|0)<(1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($checks|0)==(0);
 if ($3) {
  $4 = (_BN_num_bits($a)|0);
  $5 = ($4|0)>(1299);
  if ($5) {
   $$01 = 2;
  } else {
   $6 = (_BN_num_bits($a)|0);
   $7 = ($6|0)>(849);
   if ($7) {
    $$01 = 3;
   } else {
    $8 = (_BN_num_bits($a)|0);
    $9 = ($8|0)>(649);
    if ($9) {
     $$01 = 4;
    } else {
     $10 = (_BN_num_bits($a)|0);
     $11 = ($10|0)>(549);
     if ($11) {
      $$01 = 5;
     } else {
      $12 = (_BN_num_bits($a)|0);
      $13 = ($12|0)>(449);
      if ($13) {
       $$01 = 6;
      } else {
       $14 = (_BN_num_bits($a)|0);
       $15 = ($14|0)>(399);
       if ($15) {
        $$01 = 7;
       } else {
        $16 = (_BN_num_bits($a)|0);
        $17 = ($16|0)>(349);
        if ($17) {
         $$01 = 8;
        } else {
         $18 = (_BN_num_bits($a)|0);
         $19 = ($18|0)>(299);
         if ($19) {
          $$01 = 9;
         } else {
          $20 = (_BN_num_bits($a)|0);
          $21 = ($20|0)>(249);
          if ($21) {
           $$01 = 12;
          } else {
           $22 = (_BN_num_bits($a)|0);
           $23 = ($22|0)>(199);
           if ($23) {
            $$01 = 15;
           } else {
            $24 = (_BN_num_bits($a)|0);
            $25 = ($24|0)>(149);
            $26 = $25 ? 18 : 27;
            $$01 = $26;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } else {
  $$01 = $checks;
 }
 $27 = ((($a)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)>(0);
 do {
  if ($29) {
   $30 = HEAP32[$a>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & 1;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = ($28|0)==(1);
    $35 = ($31|0)==(2);
    $or$cond = $34 & $35;
    if (!($or$cond)) {
     $40 = 0;
     break;
    }
    $36 = ((($a)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0);
    $40 = $38;
    break;
   }
   $41 = ($do_trial_division|0)==(0);
   L23: do {
    if (!($41)) {
     $i$031 = 1;
     while(1) {
      $44 = (53752 + ($i$031<<1)|0);
      $45 = HEAP16[$44>>1]|0;
      $46 = $45&65535;
      $47 = (_BN_mod_word($a,$46)|0);
      $48 = ($47|0)==(0);
      $43 = (($i$031) + 1)|0;
      if ($48) {
       $$0 = 0;
       label = 79;
       break;
      }
      $42 = ($43|0)<(2048);
      if ($42) {
       $i$031 = $43;
      } else {
       break;
      }
     }
     if ((label|0) == 79) {
      return ($$0|0);
     }
     $49 = ($cb|0)==(0|0);
     if (!($49)) {
      $50 = HEAP32[$cb>>2]|0;
      switch ($50|0) {
      case 1:  {
       $51 = ((($cb)) + 8|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(0|0);
       if ($53) {
        break L23;
       }
       $54 = ((($cb)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       FUNCTION_TABLE_viii[$52 & 31](1,-1,$55);
       break L23;
       break;
      }
      case 2:  {
       $56 = ((($cb)) + 8|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (FUNCTION_TABLE_iiii[$57 & 63](1,-1,$cb)|0);
       $59 = ($58|0)==(0);
       if ($59) {
        $$0 = -1;
       } else {
        break L23;
       }
       return ($$0|0);
       break;
      }
      default: {
       $$0 = -1;
       return ($$0|0);
      }
      }
     }
    }
   } while(0);
   $60 = ($ctx_passed|0)==(0|0);
   if ($60) {
    $61 = (_BN_CTX_new()|0);
    $62 = ($61|0)==(0|0);
    if ($62) {
     $$0 = -1;
     return ($$0|0);
    } else {
     $ctx$0 = $61;
    }
   } else {
    $ctx$0 = $ctx_passed;
   }
   _BN_CTX_start($ctx$0);
   $63 = ((($a)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0);
   if ($65) {
    $A$0 = $a;
    label = 32;
   } else {
    $66 = (_BN_CTX_get($ctx$0)|0);
    $67 = ($66|0)==(0|0);
    if ($67) {
     $mont$012 = 0;$ret$010 = -1;
     label = 75;
    } else {
     (_BN_copy($66,$a)|0);
     $68 = ((($66)) + 12|0);
     HEAP32[$68>>2] = 0;
     $A$0 = $66;
     label = 32;
    }
   }
   if ((label|0) == 32) {
    $69 = (_BN_CTX_get($ctx$0)|0);
    $70 = (_BN_CTX_get($ctx$0)|0);
    $71 = (_BN_CTX_get($ctx$0)|0);
    $72 = ($71|0)==(0|0);
    if ($72) {
     $mont$012 = 0;$ret$010 = -1;
     label = 75;
    } else {
     $73 = (_BN_copy($69,$A$0)|0);
     $74 = ($73|0)==(0|0);
     if ($74) {
      $mont$012 = 0;$ret$010 = -1;
      label = 75;
     } else {
      $75 = (_BN_sub_word($69,1)|0);
      $76 = ($75|0)==(0);
      if ($76) {
       $mont$012 = 0;$ret$010 = -1;
       label = 75;
      } else {
       $77 = ((($69)) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==(0);
       if ($79) {
        $mont$012 = 0;$ret$010 = 0;
        label = 75;
       } else {
        $k$0 = 1;
        while(1) {
         $80 = (_BN_is_bit_set($69,$k$0)|0);
         $81 = ($80|0)==(0);
         $82 = (($k$0) + 1)|0;
         if ($81) {
          $k$0 = $82;
         } else {
          $k$0$lcssa = $k$0;
          break;
         }
        }
        $83 = (_BN_rshift($70,$69,$k$0$lcssa)|0);
        $84 = ($83|0)==(0);
        L53: do {
         if ($84) {
          $mont$0 = 0;$ret$0 = -1;
         } else {
          $85 = (_BN_MONT_CTX_new()|0);
          $86 = ($85|0)==(0|0);
          if ($86) {
           $mont$0 = 0;$ret$0 = -1;
          } else {
           $87 = (_BN_MONT_CTX_set($85,$A$0,$ctx$0)|0);
           $88 = ($87|0)==(0);
           if ($88) {
            $mont$0 = $85;$ret$0 = -1;
           } else {
            $89 = ($$01|0)>(0);
            if ($89) {
             $90 = ((($71)) + 4|0);
             $91 = ((($71)) + 12|0);
             $92 = ($cb|0)==(0|0);
             $93 = ((($cb)) + 8|0);
             $94 = ((($cb)) + 4|0);
             $95 = ((($cb)) + 8|0);
             if ($92) {
              $i$121$us = 0;
              while(1) {
               $96 = (_BN_pseudo_rand_range($71,$69)|0);
               $97 = ($96|0)==(0);
               if ($97) {
                $mont$0 = $85;$ret$0 = -1;
                break L53;
               }
               $98 = (_BN_add_word($71,1)|0);
               $99 = ($98|0)==(0);
               if ($99) {
                $mont$0 = $85;$ret$0 = -1;
                break L53;
               }
               $100 = (_BN_mod_exp_mont($71,$71,$70,$A$0,$ctx$0,$85)|0);
               $101 = ($100|0)==(0);
               if ($101) {
                $mont$0 = $85;$ret$0 = -1;
                break L53;
               }
               $102 = HEAP32[$90>>2]|0;
               $103 = ($102|0)==(1);
               do {
                if ($103) {
                 $104 = HEAP32[$71>>2]|0;
                 $105 = HEAP32[$104>>2]|0;
                 $106 = ($105|0)==(1);
                 if (!($106)) {
                  label = 48;
                  break;
                 }
                 $107 = HEAP32[$91>>2]|0;
                 $108 = ($107|0)==(0);
                 if (!($108)) {
                  label = 48;
                 }
                } else {
                 label = 48;
                }
               } while(0);
               do {
                if ((label|0) == 48) {
                 label = 0;
                 $109 = (_BN_cmp($71,$69)|0);
                 $110 = ($109|0)==(0);
                 if ($110) {
                  break;
                 } else {
                  $$01$i$us = $k$0$lcssa;
                 }
                 while(1) {
                  $111 = (($$01$i$us) + -1)|0;
                  $112 = ($111|0)==(0);
                  if ($112) {
                   $mont$0 = $85;$ret$0 = 0;
                   break L53;
                  }
                  $113 = (_BN_mod_mul($71,$71,$71,$A$0,$ctx$0)|0);
                  $114 = ($113|0)==(0);
                  if ($114) {
                   $mont$0 = $85;$ret$0 = -1;
                   break L53;
                  }
                  $115 = HEAP32[$90>>2]|0;
                  $116 = ($115|0)==(1);
                  do {
                   if ($116) {
                    $117 = HEAP32[$71>>2]|0;
                    $118 = HEAP32[$117>>2]|0;
                    $119 = ($118|0)==(1);
                    if (!($119)) {
                     break;
                    }
                    $120 = HEAP32[$91>>2]|0;
                    $121 = ($120|0)==(0);
                    if ($121) {
                     $mont$0 = $85;$ret$0 = 0;
                     break L53;
                    }
                   }
                  } while(0);
                  $122 = (_BN_cmp($71,$69)|0);
                  $123 = ($122|0)==(0);
                  if ($123) {
                   break;
                  } else {
                   $$01$i$us = $111;
                  }
                 }
                }
               } while(0);
               $124 = (($i$121$us) + 1)|0;
               $125 = ($124|0)<($$01|0);
               if ($125) {
                $i$121$us = $124;
               } else {
                $mont$0 = $85;$ret$0 = 1;
                break L53;
               }
              }
             } else {
              $i$121 = 0;
             }
             while(1) {
              $126 = (_BN_pseudo_rand_range($71,$69)|0);
              $127 = ($126|0)==(0);
              if ($127) {
               $mont$0 = $85;$ret$0 = -1;
               break L53;
              }
              $128 = (_BN_add_word($71,1)|0);
              $129 = ($128|0)==(0);
              if ($129) {
               $mont$0 = $85;$ret$0 = -1;
               break L53;
              }
              $130 = (_BN_mod_exp_mont($71,$71,$70,$A$0,$ctx$0,$85)|0);
              $131 = ($130|0)==(0);
              if ($131) {
               $mont$0 = $85;$ret$0 = -1;
               break L53;
              }
              $132 = HEAP32[$90>>2]|0;
              $133 = ($132|0)==(1);
              do {
               if ($133) {
                $134 = HEAP32[$71>>2]|0;
                $135 = HEAP32[$134>>2]|0;
                $136 = ($135|0)==(1);
                if (!($136)) {
                 label = 62;
                 break;
                }
                $137 = HEAP32[$91>>2]|0;
                $138 = ($137|0)==(0);
                if (!($138)) {
                 label = 62;
                }
               } else {
                label = 62;
               }
              } while(0);
              do {
               if ((label|0) == 62) {
                label = 0;
                $139 = (_BN_cmp($71,$69)|0);
                $140 = ($139|0)==(0);
                if ($140) {
                 break;
                } else {
                 $$01$i = $k$0$lcssa;
                }
                while(1) {
                 $141 = (($$01$i) + -1)|0;
                 $142 = ($141|0)==(0);
                 if ($142) {
                  $mont$0 = $85;$ret$0 = 0;
                  break L53;
                 }
                 $143 = (_BN_mod_mul($71,$71,$71,$A$0,$ctx$0)|0);
                 $144 = ($143|0)==(0);
                 if ($144) {
                  $mont$0 = $85;$ret$0 = -1;
                  break L53;
                 }
                 $145 = HEAP32[$90>>2]|0;
                 $146 = ($145|0)==(1);
                 do {
                  if ($146) {
                   $147 = HEAP32[$71>>2]|0;
                   $148 = HEAP32[$147>>2]|0;
                   $149 = ($148|0)==(1);
                   if (!($149)) {
                    break;
                   }
                   $150 = HEAP32[$91>>2]|0;
                   $151 = ($150|0)==(0);
                   if ($151) {
                    $mont$0 = $85;$ret$0 = 0;
                    break L53;
                   }
                  }
                 } while(0);
                 $152 = (_BN_cmp($71,$69)|0);
                 $153 = ($152|0)==(0);
                 if ($153) {
                  break;
                 } else {
                  $$01$i = $141;
                 }
                }
               }
              } while(0);
              $154 = HEAP32[$cb>>2]|0;
              L97: do {
               switch ($154|0) {
               case 1:  {
                $155 = HEAP32[$93>>2]|0;
                $156 = ($155|0)==(0|0);
                if ($156) {
                 break L97;
                }
                $157 = HEAP32[$94>>2]|0;
                FUNCTION_TABLE_viii[$155 & 31](1,$i$121,$157);
                break;
               }
               case 2:  {
                $158 = HEAP32[$95>>2]|0;
                $159 = (FUNCTION_TABLE_iiii[$158 & 63](1,$i$121,$cb)|0);
                $160 = ($159|0)==(0);
                if ($160) {
                 $mont$0 = $85;$ret$0 = -1;
                 break L53;
                }
                break;
               }
               default: {
                $mont$0 = $85;$ret$0 = -1;
                break L53;
               }
               }
              } while(0);
              $161 = (($i$121) + 1)|0;
              $162 = ($161|0)<($$01|0);
              if ($162) {
               $i$121 = $161;
              } else {
               $mont$0 = $85;$ret$0 = 1;
               break L53;
              }
             }
            } else {
             $mont$0 = $85;$ret$0 = 1;
            }
           }
          }
         }
        } while(0);
        $163 = ($ctx$0|0)==(0|0);
        if ($163) {
         $mont$013 = $mont$0;$ret$011 = $ret$0;
        } else {
         $mont$012 = $mont$0;$ret$010 = $ret$0;
         label = 75;
        }
       }
      }
     }
    }
   }
   if ((label|0) == 75) {
    _BN_CTX_end($ctx$0);
    if ($60) {
     _BN_CTX_free($ctx$0);
     $mont$013 = $mont$012;$ret$011 = $ret$010;
    } else {
     $mont$013 = $mont$012;$ret$011 = $ret$010;
    }
   }
   $164 = ($mont$013|0)==(0|0);
   if ($164) {
    $$0 = $ret$011;
    return ($$0|0);
   }
   _BN_MONT_CTX_free($mont$013);
   $$0 = $ret$011;
   return ($$0|0);
  } else {
   $40 = 0;
  }
 } while(0);
 $39 = $40&1;
 $$0 = $39;
 return ($$0|0);
}
function _BN_bn2dec($a) {
 $a = $a|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$0 = 0, $lp$0$lcssa = 0, $lp$08 = 0, $lp$17 = 0, $ok$0 = 0, $or$cond = 0, $or$cond3 = 0, $p$010 = 0, $p$011 = 0;
 var $p$1 = 0, $p$1$lcssa = 0, $p$26 = 0, $p$3 = 0, $p$3$lcssa = 0, $t$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_BN_num_bits($a)|0);
 $1 = ($0*3)|0;
 $2 = (($1|0) / 10)&-1;
 $3 = (($1|0) / 1000)&-1;
 $4 = (($3) + ($2))|0;
 $5 = (($4) + 2)|0;
 $6 = (($5|0) / 9)&-1;
 $7 = $6 << 2;
 $8 = (($7) + 4)|0;
 $9 = (_CRYPTO_malloc($8,89730,124)|0);
 $10 = (($4) + 5)|0;
 $11 = (_CRYPTO_malloc($10,89730,125)|0);
 $12 = ($11|0)==(0|0);
 $13 = ($9|0)==(0|0);
 $or$cond = $13 | $12;
 do {
  if ($or$cond) {
   _ERR_put_error(3,104,65,89730,127);
   $ok$0 = 0;$t$0 = 0;
  } else {
   $14 = (_BN_dup($a)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $ok$0 = 0;$t$0 = 0;
   } else {
    $16 = ((($14)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = ((($11)) + 1|0);
     HEAP8[$11>>0] = 48;
     HEAP8[$19>>0] = 0;
     $ok$0 = 1;$t$0 = $14;
     break;
    }
    $20 = ((($14)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0);
    if ($22) {
     $p$010 = $11;
     label = 8;
    } else {
     $23 = ((($11)) + 1|0);
     HEAP8[$11>>0] = 45;
     $$pre = HEAP32[$16>>2]|0;
     $24 = ($$pre|0)==(0);
     if ($24) {
      $lp$0$lcssa = $9;$p$011 = $23;
     } else {
      $p$010 = $23;
      label = 8;
     }
    }
    if ((label|0) == 8) {
     $lp$08 = $9;
     while(1) {
      $25 = (_BN_div_word($14,1000000000)|0);
      HEAP32[$lp$08>>2] = $25;
      $26 = ((($lp$08)) + 4|0);
      $27 = HEAP32[$16>>2]|0;
      $28 = ($27|0)==(0);
      if ($28) {
       $lp$0$lcssa = $26;$p$011 = $p$010;
       break;
      } else {
       $lp$08 = $26;
      }
     }
    }
    $29 = ((($lp$0$lcssa)) + -4|0);
    $30 = $p$011;
    $31 = $11;
    $32 = (($31) + ($10))|0;
    $33 = (($32) - ($30))|0;
    $34 = HEAP32[$29>>2]|0;
    HEAP32[$vararg_buffer>>2] = $34;
    (_BIO_snprintf($p$011,$33,89741,$vararg_buffer)|0);
    $p$1 = $p$011;
    while(1) {
     $35 = HEAP8[$p$1>>0]|0;
     $36 = ($35<<24>>24)==(0);
     $37 = ((($p$1)) + 1|0);
     if ($36) {
      $p$1$lcssa = $p$1;
      break;
     } else {
      $p$1 = $37;
     }
    }
    $38 = ($29|0)==($9|0);
    if ($38) {
     $ok$0 = 1;$t$0 = $14;
    } else {
     $lp$17 = $29;$p$26 = $p$1$lcssa;
     while(1) {
      $40 = ((($lp$17)) + -4|0);
      $41 = $p$26;
      $42 = (($32) - ($41))|0;
      $43 = HEAP32[$40>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $43;
      (_BIO_snprintf($p$26,$42,89744,$vararg_buffer1)|0);
      $p$3 = $p$26;
      while(1) {
       $44 = HEAP8[$p$3>>0]|0;
       $45 = ($44<<24>>24)==(0);
       $46 = ((($p$3)) + 1|0);
       if ($45) {
        $p$3$lcssa = $p$3;
        break;
       } else {
        $p$3 = $46;
       }
      }
      $39 = ($40|0)==($9|0);
      if ($39) {
       $ok$0 = 1;$t$0 = $14;
       break;
      } else {
       $lp$17 = $40;$p$26 = $p$3$lcssa;
      }
     }
    }
   }
  }
 } while(0);
 if (!($13)) {
  _CRYPTO_free($9);
 }
 $47 = ($t$0|0)==(0|0);
 if (!($47)) {
  _BN_free($t$0);
 }
 $48 = ($ok$0|0)==(0);
 $49 = ($11|0)!=(0|0);
 $or$cond3 = $49 & $48;
 if (!($or$cond3)) {
  $buf$0 = $11;
  STACKTOP = sp;return ($buf$0|0);
 }
 _CRYPTO_free($11);
 $buf$0 = 0;
 STACKTOP = sp;return ($buf$0|0);
}
function _BN_hex2bn($bn,$a) {
 $bn = $bn|0;
 $a = $a|0;
 var $$ = 0, $$0 = 0, $$06 = 0, $$lcssa = 0, $$off = 0, $$off7 = 0, $$off8 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $ftl$011 = 0, $h$015 = 0, $i$019 = 0, $i$019$lcssa = 0, $j$016 = 0, $k$0 = 0, $l$0 = 0;
 var $m$0 = 0, $neg$0 = 0, $ret$0 = 0, $ret$1 = 0, $tmp_top$0$lcssa = 0, $tmp_top$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP8[$a>>0]|0;
 switch ($1<<24>>24) {
 case 45:  {
  $2 = ((($a)) + 1|0);
  $$06 = $2;$neg$0 = 1;
  break;
 }
 case 0:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$06 = $a;$neg$0 = 0;
 }
 }
 $i$019 = 0;
 while(1) {
  $3 = (($$06) + ($i$019)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = (_isxdigit($5)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $i$019$lcssa = $i$019;
   label = 7;
   break;
  }
  $8 = (($i$019) + 1)|0;
  $9 = ($8|0)<(536870912);
  if ($9) {
   $i$019 = $8;
  } else {
   $ret$1 = 0;
   break;
  }
 }
 do {
  if ((label|0) == 7) {
   $10 = (($i$019$lcssa) + ($neg$0))|0;
   $11 = ($bn|0)==(0|0);
   if ($11) {
    $$0 = $10;
    return ($$0|0);
   }
   $12 = HEAP32[$bn>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $14 = (_BN_new()|0);
    $15 = ($14|0)==(0|0);
    if ($15) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $ret$0 = $14;
    }
   } else {
    (_BN_set_word($12,0)|0);
    $ret$0 = $12;
   }
   $16 = $i$019$lcssa << 2;
   $17 = ($16|0)>(2147483616);
   if ($17) {
    $ret$1 = $ret$0;
   } else {
    $18 = (($16) + 31)|0;
    $19 = (($18|0) / 32)&-1;
    $20 = ((($ret$0)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)>($21|0);
    if ($22) {
     $23 = (_bn_expand2($ret$0,$19)|0);
     $24 = ($23|0)==(0|0);
     if ($24) {
      $ret$1 = $ret$0;
      break;
     }
    }
    $25 = ($i$019$lcssa|0)>(0);
    if ($25) {
     $27 = ($i$019$lcssa|0)<(8);
     $$op = $i$019$lcssa ^ -1;
     $28 = $27 ? $$op : -9;
     $29 = (($i$019$lcssa) + ($28))|0;
     $30 = (($29) + 8)|0;
     $31 = $30 >>> 3;
     $32 = (($31) + 1)|0;
     $h$015 = 0;$j$016 = $i$019$lcssa;
     while(1) {
      $33 = ($j$016|0)<(8);
      $34 = $33 ? $j$016 : 8;
      $l$0 = 0;$m$0 = $34;
      while(1) {
       $35 = (($j$016) - ($m$0))|0;
       $36 = (($$06) + ($35)|0);
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $$off = (($37) + -48)<<24>>24;
       $39 = ($$off&255)<(10);
       do {
        if ($39) {
         $40 = (($38) + -48)|0;
         $k$0 = $40;
        } else {
         $$off7 = (($37) + -97)<<24>>24;
         $41 = ($$off7&255)<(6);
         if ($41) {
          $42 = (($38) + -87)|0;
          $k$0 = $42;
          break;
         } else {
          $$off8 = (($37) + -65)<<24>>24;
          $43 = ($$off8&255)<(6);
          $44 = (($38) + -55)|0;
          $$ = $43 ? $44 : 0;
          $k$0 = $$;
          break;
         }
        }
       } while(0);
       $45 = $l$0 << 4;
       $46 = $k$0 | $45;
       $47 = (($m$0) + -1)|0;
       $48 = ($m$0|0)<(2);
       if ($48) {
        $$lcssa = $46;
        break;
       } else {
        $l$0 = $46;$m$0 = $47;
       }
      }
      $49 = (($h$015) + 1)|0;
      $50 = HEAP32[$ret$0>>2]|0;
      $51 = (($50) + ($h$015<<2)|0);
      HEAP32[$51>>2] = $$lcssa;
      $52 = (($j$016) + -8)|0;
      $exitcond = ($49|0)==($32|0);
      if ($exitcond) {
       break;
      } else {
       $h$015 = $49;$j$016 = $52;
      }
     }
     $53 = ((($ret$0)) + 4|0);
     HEAP32[$53>>2] = $32;
     $54 = HEAP32[$ret$0>>2]|0;
     $55 = (($54) + ($31<<2)|0);
     $ftl$011 = $55;$tmp_top$012 = $32;
     while(1) {
      $56 = HEAP32[$ftl$011>>2]|0;
      $57 = ($56|0)==(0);
      if (!($57)) {
       $tmp_top$0$lcssa = $tmp_top$012;
       break;
      }
      $58 = ((($ftl$011)) + -4|0);
      $59 = (($tmp_top$012) + -1)|0;
      $60 = ($tmp_top$012|0)>(1);
      if ($60) {
       $ftl$011 = $58;$tmp_top$012 = $59;
      } else {
       $tmp_top$0$lcssa = $59;
       break;
      }
     }
     HEAP32[$53>>2] = $tmp_top$0$lcssa;
    } else {
     $26 = ((($ret$0)) + 4|0);
     HEAP32[$26>>2] = 0;
    }
    $61 = ((($ret$0)) + 12|0);
    HEAP32[$61>>2] = $neg$0;
    HEAP32[$bn>>2] = $ret$0;
    $$0 = $10;
    return ($$0|0);
   }
  }
 } while(0);
 $62 = HEAP32[$bn>>2]|0;
 $63 = ($62|0)==(0|0);
 if (!($63)) {
  $$0 = 0;
  return ($$0|0);
 }
 _BN_free($ret$1);
 $$0 = 0;
 return ($$0|0);
}
function _BN_dec2bn($bn,$a) {
 $bn = $bn|0;
 $a = $a|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ftl$04 = 0, $i$013 = 0, $i$013$lcssa = 0, $isdigit = 0;
 var $isdigittmp = 0, $j$0$be = 0, $j$010 = 0, $l$0$be = 0, $l$09 = 0, $neg$0 = 0, $ret$0 = 0, $ret$1 = 0, $tmp_top$0$lcssa = 0, $tmp_top$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP8[$a>>0]|0;
 switch ($1<<24>>24) {
 case 45:  {
  $2 = ((($a)) + 1|0);
  $$01 = $2;$neg$0 = 1;
  break;
 }
 case 0:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$01 = $a;$neg$0 = 0;
 }
 }
 $i$013 = 0;
 while(1) {
  $3 = (($$01) + ($i$013)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $isdigittmp = (($5) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if (!($isdigit)) {
   $i$013$lcssa = $i$013;
   label = 7;
   break;
  }
  $6 = (($i$013) + 1)|0;
  $7 = ($6|0)<(536870912);
  if ($7) {
   $i$013 = $6;
  } else {
   $ret$1 = 0;
   break;
  }
 }
 do {
  if ((label|0) == 7) {
   $8 = (($i$013$lcssa) + ($neg$0))|0;
   $9 = ($bn|0)==(0|0);
   if ($9) {
    $$0 = $8;
    return ($$0|0);
   }
   $10 = HEAP32[$bn>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = (_BN_new()|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $ret$0 = $12;
    }
   } else {
    (_BN_set_word($10,0)|0);
    $ret$0 = $10;
   }
   $14 = $i$013$lcssa << 2;
   $15 = ($14|0)>(2147483616);
   if ($15) {
    $ret$1 = $ret$0;
   } else {
    $16 = (($14) + 31)|0;
    $17 = (($16|0) / 32)&-1;
    $18 = ((($ret$0)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)>($19|0);
    if ($20) {
     $21 = (_bn_expand2($ret$0,$17)|0);
     $22 = ($21|0)==(0|0);
     if ($22) {
      $ret$1 = $ret$0;
      break;
     }
    }
    $23 = (($i$013$lcssa|0) % 9)&-1;
    $24 = HEAP8[$$01>>0]|0;
    $25 = ($24<<24>>24)==(0);
    if (!($25)) {
     $26 = ($23|0)==(0);
     $27 = (9 - ($23))|0;
     $$ = $26 ? 0 : $27;
     $$18 = $$01;$30 = $24;$j$010 = $$;$l$09 = 0;
     while(1) {
      $28 = ($l$09*10)|0;
      $29 = $30 << 24 >> 24;
      $31 = (($28) + -48)|0;
      $32 = (($31) + ($29))|0;
      $33 = ((($$18)) + 1|0);
      $34 = (($j$010) + 1)|0;
      $35 = ($34|0)==(9);
      if ($35) {
       (_BN_mul_word($ret$0,1000000000)|0);
       (_BN_add_word($ret$0,$32)|0);
       $j$0$be = 0;$l$0$be = 0;
      } else {
       $j$0$be = $34;$l$0$be = $32;
      }
      $36 = HEAP8[$33>>0]|0;
      $37 = ($36<<24>>24)==(0);
      if ($37) {
       break;
      } else {
       $$18 = $33;$30 = $36;$j$010 = $j$0$be;$l$09 = $l$0$be;
      }
     }
    }
    $38 = ((($ret$0)) + 12|0);
    HEAP32[$38>>2] = $neg$0;
    $39 = ((($ret$0)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)>(0);
    if ($41) {
     $42 = HEAP32[$ret$0>>2]|0;
     $43 = (($40) + -1)|0;
     $44 = (($42) + ($43<<2)|0);
     $ftl$04 = $44;$tmp_top$05 = $40;
     while(1) {
      $45 = HEAP32[$ftl$04>>2]|0;
      $46 = ($45|0)==(0);
      if (!($46)) {
       $tmp_top$0$lcssa = $tmp_top$05;
       break;
      }
      $47 = ((($ftl$04)) + -4|0);
      $48 = (($tmp_top$05) + -1)|0;
      $49 = ($tmp_top$05|0)>(1);
      if ($49) {
       $ftl$04 = $47;$tmp_top$05 = $48;
      } else {
       $tmp_top$0$lcssa = $48;
       break;
      }
     }
     HEAP32[$39>>2] = $tmp_top$0$lcssa;
    }
    HEAP32[$bn>>2] = $ret$0;
    $$0 = $8;
    return ($$0|0);
   }
  }
 } while(0);
 $50 = HEAP32[$bn>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $$0 = 0;
  return ($$0|0);
 }
 _BN_free($ret$1);
 $$0 = 0;
 return ($$0|0);
}
function _BN_asc2bn($bn,$a) {
 $bn = $bn|0;
 $a = $a|0;
 var $$0 = 0, $$a = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$a>>0]|0;
 $1 = ($0<<24>>24)==(45);
 $2 = ((($a)) + 1|0);
 $$a = $1 ? $2 : $a;
 $3 = HEAP8[$$a>>0]|0;
 $4 = ($3<<24>>24)==(48);
 L1: do {
  if ($4) {
   $5 = ((($$a)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   switch ($6<<24>>24) {
   case 120: case 88:  {
    break;
   }
   default: {
    label = 4;
    break L1;
   }
   }
   $7 = ((($$a)) + 2|0);
   $8 = (_BN_hex2bn($bn,$7)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  $10 = (_BN_dec2bn($bn,$$a)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $12 = HEAP8[$a>>0]|0;
 $13 = ($12<<24>>24)==(45);
 if (!($13)) {
  $$0 = 1;
  return ($$0|0);
 }
 $14 = HEAP32[$bn>>2]|0;
 $15 = ((($14)) + 12|0);
 HEAP32[$15>>2] = 1;
 $$0 = 1;
 return ($$0|0);
}
function _BN_rand($rnd,$bits,$top,$bottom) {
 $rnd = $rnd|0;
 $bits = $bits|0;
 $top = $top|0;
 $bottom = $bottom|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bnrand(0,$rnd,$bits,$top,$bottom)|0);
 return ($0|0);
}
function _BN_pseudo_rand($rnd,$bits,$top,$bottom) {
 $rnd = $rnd|0;
 $bits = $bits|0;
 $top = $top|0;
 $bottom = $bottom|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bnrand(1,$rnd,$bits,$top,$bottom)|0);
 return ($0|0);
}
function _BN_rand_range($r,$range) {
 $r = $r|0;
 $range = $range|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bn_rand_range(0,$r,$range)|0);
 return ($0|0);
}
function _BN_pseudo_rand_range($r,$range) {
 $r = $r|0;
 $range = $range|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bn_rand_range(1,$r,$range)|0);
 return ($0|0);
}
function _bnrand($pseudorand,$rnd,$bits,$top,$bottom) {
 $pseudorand = $pseudorand|0;
 $rnd = $rnd|0;
 $bits = $bits|0;
 $top = $top|0;
 $bottom = $bottom|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i$07 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $ret$05 = 0, $tim = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tim = sp;
 $c = sp + 4|0;
 $0 = ($bits|0)<(0);
 if (!($0)) {
  $1 = ($bits|0)==(1);
  $2 = ($top|0)>(0);
  $or$cond = $1 & $2;
  if (!($or$cond)) {
   $3 = ($bits|0)==(0);
   if ($3) {
    (_BN_set_word($rnd,0)|0);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $4 = (($bits) + 7)|0;
   $5 = (($4|0) / 8)&-1;
   $6 = (($bits) + -1)|0;
   $7 = (($6|0) % 8)&-1;
   $8 = (($7) + 1)|0;
   $9 = 255 << $8;
   $10 = (_CRYPTO_malloc($5,89749,138)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    _ERR_put_error(3,127,65,89749,140);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   (_time(($tim|0))|0);
   _RAND_add($tim,4,+0);
   $12 = ($pseudorand|0)==(0);
   L12: do {
    if ($12) {
     $15 = (_RAND_bytes($10,$5)|0);
     $16 = ($15|0)<(1);
     if ($16) {
      $ret$05 = 0;
     } else {
      label = 20;
     }
    } else {
     $13 = (_RAND_pseudo_bytes($10,$5)|0);
     $14 = ($13|0)==(-1);
     if ($14) {
      $ret$05 = 0;
     } else {
      $17 = ($pseudorand|0)==(2);
      if ($17) {
       $i$07 = 0;
       while(1) {
        $18 = (_RAND_pseudo_bytes($c,1)|0);
        $19 = ($18|0)<(0);
        if ($19) {
         $ret$05 = 0;
         break L12;
        }
        $20 = HEAP8[$c>>0]|0;
        $21 = ($20<<24>>24)<(0);
        $22 = ($i$07|0)>(0);
        $or$cond3 = $22 & $21;
        do {
         if ($or$cond3) {
          $23 = (($i$07) + -1)|0;
          $24 = (($10) + ($23)|0);
          $25 = HEAP8[$24>>0]|0;
          $26 = (($10) + ($i$07)|0);
          HEAP8[$26>>0] = $25;
         } else {
          $27 = ($20&255)<(42);
          if ($27) {
           $28 = (($10) + ($i$07)|0);
           HEAP8[$28>>0] = 0;
           break;
          }
          $29 = ($20&255)<(84);
          if ($29) {
           $30 = (($10) + ($i$07)|0);
           HEAP8[$30>>0] = -1;
          }
         }
        } while(0);
        $31 = (($i$07) + 1)|0;
        $32 = ($31|0)<($5|0);
        if ($32) {
         $i$07 = $31;
        } else {
         label = 20;
         break;
        }
       }
      } else {
       label = 20;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    $33 = ($top|0)>(-1);
    do {
     if ($33) {
      $34 = ($top|0)==(0);
      if ($34) {
       $47 = 1 << $7;
       $48 = HEAP8[$10>>0]|0;
       $49 = $48&255;
       $50 = $49 | $47;
       $51 = $50&255;
       HEAP8[$10>>0] = $51;
       $54 = $51;
       break;
      }
      $35 = ($7|0)==(0);
      if ($35) {
       HEAP8[$10>>0] = 1;
       $36 = ((($10)) + 1|0);
       $37 = HEAP8[$36>>0]|0;
       $38 = $37&255;
       $39 = $38 | 128;
       $40 = $39&255;
       HEAP8[$36>>0] = $40;
       $54 = 1;
       break;
      } else {
       $41 = (($7) + -1)|0;
       $42 = 3 << $41;
       $43 = HEAP8[$10>>0]|0;
       $44 = $43&255;
       $45 = $44 | $42;
       $46 = $45&255;
       HEAP8[$10>>0] = $46;
       $54 = $46;
       break;
      }
     } else {
      $$pre = HEAP8[$10>>0]|0;
      $54 = $$pre;
     }
    } while(0);
    $52 = $9 ^ 255;
    $53 = $54&255;
    $55 = $53 & $52;
    $56 = $55&255;
    HEAP8[$10>>0] = $56;
    $57 = ($bottom|0)==(0);
    if (!($57)) {
     $58 = (($5) + -1)|0;
     $59 = (($10) + ($58)|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60&255;
     $62 = $61 | 1;
     $63 = $62&255;
     HEAP8[$59>>0] = $63;
    }
    $64 = (_BN_bin2bn($10,$5,$rnd)|0);
    $not$ = ($64|0)!=(0|0);
    $$ = $not$&1;
    $ret$05 = $$;
   }
   _OPENSSL_cleanse($10,$5);
   _CRYPTO_free($10);
   $$0 = $ret$05;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(3,127,118,89749,125);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _bn_rand_range($pseudo,$r,$range) {
 $pseudo = $pseudo|0;
 $r = $r|0;
 $range = $range|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $count$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pseudo|0)!=(0);
 $1 = $0 ? 69 : 70;
 $2 = ((($range)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($range)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = (_BN_num_bits($range)|0);
   $9 = ($8|0)==(1);
   if ($9) {
    (_BN_set_word($r,0)|0);
    $$0 = 1;
    return ($$0|0);
   }
   $10 = (($8) + -2)|0;
   $11 = (_BN_is_bit_set($range,$10)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = (($8) + -3)|0;
    $14 = (_BN_is_bit_set($range,$13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = (($8) + 1)|0;
     $count$0 = 100;
     while(1) {
      $17 = (FUNCTION_TABLE_iiiii[$1 & 127]($r,$16,-1,0)|0);
      $18 = ($17|0)==(0);
      if ($18) {
       $$0 = 0;
       label = 21;
       break;
      }
      $19 = (_BN_cmp($r,$range)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $21 = (_BN_sub($r,$r,$range)|0);
       $22 = ($21|0)==(0);
       if ($22) {
        $$0 = 0;
        label = 21;
        break;
       }
       $23 = (_BN_cmp($r,$range)|0);
       $24 = ($23|0)>(-1);
       if ($24) {
        $25 = (_BN_sub($r,$r,$range)|0);
        $26 = ($25|0)==(0);
        if ($26) {
         $$0 = 0;
         label = 21;
         break;
        }
       }
      }
      $27 = (($count$0) + -1)|0;
      $28 = ($27|0)==(0);
      if ($28) {
       label = 15;
       break;
      }
      $29 = (_BN_cmp($r,$range)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $count$0 = $27;
      } else {
       $$0 = 1;
       label = 21;
       break;
      }
     }
     if ((label|0) == 15) {
      _ERR_put_error(3,122,113,89749,263);
      $$0 = 0;
      return ($$0|0);
     }
     else if ((label|0) == 21) {
      return ($$0|0);
     }
    } else {
     $count$1 = 100;
    }
   } else {
    $count$1 = 100;
   }
   while(1) {
    $31 = (FUNCTION_TABLE_iiiii[$1 & 127]($r,$8,-1,0)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $$0 = 0;
     label = 21;
     break;
    }
    $33 = (($count$1) + -1)|0;
    $34 = ($33|0)==(0);
    if ($34) {
     label = 19;
     break;
    }
    $35 = (_BN_cmp($r,$range)|0);
    $36 = ($35|0)>(-1);
    if ($36) {
     $count$1 = $33;
    } else {
     $$0 = 1;
     label = 21;
     break;
    }
   }
   if ((label|0) == 19) {
    _ERR_put_error(3,122,113,89749,276);
    $$0 = 0;
    return ($$0|0);
   }
   else if ((label|0) == 21) {
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(3,122,115,89749,230);
 $$0 = 0;
 return ($$0|0);
}
function _BN_RECP_CTX_init($recp) {
 $recp = $recp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_init($recp);
 $0 = ((($recp)) + 20|0);
 _BN_init($0);
 $1 = ((($recp)) + 40|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($recp)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($recp)) + 48|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _BN_RECP_CTX_free($recp) {
 $recp = $recp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($recp|0)==(0|0);
 if ($0) {
  return;
 }
 _BN_free($recp);
 $1 = ((($recp)) + 20|0);
 _BN_free($1);
 $2 = ((($recp)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 _CRYPTO_free($recp);
 return;
}
function _BN_RECP_CTX_set($recp,$d,$ctx) {
 $recp = $recp|0;
 $d = $d|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_copy($recp,$d)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($recp)) + 20|0);
 (_BN_set_word($2,0)|0);
 $3 = (_BN_num_bits($d)|0);
 $4 = ((($recp)) + 40|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($recp)) + 44|0);
 HEAP32[$5>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _BN_mod_mul_reciprocal($r,$x,$y,$recp,$ctx) {
 $r = $r|0;
 $x = $x|0;
 $y = $y|0;
 $recp = $recp|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ca$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($ctx);
 $0 = (_BN_CTX_get($ctx)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $ret$0 = 0;
  } else {
   $2 = ($y|0)==(0|0);
   do {
    if ($2) {
     $ca$0 = $x;
    } else {
     $3 = ($x|0)==($y|0);
     if ($3) {
      $4 = (_BN_sqr($0,$y,$ctx)|0);
      $5 = ($4|0)==(0);
      if ($5) {
       $ret$0 = 0;
       break L1;
      } else {
       $ca$0 = $0;
       break;
      }
     } else {
      $6 = (_BN_mul($0,$x,$y,$ctx)|0);
      $7 = ($6|0)==(0);
      if ($7) {
       $ret$0 = 0;
       break L1;
      } else {
       $ca$0 = $0;
       break;
      }
     }
    }
   } while(0);
   $8 = (_BN_div_recp(0,$r,$ca$0,$recp,$ctx)|0);
   $ret$0 = $8;
  }
 } while(0);
 _BN_CTX_end($ctx);
 return ($ret$0|0);
}
function _BN_div_recp($dv,$rem,$m,$recp,$ctx) {
 $dv = $dv|0;
 $rem = $rem|0;
 $m = $m|0;
 $recp = $recp|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$6 = 0, $$len$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $d$0 = 0, $j$0 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $r$0 = 0, $ret$0 = 0, $ret$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($ctx);
 $0 = (_BN_CTX_get($ctx)|0);
 $1 = (_BN_CTX_get($ctx)|0);
 $2 = ($dv|0)==(0|0);
 if ($2) {
  $3 = (_BN_CTX_get($ctx)|0);
  $d$0 = $3;
 } else {
  $d$0 = $dv;
 }
 $4 = ($rem|0)==(0|0);
 if ($4) {
  $5 = (_BN_CTX_get($ctx)|0);
  $r$0 = $5;
 } else {
  $r$0 = $rem;
 }
 $6 = ($0|0)==(0|0);
 $7 = ($1|0)==(0|0);
 $or$cond = $6 | $7;
 $8 = ($d$0|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 $9 = ($r$0|0)==(0|0);
 $or$cond5 = $or$cond3 | $9;
 L7: do {
  if ($or$cond5) {
   $ret$0 = 0;
  } else {
   $10 = (_BN_ucmp($m,$recp)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    (_BN_set_word($d$0,0)|0);
    $12 = (_BN_copy($r$0,$m)|0);
    _BN_CTX_end($ctx);
    $not$ = ($12|0)!=(0|0);
    $$ = $not$&1;
    $$0 = $$;
    return ($$0|0);
   }
   $13 = (_BN_num_bits($m)|0);
   $14 = ((($recp)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 << 1;
   $17 = ($16|0)>($13|0);
   $$6 = $17 ? $16 : $13;
   $18 = ((($recp)) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($$6|0)==($19|0);
   if ($20) {
    $29 = $$6;
   } else {
    $21 = ((($recp)) + 20|0);
    _BN_CTX_start($ctx);
    $22 = (_BN_CTX_get($ctx)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     $ret$0$i = -1;
    } else {
     $24 = (_BN_set_bit($22,$$6)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      $ret$0$i = -1;
     } else {
      $26 = (_BN_div($21,0,$22,$recp,$ctx)|0);
      $27 = ($26|0)==(0);
      $$len$i = $27 ? -1 : $$6;
      $ret$0$i = $$len$i;
     }
    }
    _BN_CTX_end($ctx);
    HEAP32[$18>>2] = $ret$0$i;
    $29 = $ret$0$i;
   }
   $28 = ($29|0)==(-1);
   if ($28) {
    $ret$0 = 0;
   } else {
    $30 = HEAP32[$14>>2]|0;
    $31 = (_BN_rshift($0,$m,$30)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $ret$0 = 0;
    } else {
     $33 = ((($recp)) + 20|0);
     $34 = (_BN_mul($1,$0,$33,$ctx)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $ret$0 = 0;
     } else {
      $36 = HEAP32[$14>>2]|0;
      $37 = (($$6) - ($36))|0;
      $38 = (_BN_rshift($d$0,$1,$37)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       $ret$0 = 0;
      } else {
       $40 = ((($d$0)) + 12|0);
       HEAP32[$40>>2] = 0;
       $41 = (_BN_mul($1,$recp,$d$0,$ctx)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        $ret$0 = 0;
       } else {
        $43 = (_BN_usub($r$0,$m,$1)|0);
        $44 = ($43|0)==(0);
        if ($44) {
         $ret$0 = 0;
        } else {
         $45 = ((($r$0)) + 12|0);
         HEAP32[$45>>2] = 0;
         $j$0 = 0;
         while(1) {
          $46 = (_BN_ucmp($r$0,$recp)|0);
          $47 = ($46|0)>(-1);
          if (!($47)) {
           break;
          }
          $48 = (($j$0) + 1)|0;
          $49 = ($j$0|0)>(2);
          if ($49) {
           label = 22;
           break;
          }
          $50 = (_BN_usub($r$0,$r$0,$recp)|0);
          $51 = ($50|0)==(0);
          if ($51) {
           $ret$0 = 0;
           break L7;
          }
          $52 = (_BN_add_word($d$0,1)|0);
          $53 = ($52|0)==(0);
          if ($53) {
           $ret$0 = 0;
           break L7;
          } else {
           $j$0 = $48;
          }
         }
         if ((label|0) == 22) {
          _ERR_put_error(3,130,101,89759,206);
          $ret$0 = 0;
          break;
         }
         $54 = ((($r$0)) + 4|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = ($55|0)==(0);
         $$pre = ((($m)) + 12|0);
         if ($56) {
          $58 = 0;
         } else {
          $57 = HEAP32[$$pre>>2]|0;
          $58 = $57;
         }
         HEAP32[$45>>2] = $58;
         $59 = HEAP32[$$pre>>2]|0;
         $60 = ((($recp)) + 12|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = $61 ^ $59;
         HEAP32[$40>>2] = $62;
         $ret$0 = 1;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($ctx);
 $$0 = $ret$0;
 return ($$0|0);
}
function _BN_lshift1($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$0 = 0, $$lcssa = 0, $$lobit = 0, $$lobit$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ap$02 = 0, $c$04 = 0, $i$05 = 0, $phitmp = 0, $rp$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==($a|0);
 if ($0) {
  $14 = ((($r)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($r)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)<($17|0);
  if (!($18)) {
   $19 = (($15) + 1)|0;
   $20 = (_bn_expand2($r,$19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 } else {
  $1 = ((($a)) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($r)) + 12|0);
  HEAP32[$3>>2] = $2;
  $4 = ((($a)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($r)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  do {
   if ($8) {
    $13 = $5;
   } else {
    $9 = (($5) + 1)|0;
    $10 = (_bn_expand2($r,$9)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $$pre = HEAP32[$4>>2]|0;
     $13 = $$pre;
     break;
    }
   }
  } while(0);
  $12 = ((($r)) + 4|0);
  HEAP32[$12>>2] = $13;
 }
 $22 = ((($a)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)>(0);
 if (!($24)) {
  $$0 = 1;
  return ($$0|0);
 }
 $25 = HEAP32[$r>>2]|0;
 $26 = HEAP32[$a>>2]|0;
 $ap$02 = $26;$c$04 = 0;$i$05 = 0;$rp$03 = $25;
 while(1) {
  $27 = ((($ap$02)) + 4|0);
  $28 = HEAP32[$ap$02>>2]|0;
  $29 = $28 << 1;
  $30 = $29 | $c$04;
  $31 = ((($rp$03)) + 4|0);
  HEAP32[$rp$03>>2] = $30;
  $$lobit = $28 >>> 31;
  $32 = (($i$05) + 1)|0;
  $33 = HEAP32[$22>>2]|0;
  $34 = ($32|0)<($33|0);
  if ($34) {
   $ap$02 = $27;$c$04 = $$lobit;$i$05 = $32;$rp$03 = $31;
  } else {
   $$lcssa = $31;$$lobit$lcssa = $$lobit;
   break;
  }
 }
 $phitmp = ($$lobit$lcssa|0)==(0);
 if ($phitmp) {
  $$0 = 1;
  return ($$0|0);
 }
 HEAP32[$$lcssa>>2] = 1;
 $35 = ((($r)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[$35>>2] = $37;
 $$0 = 1;
 return ($$0|0);
}
function _BN_rshift1($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$01 = 0, $c$01$in = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  (_BN_set_word($r,0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $3 = HEAP32[$a>>2]|0;
 $4 = (($1) + -1)|0;
 $5 = (($3) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1);
 $8 = $7&1;
 $9 = (($1) - ($8))|0;
 $10 = ($a|0)==($r|0);
 if ($10) {
  $21 = $6;
 } else {
  $11 = ((($r)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)>($12|0);
  if ($13) {
   $14 = (_bn_expand2($r,$9)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $16 = ((($a)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($r)) + 12|0);
  HEAP32[$18>>2] = $17;
  $$pre = HEAP32[$5>>2]|0;
  $21 = $$pre;
 }
 $19 = HEAP32[$r>>2]|0;
 $20 = $21 >>> 1;
 $22 = ($20|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($4<<2)|0);
  HEAP32[$23>>2] = $20;
 }
 $24 = ($1|0)>(1);
 if ($24) {
  $c$01$in = $21;$i$02 = $4;
  while(1) {
   $c$01 = $c$01$in << 31;
   $25 = (($i$02) + -1)|0;
   $26 = (($3) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 >>> 1;
   $29 = $28 | $c$01;
   $30 = (($19) + ($25<<2)|0);
   HEAP32[$30>>2] = $29;
   $31 = ($i$02|0)>(1);
   if ($31) {
    $c$01$in = $27;$i$02 = $25;
   } else {
    break;
   }
  }
 }
 $32 = ((($r)) + 4|0);
 HEAP32[$32>>2] = $9;
 $$0 = 1;
 return ($$0|0);
}
function _BN_lshift($r,$a,$n) {
 $r = $r|0;
 $a = $a|0;
 $n = $n|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ftl$03 = 0, $i$07 = 0;
 var $i$19 = 0, $tmp_top$0$lcssa = 0, $tmp_top$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  _ERR_put_error(3,145,119,89769,141);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($a)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($r)) + 12|0);
 HEAP32[$3>>2] = $2;
 $4 = (($n|0) / 32)&-1;
 $5 = ((($a)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 $8 = ((($r)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)<($9|0);
 do {
  if ($10) {
   $19 = $6;
  } else {
   $11 = (($7) + 1)|0;
   $12 = (_bn_expand2($r,$11)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$pre = HEAP32[$5>>2]|0;
    $19 = $$pre;
    break;
   }
  }
 } while(0);
 $14 = (($n|0) % 32)&-1;
 $15 = (32 - ($14))|0;
 $16 = HEAP32[$a>>2]|0;
 $17 = HEAP32[$r>>2]|0;
 $18 = (($19) + ($4))|0;
 $20 = (($17) + ($18<<2)|0);
 HEAP32[$20>>2] = 0;
 $21 = ($14|0)==(0);
 $22 = HEAP32[$5>>2]|0;
 $23 = (($22) + -1)|0;
 $24 = ($22|0)>(0);
 if ($21) {
  if ($24) {
   $i$07 = $23;
   while(1) {
    $25 = (($16) + ($i$07<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($i$07) + ($4))|0;
    $28 = (($17) + ($27<<2)|0);
    HEAP32[$28>>2] = $26;
    $29 = (($i$07) + -1)|0;
    $30 = ($i$07|0)>(0);
    if ($30) {
     $i$07 = $29;
    } else {
     break;
    }
   }
  }
 } else {
  if ($24) {
   $i$19 = $23;
   while(1) {
    $31 = (($16) + ($i$19<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 >>> $15;
    $34 = (($i$19) + ($4))|0;
    $35 = (($34) + 1)|0;
    $36 = (($17) + ($35<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37 | $33;
    HEAP32[$36>>2] = $38;
    $39 = $32 << $14;
    $40 = (($17) + ($34<<2)|0);
    HEAP32[$40>>2] = $39;
    $41 = (($i$19) + -1)|0;
    $42 = ($i$19|0)>(0);
    if ($42) {
     $i$19 = $41;
    } else {
     break;
    }
   }
  }
 }
 $43 = $4 << 2;
 _memset(($17|0),0,($43|0))|0;
 $44 = HEAP32[$5>>2]|0;
 $45 = (($44) + ($4))|0;
 $46 = (($45) + 1)|0;
 $47 = ((($r)) + 4|0);
 HEAP32[$47>>2] = $46;
 $48 = ($45|0)>(-1);
 if (!($48)) {
  $$0 = 1;
  return ($$0|0);
 }
 $49 = HEAP32[$r>>2]|0;
 $50 = (($49) + ($45<<2)|0);
 $ftl$03 = $50;$tmp_top$04 = $46;
 while(1) {
  $51 = HEAP32[$ftl$03>>2]|0;
  $52 = ($51|0)==(0);
  if (!($52)) {
   $tmp_top$0$lcssa = $tmp_top$04;
   break;
  }
  $53 = ((($ftl$03)) + -4|0);
  $54 = (($tmp_top$04) + -1)|0;
  $55 = ($tmp_top$04|0)>(1);
  if ($55) {
   $ftl$03 = $53;$tmp_top$04 = $54;
  } else {
   $tmp_top$0$lcssa = $54;
   break;
  }
 }
 HEAP32[$47>>2] = $tmp_top$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _BN_rshift($r,$a,$n) {
 $r = $r|0;
 $a = $a|0;
 $n = $n|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa15 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$03 = 0, $f$16 = 0, $i$01 = 0, $i$1 = 0, $i$14 = 0, $i$17 = 0;
 var $or$cond = 0, $scevgep = 0, $t$02 = 0, $t$1$lcssa = 0, $t$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  _ERR_put_error(3,146,119,89769,183);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($n|0) / 32)&-1;
 $2 = (($n|0) % 32)&-1;
 $3 = (32 - ($2))|0;
 $4 = ((($a)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($1|0)>=($5|0);
 $7 = ($5|0)==(0);
 $or$cond = $6 | $7;
 if ($or$cond) {
  (_BN_set_word($r,0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $8 = (_BN_num_bits($a)|0);
 $9 = (31 - ($n))|0;
 $10 = (($9) + ($8))|0;
 $11 = (($10|0) / 32)&-1;
 $12 = ($r|0)==($a|0);
 if ($12) {
  $21 = ($n|0)==(0);
  if ($21) {
   $$0 = 1;
   return ($$0|0);
  }
 } else {
  $13 = ((($a)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($r)) + 12|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($r)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($11|0)>($17|0);
  if ($18) {
   $19 = (_bn_expand2($r,$11)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 $22 = HEAP32[$a>>2]|0;
 $23 = (($22) + ($1<<2)|0);
 $24 = HEAP32[$r>>2]|0;
 $25 = HEAP32[$4>>2]|0;
 $26 = (($25) - ($1))|0;
 $27 = ((($r)) + 4|0);
 HEAP32[$27>>2] = $11;
 $28 = ($2|0)==(0);
 if ($28) {
  $29 = ($25|0)==($1|0);
  if ($29) {
   $$0 = 1;
   return ($$0|0);
  } else {
   $f$03 = $23;$i$01 = $26;$t$02 = $24;
  }
  while(1) {
   $30 = ((($f$03)) + 4|0);
   $31 = HEAP32[$f$03>>2]|0;
   $32 = ((($t$02)) + 4|0);
   HEAP32[$t$02>>2] = $31;
   $33 = (($i$01) + -1)|0;
   $34 = ($33|0)==(0);
   if ($34) {
    $$0 = 1;
    break;
   } else {
    $f$03 = $30;$i$01 = $33;$t$02 = $32;
   }
  }
  return ($$0|0);
 }
 $35 = HEAP32[$23>>2]|0;
 $i$14 = (($26) + -1)|0;
 $36 = ($i$14|0)==(0);
 $37 = $35 >>> $2;
 if ($36) {
  $$lcssa = $37;$t$1$lcssa = $24;
 } else {
  $$sum = (($1) + 1)|0;
  $38 = (($22) + ($$sum<<2)|0);
  $39 = (($25) + -1)|0;
  $40 = (($39) - ($1))|0;
  $45 = $37;$f$16 = $38;$i$17 = $i$14;$t$15 = $24;
  while(1) {
   $41 = ((($f$16)) + 4|0);
   $42 = HEAP32[$f$16>>2]|0;
   $43 = $42 << $3;
   $44 = $43 | $45;
   $46 = ((($t$15)) + 4|0);
   HEAP32[$t$15>>2] = $44;
   $i$1 = (($i$17) + -1)|0;
   $47 = ($i$1|0)==(0);
   $48 = $42 >>> $2;
   if ($47) {
    $$lcssa15 = $48;
    break;
   } else {
    $45 = $48;$f$16 = $41;$i$17 = $i$1;$t$15 = $46;
   }
  }
  $scevgep = (($24) + ($40<<2)|0);
  $$lcssa = $$lcssa15;$t$1$lcssa = $scevgep;
 }
 $49 = ($$lcssa|0)==(0);
 if ($49) {
  $$0 = 1;
  return ($$0|0);
 }
 HEAP32[$t$1$lcssa>>2] = $$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _BN_sqr($r,$a,$ctx) {
 $r = $r|0;
 $a = $a|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0;
 var $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $t = sp;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(1);
 if ($2) {
  $3 = ((($r)) + 4|0);
  HEAP32[$3>>2] = 0;
  $4 = ((($r)) + 12|0);
  HEAP32[$4>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _BN_CTX_start($ctx);
 $5 = ($a|0)==($r|0);
 if ($5) {
  $6 = (_BN_CTX_get($ctx)|0);
  $9 = $6;
 } else {
  $9 = $r;
 }
 $7 = (_BN_CTX_get($ctx)|0);
 $8 = ($9|0)!=(0|0);
 $10 = ($7|0)!=(0|0);
 $or$cond = $8 & $10;
 L8: do {
  if ($or$cond) {
   $11 = $1 << 1;
   $12 = ((($9)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)>($13|0);
   if ($14) {
    $15 = (_bn_expand2($9,$11)|0);
    $16 = ($15|0)==(0|0);
    if ($16) {
     $ret$0 = 0;
     break;
    }
   }
   L13: do {
    switch ($1|0) {
    case 4:  {
     $17 = HEAP32[$9>>2]|0;
     $18 = HEAP32[$a>>2]|0;
     _bn_sqr_comba4($17,$18);
     $$pre$phiZ2D = $a;
     break;
    }
    case 8:  {
     $19 = HEAP32[$9>>2]|0;
     $20 = HEAP32[$a>>2]|0;
     _bn_sqr_comba8($19,$20);
     $$pre$phiZ2D = $a;
     break;
    }
    default: {
     $21 = ($1|0)<(16);
     if ($21) {
      $22 = HEAP32[$9>>2]|0;
      $23 = HEAP32[$a>>2]|0;
      _bn_sqr_normal($22,$23,$1,$t);
      $$pre$phiZ2D = $a;
      break L13;
     }
     $24 = (_BN_num_bits_word($1)|0);
     $25 = (($24) + -1)|0;
     $26 = 1 << $25;
     $27 = ($1|0)==($26|0);
     if ($27) {
      $28 = $1 << 2;
      $29 = ((($7)) + 8|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ($28|0)>($30|0);
      if ($31) {
       $32 = (_bn_expand2($7,$28)|0);
       $33 = ($32|0)==(0|0);
       if ($33) {
        $ret$0 = 0;
        break L8;
       }
      }
      $34 = HEAP32[$9>>2]|0;
      $35 = HEAP32[$a>>2]|0;
      $36 = HEAP32[$7>>2]|0;
      _bn_sqr_recursive($34,$35,$1,$36);
      $$pre$phiZ2D = $a;
      break L13;
     } else {
      $37 = ((($7)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($11|0)>($38|0);
      if ($39) {
       $40 = (_bn_expand2($7,$11)|0);
       $41 = ($40|0)==(0|0);
       if ($41) {
        $ret$0 = 0;
        break L8;
       }
      }
      $42 = HEAP32[$9>>2]|0;
      $43 = HEAP32[$a>>2]|0;
      $44 = HEAP32[$7>>2]|0;
      _bn_sqr_normal($42,$43,$1,$44);
      $$pre$phiZ2D = $a;
      break L13;
     }
    }
    }
   } while(0);
   $45 = ((($9)) + 12|0);
   HEAP32[$45>>2] = 0;
   $46 = (($1) + -1)|0;
   $47 = HEAP32[$$pre$phiZ2D>>2]|0;
   $48 = (($47) + ($46<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 & 65535;
   $51 = ($49|0)==($50|0);
   $52 = $51 << 31 >> 31;
   $$ = (($11) + ($52))|0;
   $53 = ((($9)) + 4|0);
   HEAP32[$53>>2] = $$;
   $54 = ($9|0)==($r|0);
   if ($54) {
    $ret$0 = 1;
   } else {
    (_BN_copy($r,$9)|0);
    $ret$0 = 1;
   }
  } else {
   $ret$0 = 0;
  }
 } while(0);
 _BN_CTX_end($ctx);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _bn_sqr_normal($r,$a,$n,$tmp) {
 $r = $r|0;
 $a = $a|0;
 $n = $n|0;
 $tmp = $tmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ap$13 = 0, $i$02 = 0, $j$01 = 0, $rp$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 1;
 $1 = (($0) + -1)|0;
 $2 = (($r) + ($1<<2)|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$r>>2] = 0;
 $3 = (($n) + -1)|0;
 $4 = ($n|0)>(1);
 if ($4) {
  $5 = ((($r)) + 4|0);
  $6 = ((($a)) + 4|0);
  $7 = HEAP32[$a>>2]|0;
  $8 = (_bn_mul_words($5,$6,$3,$7)|0);
  $9 = (($r) + ($n<<2)|0);
  HEAP32[$9>>2] = $8;
  $10 = ($n|0)>(2);
  if ($10) {
   $11 = ((($r)) + 12|0);
   $12 = (($n) + -2)|0;
   $ap$13 = $6;$i$02 = $12;$j$01 = $3;$rp$14 = $11;
   while(1) {
    $13 = (($j$01) + -1)|0;
    $14 = ((($ap$13)) + 4|0);
    $15 = HEAP32[$ap$13>>2]|0;
    $16 = (_bn_mul_add_words($rp$14,$14,$13,$15)|0);
    $17 = (($rp$14) + ($13<<2)|0);
    HEAP32[$17>>2] = $16;
    $18 = ((($rp$14)) + 8|0);
    $19 = (($i$02) + -1)|0;
    $20 = ($i$02|0)>(1);
    if ($20) {
     $ap$13 = $14;$i$02 = $19;$j$01 = $13;$rp$14 = $18;
    } else {
     break;
    }
   }
  }
 }
 (_bn_add_words($r,$r,$r,$0)|0);
 _bn_sqr_words($tmp,$a,$n);
 (_bn_add_words($r,$r,$tmp,$0)|0);
 return;
}
function _bn_sqr_recursive($r,$a,$n2,$t) {
 $r = $r|0;
 $a = $a|0;
 $n2 = $n2|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n2|0) / 2)&-1;
 switch ($n2|0) {
 case 4:  {
  _bn_sqr_comba4($r,$a);
  return;
  break;
 }
 case 8:  {
  _bn_sqr_comba8($r,$a);
  return;
  break;
 }
 default: {
  $1 = ($n2|0)<(16);
  if ($1) {
   _bn_sqr_normal($r,$a,$n2,$t);
   return;
  }
  $2 = (($a) + ($0<<2)|0);
  $3 = (_bn_cmp_words($a,$2,$0)|0);
  $4 = ($3|0)>(0);
  do {
   if ($4) {
    (_bn_sub_words($t,$a,$2,$0)|0);
    label = 10;
   } else {
    $5 = ($3|0)<(0);
    if ($5) {
     (_bn_sub_words($t,$2,$a,$0)|0);
     label = 10;
     break;
    } else {
     $9 = $n2 << 1;
     $10 = (($t) + ($9<<2)|0);
     $11 = (($t) + ($n2<<2)|0);
     $12 = $n2 << 2;
     _memset(($11|0),0,($12|0))|0;
     $13 = $10;$16 = $11;
     break;
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $6 = $n2 << 1;
   $7 = (($t) + ($6<<2)|0);
   $8 = (($t) + ($n2<<2)|0);
   _bn_sqr_recursive($8,$t,$0,$7);
   $13 = $7;$16 = $8;
  }
  _bn_sqr_recursive($r,$a,$0,$13);
  $14 = (($r) + ($n2<<2)|0);
  _bn_sqr_recursive($14,$2,$0,$13);
  $15 = (_bn_add_words($t,$r,$14,$n2)|0);
  $17 = (_bn_sub_words($16,$t,$16,$n2)|0);
  $18 = (($15) - ($17))|0;
  $19 = (($r) + ($0<<2)|0);
  $20 = (_bn_add_words($19,$19,$16,$n2)|0);
  $21 = (($18) + ($20))|0;
  $22 = ($21|0)==(0);
  if ($22) {
   return;
  }
  $23 = (($0) + ($n2))|0;
  $24 = (($r) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($21))|0;
  HEAP32[$24>>2] = $26;
  $27 = ($26>>>0)<($21>>>0);
  if ($27) {
   $p$0 = $24;
  } else {
   return;
  }
  while(1) {
   $28 = ((($p$0)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$28>>2] = $30;
   $31 = ($30|0)==(0);
   if ($31) {
    $p$0 = $28;
   } else {
    break;
   }
  }
  return;
 }
 }
}
function _BN_mod_sqrt($in,$a,$p,$ctx) {
 $in = $in|0;
 $a = $a|0;
 $p = $p|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $e$0 = 0, $e$0$lcssa = 0, $e$1 = 0, $i$0 = 0, $i$1 = 0, $i$1$lcssa = 0, $j$0 = 0, $j$0$in = 0, $or$cond = 0, $or$cond3 = 0, $or$cond30 = 0, $ret$05 = 0;
 var $ret$17 = 0, $ret$29 = 0, $ret$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 L1: do {
  if ($2) {
   $3 = HEAP32[$p>>2]|0;
   $4 = HEAP32[$3>>2]|0;
   $5 = $4 & 1;
   $6 = ($5|0)==(0);
   L3: do {
    if ($6) {
     label = 4;
    } else {
     $7 = ($1|0)==(1);
     $8 = ($4|0)==(1);
     $or$cond = $7 & $8;
     if ($or$cond) {
      label = 4;
     } else {
      $18 = ((($a)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      switch ($19|0) {
      case 0:  {
       label = 14;
       break;
      }
      case 1:  {
       $20 = HEAP32[$a>>2]|0;
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)==(1);
       if ($22) {
        $23 = ((($a)) + 12|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = ($24|0)==(0);
        if ($25) {
         label = 14;
        }
       }
       break;
      }
      default: {
      }
      }
      if ((label|0) == 14) {
       $26 = ($in|0)==(0|0);
       if ($26) {
        $27 = (_BN_new()|0);
        $28 = ($27|0)==(0|0);
        if ($28) {
         $ret$4 = 0;
         break;
        }
        $$pre = HEAP32[$18>>2]|0;
        $30 = $$pre;$ret$17 = $27;
       } else {
        $30 = $19;$ret$17 = $in;
       }
       $29 = ($30|0)==(1);
       if ($29) {
        $31 = HEAP32[$a>>2]|0;
        $32 = HEAP32[$31>>2]|0;
        $33 = ($32|0)==(1);
        if ($33) {
         $34 = ((($a)) + 12|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = ($35|0)==(0);
         $38 = $36;
        } else {
         $38 = 0;
        }
       } else {
        $38 = 0;
       }
       $37 = $38&1;
       $39 = (_BN_set_word($ret$17,$37)|0);
       $40 = ($39|0)==(0);
       if (!($40)) {
        $$0 = $ret$17;
        return ($$0|0);
       }
       $41 = ($ret$17|0)==($in|0);
       if ($41) {
        $$0 = 0;
        return ($$0|0);
       }
       _BN_free($ret$17);
       $$0 = 0;
       return ($$0|0);
      }
      _BN_CTX_start($ctx);
      $42 = (_BN_CTX_get($ctx)|0);
      $43 = (_BN_CTX_get($ctx)|0);
      $44 = (_BN_CTX_get($ctx)|0);
      $45 = (_BN_CTX_get($ctx)|0);
      $46 = (_BN_CTX_get($ctx)|0);
      $47 = (_BN_CTX_get($ctx)|0);
      $48 = ($47|0)==(0|0);
      if ($48) {
       $ret$4 = 0;
      } else {
       $49 = ($in|0)==(0|0);
       if ($49) {
        $50 = (_BN_new()|0);
        $51 = ($50|0)==(0|0);
        if ($51) {
         $ret$4 = 0;
         break;
        } else {
         $ret$29 = $50;
        }
       } else {
        $ret$29 = $in;
       }
       $52 = (_BN_nnmod($42,$a,$p,$ctx)|0);
       $53 = ($52|0)==(0);
       L31: do {
        if (!($53)) {
         $e$0 = 1;
         while(1) {
          $54 = (_BN_is_bit_set($p,$e$0)|0);
          $55 = ($54|0)==(0);
          $56 = (($e$0) + 1)|0;
          if ($55) {
           $e$0 = $56;
          } else {
           $e$0$lcssa = $e$0;
           break;
          }
         }
         L35: do {
          switch ($e$0$lcssa|0) {
          case 1:  {
           $57 = (_BN_rshift($44,$p,2)|0);
           $58 = ($57|0)==(0);
           if ($58) {
            break L31;
           }
           $59 = ((($44)) + 12|0);
           HEAP32[$59>>2] = 0;
           $60 = (_BN_add_word($44,1)|0);
           $61 = ($60|0)==(0);
           if ($61) {
            break L31;
           }
           $62 = (_BN_mod_exp($ret$29,$42,$44,$p,$ctx)|0);
           $63 = ($62|0)==(0);
           if ($63) {
            break L31;
           }
           break;
          }
          case 2:  {
           $64 = (_BN_mod_lshift1_quick($45,$42,$p)|0);
           $65 = ($64|0)==(0);
           if ($65) {
            break L31;
           }
           $66 = (_BN_rshift($44,$p,3)|0);
           $67 = ($66|0)==(0);
           if ($67) {
            break L31;
           }
           $68 = ((($44)) + 12|0);
           HEAP32[$68>>2] = 0;
           $69 = (_BN_mod_exp($43,$45,$44,$p,$ctx)|0);
           $70 = ($69|0)==(0);
           if ($70) {
            break L31;
           }
           $71 = (_BN_mod_sqr($47,$43,$p,$ctx)|0);
           $72 = ($71|0)==(0);
           if ($72) {
            break L31;
           }
           $73 = (_BN_mod_mul($45,$45,$47,$p,$ctx)|0);
           $74 = ($73|0)==(0);
           if ($74) {
            break L31;
           }
           $75 = (_BN_sub_word($45,1)|0);
           $76 = ($75|0)==(0);
           if ($76) {
            break L31;
           }
           $77 = (_BN_mod_mul($46,$42,$43,$p,$ctx)|0);
           $78 = ($77|0)==(0);
           if ($78) {
            break L31;
           }
           $79 = (_BN_mod_mul($46,$46,$45,$p,$ctx)|0);
           $80 = ($79|0)==(0);
           if ($80) {
            break L31;
           }
           $81 = (_BN_copy($ret$29,$46)|0);
           $82 = ($81|0)==(0|0);
           if ($82) {
            break L31;
           }
           break;
          }
          default: {
           $83 = (_BN_copy($44,$p)|0);
           $84 = ($83|0)==(0|0);
           if ($84) {
            break L31;
           }
           $85 = ((($44)) + 12|0);
           HEAP32[$85>>2] = 0;
           $86 = ((($p)) + 12|0);
           $87 = ((($47)) + 4|0);
           $i$0 = 2;
           L38: while(1) {
            $88 = ($i$0|0)<(22);
            if ($88) {
             $89 = (_BN_set_word($47,$i$0)|0);
             $90 = ($89|0)==(0);
             if ($90) {
              break L31;
             }
            } else {
             $91 = (_BN_num_bits($p)|0);
             $92 = (_BN_pseudo_rand($47,$91,0,0)|0);
             $93 = ($92|0)==(0);
             if ($93) {
              break L31;
             }
             $94 = (_BN_ucmp($47,$p)|0);
             $95 = ($94|0)>(-1);
             if ($95) {
              $96 = HEAP32[$86>>2]|0;
              $97 = ($96|0)!=(0);
              $98 = $97 ? 50 : 49;
              $99 = (FUNCTION_TABLE_iiii[$98 & 63]($47,$47,$p)|0);
              $100 = ($99|0)==(0);
              if ($100) {
               break L31;
              }
             }
             $101 = HEAP32[$87>>2]|0;
             $102 = ($101|0)==(0);
             if ($102) {
              $103 = (_BN_set_word($47,$i$0)|0);
              $104 = ($103|0)==(0);
              if ($104) {
               break L31;
              }
             }
            }
            $105 = (_BN_kronecker($47,$44,$ctx)|0);
            $106 = ($105|0)<(-1);
            if ($106) {
             break L31;
            }
            switch ($105|0) {
            case 0:  {
             label = 52;
             break L38;
             break;
            }
            case -1:  {
             label = 55;
             break L38;
             break;
            }
            case 1:  {
             break;
            }
            default: {
             label = 54;
             break L38;
            }
            }
            $107 = (($i$0) + 1)|0;
            $108 = ($107|0)<(82);
            if ($108) {
             $i$0 = $107;
            } else {
             label = 54;
             break;
            }
           }
           if ((label|0) == 52) {
            _ERR_put_error(3,121,112,89780,249);
            break L31;
           }
           else if ((label|0) == 54) {
            _ERR_put_error(3,121,113,89780,261);
            break L31;
           }
           else if ((label|0) == 55) {
            $109 = (_BN_rshift($44,$44,$e$0$lcssa)|0);
            $110 = ($109|0)==(0);
            if ($110) {
             break L31;
            }
            $111 = (_BN_mod_exp($47,$47,$44,$p,$ctx)|0);
            $112 = ($111|0)==(0);
            if ($112) {
             break L31;
            }
            $113 = HEAP32[$87>>2]|0;
            $114 = ($113|0)==(1);
            if ($114) {
             $115 = HEAP32[$47>>2]|0;
             $116 = HEAP32[$115>>2]|0;
             $117 = ($116|0)==(1);
             if ($117) {
              $118 = ((($47)) + 12|0);
              $119 = HEAP32[$118>>2]|0;
              $120 = ($119|0)==(0);
              if ($120) {
               _ERR_put_error(3,121,112,89780,276);
               break L31;
              }
             }
            }
            $121 = (_BN_rshift1($45,$44)|0);
            $122 = ($121|0)==(0);
            if ($122) {
             break L31;
            }
            $123 = ((($45)) + 4|0);
            $124 = HEAP32[$123>>2]|0;
            $125 = ($124|0)==(0);
            do {
             if ($125) {
              $126 = (_BN_nnmod($45,$42,$p,$ctx)|0);
              $127 = ($126|0)==(0);
              if ($127) {
               break L31;
              }
              $128 = HEAP32[$123>>2]|0;
              $129 = ($128|0)==(0);
              if ($129) {
               (_BN_set_word($ret$29,0)|0);
               $ret$4 = $ret$29;
               break L3;
              } else {
               $130 = (_BN_set_word($46,1)|0);
               $131 = ($130|0)==(0);
               if ($131) {
                break L31;
               } else {
                break;
               }
              }
             } else {
              $132 = (_BN_mod_exp($46,$42,$45,$p,$ctx)|0);
              $133 = ($132|0)==(0);
              if ($133) {
               break L31;
              }
              $134 = ((($46)) + 4|0);
              $135 = HEAP32[$134>>2]|0;
              $136 = ($135|0)==(0);
              if ($136) {
               (_BN_set_word($ret$29,0)|0);
               $ret$4 = $ret$29;
               break L3;
              }
             }
            } while(0);
            $137 = (_BN_mod_sqr($43,$46,$p,$ctx)|0);
            $138 = ($137|0)==(0);
            if ($138) {
             break L31;
            }
            $139 = (_BN_mod_mul($43,$43,$42,$p,$ctx)|0);
            $140 = ($139|0)==(0);
            if ($140) {
             break L31;
            }
            $141 = (_BN_mod_mul($46,$46,$42,$p,$ctx)|0);
            $142 = ($141|0)==(0);
            if ($142) {
             break L31;
            }
            $143 = ((($43)) + 4|0);
            $144 = ((($43)) + 12|0);
            $145 = ((($45)) + 12|0);
            $e$1 = $e$0$lcssa;
            L76: while(1) {
             $146 = HEAP32[$143>>2]|0;
             $147 = ($146|0)==(1);
             do {
              if ($147) {
               $148 = HEAP32[$43>>2]|0;
               $149 = HEAP32[$148>>2]|0;
               $150 = ($149|0)==(1);
               if (!($150)) {
                break;
               }
               $151 = HEAP32[$144>>2]|0;
               $152 = ($151|0)==(0);
               if ($152) {
                label = 77;
                break L76;
               }
              }
             } while(0);
             $155 = (_BN_mod_sqr($45,$43,$p,$ctx)|0);
             $156 = ($155|0)==(0);
             if ($156) {
              break L31;
             } else {
              $i$1 = 1;
             }
             L82: while(1) {
              $157 = HEAP32[$123>>2]|0;
              $158 = ($157|0)==(1);
              do {
               if ($158) {
                $159 = HEAP32[$45>>2]|0;
                $160 = HEAP32[$159>>2]|0;
                $161 = ($160|0)==(1);
                if (!($161)) {
                 break;
                }
                $162 = HEAP32[$145>>2]|0;
                $163 = ($162|0)==(0);
                if ($163) {
                 $i$1$lcssa = $i$1;
                 break L82;
                }
               }
              } while(0);
              $164 = (($i$1) + 1)|0;
              $165 = ($164|0)==($e$1|0);
              if ($165) {
               label = 83;
               break L76;
              }
              $166 = (_BN_mod_mul($45,$45,$45,$p,$ctx)|0);
              $167 = ($166|0)==(0);
              if ($167) {
               break L31;
              } else {
               $i$1 = $164;
              }
             }
             $168 = (_BN_copy($45,$47)|0);
             $169 = ($168|0)==(0|0);
             if ($169) {
              break L31;
             }
             $170 = (($e$1) - ($i$1$lcssa))|0;
             $j$0$in = $170;
             while(1) {
              $171 = ($j$0$in|0)>(1);
              if (!($171)) {
               break;
              }
              $j$0 = (($j$0$in) + -1)|0;
              $172 = (_BN_mod_sqr($45,$45,$p,$ctx)|0);
              $173 = ($172|0)==(0);
              if ($173) {
               break L31;
              } else {
               $j$0$in = $j$0;
              }
             }
             $174 = (_BN_mod_mul($47,$45,$45,$p,$ctx)|0);
             $175 = ($174|0)==(0);
             if ($175) {
              break L31;
             }
             $176 = (_BN_mod_mul($46,$46,$45,$p,$ctx)|0);
             $177 = ($176|0)==(0);
             if ($177) {
              break L31;
             }
             $178 = (_BN_mod_mul($43,$43,$47,$p,$ctx)|0);
             $179 = ($178|0)==(0);
             if ($179) {
              break L31;
             } else {
              $e$1 = $i$1$lcssa;
             }
            }
            if ((label|0) == 77) {
             $153 = (_BN_copy($ret$29,$46)|0);
             $154 = ($153|0)==(0|0);
             if ($154) {
              break L31;
             } else {
              break L35;
             }
            }
            else if ((label|0) == 83) {
             _ERR_put_error(3,121,111,89780,360);
             break L31;
            }
           }
          }
          }
         } while(0);
         $180 = (_BN_mod_sqr($46,$ret$29,$p,$ctx)|0);
         $181 = ($180|0)==(0);
         if (!($181)) {
          $182 = (_BN_cmp($46,$42)|0);
          $183 = ($182|0)==(0);
          if ($183) {
           $ret$4 = $ret$29;
           break L3;
          }
          _ERR_put_error(3,121,111,89780,394);
         }
        }
       } while(0);
       $184 = ($ret$29|0)==(0|0);
       $185 = ($ret$29|0)==($in|0);
       $or$cond3 = $184 | $185;
       if ($or$cond3) {
        $ret$4 = 0;
       } else {
        _BN_clear_free($ret$29);
        $ret$4 = 0;
       }
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 4) {
     $9 = ($1|0)==(1);
     $10 = ($4|0)==(2);
     $or$cond30 = $9 & $10;
     if (!($or$cond30)) {
      break L1;
     }
     $11 = ($in|0)==(0|0);
     if ($11) {
      $12 = (_BN_new()|0);
      $13 = ($12|0)==(0|0);
      if ($13) {
       $ret$4 = 0;
       break;
      } else {
       $ret$05 = $12;
      }
     } else {
      $ret$05 = $in;
     }
     $14 = (_BN_is_bit_set($a,0)|0);
     $15 = (_BN_set_word($ret$05,$14)|0);
     $16 = ($15|0)==(0);
     if (!($16)) {
      $$0 = $ret$05;
      return ($$0|0);
     }
     $17 = ($ret$05|0)==($in|0);
     if ($17) {
      $$0 = 0;
      return ($$0|0);
     }
     _BN_free($ret$05);
     $$0 = 0;
     return ($$0|0);
    }
   } while(0);
   _BN_CTX_end($ctx);
   $$0 = $ret$4;
   return ($$0|0);
  }
 } while(0);
 _ERR_put_error(3,121,112,89780,91);
 $$0 = 0;
 return ($$0|0);
}
function _BN_mod_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$a>>2]|0;
 $11 = 0;$7 = 0;$i$03$in = $2;
 while(1) {
  $i$03 = (($i$03$in) + -1)|0;
  $5 = (($4) + ($i$03<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = (___uremdi3(($6|0),($7|0),($w|0),0)|0);
  $9 = tempRet0;
  $10 = ($i$03$in|0)>(1);
  if ($10) {
   $11 = $9;$7 = $8;$i$03$in = $i$03;
  } else {
   $12 = $8;$13 = $9;
   break;
  }
 }
 $$0 = $12;
 return ($$0|0);
}
function _BN_div_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $$lcssa = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$in = 0, $ret$0$lcssa5 = 0, $ret$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_BN_num_bits_word($w)|0);
 $5 = (32 - ($4))|0;
 $6 = $w << $5;
 $7 = (_BN_lshift($a,$a,$5)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = -1;
  return ($$0|0);
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $$pre = HEAP32[$a>>2]|0;
  $12 = $$pre;$i$03$in = $9;$ret$02 = 0;
  while(1) {
   $i$03 = (($i$03$in) + -1)|0;
   $11 = (($12) + ($i$03<<2)|0);
   $13 = HEAP32[$11>>2]|0;
   $14 = (_bn_div_words($ret$02,$13,$6)|0);
   $15 = Math_imul($14, $6)|0;
   $16 = (($13) - ($15))|0;
   $17 = HEAP32[$a>>2]|0;
   $18 = (($17) + ($i$03<<2)|0);
   HEAP32[$18>>2] = $14;
   $19 = ($i$03$in|0)>(1);
   if ($19) {
    $12 = $17;$i$03$in = $i$03;$ret$02 = $16;
   } else {
    $$lcssa = $16;
    break;
   }
  }
  $$pre4 = HEAP32[$1>>2]|0;
  $20 = ($$pre4|0)>(0);
  if ($20) {
   $21 = (($$pre4) + -1)|0;
   $22 = HEAP32[$a>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    HEAP32[$1>>2] = $21;
    $ret$0$lcssa5 = $$lcssa;
   } else {
    $ret$0$lcssa5 = $$lcssa;
   }
  } else {
   $ret$0$lcssa5 = $$lcssa;
  }
 } else {
  $ret$0$lcssa5 = 0;
 }
 $26 = $ret$0$lcssa5 >>> $5;
 $$0 = $26;
 return ($$0|0);
}
function _BN_add_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $$015$lcssa = 0, $$01518 = 0, $$lcssa = 0, $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06$lcssa = 0;
 var $i$0617 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_BN_set_word($a,$w)|0);
  $$0 = $4;
  return ($$0|0);
 }
 $5 = ((($a)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  HEAP32[$5>>2] = 0;
  $10 = (_BN_sub_word($a,$w)|0);
  $11 = HEAP32[$1>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = $10;
   return ($$0|0);
  }
  $13 = HEAP32[$5>>2]|0;
  $14 = ($13|0)==(0);
  $15 = $14&1;
  HEAP32[$5>>2] = $15;
  $$0 = $10;
  return ($$0|0);
 }
 $8 = ($2|0)>(0);
 L15: do {
  if ($8) {
   $9 = HEAP32[$a>>2]|0;
   $$01518 = $w;$i$0617 = 0;
   while(1) {
    $16 = (($9) + ($i$0617<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + ($$01518))|0;
    HEAP32[$16>>2] = $18;
    $19 = ($$01518>>>0)>($18>>>0);
    if (!($19)) {
     $$0 = 1;
     break;
    }
    $20 = (($i$0617) + 1)|0;
    $$pre = HEAP32[$1>>2]|0;
    $21 = ($20|0)<($$pre|0);
    if ($21) {
     $$01518 = 1;$i$0617 = $20;
    } else {
     $$015$lcssa = 1;$$lcssa = $$pre;$i$06$lcssa = $20;
     break L15;
    }
   }
   return ($$0|0);
  } else {
   $$015$lcssa = $w;$$lcssa = $2;$i$06$lcssa = 0;
  }
 } while(0);
 $22 = ($i$06$lcssa|0)==($$lcssa|0);
 if (!($22)) {
  $$0 = 1;
  return ($$0|0);
 }
 $23 = ((($a)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($$lcssa|0)<($24|0);
 do {
  if ($25) {
   $30 = $$lcssa;
  } else {
   $26 = (($$lcssa) + 1)|0;
   $27 = (_bn_expand2($a,$26)|0);
   $28 = ($27|0)==(0|0);
   if ($28) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$pre10 = HEAP32[$1>>2]|0;
    $30 = $$pre10;
    break;
   }
  }
 } while(0);
 $29 = (($30) + 1)|0;
 HEAP32[$1>>2] = $29;
 $31 = HEAP32[$a>>2]|0;
 $32 = (($31) + ($$lcssa<<2)|0);
 HEAP32[$32>>2] = $$015$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _BN_sub_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $$0$lcssa = 0, $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(0);
 if ($0) {
  $$01 = 1;
  return ($$01|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_BN_set_word($a,$w)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$01 = 0;
   return ($$01|0);
  }
  _BN_set_negative($a,1);
  $$01 = $4;
  return ($$01|0);
 }
 $6 = ((($a)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  HEAP32[$6>>2] = 0;
  $9 = (_BN_add_word($a,$w)|0);
  HEAP32[$6>>2] = 1;
  $$01 = $9;
  return ($$01|0);
 }
 $10 = ($2|0)==(1);
 $11 = HEAP32[$a>>2]|0;
 if ($10) {
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)<($w>>>0);
  if ($13) {
   $14 = (($w) - ($12))|0;
   HEAP32[$11>>2] = $14;
   HEAP32[$6>>2] = 1;
   $$01 = 1;
   return ($$01|0);
  } else {
   $$0 = $w;$i$0 = 0;
  }
 } else {
  $$0 = $w;$i$0 = 0;
 }
 while(1) {
  $15 = (($11) + ($i$0<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16>>>0)<($$0>>>0);
  $18 = (($16) - ($$0))|0;
  HEAP32[$15>>2] = $18;
  $19 = (($i$0) + 1)|0;
  if ($17) {
   $$0 = 1;$i$0 = $19;
  } else {
   $$0$lcssa = $$0;$$lcssa = $16;$i$0$lcssa = $i$0;
   break;
  }
 }
 $20 = ($$lcssa|0)==($$0$lcssa|0);
 if (!($20)) {
  $$01 = 1;
  return ($$01|0);
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + -1)|0;
 $23 = ($i$0$lcssa|0)==($22|0);
 if (!($23)) {
  $$01 = 1;
  return ($$01|0);
 }
 HEAP32[$1>>2] = $i$0$lcssa;
 $$01 = 1;
 return ($$01|0);
}
function _BN_mul_word($a,$w) {
 $a = $a|0;
 $w = $w|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($w|0)==(0);
 if ($3) {
  (_BN_set_word($a,0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $4 = HEAP32[$a>>2]|0;
 $5 = (_bn_mul_words($4,$4,$1,$w)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($a)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)<($9|0);
 do {
  if ($10) {
   $15 = $7;
  } else {
   $11 = (($7) + 1)|0;
   $12 = (_bn_expand2($a,$11)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$pre = HEAP32[$0>>2]|0;
    $15 = $$pre;
    break;
   }
  }
 } while(0);
 $14 = (($15) + 1)|0;
 HEAP32[$0>>2] = $14;
 $16 = HEAP32[$a>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 HEAP32[$17>>2] = $5;
 $$0 = 1;
 return ($$0|0);
}
function _ASN1_BIT_STRING_set($x,$d,$len) {
 $x = $x|0;
 $d = $d|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_STRING_set($x,$d,$len)|0);
 return ($0|0);
}
function _i2c_ASN1_BIT_STRING($a,$pp) {
 $a = $a|0;
 $pp = $pp|0;
 var $$ = 0, $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits$0 = 0, $len$0 = 0, $len$0$lcssa = 0, $len$011 = 0, $len$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$a>>2]|0;
 $2 = ($1|0)>(0);
 do {
  if ($2) {
   $3 = ((($a)) + 12|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = $4 & 8;
   $6 = ($5|0)==(0);
   if (!($6)) {
    $8 = $4 & 7;
    $bits$0 = $8;$len$1 = $1;
    break;
   }
   $7 = ((($a)) + 8|0);
   $len$0 = $1;
   while(1) {
    $9 = ($len$0|0)>(0);
    if (!($9)) {
     $len$0$lcssa = $len$0;
     label = 7;
     break;
    }
    $10 = (($len$0) + -1)|0;
    $11 = HEAP32[$7>>2]|0;
    $12 = (($11) + ($10)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if ($14) {
     $len$0 = $10;
    } else {
     $16 = $13;$len$011 = $len$0;
     break;
    }
   }
   if ((label|0) == 7) {
    $$pre = HEAP32[$7>>2]|0;
    $$pre2 = (($len$0$lcssa) + -1)|0;
    $$phi$trans$insert = (($$pre) + ($$pre2)|0);
    $$pre3 = HEAP8[$$phi$trans$insert>>0]|0;
    $16 = $$pre3;$len$011 = $len$0$lcssa;
   }
   $15 = $16&255;
   $17 = $15 & 1;
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = $15 & 2;
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = $15 & 4;
     $22 = ($21|0)==(0);
     if ($22) {
      $23 = $15 & 8;
      $24 = ($23|0)==(0);
      if ($24) {
       $25 = $15 & 16;
       $26 = ($25|0)==(0);
       if ($26) {
        $27 = $15 & 32;
        $28 = ($27|0)==(0);
        if ($28) {
         $29 = $15 & 64;
         $30 = ($29|0)==(0);
         if ($30) {
          $31 = $15 & 128;
          $32 = ($31|0)==(0);
          $$ = $32 ? 0 : 7;
          $bits$0 = $$;$len$1 = $len$011;
         } else {
          $bits$0 = 6;$len$1 = $len$011;
         }
        } else {
         $bits$0 = 5;$len$1 = $len$011;
        }
       } else {
        $bits$0 = 4;$len$1 = $len$011;
       }
      } else {
       $bits$0 = 3;$len$1 = $len$011;
      }
     } else {
      $bits$0 = 2;$len$1 = $len$011;
     }
    } else {
     $bits$0 = 1;$len$1 = $len$011;
    }
   } else {
    $bits$0 = 0;$len$1 = $len$011;
   }
  } else {
   $bits$0 = 0;$len$1 = $1;
  }
 } while(0);
 $33 = (($len$1) + 1)|0;
 $34 = ($pp|0)==(0|0);
 if ($34) {
  $$0 = $33;
  return ($$0|0);
 }
 $35 = HEAP32[$pp>>2]|0;
 $36 = $bits$0&255;
 $37 = ((($35)) + 1|0);
 HEAP8[$35>>0] = $36;
 $38 = ((($a)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 _memcpy(($37|0),($39|0),($len$1|0))|0;
 $40 = (($35) + ($33)|0);
 $41 = ($len$1|0)>(0);
 if ($41) {
  $42 = 255 << $bits$0;
  $43 = (($35) + ($len$1)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 & $42;
  $47 = $46&255;
  HEAP8[$43>>0] = $47;
 }
 HEAP32[$pp>>2] = $40;
 $$0 = $33;
 return ($$0|0);
}
function _c2i_ASN1_BIT_STRING($a,$pp,$len) {
 $a = $a|0;
 $pp = $pp|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$ph = 0, $p$0 = 0, $ret$0 = 0, $s$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)<(1);
 if ($0) {
  _ERR_put_error(13,189,152,89790,179);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($a|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$a>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   label = 5;
  } else {
   $ret$0 = $2;
  }
 }
 if ((label|0) == 5) {
  $4 = (_ASN1_STRING_type_new(3)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $ret$0 = $4;
  }
 }
 $6 = HEAP32[$pp>>2]|0;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $10 = ($8&255)>(7);
 do {
  if ($10) {
   $i$0$ph = 220;
  } else {
   $11 = ((($ret$0)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & -16;
   $14 = $9 | $13;
   $15 = $14 | 8;
   HEAP32[$11>>2] = $15;
   $16 = (($len) + -1)|0;
   $17 = ($len|0)>(1);
   if ($17) {
    $18 = (_CRYPTO_malloc($16,89790,158)|0);
    $19 = ($18|0)==(0|0);
    if ($19) {
     $i$0$ph = 65;
     break;
    }
    _memcpy(($18|0),($7|0),($16|0))|0;
    $20 = 255 << $9;
    $21 = (($len) + -2)|0;
    $22 = (($18) + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $24 & $20;
    $26 = $25&255;
    HEAP8[$22>>0] = $26;
    $27 = (($6) + ($len)|0);
    $p$0 = $27;$s$0 = $18;
   } else {
    $p$0 = $7;$s$0 = 0;
   }
   HEAP32[$ret$0>>2] = $16;
   $28 = ((($ret$0)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    _CRYPTO_free($29);
   }
   HEAP32[$28>>2] = $s$0;
   $31 = ((($ret$0)) + 4|0);
   HEAP32[$31>>2] = 3;
   if (!($1)) {
    HEAP32[$a>>2] = $ret$0;
   }
   HEAP32[$pp>>2] = $p$0;
   $$0 = $ret$0;
   return ($$0|0);
  }
 } while(0);
 _ERR_put_error(13,189,$i$0$ph,89790,179);
 if (!($1)) {
  $32 = HEAP32[$a>>2]|0;
  $33 = ($32|0)==($ret$0|0);
  if ($33) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 _ASN1_STRING_free($ret$0);
 $$0 = 0;
 return ($$0|0);
}
function _i2c_ASN1_INTEGER($a,$pp) {
 $a = $a|0;
 $pp = $pp|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$mux = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$018 = 0;
 var $i$1$lcssa = 0, $i$111 = 0, $i$2 = 0, $i$2$in7 = 0, $n$0$lcssa = 0, $n$0$lcssa$pn = 0, $n$013 = 0, $n$18 = 0, $neg$1 = 0, $not$ = 0, $not$10 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond33 = 0, $p$0 = 0, $p$1$lcssa = 0, $p$1$lcssa$pn = 0, $p$112 = 0, $p$29 = 0, $pad$0 = 0;
 var $pad$1 = 0, $pb$0 = 0, $pb$1 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 256;
 $4 = HEAP32[$a>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $neg$1 = $3;$pad$1 = 0;$pb$1 = 0;$ret$0 = 1;
 } else {
  $6 = ((($a)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP8[$7>>0]|0;
  $9 = ($4|0)==(1);
  $10 = ($8<<24>>24)==(0);
  $or$cond = $9 & $10;
  $$ = $or$cond ? 0 : $3;
  $11 = ($$|0)==(0);
  $12 = ($8<<24>>24)<(0);
  $or$cond3 = $12 & $11;
  $$mux = $or$cond3&1;
  L6: do {
   if ($11) {
    $pad$0 = $$mux;$pb$0 = 0;
   } else {
    $13 = ($8&255)>(128);
    if ($13) {
     $pad$0 = 1;$pb$0 = -1;
    } else {
     $14 = ($8<<24>>24)==(-128);
     $15 = ($4|0)>(1);
     $or$cond33 = $14 & $15;
     if ($or$cond33) {
      $i$018 = 1;
      while(1) {
       $18 = (($7) + ($i$018)|0);
       $19 = HEAP8[$18>>0]|0;
       $20 = ($19<<24>>24)==(0);
       $17 = (($i$018) + 1)|0;
       if (!($20)) {
        $pad$0 = 1;$pb$0 = -1;
        break L6;
       }
       $16 = ($17|0)<($4|0);
       if ($16) {
        $i$018 = $17;
       } else {
        $pad$0 = 0;$pb$0 = 0;
        break;
       }
      }
     } else {
      $pad$0 = 0;$pb$0 = 0;
     }
    }
   }
  } while(0);
  $21 = (($pad$0) + ($4))|0;
  $neg$1 = $$;$pad$1 = $pad$0;$pb$1 = $pb$0;$ret$0 = $21;
 }
 $22 = ($pp|0)==(0|0);
 if ($22) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 $23 = HEAP32[$pp>>2]|0;
 $24 = ($pad$1|0)==(0);
 if ($24) {
  $27 = $4;$p$0 = $23;
 } else {
  $25 = ((($23)) + 1|0);
  HEAP8[$23>>0] = $pb$1;
  $$pre = HEAP32[$a>>2]|0;
  $27 = $$pre;$p$0 = $25;
 }
 $26 = ($27|0)==(0);
 do {
  if ($26) {
   HEAP8[$p$0>>0] = 0;
  } else {
   $28 = ($neg$1|0)==(0);
   $29 = ((($a)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   if ($28) {
    _memcpy(($p$0|0),($30|0),($27|0))|0;
    break;
   }
   $$sum = (($27) + -1)|0;
   $31 = (($30) + ($$sum)|0);
   $32 = (($p$0) + ($$sum)|0);
   $33 = HEAP8[$31>>0]|0;
   $34 = ($27|0)>(1);
   $not$10 = ($33<<24>>24)==(0);
   $35 = $34 & $not$10;
   if ($35) {
    $i$111 = $27;$n$013 = $31;$p$112 = $32;
    while(1) {
     $36 = ((($p$112)) + -1|0);
     HEAP8[$p$112>>0] = 0;
     $37 = ((($n$013)) + -1|0);
     $38 = (($i$111) + -1)|0;
     $39 = HEAP8[$37>>0]|0;
     $40 = ($38|0)>(1);
     $not$ = ($39<<24>>24)==(0);
     $41 = $40 & $not$;
     if ($41) {
      $i$111 = $38;$n$013 = $37;$p$112 = $36;
     } else {
      $$lcssa = $39;$i$1$lcssa = $38;$n$0$lcssa = $37;$p$1$lcssa = $36;
      break;
     }
    }
   } else {
    $$lcssa = $33;$i$1$lcssa = $27;$n$0$lcssa = $31;$p$1$lcssa = $32;
   }
   $42 = $$lcssa&255;
   $43 = (256 - ($42))|0;
   $44 = $43&255;
   HEAP8[$p$1$lcssa>>0] = $44;
   $45 = ($i$1$lcssa|0)>(1);
   if ($45) {
    $i$2$in7 = $i$1$lcssa;$n$0$lcssa$pn = $n$0$lcssa;$p$1$lcssa$pn = $p$1$lcssa;
    while(1) {
     $n$18 = ((($n$0$lcssa$pn)) + -1|0);
     $p$29 = ((($p$1$lcssa$pn)) + -1|0);
     $i$2 = (($i$2$in7) + -1)|0;
     $46 = HEAP8[$n$18>>0]|0;
     $47 = $46&255;
     $48 = $47 ^ 255;
     $49 = $48&255;
     HEAP8[$p$29>>0] = $49;
     $50 = ($i$2|0)>(1);
     if ($50) {
      $i$2$in7 = $i$2;$n$0$lcssa$pn = $n$18;$p$1$lcssa$pn = $p$29;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 $51 = HEAP32[$pp>>2]|0;
 $52 = (($51) + ($ret$0)|0);
 HEAP32[$pp>>2] = $52;
 $$0 = $ret$0;
 return ($$0|0);
}
function _c2i_ASN1_INTEGER($a,$pp,$len) {
 $a = $a|0;
 $pp = $pp|0;
 $len = $len|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$2 = 0, $$lcssa = 0, $$lcssa5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$0$lcssa = 0, $i$014 = 0, $i$1 = 0, $i$1$in8 = 0, $not$ = 0, $not$11 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0, $p$1$lcssa = 0, $p$1$lcssa$pn = 0, $p$112 = 0, $p$210 = 0, $p$3 = 0, $ret$0 = 0, $to$0$lcssa = 0, $to$0$lcssa$pn = 0, $to$013 = 0, $to$19 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  label = 3;
 } else {
  $1 = HEAP32[$a>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   label = 3;
  } else {
   $ret$0 = $1;
  }
 }
 do {
  if ((label|0) == 3) {
   $3 = (_ASN1_STRING_type_new(2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $5 = ((($3)) + 4|0);
    HEAP32[$5>>2] = 2;
    $ret$0 = $3;
    break;
   }
  }
 } while(0);
 $6 = HEAP32[$pp>>2]|0;
 $7 = (($6) + ($len)|0);
 $8 = (($len) + 1)|0;
 $9 = (_CRYPTO_malloc($8,89801,208)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  _ERR_put_error(13,194,65,89801,269);
  if (!($0)) {
   $52 = HEAP32[$a>>2]|0;
   $53 = ($52|0)==($ret$0|0);
   if ($53) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  _ASN1_STRING_free($ret$0);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ($len|0)==(0);
 do {
  if ($11) {
   $12 = ((($ret$0)) + 4|0);
   HEAP32[$12>>2] = 2;
   $$2 = 0;
  } else {
   $13 = HEAP8[$6>>0]|0;
   $14 = ($13<<24>>24)<(0);
   $15 = ((($ret$0)) + 4|0);
   if (!($14)) {
    HEAP32[$15>>2] = 2;
    $44 = HEAP8[$6>>0]|0;
    $45 = ($44<<24>>24)==(0);
    $46 = ($len|0)!=(1);
    $or$cond3 = $46 & $45;
    $47 = ((($6)) + 1|0);
    $p$3 = $or$cond3 ? $47 : $6;
    $48 = $or$cond3 << 31 >> 31;
    $$1 = (($48) + ($len))|0;
    _memcpy(($9|0),($p$3|0),($$1|0))|0;
    $$2 = $$1;
    break;
   }
   HEAP32[$15>>2] = 258;
   $16 = HEAP8[$6>>0]|0;
   $17 = ($16<<24>>24)==(-1);
   $18 = ($len|0)!=(1);
   $or$cond = $18 & $17;
   $19 = ((($6)) + 1|0);
   $p$0 = $or$cond ? $19 : $6;
   $20 = $or$cond << 31 >> 31;
   $$04 = (($20) + ($len))|0;
   $21 = (($$04) + -1)|0;
   $22 = (($p$0) + ($21)|0);
   $23 = (($9) + ($21)|0);
   $24 = HEAP8[$22>>0]|0;
   $25 = ($$04|0)!=(0);
   $not$11 = ($24<<24>>24)==(0);
   $26 = $25 & $not$11;
   if ($26) {
    $i$014 = $$04;$p$112 = $22;$to$013 = $23;
    while(1) {
     $27 = ((($to$013)) + -1|0);
     HEAP8[$to$013>>0] = 0;
     $28 = (($i$014) + -1)|0;
     $29 = ((($p$112)) + -1|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($28|0)!=(0);
     $not$ = ($30<<24>>24)==(0);
     $32 = $31 & $not$;
     if ($32) {
      $i$014 = $28;$p$112 = $29;$to$013 = $27;
     } else {
      $$lcssa = $30;$$lcssa5 = $31;$i$0$lcssa = $28;$p$1$lcssa = $29;$to$0$lcssa = $27;
      break;
     }
    }
   } else {
    $$lcssa = $24;$$lcssa5 = $25;$i$0$lcssa = $$04;$p$1$lcssa = $22;$to$0$lcssa = $23;
   }
   if (!($$lcssa5)) {
    HEAP8[$9>>0] = 1;
    $33 = (($9) + ($$04)|0);
    HEAP8[$33>>0] = 0;
    $34 = (($$04) + 1)|0;
    $$2 = $34;
    break;
   }
   $35 = $$lcssa&255;
   $36 = (256 - ($35))|0;
   $37 = $36&255;
   HEAP8[$to$0$lcssa>>0] = $37;
   $38 = ($i$0$lcssa|0)>(1);
   if ($38) {
    $i$1$in8 = $i$0$lcssa;$p$1$lcssa$pn = $p$1$lcssa;$to$0$lcssa$pn = $to$0$lcssa;
    while(1) {
     $to$19 = ((($to$0$lcssa$pn)) + -1|0);
     $p$210 = ((($p$1$lcssa$pn)) + -1|0);
     $i$1 = (($i$1$in8) + -1)|0;
     $39 = HEAP8[$p$210>>0]|0;
     $40 = $39&255;
     $41 = $40 ^ 255;
     $42 = $41&255;
     HEAP8[$to$19>>0] = $42;
     $43 = ($i$1|0)>(1);
     if ($43) {
      $i$1$in8 = $i$1;$p$1$lcssa$pn = $p$210;$to$0$lcssa$pn = $to$19;
     } else {
      $$2 = $$04;
      break;
     }
    }
   } else {
    $$2 = $$04;
   }
  }
 } while(0);
 $49 = ((($ret$0)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  _CRYPTO_free($50);
 }
 HEAP32[$49>>2] = $9;
 HEAP32[$ret$0>>2] = $$2;
 if (!($0)) {
  HEAP32[$a>>2] = $ret$0;
 }
 HEAP32[$pp>>2] = $7;
 $$0 = $ret$0;
 return ($$0|0);
}
function _d2i_ASN1_UINTEGER($a,$pp,$length) {
 $a = $a|0;
 $pp = $pp|0;
 $length = $length|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$0 = 0, $len = 0, $or$cond = 0, $p = 0, $ret$0 = 0, $tag = 0, $xclass = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp + 12|0;
 $len = sp + 8|0;
 $tag = sp + 4|0;
 $xclass = sp;
 $0 = ($a|0)==(0|0);
 if ($0) {
  label = 3;
 } else {
  $1 = HEAP32[$a>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   label = 3;
  } else {
   $ret$0 = $1;
  }
 }
 do {
  if ((label|0) == 3) {
   $3 = (_ASN1_STRING_type_new(2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $5 = ((($3)) + 4|0);
    HEAP32[$5>>2] = 2;
    $ret$0 = $3;
    break;
   }
  }
 } while(0);
 $6 = HEAP32[$pp>>2]|0;
 HEAP32[$p>>2] = $6;
 $7 = (_ASN1_get_object($p,$len,$tag,$xclass,$length)|0);
 $8 = $7 & 128;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[$tag>>2]|0;
  $11 = ($10|0)==(2);
  if ($11) {
   $12 = HEAP32[$len>>2]|0;
   $13 = (($12) + 1)|0;
   $14 = (_CRYPTO_malloc($13,89801,314)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $i$0 = 65;
   } else {
    $16 = ((($ret$0)) + 4|0);
    HEAP32[$16>>2] = 2;
    $17 = HEAP32[$len>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $37 = 0;
    } else {
     $19 = HEAP32[$p>>2]|0;
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(0);
     $22 = ($17|0)!=(1);
     $or$cond = $22 & $21;
     if ($or$cond) {
      $23 = ((($19)) + 1|0);
      HEAP32[$p>>2] = $23;
      $24 = (($17) + -1)|0;
      HEAP32[$len>>2] = $24;
      $25 = $23;$26 = $24;
     } else {
      $25 = $19;$26 = $17;
     }
     _memcpy(($14|0),($25|0),($26|0))|0;
     $27 = HEAP32[$len>>2]|0;
     $28 = HEAP32[$p>>2]|0;
     $29 = (($28) + ($27)|0);
     HEAP32[$p>>2] = $29;
     $37 = $27;
    }
    $30 = ((($ret$0)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0|0);
    if ($32) {
     $33 = $37;
    } else {
     _CRYPTO_free($31);
     $$pre = HEAP32[$len>>2]|0;
     $33 = $$pre;
    }
    HEAP32[$30>>2] = $14;
    HEAP32[$ret$0>>2] = $33;
    if (!($0)) {
     HEAP32[$a>>2] = $ret$0;
    }
    $34 = HEAP32[$p>>2]|0;
    HEAP32[$pp>>2] = $34;
    $$0 = $ret$0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $i$0 = 115;
  }
 } else {
  $i$0 = 102;
 }
 _ERR_put_error(13,150,$i$0,89801,338);
 if (!($0)) {
  $35 = HEAP32[$a>>2]|0;
  $36 = ($35|0)==($ret$0|0);
  if ($36) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ASN1_STRING_free($ret$0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ASN1_INTEGER_set($a,$v) {
 $a = $a|0;
 $v = $v|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $d$1$ph = 0, $d$17 = 0, $exitcond = 0, $exitcond13 = 0, $i$06 = 0, $i$06$lcssa = 0, $j$0$lcssa = 0, $k$0 = 0, $k$0514 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $0 = ((($a)) + 4|0);
 HEAP32[$0>>2] = 2;
 $1 = HEAP32[$a>>2]|0;
 $2 = ($1|0)<(5);
 $3 = ((($a)) + 8|0);
 if ($2) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _CRYPTO_free($4);
  }
  $6 = (_CRYPTO_malloc(5,89801,356)|0);
  HEAP32[$3>>2] = $6;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   ;HEAP8[$6>>0]=0|0;HEAP8[$6+1>>0]=0|0;HEAP8[$6+2>>0]=0|0;HEAP8[$6+3>>0]=0|0;HEAP8[$6+4>>0]=0|0;
  }
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _ERR_put_error(13,118,65,89801,360);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($v|0)<(0);
 if ($10) {
  $11 = (0 - ($v))|0;
  HEAP32[$0>>2] = 258;
  $d$1$ph = $11;
 } else {
  $d$1$ph = $v;
 }
 $12 = ($d$1$ph|0)==(0);
 if ($12) {
  $j$0$lcssa = 0;
 } else {
  $d$17 = $d$1$ph;$i$06 = 0;
  while(1) {
   $17 = $d$17&255;
   $18 = (($buf) + ($i$06)|0);
   HEAP8[$18>>0] = $17;
   $19 = $d$17 >> 8;
   $20 = (($i$06) + 1)|0;
   $21 = ($20>>>0)>(3);
   $22 = ($19|0)==(0);
   $or$cond = $21 | $22;
   if ($or$cond) {
    $i$06$lcssa = $i$06;
    break;
   } else {
    $d$17 = $19;$i$06 = $20;
   }
  }
  $13 = ($i$06$lcssa|0)>(-1);
  if ($13) {
   $14 = (($i$06$lcssa) + 1)|0;
   $15 = (($buf) + ($i$06$lcssa)|0);
   $16 = HEAP8[$15>>0]|0;
   HEAP8[$8>>0] = $16;
   $exitcond13 = ($i$06$lcssa|0)==(0);
   if ($exitcond13) {
    $j$0$lcssa = $14;
   } else {
    $26 = 1;$k$0514 = $i$06$lcssa;
    while(1) {
     $k$0 = (($k$0514) + -1)|0;
     $$pre = HEAP32[$3>>2]|0;
     $23 = (($buf) + ($k$0)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = (($26) + 1)|0;
     $27 = (($$pre) + ($26)|0);
     HEAP8[$27>>0] = $24;
     $exitcond = ($25|0)==($14|0);
     if ($exitcond) {
      $j$0$lcssa = $14;
      break;
     } else {
      $26 = $25;$k$0514 = $k$0;
     }
    }
   }
  } else {
   $j$0$lcssa = 0;
  }
 }
 HEAP32[$a>>2] = $j$0$lcssa;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _ASN1_INTEGER_get($a) {
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, $neg$0 = 0, $r$0$ = 0, $r$0$lcssa = 0, $r$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(258);
 if ($3) {
  $neg$0 = 1;
 } else {
  $4 = ($2|0)==(2);
  if ($4) {
   $neg$0 = 0;
  } else {
   $$0 = -1;
   return ($$0|0);
  }
 }
 $5 = HEAP32[$a>>2]|0;
 $6 = ($5|0)>(4);
 if ($6) {
  $$0 = -1;
  return ($$0|0);
 }
 $7 = ((($a)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ($5|0)>(0);
 if ($10) {
  $i$01 = 0;$r$02 = 0;
  while(1) {
   $11 = $r$02 << 8;
   $12 = (($8) + ($i$01)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = $14 | $11;
   $16 = (($i$01) + 1)|0;
   $17 = ($16|0)<($5|0);
   if ($17) {
    $i$01 = $16;$r$02 = $15;
   } else {
    $r$0$lcssa = $15;
    break;
   }
  }
 } else {
  $r$0$lcssa = 0;
 }
 $18 = ($neg$0|0)==(0);
 $19 = (0 - ($r$0$lcssa))|0;
 $r$0$ = $18 ? $r$0$lcssa : $19;
 $$0 = $r$0$;
 return ($$0|0);
}
function _BN_to_ASN1_INTEGER($bn,$ai) {
 $bn = $bn|0;
 $ai = $ai|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $ret$01 = 0, $ret$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ai|0)==(0|0);
 if ($0) {
  $1 = (_ASN1_STRING_type_new(2)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   _ERR_put_error(13,139,58,89801,421);
   $ret$01 = 0;
  } else {
   $ret$02 = $1;
   label = 4;
  }
 } else {
  $ret$02 = $ai;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($bn)) + 12|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    label = 7;
   } else {
    $6 = ((($bn)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0);
    if ($8) {
     label = 7;
    } else {
     $9 = ((($ret$02)) + 4|0);
     HEAP32[$9>>2] = 258;
    }
   }
   if ((label|0) == 7) {
    $10 = ((($ret$02)) + 4|0);
    HEAP32[$10>>2] = 2;
   }
   $11 = (_BN_num_bits($bn)|0);
   $12 = ($11|0)==(0);
   $13 = (($11|0) / 8)&-1;
   $phitmp = (($13) + 5)|0;
   $14 = $12 ? 4 : $phitmp;
   $15 = HEAP32[$ret$02>>2]|0;
   $16 = ($15|0)<($14|0);
   $17 = ((($ret$02)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   do {
    if ($16) {
     $19 = (_CRYPTO_realloc($18,$14,89801,431)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      _ERR_put_error(13,139,65,89801,433);
      $ret$01 = $ret$02;
      break L4;
     } else {
      HEAP32[$17>>2] = $19;
      $21 = $19;
      break;
     }
    } else {
     $21 = $18;
    }
   } while(0);
   $22 = (_BN_bn2bin($bn,$21)|0);
   HEAP32[$ret$02>>2] = $22;
   $23 = ($22|0)==(0);
   if (!($23)) {
    $$0 = $ret$02;
    return ($$0|0);
   }
   $24 = HEAP32[$17>>2]|0;
   HEAP8[$24>>0] = 0;
   HEAP32[$ret$02>>2] = 1;
   $$0 = $ret$02;
   return ($$0|0);
  }
 } while(0);
 $25 = ($ret$01|0)==($ai|0);
 if ($25) {
  $$0 = 0;
  return ($$0|0);
 }
 _ASN1_STRING_free($ret$01);
 $$0 = 0;
 return ($$0|0);
}
function _ASN1_INTEGER_to_BN($ai,$bn) {
 $ai = $ai|0;
 $bn = $bn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ai)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$ai>>2]|0;
 $3 = (_BN_bin2bn($1,$2,$bn)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _ERR_put_error(13,119,105,89801,456);
  return ($3|0);
 }
 $5 = ((($ai)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(258);
 if (!($7)) {
  return ($3|0);
 }
 _BN_set_negative($3,1);
 return ($3|0);
}
function _i2a_ASN1_OBJECT($bp,$a) {
 $bp = $bp|0;
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $buf = sp;
 $0 = ($a|0)==(0|0);
 do {
  if ($0) {
   label = 3;
  } else {
   $1 = ((($a)) + 16|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)==(0|0);
   if ($3) {
    label = 3;
   } else {
    $5 = (_OBJ_obj2txt($buf,80,$a,0)|0);
    $6 = ($5|0)>(79);
    if ($6) {
     $7 = (($5) + 1)|0;
     $8 = (_CRYPTO_malloc($7,89809,227)|0);
     $9 = ($8|0)==(0|0);
     if ($9) {
      $$0 = -1;
      break;
     }
     (_OBJ_obj2txt($8,$7,$a,0)|0);
     (_BIO_write($bp,$8,$5)|0);
     $12 = ($8|0)==($buf|0);
     if ($12) {
      $$0 = $5;
      break;
     }
     _CRYPTO_free($8);
     $$0 = $5;
     break;
    } else {
     $10 = ($5|0)<(1);
     if ($10) {
      $11 = (_BIO_write($bp,89825,9)|0);
      $$0 = $11;
      break;
     } else {
      (_BIO_write($bp,$buf,$5)|0);
      $$0 = $5;
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $4 = (_BIO_write($bp,89820,4)|0);
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _c2i_ASN1_OBJECT($a,$pp,$len) {
 $a = $a|0;
 $pp = $pp|0;
 $len = $len|0;
 var $$0 = 0, $$pre = 0, $$pre$i = 0, $$pre1$i = 0, $$pre1$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $data$0 = 0, $i$05 = 0, $or$cond3 = 0, $p$04 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)<(1);
 $1 = ($pp|0)==(0|0);
 $or$cond3 = $1 | $0;
 if (!($or$cond3)) {
  $2 = HEAP32[$pp>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (($len) + -1)|0;
   $5 = (($2) + ($4)|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)<(0);
   if (!($7)) {
    $8 = ($len|0)>(0);
    L5: do {
     if ($8) {
      $i$05 = 0;$p$04 = $2;
      while(1) {
       $9 = HEAP8[$p$04>>0]|0;
       $10 = ($9<<24>>24)==(-128);
       if ($10) {
        $11 = ($i$05|0)==(0);
        if ($11) {
         break;
        }
        $12 = ((($p$04)) + -1|0);
        $13 = HEAP8[$12>>0]|0;
        $14 = ($13<<24>>24)<(0);
        if (!($14)) {
         break;
        }
       }
       $15 = (($i$05) + 1)|0;
       $16 = ((($p$04)) + 1|0);
       $17 = ($15|0)<($len|0);
       if ($17) {
        $i$05 = $15;$p$04 = $16;
       } else {
        break L5;
       }
      }
      _ERR_put_error(13,196,216,89809,290);
      $$0 = 0;
      return ($$0|0);
     }
    } while(0);
    $18 = ($a|0)==(0|0);
    if ($18) {
     label = 14;
    } else {
     $19 = HEAP32[$a>>2]|0;
     $20 = ($19|0)==(0|0);
     if ($20) {
      label = 14;
     } else {
      $21 = ((($19)) + 20|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = $22 & 1;
      $24 = ($23|0)==(0);
      if ($24) {
       label = 14;
      } else {
       $39 = $2;$ret$0 = $19;
      }
     }
    }
    do {
     if ((label|0) == 14) {
      $25 = (_CRYPTO_malloc(24,89809,346)|0);
      $26 = ($25|0)==(0|0);
      if (!($26)) {
       $27 = ((($25)) + 20|0);
       ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;HEAP32[$25+12>>2]=0|0;HEAP32[$25+16>>2]=0|0;
       HEAP32[$27>>2] = 1;
       $$pre = HEAP32[$pp>>2]|0;
       $39 = $$pre;$ret$0 = $25;
       break;
      }
      _ERR_put_error(13,123,65,89809,348);
      $$0 = 0;
      return ($$0|0);
     }
    } while(0);
    $28 = ((($ret$0)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    HEAP32[$28>>2] = 0;
    $30 = ($29|0)==(0|0);
    $31 = ((($ret$0)) + 12|0);
    if ($30) {
     HEAP32[$31>>2] = 0;
     label = 21;
    } else {
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)<($len|0);
     if ($33) {
      HEAP32[$31>>2] = 0;
      _CRYPTO_free($29);
      label = 21;
     } else {
      $data$0 = $29;
     }
    }
    do {
     if ((label|0) == 21) {
      $34 = (_CRYPTO_malloc($len,89809,315)|0);
      $35 = ($34|0)==(0|0);
      if (!($35)) {
       $36 = ((($ret$0)) + 20|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = $37 | 8;
       HEAP32[$36>>2] = $38;
       $data$0 = $34;
       break;
      }
      _ERR_put_error(13,196,65,89809,336);
      if (!($18)) {
       $42 = HEAP32[$a>>2]|0;
       $43 = ($42|0)==($ret$0|0);
       if ($43) {
        $$0 = 0;
        return ($$0|0);
       }
      }
      $44 = ((($ret$0)) + 20|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = $45 & 4;
      $47 = ($46|0)==(0);
      if ($47) {
       $54 = $45;
      } else {
       $48 = HEAP32[$ret$0>>2]|0;
       $49 = ($48|0)==(0|0);
       if (!($49)) {
        _CRYPTO_free($48);
       }
       $50 = ((($ret$0)) + 4|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if (!($52)) {
        _CRYPTO_free($51);
       }
       HEAP32[$50>>2] = 0;
       HEAP32[$ret$0>>2] = 0;
       $$pre$i = HEAP32[$44>>2]|0;
       $54 = $$pre$i;
      }
      $53 = $54 & 8;
      $55 = ($53|0)==(0);
      if ($55) {
       $59 = $54;
      } else {
       $56 = HEAP32[$28>>2]|0;
       $57 = ($56|0)==(0|0);
       if ($57) {
        $$pre1$i = $54;
       } else {
        _CRYPTO_free($56);
        $$pre1$pre$i = HEAP32[$44>>2]|0;
        $$pre1$i = $$pre1$pre$i;
       }
       HEAP32[$28>>2] = 0;
       HEAP32[$31>>2] = 0;
       $59 = $$pre1$i;
      }
      $58 = $59 & 1;
      $60 = ($58|0)==(0);
      if ($60) {
       $$0 = 0;
       return ($$0|0);
      }
      _CRYPTO_free($ret$0);
      $$0 = 0;
      return ($$0|0);
     }
    } while(0);
    _memcpy(($data$0|0),($39|0),($len|0))|0;
    HEAP32[$28>>2] = $data$0;
    HEAP32[$31>>2] = $len;
    HEAP32[$ret$0>>2] = 0;
    $40 = ((($ret$0)) + 4|0);
    HEAP32[$40>>2] = 0;
    $41 = (($39) + ($len)|0);
    if (!($18)) {
     HEAP32[$a>>2] = $ret$0;
    }
    HEAP32[$pp>>2] = $41;
    $$0 = $ret$0;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(13,196,216,89809,283);
 $$0 = 0;
 return ($$0|0);
}
function _ASN1_OBJECT_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(24,89809,346)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(13,123,65,89809,348);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = ((($0)) + 20|0);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
  HEAP32[$2>>2] = 1;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _ASN1_OBJECT_free($a) {
 $a = $a|0;
 var $$pre = 0, $$pre1 = 0, $$pre1$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($a)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  $11 = $2;
 } else {
  $5 = HEAP32[$a>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _CRYPTO_free($5);
  }
  $7 = ((($a)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   _CRYPTO_free($8);
  }
  HEAP32[$7>>2] = 0;
  HEAP32[$a>>2] = 0;
  $$pre = HEAP32[$1>>2]|0;
  $11 = $$pre;
 }
 $10 = $11 & 8;
 $12 = ($10|0)==(0);
 if ($12) {
  $18 = $11;
 } else {
  $13 = ((($a)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$pre1 = $11;
  } else {
   _CRYPTO_free($14);
   $$pre1$pre = HEAP32[$1>>2]|0;
   $$pre1 = $$pre1$pre;
  }
  HEAP32[$13>>2] = 0;
  $16 = ((($a)) + 12|0);
  HEAP32[$16>>2] = 0;
  $18 = $$pre1;
 }
 $17 = $18 & 1;
 $19 = ($17|0)==(0);
 if ($19) {
  return;
 }
 _CRYPTO_free($a);
 return;
}
function _ASN1_OCTET_STRING_dup($x) {
 $x = $x|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_STRING_dup($x)|0);
 return ($0|0);
}
function _ASN1_OCTET_STRING_set($x,$d,$len) {
 $x = $x|0;
 $d = $d|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_STRING_set($x,$d,$len)|0);
 return ($0|0);
}
function _ASN1_TYPE_get($a) {
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = HEAP32[$a>>2]|0;
 if ($2) {
  $4 = ($3|0)==(5);
  if ($4) {
   $5 = 5;
  } else {
   $$0 = 0;
   return ($$0|0);
  }
 } else {
  $5 = $3;
 }
 $$0 = $5;
 return ($$0|0);
}
function _ASN1_TYPE_set($a,$type,$value) {
 $a = $a|0;
 $type = $type|0;
 $value = $value|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $a;
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = $a;
 } else {
  _ASN1_primitive_free($0,0);
  $$pre = HEAP32[$0>>2]|0;
  $4 = $$pre;
 }
 HEAP32[$4>>2] = $type;
 $5 = ($type|0)==(1);
 if ($5) {
  $6 = ($value|0)!=(0|0);
  $7 = $6 ? 255 : 0;
  $8 = ((($4)) + 4|0);
  HEAP32[$8>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $9 = ((($4)) + 4|0);
  HEAP32[$9>>2] = $value;
  STACKTOP = sp;return;
 }
}
function _EVP_PKEY_asn1_find($pe,$type) {
 $pe = $pe|0;
 $type = $type|0;
 var $$0 = 0, $$0$i = 0, $$0$i2 = 0, $$01 = 0, $$01$lcssa = 0, $$0117 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t$i = 0, $tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $tmp$i = sp + 4|0;
 $t$i = sp;
 $$01 = $type;
 while(1) {
  HEAP32[$t$i>>2] = $tmp$i;
  HEAP32[$tmp$i>>2] = $$01;
  $0 = HEAP32[51252>>2]|0;
  $1 = ($0|0)==(0|0);
  if ($1) {
   label = 5;
  } else {
   $2 = (_sk_find($0,$tmp$i)|0);
   $3 = ($2|0)>(-1);
   if ($3) {
    $4 = HEAP32[51252>>2]|0;
    $5 = (_sk_value($4,$2)|0);
    $$0$i = $5;
   } else {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $6 = (_OBJ_bsearch_($t$i,51256,12,4,88)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$01$lcssa = $$01;
    label = 6;
    break;
   }
   $8 = HEAP32[$6>>2]|0;
   $$0$i = $8;
  }
  $9 = ($$0$i|0)==(0|0);
  if ($9) {
   $$0$i2 = 0;$$0117 = $$01;
   break;
  }
  $10 = ((($$0$i)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 1;
  $13 = ($12|0)==(0);
  if ($13) {
   $$0$i2 = $$0$i;$$0117 = $$01;
   break;
  }
  $14 = ((($$0$i)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $$01 = $15;
 }
 if ((label|0) == 6) {
  $$0$i2 = 0;$$0117 = $$01$lcssa;
 }
 $16 = ($pe|0)==(0|0);
 if ($16) {
  $$0 = $$0$i2;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (_ENGINE_get_pkey_asn1_meth_engine($$0117)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  HEAP32[$pe>>2] = 0;
  $$0 = $$0$i2;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$pe>>2] = $17;
  $19 = (_ENGINE_get_pkey_asn1_meth($17,$$0117)|0);
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _EVP_PKEY_asn1_find_str($pe,$str,$len) {
 $pe = $pe|0;
 $str = $str|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $i$0 = 0, $num$0$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $e = sp;
 $0 = ($len|0)==(-1);
 if ($0) {
  $1 = (_strlen($str)|0);
  $$0 = $1;
 } else {
  $$0 = $len;
 }
 $2 = ($pe|0)==(0|0);
 do {
  if ($2) {
   $i$0 = 0;
  } else {
   $3 = (_ENGINE_pkey_asn1_find_str($e,$str,$$0)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$pe>>2] = 0;
    $i$0 = 0;
    break;
   }
   $5 = HEAP32[$e>>2]|0;
   $6 = (_ENGINE_init($5)|0);
   $7 = ($6|0)==(0);
   $$ = $7 ? 0 : $3;
   $8 = HEAP32[$e>>2]|0;
   (_ENGINE_free($8)|0);
   $9 = HEAP32[$e>>2]|0;
   HEAP32[$pe>>2] = $9;
   $$01 = $$;
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 while(1) {
  $10 = HEAP32[51252>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $num$0$i = 12;
  } else {
   $12 = (_sk_num($10)|0);
   $13 = (($12) + 12)|0;
   $num$0$i = $13;
  }
  $14 = ($i$0|0)<($num$0$i|0);
  if (!($14)) {
   $$01 = 0;
   label = 17;
   break;
  }
  $15 = ($i$0|0)<(12);
  if ($15) {
   $16 = (51256 + ($i$0<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $$0$i = $17;
  } else {
   $18 = (($i$0) + -12)|0;
   $19 = HEAP32[51252>>2]|0;
   $20 = (_sk_value($19,$18)|0);
   $$0$i = $20;
  }
  $21 = ((($$0$i)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 1;
  $24 = ($23|0)==(0);
  if ($24) {
   $25 = ((($$0$i)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_strlen($26)|0);
   $28 = ($27|0)==($$0|0);
   if ($28) {
    $29 = (_strncasecmp($26,$str,$$0)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     $$01 = $$0$i;
     label = 17;
     break;
    }
   }
  }
  $31 = (($i$0) + 1)|0;
  $i$0 = $31;
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return ($$01|0);
 }
 return (0)|0;
}
function _EVP_PKEY_asn1_free($ameth) {
 $ameth = $ameth|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ameth|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($ameth)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($ameth)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  _CRYPTO_free($6);
 }
 $8 = ((($ameth)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  _CRYPTO_free($9);
 }
 _CRYPTO_free($ameth);
 return;
}
function _ameth_cmp_BSEARCH_CMP_FN($a_,$b_) {
 $a_ = $a_|0;
 $b_ = $b_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a_>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$b_>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 return ($4|0);
}
function _ASN1_get_object($pp,$plength,$ptag,$pclass,$omax) {
 $pp = $pp|0;
 $plength = $plength|0;
 $ptag = $ptag|0;
 $pclass = $pclass|0;
 $omax = $omax|0;
 var $$0 = 0, $$in = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$05$i = 0, $l$0 = 0, $max$0 = 0, $max$1 = 0, $or$cond = 0, $or$cond$i = 0, $p$03$i = 0, $p$11$i$ph = 0, $ret$0 = 0, $ret$04$i = 0, $ret$12$i$ph = 0, $scevgep$i = 0, $tag$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ($omax|0)==(0);
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$0>>0]|0;
   $3 = $2&255;
   $4 = $3 & 32;
   $5 = $3 & 192;
   $6 = $3 & 31;
   $7 = ($6|0)==(31);
   $8 = ((($0)) + 1|0);
   $9 = $8;
   $10 = (($omax) + -1)|0;
   $11 = ($10|0)==(0);
   if ($7) {
    if ($11) {
     break;
    } else {
     $13 = $9;$l$0 = 0;$max$0 = $10;
    }
    while(1) {
     $12 = $13;
     $14 = HEAP8[$12>>0]|0;
     $15 = ($14<<24>>24)<(0);
     $16 = $l$0 << 7;
     $17 = ((($12)) + 1|0);
     $18 = $17;
     $19 = $14&255;
     $20 = $19 & 127;
     $21 = $20 | $16;
     $22 = (($max$0) + -1)|0;
     $23 = ($22|0)==(0);
     if (!($15)) {
      break;
     }
     $24 = ($21|0)>(16777215);
     $or$cond = $23 | $24;
     if ($or$cond) {
      break L1;
     } else {
      $13 = $18;$l$0 = $21;$max$0 = $22;
     }
    }
    if ($23) {
     break;
    } else {
     $26 = $18;$max$1 = $22;$tag$0 = $21;
    }
   } else {
    if ($11) {
     break;
    } else {
     $26 = $9;$max$1 = $10;$tag$0 = $6;
    }
   }
   HEAP32[$ptag>>2] = $tag$0;
   HEAP32[$pclass>>2] = $5;
   $25 = $26;
   $27 = (($max$1) + -1)|0;
   $28 = ($max$1|0)<(1);
   if (!($28)) {
    $29 = HEAP8[$25>>0]|0;
    $30 = ($29<<24>>24)==(-128);
    if ($30) {
     $48 = ((($25)) + 1|0);
     HEAP32[$plength>>2] = 0;
     $49 = ($4|0)==(0);
     if ($49) {
      break;
     } else {
      $$in = $48;$55 = 0;$58 = 1;
     }
    } else {
     $31 = $29&255;
     $32 = $31 & 127;
     $33 = ((($25)) + 1|0);
     $34 = $31 & 128;
     $35 = ($34|0)==(0);
     if ($35) {
      $p$11$i$ph = $33;$ret$12$i$ph = $32;
     } else {
      $36 = ($32>>>0)>(4);
      $37 = ($27>>>0)<($32>>>0);
      $or$cond$i = $36 | $37;
      if ($or$cond$i) {
       break;
      }
      $38 = ($32|0)==(0);
      if ($38) {
       $p$11$i$ph = $33;$ret$12$i$ph = 0;
      } else {
       $i$05$i = $32;$p$03$i = $33;$ret$04$i = 0;
       while(1) {
        $39 = (($i$05$i) + -1)|0;
        $40 = $ret$04$i << 8;
        $41 = ((($p$03$i)) + 1|0);
        $42 = HEAP8[$p$03$i>>0]|0;
        $43 = $42&255;
        $44 = $43 | $40;
        $45 = ($39|0)==(0);
        if ($45) {
         $$lcssa = $44;
         break;
        } else {
         $i$05$i = $39;$p$03$i = $41;$ret$04$i = $44;
        }
       }
       $46 = (($32) + 1)|0;
       $scevgep$i = (($25) + ($46)|0);
       $47 = ($$lcssa|0)<(0);
       if ($47) {
        break;
       } else {
        $p$11$i$ph = $scevgep$i;$ret$12$i$ph = $$lcssa;
       }
      }
     }
     HEAP32[$plength>>2] = $ret$12$i$ph;
     $$in = $p$11$i$ph;$55 = $ret$12$i$ph;$58 = 0;
    }
    $50 = $$in;
    $51 = $0;
    $52 = (($omax) - ($50))|0;
    $53 = (($52) + ($51))|0;
    $54 = ($55|0)>($53|0);
    if ($54) {
     _ERR_put_error(13,114,155,89835,147);
     $56 = $4 | 128;
     $ret$0 = $56;
    } else {
     $ret$0 = $4;
    }
    HEAP32[$pp>>2] = $50;
    $57 = $ret$0 | $58;
    $$0 = $57;
    return ($$0|0);
   }
  }
 } while(0);
 _ERR_put_error(13,114,123,89835,157);
 $$0 = 128;
 return ($$0|0);
}
function _ASN1_put_object($pp,$constructed,$length,$tag,$xclass) {
 $pp = $pp|0;
 $constructed = $constructed|0;
 $length = $length|0;
 $tag = $tag|0;
 $xclass = $xclass|0;
 var $$ = 0, $$02$i = 0, $$08 = 0, $$in = 0, $$in14 = 0, $$in2 = 0, $$lcssa = 0, $$lcssa19 = 0, $$sum = 0, $$sum$i = 0, $$sum1 = 0, $$sum3 = 0, $$sum4$pn$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$010 = 0, $i$010$lcssa = 0, $i$04$i = 0, $i$04$i$lcssa = 0, $i$13$i = 0, $l$05$i = 0;
 var $phitmp = 0, $storemerge = 0, $ttag$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ($constructed|0)!=(0);
 $2 = $1 ? 32 : 0;
 $3 = $xclass & 192;
 $4 = $3 | $2;
 $5 = ($tag|0)<(31);
 if ($5) {
  $6 = $tag & 31;
  $7 = $4 | $6;
  $8 = $7&255;
  $9 = ((($0)) + 1|0);
  HEAP8[$0>>0] = $8;
  $$in = $9;$35 = 1;$40 = 2;
 } else {
  $10 = $4 | 31;
  $11 = $10&255;
  HEAP8[$0>>0] = $11;
  $i$010 = 0;$ttag$011 = $tag;
  while(1) {
   $13 = $ttag$011 >> 7;
   $14 = (($i$010) + 1)|0;
   $15 = ($13|0)>(0);
   if ($15) {
    $i$010 = $14;$ttag$011 = $13;
   } else {
    $$lcssa19 = $14;$i$010$lcssa = $i$010;
    break;
   }
  }
  $12 = ($i$010$lcssa|0)>(-1);
  if ($12) {
   $$08 = $tag;$$in14 = $$lcssa19;
   while(1) {
    $16 = (($$in14) + -1)|0;
    $17 = $$08 & 127;
    $18 = (($0) + ($$in14)|0);
    $19 = ($$in14|0)==($$lcssa19|0);
    $20 = $$08 | 128;
    $$ = $19 ? $17 : $20;
    $storemerge = $$&255;
    HEAP8[$18>>0] = $storemerge;
    $21 = $$08 >> 7;
    $22 = ($$in14|0)>(1);
    if ($22) {
     $$08 = $21;$$in14 = $16;
    } else {
     break;
    }
   }
  }
  $$sum = (($i$010$lcssa) + 2)|0;
  $23 = (($0) + ($$sum)|0);
  $phitmp = (($i$010$lcssa) + 3)|0;
  $$in = $23;$35 = $$sum;$40 = $phitmp;
 }
 $24 = ($constructed|0)==(2);
 if ($24) {
  HEAP8[$$in>>0] = -128;
  $$sum4$pn$pn = $40;
  $$in2 = (($0) + ($$sum4$pn$pn)|0);
  $39 = $$in2;
  HEAP32[$pp>>2] = $39;
  return;
 }
 $25 = ($length|0)<(128);
 if ($25) {
  $26 = $length&255;
  HEAP8[$$in>>0] = $26;
  $$sum4$pn$pn = $40;
  $$in2 = (($0) + ($$sum4$pn$pn)|0);
  $39 = $$in2;
  HEAP32[$pp>>2] = $39;
  return;
 } else {
  $i$04$i = 0;$l$05$i = $length;
 }
 while(1) {
  $27 = $l$05$i >> 8;
  $28 = (($i$04$i) + 1)|0;
  $29 = ($27|0)>(0);
  if ($29) {
   $i$04$i = $28;$l$05$i = $27;
  } else {
   $$lcssa = $28;$i$04$i$lcssa = $i$04$i;
   break;
  }
 }
 $30 = $$lcssa | 128;
 $31 = $30&255;
 HEAP8[$$in>>0] = $31;
 $32 = ($i$04$i$lcssa|0)>(-1);
 if ($32) {
  $$02$i = $length;$i$13$i = $$lcssa;
  while(1) {
   $33 = (($i$13$i) + -1)|0;
   $34 = $$02$i&255;
   $$sum3 = (($i$13$i) + ($35))|0;
   $36 = (($0) + ($$sum3)|0);
   HEAP8[$36>>0] = $34;
   $37 = $$02$i >> 8;
   $38 = ($i$13$i|0)>(1);
   if ($38) {
    $$02$i = $37;$i$13$i = $33;
   } else {
    break;
   }
  }
 }
 $$sum$i = (($35) + 2)|0;
 $$sum1 = (($$sum$i) + ($i$04$i$lcssa))|0;
 $$sum4$pn$pn = $$sum1;
 $$in2 = (($0) + ($$sum4$pn$pn)|0);
 $39 = $$in2;
 HEAP32[$pp>>2] = $39;
 return;
}
function _ASN1_put_eoc($pp) {
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($0)) + 1|0);
 HEAP8[$0>>0] = 0;
 $2 = ((($0)) + 2|0);
 HEAP8[$1>>0] = 0;
 HEAP32[$pp>>2] = $2;
 return 2;
}
function _ASN1_object_size($constructed,$length,$tag) {
 $constructed = $constructed|0;
 $length = $length|0;
 $tag = $tag|0;
 var $$0 = 0, $$05 = 0, $$06 = 0, $$old1 = 0, $$old3 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$0 = 0, $ret$1 = 0, $ret$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($length) + 1)|0;
 $1 = ($tag|0)>(30);
 if ($1) {
  $$0 = $tag;$ret$0 = $0;
  while(1) {
   $2 = $$0 >> 7;
   $3 = (($ret$0) + 1)|0;
   $$old1 = ($2|0)>(0);
   if ($$old1) {
    $$0 = $2;$ret$0 = $3;
   } else {
    $ret$1 = $3;
    break;
   }
  }
 } else {
  $ret$1 = $0;
 }
 $4 = ($constructed|0)==(2);
 if ($4) {
  $5 = (($ret$1) + 3)|0;
  $$06 = $5;
  return ($$06|0);
 }
 $6 = (($ret$1) + 1)|0;
 $7 = ($length|0)>(127);
 if ($7) {
  $$05 = $length;$ret$2 = $6;
 } else {
  $$06 = $6;
  return ($$06|0);
 }
 while(1) {
  $8 = $$05 >> 8;
  $9 = (($ret$2) + 1)|0;
  $$old3 = ($8|0)>(0);
  if ($$old3) {
   $$05 = $8;$ret$2 = $9;
  } else {
   $$06 = $9;
   break;
  }
 }
 return ($$06|0);
}
function _ASN1_STRING_set($str,$_data,$len) {
 $str = $str|0;
 $_data = $_data|0;
 $len = $len|0;
 var $$0 = 0, $$01 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)<(0);
 do {
  if ($0) {
   $1 = ($_data|0)==(0|0);
   if ($1) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $2 = (_strlen($_data)|0);
    $$01 = $2;
    break;
   }
  } else {
   $$01 = $len;
  }
 } while(0);
 $3 = HEAP32[$str>>2]|0;
 $4 = ($3|0)<($$01|0);
 $$phi$trans$insert = ((($str)) + 8|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $5 = ($$pre|0)==(0|0);
 if ($4) {
  $7 = (($$01) + 1)|0;
  if ($5) {
   $8 = $7;
   label = 8;
  } else {
   $10 = (_CRYPTO_realloc($$pre,$7,89835,374)|0);
   $12 = $$pre;$storemerge = $10;
   label = 10;
  }
 } else {
  if ($5) {
   $6 = (($$01) + 1)|0;
   $8 = $6;
   label = 8;
  } else {
   $15 = $$pre;
  }
 }
 if ((label|0) == 8) {
  $9 = (_CRYPTO_malloc($8,89835,372)|0);
  $12 = 0;$storemerge = $9;
  label = 10;
 }
 if ((label|0) == 10) {
  HEAP32[$$phi$trans$insert>>2] = $storemerge;
  $11 = ($storemerge|0)==(0|0);
  if ($11) {
   _ERR_put_error(13,186,65,89835,377);
   HEAP32[$$phi$trans$insert>>2] = $12;
   $$0 = 0;
   return ($$0|0);
  } else {
   $15 = $storemerge;
  }
 }
 HEAP32[$str>>2] = $$01;
 $13 = ($_data|0)==(0|0);
 if ($13) {
  $$0 = 1;
  return ($$0|0);
 }
 $14 = ((($str)) + 8|0);
 _memcpy(($15|0),($_data|0),($$01|0))|0;
 $16 = HEAP32[$14>>2]|0;
 $17 = (($16) + ($$01)|0);
 HEAP8[$17>>0] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _ASN1_STRING_dup($str) {
 $str = $str|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($str|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_CRYPTO_malloc(16,89835,408)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(13,130,65,89835,410);
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$1>>2] = 0;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 4;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($str)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$3>>2] = $7;
 $8 = ((($str)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$str>>2]|0;
 $11 = (_ASN1_STRING_set($1,$9,$10)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = ((($str)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$5>>2] = $14;
  $$0 = $1;
  return ($$0|0);
 }
 $15 = HEAP32[$4>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = HEAP32[$5>>2]|0;
  $18 = $17 & 16;
  $19 = ($18|0)==(0);
  if ($19) {
   _CRYPTO_free($15);
  }
 }
 _CRYPTO_free($1);
 $$0 = 0;
 return ($$0|0);
}
function _ASN1_STRING_new() {
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(16,89835,408)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(13,130,65,89835,410);
  $$0$i = 0;
  return ($$0$i|0);
 } else {
  HEAP32[$0>>2] = 0;
  $2 = ((($0)) + 4|0);
  HEAP32[$2>>2] = 4;
  $3 = ((($0)) + 8|0);
  HEAP32[$3>>2] = 0;
  $4 = ((($0)) + 12|0);
  HEAP32[$4>>2] = 0;
  $$0$i = $0;
  return ($$0$i|0);
 }
 return (0)|0;
}
function _ASN1_STRING_free($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($a)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($a)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 16;
  $7 = ($6|0)==(0);
  if ($7) {
   _CRYPTO_free($2);
  }
 }
 _CRYPTO_free($a);
 return;
}
function _ASN1_STRING_set0($str,$data,$len) {
 $str = $str|0;
 $data = $data|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($str)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _CRYPTO_free($1);
 }
 HEAP32[$0>>2] = $data;
 HEAP32[$str>>2] = $len;
 return;
}
function _ASN1_STRING_type_new($type) {
 $type = $type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(16,89835,408)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(13,130,65,89835,410);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$0>>2] = 0;
  $2 = ((($0)) + 4|0);
  HEAP32[$2>>2] = $type;
  $3 = ((($0)) + 8|0);
  HEAP32[$3>>2] = 0;
  $4 = ((($0)) + 12|0);
  HEAP32[$4>>2] = 0;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _ASN1_STRING_clear_free($a) {
 $a = $a|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($a)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if (!($3)) {
   $4 = ((($a)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5 & 16;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = HEAP32[$a>>2]|0;
    _OPENSSL_cleanse($2,$8);
    $$pre = HEAP32[$1>>2]|0;
    $9 = ($$pre|0)==(0|0);
    if ($9) {
     break;
    } else {
     $14 = $$pre;
    }
   } else {
    $14 = $2;
   }
   $10 = ((($a)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 & 16;
   $13 = ($12|0)==(0);
   if ($13) {
    _CRYPTO_free($14);
   }
  }
 } while(0);
 _CRYPTO_free($a);
 return;
}
function _ASN1_STRING_length($x) {
 $x = $x|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$x>>2]|0;
 return ($0|0);
}
function _ASN1_STRING_data($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($x)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _ASN1_item_pack($obj,$it,$oct) {
 $obj = $obj|0;
 $it = $it|0;
 $oct = $oct|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $octmp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oct|0)!=(0|0);
 if ($0) {
  $1 = HEAP32[$oct>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   label = 3;
  } else {
   $octmp$0 = $1;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $3 = (_ASN1_STRING_new()|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    _ERR_put_error(13,198,65,89846,172);
    $$0 = 0;
    return ($$0|0);
   } else {
    if (!($0)) {
     $octmp$0 = $3;
     break;
    }
    HEAP32[$oct>>2] = $3;
    $octmp$0 = $3;
    break;
   }
  }
 } while(0);
 $5 = ((($octmp$0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  _CRYPTO_free($6);
  HEAP32[$5>>2] = 0;
 }
 $8 = (_ASN1_item_i2d($obj,$5,$it)|0);
 HEAP32[$octmp$0>>2] = $8;
 $9 = ($8|0)==(0);
 if ($9) {
  _ERR_put_error(13,198,112,89846,186);
  $$0 = 0;
  return ($$0|0);
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $$0 = $octmp$0;
  return ($$0|0);
 }
 _ERR_put_error(13,198,65,89846,190);
 $$0 = 0;
 return ($$0|0);
}
function _ASN1_TYPE_set_octetstring($a,$data,$len) {
 $a = $a|0;
 $data = $data|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_STRING_type_new(4)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_ASN1_STRING_set($0,$data,$len)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _ASN1_STRING_free($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  _ASN1_TYPE_set($a,4,$0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _ASN1_TYPE_get_octetstring($a,$data,$max_len) {
 $a = $a|0;
 $data = $data|0;
 $max_len = $max_len|0;
 var $$0 = 0, $$max_len = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = ($0|0)==(4);
 if ($1) {
  $2 = ((($a)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$3>>2]|0;
   $8 = ($7|0)<($max_len|0);
   $$max_len = $8 ? $7 : $max_len;
   _memcpy(($data|0),($6|0),($$max_len|0))|0;
   $$0 = $7;
   return ($$0|0);
  }
 }
 _ERR_put_error(13,135,109,89857,85);
 $$0 = -1;
 return ($$0|0);
}
function _i2a_ASN1_INTEGER($bp,$a) {
 $bp = $bp|0;
 $a = $a|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, $i$02 = 0, $n$0 = 0, $n$13 = 0, $n$2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($a)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 256;
 $4 = ($3|0)==(0);
 if ($4) {
  $n$0 = 0;
 } else {
  $5 = (_BIO_write($bp,89891,1)|0);
  $6 = ($5|0)==(1);
  if ($6) {
   $n$0 = 1;
  } else {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $7 = HEAP32[$a>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = (_BIO_write($bp,89868,2)|0);
  $13 = ($12|0)==(2);
  $14 = $n$0 | 2;
  $$ = $13 ? $14 : -1;
  STACKTOP = sp;return ($$|0);
 }
 $9 = ($7|0)>(0);
 if (!($9)) {
  $$0 = $n$0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($a)) + 8|0);
 $11 = ((($buf)) + 1|0);
 $i$02 = 0;$n$13 = $n$0;
 while(1) {
  $15 = ($i$02|0)!=(0);
  $16 = (($i$02|0) % 35)&-1;
  $17 = ($16|0)==(0);
  $or$cond = $15 & $17;
  if ($or$cond) {
   $18 = (_BIO_write($bp,89871,2)|0);
   $19 = ($18|0)==(2);
   if (!($19)) {
    $$0 = -1;
    label = 13;
    break;
   }
   $20 = (($n$13) + 2)|0;
   $n$2 = $20;
  } else {
   $n$2 = $n$13;
  }
  $21 = HEAP32[$10>>2]|0;
  $22 = (($21) + ($i$02)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $24 >>> 4;
  $26 = (89874 + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  HEAP8[$buf>>0] = $27;
  $28 = HEAP8[$22>>0]|0;
  $29 = $28&255;
  $30 = $29 & 15;
  $31 = (89874 + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  HEAP8[$11>>0] = $32;
  $33 = (_BIO_write($bp,$buf,2)|0);
  $34 = ($33|0)==(2);
  if (!($34)) {
   $$0 = -1;
   label = 13;
   break;
  }
  $35 = (($n$2) + 2)|0;
  $36 = (($i$02) + 1)|0;
  $37 = HEAP32[$a>>2]|0;
  $38 = ($36|0)<($37|0);
  if ($38) {
   $i$02 = $36;$n$13 = $35;
  } else {
   $$0 = $35;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _PKCS8_pkey_set0($priv,$aobj,$version,$ptype,$pval,$penc,$penclen) {
 $priv = $priv|0;
 $aobj = $aobj|0;
 $version = $version|0;
 $ptype = $ptype|0;
 $pval = $pval|0;
 $penc = $penc|0;
 $penclen = $penclen|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ppenc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($version|0)>(-1);
 if ($0) {
  $1 = ((($priv)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_ASN1_INTEGER_set($2,$version)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $5 = ($penc|0)==(0|0);
 do {
  if ($5) {
   $ppenc$0 = 0;
  } else {
   $6 = (_ASN1_OCTET_STRING_new()|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $8 = ((($6)) + 8|0);
    HEAP32[$8>>2] = $penc;
    HEAP32[$6>>2] = $penclen;
    $9 = HEAP32[$priv>>2]|0;
    $10 = ($9|0)==(1);
    $$ = $10 ? 16 : 4;
    $11 = ((($priv)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    _ASN1_TYPE_set($12,$$,$6);
    $ppenc$0 = $8;
    break;
   }
  }
 } while(0);
 $13 = ((($priv)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_X509_ALGOR_set0($14,$aobj,$ptype,$pval)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = 1;
  return ($$0|0);
 }
 $17 = ($ppenc$0|0)==(0|0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$ppenc$0>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _PKCS8_pkey_get0($ppkalg,$pk,$ppklen,$pa,$p8) {
 $ppkalg = $ppkalg|0;
 $pk = $pk|0;
 $ppklen = $ppklen|0;
 $pa = $pa|0;
 $p8 = $p8|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ppkalg|0)==(0|0);
 if (!($0)) {
  $1 = ((($p8)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$ppkalg>>2] = $3;
 }
 $4 = ((($p8)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 4:  {
  HEAP32[$p8>>2] = 0;
  $7 = ($pk|0)==(0|0);
  if (!($7)) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$pk>>2] = $11;
   $12 = HEAP32[$4>>2]|0;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$ppklen>>2] = $15;
  }
  break;
 }
 case 16:  {
  HEAP32[$p8>>2] = 1;
  $16 = ($pk|0)==(0|0);
  if (!($16)) {
   $17 = ((($5)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   HEAP32[$pk>>2] = $20;
   $21 = HEAP32[$4>>2]|0;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$ppklen>>2] = $24;
  }
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 $25 = ($pa|0)==(0|0);
 if ($25) {
  $$0 = 1;
  return ($$0|0);
 }
 $26 = ((($p8)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$pa>>2] = $27;
 $$0 = 1;
 return ($$0|0);
}
function _ASN1_bn_print($bp,$number,$num,$buf,$off) {
 $bp = $bp|0;
 $number = $number|0;
 $num = $num|0;
 $buf = $buf|0;
 $off = $off|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $n$0 = 0, $not$ = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($num|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($num)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 89891 : 89936;
 $5 = (_BIO_indent($bp,$off,128)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($num)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$vararg_buffer>>2] = $number;
  $10 = (_BIO_printf($bp,89893,$vararg_buffer)|0);
  $not$ = ($10|0)>(0);
  $$ = $not$&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_BN_num_bits($num)|0);
 $12 = (($11) + 7)|0;
 $13 = ($12|0)<(40);
 do {
  if ($13) {
   $14 = HEAP32[$num>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $number;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $4;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $15;
   $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr6>>2] = $4;
   $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
   HEAP32[$vararg_ptr7>>2] = $15;
   $16 = (_BIO_printf($bp,89899,$vararg_buffer1)|0);
   $17 = ($16|0)<(1);
   if ($17) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   HEAP8[$buf>>0] = 0;
   $18 = HEAP8[$4>>0]|0;
   $19 = ($18<<24>>24)==(45);
   $20 = $19 ? 89919 : 89936;
   HEAP32[$vararg_buffer8>>2] = $number;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $20;
   $21 = (_BIO_printf($bp,89931,$vararg_buffer8)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $23 = ((($buf)) + 1|0);
   $24 = (_BN_bn2bin($num,$23)|0);
   $25 = HEAP8[$23>>0]|0;
   $26 = ($25<<24>>24)<(0);
   $$01 = $26 ? $buf : $23;
   $$lobit = ($25&255) >>> 7;
   $27 = $$lobit&255;
   $n$0 = (($27) + ($24))|0;
   $28 = (($off) + 4)|0;
   $i$0 = 0;
   while(1) {
    $29 = ($i$0|0)<($n$0|0);
    if (!($29)) {
     label = 14;
     break;
    }
    $30 = (($i$0|0) % 15)&-1;
    $31 = ($30|0)==(0);
    if ($31) {
     $32 = (_BIO_puts($bp,90329)|0);
     $33 = ($32|0)<(1);
     if ($33) {
      $$0 = 0;
      label = 16;
      break;
     }
     $34 = (_BIO_indent($bp,$28,128)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $$0 = 0;
      label = 16;
      break;
     }
    }
    $36 = (($$01) + ($i$0)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = (($i$0) + 1)|0;
    $40 = ($39|0)==($n$0|0);
    $41 = $40 ? 89936 : 89937;
    HEAP32[$vararg_buffer12>>2] = $38;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = $41;
    $42 = (_BIO_printf($bp,89939,$vararg_buffer12)|0);
    $43 = ($42|0)<(1);
    if ($43) {
     $$0 = 0;
     label = 16;
     break;
    } else {
     $i$0 = $39;
    }
   }
   if ((label|0) == 14) {
    $44 = (_BIO_write($bp,90329,1)|0);
    $45 = ($44|0)<(1);
    if ($45) {
     $$0 = 0;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 16) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _X509_signature_dump($bp,$sig,$indent) {
 $bp = $bp|0;
 $sig = $sig|0;
 $indent = $indent|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$sig>>2]|0;
 $1 = ((($sig)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $i$0 = 0;
 while(1) {
  $3 = ($i$0|0)<($0|0);
  if (!($3)) {
   label = 7;
   break;
  }
  $4 = (($i$0|0) % 18)&-1;
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (_BIO_write($bp,90329,1)|0);
   $7 = ($6|0)<(1);
   if ($7) {
    $$0 = 0;
    label = 8;
    break;
   }
   $8 = (_BIO_indent($bp,$indent,$indent)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    $$0 = 0;
    label = 8;
    break;
   }
  }
  $10 = (($2) + ($i$0)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($i$0) + 1)|0;
  $14 = ($13|0)==($0|0);
  $15 = $14 ? 89936 : 89937;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  $16 = (_BIO_printf($bp,89939,$vararg_buffer)|0);
  $17 = ($16|0)<(1);
  if ($17) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $i$0 = $13;
  }
 }
 if ((label|0) == 7) {
  $18 = (_BIO_write($bp,90329,1)|0);
  $19 = ($18|0)==(1);
  $$ = $19&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _ASN1_item_d2i($pval,$in,$len,$it) {
 $pval = $pval|0;
 $in = $in|0;
 $len = $len|0;
 $it = $it|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $c = 0, $ptmpval = 0, $ptmpval$pval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $c = sp + 8|0;
 $ptmpval = sp;
 HEAP32[$ptmpval>>2] = 0;
 $0 = ($pval|0)==(0|0);
 $ptmpval$pval = $0 ? $ptmpval : $pval;
 HEAP8[$c>>0] = 0;
 $1 = (_ASN1_item_ex_d2i($ptmpval$pval,$in,$len,$it,-1,0,0,$c)|0);
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$ptmpval$pval>>2]|0;
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _ASN1_item_ex_d2i($pval,$in,$len,$it,$tag,$aclass,$opt,$ctx) {
 $pval = $pval|0;
 $in = $in|0;
 $len = $len|0;
 $it = $it|0;
 $tag = $tag|0;
 $aclass = $aclass|0;
 $opt = $opt|0;
 $ctx = $ctx|0;
 var $$ = 0, $$0 = 0, $$0$i7 = 0, $$lcssa = 0, $$lcssa137 = 0, $$lcssa144 = 0, $$lcssa145 = 0, $$lcssa146 = 0, $$pr = 0, $$pre = 0, $$pre67 = 0, $$pre69 = 0, $$pre71 = 0, $$tag = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $asn1_cb$0 = 0, $cst = 0, $errtt$0 = 0, $exptag$0 = 0, $i$013 = 0, $i$027$lcssa = 0, $i$027107 = 0, $i$143 = 0, $i$2$lcssa = 0, $i$221 = 0, $i$233 = 0, $i$233$lcssa142 = 0, $i$330 = 0;
 var $imphack$0 = 0, $isopt$0 = 0, $oclass = 0, $or$cond = 0, $or$cond4 = 0, $otag = 0, $p = 0, $seq_eoc = 0, $seq_nolen$0 = 0, $tt$028$lcssa = 0, $tt$028106 = 0, $tt$144 = 0, $tt$2$lcssa = 0, $tt$224 = 0, $tt$234 = 0, $tt$234$lcssa140 = 0, $tt$331 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $wp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $p = sp + 28|0;
 $oclass = sp + 38|0;
 $seq_eoc = sp + 37|0;
 $cst = sp + 36|0;
 $otag = sp + 24|0;
 HEAP32[$0>>2] = $len;
 $1 = ((($it)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$p>>2] = 0;
 $3 = $aclass & 1024;
 $4 = $aclass & -1025;
 $5 = ($pval|0)==(0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($2|0)!=(0|0);
 if ($6) {
  $7 = ((($2)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   label = 4;
  } else {
   $asn1_cb$0 = $8;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $asn1_cb$0 = 0;
 }
 $10 = HEAP8[$it>>0]|0;
 $11 = $10 << 24 >> 24;
 L9: do {
  switch ($11|0) {
  case 0:  {
   $12 = ((($it)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $18 = (_asn1_d2i_ex_primitive($pval,$in,$len,$it,$tag,$4,$opt,$ctx)|0);
    $$0 = $18;
    STACKTOP = sp;return ($$0|0);
   }
   $15 = ($tag|0)==(-1);
   $16 = ($opt<<24>>24)==(0);
   $or$cond4 = $15 & $16;
   if (!($or$cond4)) {
    _ERR_put_error(13,120,170,89946,203);
    $errtt$0 = 0;
    break L9;
   }
   $17 = (_asn1_template_ex_d2i($pval,$in,$len,$13,0,$ctx)|0);
   $$0 = $17;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 5:  {
   $19 = HEAP32[$in>>2]|0;
   HEAP32[$p>>2] = $19;
   $20 = (_asn1_check_tlen(0,$otag,$oclass,0,0,$p,$len,-1,0,1,$ctx)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    _ERR_put_error(13,120,58,89946,219);
    $errtt$0 = 0;
    break L9;
   }
   $22 = HEAP8[$oclass>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if (!($23)) {
    $24 = ($opt<<24>>24)==(0);
    if ($24) {
     _ERR_put_error(13,120,139,89946,228);
     $errtt$0 = 0;
     break L9;
    } else {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $25 = HEAP32[$otag>>2]|0;
   $26 = ($25>>>0)>(30);
   if ($26) {
    $$0$i7 = 0;
   } else {
    $27 = (51304 + ($25<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $$0$i7 = $28;
   }
   $29 = ((($it)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 & $$0$i7;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $34 = HEAP32[$0>>2]|0;
    $35 = (_asn1_d2i_ex_primitive($pval,$in,$34,$it,$25,0,0,$ctx)|0);
    $$0 = $35;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = ($opt<<24>>24)==(0);
   if ($33) {
    _ERR_put_error(13,120,140,89946,236);
    $errtt$0 = 0;
    break L9;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 4:  {
   $36 = ((($2)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 31]($pval,$in,$len,$it,$tag,$4,$opt,$ctx)|0);
   $$0 = $38;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 3:  {
   $39 = ($opt<<24>>24)==(0);
   L42: do {
    if (!($39)) {
     $40 = HEAP32[$in>>2]|0;
     HEAP32[$p>>2] = $40;
     $41 = ($tag|0)==(-1);
     if ($41) {
      $42 = ((($it)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $exptag$0 = $43;
     } else {
      $exptag$0 = $tag;
     }
     $44 = (_asn1_check_tlen(0,0,0,0,0,$p,$len,$exptag$0,$4,1,$ctx)|0);
     switch ($44|0) {
     case 0:  {
      _ERR_put_error(13,120,58,89946,265);
      $errtt$0 = 0;
      break L9;
      break;
     }
     case -1:  {
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
      break;
     }
     default: {
      break L42;
     }
     }
    }
   } while(0);
   $45 = ($tag|0)!=(-1);
   do {
    if ($45) {
     $46 = HEAP32[$in>>2]|0;
     $47 = HEAP32[$p>>2]|0;
     $48 = ($47|0)==(0|0);
     if ($48) {
      _ERR_put_error(13,120,58,89946,288);
      $errtt$0 = 0;
      break L9;
     } else {
      $49 = HEAP8[$46>>0]|0;
      $50 = HEAP8[$47>>0]|0;
      $51 = $50&255;
      $52 = $51 & 32;
      $53 = ((($it)) + 4|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = $52 | $54;
      $56 = $55&255;
      HEAP8[$46>>0] = $56;
      $imphack$0 = $49;$wp$0 = $46;
      break;
     }
    } else {
     $imphack$0 = 0;$wp$0 = 0;
    }
   } while(0);
   $57 = ((($2)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[$0>>2]|0;
   $60 = (FUNCTION_TABLE_iiii[$58 & 63]($pval,$in,$59)|0);
   if ($45) {
    HEAP8[$wp$0>>0] = $imphack$0;
   }
   $61 = ($60|0)==(0|0);
   if ($61) {
    _ERR_put_error(13,120,58,89946,303);
    $errtt$0 = 0;
    break L9;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 2:  {
   $62 = ($asn1_cb$0|0)!=(0|0);
   if ($62) {
    $63 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](4,$pval,$it,0)|0);
    $64 = ($63|0)==(0);
    if ($64) {
     label = 107;
     break L9;
    }
   }
   $65 = HEAP32[$pval>>2]|0;
   $66 = ($65|0)==(0|0);
   if ($66) {
    $76 = (_ASN1_item_ex_new($pval,$it)|0);
    $77 = ($76|0)==(0);
    if ($77) {
     _ERR_put_error(13,120,58,89946,319);
     $errtt$0 = 0;
     break L9;
    }
   } else {
    $67 = (_asn1_get_choice_selector($pval,$it)|0);
    $68 = ($67|0)>(-1);
    if ($68) {
     $69 = ((($it)) + 12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($67|0)<($70|0);
     if ($71) {
      $72 = ((($it)) + 8|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($73) + (($67*20)|0)|0);
      $75 = (_asn1_get_field_ptr($pval,$74)|0);
      _ASN1_template_free($75,$74);
      (_asn1_set_choice_selector($pval,-1,$it)|0);
     }
    }
   }
   $78 = HEAP32[$in>>2]|0;
   HEAP32[$p>>2] = $78;
   $79 = ((($it)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80|0)>(0);
   L74: do {
    if ($81) {
     $82 = ((($it)) + 8|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (_asn1_get_field_ptr($pval,$83)|0);
     $85 = (_asn1_template_ex_d2i($84,$p,$len,$83,1,$ctx)|0);
     $86 = ($85|0)==(-1);
     if ($86) {
      $i$027107 = 0;$tt$028106 = $83;
      while(1) {
       $88 = (($i$027107) + 1)|0;
       $89 = HEAP32[$79>>2]|0;
       $90 = ($88|0)<($89|0);
       if (!($90)) {
        $96 = $89;$i$013 = $88;
        break L74;
       }
       $91 = ((($tt$028106)) + 20|0);
       $$pre69 = HEAP32[$0>>2]|0;
       $92 = (_asn1_get_field_ptr($pval,$91)|0);
       $93 = (_asn1_template_ex_d2i($92,$p,$$pre69,$91,1,$ctx)|0);
       $94 = ($93|0)==(-1);
       if ($94) {
        $i$027107 = $88;$tt$028106 = $91;
       } else {
        $$lcssa = $93;$i$027$lcssa = $88;$tt$028$lcssa = $91;
        break;
       }
      }
     } else {
      $$lcssa = $85;$i$027$lcssa = 0;$tt$028$lcssa = $83;
     }
     $87 = ($$lcssa|0)>(0);
     if ($87) {
      $$pre71 = HEAP32[$79>>2]|0;
      $96 = $$pre71;$i$013 = $i$027$lcssa;
      break;
     } else {
      _ERR_put_error(13,120,58,89946,338);
      $errtt$0 = $tt$028$lcssa;
      break L9;
     }
    } else {
     $96 = $80;$i$013 = 0;
    }
   } while(0);
   $95 = ($i$013|0)==($96|0);
   if ($95) {
    $97 = ($opt<<24>>24)==(0);
    if ($97) {
     _ERR_put_error(13,120,143,89946,350);
     $errtt$0 = 0;
     break L9;
    }
    _ASN1_item_ex_free($pval,$it);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    (_asn1_set_choice_selector($pval,$i$013,$it)|0);
    if ($62) {
     $98 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](5,$pval,$it,0)|0);
     $99 = ($98|0)==(0);
     if ($99) {
      label = 107;
      break L9;
     }
    }
    $100 = HEAP32[$p>>2]|0;
    HEAP32[$in>>2] = $100;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 1: case 6:  {
   $101 = HEAP32[$in>>2]|0;
   HEAP32[$p>>2] = $101;
   $102 = ($tag|0)==(-1);
   $$ = $102 ? 0 : $4;
   $$tag = $102 ? 16 : $tag;
   $103 = (_asn1_check_tlen($0,0,0,$seq_eoc,$cst,$p,$len,$$tag,$$,$opt,$ctx)|0);
   switch ($103|0) {
   case 0:  {
    _ERR_put_error(13,120,58,89946,374);
    $errtt$0 = 0;
    break L9;
    break;
   }
   case -1:  {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    if ($6) {
     $104 = ((($2)) + 4|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $105 & 4;
     $107 = ($106|0)==(0);
     if ($107) {
      label = 63;
     } else {
      $108 = HEAP32[$p>>2]|0;
      $109 = HEAP32[$in>>2]|0;
      $110 = $108;
      $111 = $109;
      $112 = (($len) - ($110))|0;
      $113 = (($112) + ($111))|0;
      HEAP32[$0>>2] = $113;
      $seq_nolen$0 = 1;
     }
    } else {
     label = 63;
    }
    if ((label|0) == 63) {
     $114 = HEAP8[$seq_eoc>>0]|0;
     $seq_nolen$0 = $114;
    }
    $115 = HEAP8[$cst>>0]|0;
    $116 = ($115<<24>>24)==(0);
    if ($116) {
     _ERR_put_error(13,120,149,89946,386);
     $errtt$0 = 0;
     break L9;
    }
    $117 = HEAP32[$pval>>2]|0;
    $118 = ($117|0)==(0|0);
    if ($118) {
     $119 = (_ASN1_item_ex_new($pval,$it)|0);
     $120 = ($119|0)==(0);
     if ($120) {
      _ERR_put_error(13,120,58,89946,391);
      $errtt$0 = 0;
      break L9;
     }
    }
    $121 = ($asn1_cb$0|0)!=(0|0);
    if ($121) {
     $122 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](4,$pval,$it,0)|0);
     $123 = ($122|0)==(0);
     if ($123) {
      label = 107;
      break L9;
     }
    }
    $124 = ((($it)) + 8|0);
    $125 = ((($it)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)>(0);
    $128 = HEAP32[$124>>2]|0;
    L115: do {
     if ($127) {
      $212 = $126;$i$143 = 0;$tt$144 = $128;
      while(1) {
       $129 = HEAP32[$tt$144>>2]|0;
       $130 = $129 & 768;
       $131 = ($130|0)==(0);
       if ($131) {
        $137 = $212;
       } else {
        $132 = (_asn1_do_adb($pval,$tt$144,1)|0);
        $133 = (_asn1_get_field_ptr($pval,$132)|0);
        _ASN1_template_free($133,$132);
        $$pre = HEAP32[$125>>2]|0;
        $137 = $$pre;
       }
       $134 = (($i$143) + 1)|0;
       $135 = ((($tt$144)) + 20|0);
       $136 = ($134|0)<($137|0);
       if ($136) {
        $212 = $137;$i$143 = $134;$tt$144 = $135;
       } else {
        $$lcssa146 = $137;
        break;
       }
      }
      $138 = HEAP32[$124>>2]|0;
      $139 = ($$lcssa146|0)>(0);
      if ($139) {
       $i$233 = 0;$tt$234 = $138;
       while(1) {
        $140 = (_asn1_do_adb($pval,$tt$234,1)|0);
        $141 = ($140|0)==(0|0);
        if ($141) {
         $errtt$0 = 0;
         break L9;
        }
        $142 = (_asn1_get_field_ptr($pval,$140)|0);
        $143 = HEAP32[$0>>2]|0;
        $144 = ($143|0)==(0);
        if ($144) {
         $i$2$lcssa = $i$233;$tt$2$lcssa = $tt$234;
         label = 90;
         break L115;
        }
        $145 = HEAP32[$p>>2]|0;
        $146 = ($143|0)<(2);
        if (!($146)) {
         $147 = HEAP8[$145>>0]|0;
         $148 = ($147<<24>>24)==(0);
         if ($148) {
          $149 = ((($145)) + 1|0);
          $150 = HEAP8[$149>>0]|0;
          $151 = ($150<<24>>24)==(0);
          if ($151) {
           $$lcssa144 = $143;$$lcssa145 = $145;$i$233$lcssa142 = $i$233;$tt$234$lcssa140 = $tt$234;
           break;
          }
         }
        }
        $156 = HEAP32[$125>>2]|0;
        $157 = (($156) + -1)|0;
        $158 = ($i$233|0)==($157|0);
        if ($158) {
         $isopt$0 = 0;
        } else {
         $159 = HEAP32[$140>>2]|0;
         $160 = $159 & 1;
         $161 = $160&255;
         $isopt$0 = $161;
        }
        $162 = (_asn1_template_ex_d2i($142,$p,$143,$140,$isopt$0,$ctx)|0);
        switch ($162|0) {
        case 0:  {
         $errtt$0 = $140;
         break L9;
         break;
        }
        case -1:  {
         _ASN1_template_free($142,$140);
         break;
        }
        default: {
         $163 = HEAP32[$p>>2]|0;
         $164 = $163;
         $165 = $145;
         $166 = HEAP32[$0>>2]|0;
         $167 = (($165) - ($164))|0;
         $168 = (($167) + ($166))|0;
         HEAP32[$0>>2] = $168;
        }
        }
        $169 = (($i$233) + 1)|0;
        $170 = ((($tt$234)) + 20|0);
        $171 = HEAP32[$125>>2]|0;
        $172 = ($169|0)<($171|0);
        if ($172) {
         $i$233 = $169;$tt$234 = $170;
        } else {
         $i$2$lcssa = $169;$tt$2$lcssa = $170;
         label = 90;
         break L115;
        }
       }
       $152 = ((($$lcssa145)) + 2|0);
       HEAP32[$p>>2] = $152;
       $153 = HEAP8[$seq_eoc>>0]|0;
       $154 = ($153<<24>>24)==(0);
       if ($154) {
        _ERR_put_error(13,120,159,89946,423);
        $errtt$0 = 0;
        break L9;
       } else {
        $155 = (($$lcssa144) + -2)|0;
        HEAP32[$0>>2] = $155;
        HEAP8[$seq_eoc>>0] = 0;
        $184 = $155;$i$221 = $i$233$lcssa142;$tt$224 = $tt$234$lcssa140;
        break;
       }
      } else {
       $i$2$lcssa = 0;$tt$2$lcssa = $138;
       label = 90;
      }
     } else {
      $i$2$lcssa = 0;$tt$2$lcssa = $128;
      label = 90;
     }
    } while(0);
    do {
     if ((label|0) == 90) {
      $$pr = HEAP8[$seq_eoc>>0]|0;
      $173 = ($$pr<<24>>24)==(0);
      $$pre67 = HEAP32[$0>>2]|0;
      if ($173) {
       $184 = $$pre67;$i$221 = $i$2$lcssa;$tt$224 = $tt$2$lcssa;
      } else {
       $174 = ($$pre67|0)<(2);
       if (!($174)) {
        $175 = HEAP32[$p>>2]|0;
        $176 = HEAP8[$175>>0]|0;
        $177 = ($176<<24>>24)==(0);
        if ($177) {
         $178 = ((($175)) + 1|0);
         $179 = HEAP8[$178>>0]|0;
         $180 = ($179<<24>>24)==(0);
         if ($180) {
          $181 = ((($175)) + 2|0);
          HEAP32[$p>>2] = $181;
          $184 = $$pre67;$i$221 = $i$2$lcssa;$tt$224 = $tt$2$lcssa;
          break;
         }
        }
       }
       _ERR_put_error(13,120,137,89946,462);
       $errtt$0 = 0;
       break L9;
      }
     }
    } while(0);
    $182 = ($seq_nolen$0<<24>>24)==(0);
    $183 = ($184|0)!=(0);
    $or$cond = $182 & $183;
    if ($or$cond) {
     _ERR_put_error(13,120,148,89946,467);
     $errtt$0 = 0;
     break L9;
    }
    $185 = HEAP32[$125>>2]|0;
    $186 = ($i$221|0)<($185|0);
    L153: do {
     if ($186) {
      $i$330 = $i$221;$tt$331 = $tt$224;
      while(1) {
       $187 = (_asn1_do_adb($pval,$tt$331,1)|0);
       $188 = ($187|0)==(0|0);
       if ($188) {
        $errtt$0 = 0;
        break L9;
       }
       $189 = HEAP32[$187>>2]|0;
       $190 = $189 & 1;
       $191 = ($190|0)==(0);
       if ($191) {
        $$lcssa137 = $187;
        break;
       }
       $192 = (_asn1_get_field_ptr($pval,$187)|0);
       _ASN1_template_free($192,$187);
       $193 = ((($tt$331)) + 20|0);
       $194 = (($i$330) + 1)|0;
       $195 = HEAP32[$125>>2]|0;
       $196 = ($194|0)<($195|0);
       if ($196) {
        $i$330 = $194;$tt$331 = $193;
       } else {
        break L153;
       }
      }
      _ERR_put_error(13,120,121,89946,487);
      $errtt$0 = $$lcssa137;
      break L9;
     }
    } while(0);
    $197 = HEAP32[$in>>2]|0;
    $198 = HEAP32[$p>>2]|0;
    $199 = $198;
    $200 = $197;
    $201 = (($199) - ($200))|0;
    $202 = (_asn1_enc_save($pval,$197,$201,$it)|0);
    $203 = ($202|0)==(0);
    if ($203) {
     label = 107;
     break L9;
    }
    if ($121) {
     $204 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](5,$pval,$it,0)|0);
     $205 = ($204|0)==(0);
     if ($205) {
      label = 107;
      break L9;
     }
    }
    HEAP32[$in>>2] = $199;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  default: {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 if ((label|0) == 107) {
  _ERR_put_error(13,120,100,89946,503);
  $errtt$0 = 0;
 }
 $206 = ($3|0)==(0);
 if ($206) {
  _ASN1_item_ex_free($pval,$it);
 }
 $207 = ($errtt$0|0)==(0|0);
 $208 = ((($it)) + 24|0);
 $209 = HEAP32[$208>>2]|0;
 if ($207) {
  HEAP32[$vararg_buffer4>>2] = 89972;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $209;
  _ERR_add_error_data(2,$vararg_buffer4);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $210 = ((($errtt$0)) + 12|0);
  $211 = HEAP32[$210>>2]|0;
  HEAP32[$vararg_buffer>>2] = 89957;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $211;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 89964;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $209;
  _ERR_add_error_data(4,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _asn1_ex_c2i($pval,$cont,$len,$utype,$free_cont,$it) {
 $pval = $pval|0;
 $cont = $cont|0;
 $len = $len|0;
 $utype = $utype|0;
 $free_cont = $free_cont|0;
 $it = $it|0;
 var $$0 = 0, $$02 = 0, $$old = 0, $$old3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $opval$0 = 0, $or$cond = 0, $stmp$0 = 0;
 var $typ$0 = 0, $typ$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $cont;
 $1 = ((($it)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = (FUNCTION_TABLE_iiiiiii[$5 & 31]($pval,$cont,$len,$utype,$free_cont,$it)|0);
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = ((($it)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(-4);
 if ($10) {
  $11 = HEAP32[$pval>>2]|0;
  $12 = ($11|0)==(0|0);
  do {
   if ($12) {
    $13 = (_ASN1_TYPE_new()|0);
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     HEAP32[$pval>>2] = $13;
     $typ$0 = $13;
     break;
    }
    _ASN1_TYPE_free(0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $typ$0 = $11;
   }
  } while(0);
  $15 = HEAP32[$typ$0>>2]|0;
  $16 = ($15|0)==($utype|0);
  if (!($16)) {
   _ASN1_TYPE_set($typ$0,$utype,0);
  }
  $17 = ((($typ$0)) + 4|0);
  $$02 = $17;$opval$0 = $pval;$typ$1 = $typ$0;
 } else {
  $$02 = $pval;$opval$0 = 0;$typ$1 = 0;
 }
 L20: do {
  switch ($utype|0) {
  case 6:  {
   $18 = (_c2i_ASN1_OBJECT($$02,$0,$len)|0);
   $19 = ($18|0)==(0|0);
   if ($19) {
    label = 41;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 5:  {
   $20 = ($len|0)==(0);
   if ($20) {
    HEAP32[$$02>>2] = (1);
    label = 39;
    break L20;
   } else {
    _ERR_put_error(13,204,144,89946,881);
    label = 41;
    break L20;
   }
   break;
  }
  case 1:  {
   $21 = ($len|0)==(1);
   if (!($21)) {
    _ERR_put_error(13,204,106,89946,889);
    label = 41;
    break L20;
   }
   $22 = HEAP8[$cont>>0]|0;
   $23 = $22&255;
   HEAP32[$$02>>2] = $23;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 3:  {
   $24 = (_c2i_ASN1_BIT_STRING($$02,$0,$len)|0);
   $25 = ($24|0)==(0|0);
   if ($25) {
    label = 41;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 266: case 10: case 258: case 2:  {
   $26 = (_c2i_ASN1_INTEGER($$02,$0,$len)|0);
   $27 = ($26|0)==(0|0);
   if ($27) {
    label = 41;
   } else {
    $28 = HEAP32[$$02>>2]|0;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30 & 256;
    $32 = $31 | $utype;
    HEAP32[$29>>2] = $32;
    label = 39;
   }
   break;
  }
  case 30:  {
   $33 = $len & 1;
   $34 = ($33|0)==(0);
   if ($34) {
    label = 28;
   } else {
    _ERR_put_error(13,204,214,89946,933);
    label = 41;
   }
   break;
  }
  case 28:  {
   $$old = $len & 3;
   $$old3 = ($$old|0)==(0);
   if ($$old3) {
    label = 28;
   } else {
    _ERR_put_error(13,204,215,89946,938);
    label = 41;
   }
   break;
  }
  default: {
   label = 28;
  }
  }
 } while(0);
 L40: do {
  if ((label|0) == 28) {
   $35 = HEAP32[$$02>>2]|0;
   $36 = ($35|0)==(0|0);
   do {
    if ($36) {
     $37 = (_ASN1_STRING_type_new($utype)|0);
     $38 = ($37|0)==(0|0);
     if ($38) {
      _ERR_put_error(13,204,65,89946,945);
      label = 41;
      break L40;
     } else {
      HEAP32[$$02>>2] = $37;
      $stmp$0 = $37;
      break;
     }
    } else {
     $39 = ((($35)) + 4|0);
     HEAP32[$39>>2] = $utype;
     $stmp$0 = $35;
    }
   } while(0);
   $40 = HEAP8[$free_cont>>0]|0;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $46 = HEAP32[$0>>2]|0;
    $47 = (_ASN1_STRING_set($stmp$0,$46,$len)|0);
    $48 = ($47|0)==(0);
    if ($48) {
     _ERR_put_error(13,204,65,89946,962);
     _ASN1_STRING_free($stmp$0);
     HEAP32[$$02>>2] = 0;
     label = 41;
     break;
    } else {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $42 = ((($stmp$0)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     _CRYPTO_free($43);
    }
    $45 = HEAP32[$0>>2]|0;
    HEAP32[$42>>2] = $45;
    HEAP32[$stmp$0>>2] = $len;
    HEAP8[$free_cont>>0] = 0;
    label = 39;
    break;
   }
  }
 } while(0);
 if ((label|0) == 39) {
  $49 = ($typ$1|0)!=(0|0);
  $50 = ($utype|0)==(5);
  $or$cond = $50 & $49;
  if (!($or$cond)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $51 = ((($typ$1)) + 4|0);
  HEAP32[$51>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 41) {
  _ASN1_TYPE_free($typ$1);
  $52 = ($opval$0|0)==(0|0);
  if ($52) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$opval$0>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _asn1_template_ex_d2i($val,$in,$inlen,$tt,$opt,$ctx) {
 $val = $val|0;
 $in = $in|0;
 $inlen = $inlen|0;
 $tt = $tt|0;
 $opt = $opt|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cst = 0, $exp_eoc = 0, $len = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $len = sp + 4|0;
 $p = sp;
 $exp_eoc = sp + 9|0;
 $cst = sp + 8|0;
 $0 = ($val|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$tt>>2]|0;
 $2 = HEAP32[$in>>2]|0;
 HEAP32[$p>>2] = $2;
 $3 = $1 & 16;
 $4 = ($3|0)==(0);
 if ($4) {
  $32 = (_asn1_template_noexp_d2i($val,$in,$inlen,$tt,$opt,$ctx)|0);
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $1 & 192;
 $6 = ((($tt)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_asn1_check_tlen($len,0,0,$exp_eoc,$cst,$p,$inlen,$7,$5,$opt,$ctx)|0);
 $9 = HEAP32[$p>>2]|0;
 switch ($8|0) {
 case 0:  {
  _ERR_put_error(13,132,58,89946,548);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case -1:  {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $10 = HEAP8[$cst>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   _ERR_put_error(13,132,120,89946,554);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $12 = HEAP32[$len>>2]|0;
  $13 = (_asn1_template_noexp_d2i($val,$p,$12,$tt,0,$ctx)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   _ERR_put_error(13,132,58,89946,560);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = HEAP32[$p>>2]|0;
  $16 = $15;
  $17 = $9;
  $18 = HEAP32[$len>>2]|0;
  $19 = (($17) - ($16))|0;
  $20 = (($19) + ($18))|0;
  HEAP32[$len>>2] = $20;
  $21 = HEAP8[$exp_eoc>>0]|0;
  $22 = ($21<<24>>24)==(0);
  do {
   if ($22) {
    $31 = ($20|0)==(0);
    if ($31) {
     $33 = $16;
     label = 18;
    } else {
     _ERR_put_error(13,132,119,89946,577);
     label = 19;
    }
   } else {
    $23 = ($20|0)<(2);
    if (!($23)) {
     $24 = HEAP8[$15>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $26 = ((($15)) + 1|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = ($27<<24>>24)==(0);
      if ($28) {
       $29 = ((($15)) + 2|0);
       HEAP32[$p>>2] = $29;
       $30 = $29;
       $33 = $30;
       label = 18;
       break;
      }
     }
    }
    _ERR_put_error(13,132,137,89946,568);
    label = 19;
   }
  } while(0);
  if ((label|0) == 18) {
   HEAP32[$in>>2] = $33;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 19) {
   _ASN1_template_free($val,$tt);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 }
 return (0)|0;
}
function _asn1_d2i_ex_primitive($pval,$in,$inlen,$it,$tag,$aclass,$opt,$ctx) {
 $pval = $pval|0;
 $in = $in|0;
 $inlen = $inlen|0;
 $it = $it|0;
 $tag = $tag|0;
 $aclass = $aclass|0;
 $opt = $opt|0;
 $ctx = $ctx|0;
 var $$$012 = 0, $$0 = 0, $$0$i2$i = 0, $$01$ph22$i = 0, $$0114$i = 0, $$0114$i$lcssa = 0, $$012 = 0, $$aclass = 0, $$lcssa = 0, $$lcssa85 = 0, $$ph20$i = 0, $$ph621$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi41Z2D = 0, $$pre$phiZ2D = 0, $$pre39$i = 0, $$pre41$i = 0, $$pre41$i$lcssa = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buf = 0, $cont$0 = 0, $cst = 0, $expected_eoc$0$ph23$i = 0, $expected_eoc$015$i = 0, $expected_eoc$015$i$lcssa = 0, $expected_eoc$1$i = 0, $expected_eoc$1$i$lcssa = 0, $free_cont = 0, $inf = 0, $inf3$ph19$i = 0, $inf4$i = 0, $len$0 = 0, $oclass = 0, $p = 0, $p$i$i = 0, $pclass$i$i = 0, $plen = 0, $plen$i$i = 0, $ptag$i$i = 0;
 var $ret$0 = 0, $storemerge = 0, $utype = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ptag$i$i = sp + 36|0;
 $pclass$i$i = sp + 32|0;
 $plen$i$i = sp + 28|0;
 $p$i$i = sp + 24|0;
 $utype = sp + 20|0;
 $plen = sp + 16|0;
 $cst = sp + 43|0;
 $inf = sp + 42|0;
 $free_cont = sp + 41|0;
 $p = sp + 12|0;
 $buf = sp;
 $oclass = sp + 40|0;
 HEAP8[$free_cont>>0] = 0;
 ;HEAP32[$buf>>2]=0|0;HEAP32[$buf+4>>2]=0|0;HEAP32[$buf+8>>2]=0|0;
 $0 = ($pval|0)==(0|0);
 if ($0) {
  _ERR_put_error(13,108,125,89946,724);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$it>>0]|0;
 $2 = ($1<<24>>24)==(5);
 if ($2) {
  $$012 = -1;$storemerge = $tag;
 } else {
  $3 = ((($it)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $$012 = $tag;$storemerge = $4;
 }
 HEAP32[$utype>>2] = $storemerge;
 $5 = ($storemerge|0)==(-4);
 do {
  if ($5) {
   $6 = ($$012|0)>(-1);
   if ($6) {
    _ERR_put_error(13,108,127,89946,738);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($opt<<24>>24)==(0);
   if (!($7)) {
    _ERR_put_error(13,108,126,89946,743);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $8 = HEAP32[$in>>2]|0;
   HEAP32[$p>>2] = $8;
   $9 = (_asn1_check_tlen(0,$utype,$oclass,0,0,$p,$inlen,-1,0,0,$ctx)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    _ERR_put_error(13,108,58,89946,750);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = HEAP8[$oclass>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$pre = HEAP32[$utype>>2]|0;
    $$pre$phi41Z2D = $p;$$pre$phiZ2D = $in;$14 = $$pre;
    break;
   } else {
    HEAP32[$utype>>2] = -3;
    $$pre$phi41Z2D = $p;$$pre$phiZ2D = $in;$14 = -3;
    break;
   }
  } else {
   $$pre$phi41Z2D = $p;$$pre$phiZ2D = $in;$14 = $storemerge;
  }
 } while(0);
 $13 = ($$012|0)==(-1);
 $$aclass = $13 ? 0 : $aclass;
 $$$012 = $13 ? $14 : $$012;
 $15 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$$pre$phi41Z2D>>2] = $15;
 $16 = (_asn1_check_tlen($plen,0,0,$inf,$cst,$p,$inlen,$$$012,$$aclass,$opt,$ctx)|0);
 switch ($16|0) {
 case 0:  {
  _ERR_put_error(13,108,58,89946,765);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case -1:  {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $17 = HEAP32[$utype>>2]|0;
  L29: do {
   switch ($17|0) {
   case -3:  {
    $18 = ($ctx|0)==(0|0);
    if ($18) {
     label = 23;
    } else {
     HEAP8[$ctx>>0] = 0;
     label = 23;
    }
    break;
   }
   case 17: case 16:  {
    $19 = HEAP8[$cst>>0]|0;
    $20 = ($19<<24>>24)==(0);
    if ($20) {
     _ERR_put_error(13,108,156,89946,783);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     label = 23;
    }
    break;
   }
   default: {
    $73 = HEAP8[$cst>>0]|0;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $87 = HEAP32[$p>>2]|0;
     $88 = HEAP32[$plen>>2]|0;
     $89 = (($87) + ($88)|0);
     HEAP32[$p>>2] = $89;
     $cont$0 = $87;$len$0 = $88;
     label = 53;
     break L29;
    }
    switch ($17|0) {
    case 1: case 2: case 5: case 6: case 10:  {
     _ERR_put_error(13,108,218,89946,801);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    default: {
    }
    }
    HEAP8[$free_cont>>0] = 1;
    $75 = HEAP32[$plen>>2]|0;
    $76 = HEAP8[$inf>>0]|0;
    $77 = (_asn1_collect($buf,$p,$75,$76,0)|0);
    $78 = ($77|0)==(0);
    if ($78) {
     $ret$0 = 0;
    } else {
     $79 = HEAP32[$buf>>2]|0;
     $80 = (($79) + 1)|0;
     $81 = (_BUF_MEM_grow_clean($buf,$80)|0);
     $82 = ($81|0)==(0);
     if ($82) {
      _ERR_put_error(13,108,65,89946,819);
      $ret$0 = 0;
      break L29;
     } else {
      $83 = ((($buf)) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (($84) + ($79)|0);
      HEAP8[$85>>0] = 0;
      $86 = HEAP32[$83>>2]|0;
      $cont$0 = $86;$len$0 = $79;
      label = 53;
      break L29;
     }
    }
   }
   }
  } while(0);
  L47: do {
   if ((label|0) == 23) {
    $21 = HEAP32[$in>>2]|0;
    $22 = HEAP8[$inf>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     $66 = HEAP32[$p>>2]|0;
     $67 = $66;
     $68 = $21;
     $69 = (($67) - ($68))|0;
     $70 = HEAP32[$plen>>2]|0;
     $71 = (($69) + ($70))|0;
     $72 = (($66) + ($70)|0);
     HEAP32[$p>>2] = $72;
     $cont$0 = $21;$len$0 = $71;
     label = 53;
     break;
    }
    $24 = HEAP32[$plen>>2]|0;
    $25 = ($24|0)>(0);
    L52: do {
     if ($25) {
      $26 = HEAP32[$$pre$phi41Z2D>>2]|0;
      $$01$ph22$i = $24;$$ph20$i = 0;$$ph621$i = $26;$expected_eoc$0$ph23$i = 1;$inf3$ph19$i = $22;
      L54: while(1) {
       $$0114$i = $$01$ph22$i;$28 = $$ph621$i;$expected_eoc$015$i = $expected_eoc$0$ph23$i;
       while(1) {
        $27 = ($$0114$i|0)<(2);
        $$pre41$i = $28;
        if ($27) {
         $$0114$i$lcssa = $$0114$i;$$lcssa = $28;$$pre41$i$lcssa = $$pre41$i;$expected_eoc$015$i$lcssa = $expected_eoc$015$i;
         break;
        }
        $29 = HEAP8[$$pre41$i>>0]|0;
        $30 = ($29<<24>>24)==(0);
        if (!($30)) {
         $$0114$i$lcssa = $$0114$i;$$lcssa = $28;$$pre41$i$lcssa = $$pre41$i;$expected_eoc$015$i$lcssa = $expected_eoc$015$i;
         break;
        }
        $31 = ((($$pre41$i)) + 1|0);
        $32 = HEAP8[$31>>0]|0;
        $33 = ($32<<24>>24)==(0);
        if (!($33)) {
         $$0114$i$lcssa = $$0114$i;$$lcssa = $28;$$pre41$i$lcssa = $$pre41$i;$expected_eoc$015$i$lcssa = $expected_eoc$015$i;
         break;
        }
        $34 = ((($$pre41$i)) + 2|0);
        $35 = $34;
        $36 = (($expected_eoc$015$i) + -1)|0;
        $37 = ($36|0)==(0);
        if ($37) {
         $63 = $35;
         break L54;
        }
        $38 = (($$0114$i) + -2)|0;
        $39 = ($$0114$i|0)>(2);
        if ($39) {
         $$0114$i = $38;$28 = $35;$expected_eoc$015$i = $36;
        } else {
         break L52;
        }
       }
       HEAP32[$p$i$i>>2] = $$pre41$i$lcssa;
       $40 = (_ASN1_get_object($p$i$i,$plen$i$i,$ptag$i$i,$pclass$i$i,$$0114$i$lcssa)|0);
       $41 = $40 & 128;
       $42 = ($41|0)==(0);
       if ($42) {
        $43 = $40 & 1;
        $44 = ($43|0)==(0);
        if ($44) {
         $$pre$i = HEAP32[$plen$i$i>>2]|0;
         $$pre39$i = HEAP32[$p$i$i>>2]|0;
         $100 = $$pre$i;$99 = $$pre39$i;
        } else {
         $45 = HEAP32[$p$i$i>>2]|0;
         $46 = $45;
         $47 = (($$lcssa) + ($$0114$i$lcssa))|0;
         $48 = (($47) - ($46))|0;
         HEAP32[$plen$i$i>>2] = $48;
         $100 = $48;$99 = $46;
        }
        $49 = $43&255;
        $$0$i2$i = 0;$52 = $99;$54 = $100;$inf4$i = $49;
       } else {
        _ERR_put_error(13,104,102,89946,1187);
        $$0$i2$i = 1;$52 = $$lcssa;$54 = $$ph20$i;$inf4$i = $inf3$ph19$i;
       }
       if ($$0$i2$i) {
        label = 38;
        break;
       }
       $50 = ($inf4$i<<24>>24)==(0);
       $51 = $52;
       $53 = (($51) + ($54)|0);
       $55 = $53;
       $56 = $50 ? $55 : $52;
       $57 = $50&1;
       $58 = $57 ^ 1;
       $expected_eoc$1$i = (($58) + ($expected_eoc$015$i$lcssa))|0;
       $59 = (($$lcssa) + ($$0114$i$lcssa))|0;
       $60 = (($59) - ($56))|0;
       $61 = ($60|0)>(0);
       if ($61) {
        $$01$ph22$i = $60;$$ph20$i = $54;$$ph621$i = $56;$expected_eoc$0$ph23$i = $expected_eoc$1$i;$inf3$ph19$i = $inf4$i;
       } else {
        $$lcssa85 = $56;$expected_eoc$1$i$lcssa = $expected_eoc$1$i;
        label = 41;
        break;
       }
      }
      if ((label|0) == 38) {
       _ERR_put_error(13,190,58,89946,1020);
       $ret$0 = 0;
       break L47;
      }
      else if ((label|0) == 41) {
       $62 = ($expected_eoc$1$i$lcssa|0)==(0);
       if ($62) {
        $63 = $$lcssa85;
       } else {
        break;
       }
      }
      HEAP32[$$pre$phi41Z2D>>2] = $63;
      $64 = $21;
      $65 = (($63) - ($64))|0;
      $cont$0 = $21;$len$0 = $65;
      label = 53;
      break L47;
     }
    } while(0);
    _ERR_put_error(13,190,137,89946,1030);
    $ret$0 = 0;
   }
  } while(0);
  if ((label|0) == 53) {
   $90 = HEAP32[$utype>>2]|0;
   $91 = (_asn1_ex_c2i($pval,$cont$0,$len$0,$90,$free_cont,$it)|0);
   $92 = ($91|0)==(0);
   if ($92) {
    $ret$0 = 0;
   } else {
    $93 = HEAP32[$$pre$phi41Z2D>>2]|0;
    HEAP32[$$pre$phiZ2D>>2] = $93;
    $ret$0 = 1;
   }
  }
  $94 = HEAP8[$free_cont>>0]|0;
  $95 = ($94<<24>>24)==(0);
  if ($95) {
   $$0 = $ret$0;
   STACKTOP = sp;return ($$0|0);
  }
  $96 = ((($buf)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)==(0|0);
  if ($98) {
   $$0 = $ret$0;
   STACKTOP = sp;return ($$0|0);
  }
  _CRYPTO_free($97);
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _asn1_check_tlen($olen,$otag,$oclass,$inf,$cst,$in,$len,$exptag,$expclass,$opt,$ctx) {
 $olen = $olen|0;
 $otag = $otag|0;
 $oclass = $oclass|0;
 $inf = $inf|0;
 $cst = $cst|0;
 $in = $in|0;
 $len = $len|0;
 $exptag = $exptag|0;
 $expclass = $expclass|0;
 $opt = $opt|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$0 = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $pclass = 0, $plen = 0, $ptag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ptag = sp + 12|0;
 $pclass = sp + 8|0;
 $plen = sp + 4|0;
 $p = sp;
 $0 = HEAP32[$in>>2]|0;
 HEAP32[$p>>2] = $0;
 $1 = ($ctx|0)!=(0|0);
 do {
  if ($1) {
   $2 = HEAP8[$ctx>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = ((($ctx)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ((($ctx)) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    HEAP32[$plen>>2] = $7;
    $8 = ((($ctx)) + 16|0);
    $9 = HEAP32[$8>>2]|0;
    HEAP32[$pclass>>2] = $9;
    $10 = ((($ctx)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    HEAP32[$ptag>>2] = $11;
    $12 = ((($ctx)) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($0) + ($13)|0);
    HEAP32[$p>>2] = $14;
    $i$0 = $5;
    break;
   }
   $16 = (_ASN1_get_object($p,$plen,$ptag,$pclass,$len)|0);
   $17 = ((($ctx)) + 4|0);
   HEAP32[$17>>2] = $16;
   $18 = HEAP32[$plen>>2]|0;
   $19 = ((($ctx)) + 8|0);
   HEAP32[$19>>2] = $18;
   $20 = HEAP32[$pclass>>2]|0;
   $21 = ((($ctx)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = HEAP32[$ptag>>2]|0;
   $23 = ((($ctx)) + 12|0);
   HEAP32[$23>>2] = $22;
   $24 = HEAP32[$p>>2]|0;
   $25 = $24;
   $26 = $0;
   $27 = (($25) - ($26))|0;
   $28 = ((($ctx)) + 20|0);
   HEAP32[$28>>2] = $27;
   HEAP8[$ctx>>0] = 1;
   $29 = $16 & 129;
   $30 = ($29|0)==(0);
   $31 = (($27) + ($18))|0;
   $32 = ($31|0)>($len|0);
   $or$cond3 = $30 & $32;
   if ($or$cond3) {
    _ERR_put_error(13,104,155,89946,1179);
    HEAP8[$ctx>>0] = 0;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $i$0 = $16;
   }
  } else {
   $15 = (_ASN1_get_object($p,$plen,$ptag,$pclass,$len)|0);
   $i$0 = $15;
  }
 } while(0);
 $33 = $i$0 & 128;
 $34 = ($33|0)==(0);
 if (!($34)) {
  _ERR_put_error(13,104,102,89946,1187);
  if (!($1)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$ctx>>0] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = ($exptag|0)>(-1);
 do {
  if ($35) {
   $36 = HEAP32[$ptag>>2]|0;
   $37 = ($36|0)==($exptag|0);
   $38 = HEAP32[$pclass>>2]|0;
   $39 = ($38|0)==($expclass|0);
   $or$cond = $37 & $39;
   if ($or$cond) {
    if (!($1)) {
     break;
    }
    HEAP8[$ctx>>0] = 0;
    break;
   }
   $40 = ($opt<<24>>24)==(0);
   if (!($40)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   if ($1) {
    HEAP8[$ctx>>0] = 0;
   }
   _ERR_put_error(13,104,168,89946,1199);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $41 = $i$0 & 1;
 $42 = ($41|0)==(0);
 if (!($42)) {
  $43 = HEAP32[$p>>2]|0;
  $44 = $43;
  $45 = $0;
  $46 = (($45) + ($len))|0;
  $47 = (($46) - ($44))|0;
  HEAP32[$plen>>2] = $47;
 }
 $48 = ($inf|0)==(0|0);
 if (!($48)) {
  $49 = $41&255;
  HEAP8[$inf>>0] = $49;
 }
 $50 = ($cst|0)==(0|0);
 if (!($50)) {
  $51 = $i$0 & 32;
  $52 = $51&255;
  HEAP8[$cst>>0] = $52;
 }
 $53 = ($olen|0)==(0|0);
 if (!($53)) {
  $54 = HEAP32[$plen>>2]|0;
  HEAP32[$olen>>2] = $54;
 }
 $55 = ($oclass|0)==(0|0);
 if (!($55)) {
  $56 = HEAP32[$pclass>>2]|0;
  $57 = $56&255;
  HEAP8[$oclass>>0] = $57;
 }
 $58 = ($otag|0)==(0|0);
 if (!($58)) {
  $59 = HEAP32[$ptag>>2]|0;
  HEAP32[$otag>>2] = $59;
 }
 $60 = HEAP32[$p>>2]|0;
 HEAP32[$in>>2] = $60;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _asn1_collect($buf,$in,$len,$inf,$depth) {
 $buf = $buf|0;
 $in = $in|0;
 $len = $len|0;
 $inf = $inf|0;
 $depth = $depth|0;
 var $$0 = 0, $$0$i1 = 0, $$0$i1$us = 0, $$028 = 0, $$028$us = 0, $$lcssa = 0, $$pre = 0, $$pre24 = 0, $$pre26 = 0, $$pre28 = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $p = 0, $p$i = 0, $pclass$i = 0, $plen$i = 0, $ptag$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ptag$i = sp + 16|0;
 $pclass$i = sp + 12|0;
 $plen$i = sp + 8|0;
 $p$i = sp + 4|0;
 $p = sp;
 $0 = HEAP32[$in>>2]|0;
 HEAP32[$p>>2] = $0;
 $1 = $inf&255;
 $2 = $1 & 1;
 $3 = $2&255;
 $4 = ($buf|0)!=(0|0);
 $5 = ($3<<24>>24)!=(0);
 $or$cond = $4 | $5;
 $6 = $0;
 if (!($or$cond)) {
  $52 = (($6) + ($len)|0);
  HEAP32[$in>>2] = $52;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ($len|0)>(0);
 L5: do {
  if ($7) {
   $8 = ($buf|0)==(0|0);
   $9 = ((($buf)) + 4|0);
   $10 = ($depth|0)>(4);
   $11 = (($depth) + 1)|0;
   L7: do {
    if ($10) {
     $$028$us = $len;$103 = $0;$104 = 0;$14 = $6;
     while(1) {
      $12 = ($$028$us|0)<(2);
      if (!($12)) {
       $13 = HEAP8[$14>>0]|0;
       $15 = ($13<<24>>24)==(0);
       if ($15) {
        $16 = ((($14)) + 1|0);
        $17 = HEAP8[$16>>0]|0;
        $18 = ($17<<24>>24)==(0);
        if ($18) {
         $$lcssa = $14;
         label = 25;
         break L7;
        }
       }
      }
      HEAP32[$p$i>>2] = $14;
      $19 = (_ASN1_get_object($p$i,$plen$i,$ptag$i,$pclass$i,$$028$us)|0);
      $20 = $19 & 128;
      $21 = ($20|0)==(0);
      if ($21) {
       $22 = $19 & 1;
       $23 = ($22|0)==(0);
       if ($23) {
        $$pre28 = HEAP32[$plen$i>>2]|0;
        $$pre29 = HEAP32[$p$i>>2]|0;
        $110 = $$pre28;$31 = $$pre29;
       } else {
        $24 = HEAP32[$p$i>>2]|0;
        $25 = $24;
        $26 = $14;
        $27 = (($26) + ($$028$us))|0;
        $28 = (($27) - ($25))|0;
        HEAP32[$plen$i>>2] = $28;
        $110 = $28;$31 = $25;
       }
       $29 = $19 & 32;
       $30 = $29&255;
       HEAP32[$p>>2] = $31;
       $32 = $31;
       $$0$i1$us = 0;$109 = $31;$34 = $30;$36 = $110;$43 = $32;
      } else {
       _ERR_put_error(13,104,102,89946,1187);
       $$0$i1$us = 1;$109 = $103;$34 = 0;$36 = $104;$43 = $14;
      }
      if ($$0$i1$us) {
       label = 34;
       break L7;
      }
      $33 = ($34<<24>>24)==(0);
      if (!($33)) {
       break;
      }
      $35 = ($36|0)==(0);
      if ($35) {
       $111 = $109;$47 = $43;
      } else {
       if (!($8)) {
        $37 = HEAP32[$buf>>2]|0;
        $38 = (($37) + ($36))|0;
        $39 = (_BUF_MEM_grow_clean($buf,$38)|0);
        $40 = ($39|0)==(0);
        if ($40) {
         label = 42;
         break L7;
        }
        $41 = HEAP32[$9>>2]|0;
        $42 = (($41) + ($37)|0);
        _memcpy(($42|0),($43|0),($36|0))|0;
       }
       $44 = (($43) + ($36)|0);
       HEAP32[$p>>2] = $44;
       $45 = $44;
       $111 = $45;$47 = $44;
      }
      $46 = $47;
      $48 = $14;
      $49 = (($48) + ($$028$us))|0;
      $50 = (($49) - ($46))|0;
      $51 = ($50|0)>(0);
      if ($51) {
       $$028$us = $50;$103 = $111;$104 = $36;$14 = $47;
      } else {
       $102 = $111;
       label = 46;
       break L5;
      }
     }
     _ERR_put_error(13,106,197,89946,1093);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $$028 = $len;$105 = $0;$106 = 0;$107 = 0;$108 = 0;$55 = $6;
     while(1) {
      $53 = ($$028|0)<(2);
      if (!($53)) {
       $54 = HEAP8[$55>>0]|0;
       $56 = ($54<<24>>24)==(0);
       if ($56) {
        $57 = ((($55)) + 1|0);
        $58 = HEAP8[$57>>0]|0;
        $59 = ($58<<24>>24)==(0);
        if ($59) {
         $$lcssa = $55;
         label = 25;
         break L7;
        }
       }
      }
      HEAP32[$p$i>>2] = $55;
      $62 = (_ASN1_get_object($p$i,$plen$i,$ptag$i,$pclass$i,$$028)|0);
      $63 = $62 & 128;
      $64 = ($63|0)==(0);
      if ($64) {
       $65 = $62 & 1;
       $66 = ($65|0)==(0);
       if ($66) {
        $$pre = HEAP32[$plen$i>>2]|0;
        $$pre24 = HEAP32[$p$i>>2]|0;
        $113 = $$pre;$75 = $$pre24;
       } else {
        $67 = HEAP32[$p$i>>2]|0;
        $68 = $67;
        $69 = $55;
        $70 = (($69) + ($$028))|0;
        $71 = (($70) - ($68))|0;
        HEAP32[$plen$i>>2] = $71;
        $113 = $71;$75 = $68;
       }
       $72 = $65&255;
       $73 = $62 & 32;
       $74 = $73&255;
       HEAP32[$p>>2] = $75;
       $76 = $75;
       $$0$i1 = 0;$112 = $75;$78 = $74;$79 = $113;$80 = $72;$91 = $76;
      } else {
       _ERR_put_error(13,104,102,89946,1187);
       $$0$i1 = 1;$112 = $105;$78 = $107;$79 = $108;$80 = $106;$91 = $55;
      }
      if ($$0$i1) {
       label = 34;
       break L7;
      }
      $77 = ($78<<24>>24)==(0);
      if ($77) {
       $84 = ($79|0)==(0);
       if ($84) {
        $114 = $112;$95 = $91;
       } else {
        if (!($8)) {
         $85 = HEAP32[$buf>>2]|0;
         $86 = (($85) + ($79))|0;
         $87 = (_BUF_MEM_grow_clean($buf,$86)|0);
         $88 = ($87|0)==(0);
         if ($88) {
          label = 42;
          break L7;
         }
         $89 = HEAP32[$9>>2]|0;
         $90 = (($89) + ($85)|0);
         _memcpy(($90|0),($91|0),($79|0))|0;
        }
        $92 = (($91) + ($79)|0);
        HEAP32[$p>>2] = $92;
        $93 = $92;
        $114 = $93;$95 = $92;
       }
      } else {
       $81 = (_asn1_collect($buf,$p,$79,$80,$11)|0);
       $82 = ($81|0)==(0);
       if ($82) {
        $$0 = 0;
        break;
       }
       $$pre26 = HEAP32[$p>>2]|0;
       $83 = $$pre26;
       $114 = $83;$95 = $$pre26;
      }
      $94 = $95;
      $96 = $55;
      $97 = (($96) + ($$028))|0;
      $98 = (($97) - ($94))|0;
      $99 = ($98|0)>(0);
      if ($99) {
       $$028 = $98;$105 = $114;$106 = $80;$107 = $78;$108 = $79;$55 = $95;
      } else {
       $102 = $114;
       label = 46;
       break L5;
      }
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   if ((label|0) == 25) {
    $60 = ((($$lcssa)) + 2|0);
    HEAP32[$p>>2] = $60;
    $61 = $60;
    if ($5) {
     $101 = $61;
     break;
    }
    _ERR_put_error(13,106,159,89946,1077);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    _ERR_put_error(13,106,58,89946,1086);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 42) {
    _ERR_put_error(13,140,65,89946,1116);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $102 = $0;
   label = 46;
  }
 } while(0);
 if ((label|0) == 46) {
  $100 = ($3<<24>>24)==(0);
  if ($100) {
   $101 = $102;
  } else {
   _ERR_put_error(13,106,137,89946,1103);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$in>>2] = $101;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _asn1_template_noexp_d2i($val,$in,$len,$tt,$opt,$ctx) {
 $val = $val|0;
 $in = $in|0;
 $len = $len|0;
 $tt = $tt|0;
 $opt = $opt|0;
 $ctx = $ctx|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa24 = 0, $$pr = 0, $$pr2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $sk_eoc = 0, $skaclass$0 = 0, $skfield = 0, $sktag$0 = 0, $vtmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 12|0;
 $p = sp + 8|0;
 $sk_eoc = sp + 16|0;
 $vtmp = sp + 4|0;
 $skfield = sp;
 HEAP32[$0>>2] = $len;
 $1 = ($val|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$tt>>2]|0;
 $3 = $2 & 192;
 $4 = HEAP32[$in>>2]|0;
 HEAP32[$p>>2] = $4;
 $5 = $2 & 6;
 $6 = ($5|0)==(0);
 $7 = $2 & 8;
 $8 = ($7|0)!=(0);
 L4: do {
  if ($6) {
   $55 = ((($tt)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   if ($8) {
    $57 = ((($tt)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (_ASN1_item_ex_d2i($val,$p,$len,$56,$58,$3,$opt,$ctx)|0);
    switch ($59|0) {
    case 0:  {
     _ERR_put_error(13,131,58,89946,688);
     label = 36;
     break L4;
     break;
    }
    case -1:  {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    default: {
     label = 35;
     break L4;
    }
    }
   } else {
    $60 = $2 & 1024;
    $61 = (_ASN1_item_ex_d2i($val,$p,$len,$56,-1,$60,$opt,$ctx)|0);
    switch ($61|0) {
    case 0:  {
     _ERR_put_error(13,131,58,89946,697);
     label = 36;
     break L4;
     break;
    }
    case -1:  {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    default: {
     label = 35;
     break L4;
    }
    }
   }
  } else {
   if ($8) {
    $9 = ((($tt)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $skaclass$0 = $3;$sktag$0 = $10;
   } else {
    $11 = $2 >>> 1;
    $12 = $11 & 1;
    $13 = $12 | 16;
    $skaclass$0 = 0;$sktag$0 = $13;
   }
   $14 = (_asn1_check_tlen($0,0,0,$sk_eoc,0,$p,$len,$sktag$0,$skaclass$0,$opt,$ctx)|0);
   switch ($14|0) {
   case 0:  {
    _ERR_put_error(13,131,58,89946,627);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case -1:  {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $15 = HEAP32[$val>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $20 = (_sk_new_null()|0);
     HEAP32[$val>>2] = $20;
     $26 = $20;
    } else {
     $17 = (_sk_num($15)|0);
     $18 = ($17|0)>(0);
     if ($18) {
      $19 = ((($tt)) + 16|0);
      while(1) {
       $21 = (_sk_pop($15)|0);
       HEAP32[$vtmp>>2] = $21;
       $22 = HEAP32[$19>>2]|0;
       _ASN1_item_ex_free($vtmp,$22);
       $23 = (_sk_num($15)|0);
       $24 = ($23|0)>(0);
       if (!($24)) {
        break;
       }
      }
     }
     $$pr = HEAP32[$val>>2]|0;
     $26 = $$pr;
    }
    $25 = ($26|0)==(0|0);
    if ($25) {
     _ERR_put_error(13,131,65,89946,646);
     label = 36;
     break L4;
    }
    $27 = ((($tt)) + 16|0);
    while(1) {
     $28 = HEAP32[$0>>2]|0;
     $29 = ($28|0)>(0);
     if (!($29)) {
      label = 28;
      break;
     }
     $30 = HEAP32[$p>>2]|0;
     $31 = ($28|0)<(2);
     if (!($31)) {
      $32 = HEAP8[$30>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if ($33) {
       $34 = ((($30)) + 1|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = ($35<<24>>24)==(0);
       if ($36) {
        $$lcssa = $30;$$lcssa24 = $28;
        label = 21;
        break;
       }
      }
     }
     HEAP32[$skfield>>2] = 0;
     $41 = HEAP32[$27>>2]|0;
     $42 = (_ASN1_item_ex_d2i($skfield,$p,$28,$41,-1,0,0,$ctx)|0);
     $43 = ($42|0)==(0);
     if ($43) {
      label = 25;
      break;
     }
     $44 = HEAP32[$p>>2]|0;
     $45 = $44;
     $46 = $30;
     $47 = HEAP32[$0>>2]|0;
     $48 = (($46) - ($45))|0;
     $49 = (($48) + ($47))|0;
     HEAP32[$0>>2] = $49;
     $50 = HEAP32[$val>>2]|0;
     $51 = HEAP32[$skfield>>2]|0;
     $52 = (_sk_push($50,$51)|0);
     $53 = ($52|0)==(0);
     if ($53) {
      label = 27;
      break;
     }
    }
    if ((label|0) == 21) {
     $37 = ((($$lcssa)) + 2|0);
     HEAP32[$p>>2] = $37;
     $38 = HEAP8[$sk_eoc>>0]|0;
     $39 = ($38<<24>>24)==(0);
     if ($39) {
      _ERR_put_error(13,131,159,89946,658);
      label = 36;
      break L4;
     } else {
      $40 = (($$lcssa24) + -2)|0;
      HEAP32[$0>>2] = $40;
      HEAP8[$sk_eoc>>0] = 0;
      label = 35;
      break L4;
     }
    }
    else if ((label|0) == 25) {
     _ERR_put_error(13,131,58,89946,669);
     label = 36;
     break L4;
    }
    else if ((label|0) == 27) {
     _ERR_put_error(13,131,65,89946,674);
     label = 36;
     break L4;
    }
    else if ((label|0) == 28) {
     $$pr2 = HEAP8[$sk_eoc>>0]|0;
     $54 = ($$pr2<<24>>24)==(0);
     if ($54) {
      label = 35;
      break L4;
     }
     _ERR_put_error(13,131,137,89946,679);
     label = 36;
     break L4;
    }
   }
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $62 = HEAP32[$p>>2]|0;
  HEAP32[$in>>2] = $62;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 36) {
  _ASN1_template_free($val,$tt);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _ASN1_item_i2d($val,$out,$it) {
 $val = $val|0;
 $out = $out|0;
 $it = $it|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $p$i = sp;
 HEAP32[$0>>2] = $val;
 $1 = ($out|0)==(0|0);
 if ($1) {
  label = 6;
 } else {
  $2 = HEAP32[$out>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $4 = (_ASN1_item_ex_i2d($0,0,$it,-1,0)|0);
   $5 = ($4|0)<(1);
   if ($5) {
    $$0$i = $4;
   } else {
    $6 = (_CRYPTO_malloc($4,89978,109)|0);
    $7 = ($6|0)==(0|0);
    if ($7) {
     $$0$i = -1;
    } else {
     HEAP32[$p$i>>2] = $6;
     (_ASN1_item_ex_i2d($0,$p$i,$it,-1,0)|0);
     HEAP32[$out>>2] = $6;
     $$0$i = $4;
    }
   }
  } else {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $8 = (_ASN1_item_ex_i2d($0,$out,$it,-1,0)|0);
  $$0$i = $8;
 }
 STACKTOP = sp;return ($$0$i|0);
}
function _ASN1_item_ex_i2d($pval,$out,$it,$tag,$aclass) {
 $pval = $pval|0;
 $out = $out|0;
 $it = $it|0;
 $tag = $tag|0;
 $aclass = $aclass|0;
 var $$0 = 0, $$aclass = 0, $$pre = 0, $$tag = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $asn1_cb$0 = 0, $i$09 = 0, $i$17 = 0, $ndef$0 = 0, $or$cond = 0, $p$0 = 0, $seqcontlen = 0;
 var $tt$010 = 0, $tt$18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $seqcontlen = sp;
 $0 = ((($it)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$it>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[$pval>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $6 = ($1|0)==(0|0);
 if ($6) {
  $asn1_cb$0 = 0;
 } else {
  $7 = ((($1)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $asn1_cb$0 = $8;
 }
 $9 = $2 << 24 >> 24;
 switch ($9|0) {
 case 0:  {
  $10 = ((($it)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $14 = (_asn1_i2d_ex_primitive($pval,$out,$it,$tag,$aclass)|0);
   $$0 = $14;
   STACKTOP = sp;return ($$0|0);
  } else {
   $13 = (_asn1_template_ex_i2d($pval,$out,$11,$tag,$aclass)|0);
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 5:  {
  $15 = (_asn1_i2d_ex_primitive($pval,$out,$it,-1,$aclass)|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $16 = ($asn1_cb$0|0)!=(0|0);
  if ($16) {
   $17 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](6,$pval,$it,0)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $19 = (_asn1_get_choice_selector($pval,$it)|0);
  $20 = ($19|0)>(-1);
  if ($20) {
   $21 = ((($it)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($19|0)<($22|0);
   if ($23) {
    $24 = ((($it)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + (($19*20)|0)|0);
    $27 = (_asn1_get_field_ptr($pval,$26)|0);
    $28 = (_asn1_template_ex_i2d($27,$out,$26,-1,$aclass)|0);
    $$0 = $28;
    STACKTOP = sp;return ($$0|0);
   }
  }
  if ($16) {
   (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](7,$pval,$it,0)|0);
   STACKTOP = sp;return 0;
  } else {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 4:  {
  $29 = ((($1)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (FUNCTION_TABLE_iiiiii[$30 & 63]($pval,$out,$it,$tag,$aclass)|0);
  $$0 = $31;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $32 = ($out|0)!=(0|0);
  if ($32) {
   $33 = HEAP32[$out>>2]|0;
   $p$0 = $33;
  } else {
   $p$0 = 0;
  }
  $34 = ((($1)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$pval>>2]|0;
  $37 = (FUNCTION_TABLE_iii[$35 & 127]($36,$out)|0);
  $38 = ($tag|0)!=(-1);
  $or$cond = $32 & $38;
  if (!($or$cond)) {
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
  $39 = $aclass | $tag;
  $40 = HEAP8[$p$0>>0]|0;
  $41 = $40&255;
  $42 = $41 & 32;
  $43 = $39 | $42;
  $44 = $43&255;
  HEAP8[$p$0>>0] = $44;
  $$0 = $37;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 6:  {
  $45 = $aclass >>> 11;
  $46 = $45 & 1;
  $47 = (($46) + 1)|0;
  $ndef$0 = $47;
  break;
 }
 case 1:  {
  $ndef$0 = 1;
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $48 = (_asn1_enc_restore($seqcontlen,$out,$pval,$it)|0);
 $49 = ($48|0)<(0);
 if ($49) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = ($48|0)>(0);
 if ($50) {
  $51 = HEAP32[$seqcontlen>>2]|0;
  $$0 = $51;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$seqcontlen>>2] = 0;
 $52 = ($tag|0)==(-1);
 $53 = $aclass & -193;
 $$aclass = $52 ? $53 : $aclass;
 $$tag = $52 ? 16 : $tag;
 $54 = ($asn1_cb$0|0)!=(0|0);
 if ($54) {
  $55 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](6,$pval,$it,0)|0);
  $56 = ($55|0)==(0);
  if ($56) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $57 = ((($it)) + 8|0);
 $58 = ((($it)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)>(0);
 L54: do {
  if ($60) {
   $61 = HEAP32[$57>>2]|0;
   $i$09 = 0;$tt$010 = $61;
   while(1) {
    $62 = (_asn1_do_adb($pval,$tt$010,1)|0);
    $63 = ($62|0)==(0|0);
    if ($63) {
     $$0 = 0;
     break;
    }
    $64 = (_asn1_get_field_ptr($pval,$62)|0);
    $65 = (_asn1_template_ex_i2d($64,0,$62,-1,$$aclass)|0);
    $66 = HEAP32[$seqcontlen>>2]|0;
    $67 = (($66) + ($65))|0;
    HEAP32[$seqcontlen>>2] = $67;
    $68 = ((($tt$010)) + 20|0);
    $69 = (($i$09) + 1)|0;
    $70 = HEAP32[$58>>2]|0;
    $71 = ($69|0)<($70|0);
    if ($71) {
     $i$09 = $69;$tt$010 = $68;
    } else {
     $72 = $67;
     break L54;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$pre = HEAP32[$seqcontlen>>2]|0;
   $72 = $$pre;
  }
 } while(0);
 $73 = (_ASN1_object_size($ndef$0,$72,$$tag)|0);
 $74 = ($out|0)==(0|0);
 if ($74) {
  $$0 = $73;
  STACKTOP = sp;return ($$0|0);
 }
 $75 = HEAP32[$seqcontlen>>2]|0;
 _ASN1_put_object($out,$ndef$0,$75,$$tag,$$aclass);
 $76 = HEAP32[$58>>2]|0;
 $77 = ($76|0)>(0);
 L65: do {
  if ($77) {
   $78 = HEAP32[$57>>2]|0;
   $i$17 = 0;$tt$18 = $78;
   while(1) {
    $79 = (_asn1_do_adb($pval,$tt$18,1)|0);
    $80 = ($79|0)==(0|0);
    if ($80) {
     $$0 = 0;
     break;
    }
    $81 = (_asn1_get_field_ptr($pval,$79)|0);
    (_asn1_template_ex_i2d($81,$out,$79,-1,$$aclass)|0);
    $82 = ((($tt$18)) + 20|0);
    $83 = (($i$17) + 1)|0;
    $84 = HEAP32[$58>>2]|0;
    $85 = ($83|0)<($84|0);
    if ($85) {
     $i$17 = $83;$tt$18 = $82;
    } else {
     break L65;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $86 = ($ndef$0|0)==(2);
 if ($86) {
  (_ASN1_put_eoc($out)|0);
 }
 if ($54) {
  $87 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](7,$pval,$it,0)|0);
  $88 = ($87|0)==(0);
  if ($88) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = $73;
 STACKTOP = sp;return ($$0|0);
}
function _asn1_ex_i2c($pval,$cout,$putype,$it) {
 $pval = $pval|0;
 $cout = $cout|0;
 $putype = $putype|0;
 $it = $it|0;
 var $$ = 0, $$0 = 0, $$03 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $cont$0 = 0, $len$0 = 0, $or$cond = 0, $utype$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $c = sp + 4|0;
 HEAP32[$0>>2] = $cout;
 $1 = ((($it)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = (FUNCTION_TABLE_iiiii[$5 & 127]($pval,$cout,$putype,$it)|0);
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = HEAP8[$it>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $10 = ((($it)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  if ($12) {
   label = 9;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $13 = HEAP32[$pval>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = ($8<<24>>24)==(5);
  if ($15) {
   $16 = HEAP32[$pval>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$putype>>2] = $18;
   $$03 = $pval;$utype$0 = $18;
  } else {
   label = 9;
  }
 }
 do {
  if ((label|0) == 9) {
   $19 = ((($it)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(-4);
   if ($21) {
    $22 = HEAP32[$pval>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    HEAP32[$putype>>2] = $23;
    $24 = ((($22)) + 4|0);
    $$03 = $24;$utype$0 = $23;
    break;
   } else {
    $25 = HEAP32[$putype>>2]|0;
    $$03 = $pval;$utype$0 = $25;
    break;
   }
  }
 } while(0);
 switch ($utype$0|0) {
 case 6:  {
  $26 = HEAP32[$$03>>2]|0;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($26)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $cont$0 = $28;$len$0 = $30;
  break;
 }
 case 1:  {
  $31 = HEAP32[$$03>>2]|0;
  $32 = ($31|0)==(-1);
  if ($32) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $33 = ((($it)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(-4);
  do {
   if (!($35)) {
    $36 = ($31|0)==(0);
    $37 = ((($it)) + 20|0);
    $38 = HEAP32[$37>>2]|0;
    if ($36) {
     $40 = ($38|0)==(0);
     if ($40) {
      $$0 = -1;
     } else {
      break;
     }
     STACKTOP = sp;return ($$0|0);
    } else {
     $39 = ($38|0)>(0);
     if ($39) {
      $$0 = -1;
     } else {
      break;
     }
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $41 = $31&255;
  HEAP8[$c>>0] = $41;
  $cont$0 = $c;$len$0 = 1;
  break;
 }
 case 3:  {
  $42 = HEAP32[$$03>>2]|0;
  $43 = ($cout|0)!=(0|0);
  $$ = $43 ? $0 : 0;
  $44 = (_i2c_ASN1_BIT_STRING($42,$$)|0);
  $$0 = $44;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 266: case 10: case 258: case 2:  {
  $45 = HEAP32[$$03>>2]|0;
  $46 = ($cout|0)!=(0|0);
  $$1 = $46 ? $0 : 0;
  $47 = (_i2c_ASN1_INTEGER($45,$$1)|0);
  $$0 = $47;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 5:  {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $48 = HEAP32[$$03>>2]|0;
  $49 = ((($it)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(2048);
  if ($51) {
   $52 = ((($48)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $53 & 16;
   $55 = ($54|0)==(0);
   if (!($55)) {
    $56 = ($cout|0)==(0|0);
    if ($56) {
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $57 = ((($48)) + 8|0);
    HEAP32[$57>>2] = $cout;
    HEAP32[$48>>2] = 0;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $58 = ((($48)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$48>>2]|0;
  $cont$0 = $59;$len$0 = $60;
 }
 }
 $61 = ($cout|0)!=(0|0);
 $62 = ($len$0|0)!=(0);
 $or$cond = $62 & $61;
 if (!($or$cond)) {
  $$0 = $len$0;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($cout|0),($cont$0|0),($len$0|0))|0;
 $$0 = $len$0;
 STACKTOP = sp;return ($$0|0);
}
function _asn1_template_ex_i2d($pval,$out,$tt,$tag,$iclass) {
 $pval = $pval|0;
 $out = $out|0;
 $tt = $tt|0;
 $tag = $tag|0;
 $iclass = $iclass|0;
 var $$ = 0, $$0 = 0, $$4 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$i10 = 0, $i$023 = 0, $i$1$i17 = 0, $i$2$i14 = 0, $i$3$i11 = 0, $isset$0 = 0, $or$cond3 = 0, $p$i = 0;
 var $ret$0 = 0, $skaclass$0 = 0, $skcontlen$0$lcssa = 0, $skcontlen$024 = 0, $skitem = 0, $skitem$i = 0, $sktag$0 = 0, $tclass$0 = 0, $tder$0$i18 = 0, $tder$1$i15 = 0, $tder$2$i12 = 0, $ttag$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $skitem$i = sp + 8|0;
 $p$i = sp + 4|0;
 $skitem = sp;
 $0 = HEAP32[$tt>>2]|0;
 $1 = $0 & 24;
 $2 = ($1|0)==(0);
 $3 = ($tag|0)!=(-1);
 do {
  if ($2) {
   $7 = $iclass & 192;
   $$4 = $3 ? $7 : 0;
   $tclass$0 = $$4;$ttag$0 = $tag;
  } else {
   if ($3) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $4 = ((($tt)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $0 & 192;
    $tclass$0 = $6;$ttag$0 = $5;
    break;
   }
  }
 } while(0);
 $8 = $iclass & -193;
 $9 = $0 & $iclass;
 $10 = $9 >>> 11;
 $11 = $10 & 1;
 $12 = (($11) + 1)|0;
 $13 = $0 & 6;
 $14 = ($13|0)==(0);
 if ($14) {
  $95 = $0 & 16;
  $96 = ($95|0)==(0);
  $97 = ((($tt)) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  if ($96) {
   $105 = $tclass$0 | $8;
   $106 = (_ASN1_item_ex_i2d($pval,$out,$98,$ttag$0,$105)|0);
   $$0 = $106;
   STACKTOP = sp;return ($$0|0);
  }
  $99 = (_ASN1_item_ex_i2d($pval,0,$98,-1,$8)|0);
  $100 = ($99|0)==(0);
  if ($100) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $101 = (_ASN1_object_size($12,$99,$ttag$0)|0);
  $102 = ($out|0)==(0|0);
  if ($102) {
   $$0 = $101;
   STACKTOP = sp;return ($$0|0);
  }
  _ASN1_put_object($out,$12,$99,$ttag$0,$tclass$0);
  $103 = HEAP32[$97>>2]|0;
  (_ASN1_item_ex_i2d($pval,$out,$103,-1,$8)|0);
  $104 = ($12|0)==(2);
  if (!($104)) {
   $$0 = $101;
   STACKTOP = sp;return ($$0|0);
  }
  (_ASN1_put_eoc($out)|0);
  $$0 = $101;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$pval>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = $0 & 2;
 $18 = ($17|0)==(0);
 if ($18) {
  $isset$0 = 0;
 } else {
  $19 = $0 >>> 2;
  $20 = $19 & 1;
  $21 = (($20) + 1)|0;
  $isset$0 = $21;
 }
 $22 = ($ttag$0|0)!=(-1);
 $23 = $0 & 16;
 $24 = ($23|0)==(0);
 $or$cond3 = $24 & $22;
 $25 = ($isset$0|0)==(0);
 $$ = $25 ? 16 : 17;
 $sktag$0 = $or$cond3 ? $ttag$0 : $$;
 $skaclass$0 = $or$cond3 ? $tclass$0 : 0;
 $26 = (_sk_num($15)|0);
 $27 = ($26|0)>(0);
 if ($27) {
  $28 = ((($tt)) + 16|0);
  $i$023 = 0;$skcontlen$024 = 0;
  while(1) {
   $29 = (_sk_value($15,$i$023)|0);
   HEAP32[$skitem>>2] = $29;
   $30 = HEAP32[$28>>2]|0;
   $31 = (_ASN1_item_ex_i2d($skitem,0,$30,-1,$8)|0);
   $32 = (($31) + ($skcontlen$024))|0;
   $33 = (($i$023) + 1)|0;
   $34 = (_sk_num($15)|0);
   $35 = ($33|0)<($34|0);
   if ($35) {
    $i$023 = $33;$skcontlen$024 = $32;
   } else {
    $skcontlen$0$lcssa = $32;
    break;
   }
  }
 } else {
  $skcontlen$0$lcssa = 0;
 }
 $36 = (_ASN1_object_size($12,$skcontlen$0$lcssa,$sktag$0)|0);
 $37 = ($23|0)!=(0);
 if ($37) {
  $38 = (_ASN1_object_size($12,$36,$ttag$0)|0);
  $ret$0 = $38;
 } else {
  $ret$0 = $36;
 }
 $39 = ($out|0)==(0|0);
 if ($39) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 if ($37) {
  _ASN1_put_object($out,$12,$36,$ttag$0,$tclass$0);
 }
 _ASN1_put_object($out,$12,$skcontlen$0$lcssa,$sktag$0,$skaclass$0);
 $40 = ((($tt)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$p$i>>2] = 0;
 do {
  if ($25) {
   label = 19;
  } else {
   $42 = (_sk_num($15)|0);
   $43 = ($42|0)<(2);
   if ($43) {
    label = 19;
   } else {
    $46 = (_sk_num($15)|0);
    $47 = ($46*12)|0;
    $48 = (_CRYPTO_malloc($47,89978,434)|0);
    $49 = ($48|0)==(0|0);
    if (!($49)) {
     $50 = (_CRYPTO_malloc($skcontlen$0$lcssa,89978,437)|0);
     $51 = ($50|0)==(0|0);
     if ($51) {
      _CRYPTO_free($48);
      break;
     }
     HEAP32[$p$i>>2] = $50;
     $56 = (_sk_num($15)|0);
     $57 = ($56|0)>(0);
     if ($57) {
      $i$1$i17 = 0;$tder$0$i18 = $48;
      while(1) {
       $58 = (_sk_value($15,$i$1$i17)|0);
       HEAP32[$skitem$i>>2] = $58;
       $59 = HEAP32[$p$i>>2]|0;
       HEAP32[$tder$0$i18>>2] = $59;
       $60 = (_ASN1_item_ex_i2d($skitem$i,$p$i,$41,-1,$8)|0);
       $61 = ((($tder$0$i18)) + 4|0);
       HEAP32[$61>>2] = $60;
       $62 = HEAP32[$skitem$i>>2]|0;
       $63 = ((($tder$0$i18)) + 8|0);
       HEAP32[$63>>2] = $62;
       $64 = (($i$1$i17) + 1)|0;
       $65 = ((($tder$0$i18)) + 12|0);
       $66 = (_sk_num($15)|0);
       $67 = ($64|0)<($66|0);
       if ($67) {
        $i$1$i17 = $64;$tder$0$i18 = $65;
       } else {
        $$pre$phiZ2D = $p$i;
        break;
       }
      }
     } else {
      $$pre$phiZ2D = $p$i;
     }
     $68 = (_sk_num($15)|0);
     _qsort($48,$68,12,89);
     $69 = HEAP32[$out>>2]|0;
     HEAP32[$$pre$phiZ2D>>2] = $69;
     $70 = (_sk_num($15)|0);
     $71 = ($70|0)>(0);
     $72 = HEAP32[$p$i>>2]|0;
     if ($71) {
      $76 = $72;$i$2$i14 = 0;$tder$1$i15 = $48;
      while(1) {
       $73 = HEAP32[$tder$1$i15>>2]|0;
       $74 = ((($tder$1$i15)) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       _memcpy(($76|0),($73|0),($75|0))|0;
       $77 = HEAP32[$74>>2]|0;
       $78 = HEAP32[$p$i>>2]|0;
       $79 = (($78) + ($77)|0);
       HEAP32[$p$i>>2] = $79;
       $80 = (($i$2$i14) + 1)|0;
       $81 = ((($tder$1$i15)) + 12|0);
       $82 = (_sk_num($15)|0);
       $83 = ($80|0)<($82|0);
       $84 = HEAP32[$p$i>>2]|0;
       if ($83) {
        $76 = $84;$i$2$i14 = $80;$tder$1$i15 = $81;
       } else {
        $$lcssa = $84;
        break;
       }
      }
     } else {
      $$lcssa = $72;
     }
     HEAP32[$out>>2] = $$lcssa;
     $85 = ($isset$0|0)==(2);
     if ($85) {
      $86 = (_sk_num($15)|0);
      $87 = ($86|0)>(0);
      if ($87) {
       $i$3$i11 = 0;$tder$2$i12 = $48;
       while(1) {
        $88 = ((($tder$2$i12)) + 8|0);
        $89 = HEAP32[$88>>2]|0;
        (_sk_set($15,$i$3$i11,$89)|0);
        $90 = (($i$3$i11) + 1)|0;
        $91 = ((($tder$2$i12)) + 12|0);
        $92 = (_sk_num($15)|0);
        $93 = ($90|0)<($92|0);
        if ($93) {
         $i$3$i11 = $90;$tder$2$i12 = $91;
        } else {
         break;
        }
       }
      }
     }
     _CRYPTO_free($48);
     _CRYPTO_free($50);
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $44 = (_sk_num($15)|0);
  $45 = ($44|0)>(0);
  if ($45) {
   $i$0$i10 = 0;
   while(1) {
    $52 = (_sk_value($15,$i$0$i10)|0);
    HEAP32[$skitem$i>>2] = $52;
    (_ASN1_item_ex_i2d($skitem$i,$out,$41,-1,$8)|0);
    $53 = (($i$0$i10) + 1)|0;
    $54 = (_sk_num($15)|0);
    $55 = ($53|0)<($54|0);
    if ($55) {
     $i$0$i10 = $53;
    } else {
     break;
    }
   }
  }
 }
 $94 = ($12|0)==(2);
 if (!($94)) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 (_ASN1_put_eoc($out)|0);
 if (!($37)) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 (_ASN1_put_eoc($out)|0);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _asn1_i2d_ex_primitive($pval,$out,$it,$tag,$aclass) {
 $pval = $pval|0;
 $out = $out|0;
 $it = $it|0;
 $tag = $tag|0;
 $aclass = $aclass|0;
 var $$0 = 0, $$tag = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len$0 = 0, $ndef$0 = 0, $usetag$0 = 0, $utype = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $utype = sp;
 $0 = ((($it)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$utype>>2] = $1;
 $2 = (_asn1_ex_i2c($pval,0,$utype,$it)|0);
 $3 = HEAP32[$utype>>2]|0;
 switch ($3|0) {
 case 16: case 17: case -3:  {
  $usetag$0 = 0;
  break;
 }
 default: {
  $usetag$0 = 1;
 }
 }
 switch ($2|0) {
 case -2:  {
  $len$0 = 0;$ndef$0 = 2;
  break;
 }
 case -1:  {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $len$0 = $2;$ndef$0 = 0;
 }
 }
 $4 = ($tag|0)==(-1);
 $$tag = $4 ? $3 : $tag;
 $5 = ($out|0)==(0|0);
 do {
  if (!($5)) {
   $6 = ($usetag$0|0)==(0);
   if (!($6)) {
    _ASN1_put_object($out,$ndef$0,$len$0,$$tag,$aclass);
   }
   $7 = HEAP32[$out>>2]|0;
   (_asn1_ex_i2c($pval,$7,$utype,$it)|0);
   $8 = ($ndef$0|0)==(0);
   if ($8) {
    $9 = HEAP32[$out>>2]|0;
    $10 = (($9) + ($len$0)|0);
    HEAP32[$out>>2] = $10;
    break;
   } else {
    (_ASN1_put_eoc($out)|0);
    break;
   }
  }
 } while(0);
 $11 = ($usetag$0|0)==(0);
 if ($11) {
  $$0 = $len$0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (_ASN1_object_size($ndef$0,$len$0,$$tag)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _der_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 $$ = $4 ? $1 : $3;
 $5 = HEAP32[$a>>2]|0;
 $6 = HEAP32[$b>>2]|0;
 $7 = (_memcmp($5,$6,$$)|0);
 $8 = ($7|0)==(0);
 $9 = (($1) - ($3))|0;
 $$1 = $8 ? $9 : $7;
 return ($$1|0);
}
function _ASN1_item_free($val,$it) {
 $val = $val|0;
 $it = $it|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $val;
 _asn1_item_combine_free($0,$it,0);
 STACKTOP = sp;return;
}
function _ASN1_item_ex_free($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _asn1_item_combine_free($pval,$it,0);
 return;
}
function _ASN1_template_free($pval,$tt) {
 $pval = $pval|0;
 $tt = $tt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vtmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vtmp = sp;
 $0 = HEAP32[$tt>>2]|0;
 $1 = $0 & 6;
 $2 = ($1|0)==(0);
 if ($2) {
  $12 = ((($tt)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0 & 1024;
  _asn1_item_combine_free($pval,$13,$14);
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$pval>>2]|0;
 $4 = (_sk_num($3)|0);
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = ((($tt)) + 16|0);
  $i$01 = 0;
  while(1) {
   $7 = (_sk_value($3,$i$01)|0);
   HEAP32[$vtmp>>2] = $7;
   $8 = HEAP32[$6>>2]|0;
   _asn1_item_combine_free($vtmp,$8,0);
   $9 = (($i$01) + 1)|0;
   $10 = (_sk_num($3)|0);
   $11 = ($9|0)<($10|0);
   if ($11) {
    $i$01 = $9;
   } else {
    break;
   }
  }
 }
 _sk_free($3);
 HEAP32[$pval>>2] = 0;
 STACKTOP = sp;return;
}
function _ASN1_primitive_free($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $utype$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($it|0)!=(0|0);
 do {
  if ($0) {
   $1 = ((($it)) + 16|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)==(0|0);
   if (!($3)) {
    $4 = ((($2)) + 12|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     FUNCTION_TABLE_vii[$5 & 31]($pval,$it);
     return;
    }
   }
   $12 = HEAP8[$it>>0]|0;
   $13 = ($12<<24>>24)==(5);
   if ($13) {
    $14 = HEAP32[$pval>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $$01 = $pval;
     label = 16;
     break;
    }
    return;
   }
   $16 = ((($it)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(1);
   if ($18) {
    $$04 = $pval;
    label = 12;
   } else {
    $19 = HEAP32[$pval>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     return;
    } else {
     $$0 = $pval;$utype$0 = $17;
     label = 10;
    }
   }
  } else {
   $7 = HEAP32[$pval>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($7)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    return;
   } else {
    $$0 = $9;$utype$0 = $8;
    label = 10;
   }
  }
 } while(0);
 L16: do {
  if ((label|0) == 10) {
   switch ($utype$0|0) {
   case 1:  {
    $$04 = $$0;
    label = 12;
    break L16;
    break;
   }
   case 5:  {
    $$02 = $$0;
    break L16;
    break;
   }
   case 6:  {
    $21 = HEAP32[$$0>>2]|0;
    _ASN1_OBJECT_free($21);
    $$02 = $$0;
    break L16;
    break;
   }
   case -4:  {
    _ASN1_primitive_free($$0,0);
    $24 = HEAP32[$$0>>2]|0;
    _CRYPTO_free($24);
    $$02 = $$0;
    break L16;
    break;
   }
   default: {
    $$01 = $$0;
    label = 16;
    break L16;
   }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  if ($0) {
   $22 = ((($it)) + 20|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$$04>>2] = $23;
   return;
  } else {
   HEAP32[$$04>>2] = -1;
   return;
  }
 }
 else if ((label|0) == 16) {
  $25 = HEAP32[$$01>>2]|0;
  _ASN1_STRING_free($25);
  HEAP32[$$01>>2] = 0;
  $$02 = $$01;
 }
 HEAP32[$$02>>2] = 0;
 return;
}
function _asn1_item_combine_free($pval,$it,$combine) {
 $pval = $pval|0;
 $it = $it|0;
 $combine = $combine|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $asn1_cb$0 = 0, $i$0$i27 = 0, $i$0$i512 = 0, $i$0$i8 = 0, $i$016 = 0, $tt$017 = 0, $vtmp$i = 0, $vtmp$i1 = 0, $vtmp$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vtmp$i4 = sp + 8|0;
 $vtmp$i1 = sp + 4|0;
 $vtmp$i = sp;
 $0 = ((($it)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($pval|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP8[$it>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = HEAP32[$pval>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   STACKTOP = sp;return;
  }
 }
 $7 = ($1|0)==(0|0);
 if ($7) {
  label = 6;
 } else {
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   label = 6;
  } else {
   $asn1_cb$0 = $9;
  }
 }
 if ((label|0) == 6) {
  $asn1_cb$0 = 0;
 }
 $11 = $3 << 24 >> 24;
 switch ($11|0) {
 case 0:  {
  $12 = ((($it)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   _ASN1_primitive_free($pval,$it);
   STACKTOP = sp;return;
  }
  $15 = HEAP32[$13>>2]|0;
  $16 = $15 & 6;
  $17 = ($16|0)==(0);
  if ($17) {
   $27 = ((($13)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $15 & 1024;
   _asn1_item_combine_free($pval,$28,$29);
  } else {
   $18 = HEAP32[$pval>>2]|0;
   $19 = (_sk_num($18)|0);
   $20 = ($19|0)>(0);
   if ($20) {
    $21 = ((($13)) + 16|0);
    $i$0$i27 = 0;
    while(1) {
     $22 = (_sk_value($18,$i$0$i27)|0);
     HEAP32[$vtmp$i1>>2] = $22;
     $23 = HEAP32[$21>>2]|0;
     _asn1_item_combine_free($vtmp$i1,$23,0);
     $24 = (($i$0$i27) + 1)|0;
     $25 = (_sk_num($18)|0);
     $26 = ($24|0)<($25|0);
     if ($26) {
      $i$0$i27 = $24;
     } else {
      break;
     }
    }
   }
   _sk_free($18);
   HEAP32[$pval>>2] = 0;
  }
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  _ASN1_primitive_free($pval,$it);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $30 = ($asn1_cb$0|0)!=(0|0);
  if ($30) {
   $31 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](2,$pval,$it,0)|0);
   $32 = ($31|0)==(2);
   if ($32) {
    STACKTOP = sp;return;
   }
  }
  $33 = (_asn1_get_choice_selector($pval,$it)|0);
  $34 = ($33|0)>(-1);
  if ($34) {
   $35 = ((($it)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($33|0)<($36|0);
   if ($37) {
    $38 = ((($it)) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + (($33*20)|0)|0);
    $41 = (_asn1_get_field_ptr($pval,$40)|0);
    $42 = HEAP32[$40>>2]|0;
    $43 = $42 & 6;
    $44 = ($43|0)==(0);
    if ($44) {
     $54 = (((($39) + (($33*20)|0)|0)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = $42 & 1024;
     _asn1_item_combine_free($41,$55,$56);
    } else {
     $45 = HEAP32[$41>>2]|0;
     $46 = (_sk_num($45)|0);
     $47 = ($46|0)>(0);
     if ($47) {
      $48 = (((($39) + (($33*20)|0)|0)) + 16|0);
      $i$0$i8 = 0;
      while(1) {
       $49 = (_sk_value($45,$i$0$i8)|0);
       HEAP32[$vtmp$i>>2] = $49;
       $50 = HEAP32[$48>>2]|0;
       _asn1_item_combine_free($vtmp$i,$50,0);
       $51 = (($i$0$i8) + 1)|0;
       $52 = (_sk_num($45)|0);
       $53 = ($51|0)<($52|0);
       if ($53) {
        $i$0$i8 = $51;
       } else {
        break;
       }
      }
     }
     _sk_free($45);
     HEAP32[$41>>2] = 0;
    }
   }
  }
  if ($30) {
   (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](3,$pval,$it,0)|0);
  }
  $57 = ($combine|0)==(0);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = HEAP32[$pval>>2]|0;
  _CRYPTO_free($58);
  HEAP32[$pval>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $59 = ($1|0)==(0|0);
  if ($59) {
   STACKTOP = sp;return;
  }
  $60 = ((($1)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(0|0);
  if ($62) {
   STACKTOP = sp;return;
  }
  $63 = HEAP32[$pval>>2]|0;
  FUNCTION_TABLE_vi[$61 & 63]($63);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $64 = ($1|0)==(0|0);
  if ($64) {
   STACKTOP = sp;return;
  }
  $65 = ((($1)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(0|0);
  if ($67) {
   STACKTOP = sp;return;
  }
  FUNCTION_TABLE_vii[$66 & 31]($pval,$it);
  STACKTOP = sp;return;
  break;
 }
 case 1: case 6:  {
  $68 = (_asn1_do_lock($pval,-1,$it)|0);
  $69 = ($68|0)>(0);
  if ($69) {
   STACKTOP = sp;return;
  }
  $70 = ($asn1_cb$0|0)!=(0|0);
  if ($70) {
   $71 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](2,$pval,$it,0)|0);
   $72 = ($71|0)==(2);
   if ($72) {
    STACKTOP = sp;return;
   }
  }
  _asn1_enc_free($pval,$it);
  $73 = ((($it)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)>(0);
  if ($75) {
   $76 = ((($it)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $$sum = (($74) + -1)|0;
   $78 = (($77) + (($$sum*20)|0)|0);
   $i$016 = 0;$tt$017 = $78;
   while(1) {
    $79 = (_asn1_do_adb($pval,$tt$017,0)|0);
    $80 = ($79|0)==(0|0);
    if (!($80)) {
     $81 = (_asn1_get_field_ptr($pval,$79)|0);
     $82 = HEAP32[$79>>2]|0;
     $83 = $82 & 6;
     $84 = ($83|0)==(0);
     if ($84) {
      $94 = ((($79)) + 16|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $82 & 1024;
      _asn1_item_combine_free($81,$95,$96);
     } else {
      $85 = HEAP32[$81>>2]|0;
      $86 = (_sk_num($85)|0);
      $87 = ($86|0)>(0);
      if ($87) {
       $88 = ((($79)) + 16|0);
       $i$0$i512 = 0;
       while(1) {
        $89 = (_sk_value($85,$i$0$i512)|0);
        HEAP32[$vtmp$i4>>2] = $89;
        $90 = HEAP32[$88>>2]|0;
        _asn1_item_combine_free($vtmp$i4,$90,0);
        $91 = (($i$0$i512) + 1)|0;
        $92 = (_sk_num($85)|0);
        $93 = ($91|0)<($92|0);
        if ($93) {
         $i$0$i512 = $91;
        } else {
         break;
        }
       }
      }
      _sk_free($85);
      HEAP32[$81>>2] = 0;
     }
    }
    $97 = ((($tt$017)) + -20|0);
    $98 = (($i$016) + 1)|0;
    $99 = HEAP32[$73>>2]|0;
    $100 = ($98|0)<($99|0);
    if ($100) {
     $i$016 = $98;$tt$017 = $97;
    } else {
     break;
    }
   }
  }
  if ($70) {
   (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](3,$pval,$it,0)|0);
  }
  $101 = ($combine|0)==(0);
  if (!($101)) {
   STACKTOP = sp;return;
  }
  $102 = HEAP32[$pval>>2]|0;
  _CRYPTO_free($102);
  HEAP32[$pval>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _ASN1_item_new($it) {
 $it = $it|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ret = sp;
 HEAP32[$ret>>2] = 0;
 $0 = (_asn1_item_ex_combine_new($ret,$it,0)|0);
 $1 = ($0|0)>(0);
 $2 = HEAP32[$ret>>2]|0;
 $$0 = $1 ? $2 : 0;
 STACKTOP = sp;return ($$0|0);
}
function _ASN1_item_ex_new($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_asn1_item_ex_combine_new($pval,$it,0)|0);
 return ($0|0);
}
function _ASN1_primitive_new($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, $utype$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($it|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($it)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = (FUNCTION_TABLE_iii[$5 & 127]($pval,$it)|0);
   $$0 = $7;
   return ($$0|0);
  }
 }
 $8 = HEAP8[$it>>0]|0;
 $9 = ($8<<24>>24)==(5);
 L9: do {
  if ($9) {
   $utype$02 = -1;
   label = 12;
  } else {
   $10 = ((($it)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   switch ($11|0) {
   case 6:  {
    $12 = (_OBJ_nid2obj(0)|0);
    HEAP32[$pval>>2] = $12;
    $$0 = 1;
    return ($$0|0);
    break;
   }
   case 1:  {
    $13 = ((($it)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$pval>>2] = $14;
    $$0 = 1;
    return ($$0|0);
    break;
   }
   case 5:  {
    HEAP32[$pval>>2] = (1);
    $$0 = 1;
    return ($$0|0);
    break;
   }
   case -4:  {
    $15 = (_CRYPTO_malloc(8,89989,342)|0);
    $16 = ($15|0)==(0|0);
    if ($16) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $17 = ((($15)) + 4|0);
     HEAP32[$17>>2] = 0;
     HEAP32[$15>>2] = -1;
     HEAP32[$pval>>2] = $15;
     $25 = $15;
     break L9;
    }
    break;
   }
   default: {
    $utype$02 = $11;
    label = 12;
    break L9;
   }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $18 = (_ASN1_STRING_type_new($utype$02)|0);
  $19 = HEAP8[$it>>0]|0;
  $20 = ($19<<24>>24)==(5);
  $21 = ($18|0)!=(0|0);
  $or$cond = $21 & $20;
  if ($or$cond) {
   $22 = ((($18)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 | 64;
   HEAP32[$22>>2] = $24;
  }
  HEAP32[$pval>>2] = $18;
  $25 = $18;
 }
 $not$ = ($25|0)!=(0|0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _asn1_item_ex_combine_new($pval,$it,$combine) {
 $pval = $pval|0;
 $it = $it|0;
 $combine = $combine|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $asn1_cb$0 = 0, $i$06 = 0, $tt$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($it)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($1)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 3;
  } else {
   $asn1_cb$0 = $4;
  }
 }
 if ((label|0) == 3) {
  $asn1_cb$0 = 0;
 }
 $6 = HEAP8[$it>>0]|0;
 $7 = $6 << 24 >> 24;
 L6: do {
  switch ($7|0) {
  case 4:  {
   $8 = ($1|0)==(0|0);
   if ($8) {
    $$0 = 1;
    return ($$0|0);
   }
   $9 = ((($1)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$0 = 1;
    return ($$0|0);
   }
   $12 = (FUNCTION_TABLE_iii[$10 & 127]($pval,$it)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    label = 49;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 3:  {
   $14 = ($1|0)==(0|0);
   if ($14) {
    $$0 = 1;
    return ($$0|0);
   }
   $15 = HEAP32[$1>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $$0 = 1;
    return ($$0|0);
   }
   $17 = (FUNCTION_TABLE_i[$15 & 31]()|0);
   HEAP32[$pval>>2] = $17;
   $18 = ($17|0)==(0|0);
   if ($18) {
    label = 49;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 0:  {
   $19 = ((($it)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $36 = (_ASN1_primitive_new($pval,$it)|0);
    $37 = ($36|0)==(0);
    if ($37) {
     label = 49;
     break L6;
    } else {
     $$0 = 1;
    }
    return ($$0|0);
   }
   $22 = ((($20)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$20>>2]|0;
   $25 = $24 & 1;
   $26 = ($25|0)==(0);
   if (!($26)) {
    _asn1_template_clear($pval,$20);
    $$0 = 1;
    return ($$0|0);
   }
   $27 = $24 & 768;
   $28 = ($27|0)==(0);
   if (!($28)) {
    HEAP32[$pval>>2] = 0;
    $$0 = 1;
    return ($$0|0);
   }
   $29 = $24 & 6;
   $30 = ($29|0)==(0);
   if ($30) {
    $33 = $24 & 1024;
    $34 = (_asn1_item_ex_combine_new($pval,$23,$33)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     label = 49;
     break L6;
    } else {
     $$0 = 1;
    }
    return ($$0|0);
   }
   $31 = (_sk_new_null()|0);
   $32 = ($31|0)==(0|0);
   if ($32) {
    _ERR_put_error(13,133,65,89989,277);
    label = 49;
    break L6;
   }
   HEAP32[$pval>>2] = $31;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 5:  {
   $38 = (_ASN1_primitive_new($pval,$it)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    label = 49;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 2:  {
   $40 = ($asn1_cb$0|0)!=(0|0);
   L47: do {
    if ($40) {
     $41 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](0,$pval,$it,0)|0);
     switch ($41|0) {
     case 0:  {
      label = 50;
      break L6;
      break;
     }
     case 2:  {
      $$0 = 1;
      break;
     }
     default: {
      break L47;
     }
     }
     return ($$0|0);
    }
   } while(0);
   $42 = ($combine|0)==(0);
   if ($42) {
    $43 = ((($it)) + 20|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_CRYPTO_malloc($44,89989,154)|0);
    HEAP32[$pval>>2] = $45;
    $46 = ($45|0)==(0|0);
    if ($46) {
     label = 49;
     break L6;
    }
    $47 = HEAP32[$43>>2]|0;
    _memset(($45|0),0,($47|0))|0;
   }
   (_asn1_set_choice_selector($pval,-1,$it)|0);
   if (!($40)) {
    $$0 = 1;
    return ($$0|0);
   }
   $48 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](1,$pval,$it,0)|0);
   $49 = ($48|0)==(0);
   if ($49) {
    label = 50;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 1: case 6:  {
   $50 = ($asn1_cb$0|0)!=(0|0);
   L60: do {
    if ($50) {
     $51 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](0,$pval,$it,0)|0);
     switch ($51|0) {
     case 0:  {
      label = 50;
      break L6;
      break;
     }
     case 2:  {
      $$0 = 1;
      break;
     }
     default: {
      break L60;
     }
     }
     return ($$0|0);
    }
   } while(0);
   $52 = ($combine|0)==(0);
   if ($52) {
    $53 = ((($it)) + 20|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (_CRYPTO_malloc($54,89989,179)|0);
    HEAP32[$pval>>2] = $55;
    $56 = ($55|0)==(0|0);
    if ($56) {
     label = 49;
     break L6;
    }
    $57 = HEAP32[$53>>2]|0;
    _memset(($55|0),0,($57|0))|0;
    (_asn1_do_lock($pval,0,$it)|0);
    _asn1_enc_init($pval,$it);
   }
   $58 = ((($it)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)>(0);
   L68: do {
    if ($60) {
     $61 = ((($it)) + 8|0);
     $62 = HEAP32[$61>>2]|0;
     $i$06 = 0;$tt$05 = $62;
     L70: while(1) {
      $63 = (_asn1_get_field_ptr($pval,$tt$05)|0);
      $64 = ((($tt$05)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = HEAP32[$tt$05>>2]|0;
      $67 = $66 & 1;
      $68 = ($67|0)==(0);
      do {
       if ($68) {
        $69 = $66 & 768;
        $70 = ($69|0)==(0);
        if (!($70)) {
         HEAP32[$63>>2] = 0;
         break;
        }
        $71 = $66 & 6;
        $72 = ($71|0)==(0);
        if ($72) {
         $75 = $66 & 1024;
         $76 = (_asn1_item_ex_combine_new($63,$65,$75)|0);
         $77 = ($76|0)==(0);
         if ($77) {
          label = 49;
          break L6;
         } else {
          break;
         }
        }
        $73 = (_sk_new_null()|0);
        $74 = ($73|0)==(0|0);
        if ($74) {
         break L70;
        }
        HEAP32[$63>>2] = $73;
       } else {
        _asn1_template_clear($63,$tt$05);
       }
      } while(0);
      $78 = ((($tt$05)) + 20|0);
      $79 = (($i$06) + 1)|0;
      $80 = HEAP32[$58>>2]|0;
      $81 = ($79|0)<($80|0);
      if ($81) {
       $i$06 = $79;$tt$05 = $78;
      } else {
       break L68;
      }
     }
     _ERR_put_error(13,133,65,89989,277);
     label = 49;
     break L6;
    }
   } while(0);
   if (!($50)) {
    $$0 = 1;
    return ($$0|0);
   }
   $82 = (FUNCTION_TABLE_iiiii[$asn1_cb$0 & 127](1,$pval,$it,0)|0);
   $83 = ($82|0)==(0);
   if ($83) {
    label = 50;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  default: {
   $$0 = 1;
   return ($$0|0);
  }
  }
 } while(0);
 if ((label|0) == 49) {
  _ERR_put_error(13,121,65,89989,202);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 50) {
  _ERR_put_error(13,121,100,89989,210);
  _ASN1_item_ex_free($pval,$it);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _asn1_template_clear($pval,$tt) {
 $pval = $pval|0;
 $tt = $tt|0;
 var $$lcssa41 = 0, $$lcssa42 = 0, $$lcssa44 = 0, $$lcssa46 = 0, $$lcssa48 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, $phitmp$i1$i = 0, $tt$tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tt$tr = $tt;
 L1: while(1) {
  $0 = HEAP32[$tt$tr>>2]|0;
  $1 = $0 & 774;
  $2 = ($1|0)==(0);
  if (!($2)) {
   label = 3;
   break;
  }
  $3 = ((($tt$tr)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  switch ($6|0) {
  case 4:  {
   $$lcssa41 = $4;
   label = 5;
   break L1;
   break;
  }
  case 5:  {
   $$lcssa42 = $4;$$lcssa46 = $5;
   label = 18;
   break L1;
   break;
  }
  case 6: case 1: case 2: case 3:  {
   label = 27;
   break L1;
   break;
  }
  case 0:  {
   break;
  }
  default: {
   label = 28;
   break L1;
  }
  }
  $13 = ((($4)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$lcssa44 = $4;$$lcssa48 = $5;
   label = 10;
   break;
  } else {
   $tt$tr = $14;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$pval>>2] = 0;
  return;
 }
 else if ((label|0) == 5) {
  $7 = ((($$lcssa41)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = ((($8)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    FUNCTION_TABLE_vii[$11 & 31]($pval,$$lcssa41);
    return;
   }
  }
  HEAP32[$pval>>2] = 0;
  return;
 }
 else if ((label|0) == 10) {
  $16 = ((($$lcssa44)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = ((($17)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    HEAP32[$pval>>2] = 0;
    return;
   } else {
    FUNCTION_TABLE_vii[$20 & 31]($pval,$$lcssa44);
    return;
   }
  }
  $22 = ($$lcssa48<<24>>24)==(5);
  if (!($22)) {
   $23 = ((($$lcssa44)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $phitmp$i1$i = ($24|0)==(1);
   if ($phitmp$i1$i) {
    $25 = ((($$lcssa44)) + 20|0);
    $26 = HEAP32[$25>>2]|0;
    HEAP32[$pval>>2] = $26;
    return;
   }
  }
  HEAP32[$pval>>2] = 0;
  return;
 }
 else if ((label|0) == 18) {
  $27 = ($$lcssa42|0)==(0|0);
  do {
   if (!($27)) {
    $28 = ((($$lcssa42)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if ($30) {
     $34 = ($$lcssa46<<24>>24)==(5);
     if ($34) {
      break;
     }
     $35 = ((($$lcssa42)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $phitmp$i$i = ($36|0)==(1);
     if (!($phitmp$i$i)) {
      break;
     }
     $37 = ((($$lcssa42)) + 20|0);
     $38 = HEAP32[$37>>2]|0;
     HEAP32[$pval>>2] = $38;
     return;
    }
    $31 = ((($29)) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     HEAP32[$pval>>2] = 0;
     return;
    } else {
     FUNCTION_TABLE_vii[$32 & 31]($pval,$$lcssa42);
     return;
    }
   }
  } while(0);
  HEAP32[$pval>>2] = 0;
  return;
 }
 else if ((label|0) == 27) {
  HEAP32[$pval>>2] = 0;
  return;
 }
 else if ((label|0) == 28) {
  return;
 }
}
function _d2i_ASN1_INTEGER($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,51432)|0);
 return ($0|0);
}
function _i2d_ASN1_INTEGER($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,51432)|0);
 return ($0|0);
}
function _ASN1_INTEGER_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(51432)|0);
 return ($0|0);
}
function _ASN1_INTEGER_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,51432);
 return;
}
function _ASN1_BIT_STRING_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(51460)|0);
 return ($0|0);
}
function _ASN1_BIT_STRING_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,51460);
 return;
}
function _i2d_ASN1_OCTET_STRING($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,51488)|0);
 return ($0|0);
}
function _ASN1_OCTET_STRING_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(51488)|0);
 return ($0|0);
}
function _ASN1_OCTET_STRING_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,51488);
 return;
}
function _ASN1_TYPE_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(51572)|0);
 return ($0|0);
}
function _ASN1_TYPE_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,51572);
 return;
}
function _d2i_ASN1_SEQUENCE_ANY($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,51600)|0);
 return ($0|0);
}
function _asn1_get_choice_selector($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pval>>2]|0;
 $1 = ((($it)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2)|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _asn1_set_choice_selector($pval,$value,$it) {
 $pval = $pval|0;
 $value = $value|0;
 $it = $it|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pval>>2]|0;
 $1 = ((($it)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + ($2)|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = $value;
 return ($4|0);
}
function _asn1_do_lock($pval,$op,$it) {
 $pval = $pval|0;
 $op = $op|0;
 $it = $it|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$it>>0]|0;
 switch ($0<<24>>24) {
 case 6: case 1:  {
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 $1 = ((($it)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = HEAP32[$pval>>2]|0;
 $9 = ((($2)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + ($10)|0);
 $12 = ($op|0)==(0);
 if ($12) {
  HEAP32[$11>>2] = 1;
  $$0 = 1;
  return ($$0|0);
 } else {
  $13 = ((($2)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_CRYPTO_add_lock($11,$op,$14,90096,118)|0);
  $$0 = $15;
  return ($$0|0);
 }
 return (0)|0;
}
function _asn1_enc_init($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pval|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$pval>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($it)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 $10 = ((($4)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($1) + ($11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  return;
 }
 HEAP32[$12>>2] = 0;
 $$sum = (($11) + 4)|0;
 $14 = (($1) + ($$sum)|0);
 HEAP32[$14>>2] = 0;
 $$sum1 = (($11) + 8)|0;
 $15 = (($1) + ($$sum1)|0);
 HEAP32[$15>>2] = 1;
 return;
}
function _asn1_enc_free($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pval|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$pval>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($it)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 $10 = ((($4)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($1) + ($11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  return;
 }
 $14 = HEAP32[$12>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _CRYPTO_free($14);
 }
 HEAP32[$12>>2] = 0;
 $$sum = (($11) + 4)|0;
 $16 = (($1) + ($$sum)|0);
 HEAP32[$16>>2] = 0;
 $$sum1 = (($11) + 8)|0;
 $17 = (($1) + ($$sum1)|0);
 HEAP32[$17>>2] = 1;
 return;
}
function _asn1_enc_save($pval,$in,$inlen,$it) {
 $pval = $pval|0;
 $in = $in|0;
 $inlen = $inlen|0;
 $it = $it|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pval|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = HEAP32[$pval>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ((($it)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ((($4)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($1) + ($11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 1;
  return ($$0|0);
 }
 $14 = HEAP32[$12>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _CRYPTO_free($14);
 }
 $16 = (_CRYPTO_malloc($inlen,90096,174)|0);
 HEAP32[$12>>2] = $16;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($16|0),($in|0),($inlen|0))|0;
 $$sum = (($11) + 4)|0;
 $18 = (($1) + ($$sum)|0);
 HEAP32[$18>>2] = $inlen;
 $$sum1 = (($11) + 8)|0;
 $19 = (($1) + ($$sum1)|0);
 HEAP32[$19>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _asn1_enc_restore($len,$out,$pval,$it) {
 $len = $len|0;
 $out = $out|0;
 $pval = $pval|0;
 $it = $it|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pval|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$pval>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($it)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($4)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($1) + ($11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $$sum = (($11) + 8)|0;
 $14 = (($1) + ($$sum)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = ($out|0)==(0|0);
 if (!($17)) {
  $18 = HEAP32[$out>>2]|0;
  $19 = HEAP32[$12>>2]|0;
  $$sum1 = (($11) + 4)|0;
  $20 = (($1) + ($$sum1)|0);
  $21 = HEAP32[$20>>2]|0;
  _memcpy(($18|0),($19|0),($21|0))|0;
  $22 = HEAP32[$20>>2]|0;
  $23 = HEAP32[$out>>2]|0;
  $24 = (($23) + ($22)|0);
  HEAP32[$out>>2] = $24;
 }
 $25 = ($len|0)==(0|0);
 if ($25) {
  $$0 = 1;
  return ($$0|0);
 }
 $$sum2 = (($11) + 4)|0;
 $26 = (($1) + ($$sum2)|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$len>>2] = $27;
 $$0 = 1;
 return ($$0|0);
}
function _asn1_get_field_ptr($pval,$tt) {
 $pval = $pval|0;
 $tt = $tt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$tt>>2]|0;
 $1 = $0 & 1024;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $pval;
  return ($$0|0);
 }
 $3 = HEAP32[$pval>>2]|0;
 $4 = ((($tt)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5)|0);
 $$0 = $6;
 return ($$0|0);
}
function _asn1_do_adb($pval,$tt,$nullerr) {
 $pval = $pval|0;
 $tt = $tt|0;
 $nullerr = $nullerr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atbl$02 = 0, $atbl$02$lcssa = 0, $i$03 = 0, $selector$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$tt>>2]|0;
 $1 = $0 & 768;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = $tt;
  return ($$0|0);
 }
 $3 = ((($tt)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$pval>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = ((($4)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $$0 = $11;
   return ($$0|0);
  }
 } else {
  $13 = $0 & 256;
  $14 = ($13|0)==(0);
  $15 = HEAP32[$8>>2]|0;
  if ($14) {
   $17 = (_ASN1_INTEGER_get($15)|0);
   $selector$0 = $17;
  } else {
   $16 = (_OBJ_obj2nid($15)|0);
   $selector$0 = $16;
  }
  $18 = ((($4)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>(0);
  L12: do {
   if ($20) {
    $21 = ((($4)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $atbl$02 = $22;$i$03 = 0;
    while(1) {
     $23 = HEAP32[$atbl$02>>2]|0;
     $24 = ($23|0)==($selector$0|0);
     if ($24) {
      $atbl$02$lcssa = $atbl$02;
      break;
     }
     $26 = (($i$03) + 1)|0;
     $27 = ((($atbl$02)) + 24|0);
     $28 = ($26|0)<($19|0);
     if ($28) {
      $atbl$02 = $27;$i$03 = $26;
     } else {
      break L12;
     }
    }
    $25 = ((($atbl$02$lcssa)) + 4|0);
    $$0 = $25;
    return ($$0|0);
   }
  } while(0);
  $29 = ((($4)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0|0);
  if (!($31)) {
   $$0 = $30;
   return ($$0|0);
  }
 }
 $32 = ($nullerr|0)==(0);
 if ($32) {
  $$0 = 0;
  return ($$0|0);
 }
 _ERR_put_error(13,110,164,90096,273);
 $$0 = 0;
 return ($$0|0);
}
function _d2i_X509_ALGOR($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,51648)|0);
 return ($0|0);
}
function _i2d_X509_ALGOR($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,51648)|0);
 return ($0|0);
}
function _X509_ALGOR_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(51648)|0);
 return ($0|0);
}
function _X509_ALGOR_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,51648);
 return;
}
function _X509_ALGOR_set0($alg,$aobj,$ptype,$pval) {
 $alg = $alg|0;
 $aobj = $aobj|0;
 $ptype = $ptype|0;
 $pval = $pval|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alg|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($ptype|0)==(-1);
 if (!($1)) {
  $2 = ((($alg)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $5 = (_ASN1_TYPE_new()|0);
   HEAP32[$2>>2] = $5;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 $7 = HEAP32[$alg>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _ASN1_OBJECT_free($7);
 }
 HEAP32[$alg>>2] = $aobj;
 $9 = ($ptype|0)==(0);
 if ($9) {
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ((($alg)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 if (!($1)) {
  _ASN1_TYPE_set($11,$ptype,$pval);
  $$0 = 1;
  return ($$0|0);
 }
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 1;
  return ($$0|0);
 }
 _ASN1_TYPE_free($11);
 HEAP32[$10>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _X509_ALGOR_get0($paobj,$pptype,$ppval,$algor) {
 $paobj = $paobj|0;
 $pptype = $pptype|0;
 $ppval = $ppval|0;
 $algor = $algor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($paobj|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$algor>>2]|0;
  HEAP32[$paobj>>2] = $1;
 }
 $2 = ($pptype|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($algor)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$pptype>>2] = -1;
  return;
 }
 $6 = HEAP32[$4>>2]|0;
 HEAP32[$pptype>>2] = $6;
 $7 = ($ppval|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = ((($4)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$ppval>>2] = $9;
 return;
}
function _X509_ALGOR_set_md($alg,$md) {
 $alg = $alg|0;
 $md = $md|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($md)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 8;
 $3 = ($2|0)==(0);
 $$ = $3 ? 5 : -1;
 $4 = (_EVP_MD_type($md)|0);
 $5 = (_OBJ_nid2obj($4)|0);
 $6 = ($alg|0)==(0|0);
 if ($6) {
  return;
 }
 if ($3) {
  $7 = ((($alg)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $10 = (_ASN1_TYPE_new()|0);
   HEAP32[$7>>2] = $10;
   $11 = ($10|0)==(0|0);
   if ($11) {
    return;
   }
  }
 }
 $12 = HEAP32[$alg>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  _ASN1_OBJECT_free($12);
 }
 HEAP32[$alg>>2] = $5;
 $14 = ((($alg)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 if ($3) {
  _ASN1_TYPE_set($15,$$,0);
  return;
 }
 $16 = ($15|0)==(0|0);
 if ($16) {
  return;
 }
 _ASN1_TYPE_free($15);
 HEAP32[$14>>2] = 0;
 return;
}
function _X509_ATTRIBUTE_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,51744);
 return;
}
function _bn_new($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $$ = 0, $0 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_BN_new()|0);
 HEAP32[$pval>>2] = $0;
 $not$ = ($0|0)!=(0|0);
 $$ = $not$&1;
 return ($$|0);
}
function _bn_free($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pval>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($it)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  _BN_free($0);
 } else {
  _BN_clear_free($0);
 }
 HEAP32[$pval>>2] = 0;
 return;
}
function _bn_c2i($pval,$cont,$len,$utype,$free_cont,$it) {
 $pval = $pval|0;
 $cont = $cont|0;
 $len = $len|0;
 $utype = $utype|0;
 $free_cont = $free_cont|0;
 $it = $it|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pval>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_BN_new()|0);
  HEAP32[$pval>>2] = $2;
  $not$$i = ($2|0)==(0|0);
  if ($not$$i) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $3 = $2;
  }
 } else {
  $3 = $0;
 }
 $4 = (_BN_bin2bn($cont,$len,$3)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = HEAP32[$pval>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($it)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  _BN_free($6);
 } else {
  _BN_clear_free($6);
 }
 HEAP32[$pval>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _bn_i2c($pval,$cont,$putype,$it) {
 $pval = $pval|0;
 $cont = $cont|0;
 $putype = $putype|0;
 $it = $it|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pval>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = (_BN_num_bits($0)|0);
 $3 = $2 & 7;
 $4 = ($3|0)==(0);
 $$ = $4&1;
 $5 = ($cont|0)==(0|0);
 if (!($5)) {
  if ($4) {
   $6 = ((($cont)) + 1|0);
   HEAP8[$cont>>0] = 0;
   $$01 = $6;
  } else {
   $$01 = $cont;
  }
  (_BN_bn2bin($0,$$01)|0);
 }
 $7 = (_BN_num_bits($0)|0);
 $8 = (($7) + 7)|0;
 $9 = (($8|0) / 8)&-1;
 $10 = (($9) + ($$))|0;
 $$0 = $10;
 return ($$0|0);
}
function _long_new($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($it)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$pval>>2] = $1;
 return 1;
}
function _long_free($pval,$it) {
 $pval = $pval|0;
 $it = $it|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($it)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$pval>>2] = $1;
 return;
}
function _long_c2i($pval,$cont,$len,$utype,$free_cont,$it) {
 $pval = $pval|0;
 $cont = $cont|0;
 $len = $len|0;
 $utype = $utype|0;
 $free_cont = $free_cont|0;
 $it = $it|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $exitcond3 = 0, $i$01 = 0, $i$01$us = 0, $neg$0 = 0, $sext = 0, $utmp$0$ = 0, $utmp$0$lcssa = 0, $utmp$02 = 0, $utmp$02$us = 0, $utmp$1 = 0, $utmp$1$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)>(4);
 if ($0) {
  _ERR_put_error(13,166,128,90206,163);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($len|0)==(0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP8[$cont>>0]|0;
  $3 = ($2<<24>>24)<(0);
  if ($3) {
   $neg$0 = 1;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $neg$0 = 0;
 }
 $4 = ($len|0)>(0);
 if ($4) {
  $5 = ($neg$0|0)==(0);
  if ($5) {
   $i$01$us = 0;$utmp$02$us = 0;
   while(1) {
    $6 = $utmp$02$us << 8;
    $7 = (($cont) + ($i$01$us)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $utmp$1$us = $9 | $6;
    $10 = (($i$01$us) + 1)|0;
    $exitcond3 = ($10|0)==($len|0);
    if ($exitcond3) {
     $utmp$0$lcssa = $utmp$1$us;
     break;
    } else {
     $i$01$us = $10;$utmp$02$us = $utmp$1$us;
    }
   }
  } else {
   $i$01 = 0;$utmp$02 = 0;
   while(1) {
    $11 = $utmp$02 << 8;
    $12 = (($cont) + ($i$01)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&255;
    $15 = $14 | $11;
    $utmp$1 = $15 ^ 255;
    $16 = (($i$01) + 1)|0;
    $exitcond = ($16|0)==($len|0);
    if ($exitcond) {
     $utmp$0$lcssa = $utmp$1;
     break;
    } else {
     $i$01 = $16;$utmp$02 = $utmp$1;
    }
   }
  }
 } else {
  $utmp$0$lcssa = 0;
 }
 $17 = $neg$0 << 31;
 $sext = $17 >> 31;
 $utmp$0$ = $utmp$0$lcssa ^ $sext;
 $18 = ((($it)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($utmp$0$|0)==($19|0);
 if ($20) {
  _ERR_put_error(13,166,128,90206,185);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP8[$pval>>0]=$utmp$0$&255;HEAP8[$pval+1>>0]=($utmp$0$>>8)&255;HEAP8[$pval+2>>0]=($utmp$0$>>16)&255;HEAP8[$pval+3>>0]=$utmp$0$>>24;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _long_i2c($pval,$cont,$putype,$it) {
 $pval = $pval|0;
 $cont = $cont|0;
 $putype = $putype|0;
 $it = $it|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$us = 0, $i$02 = 0, $i$04 = 0, $i$04$us = 0, $storemerge = 0, $storemerge$us = 0, $utmp$0 = 0, $utmp$13 = 0, $utmp$13$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAPU8[$pval>>0]|(HEAPU8[$pval+1>>0]<<8)|(HEAPU8[$pval+2>>0]<<16)|(HEAPU8[$pval+3>>0]<<24);
 $1 = ((($it)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)==($2|0);
 if ($3) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = ($0|0)<(0);
 $$lobit = $0 >> 31;
 $utmp$0 = $$lobit ^ $0;
 $5 = (_BN_num_bits_word($utmp$0)|0);
 $6 = $5 & 7;
 $7 = ($6|0)==(0);
 $$ = $7&1;
 $8 = (($5) + 7)|0;
 $9 = $8 >> 3;
 $10 = ($cont|0)==(0|0);
 if (!($10)) {
  if ($7) {
   $11 = $$lobit&255;
   $12 = ((($cont)) + 1|0);
   HEAP8[$cont>>0] = $11;
   $$01 = $12;
  } else {
   $$01 = $cont;
  }
  $i$02 = (($9) + -1)|0;
  $13 = ($9|0)>(0);
  if ($13) {
   if ($4) {
    $i$04$us = $i$02;$utmp$13$us = $utmp$0;
    while(1) {
     $14 = (($$01) + ($i$04$us)|0);
     $15 = $utmp$13$us ^ 255;
     $storemerge$us = $15&255;
     HEAP8[$14>>0] = $storemerge$us;
     $16 = $utmp$13$us >>> 8;
     $i$0$us = (($i$04$us) + -1)|0;
     $17 = ($i$04$us|0)>(0);
     if ($17) {
      $i$04$us = $i$0$us;$utmp$13$us = $16;
     } else {
      break;
     }
    }
   } else {
    $i$04 = $i$02;$utmp$13 = $utmp$0;
    while(1) {
     $18 = (($$01) + ($i$04)|0);
     $storemerge = $utmp$13&255;
     HEAP8[$18>>0] = $storemerge;
     $19 = $utmp$13 >>> 8;
     $i$0 = (($i$04) + -1)|0;
     $20 = ($i$04|0)>(0);
     if ($20) {
      $i$04 = $i$0;$utmp$13 = $19;
     } else {
      break;
     }
    }
   }
  }
 }
 $21 = (($$) + ($9))|0;
 $$0 = $21;
 return ($$0|0);
}
function _long_print($out,$pval,$it,$indent,$pctx) {
 $out = $out|0;
 $pval = $pval|0;
 $it = $it|0;
 $indent = $indent|0;
 $pctx = $pctx|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pval>>2]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (_BIO_printf($out,90201,$vararg_buffer)|0);
 STACKTOP = sp;return ($1|0);
}
function _X509_PUBKEY_set($x,$pkey) {
 $x = $x|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_ASN1_item_new(52028)|0);
 $cond = ($1|0)==(0|0);
 if ($cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($pkey)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   _ERR_put_error(11,120,111,90215,111);
  } else {
   $5 = ((($3)) + 24|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    _ERR_put_error(11,120,124,90215,107);
    break;
   }
   $8 = (FUNCTION_TABLE_iii[$6 & 127]($1,$pkey)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    _ERR_put_error(11,120,126,90215,103);
    break;
   }
   $10 = HEAP32[$x>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    _ASN1_item_free($10,52028);
   }
   HEAP32[$x>>2] = $1;
   $$0 = 1;
   return ($$0|0);
  }
 } while(0);
 _ASN1_item_free($1,52028);
 $$0 = 0;
 return ($$0|0);
}
function _i2d_RSA_PUBKEY($a,$pp) {
 $a = $a|0;
 $pp = $pp|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $xpk$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $xpk$i = sp;
 $0 = ($a|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_EVP_PKEY_new()|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(13,165,65,90215,254);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_EVP_PKEY_set1_RSA($1,$a)|0);
 HEAP32[$xpk$i>>2] = 0;
 $3 = (_X509_PUBKEY_set($xpk$i,$1)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0$i = 0;
 } else {
  $5 = HEAP32[$xpk$i>>2]|0;
  $6 = (_ASN1_item_i2d($5,$pp,52028)|0);
  $7 = HEAP32[$xpk$i>>2]|0;
  _ASN1_item_free($7,52028);
  $$0$i = $6;
 }
 _EVP_PKEY_free($1);
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _X509_PUBKEY_set0_param($pub,$aobj,$ptype,$pval,$penc,$penclen) {
 $pub = $pub|0;
 $aobj = $aobj|0;
 $ptype = $ptype|0;
 $pval = $pval|0;
 $penc = $penc|0;
 $penclen = $penclen|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pub>>2]|0;
 $1 = (_X509_ALGOR_set0($0,$aobj,$ptype,$pval)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($penc|0)==(0|0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ((($pub)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $10 = $5;
 } else {
  _CRYPTO_free($7);
  $$pre = HEAP32[$4>>2]|0;
  $10 = $$pre;
 }
 $9 = ((($10)) + 8|0);
 HEAP32[$9>>2] = $penc;
 HEAP32[$10>>2] = $penclen;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & -16;
 $14 = $13 | 8;
 HEAP32[$11>>2] = $14;
 $$0 = 1;
 return ($$0|0);
}
function _X509_PUBKEY_get0_param($ppkalg,$pk,$ppklen,$pa,$pub) {
 $ppkalg = $ppkalg|0;
 $pk = $pk|0;
 $ppklen = $ppklen|0;
 $pa = $pa|0;
 $pub = $pub|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ppkalg|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$pub>>2]|0;
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$ppkalg>>2] = $2;
 }
 $3 = ($pk|0)==(0|0);
 if (!($3)) {
  $4 = ((($pub)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$pk>>2] = $7;
  $8 = HEAP32[$4>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$ppklen>>2] = $9;
 }
 $10 = ($pa|0)==(0|0);
 if ($10) {
  return 1;
 }
 $11 = HEAP32[$pub>>2]|0;
 HEAP32[$pa>>2] = $11;
 return 1;
}
function _pubkey_cb($operation,$pval,$it,$exarg) {
 $operation = $operation|0;
 $pval = $pval|0;
 $it = $it|0;
 $exarg = $exarg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($operation|0)==(3);
 if (!($0)) {
  return 1;
 }
 $1 = HEAP32[$pval>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _EVP_PKEY_free($3);
 return 1;
}
function _d2i_X509_SIG($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,52120)|0);
 return ($0|0);
}
function _i2d_X509_SIG($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,52120)|0);
 return ($0|0);
}
function _X509_SIG_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,52120);
 return;
}
function _rsa_pub_decode($pkey,$pubkey) {
 $pkey = $pkey|0;
 $pubkey = $pubkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $p = 0, $pklen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp + 4|0;
 $pklen = sp;
 $0 = (_X509_PUBKEY_get0_param(0,$p,$pklen,0,$pubkey)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = HEAP32[$pklen>>2]|0;
   $3 = (_d2i_RSAPublicKey(0,$p,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    _ERR_put_error(4,139,4,90290,99);
    $$0 = 0;
    break;
   } else {
    (_EVP_PKEY_assign($pkey,6,$3)|0);
    $$0 = 1;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _rsa_pub_encode($pk,$pkey) {
 $pk = $pk|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $penc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $penc = sp;
 HEAP32[$penc>>2] = 0;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_i2d_RSAPublicKey($1,$penc)|0);
 $3 = ($2|0)<(1);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_OBJ_nid2obj(6)|0);
 $5 = HEAP32[$penc>>2]|0;
 $6 = (_X509_PUBKEY_set0_param($pk,$4,5,0,$5,$2)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$penc>>2]|0;
 _CRYPTO_free($8);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _rsa_pub_cmp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($a)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_BN_cmp($3,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$4>>2]|0;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_BN_cmp($12,$15)|0);
  $17 = ($16|0)==(0);
  $$ = $17&1;
  return ($$|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _rsa_pub_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_rsa_print($bp,$1,$indent,0)|0);
 return ($2|0);
}
function _rsa_priv_decode($pkey,$p8) {
 $pkey = $pkey|0;
 $p8 = $p8|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $p = 0, $pklen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp + 4|0;
 $pklen = sp;
 $0 = (_PKCS8_pkey_get0(0,$p,$pklen,0,$p8)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = HEAP32[$pklen>>2]|0;
   $3 = (_d2i_RSAPrivateKey(0,$p,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    _ERR_put_error(4,147,4,90290,119);
    $$0 = 0;
    break;
   } else {
    (_EVP_PKEY_assign($pkey,6,$3)|0);
    $$0 = 1;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _rsa_priv_encode($p8,$pkey) {
 $p8 = $p8|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $rk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rk = sp;
 HEAP32[$rk>>2] = 0;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_i2d_RSAPrivateKey($1,$rk)|0);
 $3 = ($2|0)<(1);
 if ($3) {
  _ERR_put_error(4,138,65,90290,138);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_OBJ_nid2obj(6)|0);
 $5 = HEAP32[$rk>>2]|0;
 $6 = (_PKCS8_pkey_set0($p8,$4,0,5,0,$5,$2)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _ERR_put_error(4,138,65,90290,144);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _rsa_priv_print($bp,$pkey,$indent,$ctx) {
 $bp = $bp|0;
 $pkey = $pkey|0;
 $indent = $indent|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_do_rsa_print($bp,$1,$indent,1)|0);
 return ($2|0);
}
function _int_rsa_size($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_RSA_size($1)|0);
 return ($2|0);
}
function _rsa_bits($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_BN_num_bits($3)|0);
 return ($4|0);
}
function _rsa_sig_print($bp,$sigalg,$sig,$indent,$pctx) {
 $bp = $bp|0;
 $sigalg = $sigalg|0;
 $sig = $sig|0;
 $indent = $indent|0;
 $pctx = $pctx|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i2 = 0, $$0$i27 = 0, $$0$i310 = 0, $$0$i31014 = 0, $$0$i3811 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $cond = 0, $not$ = 0, $not$$i = 0, $p$i = 0, $p$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p$i1 = sp + 4|0;
 $p$i = sp;
 $0 = HEAP32[$sigalg>>2]|0;
 $1 = (_OBJ_obj2nid($0)|0);
 $2 = ($1|0)==(912);
 if ($2) {
  $3 = ((($sigalg)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  do {
   if ($5) {
    label = 12;
   } else {
    $6 = HEAP32[$4>>2]|0;
    $7 = ($6|0)==(16);
    if ($7) {
     $8 = ((($4)) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($9)) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     HEAP32[$p$i>>2] = $11;
     $12 = HEAP32[$8>>2]|0;
     $13 = HEAP32[$12>>2]|0;
     $14 = (_d2i_RSA_PSS_PARAMS(0,$p$i,$13)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      label = 12;
     } else {
      $16 = ((($14)) + 4|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($17|0)==(0|0);
      if ($18) {
       $$0$i27 = 0;
      } else {
       $19 = ((($17)) + 4|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = ($20|0)==(0|0);
       if ($21) {
        $$0$i2 = 0;
       } else {
        $22 = HEAP32[$17>>2]|0;
        $23 = (_OBJ_obj2nid($22)|0);
        $24 = ($23|0)==(911);
        if ($24) {
         $25 = HEAP32[$19>>2]|0;
         $26 = HEAP32[$25>>2]|0;
         $27 = ($26|0)==(16);
         if ($27) {
          $28 = ((($25)) + 4|0);
          $29 = HEAP32[$28>>2]|0;
          $30 = ((($29)) + 8|0);
          $31 = HEAP32[$30>>2]|0;
          HEAP32[$p$i1>>2] = $31;
          $32 = HEAP32[$28>>2]|0;
          $33 = HEAP32[$32>>2]|0;
          $34 = (_d2i_X509_ALGOR(0,$p$i1,$33)|0);
          $$0$i2 = $34;
         } else {
          $$0$i2 = 0;
         }
        } else {
         $$0$i2 = 0;
        }
       }
       $$0$i27 = $$0$i2;
      }
      $36 = (_BIO_puts($bp,90329)|0);
      $37 = ($36|0)<(1);
      L16: do {
       if ($37) {
        $$0$i310 = 0;
        label = 42;
       } else {
        $38 = (_BIO_indent($bp,$indent,128)|0);
        $39 = ($38|0)==(0);
        if ($39) {
         $$0$i310 = 0;
         label = 42;
        } else {
         $40 = (_BIO_puts($bp,90331)|0);
         $41 = ($40|0)<(1);
         if ($41) {
          $$0$i310 = 0;
          label = 42;
         } else {
          $42 = HEAP32[$14>>2]|0;
          $43 = ($42|0)==(0|0);
          if ($43) {
           $47 = (_BIO_puts($bp,90348)|0);
           $48 = ($47|0)<(1);
           if ($48) {
            $$0$i310 = 0;
            label = 42;
            break;
           }
          } else {
           $44 = HEAP32[$42>>2]|0;
           $45 = (_i2a_ASN1_OBJECT($bp,$44)|0);
           $46 = ($45|0)<(1);
           if ($46) {
            $$0$i310 = 0;
            label = 42;
            break;
           }
          }
          $49 = (_BIO_puts($bp,90329)|0);
          $50 = ($49|0)<(1);
          if ($50) {
           $$0$i310 = 0;
           label = 42;
          } else {
           $51 = (_BIO_indent($bp,$indent,128)|0);
           $52 = ($51|0)==(0);
           if ($52) {
            $$0$i310 = 0;
            label = 42;
           } else {
            $53 = (_BIO_puts($bp,90363)|0);
            $54 = ($53|0)<(1);
            if ($54) {
             $$0$i310 = 0;
             label = 42;
            } else {
             $55 = HEAP32[$16>>2]|0;
             $56 = ($55|0)==(0|0);
             do {
              if ($56) {
               $68 = (_BIO_puts($bp,90395)|0);
               $69 = ($68|0)<(1);
               if ($69) {
                $$0$i310 = 0;
                label = 42;
                break L16;
               }
              } else {
               $57 = HEAP32[$55>>2]|0;
               $58 = (_i2a_ASN1_OBJECT($bp,$57)|0);
               $59 = ($58|0)<(1);
               if ($59) {
                $$0$i310 = 0;
                label = 42;
                break L16;
               }
               $60 = (_BIO_puts($bp,90380)|0);
               $61 = ($60|0)<(1);
               if ($61) {
                $$0$i310 = 0;
                label = 42;
                break L16;
               }
               $62 = ($$0$i27|0)==(0|0);
               if (!($62)) {
                $63 = HEAP32[$$0$i27>>2]|0;
                $64 = (_i2a_ASN1_OBJECT($bp,$63)|0);
                $65 = ($64|0)<(1);
                if (!($65)) {
                 break;
                }
                _RSA_PSS_PARAMS_free($14);
                $$0$i31014 = 0;
                break L16;
               }
               $66 = (_BIO_puts($bp,90387)|0);
               $67 = ($66|0)<(1);
               if (!($67)) {
                break;
               }
               _RSA_PSS_PARAMS_free($14);
               $$0 = 0;
               STACKTOP = sp;return ($$0|0);
              }
             } while(0);
             (_BIO_puts($bp,90329)|0);
             $70 = (_BIO_indent($bp,$indent,128)|0);
             $71 = ($70|0)==(0);
             if ($71) {
              $$0$i310 = 0;
              label = 42;
             } else {
              $72 = (_BIO_puts($bp,90420)|0);
              $73 = ($72|0)<(1);
              if ($73) {
               $$0$i310 = 0;
               label = 42;
              } else {
               $74 = ((($14)) + 8|0);
               $75 = HEAP32[$74>>2]|0;
               $76 = ($75|0)==(0|0);
               if ($76) {
                $79 = (_BIO_puts($bp,90436)|0);
                $80 = ($79|0)<(1);
                if ($80) {
                 $$0$i310 = 0;
                 label = 42;
                 break;
                }
               } else {
                $77 = (_i2a_ASN1_INTEGER($bp,$75)|0);
                $78 = ($77|0)<(1);
                if ($78) {
                 $$0$i310 = 0;
                 label = 42;
                 break;
                }
               }
               (_BIO_puts($bp,90329)|0);
               $81 = (_BIO_indent($bp,$indent,128)|0);
               $82 = ($81|0)==(0);
               if ($82) {
                $$0$i310 = 0;
                label = 42;
               } else {
                $83 = (_BIO_puts($bp,90449)|0);
                $84 = ($83|0)<(1);
                if ($84) {
                 $$0$i310 = 0;
                 label = 42;
                 break;
                }
                $85 = ((($14)) + 12|0);
                $86 = HEAP32[$85>>2]|0;
                $87 = ($86|0)==(0|0);
                if ($87) {
                 $90 = (_BIO_puts($bp,90467)|0);
                 $91 = ($90|0)<(1);
                 if ($91) {
                  $$0$i310 = 0;
                  label = 42;
                  break;
                 }
                } else {
                 $88 = (_i2a_ASN1_INTEGER($bp,$86)|0);
                 $89 = ($88|0)<(1);
                 if ($89) {
                  $$0$i310 = 0;
                  label = 42;
                  break;
                 }
                }
                (_BIO_puts($bp,90329)|0);
                $$0$i310 = 1;
                label = 42;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 42) {
       _RSA_PSS_PARAMS_free($14);
       $92 = ($$0$i27|0)==(0|0);
       if ($92) {
        $$0$i3811 = $$0$i310;
        break;
       } else {
        $$0$i31014 = $$0$i310;
       }
      }
      _X509_ALGOR_free($$0$i27);
      $$0$i3811 = $$0$i31014;
     }
    } else {
     label = 12;
    }
   }
  } while(0);
  if ((label|0) == 12) {
   $35 = (_BIO_puts($bp,90302)|0);
   $not$$i = ($35|0)>(0);
   $$$i = $not$$i&1;
   $$0$i3811 = $$$i;
  }
  $93 = ($$0$i3811|0)==(0);
  if ($93) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $95 = ($sig|0)==(0|0);
  if ($95) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $cond = ($sig|0)==(0|0);
  if ($cond) {
   $94 = (_BIO_puts($bp,90329)|0);
   $not$ = ($94|0)>(0);
   $$ = $not$&1;
   STACKTOP = sp;return ($$|0);
  }
 }
 $96 = (_X509_signature_dump($bp,$sig,$indent)|0);
 $$0 = $96;
 STACKTOP = sp;return ($$0|0);
}
function _int_rsa_free($pkey) {
 $pkey = $pkey|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 _RSA_free($1);
 return;
}
function _rsa_pkey_ctrl($pkey,$op,$arg1,$arg2) {
 $pkey = $pkey|0;
 $op = $op|0;
 $arg1 = $arg1|0;
 $arg2 = $arg2|0;
 var $$$i = 0, $$$i10 = 0, $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i11 = 0, $$0$i15$i = 0, $$0$i2 = 0, $$0$i8 = 0, $$pre = 0, $$pre$i = 0, $$pre$i5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alg = 0, $alg$i = 0, $alg$i1 = 0, $alg$i3 = 0, $cmsalg$i = 0, $label$0$i = 0;
 var $label$i = 0, $labellen$0$i = 0, $md$i = 0, $mgf1md$i = 0, $nid2$i = 0, $or$cond$i = 0, $or$cond$i7 = 0, $os$i = 0, $p$i$i = 0, $p$i$i$i = 0, $pad_mode$i = 0, $pad_mode$i4 = 0, $rv$0$i = 0, $rv$0$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $p$i$i$i = sp + 52|0;
 $p$i$i = sp + 48|0;
 $cmsalg$i = sp + 44|0;
 $md$i = sp + 40|0;
 $mgf1md$i = sp + 36|0;
 $os$i = sp + 32|0;
 $alg$i3 = sp + 28|0;
 $pad_mode$i4 = sp + 24|0;
 $label$i = sp + 20|0;
 $nid2$i = sp + 16|0;
 $alg$i1 = sp + 12|0;
 $pad_mode$i = sp + 8|0;
 $alg$i = sp + 4|0;
 $alg = sp;
 HEAP32[$alg>>2] = 0;
 L1: do {
  switch ($op|0) {
  case 1:  {
   $0 = ($arg1|0)==(0);
   if ($0) {
    _PKCS7_SIGNER_INFO_get0_algs($arg2,0,0,$alg);
   }
   break;
  }
  case 2:  {
   $1 = ($arg1|0)==(0);
   if ($1) {
    _PKCS7_RECIP_INFO_get0_alg($arg2,$alg);
   }
   break;
  }
  case 5:  {
   switch ($arg1|0) {
   case 0:  {
    break;
   }
   case 1:  {
    $12 = (_CMS_SignerInfo_get0_pkey_ctx($arg2)|0);
    _CMS_SignerInfo_get0_algs($arg2,0,0,0,$alg$i1);
    $13 = HEAP32[$alg$i1>>2]|0;
    $14 = HEAP32[$13>>2]|0;
    $15 = (_OBJ_obj2nid($14)|0);
    switch ($15|0) {
    case 6:  {
     $$0$i2 = 1;
     break;
    }
    case 912:  {
     $16 = HEAP32[$alg$i1>>2]|0;
     $17 = (_rsa_pss_to_ctx(0,$12,$16,0)|0);
     $$0$i2 = $17;
     break;
    }
    default: {
     $18 = (_OBJ_find_sigid_algs($15,0,$nid2$i)|0);
     $19 = ($18|0)!=(0);
     $20 = HEAP32[$nid2$i>>2]|0;
     $21 = ($20|0)==(6);
     $or$cond$i = $19 & $21;
     $$$i = $or$cond$i&1;
     $$0$i2 = $$$i;
    }
    }
    $$0 = $$0$i2;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    break L1;
   }
   }
   HEAP32[$pad_mode$i>>2] = 1;
   $2 = (_CMS_SignerInfo_get0_pkey_ctx($arg2)|0);
   _CMS_SignerInfo_get0_algs($arg2,0,0,0,$alg$i);
   $3 = ($2|0)==(0|0);
   L15: do {
    if ($3) {
     label = 10;
    } else {
     $4 = (_EVP_PKEY_CTX_ctrl($2,6,-1,4102,0,$pad_mode$i)|0);
     $5 = ($4|0)<(1);
     if ($5) {
      $$0$i = 0;
     } else {
      $$pre$i = HEAP32[$pad_mode$i>>2]|0;
      switch ($$pre$i|0) {
      case 1:  {
       label = 10;
       break L15;
       break;
      }
      case 6:  {
       break;
      }
      default: {
       $$0$i = 0;
       break L15;
      }
      }
      $8 = (_rsa_ctx_to_pss($2)|0);
      $9 = ($8|0)==(0|0);
      if ($9) {
       $$0$i = 0;
      } else {
       $10 = HEAP32[$alg$i>>2]|0;
       $11 = (_OBJ_nid2obj(912)|0);
       (_X509_ALGOR_set0($10,$11,16,$8)|0);
       $$0$i = 1;
      }
     }
    }
   } while(0);
   if ((label|0) == 10) {
    $6 = HEAP32[$alg$i>>2]|0;
    $7 = (_OBJ_nid2obj(6)|0);
    (_X509_ALGOR_set0($6,$7,5,0)|0);
    $$0$i = 1;
   }
   $$0 = $$0$i;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 7:  {
   switch ($arg1|0) {
   case 0:  {
    HEAP32[$os$i>>2] = 0;
    $22 = (_CMS_RecipientInfo_get0_pkey_ctx($arg2)|0);
    HEAP32[$pad_mode$i4>>2] = 1;
    (_CMS_RecipientInfo_ktri_get0_algs($arg2,0,0,$alg$i3)|0);
    $23 = ($22|0)==(0|0);
    L27: do {
     if ($23) {
      label = 22;
     } else {
      $24 = (_EVP_PKEY_CTX_ctrl($22,6,-1,4102,0,$pad_mode$i4)|0);
      $25 = ($24|0)<(1);
      if ($25) {
       $$0$i8 = 0;
      } else {
       $$pre$i5 = HEAP32[$pad_mode$i4>>2]|0;
       switch ($$pre$i5|0) {
       case 1:  {
        label = 22;
        break L27;
        break;
       }
       case 4:  {
        break;
       }
       default: {
        $$0$i8 = 0;
        break L27;
       }
       }
       $28 = (_EVP_PKEY_CTX_ctrl($22,6,768,4107,0,$md$i)|0);
       $29 = ($28|0)<(1);
       if ($29) {
        $$0$i8 = 0;
       } else {
        $30 = (_EVP_PKEY_CTX_ctrl($22,6,1016,4104,0,$mgf1md$i)|0);
        $31 = ($30|0)<(1);
        if ($31) {
         $$0$i8 = 0;
        } else {
         $32 = (_EVP_PKEY_CTX_ctrl($22,6,768,4108,0,$label$i)|0);
         $33 = ($32|0)<(0);
         if ($33) {
          $$0$i8 = 0;
         } else {
          $34 = (_RSA_OAEP_PARAMS_new()|0);
          $35 = ($34|0)==(0|0);
          if ($35) {
           $$0$i8 = 0;
          } else {
           $36 = HEAP32[$md$i>>2]|0;
           $37 = (_EVP_MD_type($36)|0);
           $38 = ($37|0)==(64);
           if ($38) {
            label = 30;
           } else {
            $39 = (_X509_ALGOR_new()|0);
            HEAP32[$34>>2] = $39;
            $40 = ($39|0)==(0|0);
            if ($40) {
             $rv$0$ph$i = 0;
            } else {
             _X509_ALGOR_set_md($39,$36);
             label = 30;
            }
           }
           L38: do {
            if ((label|0) == 30) {
             $41 = ((($34)) + 4|0);
             $42 = HEAP32[$mgf1md$i>>2]|0;
             $43 = (_rsa_md_to_mgf1($41,$42)|0);
             $44 = ($43|0)==(0);
             if ($44) {
              $rv$0$ph$i = 0;
             } else {
              $45 = ($32|0)>(0);
              do {
               if ($45) {
                $46 = (_ASN1_OCTET_STRING_new()|0);
                $47 = (_X509_ALGOR_new()|0);
                $48 = ((($34)) + 8|0);
                HEAP32[$48>>2] = $47;
                $49 = ($47|0)!=(0|0);
                $50 = ($46|0)!=(0|0);
                $or$cond$i7 = $50 & $49;
                if (!($or$cond$i7)) {
                 $rv$0$ph$i = 0;
                 break L38;
                }
                $51 = HEAP32[$label$i>>2]|0;
                $52 = (_ASN1_OCTET_STRING_set($46,$51,$32)|0);
                $53 = ($52|0)==(0);
                if ($53) {
                 _ASN1_OCTET_STRING_free($46);
                 $rv$0$ph$i = 0;
                 break L38;
                } else {
                 $54 = HEAP32[$48>>2]|0;
                 $55 = (_OBJ_nid2obj(935)|0);
                 (_X509_ALGOR_set0($54,$55,4,$46)|0);
                 break;
                }
               }
              } while(0);
              $56 = (_ASN1_item_pack($34,52488,$os$i)|0);
              $57 = ($56|0)==(0|0);
              if ($57) {
               $rv$0$ph$i = 0;
              } else {
               $58 = HEAP32[$alg$i3>>2]|0;
               $59 = (_OBJ_nid2obj(919)|0);
               $60 = HEAP32[$os$i>>2]|0;
               (_X509_ALGOR_set0($58,$59,16,$60)|0);
               HEAP32[$os$i>>2] = 0;
               $rv$0$ph$i = 1;
              }
             }
            }
           } while(0);
           _RSA_OAEP_PARAMS_free($34);
           $$pre = HEAP32[$os$i>>2]|0;
           $61 = ($$pre|0)==(0|0);
           if ($61) {
            $$0$i8 = $rv$0$ph$i;
           } else {
            _ASN1_STRING_free($$pre);
            $$0$i8 = $rv$0$ph$i;
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     $26 = HEAP32[$alg$i3>>2]|0;
     $27 = (_OBJ_nid2obj(6)|0);
     (_X509_ALGOR_set0($26,$27,5,0)|0);
     $$0$i8 = 1;
    }
    $$0 = $$0$i8;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 1:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $62 = (_CMS_RecipientInfo_get0_pkey_ctx($arg2)|0);
   $63 = ($62|0)==(0|0);
   L56: do {
    if ($63) {
     $$0$i11 = 0;
    } else {
     $64 = (_CMS_RecipientInfo_ktri_get0_algs($arg2,0,0,$cmsalg$i)|0);
     $65 = ($64|0)==(0);
     if ($65) {
      $$0$i11 = -1;
     } else {
      $66 = HEAP32[$cmsalg$i>>2]|0;
      $67 = HEAP32[$66>>2]|0;
      $68 = (_OBJ_obj2nid($67)|0);
      switch ($68|0) {
      case 6:  {
       $$0$i11 = 1;
       break L56;
       break;
      }
      case 919:  {
       break;
      }
      default: {
       _ERR_put_error(4,158,164,90290,808);
       $$0$i11 = -1;
       break L56;
      }
      }
      $69 = HEAP32[$cmsalg$i>>2]|0;
      $70 = ((($69)) + 4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)==(0|0);
      if (!($72)) {
       $73 = HEAP32[$71>>2]|0;
       $74 = ($73|0)==(16);
       if ($74) {
        $75 = ((($71)) + 4|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = ((($76)) + 8|0);
        $78 = HEAP32[$77>>2]|0;
        HEAP32[$p$i$i>>2] = $78;
        $79 = HEAP32[$75>>2]|0;
        $80 = HEAP32[$79>>2]|0;
        $81 = (_d2i_RSA_OAEP_PARAMS(0,$p$i$i,$80)|0);
        $82 = ($81|0)==(0|0);
        if (!($82)) {
         $83 = ((($81)) + 4|0);
         $84 = HEAP32[$83>>2]|0;
         $85 = ($84|0)==(0|0);
         if ($85) {
          $$0$i$i$i = 0;
         } else {
          $86 = ((($84)) + 4|0);
          $87 = HEAP32[$86>>2]|0;
          $88 = ($87|0)==(0|0);
          if ($88) {
           $$0$i$i$i = 0;
          } else {
           $89 = HEAP32[$84>>2]|0;
           $90 = (_OBJ_obj2nid($89)|0);
           $91 = ($90|0)==(911);
           if ($91) {
            $92 = HEAP32[$86>>2]|0;
            $93 = HEAP32[$92>>2]|0;
            $94 = ($93|0)==(16);
            if ($94) {
             $95 = ((($92)) + 4|0);
             $96 = HEAP32[$95>>2]|0;
             $97 = ((($96)) + 8|0);
             $98 = HEAP32[$97>>2]|0;
             HEAP32[$p$i$i$i>>2] = $98;
             $99 = HEAP32[$95>>2]|0;
             $100 = HEAP32[$99>>2]|0;
             $101 = (_d2i_X509_ALGOR(0,$p$i$i$i,$100)|0);
             $$0$i$i$i = $101;
            } else {
             $$0$i$i$i = 0;
            }
           } else {
            $$0$i$i$i = 0;
           }
          }
         }
         $102 = HEAP32[$83>>2]|0;
         $103 = (_rsa_mgf1_to_md($102,$$0$i$i$i)|0);
         $104 = ($103|0)==(0|0);
         L72: do {
          if ($104) {
           $rv$0$i = -1;
          } else {
           $105 = HEAP32[$81>>2]|0;
           $106 = ($105|0)==(0|0);
           if ($106) {
            $112 = (_EVP_sha1()|0);
            $113 = ($112|0)==(0|0);
            if ($113) {
             $rv$0$i = -1;
             break;
            } else {
             $$0$i15$i = $112;
            }
           } else {
            $107 = HEAP32[$105>>2]|0;
            $108 = (_OBJ_obj2nid($107)|0);
            $109 = (_OBJ_nid2sn($108)|0);
            $110 = (_EVP_get_digestbyname($109)|0);
            $111 = ($110|0)==(0|0);
            if ($111) {
             _ERR_put_error(4,157,163,90290,499);
             $rv$0$i = -1;
             break;
            } else {
             $$0$i15$i = $110;
            }
           }
           $114 = ((($81)) + 8|0);
           $115 = HEAP32[$114>>2]|0;
           $116 = ($115|0)==(0|0);
           do {
            if ($116) {
             $label$0$i = 0;$labellen$0$i = 0;
            } else {
             $117 = HEAP32[$115>>2]|0;
             $118 = (_OBJ_obj2nid($117)|0);
             $119 = ($118|0)==(935);
             if (!($119)) {
              _ERR_put_error(4,158,165,90290,829);
              $rv$0$i = -1;
              break L72;
             }
             $120 = ((($115)) + 4|0);
             $121 = HEAP32[$120>>2]|0;
             $122 = HEAP32[$121>>2]|0;
             $123 = ($122|0)==(4);
             if ($123) {
              $124 = ((($121)) + 4|0);
              $125 = HEAP32[$124>>2]|0;
              $126 = ((($125)) + 8|0);
              $127 = HEAP32[$126>>2]|0;
              HEAP32[$126>>2] = 0;
              $128 = HEAP32[$124>>2]|0;
              $129 = HEAP32[$128>>2]|0;
              $label$0$i = $127;$labellen$0$i = $129;
              break;
             } else {
              _ERR_put_error(4,158,161,90290,833);
              $rv$0$i = -1;
              break L72;
             }
            }
           } while(0);
           $130 = (_EVP_PKEY_CTX_ctrl($62,6,-1,4097,4,0)|0);
           $131 = ($130|0)<(1);
           if ($131) {
            $rv$0$i = -1;
           } else {
            $132 = (_EVP_PKEY_CTX_ctrl($62,6,768,4105,0,$$0$i15$i)|0);
            $133 = ($132|0)<(1);
            if ($133) {
             $rv$0$i = -1;
            } else {
             $134 = (_EVP_PKEY_CTX_ctrl($62,6,1016,4101,0,$103)|0);
             $135 = ($134|0)<(1);
             if ($135) {
              $rv$0$i = -1;
             } else {
              $136 = (_EVP_PKEY_CTX_ctrl($62,6,768,4106,$labellen$0$i,$label$0$i)|0);
              $137 = ($136|0)<(1);
              $$$i10 = $137 ? -1 : 1;
              $rv$0$i = $$$i10;
             }
            }
           }
          }
         } while(0);
         _RSA_OAEP_PARAMS_free($81);
         $138 = ($$0$i$i$i|0)==(0|0);
         if ($138) {
          $$0$i11 = $rv$0$i;
          break;
         }
         _X509_ALGOR_free($$0$i$i$i);
         $$0$i11 = $rv$0$i;
         break;
        }
       }
      }
      _ERR_put_error(4,158,162,90290,815);
      _RSA_OAEP_PARAMS_free(0);
      $$0$i11 = -1;
     }
    }
   } while(0);
   $$0 = $$0$i11;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 8:  {
   HEAP32[$arg2>>2] = 0;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 3:  {
   HEAP32[$arg2>>2] = 672;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 $139 = HEAP32[$alg>>2]|0;
 $140 = ($139|0)==(0|0);
 if ($140) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $141 = (_OBJ_nid2obj(6)|0);
 (_X509_ALGOR_set0($139,$141,5,0)|0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _old_rsa_priv_decode($pkey,$pder,$derlen) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 $derlen = $derlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_d2i_RSAPrivateKey(0,$pder,$derlen)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(4,147,4,90290,119);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_EVP_PKEY_assign($pkey,6,$0)|0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _old_rsa_priv_encode($pkey,$pder) {
 $pkey = $pkey|0;
 $pder = $pder|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pkey)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_i2d_RSAPrivateKey($1,$pder)|0);
 return ($2|0);
}
function _rsa_item_verify($ctx,$it,$asn,$sigalg,$sig,$pkey) {
 $ctx = $ctx|0;
 $it = $it|0;
 $asn = $asn|0;
 $sigalg = $sigalg|0;
 $sig = $sig|0;
 $pkey = $pkey|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$sigalg>>2]|0;
 $1 = (_OBJ_obj2nid($0)|0);
 $2 = ($1|0)==(912);
 if ($2) {
  $3 = (_rsa_pss_to_ctx($ctx,0,$sigalg,$pkey)|0);
  $4 = ($3|0)>(0);
  $$ = $4 ? 2 : -1;
  $$0 = $$;
  return ($$0|0);
 } else {
  _ERR_put_error(4,156,155,90290,698);
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _rsa_item_sign($ctx,$it,$asn,$alg1,$alg2,$sig) {
 $ctx = $ctx|0;
 $it = $it|0;
 $asn = $asn|0;
 $alg1 = $alg1|0;
 $alg2 = $alg2|0;
 $sig = $sig|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $pad_mode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pad_mode = sp;
 $0 = ((($ctx)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EVP_PKEY_CTX_ctrl($1,6,-1,4102,0,$pad_mode)|0);
 $3 = ($2|0)<(1);
 L1: do {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = HEAP32[$pad_mode>>2]|0;
   $cond = ($4|0)==(6);
   if ($cond) {
    $5 = (_rsa_ctx_to_pss($1)|0);
    $6 = ($5|0)==(0|0);
    if ($6) {
     $$0 = 0;
    } else {
     $7 = ($alg2|0)==(0|0);
     do {
      if (!($7)) {
       $8 = (_ASN1_STRING_dup($5)|0);
       $9 = ($8|0)==(0|0);
       if ($9) {
        _ASN1_STRING_free($5);
        $$0 = 0;
        break L1;
       } else {
        $10 = (_OBJ_nid2obj(912)|0);
        (_X509_ALGOR_set0($alg2,$10,16,$8)|0);
        break;
       }
      }
     } while(0);
     $11 = (_OBJ_nid2obj(912)|0);
     (_X509_ALGOR_set0($alg1,$11,16,$5)|0);
     $$0 = 3;
    }
   } else {
    $$0 = 2;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _rsa_ctx_to_pss($pkctx) {
 $pkctx = $pkctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mgf1md = 0, $os = 0, $saltlen = 0, $sigmd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sigmd = sp + 12|0;
 $mgf1md = sp + 8|0;
 $os = sp + 4|0;
 $saltlen = sp;
 HEAP32[$os>>2] = 0;
 $0 = (_EVP_PKEY_CTX_get0_pkey($pkctx)|0);
 $1 = (_EVP_PKEY_CTX_ctrl($pkctx,-1,248,13,0,$sigmd)|0);
 $2 = ($1|0)<(1);
 if (!($2)) {
  $3 = (_EVP_PKEY_CTX_ctrl($pkctx,6,1016,4104,0,$mgf1md)|0);
  $4 = ($3|0)<(1);
  if (!($4)) {
   $5 = (_EVP_PKEY_CTX_ctrl($pkctx,6,24,4103,0,$saltlen)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    $7 = HEAP32[$saltlen>>2]|0;
    switch ($7|0) {
    case -1:  {
     $8 = HEAP32[$sigmd>>2]|0;
     $9 = (_EVP_MD_size($8)|0);
     HEAP32[$saltlen>>2] = $9;
     break;
    }
    case -2:  {
     $10 = (_EVP_PKEY_size($0)|0);
     $11 = HEAP32[$sigmd>>2]|0;
     $12 = (_EVP_MD_size($11)|0);
     $13 = (($10) + -2)|0;
     $14 = (($13) - ($12))|0;
     HEAP32[$saltlen>>2] = $14;
     $15 = (_EVP_PKEY_bits($0)|0);
     $16 = (($15) + 7)|0;
     $17 = $16 & 7;
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = HEAP32[$saltlen>>2]|0;
      $20 = (($19) + -1)|0;
      HEAP32[$saltlen>>2] = $20;
     }
     break;
    }
    default: {
    }
    }
    $21 = (_RSA_PSS_PARAMS_new()|0);
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $23 = HEAP32[$saltlen>>2]|0;
     $24 = ($23|0)==(20);
     if ($24) {
      label = 12;
     } else {
      $25 = (_ASN1_INTEGER_new()|0);
      $26 = ((($21)) + 8|0);
      HEAP32[$26>>2] = $25;
      $27 = ($25|0)==(0|0);
      if (!($27)) {
       $28 = HEAP32[$saltlen>>2]|0;
       $29 = (_ASN1_INTEGER_set($25,$28)|0);
       $30 = ($29|0)==(0);
       if (!($30)) {
        label = 12;
       }
      }
     }
     do {
      if ((label|0) == 12) {
       $31 = HEAP32[$sigmd>>2]|0;
       $32 = (_EVP_MD_type($31)|0);
       $33 = ($32|0)==(64);
       if (!($33)) {
        $34 = (_X509_ALGOR_new()|0);
        HEAP32[$21>>2] = $34;
        $35 = ($34|0)==(0|0);
        if ($35) {
         break;
        }
        _X509_ALGOR_set_md($34,$31);
       }
       $36 = ((($21)) + 4|0);
       $37 = HEAP32[$mgf1md>>2]|0;
       $38 = (_rsa_md_to_mgf1($36,$37)|0);
       $39 = ($38|0)==(0);
       if (!($39)) {
        $40 = (_ASN1_item_pack($21,52460,$os)|0);
        $41 = ($40|0)==(0|0);
        if (!($41)) {
         _RSA_PSS_PARAMS_free($21);
         $42 = HEAP32[$os>>2]|0;
         $$0 = $42;
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
     } while(0);
     _RSA_PSS_PARAMS_free($21);
    }
   }
  }
 }
 $43 = HEAP32[$os>>2]|0;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _ASN1_STRING_free($43);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _rsa_md_to_mgf1($palg,$mgf1md) {
 $palg = $palg|0;
 $mgf1md = $mgf1md|0;
 var $$ = 0, $$0 = 0, $$ph = 0, $$ph2 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $not$ = 0, $stmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $stmp = sp;
 HEAP32[$stmp>>2] = 0;
 HEAP32[$palg>>2] = 0;
 $0 = (_EVP_MD_type($mgf1md)|0);
 $1 = ($0|0)==(64);
 if ($1) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_EVP_MD_type($mgf1md)|0);
 $3 = ($2|0)==(64);
 if ($3) {
  $$ph = 0;
  label = 5;
 } else {
  $4 = (_X509_ALGOR_new()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$ph2 = 0;
   label = 8;
  } else {
   _X509_ALGOR_set_md($4,$mgf1md);
   $$ph = $4;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $6 = (_ASN1_item_pack($$ph,51648,$stmp)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$ph2 = $$ph;
   label = 8;
  } else {
   $8 = (_X509_ALGOR_new()|0);
   HEAP32[$palg>>2] = $8;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$ph2 = $$ph;
    label = 8;
   } else {
    $10 = (_OBJ_nid2obj(911)|0);
    $11 = HEAP32[$stmp>>2]|0;
    (_X509_ALGOR_set0($8,$10,16,$11)|0);
    HEAP32[$stmp>>2] = 0;
    $14 = $$ph;
   }
  }
 }
 if ((label|0) == 8) {
  $$pr = HEAP32[$stmp>>2]|0;
  $12 = ($$pr|0)==(0|0);
  if ($12) {
   $14 = $$ph2;
  } else {
   _ASN1_STRING_free($$pr);
   $14 = $$ph2;
  }
 }
 $13 = ($14|0)==(0|0);
 if (!($13)) {
  _X509_ALGOR_free($14);
 }
 $15 = HEAP32[$palg>>2]|0;
 $not$ = ($15|0)!=(0|0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _rsa_pss_to_ctx($ctx,$pkctx,$sigalg,$pkey) {
 $ctx = $ctx|0;
 $pkctx = $pkctx|0;
 $sigalg = $sigalg|0;
 $pkey = $pkey|0;
 var $$ = 0, $$0 = 0, $$0$i2 = 0, $$0$i27 = 0, $$0$i39 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $8 = 0, $9 = 0, $checkmd = 0, $p$i = 0, $p$i1 = 0, $rv$0 = 0, $saltlen$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p$i1 = sp + 12|0;
 $p$i = sp + 8|0;
 $0 = sp + 4|0;
 $checkmd = sp;
 HEAP32[$0>>2] = $pkctx;
 $1 = HEAP32[$sigalg>>2]|0;
 $2 = (_OBJ_obj2nid($1)|0);
 $3 = ($2|0)==(912);
 if (!($3)) {
  _ERR_put_error(4,162,155,90290,595);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($sigalg)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ($7|0)==(16);
  if ($8) {
   $9 = ((($5)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$p$i>>2] = $12;
   $13 = HEAP32[$9>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (_d2i_RSA_PSS_PARAMS(0,$p$i,$14)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = ((($15)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0|0);
    if ($19) {
     $$0$i27 = 0;
    } else {
     $20 = ((($18)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      $$0$i2 = 0;
     } else {
      $23 = HEAP32[$18>>2]|0;
      $24 = (_OBJ_obj2nid($23)|0);
      $25 = ($24|0)==(911);
      if ($25) {
       $26 = HEAP32[$20>>2]|0;
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(16);
       if ($28) {
        $29 = ((($26)) + 4|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = ((($30)) + 8|0);
        $32 = HEAP32[$31>>2]|0;
        HEAP32[$p$i1>>2] = $32;
        $33 = HEAP32[$29>>2]|0;
        $34 = HEAP32[$33>>2]|0;
        $35 = (_d2i_X509_ALGOR(0,$p$i1,$34)|0);
        $$0$i2 = $35;
       } else {
        $$0$i2 = 0;
       }
      } else {
       $$0$i2 = 0;
      }
     }
     $$0$i27 = $$0$i2;
    }
    $36 = HEAP32[$17>>2]|0;
    $37 = (_rsa_mgf1_to_md($36,$$0$i27)|0);
    $38 = ($37|0)==(0|0);
    do {
     if ($38) {
      $rv$0 = -1;
     } else {
      $39 = HEAP32[$15>>2]|0;
      $40 = ($39|0)==(0|0);
      if ($40) {
       $46 = (_EVP_sha1()|0);
       $47 = ($46|0)==(0|0);
       if ($47) {
        $rv$0 = -1;
        break;
       } else {
        $$0$i39 = $46;
       }
      } else {
       $41 = HEAP32[$39>>2]|0;
       $42 = (_OBJ_obj2nid($41)|0);
       $43 = (_OBJ_nid2sn($42)|0);
       $44 = (_EVP_get_digestbyname($43)|0);
       $45 = ($44|0)==(0|0);
       if ($45) {
        _ERR_put_error(4,157,163,90290,499);
        $rv$0 = -1;
        break;
       } else {
        $$0$i39 = $44;
       }
      }
      $48 = ((($15)) + 8|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)==(0|0);
      if ($50) {
       $saltlen$0 = 20;
      } else {
       $51 = (_ASN1_INTEGER_get($49)|0);
       $52 = ($51|0)<(0);
       if ($52) {
        _ERR_put_error(4,162,150,90290,620);
        $rv$0 = -1;
        break;
       } else {
        $saltlen$0 = $51;
       }
      }
      $53 = ((($15)) + 12|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)==(0|0);
      if (!($55)) {
       $56 = (_ASN1_INTEGER_get($54)|0);
       $57 = ($56|0)==(1);
       if (!($57)) {
        _ERR_put_error(4,162,139,90290,631);
        $rv$0 = -1;
        break;
       }
      }
      $58 = ($pkey|0)==(0|0);
      if ($58) {
       $61 = HEAP32[$0>>2]|0;
       $62 = (_EVP_PKEY_CTX_ctrl($61,-1,248,13,0,$checkmd)|0);
       $63 = ($62|0)<(1);
       if ($63) {
        $rv$0 = -1;
        break;
       }
       $64 = (_EVP_MD_type($$0$i39)|0);
       $65 = HEAP32[$checkmd>>2]|0;
       $66 = (_EVP_MD_type($65)|0);
       $67 = ($64|0)==($66|0);
       if (!($67)) {
        _ERR_put_error(4,162,166,90290,645);
        $rv$0 = -1;
        break;
       }
      } else {
       $59 = (_EVP_DigestVerifyInit($ctx,$0,$$0$i39,0,$pkey)|0);
       $60 = ($59|0)==(0);
       if ($60) {
        $rv$0 = -1;
        break;
       }
      }
      $68 = HEAP32[$0>>2]|0;
      $69 = (_EVP_PKEY_CTX_ctrl($68,6,-1,4097,6,0)|0);
      $70 = ($69|0)<(1);
      if ($70) {
       $rv$0 = -1;
      } else {
       $71 = HEAP32[$0>>2]|0;
       $72 = (_EVP_PKEY_CTX_ctrl($71,6,24,4098,$saltlen$0,0)|0);
       $73 = ($72|0)<(1);
       if ($73) {
        $rv$0 = -1;
       } else {
        $74 = HEAP32[$0>>2]|0;
        $75 = (_EVP_PKEY_CTX_ctrl($74,6,1016,4101,0,$37)|0);
        $76 = ($75|0)<(1);
        $$ = $76 ? -1 : 1;
        $rv$0 = $$;
       }
      }
     }
    } while(0);
    _RSA_PSS_PARAMS_free($15);
    $77 = ($$0$i27|0)==(0|0);
    if ($77) {
     $$0 = $rv$0;
     STACKTOP = sp;return ($$0|0);
    }
    _X509_ALGOR_free($$0$i27);
    $$0 = $rv$0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 _ERR_put_error(4,162,149,90290,602);
 _RSA_PSS_PARAMS_free(0);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _rsa_mgf1_to_md($alg,$maskHash) {
 $alg = $alg|0;
 $maskHash = $maskHash|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($alg|0)==(0|0);
 if ($0) {
  $1 = (_EVP_sha1()|0);
  $$0 = $1;
  return ($$0|0);
 }
 $2 = HEAP32[$alg>>2]|0;
 $3 = (_OBJ_obj2nid($2)|0);
 $4 = ($3|0)==(911);
 if (!($4)) {
  _ERR_put_error(4,159,153,90290,511);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($maskHash|0)==(0|0);
 if ($5) {
  _ERR_put_error(4,159,154,90290,515);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[$maskHash>>2]|0;
 $7 = (_OBJ_obj2nid($6)|0);
 $8 = (_OBJ_nid2sn($7)|0);
 $9 = (_EVP_get_digestbyname($8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $$0 = $9;
  return ($$0|0);
 }
 _ERR_put_error(4,159,151,90290,520);
 $$0 = 0;
 return ($$0|0);
}
function _do_rsa_print($bp,$x,$off,$priv) {
 $bp = $bp|0;
 $x = $x|0;
 $off = $off|0;
 $priv = $priv|0;
 var $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $mod_len$0 = 0, $ret$0 = 0, $ret$08 = 0, $s$0 = 0;
 var $str$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($x)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $13 = 0;
 } else {
  $3 = (_BN_num_bits($1)|0);
  $4 = (($3) + 7)|0;
  $5 = (($4|0) / 8)&-1;
  $13 = $5;
 }
 $6 = ((($x)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $22 = $13;
 } else {
  $9 = (_BN_num_bits($7)|0);
  $10 = (($9) + 7)|0;
  $11 = (($10|0) / 8)&-1;
  $12 = ($13>>>0)<($11>>>0);
  $$9 = $12 ? $11 : $13;
  $22 = $$9;
 }
 $14 = ($priv|0)!=(0);
 if ($14) {
  $15 = ((($x)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $30 = $22;
  } else {
   $18 = (_BN_num_bits($16)|0);
   $19 = (($18) + 7)|0;
   $20 = (($19|0) / 8)&-1;
   $21 = ($22>>>0)<($20>>>0);
   $$10 = $21 ? $20 : $22;
   $30 = $$10;
  }
  $23 = ((($x)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   $38 = $30;
  } else {
   $26 = (_BN_num_bits($24)|0);
   $27 = (($26) + 7)|0;
   $28 = (($27|0) / 8)&-1;
   $29 = ($30>>>0)<($28>>>0);
   $$11 = $29 ? $28 : $30;
   $38 = $$11;
  }
  $31 = ((($x)) + 32|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   $46 = $38;
  } else {
   $34 = (_BN_num_bits($32)|0);
   $35 = (($34) + 7)|0;
   $36 = (($35|0) / 8)&-1;
   $37 = ($38>>>0)<($36>>>0);
   $$12 = $37 ? $36 : $38;
   $46 = $$12;
  }
  $39 = ((($x)) + 36|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if ($41) {
   $54 = $46;
  } else {
   $42 = (_BN_num_bits($40)|0);
   $43 = (($42) + 7)|0;
   $44 = (($43|0) / 8)&-1;
   $45 = ($46>>>0)<($44>>>0);
   $$13 = $45 ? $44 : $46;
   $54 = $$13;
  }
  $47 = ((($x)) + 40|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0|0);
  if ($49) {
   $62 = $54;
  } else {
   $50 = (_BN_num_bits($48)|0);
   $51 = (($50) + 7)|0;
   $52 = (($51|0) / 8)&-1;
   $53 = ($54>>>0)<($52>>>0);
   $$14 = $53 ? $52 : $54;
   $62 = $$14;
  }
  $55 = ((($x)) + 44|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0|0);
  if ($57) {
   $64 = $62;
  } else {
   $58 = (_BN_num_bits($56)|0);
   $59 = (($58) + 7)|0;
   $60 = (($59|0) / 8)&-1;
   $61 = ($62>>>0)<($60>>>0);
   $$15 = $61 ? $60 : $62;
   $64 = $$15;
  }
 } else {
  $64 = $22;
 }
 $63 = (($64) + 10)|0;
 $65 = (_CRYPTO_malloc($63,90290,204)|0);
 $66 = ($65|0)==(0|0);
 if ($66) {
  _ERR_put_error(4,146,65,90290,206);
  $ret$08 = 0;
  STACKTOP = sp;return ($ret$08|0);
 }
 $67 = HEAP32[$0>>2]|0;
 $68 = ($67|0)==(0|0);
 if ($68) {
  $mod_len$0 = 0;
 } else {
  $69 = (_BN_num_bits($67)|0);
  $mod_len$0 = $69;
 }
 $70 = (_BIO_indent($bp,$off,128)|0);
 $71 = ($70|0)==(0);
 do {
  if ($71) {
   $ret$0 = 0;
  } else {
   if ($14) {
    $72 = ((($x)) + 24|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0|0);
    if ($74) {
     label = 26;
    } else {
     HEAP32[$vararg_buffer>>2] = $mod_len$0;
     $75 = (_BIO_printf($bp,90480,$vararg_buffer)|0);
     $76 = ($75|0)<(1);
     if ($76) {
      $ret$0 = 0;
      break;
     } else {
      $s$0 = 90543;$str$0 = 90525;
     }
    }
   } else {
    label = 26;
   }
   if ((label|0) == 26) {
    HEAP32[$vararg_buffer1>>2] = $mod_len$0;
    $77 = (_BIO_printf($bp,90503,$vararg_buffer1)|0);
    $78 = ($77|0)<(1);
    if ($78) {
     $ret$0 = 0;
     break;
    } else {
     $s$0 = 90559;$str$0 = 90534;
    }
   }
   $79 = HEAP32[$0>>2]|0;
   $80 = (_ASN1_bn_print($bp,$str$0,$79,$65,$off)|0);
   $81 = ($80|0)==(0);
   if ($81) {
    $ret$0 = 0;
   } else {
    $82 = HEAP32[$6>>2]|0;
    $83 = (_ASN1_bn_print($bp,$s$0,$82,$65,$off)|0);
    $84 = ($83|0)==(0);
    if ($84) {
     $ret$0 = 0;
    } else {
     if ($14) {
      $85 = ((($x)) + 24|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (_ASN1_bn_print($bp,90569,$86,$65,$off)|0);
      $88 = ($87|0)==(0);
      if ($88) {
       $ret$0 = 0;
       break;
      }
      $89 = ((($x)) + 28|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (_ASN1_bn_print($bp,90586,$90,$65,$off)|0);
      $92 = ($91|0)==(0);
      if ($92) {
       $ret$0 = 0;
       break;
      }
      $93 = ((($x)) + 32|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (_ASN1_bn_print($bp,90594,$94,$65,$off)|0);
      $96 = ($95|0)==(0);
      if ($96) {
       $ret$0 = 0;
       break;
      }
      $97 = ((($x)) + 36|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (_ASN1_bn_print($bp,90602,$98,$65,$off)|0);
      $100 = ($99|0)==(0);
      if ($100) {
       $ret$0 = 0;
       break;
      }
      $101 = ((($x)) + 40|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (_ASN1_bn_print($bp,90613,$102,$65,$off)|0);
      $104 = ($103|0)==(0);
      if ($104) {
       $ret$0 = 0;
       break;
      }
      $105 = ((($x)) + 44|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (_ASN1_bn_print($bp,90624,$106,$65,$off)|0);
      $108 = ($107|0)==(0);
      if ($108) {
       $ret$0 = 0;
       break;
      }
     }
     $ret$0 = 1;
    }
   }
  }
 } while(0);
 _CRYPTO_free($65);
 $ret$08 = $ret$0;
 STACKTOP = sp;return ($ret$08|0);
}
function _d2i_RSA_PSS_PARAMS($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,52460)|0);
 return ($0|0);
}
function _RSA_PSS_PARAMS_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(52460)|0);
 return ($0|0);
}
function _RSA_PSS_PARAMS_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,52460);
 return;
}
function _d2i_RSA_OAEP_PARAMS($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,52488)|0);
 return ($0|0);
}
function _RSA_OAEP_PARAMS_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(52488)|0);
 return ($0|0);
}
function _RSA_OAEP_PARAMS_free($a) {
 $a = $a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($a,52488);
 return;
}
function _d2i_RSAPrivateKey($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,52404)|0);
 return ($0|0);
}
function _i2d_RSAPrivateKey($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,52404)|0);
 return ($0|0);
}
function _d2i_RSAPublicKey($a,$in,$len) {
 $a = $a|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_d2i($a,$in,$len,52432)|0);
 return ($0|0);
}
function _i2d_RSAPublicKey($a,$out) {
 $a = $a|0;
 $out = $out|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_i2d($a,$out,52432)|0);
 return ($0|0);
}
function _rsa_cb($operation,$pval,$it,$exarg) {
 $operation = $operation|0;
 $pval = $pval|0;
 $it = $it|0;
 $exarg = $exarg|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($operation|0) {
 case 0:  {
  $0 = (_RSA_new()|0);
  HEAP32[$pval>>2] = $0;
  $1 = ($0|0)==(0|0);
  $$ = $1 ? 0 : 2;
  $$0 = $$;
  break;
 }
 case 2:  {
  $2 = HEAP32[$pval>>2]|0;
  _RSA_free($2);
  HEAP32[$pval>>2] = 0;
  $$0 = 2;
  break;
 }
 default: {
  $$0 = 1;
 }
 }
 return ($$0|0);
}
function _RSA_size($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_BN_num_bits($1)|0);
 $3 = (($2) + 7)|0;
 $4 = (($3|0) / 8)&-1;
 return ($4|0);
}
function _RSA_public_encrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiiii[$3 & 63]($flen,$from,$to,$rsa,$padding)|0);
 return ($4|0);
}
function _RSA_private_encrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiiii[$3 & 63]($flen,$from,$to,$rsa,$padding)|0);
 return ($4|0);
}
function _RSA_private_decrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiiii[$3 & 63]($flen,$from,$to,$rsa,$padding)|0);
 return ($4|0);
}
function _RSA_public_decrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiiii[$3 & 63]($flen,$from,$to,$rsa,$padding)|0);
 return ($4|0);
}
function _RSA_setup_blinding($rsa,$in_ctx) {
 $rsa = $rsa|0;
 $in_ctx = $in_ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $ctx$0 = 0, $e$0 = 0, $e$1 = 0, $local_n = 0;
 var $n$0 = 0, $or$cond$i = 0, $or$cond3$i = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $local_n = sp;
 $0 = ($in_ctx|0)==(0|0);
 if ($0) {
  $1 = (_BN_CTX_new()|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $ctx$0 = $1;
  }
 } else {
  $ctx$0 = $in_ctx;
 }
 _BN_CTX_start($ctx$0);
 $3 = (_BN_CTX_get($ctx$0)|0);
 $4 = ($3|0)==(0|0);
 L5: do {
  if ($4) {
   _ERR_put_error(4,136,65,90793,204);
   $e$1 = 0;$ret$0 = 0;
  } else {
   $5 = ((($rsa)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   L8: do {
    if ($7) {
     $8 = ((($rsa)) + 24|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($rsa)) + 28|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($rsa)) + 32|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($9|0)==(0|0);
     $15 = ($11|0)==(0|0);
     $or$cond$i = $14 | $15;
     $16 = ($13|0)==(0|0);
     $or$cond3$i = $or$cond$i | $16;
     do {
      if (!($or$cond3$i)) {
       _BN_CTX_start($ctx$0);
       $17 = (_BN_CTX_get($ctx$0)|0);
       $18 = (_BN_CTX_get($ctx$0)|0);
       $19 = (_BN_CTX_get($ctx$0)|0);
       $20 = ($19|0)==(0|0);
       if (!($20)) {
        $21 = (_BN_value_one()|0);
        $22 = (_BN_sub($18,$11,$21)|0);
        $23 = ($22|0)==(0);
        if (!($23)) {
         $24 = (_BN_value_one()|0);
         $25 = (_BN_sub($19,$13,$24)|0);
         $26 = ($25|0)==(0);
         if (!($26)) {
          $27 = (_BN_mul($17,$18,$19,$ctx$0)|0);
          $28 = ($27|0)==(0);
          if (!($28)) {
           $29 = (_BN_mod_inverse(0,$9,$17,$ctx$0)|0);
           _BN_CTX_end($ctx$0);
           $30 = ($29|0)==(0|0);
           if ($30) {
            break;
           } else {
            $e$0 = $29;
            break L8;
           }
          }
         }
        }
       }
       _BN_CTX_end($ctx$0);
      }
     } while(0);
     _ERR_put_error(4,136,140,90793,211);
     $e$1 = 0;$ret$0 = 0;
     break L5;
    } else {
     $e$0 = $6;
    }
   } while(0);
   $31 = (_RAND_status()|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = ((($rsa)) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $36 = HEAP32[$34>>2]|0;
     $37 = ($36|0)==(0|0);
     if (!($37)) {
      $38 = ((($34)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $39 << 2;
      _RAND_add($36,$40,+0);
     }
    }
   }
   $41 = ((($rsa)) + 60|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 & 256;
   $44 = ($43|0)==(0);
   $45 = ((($rsa)) + 16|0);
   if ($44) {
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$local_n>>2] = $47;
    $48 = ((($46)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($local_n)) + 4|0);
    HEAP32[$50>>2] = $49;
    $51 = ((($46)) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($local_n)) + 8|0);
    HEAP32[$53>>2] = $52;
    $54 = ((($46)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($local_n)) + 12|0);
    HEAP32[$56>>2] = $55;
    $57 = ((($local_n)) + 16|0);
    $58 = ((($46)) + 16|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 & -8;
    $61 = $60 | 6;
    HEAP32[$57>>2] = $61;
    $n$0 = $local_n;
   } else {
    $62 = HEAP32[$45>>2]|0;
    $n$0 = $62;
   }
   $63 = ((($rsa)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 24|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($rsa)) + 64|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (_BN_BLINDING_create_param(0,$e$0,$n$0,$ctx$0,$66,$68)|0);
   $70 = ($69|0)==(0|0);
   if ($70) {
    _ERR_put_error(4,136,3,90793,235);
    $e$1 = $e$0;$ret$0 = 0;
    break;
   } else {
    $71 = (_BN_BLINDING_thread_id($69)|0);
    _CRYPTO_THREADID_current($71);
    $e$1 = $e$0;$ret$0 = $69;
    break;
   }
  }
 } while(0);
 _BN_CTX_end($ctx$0);
 if ($0) {
  _BN_CTX_free($ctx$0);
 }
 $72 = ((($rsa)) + 20|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0|0);
 if (!($74)) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 _BN_free($e$1);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_PKCS1_SSLeay() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52924|0);
}
function _RSA_eay_public_encrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $or$cond = 0, $or$cond3 = 0, $r$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_BN_num_bits($1)|0);
 $3 = ($2|0)>(16384);
 if ($3) {
  _ERR_put_error(4,104,105,90828,164);
  $$0 = -1;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($rsa)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_BN_ucmp($4,$6)|0);
 $8 = ($7|0)<(1);
 if ($8) {
  _ERR_put_error(4,104,101,90828,169);
  $$0 = -1;
  return ($$0|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = (_BN_num_bits($9)|0);
 $11 = ($10|0)>(3072);
 if ($11) {
  $12 = HEAP32[$5>>2]|0;
  $13 = (_BN_num_bits($12)|0);
  $14 = ($13|0)>(64);
  if ($14) {
   _ERR_put_error(4,104,101,90828,176);
   $$0 = -1;
   return ($$0|0);
  }
 }
 $15 = (_BN_CTX_new()|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = -1;
  return ($$0|0);
 }
 _BN_CTX_start($15);
 $17 = (_BN_CTX_get($15)|0);
 $18 = (_BN_CTX_get($15)|0);
 $19 = HEAP32[$0>>2]|0;
 $20 = (_BN_num_bits($19)|0);
 $21 = (($20) + 7)|0;
 $22 = (($21|0) / 8)&-1;
 $23 = (_CRYPTO_malloc($22,90828,187)|0);
 $24 = ($17|0)!=(0|0);
 $25 = ($18|0)!=(0|0);
 $or$cond = $24 & $25;
 $26 = ($23|0)!=(0|0);
 $or$cond3 = $or$cond & $26;
 L17: do {
  if ($or$cond3) {
   switch ($padding|0) {
   case 1:  {
    $27 = (_RSA_padding_add_PKCS1_type_2($23,$22,$from,$flen)|0);
    $i$0 = $27;
    break;
   }
   case 4:  {
    $28 = (_RSA_padding_add_PKCS1_OAEP($23,$22,$from,$flen,0,0)|0);
    $i$0 = $28;
    break;
   }
   case 2:  {
    $29 = (_RSA_padding_add_SSLv23($23,$22,$from,$flen)|0);
    $i$0 = $29;
    break;
   }
   case 3:  {
    $30 = (_RSA_padding_add_none($23,$22,$from,$flen)|0);
    $i$0 = $30;
    break;
   }
   default: {
    _ERR_put_error(4,104,118,90828,209);
    $r$06 = -1;
    break L17;
   }
   }
   $31 = ($i$0|0)<(1);
   if ($31) {
    $r$06 = -1;
   } else {
    $32 = (_BN_bin2bn($23,$22,$17)|0);
    $33 = ($32|0)==(0|0);
    if ($33) {
     $r$06 = -1;
    } else {
     $34 = HEAP32[$0>>2]|0;
     $35 = (_BN_ucmp($17,$34)|0);
     $36 = ($35|0)>(-1);
     if ($36) {
      _ERR_put_error(4,104,132,90828,221);
      $r$06 = -1;
      break;
     }
     $37 = ((($rsa)) + 60|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $38 & 2;
     $40 = ($39|0)==(0);
     $$pre = ((($rsa)) + 64|0);
     if (!($40)) {
      $41 = HEAP32[$0>>2]|0;
      $42 = (_BN_MONT_CTX_set_locked($$pre,9,$41,$15)|0);
      $43 = ($42|0)==(0|0);
      if ($43) {
       $r$06 = -1;
       break;
      }
     }
     $44 = ((($rsa)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ((($45)) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = HEAP32[$5>>2]|0;
     $49 = HEAP32[$0>>2]|0;
     $50 = HEAP32[$$pre>>2]|0;
     $51 = (FUNCTION_TABLE_iiiiiii[$47 & 31]($18,$17,$48,$49,$15,$50)|0);
     $52 = ($51|0)==(0);
     if ($52) {
      $r$06 = -1;
     } else {
      $53 = (_BN_num_bits($18)|0);
      $54 = (($53) + 7)|0;
      $55 = (($54|0) / 8)&-1;
      $56 = (($22) - ($55))|0;
      $57 = (($to) + ($56)|0);
      $58 = (_BN_bn2bin($18,$57)|0);
      $59 = (($22) - ($58))|0;
      $60 = ($59|0)>(0);
      if ($60) {
       _memset(($to|0),0,($59|0))|0;
       $r$06 = $22;
      } else {
       $r$06 = $22;
      }
     }
    }
   }
  } else {
   _ERR_put_error(4,104,65,90828,189);
   $r$06 = -1;
  }
 } while(0);
 _BN_CTX_end($15);
 _BN_CTX_free($15);
 $61 = ($23|0)==(0|0);
 if ($61) {
  $$0 = $r$06;
  return ($$0|0);
 }
 _OPENSSL_cleanse($23,$22);
 _CRYPTO_free($23);
 $$0 = $r$06;
 return ($$0|0);
}
function _RSA_eay_public_decrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $r$0 = 0, $r$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_BN_num_bits($1)|0);
 $3 = ($2|0)>(16384);
 if ($3) {
  _ERR_put_error(4,103,105,90828,627);
  $$0 = -1;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($rsa)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_BN_ucmp($4,$6)|0);
 $8 = ($7|0)<(1);
 if ($8) {
  _ERR_put_error(4,103,101,90828,632);
  $$0 = -1;
  return ($$0|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = (_BN_num_bits($9)|0);
 $11 = ($10|0)>(3072);
 if ($11) {
  $12 = HEAP32[$5>>2]|0;
  $13 = (_BN_num_bits($12)|0);
  $14 = ($13|0)>(64);
  if ($14) {
   _ERR_put_error(4,103,101,90828,639);
   $$0 = -1;
   return ($$0|0);
  }
 }
 $15 = (_BN_CTX_new()|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = -1;
  return ($$0|0);
 }
 _BN_CTX_start($15);
 $17 = (_BN_CTX_get($15)|0);
 $18 = (_BN_CTX_get($15)|0);
 $19 = HEAP32[$0>>2]|0;
 $20 = (_BN_num_bits($19)|0);
 $21 = (($20) + 7)|0;
 $22 = (($21|0) / 8)&-1;
 $23 = (_CRYPTO_malloc($22,90828,650)|0);
 $24 = ($17|0)!=(0|0);
 $25 = ($18|0)!=(0|0);
 $or$cond = $24 & $25;
 $26 = ($23|0)!=(0|0);
 $or$cond3 = $or$cond & $26;
 L17: do {
  if ($or$cond3) {
   $27 = ($22|0)<($flen|0);
   if ($27) {
    _ERR_put_error(4,103,108,90828,661);
    $r$1$ph = -1;
    break;
   }
   $28 = (_BN_bin2bn($from,$flen,$17)|0);
   $29 = ($28|0)==(0|0);
   if ($29) {
    $r$1$ph = -1;
   } else {
    $30 = HEAP32[$0>>2]|0;
    $31 = (_BN_ucmp($17,$30)|0);
    $32 = ($31|0)>(-1);
    if ($32) {
     _ERR_put_error(4,103,132,90828,670);
     $r$1$ph = -1;
     break;
    }
    $33 = ((($rsa)) + 60|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $34 & 2;
    $36 = ($35|0)==(0);
    $$pre = ((($rsa)) + 64|0);
    if (!($36)) {
     $37 = HEAP32[$0>>2]|0;
     $38 = (_BN_MONT_CTX_set_locked($$pre,9,$37,$15)|0);
     $39 = ($38|0)==(0|0);
     if ($39) {
      $r$1$ph = -1;
      break;
     }
    }
    $40 = ((($rsa)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 24|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[$5>>2]|0;
    $45 = HEAP32[$0>>2]|0;
    $46 = HEAP32[$$pre>>2]|0;
    $47 = (FUNCTION_TABLE_iiiiiii[$43 & 31]($18,$17,$44,$45,$15,$46)|0);
    $48 = ($47|0)==(0);
    if ($48) {
     $r$1$ph = -1;
    } else {
     $49 = ($padding|0)==(5);
     L30: do {
      if ($49) {
       $50 = HEAP32[$18>>2]|0;
       $51 = HEAP32[$50>>2]|0;
       $52 = $51 & 15;
       $53 = ($52|0)==(12);
       if (!($53)) {
        $54 = HEAP32[$0>>2]|0;
        $55 = (_BN_sub($18,$54,$18)|0);
        $56 = ($55|0)==(0);
        if ($56) {
         $r$1$ph = -1;
         break L17;
        }
       }
       $57 = (_BN_bn2bin($18,$23)|0);
       $58 = (_RSA_padding_check_X931($to,$22,$23,$57,$22)|0);
       $r$0 = $58;
      } else {
       $59 = (_BN_bn2bin($18,$23)|0);
       switch ($padding|0) {
       case 1:  {
        $60 = (_RSA_padding_check_PKCS1_type_1($to,$22,$23,$59,$22)|0);
        $r$0 = $60;
        break L30;
        break;
       }
       case 3:  {
        $61 = (_RSA_padding_check_none($to,$22,$23,$59,$22)|0);
        $r$0 = $61;
        break L30;
        break;
       }
       default: {
        _ERR_put_error(4,103,118,90828,701);
        $r$1$ph = -1;
        break L17;
       }
       }
      }
     } while(0);
     $62 = ($r$0|0)<(0);
     if ($62) {
      _ERR_put_error(4,103,114,90828,705);
      $r$1$ph = $r$0;
     } else {
      $r$1$ph = $r$0;
     }
    }
   }
  } else {
   _ERR_put_error(4,103,65,90828,652);
   $r$1$ph = -1;
  }
 } while(0);
 _BN_CTX_end($15);
 _BN_CTX_free($15);
 $63 = ($23|0)==(0|0);
 if ($63) {
  $$0 = $r$1$ph;
  return ($$0|0);
 }
 _OPENSSL_cleanse($23,$22);
 _CRYPTO_free($23);
 $$0 = $r$1$ph;
 return ($$0|0);
}
function _RSA_eay_private_encrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $$ = 0, $$0$i = 0, $$pre = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blinding$05 = 0, $d$0 = 0;
 var $i$0 = 0, $local_blinding = 0, $local_d = 0, $or$cond = 0, $or$cond3 = 0, $r$013 = 0, $r$01419 = 0, $res$0 = 0, $unblind$07 = 0, $unblind$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $local_blinding = sp + 20|0;
 $local_d = sp;
 HEAP32[$local_blinding>>2] = 0;
 $0 = (_BN_CTX_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $r$01419 = -1;
  STACKTOP = sp;return ($r$01419|0);
 }
 _BN_CTX_start($0);
 $2 = (_BN_CTX_get($0)|0);
 $3 = (_BN_CTX_get($0)|0);
 $4 = ((($rsa)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_BN_num_bits($5)|0);
 $7 = (($6) + 7)|0;
 $8 = (($7|0) / 8)&-1;
 $9 = (_CRYPTO_malloc($8,90828,370)|0);
 $10 = ($2|0)!=(0|0);
 $11 = ($3|0)!=(0|0);
 $or$cond = $10 & $11;
 $12 = ($9|0)!=(0|0);
 $or$cond3 = $or$cond & $12;
 L4: do {
  if ($or$cond3) {
   switch ($padding|0) {
   case 1:  {
    $13 = (_RSA_padding_add_PKCS1_type_1($9,$8,$from,$flen)|0);
    $i$0 = $13;
    break;
   }
   case 5:  {
    $14 = (_RSA_padding_add_X931($9,$8,$from,$flen)|0);
    $i$0 = $14;
    break;
   }
   case 3:  {
    $15 = (_RSA_padding_add_none($9,$8,$from,$flen)|0);
    $i$0 = $15;
    break;
   }
   default: {
    _ERR_put_error(4,102,118,90828,388);
    $r$013 = -1;
    break L4;
   }
   }
   $16 = ($i$0|0)<(1);
   if ($16) {
    $r$013 = -1;
   } else {
    $17 = (_BN_bin2bn($9,$8,$2)|0);
    $18 = ($17|0)==(0|0);
    if ($18) {
     $r$013 = -1;
    } else {
     $19 = HEAP32[$4>>2]|0;
     $20 = (_BN_ucmp($2,$19)|0);
     $21 = ($20|0)>(-1);
     if ($21) {
      _ERR_put_error(4,102,132,90828,400);
      $r$013 = -1;
      break;
     }
     $22 = ((($rsa)) + 60|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $23 & 128;
     $25 = ($24|0)==(0);
     if ($25) {
      $26 = (_rsa_get_blinding($rsa,$local_blinding,$0)|0);
      $27 = ($26|0)==(0|0);
      if ($27) {
       _ERR_put_error(4,102,68,90828,407);
       $r$013 = -1;
       break;
      }
      $28 = HEAP32[$local_blinding>>2]|0;
      $29 = ($28|0)==(0);
      do {
       if ($29) {
        $30 = (_BN_CTX_get($0)|0);
        $31 = ($30|0)==(0|0);
        if ($31) {
         _ERR_put_error(4,102,65,90828,414);
         $r$013 = -1;
         break L4;
        } else {
         _CRYPTO_lock(9,25,90828,326);
         $33 = (_BN_BLINDING_convert_ex($2,$30,$26,$0)|0);
         _CRYPTO_lock(10,25,90828,328);
         $$0$i = $33;$unblind$07 = $30;
         break;
        }
       } else {
        $32 = (_BN_BLINDING_convert_ex($2,0,$26,$0)|0);
        $$0$i = $32;$unblind$07 = 0;
       }
      } while(0);
      $34 = ($$0$i|0)==(0);
      if ($34) {
       $r$013 = -1;
       break;
      }
      $$pre = HEAP32[$22>>2]|0;
      $112 = 1;$36 = $$pre;$blinding$05 = $26;$unblind$1 = $unblind$07;
     } else {
      $112 = 0;$36 = $23;$blinding$05 = 0;$unblind$1 = 0;
     }
     $35 = $36 & 32;
     $37 = ($35|0)==(0);
     do {
      if ($37) {
       $38 = ((($rsa)) + 28|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)==(0|0);
       if (!($40)) {
        $41 = ((($rsa)) + 32|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($42|0)==(0|0);
        if (!($43)) {
         $44 = ((($rsa)) + 36|0);
         $45 = HEAP32[$44>>2]|0;
         $46 = ($45|0)==(0|0);
         if (!($46)) {
          $47 = ((($rsa)) + 40|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = ($48|0)==(0|0);
          if (!($49)) {
           $50 = ((($rsa)) + 44|0);
           $51 = HEAP32[$50>>2]|0;
           $52 = ($51|0)==(0|0);
           if (!($52)) {
            label = 29;
            break;
           }
          }
         }
        }
       }
       $59 = $36 & 256;
       $60 = ($59|0)==(0);
       if ($60) {
        _BN_init($local_d);
        $61 = ((($rsa)) + 24|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = HEAP32[$62>>2]|0;
        HEAP32[$local_d>>2] = $63;
        $64 = ((($62)) + 4|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ((($local_d)) + 4|0);
        HEAP32[$66>>2] = $65;
        $67 = ((($62)) + 8|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ((($local_d)) + 8|0);
        HEAP32[$69>>2] = $68;
        $70 = ((($62)) + 12|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = ((($local_d)) + 12|0);
        HEAP32[$72>>2] = $71;
        $73 = ((($local_d)) + 16|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = $74 & 1;
        $76 = ((($62)) + 16|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = $77 & -8;
        $79 = $75 | $78;
        $80 = $79 | 6;
        HEAP32[$73>>2] = $80;
        $$pre21 = HEAP32[$22>>2]|0;
        $84 = $$pre21;$d$0 = $local_d;
       } else {
        $81 = ((($rsa)) + 24|0);
        $82 = HEAP32[$81>>2]|0;
        $84 = $36;$d$0 = $82;
       }
       $83 = $84 & 2;
       $85 = ($83|0)==(0);
       $$pre23 = ((($rsa)) + 64|0);
       if (!($85)) {
        $86 = HEAP32[$4>>2]|0;
        $87 = (_BN_MONT_CTX_set_locked($$pre23,9,$86,$0)|0);
        $88 = ($87|0)==(0|0);
        if ($88) {
         $r$013 = -1;
         break L4;
        }
       }
       $89 = ((($rsa)) + 8|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ((($90)) + 24|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = HEAP32[$4>>2]|0;
       $94 = HEAP32[$$pre23>>2]|0;
       $95 = (FUNCTION_TABLE_iiiiiii[$92 & 31]($3,$2,$d$0,$93,$0,$94)|0);
       $96 = ($95|0)==(0);
       if ($96) {
        $r$013 = -1;
        break L4;
       }
      } else {
       label = 29;
      }
     } while(0);
     if ((label|0) == 29) {
      $53 = ((($rsa)) + 8|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ((($54)) + 20|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (FUNCTION_TABLE_iiiii[$56 & 127]($3,$2,$rsa,$0)|0);
      $58 = ($57|0)==(0);
      if ($58) {
       $r$013 = -1;
       break;
      }
     }
     if ($112) {
      $97 = (_BN_BLINDING_invert_ex($3,$unblind$1,$blinding$05,$0)|0);
      $98 = ($97|0)==(0);
      if ($98) {
       $r$013 = -1;
       break;
      }
     }
     $99 = ($padding|0)==(5);
     if ($99) {
      $100 = HEAP32[$4>>2]|0;
      (_BN_sub($2,$100,$3)|0);
      $101 = (_BN_cmp($3,$2)|0);
      $102 = ($101|0)>(0);
      $$ = $102 ? $2 : $3;
      $res$0 = $$;
     } else {
      $res$0 = $3;
     }
     $103 = (_BN_num_bits($res$0)|0);
     $104 = (($103) + 7)|0;
     $105 = (($104|0) / 8)&-1;
     $106 = (($8) - ($105))|0;
     $107 = (($to) + ($106)|0);
     $108 = (_BN_bn2bin($res$0,$107)|0);
     $109 = (($8) - ($108))|0;
     $110 = ($109|0)>(0);
     if ($110) {
      _memset(($to|0),0,($109|0))|0;
      $r$013 = $8;
     } else {
      $r$013 = $8;
     }
    }
   }
  } else {
   _ERR_put_error(4,102,65,90828,372);
   $r$013 = -1;
  }
 } while(0);
 _BN_CTX_end($0);
 _BN_CTX_free($0);
 $111 = ($9|0)==(0|0);
 if ($111) {
  $r$01419 = $r$013;
  STACKTOP = sp;return ($r$01419|0);
 }
 _OPENSSL_cleanse($9,$8);
 _CRYPTO_free($9);
 $r$01419 = $r$013;
 STACKTOP = sp;return ($r$01419|0);
}
function _RSA_eay_private_decrypt($flen,$from,$to,$rsa,$padding) {
 $flen = $flen|0;
 $from = $from|0;
 $to = $to|0;
 $rsa = $rsa|0;
 $padding = $padding|0;
 var $$0$i = 0, $$pre = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blinding$05 = 0, $d$0 = 0, $local_blinding = 0, $local_d = 0, $or$cond = 0, $or$cond3 = 0, $r$0 = 0, $r$1$ph = 0, $r$11217 = 0, $unblind$07 = 0, $unblind$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $local_blinding = sp + 20|0;
 $local_d = sp;
 HEAP32[$local_blinding>>2] = 0;
 $0 = (_BN_CTX_new()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $r$11217 = -1;
  STACKTOP = sp;return ($r$11217|0);
 }
 _BN_CTX_start($0);
 $2 = (_BN_CTX_get($0)|0);
 $3 = (_BN_CTX_get($0)|0);
 $4 = ((($rsa)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_BN_num_bits($5)|0);
 $7 = (($6) + 7)|0;
 $8 = (($7|0) / 8)&-1;
 $9 = (_CRYPTO_malloc($8,90828,506)|0);
 $10 = ($2|0)!=(0|0);
 $11 = ($3|0)!=(0|0);
 $or$cond = $10 & $11;
 $12 = ($9|0)!=(0|0);
 $or$cond3 = $or$cond & $12;
 L4: do {
  if ($or$cond3) {
   $13 = ($8|0)<($flen|0);
   if ($13) {
    _ERR_put_error(4,101,108,90828,518);
    $r$1$ph = -1;
    break;
   }
   $14 = (_BN_bin2bn($from,$flen,$2)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $r$1$ph = -1;
   } else {
    $16 = HEAP32[$4>>2]|0;
    $17 = (_BN_ucmp($2,$16)|0);
    $18 = ($17|0)>(-1);
    if ($18) {
     _ERR_put_error(4,101,132,90828,528);
     $r$1$ph = -1;
     break;
    }
    $19 = ((($rsa)) + 60|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & 128;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = (_rsa_get_blinding($rsa,$local_blinding,$0)|0);
     $24 = ($23|0)==(0|0);
     if ($24) {
      _ERR_put_error(4,101,68,90828,535);
      $r$1$ph = -1;
      break;
     }
     $25 = HEAP32[$local_blinding>>2]|0;
     $26 = ($25|0)==(0);
     do {
      if ($26) {
       $27 = (_BN_CTX_get($0)|0);
       $28 = ($27|0)==(0|0);
       if ($28) {
        _ERR_put_error(4,101,65,90828,542);
        $r$1$ph = -1;
        break L4;
       } else {
        _CRYPTO_lock(9,25,90828,326);
        $30 = (_BN_BLINDING_convert_ex($2,$27,$23,$0)|0);
        _CRYPTO_lock(10,25,90828,328);
        $$0$i = $30;$unblind$07 = $27;
        break;
       }
      } else {
       $29 = (_BN_BLINDING_convert_ex($2,0,$23,$0)|0);
       $$0$i = $29;$unblind$07 = 0;
      }
     } while(0);
     $31 = ($$0$i|0)==(0);
     if ($31) {
      $r$1$ph = -1;
      break;
     }
     $$pre = HEAP32[$19>>2]|0;
     $101 = 1;$33 = $$pre;$blinding$05 = $23;$unblind$1 = $unblind$07;
    } else {
     $101 = 0;$33 = $20;$blinding$05 = 0;$unblind$1 = 0;
    }
    $32 = $33 & 32;
    $34 = ($32|0)==(0);
    do {
     if ($34) {
      $35 = ((($rsa)) + 28|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ($36|0)==(0|0);
      if (!($37)) {
       $38 = ((($rsa)) + 32|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)==(0|0);
       if (!($40)) {
        $41 = ((($rsa)) + 36|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($42|0)==(0|0);
        if (!($43)) {
         $44 = ((($rsa)) + 40|0);
         $45 = HEAP32[$44>>2]|0;
         $46 = ($45|0)==(0|0);
         if (!($46)) {
          $47 = ((($rsa)) + 44|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = ($48|0)==(0|0);
          if (!($49)) {
           label = 25;
           break;
          }
         }
        }
       }
      }
      $56 = $33 & 256;
      $57 = ($56|0)==(0);
      $58 = ((($rsa)) + 24|0);
      if ($57) {
       $59 = HEAP32[$58>>2]|0;
       $60 = HEAP32[$59>>2]|0;
       HEAP32[$local_d>>2] = $60;
       $61 = ((($59)) + 4|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ((($local_d)) + 4|0);
       HEAP32[$63>>2] = $62;
       $64 = ((($59)) + 8|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ((($local_d)) + 8|0);
       HEAP32[$66>>2] = $65;
       $67 = ((($59)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($local_d)) + 12|0);
       HEAP32[$69>>2] = $68;
       $70 = ((($local_d)) + 16|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = $71 & 1;
       $73 = ((($59)) + 16|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = $74 & -8;
       $76 = $72 | $75;
       $77 = $76 | 6;
       HEAP32[$70>>2] = $77;
       $d$0 = $local_d;
      } else {
       $78 = HEAP32[$58>>2]|0;
       $d$0 = $78;
      }
      $79 = $33 & 2;
      $80 = ($79|0)==(0);
      $$pre18 = ((($rsa)) + 64|0);
      if (!($80)) {
       $81 = HEAP32[$4>>2]|0;
       $82 = (_BN_MONT_CTX_set_locked($$pre18,9,$81,$0)|0);
       $83 = ($82|0)==(0|0);
       if ($83) {
        $r$1$ph = -1;
        break L4;
       }
      }
      $84 = ((($rsa)) + 8|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ((($85)) + 24|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = HEAP32[$4>>2]|0;
      $89 = HEAP32[$$pre18>>2]|0;
      $90 = (FUNCTION_TABLE_iiiiiii[$87 & 31]($3,$2,$d$0,$88,$0,$89)|0);
      $91 = ($90|0)==(0);
      if ($91) {
       $r$1$ph = -1;
       break L4;
      }
     } else {
      label = 25;
     }
    } while(0);
    if ((label|0) == 25) {
     $50 = ((($rsa)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($51)) + 20|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (FUNCTION_TABLE_iiiii[$53 & 127]($3,$2,$rsa,$0)|0);
     $55 = ($54|0)==(0);
     if ($55) {
      $r$1$ph = -1;
      break;
     }
    }
    if ($101) {
     $92 = (_BN_BLINDING_invert_ex($3,$unblind$1,$blinding$05,$0)|0);
     $93 = ($92|0)==(0);
     if ($93) {
      $r$1$ph = -1;
      break;
     }
    }
    $94 = (_BN_bn2bin($3,$9)|0);
    switch ($padding|0) {
    case 1:  {
     $95 = (_RSA_padding_check_PKCS1_type_2($to,$8,$9,$94,$8)|0);
     $r$0 = $95;
     break;
    }
    case 4:  {
     $96 = (_RSA_padding_check_PKCS1_OAEP($to,$8,$9,$94,$8,0,0)|0);
     $r$0 = $96;
     break;
    }
    case 2:  {
     $97 = (_RSA_padding_check_SSLv23($to,$8,$9,$94,$8)|0);
     $r$0 = $97;
     break;
    }
    case 3:  {
     $98 = (_RSA_padding_check_none($to,$8,$9,$94,$8)|0);
     $r$0 = $98;
     break;
    }
    default: {
     _ERR_put_error(4,101,118,90828,598);
     $r$1$ph = -1;
     break L4;
    }
    }
    $99 = ($r$0|0)<(0);
    if ($99) {
     _ERR_put_error(4,101,114,90828,602);
     $r$1$ph = $r$0;
    } else {
     $r$1$ph = $r$0;
    }
   }
  } else {
   _ERR_put_error(4,101,65,90828,508);
   $r$1$ph = -1;
  }
 } while(0);
 _BN_CTX_end($0);
 _BN_CTX_free($0);
 $100 = ($9|0)==(0|0);
 if ($100) {
  $r$11217 = $r$1$ph;
  STACKTOP = sp;return ($r$11217|0);
 }
 _OPENSSL_cleanse($9,$8);
 _CRYPTO_free($9);
 $r$11217 = $r$1$ph;
 STACKTOP = sp;return ($r$11217|0);
}
function _RSA_eay_mod_exp($r0,$I,$rsa,$ctx) {
 $r0 = $r0|0;
 $I = $I|0;
 $rsa = $rsa|0;
 $ctx = $ctx|0;
 var $$pre = 0, $$pre1 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $d$0 = 0, $dmp1$0 = 0, $dmq1$0 = 0, $local_c = 0, $local_d = 0, $local_dmp1 = 0, $local_dmq1 = 0, $local_p = 0, $local_q = 0, $local_r1 = 0, $p$0 = 0, $pr1$0 = 0, $q$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $local_dmp1 = sp + 120|0;
 $local_dmq1 = sp + 100|0;
 $local_c = sp + 80|0;
 $local_r1 = sp + 60|0;
 $local_p = sp + 40|0;
 $local_q = sp + 20|0;
 $local_d = sp;
 _BN_CTX_start($ctx);
 $0 = (_BN_CTX_get($ctx)|0);
 $1 = (_BN_CTX_get($ctx)|0);
 $2 = (_BN_CTX_get($ctx)|0);
 $3 = ((($rsa)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 256;
 $6 = ($5|0)==(0);
 if ($6) {
  _BN_init($local_p);
  $7 = ((($rsa)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$local_p>>2] = $9;
  $10 = ((($8)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($local_p)) + 4|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($8)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($local_p)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($8)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($local_p)) + 12|0);
  HEAP32[$18>>2] = $17;
  $19 = ((($local_p)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 1;
  $22 = ((($8)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & -8;
  $25 = $21 | $24;
  $26 = $25 | 6;
  HEAP32[$19>>2] = $26;
  _BN_init($local_q);
  $27 = ((($rsa)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$local_q>>2] = $29;
  $30 = ((($28)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($local_q)) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = ((($28)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($local_q)) + 8|0);
  HEAP32[$35>>2] = $34;
  $36 = ((($28)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($local_q)) + 12|0);
  HEAP32[$38>>2] = $37;
  $39 = ((($local_q)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 & 1;
  $42 = ((($28)) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 & -8;
  $45 = $41 | $44;
  $46 = $45 | 6;
  HEAP32[$39>>2] = $46;
  $$pre = HEAP32[$3>>2]|0;
  $52 = $$pre;$p$0 = $local_p;$q$0 = $local_q;
 } else {
  $47 = ((($rsa)) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($rsa)) + 32|0);
  $50 = HEAP32[$49>>2]|0;
  $52 = $4;$p$0 = $48;$q$0 = $50;
 }
 $51 = $52 & 4;
 $53 = ($51|0)==(0);
 do {
  if ($53) {
   $61 = $52;
  } else {
   $54 = ((($rsa)) + 68|0);
   $55 = (_BN_MONT_CTX_set_locked($54,9,$p$0,$ctx)|0);
   $56 = ($55|0)==(0|0);
   if ($56) {
    $ret$0 = 0;
    _BN_CTX_end($ctx);
    STACKTOP = sp;return ($ret$0|0);
   }
   $57 = ((($rsa)) + 72|0);
   $58 = (_BN_MONT_CTX_set_locked($57,9,$q$0,$ctx)|0);
   $59 = ($58|0)==(0|0);
   if ($59) {
    $ret$0 = 0;
    _BN_CTX_end($ctx);
    STACKTOP = sp;return ($ret$0|0);
   } else {
    $$pre1 = HEAP32[$3>>2]|0;
    $61 = $$pre1;
    break;
   }
  }
 } while(0);
 $60 = $61 & 2;
 $62 = ($60|0)==(0);
 do {
  if ($62) {
   $69 = $61;
  } else {
   $63 = ((($rsa)) + 64|0);
   $64 = ((($rsa)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (_BN_MONT_CTX_set_locked($63,9,$65,$ctx)|0);
   $67 = ($66|0)==(0|0);
   if ($67) {
    $ret$0 = 0;
    _BN_CTX_end($ctx);
    STACKTOP = sp;return ($ret$0|0);
   } else {
    $$pre3 = HEAP32[$3>>2]|0;
    $69 = $$pre3;
    break;
   }
  }
 } while(0);
 $68 = $69 & 256;
 $70 = ($68|0)==(0);
 if ($70) {
  $71 = HEAP32[$I>>2]|0;
  HEAP32[$local_c>>2] = $71;
  $72 = ((($I)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($local_c)) + 4|0);
  HEAP32[$74>>2] = $73;
  $75 = ((($I)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($local_c)) + 8|0);
  HEAP32[$77>>2] = $76;
  $78 = ((($I)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($local_c)) + 12|0);
  HEAP32[$80>>2] = $79;
  $81 = ((($local_c)) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 & 1;
  $84 = ((($I)) + 16|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $85 & -8;
  $87 = $83 | $86;
  $88 = $87 | 6;
  HEAP32[$81>>2] = $88;
  $89 = ((($rsa)) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (_BN_div(0,$0,$local_c,$90,$ctx)|0);
  $92 = ($91|0)==(0);
  if ($92) {
   $ret$0 = 0;
   _BN_CTX_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 } else {
  $93 = ((($rsa)) + 32|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (_BN_div(0,$0,$I,$94,$ctx)|0);
  $96 = ($95|0)==(0);
  if ($96) {
   $ret$0 = 0;
   _BN_CTX_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 }
 $97 = HEAP32[$3>>2]|0;
 $98 = $97 & 256;
 $99 = ($98|0)==(0);
 $100 = ((($rsa)) + 40|0);
 if ($99) {
  $101 = HEAP32[$100>>2]|0;
  $102 = HEAP32[$101>>2]|0;
  HEAP32[$local_dmq1>>2] = $102;
  $103 = ((($101)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($local_dmq1)) + 4|0);
  HEAP32[$105>>2] = $104;
  $106 = ((($101)) + 8|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($local_dmq1)) + 8|0);
  HEAP32[$108>>2] = $107;
  $109 = ((($101)) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($local_dmq1)) + 12|0);
  HEAP32[$111>>2] = $110;
  $112 = ((($local_dmq1)) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $113 & 1;
  $115 = ((($101)) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 & -8;
  $118 = $114 | $117;
  $119 = $118 | 6;
  HEAP32[$112>>2] = $119;
  $dmq1$0 = $local_dmq1;
 } else {
  $120 = HEAP32[$100>>2]|0;
  $dmq1$0 = $120;
 }
 $121 = ((($rsa)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ((($122)) + 24|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($rsa)) + 32|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ((($rsa)) + 72|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (FUNCTION_TABLE_iiiiiii[$124 & 31]($1,$0,$dmq1$0,$126,$ctx,$128)|0);
 $130 = ($129|0)==(0);
 if ($130) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $131 = HEAP32[$3>>2]|0;
 $132 = $131 & 256;
 $133 = ($132|0)==(0);
 if ($133) {
  $134 = HEAP32[$I>>2]|0;
  HEAP32[$local_c>>2] = $134;
  $135 = ((($I)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ((($local_c)) + 4|0);
  HEAP32[$137>>2] = $136;
  $138 = ((($I)) + 8|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ((($local_c)) + 8|0);
  HEAP32[$140>>2] = $139;
  $141 = ((($I)) + 12|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = ((($local_c)) + 12|0);
  HEAP32[$143>>2] = $142;
  $144 = ((($local_c)) + 16|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 & 1;
  $147 = ((($I)) + 16|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $148 & -8;
  $150 = $146 | $149;
  $151 = $150 | 6;
  HEAP32[$144>>2] = $151;
  $152 = ((($rsa)) + 28|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (_BN_div(0,$0,$local_c,$153,$ctx)|0);
  $155 = ($154|0)==(0);
  if ($155) {
   $ret$0 = 0;
   _BN_CTX_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 } else {
  $156 = ((($rsa)) + 28|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (_BN_div(0,$0,$I,$157,$ctx)|0);
  $159 = ($158|0)==(0);
  if ($159) {
   $ret$0 = 0;
   _BN_CTX_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 }
 $160 = HEAP32[$3>>2]|0;
 $161 = $160 & 256;
 $162 = ($161|0)==(0);
 $163 = ((($rsa)) + 36|0);
 if ($162) {
  $164 = HEAP32[$163>>2]|0;
  $165 = HEAP32[$164>>2]|0;
  HEAP32[$local_dmp1>>2] = $165;
  $166 = ((($164)) + 4|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ((($local_dmp1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = ((($164)) + 8|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ((($local_dmp1)) + 8|0);
  HEAP32[$171>>2] = $170;
  $172 = ((($164)) + 12|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ((($local_dmp1)) + 12|0);
  HEAP32[$174>>2] = $173;
  $175 = ((($local_dmp1)) + 16|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 & 1;
  $178 = ((($164)) + 16|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179 & -8;
  $181 = $177 | $180;
  $182 = $181 | 6;
  HEAP32[$175>>2] = $182;
  $dmp1$0 = $local_dmp1;
 } else {
  $183 = HEAP32[$163>>2]|0;
  $dmp1$0 = $183;
 }
 $184 = HEAP32[$121>>2]|0;
 $185 = ((($184)) + 24|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ((($rsa)) + 28|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ((($rsa)) + 68|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = (FUNCTION_TABLE_iiiiiii[$186 & 31]($r0,$0,$dmp1$0,$188,$ctx,$190)|0);
 $192 = ($191|0)==(0);
 if ($192) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $193 = (_BN_sub($r0,$r0,$1)|0);
 $194 = ($193|0)==(0);
 if ($194) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $195 = ((($r0)) + 12|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ($196|0)==(0);
 if (!($197)) {
  $198 = HEAP32[$187>>2]|0;
  $199 = (_BN_add($r0,$r0,$198)|0);
  $200 = ($199|0)==(0);
  if ($200) {
   $ret$0 = 0;
   _BN_CTX_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 }
 $201 = ((($rsa)) + 44|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (_BN_mul($0,$r0,$202,$ctx)|0);
 $204 = ($203|0)==(0);
 if ($204) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $205 = HEAP32[$3>>2]|0;
 $206 = $205 & 256;
 $207 = ($206|0)==(0);
 if ($207) {
  $208 = HEAP32[$0>>2]|0;
  HEAP32[$local_r1>>2] = $208;
  $209 = ((($0)) + 4|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ((($local_r1)) + 4|0);
  HEAP32[$211>>2] = $210;
  $212 = ((($0)) + 8|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ((($local_r1)) + 8|0);
  HEAP32[$214>>2] = $213;
  $215 = ((($0)) + 12|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($local_r1)) + 12|0);
  HEAP32[$217>>2] = $216;
  $218 = ((($local_r1)) + 16|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $219 & 1;
  $221 = ((($0)) + 16|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = $222 & -8;
  $224 = $220 | $223;
  $225 = $224 | 6;
  HEAP32[$218>>2] = $225;
  $pr1$0 = $local_r1;
 } else {
  $pr1$0 = $0;
 }
 $226 = HEAP32[$187>>2]|0;
 $227 = (_BN_div(0,$r0,$pr1$0,$226,$ctx)|0);
 $228 = ($227|0)==(0);
 if ($228) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $229 = HEAP32[$195>>2]|0;
 $230 = ($229|0)==(0);
 if (!($230)) {
  $231 = HEAP32[$187>>2]|0;
  $232 = (_BN_add($r0,$r0,$231)|0);
  $233 = ($232|0)==(0);
  if ($233) {
   $ret$0 = 0;
   _BN_CTX_end($ctx);
   STACKTOP = sp;return ($ret$0|0);
  }
 }
 $234 = HEAP32[$125>>2]|0;
 $235 = (_BN_mul($0,$r0,$234,$ctx)|0);
 $236 = ($235|0)==(0);
 if ($236) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $237 = (_BN_add($r0,$0,$1)|0);
 $238 = ($237|0)==(0);
 if ($238) {
  $ret$0 = 0;
  _BN_CTX_end($ctx);
  STACKTOP = sp;return ($ret$0|0);
 }
 $239 = ((($rsa)) + 20|0);
 $240 = HEAP32[$239>>2]|0;
 $241 = ($240|0)==(0|0);
 do {
  if (!($241)) {
   $242 = ((($rsa)) + 16|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = ($243|0)==(0|0);
   if (!($244)) {
    $245 = HEAP32[$121>>2]|0;
    $246 = ((($245)) + 24|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = ((($rsa)) + 64|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = (FUNCTION_TABLE_iiiiiii[$247 & 31]($2,$r0,$240,$243,$ctx,$249)|0);
    $251 = ($250|0)==(0);
    if ($251) {
     $ret$0 = 0;
     _BN_CTX_end($ctx);
     STACKTOP = sp;return ($ret$0|0);
    }
    $252 = (_BN_sub($2,$2,$I)|0);
    $253 = ($252|0)==(0);
    if ($253) {
     $ret$0 = 0;
     _BN_CTX_end($ctx);
     STACKTOP = sp;return ($ret$0|0);
    }
    $254 = HEAP32[$242>>2]|0;
    $255 = (_BN_div(0,$2,$2,$254,$ctx)|0);
    $256 = ($255|0)==(0);
    if ($256) {
     $ret$0 = 0;
     _BN_CTX_end($ctx);
     STACKTOP = sp;return ($ret$0|0);
    }
    $257 = ((($2)) + 12|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ($258|0)==(0);
    do {
     if (!($259)) {
      $260 = HEAP32[$242>>2]|0;
      $261 = (_BN_add($2,$2,$260)|0);
      $262 = ($261|0)==(0);
      if ($262) {
       $ret$0 = 0;
      } else {
       break;
      }
      _BN_CTX_end($ctx);
      STACKTOP = sp;return ($ret$0|0);
     }
    } while(0);
    $263 = ((($2)) + 4|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = ($264|0)==(0);
    if ($265) {
     break;
    }
    $266 = HEAP32[$3>>2]|0;
    $267 = $266 & 256;
    $268 = ($267|0)==(0);
    $269 = ((($rsa)) + 24|0);
    if ($268) {
     $270 = HEAP32[$269>>2]|0;
     $271 = HEAP32[$270>>2]|0;
     HEAP32[$local_d>>2] = $271;
     $272 = ((($270)) + 4|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = ((($local_d)) + 4|0);
     HEAP32[$274>>2] = $273;
     $275 = ((($270)) + 8|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ((($local_d)) + 8|0);
     HEAP32[$277>>2] = $276;
     $278 = ((($270)) + 12|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ((($local_d)) + 12|0);
     HEAP32[$280>>2] = $279;
     $281 = ((($local_d)) + 16|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = $282 & 1;
     $284 = ((($270)) + 16|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = $285 & -8;
     $287 = $283 | $286;
     $288 = $287 | 6;
     HEAP32[$281>>2] = $288;
     $d$0 = $local_d;
    } else {
     $289 = HEAP32[$269>>2]|0;
     $d$0 = $289;
    }
    $290 = HEAP32[$121>>2]|0;
    $291 = ((($290)) + 24|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = HEAP32[$242>>2]|0;
    $294 = HEAP32[$248>>2]|0;
    $295 = (FUNCTION_TABLE_iiiiiii[$292 & 31]($r0,$I,$d$0,$293,$ctx,$294)|0);
    $296 = ($295|0)==(0);
    if ($296) {
     $ret$0 = 0;
    } else {
     break;
    }
    _BN_CTX_end($ctx);
    STACKTOP = sp;return ($ret$0|0);
   }
  }
 } while(0);
 $ret$0 = 1;
 _BN_CTX_end($ctx);
 STACKTOP = sp;return ($ret$0|0);
}
function _RSA_eay_init($rsa) {
 $rsa = $rsa|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 6;
 HEAP32[$0>>2] = $2;
 return 1;
}
function _RSA_eay_finish($rsa) {
 $rsa = $rsa|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _BN_MONT_CTX_free($1);
 }
 $3 = ((($rsa)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _BN_MONT_CTX_free($4);
 }
 $6 = ((($rsa)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  return 1;
 }
 _BN_MONT_CTX_free($7);
 return 1;
}
function _rsa_get_blinding($rsa,$local,$ctx) {
 $rsa = $rsa|0;
 $local = $local|0;
 $ctx = $ctx|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0;
 var $got_write_lock$01 = 0, $ret$0 = 0, $ret$03 = 0, $ret$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 _CRYPTO_lock(5,9,90828,262);
 $0 = ((($rsa)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _CRYPTO_lock(6,9,90828,265);
  _CRYPTO_lock(9,9,90828,266);
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $5 = (_RSA_setup_blinding($rsa,$ctx)|0);
   HEAP32[$0>>2] = $5;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $ret$04 = 0;
   } else {
    $7 = $5;$got_write_lock$01 = 1;
    label = 4;
   }
  } else {
   $7 = $3;$got_write_lock$01 = 1;
   label = 4;
  }
 } else {
  $7 = $1;$got_write_lock$01 = 0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   _CRYPTO_THREADID_current($cur);
   $8 = (_BN_BLINDING_thread_id($7)|0);
   $9 = (_CRYPTO_THREADID_cmp($cur,$8)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    HEAP32[$local>>2] = 1;
    $ret$0 = $7;
   } else {
    HEAP32[$local>>2] = 0;
    $11 = ((($rsa)) + 84|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $14 = ($got_write_lock$01|0)==(0);
     if ($14) {
      _CRYPTO_lock(6,9,90828,294);
      _CRYPTO_lock(9,9,90828,295);
      $$pre = HEAP32[$11>>2]|0;
      $15 = ($$pre|0)==(0|0);
      if (!($15)) {
       $ret$04 = $$pre;
       break;
      }
     }
     $16 = (_RSA_setup_blinding($rsa,$ctx)|0);
     HEAP32[$11>>2] = $16;
     $ret$04 = $16;
     break;
    } else {
     $ret$0 = $12;
    }
   }
   $17 = ($got_write_lock$01|0)==(0);
   if ($17) {
    _CRYPTO_lock(6,9,90828,309);
    $ret$03 = $ret$0;
    STACKTOP = sp;return ($ret$03|0);
   } else {
    $ret$04 = $ret$0;
   }
  }
 } while(0);
 _CRYPTO_lock(10,9,90828,307);
 $ret$03 = $ret$04;
 STACKTOP = sp;return ($ret$03|0);
}
function _RSA_generate_key_ex($rsa,$bits,$e_value,$cb) {
 $rsa = $rsa|0;
 $bits = $bits|0;
 $e_value = $e_value|0;
 $cb = $cb|0;
 var $$0 = 0, $$pre$i = 0, $$pre11$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $d$0$i = 0, $local_d$i = 0, $local_p$i = 0, $local_r0$i = 0, $n$0$i = 0, $n$0$i$lcssa10 = 0, $n$1$i = 0, $ok$1$i = 0, $p$0$i = 0, $pr0$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $local_r0$i = sp + 40|0;
 $local_d$i = sp + 20|0;
 $local_p$i = sp;
 $0 = ((($rsa)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = (FUNCTION_TABLE_iiiii[$3 & 127]($rsa,$bits,$e_value,$cb)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_BN_CTX_new()|0);
 $7 = ($6|0)==(0|0);
 L5: do {
  if ($7) {
   label = 60;
  } else {
   _BN_CTX_start($6);
   $8 = (_BN_CTX_get($6)|0);
   $9 = (_BN_CTX_get($6)|0);
   $10 = (_BN_CTX_get($6)|0);
   $11 = (_BN_CTX_get($6)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    label = 60;
   } else {
    $13 = (($bits) + 1)|0;
    $14 = (($13|0) / 2)&-1;
    $15 = (($bits) - ($14))|0;
    $16 = ((($rsa)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0|0);
    if ($18) {
     $19 = (_BN_new()|0);
     HEAP32[$16>>2] = $19;
     $20 = ($19|0)==(0|0);
     if ($20) {
      label = 60;
      break;
     }
    }
    $21 = ((($rsa)) + 24|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     $24 = (_BN_new()|0);
     HEAP32[$21>>2] = $24;
     $25 = ($24|0)==(0|0);
     if ($25) {
      label = 60;
      break;
     }
    }
    $26 = ((($rsa)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     $29 = (_BN_new()|0);
     HEAP32[$26>>2] = $29;
     $30 = ($29|0)==(0|0);
     if ($30) {
      label = 60;
      break;
     }
    }
    $31 = ((($rsa)) + 28|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     $34 = (_BN_new()|0);
     HEAP32[$31>>2] = $34;
     $35 = ($34|0)==(0|0);
     if ($35) {
      label = 60;
      break;
     }
    }
    $36 = ((($rsa)) + 32|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0|0);
    if ($38) {
     $39 = (_BN_new()|0);
     HEAP32[$36>>2] = $39;
     $40 = ($39|0)==(0|0);
     if ($40) {
      label = 60;
      break;
     }
    }
    $41 = ((($rsa)) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0|0);
    if ($43) {
     $44 = (_BN_new()|0);
     HEAP32[$41>>2] = $44;
     $45 = ($44|0)==(0|0);
     if ($45) {
      label = 60;
      break;
     }
    }
    $46 = ((($rsa)) + 40|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     $49 = (_BN_new()|0);
     HEAP32[$46>>2] = $49;
     $50 = ($49|0)==(0|0);
     if ($50) {
      label = 60;
      break;
     }
    }
    $51 = ((($rsa)) + 44|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0|0);
    if ($53) {
     $54 = (_BN_new()|0);
     HEAP32[$51>>2] = $54;
     $55 = ($54|0)==(0|0);
     if ($55) {
      label = 60;
      break;
     }
    }
    $56 = HEAP32[$26>>2]|0;
    (_BN_copy($56,$e_value)|0);
    $57 = ((($9)) + 4|0);
    $58 = ((($9)) + 12|0);
    $n$0$i = 0;
    while(1) {
     $59 = HEAP32[$31>>2]|0;
     $60 = (_BN_generate_prime_ex($59,$14,0,0,0,$cb)|0);
     $61 = ($60|0)==(0);
     if ($61) {
      label = 60;
      break L5;
     }
     $62 = HEAP32[$31>>2]|0;
     $63 = (_BN_value_one()|0);
     $64 = (_BN_sub($10,$62,$63)|0);
     $65 = ($64|0)==(0);
     if ($65) {
      label = 60;
      break L5;
     }
     $66 = HEAP32[$26>>2]|0;
     $67 = (_BN_gcd($9,$10,$66,$6)|0);
     $68 = ($67|0)==(0);
     if ($68) {
      label = 60;
      break L5;
     }
     $69 = HEAP32[$57>>2]|0;
     $70 = ($69|0)==(1);
     if ($70) {
      $71 = HEAP32[$9>>2]|0;
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(1);
      if ($73) {
       $74 = HEAP32[$58>>2]|0;
       $75 = ($74|0)==(0);
       if ($75) {
        $n$0$i$lcssa10 = $n$0$i;
        break;
       }
      }
     }
     $76 = (($n$0$i) + 1)|0;
     $77 = (_BN_GENCB_call($cb,2,$n$0$i)|0);
     $78 = ($77|0)==(0);
     if ($78) {
      label = 60;
      break L5;
     } else {
      $n$0$i = $76;
     }
    }
    $79 = (_BN_GENCB_call($cb,3,0)|0);
    $80 = ($79|0)==(0);
    if ($80) {
     label = 60;
    } else {
     $n$1$i = $n$0$i$lcssa10;
     L42: while(1) {
      $81 = HEAP32[$36>>2]|0;
      $82 = (_BN_generate_prime_ex($81,$15,0,0,0,$cb)|0);
      $83 = ($82|0)==(0);
      if ($83) {
       label = 60;
       break L5;
      }
      $84 = HEAP32[$31>>2]|0;
      $85 = HEAP32[$36>>2]|0;
      $86 = (_BN_cmp($84,$85)|0);
      $87 = ($86|0)==(0);
      if ($87) {
       $88 = HEAP32[$36>>2]|0;
       $89 = (_BN_generate_prime_ex($88,$15,0,0,0,$cb)|0);
       $90 = ($89|0)==(0);
       if ($90) {
        label = 60;
        break L5;
       }
       $206 = HEAP32[$31>>2]|0;
       $207 = HEAP32[$36>>2]|0;
       $208 = (_BN_cmp($206,$207)|0);
       $209 = ($208|0)==(0);
       if ($209) {
        $210 = HEAP32[$36>>2]|0;
        $211 = (_BN_generate_prime_ex($210,$15,0,0,0,$cb)|0);
        $212 = ($211|0)==(0);
        if ($212) {
         label = 60;
         break L5;
        }
        $213 = HEAP32[$31>>2]|0;
        $214 = HEAP32[$36>>2]|0;
        $215 = (_BN_cmp($213,$214)|0);
        $216 = ($215|0)==(0);
        if ($216) {
         label = 33;
         break;
        }
       }
      }
      $91 = HEAP32[$36>>2]|0;
      $92 = (_BN_value_one()|0);
      $93 = (_BN_sub($10,$91,$92)|0);
      $94 = ($93|0)==(0);
      if ($94) {
       label = 60;
       break L5;
      }
      $95 = HEAP32[$26>>2]|0;
      $96 = (_BN_gcd($9,$10,$95,$6)|0);
      $97 = ($96|0)==(0);
      if ($97) {
       label = 60;
       break L5;
      }
      $98 = HEAP32[$57>>2]|0;
      $99 = ($98|0)==(1);
      do {
       if ($99) {
        $100 = HEAP32[$9>>2]|0;
        $101 = HEAP32[$100>>2]|0;
        $102 = ($101|0)==(1);
        if (!($102)) {
         break;
        }
        $103 = HEAP32[$58>>2]|0;
        $104 = ($103|0)==(0);
        if ($104) {
         break L42;
        }
       }
      } while(0);
      $105 = (($n$1$i) + 1)|0;
      $106 = (_BN_GENCB_call($cb,2,$n$1$i)|0);
      $107 = ($106|0)==(0);
      if ($107) {
       label = 60;
       break L5;
      } else {
       $n$1$i = $105;
      }
     }
     if ((label|0) == 33) {
      _ERR_put_error(4,129,120,90838,175);
      $ok$1$i = 0;
      break;
     }
     $108 = (_BN_GENCB_call($cb,3,1)|0);
     $109 = ($108|0)==(0);
     if ($109) {
      label = 60;
     } else {
      $110 = HEAP32[$31>>2]|0;
      $111 = HEAP32[$36>>2]|0;
      $112 = (_BN_cmp($110,$111)|0);
      $113 = ($112|0)<(0);
      if ($113) {
       $114 = HEAP32[$31>>2]|0;
       $115 = HEAP32[$36>>2]|0;
       HEAP32[$31>>2] = $115;
       HEAP32[$36>>2] = $114;
       $116 = $115;
       $117 = $114;
       $119 = $116;$120 = $117;
      } else {
       $$pre$i = HEAP32[$31>>2]|0;
       $$pre11$i = HEAP32[$36>>2]|0;
       $119 = $$pre$i;$120 = $$pre11$i;
      }
      $118 = HEAP32[$16>>2]|0;
      $121 = (_BN_mul($118,$119,$120,$6)|0);
      $122 = ($121|0)==(0);
      if ($122) {
       label = 60;
      } else {
       $123 = HEAP32[$31>>2]|0;
       $124 = (_BN_value_one()|0);
       $125 = (_BN_sub($9,$123,$124)|0);
       $126 = ($125|0)==(0);
       if ($126) {
        label = 60;
       } else {
        $127 = HEAP32[$36>>2]|0;
        $128 = (_BN_value_one()|0);
        $129 = (_BN_sub($10,$127,$128)|0);
        $130 = ($129|0)==(0);
        if ($130) {
         label = 60;
        } else {
         $131 = (_BN_mul($8,$9,$10,$6)|0);
         $132 = ($131|0)==(0);
         if ($132) {
          label = 60;
         } else {
          $133 = ((($rsa)) + 60|0);
          $134 = HEAP32[$133>>2]|0;
          $135 = $134 & 256;
          $136 = ($135|0)==(0);
          if ($136) {
           $137 = HEAP32[$8>>2]|0;
           HEAP32[$local_r0$i>>2] = $137;
           $138 = ((($8)) + 4|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = ((($local_r0$i)) + 4|0);
           HEAP32[$140>>2] = $139;
           $141 = ((($8)) + 8|0);
           $142 = HEAP32[$141>>2]|0;
           $143 = ((($local_r0$i)) + 8|0);
           HEAP32[$143>>2] = $142;
           $144 = ((($8)) + 12|0);
           $145 = HEAP32[$144>>2]|0;
           $146 = ((($local_r0$i)) + 12|0);
           HEAP32[$146>>2] = $145;
           $147 = ((($local_r0$i)) + 16|0);
           $148 = ((($8)) + 16|0);
           $149 = HEAP32[$148>>2]|0;
           $150 = $149 & -8;
           $151 = $150 | 6;
           HEAP32[$147>>2] = $151;
           $pr0$0$i = $local_r0$i;
          } else {
           $pr0$0$i = $8;
          }
          $152 = HEAP32[$21>>2]|0;
          $153 = HEAP32[$26>>2]|0;
          $154 = (_BN_mod_inverse($152,$153,$pr0$0$i,$6)|0);
          $155 = ($154|0)==(0|0);
          if ($155) {
           label = 60;
           break;
          }
          $156 = HEAP32[$133>>2]|0;
          $157 = $156 & 256;
          $158 = ($157|0)==(0);
          if ($158) {
           $159 = HEAP32[$21>>2]|0;
           $160 = HEAP32[$159>>2]|0;
           HEAP32[$local_d$i>>2] = $160;
           $161 = ((($159)) + 4|0);
           $162 = HEAP32[$161>>2]|0;
           $163 = ((($local_d$i)) + 4|0);
           HEAP32[$163>>2] = $162;
           $164 = ((($159)) + 8|0);
           $165 = HEAP32[$164>>2]|0;
           $166 = ((($local_d$i)) + 8|0);
           HEAP32[$166>>2] = $165;
           $167 = ((($159)) + 12|0);
           $168 = HEAP32[$167>>2]|0;
           $169 = ((($local_d$i)) + 12|0);
           HEAP32[$169>>2] = $168;
           $170 = ((($local_d$i)) + 16|0);
           $171 = ((($159)) + 16|0);
           $172 = HEAP32[$171>>2]|0;
           $173 = $172 & -8;
           $174 = $173 | 6;
           HEAP32[$170>>2] = $174;
           $d$0$i = $local_d$i;
          } else {
           $175 = HEAP32[$21>>2]|0;
           $d$0$i = $175;
          }
          $176 = HEAP32[$41>>2]|0;
          $177 = (_BN_div(0,$176,$d$0$i,$9,$6)|0);
          $178 = ($177|0)==(0);
          if ($178) {
           label = 60;
           break;
          }
          $179 = HEAP32[$46>>2]|0;
          $180 = (_BN_div(0,$179,$d$0$i,$10,$6)|0);
          $181 = ($180|0)==(0);
          if ($181) {
           label = 60;
           break;
          }
          $182 = HEAP32[$133>>2]|0;
          $183 = $182 & 256;
          $184 = ($183|0)==(0);
          if ($184) {
           $185 = HEAP32[$31>>2]|0;
           $186 = HEAP32[$185>>2]|0;
           HEAP32[$local_p$i>>2] = $186;
           $187 = ((($185)) + 4|0);
           $188 = HEAP32[$187>>2]|0;
           $189 = ((($local_p$i)) + 4|0);
           HEAP32[$189>>2] = $188;
           $190 = ((($185)) + 8|0);
           $191 = HEAP32[$190>>2]|0;
           $192 = ((($local_p$i)) + 8|0);
           HEAP32[$192>>2] = $191;
           $193 = ((($185)) + 12|0);
           $194 = HEAP32[$193>>2]|0;
           $195 = ((($local_p$i)) + 12|0);
           HEAP32[$195>>2] = $194;
           $196 = ((($local_p$i)) + 16|0);
           $197 = ((($185)) + 16|0);
           $198 = HEAP32[$197>>2]|0;
           $199 = $198 & -8;
           $200 = $199 | 6;
           HEAP32[$196>>2] = $200;
           $p$0$i = $local_p$i;
          } else {
           $201 = HEAP32[$31>>2]|0;
           $p$0$i = $201;
          }
          $202 = HEAP32[$51>>2]|0;
          $203 = HEAP32[$36>>2]|0;
          $204 = (_BN_mod_inverse($202,$203,$p$0$i,$6)|0);
          $205 = ($204|0)==(0|0);
          if ($205) {
           label = 60;
          } else {
           $ok$1$i = 1;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 60) {
  _ERR_put_error(4,129,3,90838,241);
  $ok$1$i = 0;
 }
 if (!($7)) {
  _BN_CTX_end($6);
  _BN_CTX_free($6);
 }
 $$0 = $ok$1$i;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_RSA_new_method(0)|0);
 return ($0|0);
}
function _RSA_new_method($engine) {
 $engine = $engine|0;
 var $$0 = 0, $$pre = 0, $$pre$phi12Z2D = 0, $$pre$phi13Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(88,90848,141)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(4,106,65,90848,143);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[52980>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_RSA_PKCS1_SSLeay()|0);
  HEAP32[52980>>2] = $4;
  $6 = $4;
 } else {
  $6 = $2;
 }
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $6;
 $7 = ($engine|0)==(0|0);
 do {
  if ($7) {
   $11 = (_ENGINE_get_default_RSA()|0);
   $12 = ((($0)) + 12|0);
   HEAP32[$12>>2] = $11;
   $13 = ($11|0)==(0|0);
   if ($13) {
    $$pre = HEAP32[$5>>2]|0;
    $$pre$phi13Z2D = $12;$23 = $$pre;
   } else {
    $$pre$phi12Z2D = $12;$14 = $11;
    label = 11;
   }
  } else {
   $8 = (_ENGINE_init($engine)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = ((($0)) + 12|0);
    HEAP32[$10>>2] = $engine;
    $$pre$phi12Z2D = $10;$14 = $engine;
    label = 11;
    break;
   }
   _ERR_put_error(4,106,38,90848,151);
   _CRYPTO_free($0);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 11) {
  $15 = (_ENGINE_get_RSA($14)|0);
  HEAP32[$5>>2] = $15;
  $16 = ($15|0)==(0|0);
  if ($16) {
   _ERR_put_error(4,106,38,90848,161);
   $17 = HEAP32[$$pre$phi12Z2D>>2]|0;
   (_ENGINE_finish($17)|0);
   _CRYPTO_free($0);
   $$0 = 0;
   return ($$0|0);
  } else {
   $$pre$phi13Z2D = $$pre$phi12Z2D;$23 = $15;
  }
 }
 HEAP32[$0>>2] = 0;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 16|0);
 $20 = ((($0)) + 56|0);
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;HEAP32[$19+16>>2]=0|0;HEAP32[$19+20>>2]=0|0;HEAP32[$19+24>>2]=0|0;HEAP32[$19+28>>2]=0|0;
 HEAP32[$20>>2] = 1;
 $21 = ((($0)) + 64|0);
 $22 = ((($23)) + 36|0);
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;HEAP32[$21+16>>2]=0|0;HEAP32[$21+20>>2]=0|0;
 $24 = HEAP32[$22>>2]|0;
 $25 = $24 & -1025;
 $26 = ((($0)) + 60|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($0)) + 48|0);
 $28 = (_CRYPTO_new_ex_data(6,$0,$27)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = HEAP32[$$pre$phi13Z2D>>2]|0;
  $31 = ($30|0)==(0|0);
  if (!($31)) {
   (_ENGINE_finish($30)|0);
  }
  _CRYPTO_free($0);
  $$0 = 0;
  return ($$0|0);
 }
 $32 = HEAP32[$5>>2]|0;
 $33 = ((($32)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $$0 = $0;
  return ($$0|0);
 }
 $36 = (FUNCTION_TABLE_ii[$34 & 127]($0)|0);
 $37 = ($36|0)==(0);
 if (!($37)) {
  $$0 = $0;
  return ($$0|0);
 }
 $38 = HEAP32[$$pre$phi13Z2D>>2]|0;
 $39 = ($38|0)==(0|0);
 if (!($39)) {
  (_ENGINE_finish($38)|0);
 }
 _CRYPTO_free_ex_data(6,$0,$27);
 _CRYPTO_free($0);
 $$0 = 0;
 return ($$0|0);
}
function _RSA_free($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($r)) + 56|0);
 $2 = (_CRYPTO_add_lock($1,-1,9,90848,215)|0);
 $3 = ($2|0)>(0);
 if ($3) {
  return;
 }
 $4 = ((($r)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  (FUNCTION_TABLE_ii[$7 & 127]($r)|0);
 }
 $9 = ((($r)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  (_ENGINE_finish($10)|0);
 }
 $12 = ((($r)) + 48|0);
 _CRYPTO_free_ex_data(6,$r,$12);
 $13 = ((($r)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _BN_clear_free($14);
 }
 $16 = ((($r)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  _BN_clear_free($17);
 }
 $19 = ((($r)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  _BN_clear_free($20);
 }
 $22 = ((($r)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  _BN_clear_free($23);
 }
 $25 = ((($r)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _BN_clear_free($26);
 }
 $28 = ((($r)) + 36|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  _BN_clear_free($29);
 }
 $31 = ((($r)) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  _BN_clear_free($32);
 }
 $34 = ((($r)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if (!($36)) {
  _BN_clear_free($35);
 }
 $37 = ((($r)) + 80|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if (!($39)) {
  _BN_BLINDING_free($38);
 }
 $40 = ((($r)) + 84|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  _BN_BLINDING_free($41);
 }
 $43 = ((($r)) + 76|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if (!($45)) {
  _CRYPTO_free_locked($44);
 }
 _CRYPTO_free($r);
 return;
}
function _RSA_up_ref($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 56|0);
 $1 = (_CRYPTO_add_lock($0,1,9,90848,264)|0);
 $2 = ($1|0)>(1);
 $3 = $2&1;
 return ($3|0);
}
function _RSA_padding_add_none($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($flen|0)>($tlen|0);
 if ($0) {
  _ERR_put_error(4,107,110,90858,69);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($flen|0)<($tlen|0);
 if ($1) {
  _ERR_put_error(4,107,122,90858,74);
  $$0 = 0;
  return ($$0|0);
 } else {
  _memcpy(($to|0),($from|0),($flen|0))|0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _RSA_padding_check_none($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($tlen|0)<($flen|0);
 if ($0) {
  _ERR_put_error(4,111,109,90858,87);
  $$0 = -1;
  return ($$0|0);
 } else {
  $1 = (($tlen) - ($flen))|0;
  _memset(($to|0),0,($1|0))|0;
  $2 = (($to) + ($1)|0);
  _memcpy(($2|0),($from|0),($flen|0))|0;
  $$0 = $tlen;
  return ($$0|0);
 }
 return (0)|0;
}
function _RSA_padding_add_PKCS1_OAEP($to,$tlen,$from,$flen,$param,$plen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $param = $param|0;
 $plen = $plen|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_RSA_padding_add_PKCS1_OAEP_mgf1($to,$tlen,$from,$flen,$param,$plen,0,0)|0);
 return ($0|0);
}
function _RSA_padding_add_PKCS1_OAEP_mgf1($to,$tlen,$from,$flen,$param,$plen,$md,$mgf1md) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $param = $param|0;
 $plen = $plen|0;
 $md = $md|0;
 $mgf1md = $mgf1md|0;
 var $$0 = 0, $$01 = 0, $$01$mgf1md = 0, $$sum = 0, $$sum3 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond16 = 0, $i$013 = 0, $i$112 = 0, $seedmask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $seedmask = sp;
 $0 = (($tlen) + -1)|0;
 $1 = ($md|0)==(0|0);
 if ($1) {
  $2 = (_EVP_sha1()|0);
  $$01 = $2;
 } else {
  $$01 = $md;
 }
 $3 = ($mgf1md|0)==(0|0);
 $$01$mgf1md = $3 ? $$01 : $mgf1md;
 $4 = (_EVP_MD_size($$01)|0);
 $5 = $4 << 1;
 $6 = (($0) - ($5))|0;
 $7 = ($6|0)>($flen|0);
 if (!($7)) {
  _ERR_put_error(4,160,110,90869,58);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = $5 | 1;
 $9 = ($8|0)<($tlen|0);
 if (!($9)) {
  _ERR_put_error(4,160,120,90869,64);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$to>>0] = 0;
 $10 = ((($to)) + 1|0);
 $$sum = (($4) + 1)|0;
 $11 = (($to) + ($$sum)|0);
 $12 = (_EVP_Digest($param,$plen,$11,0,$$01,0)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$sum3 = (($$sum) + ($4))|0;
 $14 = (($to) + ($$sum3)|0);
 $15 = (($0) - ($flen))|0;
 $16 = (($15) + -1)|0;
 $17 = (($16) - ($5))|0;
 _memset(($14|0),0,($17|0))|0;
 $18 = (($to) + ($15)|0);
 HEAP8[$18>>0] = 1;
 $$sum7 = (($tlen) - ($flen))|0;
 $19 = (($to) + ($$sum7)|0);
 _memcpy(($19|0),($from|0),($flen|0))|0;
 $20 = (_RAND_bytes($10,$4)|0);
 $21 = ($20|0)<(1);
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = (($0) - ($4))|0;
 $23 = (_CRYPTO_malloc($22,90869,85)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  _ERR_put_error(4,160,65,90869,87);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (_PKCS1_MGF1($23,$22,$10,$4,$$01$mgf1md)|0);
 $26 = ($25|0)<(0);
 if ($26) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = ($22|0)>(0);
 if ($27) {
  $i$013 = 0;
  while(1) {
   $28 = (($23) + ($i$013)|0);
   $29 = HEAP8[$28>>0]|0;
   $$sum9 = (($i$013) + ($$sum))|0;
   $30 = (($to) + ($$sum9)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 ^ $29;
   HEAP8[$30>>0] = $32;
   $33 = (($i$013) + 1)|0;
   $exitcond16 = ($33|0)==($22|0);
   if ($exitcond16) {
    break;
   } else {
    $i$013 = $33;
   }
  }
 }
 $34 = (_PKCS1_MGF1($seedmask,$4,$11,$22,$$01$mgf1md)|0);
 $35 = ($34|0)<(0);
 if ($35) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = ($4|0)>(0);
 if ($36) {
  $i$112 = 0;
  while(1) {
   $37 = (($seedmask) + ($i$112)|0);
   $38 = HEAP8[$37>>0]|0;
   $$sum8 = (($i$112) + 1)|0;
   $39 = (($to) + ($$sum8)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 ^ $38;
   HEAP8[$39>>0] = $41;
   $exitcond = ($$sum8|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $i$112 = $$sum8;
   }
  }
 }
 _CRYPTO_free($23);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _PKCS1_MGF1($mask,$len,$seed,$seedlen,$dgst) {
 $mask = $mask|0;
 $len = $len|0;
 $seed = $seed|0;
 $seedlen = $seedlen|0;
 $dgst = $dgst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $cnt = 0, $i$02 = 0, $md = 0, $outlen$01 = 0, $outlen$01$lcssa16 = 0, $rv$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $cnt = sp + 88|0;
 $c = sp;
 $md = sp + 24|0;
 _EVP_MD_CTX_init($c);
 $0 = (_EVP_MD_size($dgst)|0);
 $1 = ($0|0)<(0);
 L1: do {
  if ($1) {
   $rv$0 = -1;
  } else {
   $2 = ($len|0)>(0);
   if ($2) {
    $3 = ((($cnt)) + 1|0);
    $4 = ((($cnt)) + 2|0);
    $5 = ((($cnt)) + 3|0);
    $i$02 = 0;$outlen$01 = 0;
    while(1) {
     $6 = $i$02 >>> 24;
     $7 = $6&255;
     HEAP8[$cnt>>0] = $7;
     $8 = $i$02 >>> 16;
     $9 = $8&255;
     HEAP8[$3>>0] = $9;
     $10 = $i$02 >>> 8;
     $11 = $10&255;
     HEAP8[$4>>0] = $11;
     $12 = $i$02&255;
     HEAP8[$5>>0] = $12;
     $13 = (_EVP_DigestInit_ex($c,$dgst,0)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      $rv$0 = -1;
      break L1;
     }
     $15 = (_EVP_DigestUpdate($c,$seed,$seedlen)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $rv$0 = -1;
      break L1;
     }
     $17 = (_EVP_DigestUpdate($c,$cnt,4)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      $rv$0 = -1;
      break L1;
     }
     $19 = (($outlen$01) + ($0))|0;
     $20 = ($19|0)>($len|0);
     if ($20) {
      $outlen$01$lcssa16 = $outlen$01;
      break;
     }
     $21 = (($mask) + ($outlen$01)|0);
     $22 = (_EVP_DigestFinal_ex($c,$21,0)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $rv$0 = -1;
      break L1;
     }
     $28 = (($i$02) + 1)|0;
     $29 = ($19|0)<($len|0);
     if ($29) {
      $i$02 = $28;$outlen$01 = $19;
     } else {
      $rv$0 = 0;
      break L1;
     }
    }
    $24 = (_EVP_DigestFinal_ex($c,$md,0)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     $rv$0 = -1;
    } else {
     $26 = (($mask) + ($outlen$01$lcssa16)|0);
     $27 = (($len) - ($outlen$01$lcssa16))|0;
     _memcpy(($26|0),($md|0),($27|0))|0;
     $rv$0 = 0;
    }
   } else {
    $rv$0 = 0;
   }
  }
 } while(0);
 (_EVP_MD_CTX_cleanup($c)|0);
 STACKTOP = sp;return ($rv$0|0);
}
function _RSA_padding_check_PKCS1_OAEP($to,$tlen,$from,$flen,$num,$param,$plen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 $param = $param|0;
 $plen = $plen|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_RSA_padding_check_PKCS1_OAEP_mgf1($to,$tlen,$from,$flen,$num,$param,$plen,0,0)|0);
 return ($0|0);
}
function _RSA_padding_check_PKCS1_OAEP_mgf1($to,$tlen,$from,$flen,$num,$param,$plen,$md,$mgf1md) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 $param = $param|0;
 $plen = $plen|0;
 $md = $md|0;
 $mgf1md = $mgf1md|0;
 var $$0 = 0, $$04 = 0, $$04$mgf1md = 0, $$lcssa = 0, $$lcssa31 = 0, $$lcssa32 = 0, $$not = 0, $$sum = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $db$0 = 0, $db$1 = 0, $em$0 = 0, $em$1 = 0, $exitcond = 0, $exitcond24 = 0, $found_one_byte$0$lcssa = 0, $found_one_byte$012 = 0, $good$0$lcssa = 0, $good$011 = 0, $i$019 = 0, $i$116 = 0, $i$213 = 0, $mlen$1 = 0;
 var $one_index$0$lcssa = 0, $one_index$010 = 0, $or$cond = 0, $or$cond3 = 0, $phash = 0, $phitmp = 0, $seed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $seed = sp + 64|0;
 $phash = sp;
 $0 = ($md|0)==(0|0);
 if ($0) {
  $1 = (_EVP_sha1()|0);
  $$04 = $1;
 } else {
  $$04 = $md;
 }
 $2 = ($mgf1md|0)==(0|0);
 $$04$mgf1md = $2 ? $$04 : $mgf1md;
 $3 = (_EVP_MD_size($$04)|0);
 $4 = ($tlen|0)<(1);
 $5 = ($flen|0)<(1);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($num|0)<($flen|0);
 do {
  if ($6) {
   $db$0 = 0;$em$0 = 0;
   label = 23;
  } else {
   $7 = $3 << 1;
   $8 = (($7) + 2)|0;
   $9 = ($8|0)>($num|0);
   if ($9) {
    $db$0 = 0;$em$0 = 0;
    label = 23;
   } else {
    $10 = (($num) - ($3))|0;
    $11 = (($10) + -1)|0;
    $12 = (_CRYPTO_malloc($11,90869,151)|0);
    $13 = (_CRYPTO_malloc($num,90869,152)|0);
    $14 = ($12|0)==(0|0);
    $15 = ($13|0)==(0|0);
    $or$cond3 = $14 | $15;
    if ($or$cond3) {
     _ERR_put_error(4,161,65,90869,154);
     $db$1 = $12;$em$1 = $13;$mlen$1 = -1;
     break;
    }
    _memset(($13|0),0,($num|0))|0;
    $$sum = (($num) - ($flen))|0;
    $16 = (($13) + ($$sum)|0);
    _memcpy(($16|0),($from|0),($flen|0))|0;
    $17 = HEAP8[$13>>0]|0;
    $18 = $17&255;
    $19 = (($18) + -1)|0;
    $$sum6 = (($3) + 1)|0;
    $20 = (($13) + ($$sum6)|0);
    $21 = (_PKCS1_MGF1($seed,$3,$20,$11,$$04$mgf1md)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = ($3|0)>(0);
     if ($23) {
      $i$019 = 0;
      while(1) {
       $$sum8 = (($i$019) + 1)|0;
       $24 = (($13) + ($$sum8)|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = (($seed) + ($i$019)|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = $27 ^ $25;
       HEAP8[$26>>0] = $28;
       $exitcond24 = ($$sum8|0)==($3|0);
       if ($exitcond24) {
        break;
       } else {
        $i$019 = $$sum8;
       }
      }
     }
     $29 = (_PKCS1_MGF1($12,$11,$seed,$3,$$04$mgf1md)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      $31 = ($10|0)>(1);
      if ($31) {
       $i$116 = 0;
       while(1) {
        $$sum7 = (($i$116) + ($$sum6))|0;
        $32 = (($13) + ($$sum7)|0);
        $33 = HEAP8[$32>>0]|0;
        $34 = (($12) + ($i$116)|0);
        $35 = HEAP8[$34>>0]|0;
        $36 = $35 ^ $33;
        HEAP8[$34>>0] = $36;
        $37 = (($i$116) + 1)|0;
        $38 = ($37|0)<($11|0);
        if ($38) {
         $i$116 = $37;
        } else {
         break;
        }
       }
      }
      $39 = (_EVP_Digest($param,$plen,$phash,0,$$04,0)|0);
      $40 = ($39|0)==(0);
      if ($40) {
       $db$1 = $12;$em$1 = $13;$mlen$1 = -1;
      } else {
       $41 = (_CRYPTO_memcmp($12,$phash,$3)|0);
       $42 = $41 ^ -2147483648;
       $43 = (($41) + -1)|0;
       $44 = $42 & $19;
       $45 = $44 & $43;
       $46 = $45 >> 31;
       $47 = ($3|0)<($11|0);
       if ($47) {
        $48 = (($num) + -1)|0;
        $49 = (($48) - ($3))|0;
        $found_one_byte$012 = 0;$good$011 = $46;$i$213 = $3;$one_index$010 = 0;
        while(1) {
         $50 = (($12) + ($i$213)|0);
         $51 = HEAP8[$50>>0]|0;
         $52 = $51&255;
         $53 = $52 ^ 1;
         $54 = (($53) + -1)|0;
         $55 = $54 >> 31;
         $56 = (($52) + -1)|0;
         $57 = $56 >> 31;
         $58 = $found_one_byte$012 ^ -1;
         $59 = $i$213 & $58;
         $60 = $59 & $55;
         $$not = $55 ^ -1;
         $61 = $found_one_byte$012 | $$not;
         $62 = $61 & $one_index$010;
         $63 = $62 | $60;
         $64 = $55 | $found_one_byte$012;
         $65 = $64 | $57;
         $66 = $65 & $good$011;
         $67 = (($i$213) + 1)|0;
         $exitcond = ($67|0)==($49|0);
         if ($exitcond) {
          $$lcssa = $63;$$lcssa31 = $64;$$lcssa32 = $66;
          break;
         } else {
          $found_one_byte$012 = $64;$good$011 = $66;$i$213 = $67;$one_index$010 = $63;
         }
        }
        $phitmp = (($$lcssa) + 1)|0;
        $found_one_byte$0$lcssa = $$lcssa31;$good$0$lcssa = $$lcssa32;$one_index$0$lcssa = $phitmp;
       } else {
        $found_one_byte$0$lcssa = 0;$good$0$lcssa = $46;$one_index$0$lcssa = 1;
       }
       $68 = $found_one_byte$0$lcssa & $good$0$lcssa;
       $69 = ($68|0)==(0);
       if ($69) {
        $db$0 = $12;$em$0 = $13;
        label = 23;
       } else {
        $70 = (($11) - ($one_index$0$lcssa))|0;
        $71 = ($70|0)>($tlen|0);
        if ($71) {
         _ERR_put_error(4,161,109,90869,221);
         $db$0 = $12;$em$0 = $13;
         label = 23;
         break;
        } else {
         $72 = (($12) + ($one_index$0$lcssa)|0);
         _memcpy(($to|0),($72|0),($70|0))|0;
         $db$1 = $12;$em$1 = $13;$mlen$1 = $70;
         break;
        }
       }
      }
     } else {
      $db$1 = $12;$em$1 = $13;$mlen$1 = -1;
     }
    } else {
     $db$1 = $12;$em$1 = $13;$mlen$1 = -1;
    }
   }
  }
 } while(0);
 if ((label|0) == 23) {
  _ERR_put_error(4,161,121,90869,234);
  $db$1 = $db$0;$em$1 = $em$0;$mlen$1 = -1;
 }
 $73 = ($db$1|0)==(0|0);
 if (!($73)) {
  _CRYPTO_free($db$1);
 }
 $74 = ($em$1|0)==(0|0);
 if ($74) {
  $$0 = $mlen$1;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_free($em$1);
 $$0 = $mlen$1;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_padding_add_PKCS1_type_1($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($tlen) + -11)|0;
 $1 = ($0|0)<($flen|0);
 if ($1) {
  _ERR_put_error(4,108,110,90880,75);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = ((($to)) + 1|0);
  HEAP8[$to>>0] = 0;
  $3 = ((($to)) + 2|0);
  HEAP8[$2>>0] = 1;
  $4 = (($tlen) + -3)|0;
  $5 = (($4) - ($flen))|0;
  _memset(($3|0),-1,($5|0))|0;
  $$sum = (($5) + 2)|0;
  $6 = (($to) + ($$sum)|0);
  $$sum1 = (($5) + 3)|0;
  $7 = (($to) + ($$sum1)|0);
  HEAP8[$6>>0] = 0;
  _memcpy(($7|0),($from|0),($flen|0))|0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _RSA_padding_check_PKCS1_type_1($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $from$pn10 = 0, $from$pn10$lcssa30 = 0, $from$pn10$phi = 0, $i$03 = 0;
 var $i$09 = 0, $i$09$lcssa32 = 0, $p$0 = 0, $p$011 = 0, $p$08 = 0, $p$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($flen) + 1)|0;
 $1 = ($0|0)==($num|0);
 if ($1) {
  $2 = HEAP8[$from>>0]|0;
  $3 = ($2<<24>>24)==(1);
  if ($3) {
   $4 = (($flen) + -1)|0;
   $p$08 = ((($from)) + 1|0);
   $5 = ($flen|0)>(1);
   L4: do {
    if ($5) {
     $from$pn10 = $from;$i$09 = 0;$p$011 = $p$08;
     L5: while(1) {
      $6 = HEAP8[$p$011>>0]|0;
      switch ($6<<24>>24) {
      case 0:  {
       $from$pn10$lcssa30 = $from$pn10;$i$09$lcssa32 = $i$09;
       label = 6;
       break L5;
       break;
      }
      case -1:  {
       break;
      }
      default: {
       break L5;
      }
      }
      $8 = (($i$09) + 1)|0;
      $p$0 = ((($p$011)) + 1|0);
      $9 = ($8|0)<($4|0);
      if ($9) {
       $from$pn10$phi = $p$011;$i$09 = $8;$p$011 = $p$0;$from$pn10 = $from$pn10$phi;
      } else {
       $i$03 = $8;$p$1 = $p$0;
       break L4;
      }
     }
     if ((label|0) == 6) {
      $7 = ((($from$pn10$lcssa30)) + 2|0);
      $i$03 = $i$09$lcssa32;$p$1 = $7;
      break;
     }
     _ERR_put_error(4,112,102,90880,116);
     $$0 = -1;
     return ($$0|0);
    } else {
     $i$03 = 0;$p$1 = $p$08;
    }
   } while(0);
   $10 = ($i$03|0)==($4|0);
   if ($10) {
    _ERR_put_error(4,112,113,90880,125);
    $$0 = -1;
    return ($$0|0);
   }
   $11 = ($i$03|0)<(8);
   if ($11) {
    _ERR_put_error(4,112,103,90880,131);
    $$0 = -1;
    return ($$0|0);
   }
   $$neg = (($flen) + -2)|0;
   $12 = (($$neg) - ($i$03))|0;
   $13 = ($12|0)>($tlen|0);
   if ($13) {
    _ERR_put_error(4,112,109,90880,137);
    $$0 = -1;
    return ($$0|0);
   } else {
    _memcpy(($to|0),($p$1|0),($12|0))|0;
    $$0 = $12;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(4,112,106,90880,103);
 $$0 = -1;
 return ($$0|0);
}
function _RSA_padding_add_PKCS1_type_2($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$04 = 0, $p$0$lcssa = 0, $p$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($tlen) + -11)|0;
 $1 = ($0|0)<($flen|0);
 if ($1) {
  _ERR_put_error(4,109,110,90880,153);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($to)) + 1|0);
 HEAP8[$to>>0] = 0;
 $3 = ((($to)) + 2|0);
 HEAP8[$2>>0] = 2;
 $4 = (($tlen) + -3)|0;
 $5 = (($4) - ($flen))|0;
 $6 = (_RAND_bytes($3,$5)|0);
 $7 = ($6|0)<(1);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ($5|0)>(0);
 L8: do {
  if ($8) {
   $i$04 = 0;$p$05 = $3;
   L9: while(1) {
    $9 = HEAP8[$p$05>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     while(1) {
      $11 = (_RAND_bytes($p$05,1)|0);
      $12 = ($11|0)<(1);
      if ($12) {
       $$0 = 0;
       break L9;
      }
      $13 = HEAP8[$p$05>>0]|0;
      $14 = ($13<<24>>24)==(0);
      if (!($14)) {
       break;
      }
     }
    }
    $15 = ((($p$05)) + 1|0);
    $16 = (($i$04) + 1)|0;
    $17 = ($16|0)<($5|0);
    if ($17) {
     $i$04 = $16;$p$05 = $15;
    } else {
     $p$0$lcssa = $15;
     break L8;
    }
   }
   return ($$0|0);
  } else {
   $p$0$lcssa = $3;
  }
 } while(0);
 $18 = ((($p$0$lcssa)) + 1|0);
 HEAP8[$p$0$lcssa>>0] = 0;
 _memcpy(($18|0),($from|0),($flen|0))|0;
 $$0 = 1;
 return ($$0|0);
}
function _RSA_padding_check_PKCS1_type_2($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $$not = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $found_zero_byte$010 = 0, $i$012 = 0, $or$cond3 = 0, $zero_index$0$lcssa = 0, $zero_index$011 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $flen | $tlen;
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ($num|0)<($flen|0);
 $3 = ($num|0)<(11);
 $or$cond3 = $2 | $3;
 do {
  if (!($or$cond3)) {
   $4 = (_CRYPTO_malloc($num,90880,206)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    _ERR_put_error(4,113,65,90880,208);
    $$0 = -1;
    return ($$0|0);
   }
   _memset(($4|0),0,($num|0))|0;
   $$sum = (($num) - ($flen))|0;
   $6 = (($4) + ($$sum)|0);
   _memcpy(($6|0),($from|0),($flen|0))|0;
   $7 = HEAP8[$4>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ((($4)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = $12 ^ 2;
   $14 = (($13) + -1)|0;
   $15 = $14 & $9;
   $16 = $15 >> 31;
   $17 = ($num|0)>(2);
   if ($17) {
    $found_zero_byte$010 = 0;$i$012 = 2;$zero_index$011 = 0;
    while(1) {
     $18 = (($4) + ($i$012)|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19&255;
     $21 = (($20) + -1)|0;
     $22 = $21 >> 31;
     $23 = $found_zero_byte$010 ^ -1;
     $24 = $i$012 & $23;
     $25 = $24 & $22;
     $$not = $22 ^ -1;
     $26 = $found_zero_byte$010 | $$not;
     $27 = $26 & $zero_index$011;
     $28 = $27 | $25;
     $29 = $22 | $found_zero_byte$010;
     $30 = (($i$012) + 1)|0;
     $exitcond = ($30|0)==($num|0);
     if ($exitcond) {
      $zero_index$0$lcssa = $28;
      break;
     } else {
      $found_zero_byte$010 = $29;$i$012 = $30;$zero_index$011 = $28;
     }
    }
   } else {
    $zero_index$0$lcssa = 0;
   }
   $31 = (($zero_index$0$lcssa) + -10)|0;
   $32 = $zero_index$0$lcssa ^ -2147483648;
   $33 = $31 & $32;
   $34 = $33 >> 31;
   $35 = $34 ^ -1;
   $36 = $16 & $35;
   $37 = (($zero_index$0$lcssa) + 1)|0;
   $38 = (($num) - ($37))|0;
   $39 = $38 ^ $tlen;
   $40 = (($tlen) - ($38))|0;
   $41 = $40 ^ $38;
   $42 = $41 | $39;
   $43 = $42 ^ $tlen;
   $44 = $43 >> 31;
   $45 = $44 ^ -1;
   $46 = $36 & $45;
   $47 = ($46|0)==(0);
   if ($47) {
    _CRYPTO_free($4);
    break;
   }
   $48 = (($4) + ($37)|0);
   _memcpy(($to|0),($48|0),($38|0))|0;
   _CRYPTO_free($4);
   $49 = ($38|0)==(-1);
   if (!($49)) {
    $$0 = $38;
    return ($$0|0);
   }
  }
 } while(0);
 _ERR_put_error(4,113,159,90880,273);
 $$0 = -1;
 return ($$0|0);
}
function _pkey_rsa_init($ctx) {
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(44,90890,103)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1024;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 28|0);
 HEAP32[$7>>2] = -2;
 $8 = ((($0)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($ctx)) + 20|0);
 HEAP32[$10>>2] = $0;
 $11 = ((($0)) + 8|0);
 $12 = ((($ctx)) + 32|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($ctx)) + 36|0);
 HEAP32[$13>>2] = 2;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_rsa_copy($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(44,90890,103)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1024;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 28|0);
 HEAP32[$7>>2] = -2;
 $8 = ((($0)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($dst)) + 20|0);
 HEAP32[$10>>2] = $0;
 $11 = ((($0)) + 8|0);
 $12 = ((($dst)) + 32|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($dst)) + 36|0);
 HEAP32[$13>>2] = 2;
 $14 = ((($src)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$0>>2] = $16;
 $17 = ((($15)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $20 = (_BN_dup($18)|0);
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $22 = ($20|0)==(0|0);
  if ($22) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $23 = ((($15)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($15)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 20|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($15)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 24|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($15)) + 36|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $$0 = 1;
  return ($$0|0);
 }
 $35 = ((($0)) + 36|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  $40 = $33;
 } else {
  _CRYPTO_free($36);
  $$pre = HEAP32[$32>>2]|0;
  $40 = $$pre;
 }
 $38 = ((($15)) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 $41 = (_BUF_memdup($40,$39)|0);
 HEAP32[$35>>2] = $41;
 $42 = ($41|0)==(0|0);
 if ($42) {
  $$0 = 0;
  return ($$0|0);
 }
 $43 = HEAP32[$38>>2]|0;
 $44 = ((($0)) + 40|0);
 HEAP32[$44>>2] = $43;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_rsa_cleanup($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _BN_free($4);
 }
 $6 = ((($1)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _CRYPTO_free($7);
 }
 $9 = ((($1)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  _CRYPTO_free($10);
 }
 _CRYPTO_free($1);
 return;
}
function _pkey_rsa_keygen($ctx,$pkey) {
 $ctx = $ctx|0;
 $pkey = $pkey|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cb = 0;
 var $pcb$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cb = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_BN_new()|0);
  HEAP32[$2>>2] = $5;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0 = 0;
  } else {
   $7 = (_BN_set_word($5,65537)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 4;
   }
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = (_RSA_new()|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$0 = 0;
   } else {
    $11 = ((($ctx)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $pcb$0 = 0;
    } else {
     _evp_pkey_set_cb_translate($cb,$ctx);
     $pcb$0 = $cb;
    }
    $14 = HEAP32[$1>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    $16 = (_RSA_generate_key_ex($9,$14,$15,$pcb$0)|0);
    $17 = ($16|0)>(0);
    if ($17) {
     (_EVP_PKEY_assign($pkey,6,$9)|0);
     $$0 = $16;
     break;
    } else {
     _RSA_free($9);
     $$0 = $16;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _pkey_rsa_sign($ctx,$sig,$siglen,$tbs,$tbslen) {
 $ctx = $ctx|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $tbs = $tbs|0;
 $tbslen = $tbslen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i = 0, $not$$i1 = 0, $ret$0 = 0, $sltmp = 0, $sltmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sltmp = sp + 4|0;
 $sltmp1 = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $61 = ((($1)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_RSA_private_encrypt($tbslen,$tbs,$sig,$5,$62)|0);
   $ret$0 = $63;
  } else {
   $9 = (_EVP_MD_size($7)|0);
   $10 = ($9|0)==($tbslen|0);
   if (!($10)) {
    _ERR_put_error(4,142,143,90890,228);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = HEAP32[$6>>2]|0;
   $12 = (_EVP_MD_type($11)|0);
   $13 = ($12|0)==(95);
   $14 = ((($1)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   if ($13) {
    $16 = ($15|0)==(1);
    if (!($16)) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    $17 = (_RSA_sign_ASN1_OCTET_STRING(95,$tbs,$tbslen,$sig,$sltmp,$5)|0);
    $18 = ($17|0)<(1);
    if ($18) {
     $$0 = $17;
     STACKTOP = sp;return ($$0|0);
    } else {
     $19 = HEAP32[$sltmp>>2]|0;
     $ret$0 = $19;
     break;
    }
   }
   switch ($15|0) {
   case 5:  {
    $20 = HEAP32[$2>>2]|0;
    $21 = (_EVP_PKEY_size($20)|0);
    $22 = (($tbslen) + 1)|0;
    $23 = ($21>>>0)<($22>>>0);
    if ($23) {
     _ERR_put_error(4,142,120,90890,258);
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    $24 = ((($1)) + 32|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     $27 = HEAP32[$2>>2]|0;
     $28 = (_EVP_PKEY_size($27)|0);
     $29 = (_CRYPTO_malloc($28,90890,156)|0);
     HEAP32[$24>>2] = $29;
     $not$$i = ($29|0)==(0|0);
     if ($not$$i) {
      _ERR_put_error(4,142,65,90890,262);
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $30 = $29;
     }
    } else {
     $30 = $25;
    }
    _memcpy(($30|0),($tbs|0),($tbslen|0))|0;
    $31 = HEAP32[$6>>2]|0;
    $32 = (_EVP_MD_type($31)|0);
    $33 = (_RSA_X931_hash_id($32)|0);
    $34 = $33&255;
    $35 = HEAP32[$24>>2]|0;
    $36 = (($35) + ($tbslen)|0);
    HEAP8[$36>>0] = $34;
    $37 = HEAP32[$24>>2]|0;
    $38 = (_RSA_private_encrypt($22,$37,$sig,$5,5)|0);
    $ret$0 = $38;
    break L1;
    break;
   }
   case 1:  {
    $39 = HEAP32[$6>>2]|0;
    $40 = (_EVP_MD_type($39)|0);
    $41 = (_RSA_sign($40,$tbs,$tbslen,$sig,$sltmp1,$5)|0);
    $42 = ($41|0)<(1);
    if ($42) {
     $$0 = $41;
     STACKTOP = sp;return ($$0|0);
    } else {
     $43 = HEAP32[$sltmp1>>2]|0;
     $ret$0 = $43;
     break L1;
    }
    break;
   }
   case 6:  {
    $44 = ((($1)) + 32|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(0|0);
    if ($46) {
     $47 = HEAP32[$2>>2]|0;
     $48 = (_EVP_PKEY_size($47)|0);
     $49 = (_CRYPTO_malloc($48,90890,156)|0);
     HEAP32[$44>>2] = $49;
     $not$$i1 = ($49|0)==(0|0);
     if ($not$$i1) {
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $55 = $49;
     }
    } else {
     $55 = $45;
    }
    $50 = HEAP32[$6>>2]|0;
    $51 = ((($1)) + 24|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($1)) + 28|0);
    $54 = HEAP32[$53>>2]|0;
    $56 = (_RSA_padding_add_PKCS1_PSS_mgf1($5,$55,$tbs,$50,$52,$54)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $58 = (_RSA_size($5)|0);
     $59 = HEAP32[$44>>2]|0;
     $60 = (_RSA_private_encrypt($58,$59,$sig,$5,3)|0);
     $ret$0 = $60;
     break L1;
    }
    break;
   }
   default: {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   }
  }
 } while(0);
 $64 = ($ret$0|0)<(0);
 if ($64) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$siglen>>2] = $ret$0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _pkey_rsa_verify($ctx,$sig,$siglen,$tbs,$tbslen) {
 $ctx = $ctx|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 $tbs = $tbs|0;
 $tbslen = $tbslen|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$$i = 0, $not$$i2 = 0, $rslen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rslen = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $30 = ((($1)) + 32|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if ($32) {
    $33 = (_EVP_PKEY_size($3)|0);
    $34 = (_CRYPTO_malloc($33,90890,156)|0);
    HEAP32[$30>>2] = $34;
    $not$$i2 = ($34|0)==(0|0);
    if ($not$$i2) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $37 = $34;
    }
   } else {
    $37 = $31;
   }
   $35 = ((($1)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $38 = (_RSA_public_decrypt($siglen,$sig,$37,$5,$36)|0);
   HEAP32[$rslen>>2] = $38;
   $39 = ($38|0)==(0);
   if ($39) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $41 = $38;
   }
  } else {
   $9 = ((($1)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   switch ($10|0) {
   case 1:  {
    $11 = (_EVP_MD_type($7)|0);
    $12 = (_RSA_verify($11,$tbs,$tbslen,$sig,$siglen,$5)|0);
    $$0 = $12;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 5:  {
    $13 = (_pkey_rsa_verifyrecover($ctx,0,$rslen,$sig,$siglen)|0);
    $14 = ($13|0)<(1);
    if ($14) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $$pre = HEAP32[$rslen>>2]|0;
     $41 = $$pre;
     break L1;
    }
    break;
   }
   case 6:  {
    $15 = ((($1)) + 32|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $18 = (_EVP_PKEY_size($3)|0);
     $19 = (_CRYPTO_malloc($18,90890,156)|0);
     HEAP32[$15>>2] = $19;
     $not$$i = ($19|0)==(0|0);
     if ($not$$i) {
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $20 = $19;
     }
    } else {
     $20 = $16;
    }
    $21 = (_RSA_public_decrypt($siglen,$sig,$20,$5,3)|0);
    $22 = ($21|0)<(1);
    if ($22) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $23 = HEAP32[$6>>2]|0;
    $24 = ((($1)) + 24|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$15>>2]|0;
    $27 = ((($1)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (_RSA_verify_PKCS1_PSS_mgf1($5,$tbs,$23,$25,$26,$28)|0);
    $not$ = ($29|0)>(0);
    $$ = $not$&1;
    $$0 = $$;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   }
  }
 } while(0);
 $40 = ($41|0)==($tbslen|0);
 if ($40) {
  $42 = ((($1)) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (_memcmp($tbs,$43,$tbslen)|0);
  $45 = ($44|0)==(0);
  $$1 = $45&1;
  STACKTOP = sp;return ($$1|0);
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _pkey_rsa_verifyrecover($ctx,$rout,$routlen,$sig,$siglen) {
 $ctx = $ctx|0;
 $rout = $rout|0;
 $routlen = $routlen|0;
 $sig = $sig|0;
 $siglen = $siglen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i = 0, $ret$0 = 0, $ret$01 = 0, $sltmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sltmp = sp;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $42 = ((($ctx)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 20|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($1)) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_RSA_public_decrypt($siglen,$sig,$rout,$45,$47)|0);
   $ret$0 = $48;
   label = 15;
  } else {
   $5 = ((($1)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   switch ($6|0) {
   case 5:  {
    $7 = ((($1)) + 32|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    $10 = ((($ctx)) + 8|0);
    if ($9) {
     $11 = HEAP32[$10>>2]|0;
     $12 = (_EVP_PKEY_size($11)|0);
     $13 = (_CRYPTO_malloc($12,90890,156)|0);
     HEAP32[$7>>2] = $13;
     $not$$i = ($13|0)==(0|0);
     if ($not$$i) {
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $17 = $13;
     }
    } else {
     $17 = $8;
    }
    $14 = HEAP32[$10>>2]|0;
    $15 = ((($14)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $18 = (_RSA_public_decrypt($siglen,$sig,$17,$16,5)|0);
    $19 = ($18|0)<(1);
    if ($19) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $20 = (($18) + -1)|0;
    $21 = HEAP32[$7>>2]|0;
    $22 = (($21) + ($20)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = HEAP32[$2>>2]|0;
    $26 = (_EVP_MD_type($25)|0);
    $27 = (_RSA_X931_hash_id($26)|0);
    $28 = ($24|0)==($27|0);
    if (!($28)) {
     _ERR_put_error(4,141,100,90890,316);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $29 = HEAP32[$2>>2]|0;
    $30 = (_EVP_MD_size($29)|0);
    $31 = ($20|0)==($30|0);
    if ($31) {
     $32 = ($rout|0)==(0|0);
     if ($32) {
      $ret$01 = $20;
      break L1;
     }
     $33 = HEAP32[$7>>2]|0;
     _memcpy(($rout|0),($33|0),($20|0))|0;
     $ret$01 = $20;
     break L1;
    } else {
     _ERR_put_error(4,141,143,90890,321);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case 1:  {
    $34 = (_EVP_MD_type($3)|0);
    $35 = ((($ctx)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($36)) + 20|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (_int_rsa_verify($34,0,0,$rout,$sltmp,$sig,$siglen,$38)|0);
    $40 = ($39|0)<(1);
    if ($40) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $41 = HEAP32[$sltmp>>2]|0;
     $ret$0 = $41;
     label = 15;
     break L1;
    }
    break;
   }
   default: {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $49 = ($ret$0|0)<(0);
  if ($49) {
   $$0 = $ret$0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $ret$01 = $ret$0;
  }
 }
 HEAP32[$routlen>>2] = $ret$01;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _pkey_rsa_encrypt($ctx,$out,$outlen,$in,$inlen) {
 $ctx = $ctx|0;
 $out = $out|0;
 $outlen = $outlen|0;
 $in = $in|0;
 $inlen = $inlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(4);
 $5 = ((($ctx)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 do {
  if ($4) {
   $9 = (_RSA_size($8)|0);
   $10 = ((($1)) + 32|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = HEAP32[$5>>2]|0;
    $14 = (_EVP_PKEY_size($13)|0);
    $15 = (_CRYPTO_malloc($14,90890,156)|0);
    HEAP32[$10>>2] = $15;
    $not$$i = ($15|0)==(0|0);
    if ($not$$i) {
     $$0 = -1;
     return ($$0|0);
    } else {
     $24 = $15;
    }
   } else {
    $24 = $11;
   }
   $16 = ((($1)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($1)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($1)) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($1)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $25 = (_RSA_padding_add_PKCS1_OAEP_mgf1($24,$9,$in,$inlen,$17,$19,$21,$23)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $$0 = -1;
    return ($$0|0);
   } else {
    $27 = HEAP32[$10>>2]|0;
    $28 = HEAP32[$5>>2]|0;
    $29 = ((($28)) + 20|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_RSA_public_encrypt($9,$27,$out,$30,3)|0);
    $ret$0 = $31;
    break;
   }
  } else {
   $32 = (_RSA_public_encrypt($inlen,$in,$out,$8,$3)|0);
   $ret$0 = $32;
  }
 } while(0);
 $33 = ($ret$0|0)<(0);
 if ($33) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 HEAP32[$outlen>>2] = $ret$0;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_rsa_decrypt($ctx,$out,$outlen,$in,$inlen) {
 $ctx = $ctx|0;
 $out = $out|0;
 $outlen = $outlen|0;
 $in = $in|0;
 $inlen = $inlen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, $not$$i = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(4);
 if ($4) {
  $5 = ((($1)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  $8 = ((($ctx)) + 8|0);
  if ($7) {
   $9 = HEAP32[$8>>2]|0;
   $10 = (_EVP_PKEY_size($9)|0);
   $11 = (_CRYPTO_malloc($10,90890,156)|0);
   HEAP32[$5>>2] = $11;
   $not$$i = ($11|0)==(0|0);
   if ($not$$i) {
    $$0 = -1;
    return ($$0|0);
   } else {
    $15 = $11;
   }
  } else {
   $15 = $6;
  }
  $12 = HEAP32[$8>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $16 = (_RSA_private_decrypt($inlen,$in,$15,$14,3)|0);
  $17 = ($16|0)<(1);
  if ($17) {
   $$0 = $16;
   return ($$0|0);
  }
  $18 = HEAP32[$5>>2]|0;
  $i$01 = 0;
  while(1) {
   $19 = (($18) + ($i$01)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if (!($21)) {
    $i$0$lcssa = $i$01;
    break;
   }
   $22 = (($i$01) + 1)|0;
   $23 = ($16|0)>($22|0);
   if ($23) {
    $i$01 = $22;
   } else {
    $i$0$lcssa = $22;
    break;
   }
  }
  $24 = (($18) + ($i$0$lcssa)|0);
  $25 = (($16) - ($i$0$lcssa))|0;
  $26 = ((($1)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($1)) + 40|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($1)) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($1)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_RSA_padding_check_PKCS1_OAEP_mgf1($out,$16,$24,$25,$16,$27,$29,$31,$33)|0);
  $ret$0 = $34;
 } else {
  $35 = ((($ctx)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_RSA_private_decrypt($inlen,$in,$out,$38,$3)|0);
  $ret$0 = $39;
 }
 $40 = ($ret$0|0)<(0);
 if ($40) {
  $$0 = $ret$0;
  return ($$0|0);
 }
 HEAP32[$outlen>>2] = $ret$0;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_rsa_ctrl($ctx,$type,$p1,$p2) {
 $ctx = $ctx|0;
 $type = $type|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, $p1$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 do {
  switch ($type|0) {
  case 4097:  {
   $p1$off = (($p1) + -1)|0;
   $2 = ($p1$off>>>0)<(6);
   do {
    if ($2) {
     $3 = ((($1)) + 20|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = ($4|0)==(0|0);
     L7: do {
      if ($5) {
       switch ($p1|0) {
       case 6:  {
        label = 9;
        break;
       }
       case 4:  {
        label = 12;
        break;
       }
       default: {
       }
       }
      } else {
       switch ($p1|0) {
       case 6:  {
        label = 9;
        break L7;
        break;
       }
       case 4:  {
        label = 12;
        break L7;
        break;
       }
       case 3:  {
        _ERR_put_error(4,140,141,90890,476);
        $$0 = 0;
        return ($$0|0);
        break;
       }
       case 5:  {
        break;
       }
       default: {
        break L7;
       }
       }
       $6 = (_EVP_MD_type($4)|0);
       $7 = (_RSA_X931_hash_id($6)|0);
       $8 = ($7|0)==(-1);
       if ($8) {
        _ERR_put_error(4,140,142,90890,482);
        $$0 = 0;
        return ($$0|0);
       }
      }
     } while(0);
     if ((label|0) == 9) {
      $9 = ((($ctx)) + 16|0);
      $10 = HEAP32[$9>>2]|0;
      $11 = $10 & 24;
      $12 = ($11|0)==(0);
      if ($12) {
       break;
      }
      if ($5) {
       $13 = (_EVP_sha1()|0);
       HEAP32[$3>>2] = $13;
      }
     }
     else if ((label|0) == 12) {
      $14 = ((($ctx)) + 16|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = $15 & 768;
      $17 = ($16|0)==(0);
      if ($17) {
       break;
      }
      if ($5) {
       $18 = (_EVP_sha1()|0);
       HEAP32[$3>>2] = $18;
      }
     }
     $19 = ((($1)) + 16|0);
     HEAP32[$19>>2] = $p1;
     $$0 = 1;
     return ($$0|0);
    }
   } while(0);
   _ERR_put_error(4,143,144,90890,517);
   $$0 = -2;
   return ($$0|0);
   break;
  }
  case 4102:  {
   $20 = ((($1)) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$p2>>2] = $21;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4103: case 4098:  {
   $22 = ((($1)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(6);
   if (!($24)) {
    _ERR_put_error(4,143,146,90890,527);
    $$0 = -2;
    return ($$0|0);
   }
   $25 = ($type|0)==(4103);
   if ($25) {
    $26 = ((($1)) + 28|0);
    $27 = HEAP32[$26>>2]|0;
    HEAP32[$p2>>2] = $27;
    $$0 = 1;
    return ($$0|0);
   }
   $28 = ($p1|0)<(-2);
   if ($28) {
    $$0 = -2;
    return ($$0|0);
   }
   $29 = ((($1)) + 28|0);
   HEAP32[$29>>2] = $p1;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4099:  {
   $30 = ($p1|0)<(256);
   if ($30) {
    _ERR_put_error(4,143,145,90890,541);
    $$0 = -2;
    return ($$0|0);
   } else {
    HEAP32[$1>>2] = $p1;
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 4100:  {
   $31 = ($p2|0)==(0|0);
   if ($31) {
    $$0 = -2;
    return ($$0|0);
   }
   $32 = ((($1)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   _BN_free($33);
   HEAP32[$32>>2] = $p2;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4107: case 4105:  {
   $34 = ((($1)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(4);
   if (!($36)) {
    _ERR_put_error(4,143,141,90890,557);
    $$0 = -2;
    return ($$0|0);
   }
   $37 = ($type|0)==(4107);
   $38 = ((($1)) + 20|0);
   if ($37) {
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$p2>>2] = $39;
    $$0 = 1;
    return ($$0|0);
   } else {
    HEAP32[$38>>2] = $p2;
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 1:  {
   $40 = ($p2|0)==(0|0);
   L64: do {
    if (!($40)) {
     $41 = ((($1)) + 16|0);
     $42 = HEAP32[$41>>2]|0;
     switch ($42|0) {
     case 3:  {
      _ERR_put_error(4,140,141,90890,476);
      $$0 = 0;
      return ($$0|0);
      break;
     }
     case 5:  {
      break;
     }
     default: {
      break L64;
     }
     }
     $43 = (_EVP_MD_type($p2)|0);
     $44 = (_RSA_X931_hash_id($43)|0);
     $45 = ($44|0)==(-1);
     if ($45) {
      _ERR_put_error(4,140,142,90890,482);
      $$0 = 0;
      return ($$0|0);
     }
    }
   } while(0);
   $46 = ((($1)) + 20|0);
   HEAP32[$46>>2] = $p2;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 13:  {
   $47 = ((($1)) + 20|0);
   $48 = HEAP32[$47>>2]|0;
   HEAP32[$p2>>2] = $48;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4104: case 4101:  {
   $49 = ((($1)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   switch ($50|0) {
   case 4: case 6:  {
    break;
   }
   default: {
    _ERR_put_error(4,143,156,90890,580);
    $$0 = -2;
    return ($$0|0);
   }
   }
   $51 = ($type|0)==(4104);
   $52 = ((($1)) + 24|0);
   if (!($51)) {
    HEAP32[$52>>2] = $p2;
    $$0 = 1;
    return ($$0|0);
   }
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    $55 = ((($1)) + 20|0);
    $56 = HEAP32[$55>>2]|0;
    HEAP32[$p2>>2] = $56;
    $$0 = 1;
    return ($$0|0);
   } else {
    HEAP32[$p2>>2] = $53;
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 4106:  {
   $57 = ((($1)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(4);
   if (!($59)) {
    _ERR_put_error(4,143,141,90890,594);
    $$0 = -2;
    return ($$0|0);
   }
   $60 = ((($1)) + 36|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if (!($62)) {
    _CRYPTO_free($61);
   }
   $63 = ($p2|0)!=(0|0);
   $64 = ($p1|0)>(0);
   $or$cond3 = $64 & $63;
   if ($or$cond3) {
    HEAP32[$60>>2] = $p2;
    $65 = ((($1)) + 40|0);
    HEAP32[$65>>2] = $p1;
    $$0 = 1;
    return ($$0|0);
   } else {
    HEAP32[$60>>2] = 0;
    $66 = ((($1)) + 40|0);
    HEAP32[$66>>2] = 0;
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 4108:  {
   $67 = ((($1)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(4);
   if ($69) {
    $70 = ((($1)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    HEAP32[$p2>>2] = $71;
    $72 = ((($1)) + 40|0);
    $73 = HEAP32[$72>>2]|0;
    $$0 = $73;
    return ($$0|0);
   } else {
    _ERR_put_error(4,143,141,90890,610);
    $$0 = -2;
    return ($$0|0);
   }
   break;
  }
  case 2:  {
   _ERR_put_error(4,143,148,90890,629);
   $$0 = -2;
   return ($$0|0);
   break;
  }
  case 11: case 9: case 10: case 5: case 4: case 3: case 7:  {
   $$0 = 1;
   return ($$0|0);
   break;
  }
  default: {
   $$0 = -2;
   return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _pkey_rsa_ctrl_str($ctx,$type,$value) {
 $ctx = $ctx|0;
 $type = $type|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lablen = 0, $pm$0 = 0, $pubexp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pubexp = sp + 4|0;
 $lablen = sp;
 $0 = ($value|0)==(0|0);
 do {
  if ($0) {
   _ERR_put_error(4,144,147,90890,642);
   $$0 = 0;
  } else {
   $1 = (_strcmp($type,90902)|0);
   $2 = ($1|0)==(0);
   if ($2) {
    $3 = (_strcmp($value,90919)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $pm$0 = 1;
    } else {
     $5 = (_strcmp($value,90925)|0);
     $6 = ($5|0)==(0);
     if ($6) {
      $pm$0 = 2;
     } else {
      $7 = (_strcmp($value,90932)|0);
      $8 = ($7|0)==(0);
      if ($8) {
       $pm$0 = 3;
      } else {
       $9 = (_strcmp($value,90937)|0);
       $10 = ($9|0)==(0);
       if ($10) {
        $pm$0 = 4;
       } else {
        $11 = (_strcmp($value,90942)|0);
        $12 = ($11|0)==(0);
        if ($12) {
         $pm$0 = 4;
        } else {
         $13 = (_strcmp($value,90947)|0);
         $14 = ($13|0)==(0);
         if ($14) {
          $pm$0 = 5;
         } else {
          $15 = (_strcmp($value,90952)|0);
          $16 = ($15|0)==(0);
          if ($16) {
           $pm$0 = 6;
          } else {
           _ERR_put_error(4,144,118,90890,662);
           $$0 = -2;
           break;
          }
         }
        }
       }
      }
     }
    }
    $17 = (_EVP_PKEY_CTX_ctrl($ctx,6,-1,4097,$pm$0,0)|0);
    $$0 = $17;
    break;
   }
   $18 = (_strcmp($type,90956)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = (_atoi($value)|0);
    $21 = (_EVP_PKEY_CTX_ctrl($ctx,6,24,4098,$20,0)|0);
    $$0 = $21;
    break;
   }
   $22 = (_strcmp($type,90972)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = (_atoi($value)|0);
    $25 = (_EVP_PKEY_CTX_ctrl($ctx,6,4,4099,$24,0)|0);
    $$0 = $25;
    break;
   }
   $26 = (_strcmp($type,90988)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    HEAP32[$pubexp>>2] = 0;
    $28 = (_BN_asc2bn($pubexp,$value)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $$0 = 0;
     break;
    }
    $30 = HEAP32[$pubexp>>2]|0;
    $31 = (_EVP_PKEY_CTX_ctrl($ctx,6,4,4100,0,$30)|0);
    $32 = ($31|0)<(1);
    if (!($32)) {
     $$0 = $31;
     break;
    }
    $33 = HEAP32[$pubexp>>2]|0;
    _BN_free($33);
    $$0 = $31;
    break;
   }
   $34 = (_strcmp($type,91006)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = (_EVP_get_digestbyname($value)|0);
    $37 = ($36|0)==(0|0);
    if ($37) {
     _ERR_put_error(4,144,160,90890,694);
     $$0 = 0;
     break;
    } else {
     $38 = (_EVP_PKEY_CTX_ctrl($ctx,6,1016,4101,0,$36)|0);
     $$0 = $38;
     break;
    }
   }
   $39 = (_strcmp($type,91018)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = (_EVP_get_digestbyname($value)|0);
    $42 = ($41|0)==(0|0);
    if ($42) {
     _ERR_put_error(4,144,160,90890,703);
     $$0 = 0;
     break;
    } else {
     $43 = (_EVP_PKEY_CTX_ctrl($ctx,6,768,4105,0,$41)|0);
     $$0 = $43;
     break;
    }
   }
   $44 = (_strcmp($type,91030)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $46 = (_string_to_hex($value,$lablen)|0);
    $47 = ($46|0)==(0|0);
    if ($47) {
     $$0 = 0;
    } else {
     $48 = HEAP32[$lablen>>2]|0;
     $49 = (_EVP_PKEY_CTX_ctrl($ctx,6,768,4106,$48,$46)|0);
     $50 = ($49|0)<(1);
     if ($50) {
      _CRYPTO_free($46);
      $$0 = $49;
     } else {
      $$0 = $49;
     }
    }
   } else {
    $$0 = -2;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _RSA_verify_PKCS1_PSS_mgf1($rsa,$mHash,$Hash,$mgf1Hash,$EM,$sLen) {
 $rsa = $rsa|0;
 $mHash = $mHash|0;
 $Hash = $Hash|0;
 $mgf1Hash = $mgf1Hash|0;
 $EM = $EM|0;
 $sLen = $sLen|0;
 var $$01 = 0, $$02 = 0, $$lcssa = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $H_ = 0, $Hash$mgf1Hash = 0, $ctx = 0, $emLen$0 = 0, $i$013 = 0, $i$1 = 0;
 var $or$cond = 0, $or$cond5 = 0, $ret$0$ph = 0, $ret$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $ctx = sp;
 $H_ = sp + 24|0;
 _EVP_MD_CTX_init($ctx);
 $0 = ($mgf1Hash|0)==(0|0);
 $Hash$mgf1Hash = $0 ? $Hash : $mgf1Hash;
 $1 = (_EVP_MD_size($Hash)|0);
 $2 = ($1|0)<(0);
 if ($2) {
  $ret$07 = 0;
  (_EVP_MD_CTX_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 switch ($sLen|0) {
 case -1:  {
  $$02 = $1;
  break;
 }
 case -2:  {
  $$02 = -2;
  break;
 }
 default: {
  $3 = ($sLen|0)<(-2);
  if ($3) {
   _ERR_put_error(4,149,136,91045,111);
   $ret$07 = 0;
   (_EVP_MD_CTX_cleanup($ctx)|0);
   STACKTOP = sp;return ($ret$07|0);
  } else {
   $$02 = $sLen;
  }
 }
 }
 $4 = ((($rsa)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_BN_num_bits($5)|0);
 $7 = (($6) + 7)|0;
 $8 = $7 & 7;
 $9 = (_RSA_size($rsa)|0);
 $10 = HEAP8[$EM>>0]|0;
 $11 = $10&255;
 $12 = 255 << $8;
 $13 = $11 & $12;
 $14 = ($13|0)==(0);
 if (!($14)) {
  _ERR_put_error(4,149,133,91045,118);
  $ret$07 = 0;
  (_EVP_MD_CTX_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 $15 = ($8|0)==(0);
 $16 = ((($EM)) + 1|0);
 $17 = $15 << 31 >> 31;
 $emLen$0 = (($17) + ($9))|0;
 $$01 = $15 ? $16 : $EM;
 $18 = (($1) + 2)|0;
 $19 = (($18) + ($$02))|0;
 $20 = ($emLen$0|0)<($19|0);
 if ($20) {
  _ERR_put_error(4,149,109,91045,126);
  $ret$07 = 0;
  (_EVP_MD_CTX_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 $21 = (($emLen$0) + -1)|0;
 $22 = (($$01) + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(-68);
 if (!($24)) {
  _ERR_put_error(4,149,134,91045,130);
  $ret$07 = 0;
  (_EVP_MD_CTX_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 $25 = (($emLen$0) - ($1))|0;
 $26 = (($25) + -1)|0;
 $27 = (($$01) + ($26)|0);
 $28 = (_CRYPTO_malloc($26,91045,135)|0);
 $29 = ($28|0)==(0|0);
 if ($29) {
  _ERR_put_error(4,149,65,91045,137);
  $ret$07 = 0;
  (_EVP_MD_CTX_cleanup($ctx)|0);
  STACKTOP = sp;return ($ret$07|0);
 }
 $30 = (_PKCS1_MGF1($28,$26,$27,$1,$Hash$mgf1Hash)|0);
 $31 = ($30|0)<(0);
 do {
  if ($31) {
   $ret$0$ph = 0;
  } else {
   $32 = ($25|0)>(1);
   if ($32) {
    $i$013 = 0;
    while(1) {
     $33 = (($$01) + ($i$013)|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = (($28) + ($i$013)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36 ^ $34;
     HEAP8[$35>>0] = $37;
     $38 = (($i$013) + 1)|0;
     $39 = ($38|0)<($26|0);
     if ($39) {
      $i$013 = $38;
     } else {
      break;
     }
    }
   }
   if (!($15)) {
    $40 = (8 - ($8))|0;
    $41 = 255 >>> $40;
    $42 = HEAP8[$28>>0]|0;
    $43 = $42&255;
    $44 = $43 & $41;
    $45 = $44&255;
    HEAP8[$28>>0] = $45;
   }
   $46 = (($25) + -2)|0;
   $i$1 = 0;
   while(1) {
    $47 = (($28) + ($i$1)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = ($48<<24>>24)==(0);
    $50 = ($i$1|0)<($46|0);
    $or$cond = $50 & $49;
    $51 = (($i$1) + 1)|0;
    if ($or$cond) {
     $i$1 = $51;
    } else {
     $$lcssa = $48;$$lcssa18 = $51;
     break;
    }
   }
   $52 = ($$lcssa<<24>>24)==(1);
   if (!($52)) {
    _ERR_put_error(4,149,135,91045,148);
    $ret$0$ph = 0;
    break;
   }
   $53 = ($$02|0)<(0);
   $54 = (($26) - ($$lcssa18))|0;
   $55 = ($54|0)==($$02|0);
   $or$cond5 = $53 | $55;
   if (!($or$cond5)) {
    _ERR_put_error(4,149,136,91045,152);
    $ret$0$ph = 0;
    break;
   }
   $56 = (_EVP_DigestInit_ex($ctx,$Hash,0)|0);
   $57 = ($56|0)==(0);
   if ($57) {
    $ret$0$ph = 0;
   } else {
    $58 = (_EVP_DigestUpdate($ctx,91055,8)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     $ret$0$ph = 0;
    } else {
     $60 = (_EVP_DigestUpdate($ctx,$mHash,$1)|0);
     $61 = ($60|0)==(0);
     if ($61) {
      $ret$0$ph = 0;
     } else {
      $62 = ($26|0)==($$lcssa18|0);
      if (!($62)) {
       $63 = (($28) + ($$lcssa18)|0);
       $64 = (_EVP_DigestUpdate($ctx,$63,$54)|0);
       $65 = ($64|0)==(0);
       if ($65) {
        $ret$0$ph = 0;
        break;
       }
      }
      $66 = (_EVP_DigestFinal_ex($ctx,$H_,0)|0);
      $67 = ($66|0)==(0);
      if ($67) {
       $ret$0$ph = 0;
      } else {
       $68 = (_memcmp($H_,$27,$1)|0);
       $69 = ($68|0)==(0);
       if ($69) {
        $ret$0$ph = 1;
       } else {
        _ERR_put_error(4,149,104,91045,166);
        $ret$0$ph = 0;
       }
      }
     }
    }
   }
  }
 } while(0);
 _CRYPTO_free($28);
 $ret$07 = $ret$0$ph;
 (_EVP_MD_CTX_cleanup($ctx)|0);
 STACKTOP = sp;return ($ret$07|0);
}
function _RSA_padding_add_PKCS1_PSS_mgf1($rsa,$EM,$mHash,$Hash,$mgf1Hash,$sLen) {
 $rsa = $rsa|0;
 $EM = $EM|0;
 $mHash = $mHash|0;
 $Hash = $Hash|0;
 $mgf1Hash = $mgf1Hash|0;
 $sLen = $sLen|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $Hash$mgf1Hash = 0, $ctx = 0, $emLen$0 = 0, $exitcond = 0, $i$07 = 0, $p$08 = 0, $ret$0 = 0, $ret$03 = 0, $ret$05 = 0, $salt$0 = 0, $salt$16 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ctx = sp;
 $0 = ($mgf1Hash|0)==(0|0);
 $Hash$mgf1Hash = $0 ? $Hash : $mgf1Hash;
 $1 = (_EVP_MD_size($Hash)|0);
 $2 = ($1|0)<(0);
 if ($2) {
  $ret$03 = 0;
  STACKTOP = sp;return ($ret$03|0);
 }
 switch ($sLen|0) {
 case -1:  {
  $$02 = $1;
  break;
 }
 case -2:  {
  $$02 = -2;
  break;
 }
 default: {
  $3 = ($sLen|0)<(-2);
  if ($3) {
   _ERR_put_error(4,148,136,91045,215);
   $ret$03 = 0;
   STACKTOP = sp;return ($ret$03|0);
  } else {
   $$02 = $sLen;
  }
 }
 }
 $4 = ((($rsa)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_BN_num_bits($5)|0);
 $7 = (($6) + 7)|0;
 $8 = $7 & 7;
 $9 = (_RSA_size($rsa)|0);
 $10 = ($8|0)==(0);
 if ($10) {
  $11 = ((($EM)) + 1|0);
  HEAP8[$EM>>0] = 0;
  $12 = (($9) + -1)|0;
  $$0 = $11;$emLen$0 = $12;
 } else {
  $$0 = $EM;$emLen$0 = $9;
 }
 $13 = ($$02|0)==(-2);
 if ($13) {
  $14 = (-2 - ($1))|0;
  $15 = (($14) + ($emLen$0))|0;
  $$1 = $15;
 } else {
  $16 = (($1) + 2)|0;
  $17 = (($16) + ($$02))|0;
  $18 = ($emLen$0|0)<($17|0);
  if ($18) {
   _ERR_put_error(4,148,110,91045,229);
   $ret$03 = 0;
   STACKTOP = sp;return ($ret$03|0);
  } else {
   $$1 = $$02;
  }
 }
 $19 = ($$1|0)>(0);
 do {
  if ($19) {
   $20 = (_CRYPTO_malloc($$1,91045,233)|0);
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    $22 = (_RAND_bytes($20,$$1)|0);
    $23 = ($22|0)<(1);
    if ($23) {
     $ret$05 = 0;$salt$16 = $20;
     break;
    } else {
     $salt$0 = $20;
     label = 16;
     break;
    }
   }
   _ERR_put_error(4,148,65,91045,236);
   $ret$03 = 0;
   STACKTOP = sp;return ($ret$03|0);
  } else {
   $salt$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $24 = (($emLen$0) - ($1))|0;
  $25 = (($24) + -1)|0;
  $26 = (($$0) + ($25)|0);
  _EVP_MD_CTX_init($ctx);
  $27 = (_EVP_DigestInit_ex($ctx,$Hash,0)|0);
  $28 = ($27|0)==(0);
  do {
   if ($28) {
    $ret$0 = 0;
   } else {
    $29 = (_EVP_DigestUpdate($ctx,91055,8)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     $ret$0 = 0;
    } else {
     $31 = (_EVP_DigestUpdate($ctx,$mHash,$1)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      $ret$0 = 0;
     } else {
      $33 = ($$1|0)==(0);
      if (!($33)) {
       $34 = (_EVP_DigestUpdate($ctx,$salt$0,$$1)|0);
       $35 = ($34|0)==(0);
       if ($35) {
        $ret$0 = 0;
        break;
       }
      }
      $36 = (_EVP_DigestFinal_ex($ctx,$26,0)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       $ret$0 = 0;
      } else {
       (_EVP_MD_CTX_cleanup($ctx)|0);
       $38 = (_PKCS1_MGF1($$0,$25,$26,$1,$Hash$mgf1Hash)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        $40 = (($emLen$0) - ($$1))|0;
        $41 = (($40) - ($1))|0;
        $42 = (($41) + -2)|0;
        $43 = (($$0) + ($42)|0);
        $44 = HEAP8[$43>>0]|0;
        $45 = $44&255;
        $46 = $45 ^ 1;
        $47 = $46&255;
        HEAP8[$43>>0] = $47;
        if ($19) {
         $$sum = (($41) + -1)|0;
         $48 = (($$0) + ($$sum)|0);
         $i$07 = 0;$p$08 = $48;
         while(1) {
          $49 = (($salt$0) + ($i$07)|0);
          $50 = HEAP8[$49>>0]|0;
          $51 = ((($p$08)) + 1|0);
          $52 = HEAP8[$p$08>>0]|0;
          $53 = $52 ^ $50;
          HEAP8[$p$08>>0] = $53;
          $54 = (($i$07) + 1)|0;
          $exitcond = ($54|0)==($$1|0);
          if ($exitcond) {
           break;
          } else {
           $i$07 = $54;$p$08 = $51;
          }
         }
        }
        if (!($10)) {
         $55 = (8 - ($8))|0;
         $56 = 255 >>> $55;
         $57 = HEAP8[$$0>>0]|0;
         $58 = $57&255;
         $59 = $58 & $56;
         $60 = $59&255;
         HEAP8[$$0>>0] = $60;
        }
        $61 = (($emLen$0) + -1)|0;
        $62 = (($$0) + ($61)|0);
        HEAP8[$62>>0] = -68;
        $ret$0 = 1;
       } else {
        $ret$0 = 0;
       }
      }
     }
    }
   }
  } while(0);
  $63 = ($salt$0|0)==(0|0);
  if ($63) {
   $ret$03 = $ret$0;
   STACKTOP = sp;return ($ret$03|0);
  } else {
   $ret$05 = $ret$0;$salt$16 = $salt$0;
  }
 }
 _CRYPTO_free($salt$16);
 $ret$03 = $ret$05;
 STACKTOP = sp;return ($ret$03|0);
}
function _RSA_sign_ASN1_OCTET_STRING($type,$m,$m_len,$sigret,$siglen,$rsa) {
 $type = $type|0;
 $m = $m|0;
 $m_len = $m_len|0;
 $sigret = $sigret|0;
 $siglen = $siglen|0;
 $rsa = $rsa|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $ret$0 = 0, $sig = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $sig = sp + 8|0;
 $p = sp;
 $0 = ((($sig)) + 4|0);
 HEAP32[$0>>2] = 4;
 HEAP32[$sig>>2] = $m_len;
 $1 = ((($sig)) + 8|0);
 HEAP32[$1>>2] = $m;
 $2 = (_i2d_ASN1_OCTET_STRING($sig,0)|0);
 $3 = (_RSA_size($rsa)|0);
 $4 = (($3) + -11)|0;
 $5 = ($2|0)>($4|0);
 if ($5) {
  _ERR_put_error(4,118,112,91063,83);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($3) + 1)|0;
 $7 = (_CRYPTO_malloc($6,91063,86)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  _ERR_put_error(4,118,65,91063,88);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$p>>2] = $7;
 (_i2d_ASN1_OCTET_STRING($sig,$p)|0);
 $9 = (_RSA_private_encrypt($2,$7,$sigret,$rsa,1)|0);
 $10 = ($9|0)<(1);
 if ($10) {
  $ret$0 = 0;
 } else {
  HEAP32[$siglen>>2] = $9;
  $ret$0 = 1;
 }
 _OPENSSL_cleanse($7,$6);
 _CRYPTO_free($7);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_sign($type,$m,$m_len,$sigret,$siglen,$rsa) {
 $type = $type|0;
 $m = $m|0;
 $m_len = $m_len|0;
 $sigret = $sigret|0;
 $siglen = $siglen|0;
 $rsa = $rsa|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $algor = 0, $digest = 0, $i$0 = 0, $p = 0, $parameter = 0, $ret$0 = 0;
 var $s$0 = 0, $s$1 = 0, $sig = 0, $tmps$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $sig = sp + 40|0;
 $parameter = sp + 32|0;
 $p = sp + 24|0;
 $algor = sp + 16|0;
 $digest = sp;
 $0 = ((($rsa)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($rsa)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = (FUNCTION_TABLE_iiiiiii[$7 & 31]($type,$m,$m_len,$sigret,$siglen,$rsa)|0);
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = ($type|0)==(114);
 do {
  if ($10) {
   $11 = ($m_len|0)==(36);
   if ($11) {
    $i$0 = 36;$s$0 = $m;
   } else {
    _ERR_put_error(4,117,131,91074,93);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   HEAP32[$sig>>2] = $algor;
   $12 = (_OBJ_nid2obj($type)|0);
   $13 = HEAP32[$sig>>2]|0;
   HEAP32[$13>>2] = $12;
   $14 = ($12|0)==(0|0);
   if ($14) {
    _ERR_put_error(4,117,117,91074,102);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $15 = ((($12)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if (!($17)) {
    HEAP32[$parameter>>2] = 5;
    $18 = ((($parameter)) + 4|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($13)) + 4|0);
    HEAP32[$19>>2] = $parameter;
    $20 = ((($sig)) + 4|0);
    HEAP32[$20>>2] = $digest;
    $21 = ((($digest)) + 8|0);
    HEAP32[$21>>2] = $m;
    HEAP32[$digest>>2] = $m_len;
    $22 = (_i2d_X509_SIG($sig,0)|0);
    $i$0 = $22;$s$0 = 0;
    break;
   }
   _ERR_put_error(4,117,116,91074,107);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $23 = (_RSA_size($rsa)|0);
 $24 = (($23) + -11)|0;
 $25 = ($i$0|0)>($24|0);
 if ($25) {
  _ERR_put_error(4,117,112,91074,122);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = ($type|0)!=(114);
 do {
  if ($26) {
   $27 = (($23) + 1)|0;
   $28 = (_CRYPTO_malloc($27,91074,126)|0);
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    HEAP32[$p>>2] = $28;
    (_i2d_X509_SIG($sig,$p)|0);
    $s$1 = $28;$tmps$0 = $28;
    break;
   }
   _ERR_put_error(4,117,65,91074,128);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $s$1 = $s$0;$tmps$0 = 0;
  }
 } while(0);
 $30 = (_RSA_private_encrypt($i$0,$s$1,$sigret,$rsa,1)|0);
 $31 = ($30|0)<(1);
 if ($31) {
  $ret$0 = 0;
 } else {
  HEAP32[$siglen>>2] = $30;
  $ret$0 = 1;
 }
 if (!($26)) {
  $$0 = $ret$0;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = (($23) + 1)|0;
 _OPENSSL_cleanse($tmps$0,$32);
 _CRYPTO_free($tmps$0);
 $$0 = $ret$0;
 STACKTOP = sp;return ($$0|0);
}
function _int_rsa_verify($dtype,$m,$m_len,$rm,$prm_len,$sigbuf,$siglen,$rsa) {
 $dtype = $dtype|0;
 $m = $m|0;
 $m_len = $m_len|0;
 $rm = $rm|0;
 $prm_len = $prm_len|0;
 $sigbuf = $sigbuf|0;
 $siglen = $siglen|0;
 $rsa = $rsa|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre17 = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $der$i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p = 0, $phitmp = 0;
 var $ret$010 = 0, $ret$0614 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $der$i = sp + 4|0;
 $p = sp;
 $0 = (_RSA_size($rsa)|0);
 $1 = ($0|0)==($siglen|0);
 if (!($1)) {
  _ERR_put_error(4,145,119,91074,186);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($dtype|0)==(114);
 $3 = ($rm|0)!=(0|0);
 $or$cond = $2 & $3;
 if ($or$cond) {
  $4 = (_RSA_public_decrypt($siglen,$sigbuf,$rm,$rsa,1)|0);
  $5 = ($4|0)<(1);
  if ($5) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$prm_len>>2] = $4;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_CRYPTO_malloc($siglen,91074,199)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _ERR_put_error(4,145,65,91074,201);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($m_len|0)!=(36);
 $or$cond3 = $2 & $8;
 do {
  if ($or$cond3) {
   _ERR_put_error(4,145,131,91074,205);
   $ret$0614 = 0;
  } else {
   $9 = (_RSA_public_decrypt($siglen,$sigbuf,$6,$rsa,1)|0);
   $10 = ($9|0)<(1);
   if ($10) {
    $ret$0614 = 0;
   } else {
    $11 = ($dtype|0)==(95);
    $12 = ($9|0)==(18);
    $or$cond5 = $11 & $12;
    if ($or$cond5) {
     $13 = HEAP8[$6>>0]|0;
     $14 = ($13<<24>>24)==(4);
     if ($14) {
      $15 = ((($6)) + 1|0);
      $16 = HEAP8[$15>>0]|0;
      $17 = ($16<<24>>24)==(16);
      if ($17) {
       $18 = ((($6)) + 2|0);
       if ($3) {
        dest=$rm; src=$18; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        HEAP32[$prm_len>>2] = 16;
        $ret$0614 = 1;
        break;
       }
       $19 = (_memcmp($m,$18,16)|0);
       $20 = ($19|0)==(0);
       if ($20) {
        $ret$0614 = 1;
        break;
       }
       _ERR_put_error(4,145,104,91074,222);
       $ret$0614 = 0;
       break;
      }
     }
    }
    if ($2) {
     $21 = ($9|0)==(36);
     if ($21) {
      $22 = (_memcmp($6,$m,36)|0);
      $23 = ($22|0)==(0);
      if ($23) {
       $ret$0614 = 1;
       break;
      }
     }
     _ERR_put_error(4,145,104,91074,229);
     $ret$0614 = 0;
     break;
    }
    HEAP32[$p>>2] = $6;
    $24 = (_d2i_X509_SIG(0,$p,$9)|0);
    $25 = ($24|0)==(0|0);
    if ($25) {
     $ret$0614 = 0;
    } else {
     $26 = HEAP32[$p>>2]|0;
     $27 = (($6) + ($9)|0);
     $28 = ($26|0)==($27|0);
     L36: do {
      if ($28) {
       HEAP32[$der$i>>2] = 0;
       $29 = (_i2d_X509_SIG($24,$der$i)|0);
       $30 = ($29|0)<(1);
       if ($30) {
        label = 43;
        break;
       }
       $31 = ($29|0)==($9|0);
       $32 = HEAP32[$der$i>>2]|0;
       if ($31) {
        $33 = (_memcmp($6,$32,$9)|0);
        $phitmp = ($33|0)==(0);
        _OPENSSL_cleanse($32,$9);
        $34 = HEAP32[$der$i>>2]|0;
        _CRYPTO_free($34);
        if ($phitmp) {
         $35 = HEAP32[$24>>2]|0;
         $36 = ((($35)) + 4|0);
         $37 = HEAP32[$36>>2]|0;
         $38 = ($37|0)==(0|0);
         do {
          if ($38) {
           $42 = $35;
          } else {
           $39 = (_ASN1_TYPE_get($37)|0);
           $40 = ($39|0)==(5);
           if ($40) {
            $$pre = HEAP32[$24>>2]|0;
            $42 = $$pre;
            break;
           } else {
            _ERR_put_error(4,145,104,91074,251);
            $ret$010 = 0;
            break L36;
           }
          }
         } while(0);
         $41 = HEAP32[$42>>2]|0;
         $43 = (_OBJ_obj2nid($41)|0);
         $44 = ($43|0)==($dtype|0);
         if (!($44)) {
          _ERR_put_error(4,145,100,91074,263);
          $ret$010 = 0;
          break;
         }
         if (!($3)) {
          $59 = ((($24)) + 4|0);
          $60 = HEAP32[$59>>2]|0;
          $61 = HEAP32[$60>>2]|0;
          $62 = ($61|0)==($m_len|0);
          if ($62) {
           $63 = ((($60)) + 8|0);
           $64 = HEAP32[$63>>2]|0;
           $65 = (_memcmp($m,$64,$m_len)|0);
           $66 = ($65|0)==(0);
           if ($66) {
            $ret$010 = 1;
            break;
           }
          }
          _ERR_put_error(4,145,104,91074,278);
          $ret$010 = 0;
          break;
         }
         $45 = (_OBJ_nid2sn($dtype)|0);
         $46 = (_EVP_get_digestbyname($45)|0);
         $47 = ($46|0)==(0|0);
         do {
          if ($47) {
           $$phi$trans$insert = ((($24)) + 4|0);
           $$pre17 = HEAP32[$$phi$trans$insert>>2]|0;
           $$pre19 = HEAP32[$$pre17>>2]|0;
           $$pre$phiZ2D = $$phi$trans$insert;$54 = $$pre17;$56 = $$pre19;
          } else {
           $48 = (_EVP_MD_size($46)|0);
           $49 = ((($24)) + 4|0);
           $50 = HEAP32[$49>>2]|0;
           $51 = HEAP32[$50>>2]|0;
           $52 = ($48|0)==($51|0);
           if ($52) {
            $$pre$phiZ2D = $49;$54 = $50;$56 = $48;
            break;
           }
           _ERR_put_error(4,145,143,91074,270);
           $ret$010 = 0;
           break L36;
          }
         } while(0);
         $53 = ((($54)) + 8|0);
         $55 = HEAP32[$53>>2]|0;
         _memcpy(($rm|0),($55|0),($56|0))|0;
         $57 = HEAP32[$$pre$phiZ2D>>2]|0;
         $58 = HEAP32[$57>>2]|0;
         HEAP32[$prm_len>>2] = $58;
         $ret$010 = 1;
         break;
        }
       } else {
        _OPENSSL_cleanse($32,$29);
        $67 = HEAP32[$der$i>>2]|0;
        _CRYPTO_free($67);
       }
       _ERR_put_error(4,145,104,91074,241);
       $ret$010 = 0;
      } else {
       label = 43;
      }
     } while(0);
     if ((label|0) == 43) {
      _ERR_put_error(4,145,104,91074,241);
      $ret$010 = 0;
     }
     _X509_SIG_free($24);
     $ret$0614 = $ret$010;
    }
   }
  }
 } while(0);
 _OPENSSL_cleanse($6,$siglen);
 _CRYPTO_free($6);
 $$0 = $ret$0614;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_verify($dtype,$m,$m_len,$sigbuf,$siglen,$rsa) {
 $dtype = $dtype|0;
 $m = $m|0;
 $m_len = $m_len|0;
 $sigbuf = $sigbuf|0;
 $siglen = $siglen|0;
 $rsa = $rsa|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rsa)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($rsa)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 48|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = (FUNCTION_TABLE_iiiiiii[$7 & 31]($dtype,$m,$m_len,$sigbuf,$siglen,$rsa)|0);
   $$0 = $9;
   return ($$0|0);
  }
 }
 $10 = (_int_rsa_verify($dtype,$m,$m_len,0,0,$sigbuf,$siglen,$rsa)|0);
 $$0 = $10;
 return ($$0|0);
}
function _RSA_padding_add_SSLv23($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $p$0$lcssa = 0, $p$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($tlen) + -11)|0;
 $1 = ($0|0)<($flen|0);
 if ($1) {
  _ERR_put_error(4,110,110,91085,73);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($to)) + 1|0);
 HEAP8[$to>>0] = 0;
 $3 = ((($to)) + 2|0);
 HEAP8[$2>>0] = 2;
 $4 = (($0) - ($flen))|0;
 $5 = (_RAND_bytes($3,$4)|0);
 $6 = ($5|0)<(1);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($4|0)>(0);
 L8: do {
  if ($7) {
   $i$04 = 0;$p$05 = $3;
   L9: while(1) {
    $8 = HEAP8[$p$05>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     while(1) {
      $10 = (_RAND_bytes($p$05,1)|0);
      $11 = ($10|0)<(1);
      if ($11) {
       $$0 = 0;
       break L9;
      }
      $12 = HEAP8[$p$05>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if (!($13)) {
       break;
      }
     }
    }
    $14 = ((($p$05)) + 1|0);
    $15 = (($i$04) + 1)|0;
    $16 = ($15|0)<($4|0);
    if ($16) {
     $i$04 = $15;$p$05 = $14;
    } else {
     $p$0$lcssa = $14;
     break L8;
    }
   }
   return ($$0|0);
  } else {
   $p$0$lcssa = $3;
  }
 } while(0);
 $17 = $p$0$lcssa;
 $18 = $17;
 HEAP8[$18>>0]=50529027&255;HEAP8[$18+1>>0]=(50529027>>8)&255;HEAP8[$18+2>>0]=(50529027>>16)&255;HEAP8[$18+3>>0]=50529027>>24;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP8[$20>>0]=50529027&255;HEAP8[$20+1>>0]=(50529027>>8)&255;HEAP8[$20+2>>0]=(50529027>>16)&255;HEAP8[$20+3>>0]=50529027>>24;
 $21 = ((($p$0$lcssa)) + 8|0);
 $22 = ((($p$0$lcssa)) + 9|0);
 HEAP8[$21>>0] = 0;
 _memcpy(($22|0),($from|0),($flen|0))|0;
 $$0 = 1;
 return ($$0|0);
}
function _RSA_padding_check_SSLv23($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa24 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $39$phi = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$04 = 0, $or$cond = 0, $p$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($flen|0)<(10);
 if ($0) {
  _ERR_put_error(4,114,111,91085,112);
  $$0 = -1;
  return ($$0|0);
 }
 $1 = (($flen) + 1)|0;
 $2 = ($1|0)==($num|0);
 if ($2) {
  $3 = HEAP8[$from>>0]|0;
  $4 = ($3<<24>>24)==(2);
  if ($4) {
   $5 = ((($from)) + 1|0);
   $6 = (($flen) + -1)|0;
   $39 = $from;$i$04 = 0;$p$05 = $5;
   while(1) {
    $7 = ((($p$05)) + 1|0);
    $8 = HEAP8[$p$05>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$lcssa = $39;$$lcssa24 = $7;$i$0$lcssa = $i$04;
     break;
    }
    $10 = (($i$04) + 1)|0;
    $11 = ($10|0)<($6|0);
    if ($11) {
     $39$phi = $p$05;$i$04 = $10;$p$05 = $7;$39 = $39$phi;
    } else {
     $$lcssa = $39;$$lcssa24 = $7;$i$0$lcssa = $10;
     break;
    }
   }
   $12 = ($i$0$lcssa|0)==($6|0);
   $13 = ($i$0$lcssa|0)<(8);
   $or$cond = $12 | $13;
   if ($or$cond) {
    _ERR_put_error(4,114,113,91085,128);
    $$0 = -1;
    return ($$0|0);
   }
   $14 = ((($$lcssa)) + -7|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(3);
   if ($16) {
    $17 = ((($$lcssa)) + -6|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(3);
    if ($19) {
     $22 = ((($$lcssa)) + -5|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = ($23<<24>>24)==(3);
     if ($24) {
      $25 = ((($$lcssa)) + -4|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = ($26<<24>>24)==(3);
      if ($27) {
       $28 = ((($$lcssa)) + -3|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = ($29<<24>>24)==(3);
       if ($30) {
        $31 = ((($$lcssa)) + -2|0);
        $32 = HEAP8[$31>>0]|0;
        $33 = ($32<<24>>24)==(3);
        if ($33) {
         $34 = ((($$lcssa)) + -1|0);
         $35 = HEAP8[$34>>0]|0;
         $36 = ($35<<24>>24)==(3);
         if ($36) {
          $37 = HEAP8[$$lcssa>>0]|0;
          $38 = ($37<<24>>24)==(3);
          if ($38) {
           _ERR_put_error(4,114,115,91085,136);
           $$0 = -1;
           return ($$0|0);
          }
         }
        }
       }
      }
     }
    }
   }
   $$neg = (($flen) + -2)|0;
   $20 = (($$neg) - ($i$0$lcssa))|0;
   $21 = ($20|0)>($tlen|0);
   if ($21) {
    _ERR_put_error(4,114,109,91085,143);
    $$0 = -1;
    return ($$0|0);
   } else {
    _memcpy(($to|0),($$lcssa24|0),($20|0))|0;
    $$0 = $20;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(4,114,107,91085,116);
 $$0 = -1;
 return ($$0|0);
}
function _RSA_padding_add_X931($to,$tlen,$from,$flen) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$1 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($tlen) - ($flen))|0;
 $1 = (($0) + -2)|0;
 $2 = ($0|0)<(2);
 if ($2) {
  _ERR_put_error(4,127,110,91095,81);
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ($1|0)==(0);
 $4 = ((($to)) + 1|0);
 if ($3) {
  HEAP8[$to>>0] = 106;
  $11 = $to;$p$1 = $4;
 } else {
  HEAP8[$to>>0] = 107;
  $5 = ($1|0)>(1);
  if ($5) {
   $6 = (($0) + -3)|0;
   _memset(($4|0),-69,($6|0))|0;
   $7 = (($to) + ($1)|0);
   $phitmp = (($0) + -1)|0;
   $9 = $phitmp;$p$0 = $7;
  } else {
   $9 = 2;$p$0 = $4;
  }
  $8 = (($to) + ($9)|0);
  HEAP8[$p$0>>0] = -70;
  $11 = $p$0;$p$1 = $8;
 }
 _memcpy(($p$1|0),($from|0),($flen|0))|0;
 $$sum = (($flen) + 1)|0;
 $10 = (($11) + ($$sum)|0);
 HEAP8[$10>>0] = -52;
 $$0 = 1;
 return ($$0|0);
}
function _RSA_padding_check_X931($to,$tlen,$from,$flen,$num) {
 $to = $to|0;
 $tlen = $tlen|0;
 $from = $from|0;
 $flen = $flen|0;
 $num = $num|0;
 var $$0 = 0, $$lcssa18 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$0$lcssa = 0, $i$02 = 0, $j$0 = 0, $p$03 = 0, $p$03$lcssa17 = 0, $p$2 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)==($flen|0);
 if ($0) {
  $1 = HEAP8[$from>>0]|0;
  $2 = $1 & -2;
  $switch = ($2<<24>>24)==(106);
  if ($switch) {
   $3 = ((($from)) + 1|0);
   $4 = ($1<<24>>24)==(107);
   L4: do {
    if ($4) {
     $5 = (($num) + -3)|0;
     $6 = ($num|0)>(3);
     do {
      if ($6) {
       $i$02 = 0;$p$03 = $3;
       L7: while(1) {
        $7 = ((($p$03)) + 1|0);
        $8 = HEAP8[$p$03>>0]|0;
        switch ($8<<24>>24) {
        case -70:  {
         $$lcssa18 = $7;$i$0$lcssa = $i$02;$p$03$lcssa17 = $p$03;
         label = 9;
         break L7;
         break;
        }
        case -69:  {
         break;
        }
        default: {
         break L7;
        }
        }
        $9 = (($i$02) + 1)|0;
        $10 = ($5|0)>($9|0);
        if ($10) {
         $i$02 = $9;$p$03 = $7;
        } else {
         $$lcssa18 = $7;$i$0$lcssa = $9;$p$03$lcssa17 = $p$03;
         label = 9;
         break;
        }
       }
       if ((label|0) == 9) {
        $11 = (($5) - ($i$0$lcssa))|0;
        $12 = ($i$0$lcssa|0)==(0);
        if ($12) {
         break;
        } else {
         $15 = $p$03$lcssa17;$j$0 = $11;$p$2 = $$lcssa18;
         break L4;
        }
       }
       _ERR_put_error(4,128,138,91095,123);
       $$0 = -1;
       return ($$0|0);
      }
     } while(0);
     _ERR_put_error(4,128,138,91095,131);
     $$0 = -1;
     return ($$0|0);
    } else {
     $13 = (($num) + -2)|0;
     $15 = $from;$j$0 = $13;$p$2 = $3;
    }
   } while(0);
   $$sum = (($j$0) + 1)|0;
   $14 = (($15) + ($$sum)|0);
   $16 = HEAP8[$14>>0]|0;
   $17 = ($16<<24>>24)==(-52);
   if ($17) {
    _memcpy(($to|0),($p$2|0),($j$0|0))|0;
    $$0 = $j$0;
    return ($$0|0);
   } else {
    _ERR_put_error(4,128,139,91095,139);
    $$0 = -1;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(4,128,137,91095,112);
 $$0 = -1;
 return ($$0|0);
}
function _RSA_X931_hash_id($nid) {
 $nid = $nid|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($nid|0) {
 case 64:  {
  $$0 = 51;
  break;
 }
 case 672:  {
  $$0 = 52;
  break;
 }
 case 673:  {
  $$0 = 54;
  break;
 }
 case 674:  {
  $$0 = 53;
  break;
 }
 default: {
  $$0 = -1;
 }
 }
 return ($$0|0);
}
function _rsasignjs_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _randombytes_stir(); //@line 10 "rsasign.c"
 return; //@line 11 "rsasign.c"
}
function _rsasignjs_public_key_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 300; //@line 14 "rsasign.c"
}
function _rsasignjs_secret_key_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1200; //@line 18 "rsasign.c"
}
function _rsasignjs_signature_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 512; //@line 22 "rsasign.c"
}
function _rsasignjs_keypair($public_key,$public_key_len,$private_key,$private_key_len) {
 $public_key = $public_key|0;
 $public_key_len = $public_key_len|0;
 $private_key = $private_key|0;
 $private_key_len = $private_key_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $prime = 0, $rsa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $public_key;
 $2 = $public_key_len;
 $3 = $private_key;
 $4 = $private_key_len;
 $5 = (_BN_new()|0); //@line 31 "rsasign.c"
 $prime = $5; //@line 31 "rsasign.c"
 $6 = (_RSA_new()|0); //@line 32 "rsasign.c"
 $rsa = $6; //@line 32 "rsasign.c"
 $7 = $prime; //@line 34 "rsasign.c"
 (_BN_add_word($7,65537)|0); //@line 34 "rsasign.c"
 $8 = $rsa; //@line 36 "rsasign.c"
 $9 = $prime; //@line 36 "rsasign.c"
 $10 = (_RSA_generate_key_ex($8,2048,$9,0)|0); //@line 36 "rsasign.c"
 $11 = ($10|0)!=(1); //@line 36 "rsasign.c"
 if ($11) {
  $0 = 1; //@line 37 "rsasign.c"
  $22 = $0; //@line 47 "rsasign.c"
  STACKTOP = sp;return ($22|0); //@line 47 "rsasign.c"
 } else {
  $12 = $rsa; //@line 40 "rsasign.c"
  $13 = $1; //@line 40 "rsasign.c"
  $14 = (_i2d_RSA_PUBKEY($12,$13)|0); //@line 40 "rsasign.c"
  $15 = $2; //@line 40 "rsasign.c"
  HEAP32[$15>>2] = $14; //@line 40 "rsasign.c"
  $16 = $rsa; //@line 41 "rsasign.c"
  $17 = $3; //@line 41 "rsasign.c"
  $18 = (_i2d_RSAPrivateKey($16,$17)|0); //@line 41 "rsasign.c"
  $19 = $4; //@line 41 "rsasign.c"
  HEAP32[$19>>2] = $18; //@line 41 "rsasign.c"
  $20 = $rsa; //@line 43 "rsasign.c"
  _RSA_free($20); //@line 43 "rsasign.c"
  $21 = $prime; //@line 44 "rsasign.c"
  _BN_free($21); //@line 44 "rsasign.c"
  $0 = 0; //@line 46 "rsasign.c"
  $22 = $0; //@line 47 "rsasign.c"
  STACKTOP = sp;return ($22|0); //@line 47 "rsasign.c"
 }
 return (0)|0;
}
function _rsasignjs_sign($signature,$message,$message_len,$private_key) {
 $signature = $signature|0;
 $message = $message|0;
 $message_len = $message_len|0;
 $private_key = $private_key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $signature;
 $1 = $message;
 $2 = $message_len;
 $3 = $private_key;
 STACKTOP = sp;return 0; //@line 55 "rsasign.c"
}
function _rsasignjs_verify($signature,$message,$message_len,$public_key) {
 $signature = $signature|0;
 $message = $message|0;
 $message_len = $message_len|0;
 $public_key = $public_key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $signature;
 $1 = $message;
 $2 = $message_len;
 $3 = $public_key;
 STACKTOP = sp;return 1; //@line 64 "rsasign.c"
}
function _RAND_seed($buf,$num) {
 $buf = $buf|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $buf;
 $1 = $num;
 _randombytes_stir(); //@line 69 "rsasign.c"
 STACKTOP = sp;return; //@line 70 "rsasign.c"
}
function _RAND_bytes($buf,$num) {
 $buf = $buf|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $buf;
 $1 = $num;
 $2 = $0; //@line 72 "rsasign.c"
 $3 = $1; //@line 72 "rsasign.c"
 _randombytes_buf($2,$3); //@line 72 "rsasign.c"
 STACKTOP = sp;return 1; //@line 73 "rsasign.c"
}
function _RAND_add($buf,$num,$entropy) {
 $buf = $buf|0;
 $num = $num|0;
 $entropy = +$entropy;
 var $0 = 0, $1 = 0, $2 = +0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $buf;
 $1 = $num;
 $2 = $entropy;
 _randombytes_stir(); //@line 77 "rsasign.c"
 STACKTOP = sp;return; //@line 78 "rsasign.c"
}
function _RAND_pseudo_bytes($buf,$num) {
 $buf = $buf|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $buf;
 $1 = $num;
 $2 = $0; //@line 80 "rsasign.c"
 $3 = $1; //@line 80 "rsasign.c"
 _randombytes_buf($2,$3); //@line 80 "rsasign.c"
 STACKTOP = sp;return 1; //@line 81 "rsasign.c"
}
function _RAND_status() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1; //@line 84 "rsasign.c"
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[53092>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 53140;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (91106 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 91194;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 91194;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 91194;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = +0, $$01 = +0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = +0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = +0, $7 = +0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != +0;
  if ($5) {
   $6 = $x * +1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = +0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _htonl($n) {
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_bswap_i32(($n|0))|0);
 return ($0|0);
}
function _htons($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[53092>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((47|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $8 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $8 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $8;
   $9 = $6;
   $10 = (($7) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 63]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $32 = ($33|0)==(0);
  if (!($32)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i30 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$lcssa = 0, $$lcssa57 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i20 = 0, $$pre$i5 = 0, $$pre$i8 = 0, $$pre1$i = 0, $$pre1$i12 = 0, $$pre1$i27$pre = 0, $$pre1$i6 = 0, $$pre1$i9 = 0, $$sum = 0, $$sum2 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $8$phi = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$036 = 0;
 var $head$1$be = 0, $head$153 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond48 = 0, $or$cond4852 = 0, $or$cond51 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$037 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$254 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $lp = sp + 8|0;
 $p = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = $p;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ($0|0)==(0);
 if (!($5)) {
  $$sum = (($0) - ($width))|0;
  $6 = ((($lp)) + 4|0);
  HEAP32[$6>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $10 = $width;$8 = $width;$i$0 = 2;
  while(1) {
   $7 = (($8) + ($width))|0;
   $9 = (($7) + ($10))|0;
   $11 = (($lp) + ($i$0<<2)|0);
   HEAP32[$11>>2] = $9;
   $12 = ($9>>>0)<($0>>>0);
   $13 = (($i$0) + 1)|0;
   if ($12) {
    $8$phi = $10;$10 = $9;$i$0 = $13;$8 = $8$phi;
   } else {
    break;
   }
  }
  $14 = (0 - ($width))|0;
  $15 = (($base) + ($$sum)|0);
  $16 = ($$sum|0)>(0);
  $$phi$trans$insert$i = ((($p)) + 4|0);
  if ($16) {
   $17 = $15;
   $19 = 1;$head$036 = $base;$pshift$037 = 1;
   while(1) {
    $18 = $19 & 3;
    $20 = ($18|0)==(3);
    do {
     if ($20) {
      _sift($head$036,$width,$cmp,$pshift$037,$lp);
      $$pre$i = HEAP32[$p>>2]|0;
      $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $21 = $$pre$i >>> 2;
      $22 = $$pre1$i << 30;
      $23 = $22 | $21;
      HEAP32[$p>>2] = $23;
      $24 = $$pre1$i >>> 2;
      HEAP32[$$phi$trans$insert$i>>2] = $24;
      $25 = (($pshift$037) + 2)|0;
      $48 = $23;$pshift$1 = $25;
     } else {
      $26 = (($pshift$037) + -1)|0;
      $27 = (($lp) + ($26<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $head$036;
      $30 = (($17) - ($29))|0;
      $31 = ($28>>>0)<($30>>>0);
      if ($31) {
       _sift($head$036,$width,$cmp,$pshift$037,$lp);
      } else {
       _trinkle($head$036,$width,$cmp,$p,$pshift$037,0,$lp);
      }
      $32 = ($pshift$037|0)==(1);
      if ($32) {
       $$pre$i5 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i6 = HEAP32[$p>>2]|0;
       $33 = $$pre$i5 << 1;
       $34 = $$pre1$i6 >>> 31;
       $35 = $34 | $33;
       HEAP32[$$phi$trans$insert$i>>2] = $35;
       $36 = $$pre1$i6 << 1;
       HEAP32[$p>>2] = $36;
       $48 = $36;$pshift$1 = 0;
       break;
      }
      $37 = ($26>>>0)>(31);
      if ($37) {
       $38 = (($pshift$037) + -33)|0;
       $39 = HEAP32[$p>>2]|0;
       HEAP32[$$phi$trans$insert$i>>2] = $39;
       HEAP32[$p>>2] = 0;
       $$0$i = $38;$41 = $39;$44 = 0;
      } else {
       $$pre$i11 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i12 = HEAP32[$p>>2]|0;
       $$0$i = $26;$41 = $$pre$i11;$44 = $$pre1$i12;
      }
      $40 = $41 << $$0$i;
      $42 = (32 - ($$0$i))|0;
      $43 = $44 >>> $42;
      $45 = $43 | $40;
      HEAP32[$$phi$trans$insert$i>>2] = $45;
      $46 = $44 << $$0$i;
      HEAP32[$p>>2] = $46;
      $48 = $46;$pshift$1 = 1;
     }
    } while(0);
    $47 = $48 | 1;
    HEAP32[$p>>2] = $47;
    $49 = (($head$036) + ($width)|0);
    $50 = ($49>>>0)<($15>>>0);
    if ($50) {
     $19 = $47;$head$036 = $49;$pshift$037 = $pshift$1;
    } else {
     $head$0$lcssa = $49;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
  $51 = ((($p)) + 4|0);
  $52 = ($pshift$0$lcssa|0)==(1);
  $53 = HEAP32[$p>>2]|0;
  $54 = ($53|0)==(1);
  $or$cond51 = $52 & $54;
  $55 = HEAP32[$51>>2]|0;
  $56 = ($55|0)==(0);
  $or$cond4852 = $or$cond51 & $56;
  if (!($or$cond4852)) {
   $59 = $53;$head$153 = $head$0$lcssa;$pshift$254 = $pshift$0$lcssa;
   while(1) {
    $57 = ($pshift$254|0)<(2);
    if ($57) {
     $58 = (($59) + -1)|0;
     $60 = ($58|0)==(0);
     do {
      if ($60) {
       $81 = 32;
       label = 30;
      } else {
       $61 = $58 & 1;
       $62 = ($61|0)==(0);
       if ($62) {
        $$02$i$i = $58;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $63 = (($nTrailingZeros$03$i$i) + 1)|0;
         $64 = $$02$i$i >>> 1;
         $65 = $64 & 1;
         $66 = ($65|0)==(0);
         if ($66) {
          $$02$i$i = $64;$nTrailingZeros$03$i$i = $63;
         } else {
          $$lcssa = $63;
          break;
         }
        }
        $67 = ($$lcssa|0)==(0);
        if ($67) {
         label = 24;
        } else {
         $79 = $$lcssa;
        }
       } else {
        label = 24;
       }
       if ((label|0) == 24) {
        label = 0;
        $68 = HEAP32[$$phi$trans$insert$i>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         $81 = 64;
         label = 30;
         break;
        }
        $70 = $68 & 1;
        $71 = ($70|0)==(0);
        if ($71) {
         $$02$i3$i = $68;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        }
        while(1) {
         $72 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $73 = $$02$i3$i >>> 1;
         $74 = $73 & 1;
         $75 = ($74|0)==(0);
         if ($75) {
          $$02$i3$i = $73;$nTrailingZeros$03$i2$i = $72;
         } else {
          $$lcssa57 = $72;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $76 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $77 = ($$lcssa57|0)==(0);
        if ($77) {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        } else {
         $79 = $76;
        }
       }
       $78 = ($79>>>0)>(31);
       if ($78) {
        $81 = $79;
        label = 30;
       } else {
        $$pre1$i27$pre = HEAP32[$$phi$trans$insert$i>>2]|0;
        $$0$i30 = $79;$84 = $59;$87 = $$pre1$i27$pre;$91 = $79;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      label = 0;
      $80 = (($81) + -32)|0;
      $82 = HEAP32[$$phi$trans$insert$i>>2]|0;
      HEAP32[$p>>2] = $82;
      HEAP32[$$phi$trans$insert$i>>2] = 0;
      $$0$i30 = $80;$84 = $82;$87 = 0;$91 = $81;
     }
     $83 = $84 >>> $$0$i30;
     $85 = (32 - ($$0$i30))|0;
     $86 = $87 << $85;
     $88 = $86 | $83;
     HEAP32[$p>>2] = $88;
     $89 = $87 >>> $$0$i30;
     HEAP32[$$phi$trans$insert$i>>2] = $89;
     $90 = (($91) + ($pshift$254))|0;
     $$pre = (($head$153) + ($14)|0);
     $head$1$be = $$pre;$pshift$2$be = $90;
    } else {
     $$pre$i20 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $92 = $$pre$i20 << 2;
     $93 = $59 >>> 30;
     $94 = $93 | $92;
     $95 = (($pshift$254) + -2)|0;
     $96 = $59 << 1;
     $97 = $96 & 2147483646;
     $98 = $93 << 31;
     $99 = $97 | $98;
     $100 = $99 ^ 3;
     HEAP32[$p>>2] = $100;
     $101 = $94 >>> 1;
     HEAP32[$$phi$trans$insert$i>>2] = $101;
     $102 = (($lp) + ($95<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $sum = (($103) + ($width))|0;
     $$sum2 = (0 - ($sum))|0;
     $104 = (($head$153) + ($$sum2)|0);
     $105 = (($pshift$254) + -1)|0;
     _trinkle($104,$width,$cmp,$p,$105,1,$lp);
     $$pre$i8 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$pre1$i9 = HEAP32[$p>>2]|0;
     $106 = $$pre$i8 << 1;
     $107 = $$pre1$i9 >>> 31;
     $108 = $107 | $106;
     HEAP32[$$phi$trans$insert$i>>2] = $108;
     $109 = $$pre1$i9 << 1;
     $110 = $109 | 1;
     HEAP32[$p>>2] = $110;
     $111 = (($head$153) + ($14)|0);
     _trinkle($111,$width,$cmp,$p,$95,1,$lp);
     $head$1$be = $111;$pshift$2$be = $95;
    }
    $112 = ($pshift$2$be|0)==(1);
    $113 = HEAP32[$p>>2]|0;
    $114 = ($113|0)==(1);
    $or$cond = $112 & $114;
    $115 = HEAP32[$51>>2]|0;
    $116 = ($115|0)==(0);
    $or$cond48 = $or$cond & $116;
    if ($or$cond48) {
     break;
    } else {
     $59 = $113;$head$153 = $head$1$be;$pshift$254 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $l$06$lcssa28 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$07 = 0, $r$07$lcssa27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $21 = 0;$r$0$lcssa = $_r;
   } else {
    $3 = $1&255;
    $$08$in = $n;$8 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $4 = HEAP8[$r$07>>0]|0;
     $5 = ($4<<24>>24)!=(0);
     $6 = ($$08|0)!=(0);
     $or$cond = $6 & $5;
     if (!($or$cond)) {
      $21 = $8;$r$0$lcssa = $r$07;
      break L3;
     }
     $7 = ($8<<24>>24)==($4<<24>>24);
     if (!($7)) {
      $10 = (_tolower($9)|0);
      $11 = HEAP8[$r$07>>0]|0;
      $12 = $11&255;
      $13 = (_tolower($12)|0);
      $14 = ($10|0)==($13|0);
      if (!($14)) {
       $l$06$lcssa28 = $l$06;$r$07$lcssa27 = $r$07;
       break;
      }
     }
     $15 = ((($l$06)) + 1|0);
     $16 = ((($r$07)) + 1|0);
     $17 = HEAP8[$15>>0]|0;
     $18 = $17&255;
     $19 = ($17<<24>>24)==(0);
     if ($19) {
      $21 = 0;$r$0$lcssa = $16;
      break L3;
     } else {
      $$08$in = $$08;$8 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
     }
    }
    $$pre = HEAP8[$l$06$lcssa28>>0]|0;
    $21 = $$pre;$r$0$lcssa = $r$07$lcssa27;
   }
  } while(0);
  $20 = $21&255;
  $22 = (_tolower($20)|0);
  $23 = HEAP8[$r$0$lcssa>>0]|0;
  $24 = $23&255;
  $25 = (_tolower($24)|0);
  $26 = (($22) - ($25))|0;
  $$04 = $26;
 }
 return ($$04|0);
}
function _cleanup392($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = +0, $$1$i = +0, $$114$i = 0, $$2$i = +0, $$20$i = +0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = +0, $$31$i = 0;
 var $$311$i = 0, $$4$i = +0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = +0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = +0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = +0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = +0, $392 = +0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = +0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = +0, $412 = +0, $413 = +0, $414 = +0, $415 = +0, $416 = +0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = +0, $443 = +0, $444 = +0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = +0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = +0, $486 = +0, $487 = +0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = +0, $597 = +0, $598 = 0;
 var $599 = +0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = +0, $round6$1$i = +0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = +0, $small$1$i = +0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0;
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $66 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $66 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $66 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $65 = ($66<<24>>24)==(42);
  do {
   if ($65) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $66 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((93006 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 93486;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 93486;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 93486;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 93486 : (93488);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (93487);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 93486;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 93486;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 93496;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 93503;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (93504) : (93509);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (93506);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * +2;
      $393 = $392 != +0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = +8;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * +16;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (93470 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * +16;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == +0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != +0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * +268435456;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$481 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$481 = $$pre179$i;
      }
      $480 = ($481|0)<(0);
      $$31$i = $480 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * +1.0E+9;
       $488 = $487 != +0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $491 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $490 = ($491|0)>(29);
        $492 = $490 ? 29 : $491;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $491 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? +9007199254740992 : +9007199254740994;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = +0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = +1;
             break;
            }
           }
           $small$0$i = +1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(93538,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(93538,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 93522 : 93526;
      $379 = ($$07$i != $$07$i) | (+0 != +0);
      $380 = $377 ? 93530 : 93534;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 93486;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 93486;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (93470 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 93486;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (93486 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 93486;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $793 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $792 = ($793|0)<(10);
       if ($792) {
        $i$398 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$7 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $sum = (($5) + ($width))|0;
    $$sum = (0 - ($sum))|0;
    $6 = (($$03) + ($$sum)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 127]($7,$6)|0);
    $9 = ($8|0)>(-1);
    if ($9) {
     $10 = (FUNCTION_TABLE_iii[$cmp & 127]($7,$2)|0);
     $11 = ($10|0)>(-1);
     if ($11) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $12 = (FUNCTION_TABLE_iii[$cmp & 127]($6,$2)|0);
    $13 = ($12|0)>(-1);
    $14 = (($i$04) + 1)|0;
    $15 = (($ar) + ($i$04<<2)|0);
    if ($13) {
     HEAP32[$15>>2] = $6;
     $16 = (($$012) + -1)|0;
     $$0$be = $6;$$01$be = $16;
    } else {
     HEAP32[$15>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $17 = ($$01$be|0)>(1);
    if (!($17)) {
     $i$0$lcssa = $14;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$7 = $$pre;$i$04 = $14;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp = $pp|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01162 = 0, $$01162$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02964 = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa75 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa50 = 0, $i$01063 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $phitmp = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $ar = sp;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($pp)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ar>>2] = $head;
 $3 = (0 - ($width))|0;
 $4 = ($0|0)!=(1);
 $5 = ($2|0)!=(0);
 $6 = $5 | $4;
 L1: do {
  if ($6) {
   $7 = (($lp) + ($pshift<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (0 - ($8))|0;
   $10 = (($head) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$cmp & 127]($10,$head)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 19;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01162 = $head;$$02964 = $pshift;$$03865 = $phitmp;$18 = $10;$27 = $0;$37 = $2;$i$01063 = 1;
    while(1) {
     $13 = ($$02964|0)>(1);
     $or$cond = $$03865 & $13;
     if ($or$cond) {
      $14 = (($$01162) + ($3)|0);
      $15 = (($$02964) + -2)|0;
      $16 = (($lp) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $19 = (FUNCTION_TABLE_iii[$cmp & 127]($14,$18)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
      $sum = (($17) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $21 = (($$01162) + ($$sum)|0);
      $22 = (FUNCTION_TABLE_iii[$cmp & 127]($21,$18)|0);
      $23 = ($22|0)>(-1);
      if ($23) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
     }
     $24 = (($i$01063) + 1)|0;
     $25 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$25>>2] = $18;
     $26 = (($27) + -1)|0;
     $28 = ($26|0)==(0);
     do {
      if ($28) {
       $49 = 32;
       label = 16;
      } else {
       $29 = $26 & 1;
       $30 = ($29|0)==(0);
       if ($30) {
        $$02$i$i = $26;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $31 = (($nTrailingZeros$03$i$i) + 1)|0;
         $32 = $$02$i$i >>> 1;
         $33 = $32 & 1;
         $34 = ($33|0)==(0);
         if ($34) {
          $$02$i$i = $32;$nTrailingZeros$03$i$i = $31;
         } else {
          $$lcssa = $31;
          break;
         }
        }
        $35 = ($$lcssa|0)==(0);
        if ($35) {
         label = 11;
        } else {
         $47 = $$lcssa;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        label = 0;
        $36 = ($37|0)==(0);
        if ($36) {
         $49 = 64;
         label = 16;
         break;
        }
        $38 = $37 & 1;
        $39 = ($38|0)==(0);
        if ($39) {
         $$02$i3$i = $37;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$51 = $27;$54 = $37;$58 = 0;
         break;
        }
        while(1) {
         $40 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $41 = $$02$i3$i >>> 1;
         $42 = $41 & 1;
         $43 = ($42|0)==(0);
         if ($43) {
          $$02$i3$i = $41;$nTrailingZeros$03$i2$i = $40;
         } else {
          $$lcssa75 = $40;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $44 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $45 = ($$lcssa75|0)==(0);
        if ($45) {
         $$0$i = 0;$51 = $27;$54 = $37;$58 = 0;
         break;
        } else {
         $47 = $44;
        }
       }
       $46 = ($47>>>0)>(31);
       if ($46) {
        $49 = $47;
        label = 16;
       } else {
        $$0$i = $47;$51 = $27;$54 = $37;$58 = $47;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      label = 0;
      $48 = (($49) + -32)|0;
      $$0$i = $48;$51 = $37;$54 = 0;$58 = $49;
     }
     $50 = $51 >>> $$0$i;
     $52 = (32 - ($$0$i))|0;
     $53 = $54 << $52;
     $55 = $53 | $50;
     $56 = $54 >>> $$0$i;
     $57 = (($58) + ($$02964))|0;
     $59 = ($55|0)!=(1);
     $60 = ($56|0)!=(0);
     $61 = $60 | $59;
     if (!($61)) {
      $$0$lcssa49 = $18;$$02$lcssa51 = $57;$i$0$lcssa50 = $24;
      label = 20;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $62 = (($lp) + ($57<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (0 - ($63))|0;
     $65 = (($18) + ($64)|0);
     $66 = (FUNCTION_TABLE_iii[$cmp & 127]($65,$$pre)|0);
     $67 = ($66|0)<(1);
     if ($67) {
      $$0$lcssa = $18;$$02$lcssa = $57;$$03$lcssa = 0;$i$0$lcssa = $24;
      label = 19;
      break;
     } else {
      $$01162$phi = $18;$$02964 = $57;$$03865 = 1;$18 = $65;$27 = $55;$37 = $56;$i$01063 = $24;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $68 = ($$03$lcssa|0)==(0);
  if ($68) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
   label = 20;
  }
 }
 if ((label|0) == 20) {
  _cycle($width,$ar,$i$0$lcssa50);
  _sift($$0$lcssa49,$width,$cmp,$$02$lcssa51,$lp);
 }
 STACKTOP = sp;return;
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = +0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = +0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[53256>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (53296 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (53296 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[53256>>2] = $22;
     } else {
      $23 = HEAP32[(53272)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(53264)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (53296 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (53296 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[53256>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(53272)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(53264)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(53276)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (53296 + ($92<<2)|0);
      $94 = HEAP32[53256>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[53256>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (53296 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (53296 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(53272)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(53264)>>2] = $81;
     HEAP32[(53276)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(53260)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (53560 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(53272)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (53560 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(53260)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(53260)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(53272)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(53272)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(53272)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(53264)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(53276)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (53296 + ($229<<2)|0);
       $231 = HEAP32[53256>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[53256>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (53296 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (53296 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(53272)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(53264)>>2] = $rsize$0$i$lcssa;
      HEAP32[(53276)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(53260)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (53560 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (53560 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(53264)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(53272)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (53560 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(53260)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(53260)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(53272)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(53272)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(53272)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (53296 + ($424<<2)|0);
          $426 = HEAP32[53256>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[53256>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (53296 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (53296 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(53272)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (53560 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(53260)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(53260)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(53272)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(53272)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(53264)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(53276)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(53276)>>2] = $514;
   HEAP32[(53264)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(53264)>>2] = 0;
   HEAP32[(53276)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(53268)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(53268)>>2] = $528;
  $529 = HEAP32[(53280)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(53280)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[53728>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(53736)>>2] = $538;
    HEAP32[(53732)>>2] = $538;
    HEAP32[(53740)>>2] = -1;
    HEAP32[(53744)>>2] = -1;
    HEAP32[(53748)>>2] = 0;
    HEAP32[(53700)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[53728>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(53736)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(53696)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(53688)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(53700)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(53280)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (53704);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(53268)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(53732)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(53688)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(53696)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(53736)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(53700)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(53700)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(53688)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(53688)>>2] = $632;
  $633 = HEAP32[(53692)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(53692)>>2] = $632;
  }
  $635 = HEAP32[(53280)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(53272)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(53272)>>2] = $tbase$255$i;
    }
    HEAP32[(53704)>>2] = $tbase$255$i;
    HEAP32[(53708)>>2] = $tsize$254$i;
    HEAP32[(53716)>>2] = 0;
    $640 = HEAP32[53728>>2]|0;
    HEAP32[(53292)>>2] = $640;
    HEAP32[(53288)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (53296 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (53296 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (53296 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(53280)>>2] = $654;
    HEAP32[(53268)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(53744)>>2]|0;
    HEAP32[(53284)>>2] = $659;
   } else {
    $sp$084$i = (53704);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(53268)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(53280)>>2] = $684;
       HEAP32[(53268)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(53744)>>2]|0;
       HEAP32[(53284)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(53272)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(53272)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (53704);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (53704);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(53268)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(53268)>>2] = $730;
        HEAP32[(53280)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(53276)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(53264)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(53264)>>2] = $736;
         HEAP32[(53276)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (53296 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[53256>>2]|0;
            $763 = $762 & $761;
            HEAP32[53256>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (53560 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(53260)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(53260)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(53272)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(53272)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(53272)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (53296 + ($840<<2)|0);
         $842 = HEAP32[53256>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[53256>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (53296 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (53296 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(53272)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (53560 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(53260)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(53260)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(53272)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(53272)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (53704);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(53280)>>2] = $953;
    HEAP32[(53268)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(53744)>>2]|0;
    HEAP32[(53284)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(53704)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(53704)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(53704)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(53704)+12>>2]|0;
    HEAP32[(53704)>>2] = $tbase$255$i;
    HEAP32[(53708)>>2] = $tsize$254$i;
    HEAP32[(53716)>>2] = 0;
    HEAP32[(53712)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (53296 + ($977<<2)|0);
      $979 = HEAP32[53256>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[53256>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (53296 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (53296 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(53272)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (53560 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(53260)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(53260)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(53272)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(53272)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(53268)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(53268)>>2] = $1062;
   $1063 = HEAP32[(53280)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(53280)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(53272)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(53276)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(53264)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (53296 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[53256>>2]|0;
     $36 = $35 & $34;
     HEAP32[53256>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (53560 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(53260)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(53260)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(53272)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(53272)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(53272)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(53280)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(53268)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(53268)>>2] = $120;
   HEAP32[(53280)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(53276)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(53276)>>2] = 0;
   HEAP32[(53264)>>2] = 0;
   return;
  }
  $125 = HEAP32[(53276)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(53264)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(53264)>>2] = $128;
   HEAP32[(53276)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (53296 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(53272)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[53256>>2]|0;
     $152 = $151 & $150;
     HEAP32[53256>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(53272)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(53272)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(53272)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (53560 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(53260)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(53260)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(53272)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(53272)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(53272)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(53276)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(53264)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (53296 + ($233<<2)|0);
  $235 = HEAP32[53256>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[53256>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (53296 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (53296 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(53272)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (53560 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(53260)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(53260)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(53272)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(53272)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(53288)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(53288)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (53712);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(53288)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(53272)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(53736)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(53280)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(53268)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(53280)>>2] = $36;
  HEAP32[(53268)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(53276)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(53264)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(53264)>>2] = $storemerge21;
  HEAP32[(53276)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (53296 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[53256>>2]|0;
    $88 = $87 & $86;
    HEAP32[53256>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (53560 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(53260)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(53260)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(53272)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(53272)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(53272)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(53272)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(53276)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(53264)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (53296 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[53256>>2]|0;
     $32 = $31 & $30;
     HEAP32[53256>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (53560 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(53260)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(53260)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(53272)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(53272)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(53272)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(53272)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(53280)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(53268)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(53268)>>2] = $115;
   HEAP32[(53280)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(53276)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(53276)>>2] = 0;
   HEAP32[(53264)>>2] = 0;
   return;
  }
  $120 = HEAP32[(53276)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(53264)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(53264)>>2] = $123;
   HEAP32[(53276)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (53296 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[53256>>2]|0;
     $146 = $145 & $144;
     HEAP32[53256>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (53560 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(53260)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(53260)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(53272)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(53272)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(53272)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(53276)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(53264)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (53296 + ($224<<2)|0);
  $226 = HEAP32[53256>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[53256>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (53296 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (53296 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(53272)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (53560 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(53260)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(53260)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(53272)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(53272)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function jsCall_iiiiiiii_0(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_1(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_2(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_3(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_4(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_5(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_6(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function jsCall_iiiiiiii_7(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return jsCall_iiiiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}



function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(2,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(3,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(4,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_5(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(5,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_6(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(6,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_7(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(7,a1|0,a2|0,a3|0)|0;
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}



function jsCall_vi_1(a1) {
  a1=a1|0;
  jsCall_vi(1,a1|0);
}



function jsCall_vi_2(a1) {
  a1=a1|0;
  jsCall_vi(2,a1|0);
}



function jsCall_vi_3(a1) {
  a1=a1|0;
  jsCall_vi(3,a1|0);
}



function jsCall_vi_4(a1) {
  a1=a1|0;
  jsCall_vi(4,a1|0);
}



function jsCall_vi_5(a1) {
  a1=a1|0;
  jsCall_vi(5,a1|0);
}



function jsCall_vi_6(a1) {
  a1=a1|0;
  jsCall_vi(6,a1|0);
}



function jsCall_vi_7(a1) {
  a1=a1|0;
  jsCall_vi(7,a1|0);
}



function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function jsCall_viiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_2(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_3(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_4(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_5(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_6(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function jsCall_viiiii_7(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  jsCall_viiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0);
}



function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&31]()|0;
}


function jsCall_i_0() {
  
  return jsCall_i(0)|0;
}



function jsCall_i_1() {
  
  return jsCall_i(1)|0;
}



function jsCall_i_2() {
  
  return jsCall_i(2)|0;
}



function jsCall_i_3() {
  
  return jsCall_i(3)|0;
}



function jsCall_i_4() {
  
  return jsCall_i(4)|0;
}



function jsCall_i_5() {
  
  return jsCall_i(5)|0;
}



function jsCall_i_6() {
  
  return jsCall_i(6)|0;
}



function jsCall_i_7() {
  
  return jsCall_i(7)|0;
}



function dynCall_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return FUNCTION_TABLE_iiiiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}


function jsCall_iiiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return jsCall_iiiiiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}



function jsCall_iiiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return jsCall_iiiiiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}



function jsCall_iiiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return jsCall_iiiiiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}



function jsCall_iiiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return jsCall_iiiiiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}



function jsCall_iiiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return jsCall_iiiiiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}



function jsCall_iiiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return jsCall_iiiiiiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}



function jsCall_iiiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return jsCall_iiiiiiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}



function jsCall_iiiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return jsCall_iiiiiiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}



function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function jsCall_vii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(0,a1|0,a2|0);
}



function jsCall_vii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(1,a1|0,a2|0);
}



function jsCall_vii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(2,a1|0,a2|0);
}



function jsCall_vii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(3,a1|0,a2|0);
}



function jsCall_vii_4(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(4,a1|0,a2|0);
}



function jsCall_vii_5(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(5,a1|0,a2|0);
}



function jsCall_vii_6(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(6,a1|0,a2|0);
}



function jsCall_vii_7(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(7,a1|0,a2|0);
}



function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function jsCall_iiiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_5(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_6(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_7(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function jsCall_ii_2(a1) {
  a1=a1|0;
  return jsCall_ii(2,a1|0)|0;
}



function jsCall_ii_3(a1) {
  a1=a1|0;
  return jsCall_ii(3,a1|0)|0;
}



function jsCall_ii_4(a1) {
  a1=a1|0;
  return jsCall_ii(4,a1|0)|0;
}



function jsCall_ii_5(a1) {
  a1=a1|0;
  return jsCall_ii(5,a1|0)|0;
}



function jsCall_ii_6(a1) {
  a1=a1|0;
  return jsCall_ii(6,a1|0)|0;
}



function jsCall_ii_7(a1) {
  a1=a1|0;
  return jsCall_ii(7,a1|0)|0;
}



function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function jsCall_viii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(0,a1|0,a2|0,a3|0);
}



function jsCall_viii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(1,a1|0,a2|0,a3|0);
}



function jsCall_viii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(2,a1|0,a2|0,a3|0);
}



function jsCall_viii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(3,a1|0,a2|0,a3|0);
}



function jsCall_viii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(4,a1|0,a2|0,a3|0);
}



function jsCall_viii_5(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(5,a1|0,a2|0,a3|0);
}



function jsCall_viii_6(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(6,a1|0,a2|0,a3|0);
}



function jsCall_viii_7(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(7,a1|0,a2|0,a3|0);
}



function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&31]();
}


function jsCall_v_0() {
  
  jsCall_v(0);
}



function jsCall_v_1() {
  
  jsCall_v(1);
}



function jsCall_v_2() {
  
  jsCall_v(2);
}



function jsCall_v_3() {
  
  jsCall_v(3);
}



function jsCall_v_4() {
  
  jsCall_v(4);
}



function jsCall_v_5() {
  
  jsCall_v(5);
}



function jsCall_v_6() {
  
  jsCall_v(6);
}



function jsCall_v_7() {
  
  jsCall_v(7);
}



function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function jsCall_iiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function jsCall_iiiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(0,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(1,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(2,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(3,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(4,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_5(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(5,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_6(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(6,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_7(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(7,a1|0,a2|0,a3|0,a4|0)|0;
}



function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_5(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_6(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_7(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function jsCall_iii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(1,a1|0,a2|0)|0;
}



function jsCall_iii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(2,a1|0,a2|0)|0;
}



function jsCall_iii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(3,a1|0,a2|0)|0;
}



function jsCall_iii_4(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(4,a1|0,a2|0)|0;
}



function jsCall_iii_5(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(5,a1|0,a2|0)|0;
}



function jsCall_iii_6(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(6,a1|0,a2|0)|0;
}



function jsCall_iii_7(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(7,a1|0,a2|0)|0;
}



function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function jsCall_iiiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_2(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_3(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_4(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_5(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_6(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_7(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}


function jsCall_viiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(0,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(1,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(2,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(3,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(4,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_5(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(5,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_6(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(6,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_7(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(7,a1|0,a2|0,a3|0,a4|0);
}


function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(1);return 0;
}
function b2(p0) {
 p0 = p0|0; abort(2);
}
function b3(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(3);
}
function b4() {
 ; abort(4);return 0;
}
function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; abort(5);return 0;
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(6);
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(7);return 0;
}
function b8(p0) {
 p0 = p0|0; abort(8);return 0;
}
function b9(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(9);
}
function b10() {
 ; abort(10);
}
function b11(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(11);return 0;
}
function b12(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(12);return 0;
}
function b13(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(13);
}
function b14(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(14);return 0;
}
function b15(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(15);return 0;
}
function b16(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(16);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,jsCall_iiiiiiii_0,jsCall_iiiiiiii_1,jsCall_iiiiiiii_2,jsCall_iiiiiiii_3,jsCall_iiiiiiii_4,jsCall_iiiiiiii_5,jsCall_iiiiiiii_6,jsCall_iiiiiiii_7,b0,b0,b0,b0,b0,b0,b0,b0,b0,_dh_bn_mod_exp,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,jsCall_iiii_0,jsCall_iiii_1,jsCall_iiii_2,jsCall_iiii_3,jsCall_iiii_4,jsCall_iiii_5,jsCall_iiii_6,jsCall_iiii_7,b1,b1,b1,b1,b1,b1,b1,b1,b1,_int_new_ex_data,_int_dup_ex_data,_default_malloc_ex,_update2158,_update256,_pkey_cmac_ctrl_str,_old_hmac_decode,_pkey_hmac_ctrl_str,_eckey_param_decode,_old_ec_priv_decode,_pkey_ec_kdf_derive
,_pkey_ec_ctrl_str,_ec_GFp_simple_invert,_ec_GFp_simple_is_on_curve,_ec_GFp_simple_make_affine,_ec_GFp_mont_field_set_to_one,_dsa_param_decode,_old_dsa_priv_decode,_dsa_do_sign,_pkey_dsa_ctrl_str,_dh_param_decode,_compute_key,_pkey_dh_derive,_pkey_dh_ctrl_str,_old_rsa_priv_decode,_pkey_rsa_ctrl_str,___stdio_write,___stdio_seek,_trans_cb,_int_update,_int_update3075,_BN_sub,_BN_add,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,jsCall_vi_0,jsCall_vi_1,jsCall_vi_2,jsCall_vi_3,jsCall_vi_4,jsCall_vi_5,jsCall_vi_6,jsCall_vi_7,b2,b2,b2,b2,b2,b2,b2,b2,b2,_free,_int_thread_release,_int_thread_del_item,_cmac_key_free,_pkey_cmac_cleanup,_hmac_key_free,_pkey_hmac_cleanup,_int_ec_free,_pkey_ec_cleanup,_ec_GFp_mont_group_finish,_ec_GFp_mont_group_clear_finish
,_ec_GFp_simple_point_finish,_ec_GFp_simple_point_clear_finish,_ec_GFp_simple_group_finish,_ec_GFp_simple_group_clear_finish,_int_dsa_free,_pkey_dsa_cleanup,_int_dh_free,_pkey_dh_cleanup,_int_rsa_free,_pkey_rsa_cleanup,_def_cleanup_cb,_def_cleanup_util_cb,_X509_ATTRIBUTE_free,_ecdh_data_free,_ecdsa_data_free,_ec_pre_comp_free,_ec_pre_comp_clear_free,_ASN1_TYPE_free,_cleanup392,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viiiii = [b3,jsCall_viiiii_0,jsCall_viiiii_1,jsCall_viiiii_2,jsCall_viiiii_3,jsCall_viiiii_4,jsCall_viiiii_5,jsCall_viiiii_6,jsCall_viiiii_7,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_i = [b4,jsCall_i_0,jsCall_i_1,jsCall_i_2,jsCall_i_3,jsCall_i_4,jsCall_i_5,jsCall_i_6,jsCall_i_7,b4,b4,b4,b4,b4,b4,b4,b4,b4,_int_new_class,_int_err_get_next_lib,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iiiiiiiiii = [b5,jsCall_iiiiiiiiii_0,jsCall_iiiiiiiiii_1,jsCall_iiiiiiiiii_2,jsCall_iiiiiiiiii_3,jsCall_iiiiiiiiii_4,jsCall_iiiiiiiiii_5,jsCall_iiiiiiiiii_6,jsCall_iiiiiiiiii_7,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,jsCall_vii_0,jsCall_vii_1,jsCall_vii_2,jsCall_vii_3,jsCall_vii_4,jsCall_vii_5,jsCall_vii_6,jsCall_vii_7,b6,b6,b6,b6,b6,b6,b6,b6,b6,_bn_free,_long_free,_int_cb_LHASH_DOALL_ARG,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_iiiiiii = [b7,jsCall_iiiiiii_0,jsCall_iiiiiii_1,jsCall_iiiiiii_2,jsCall_iiiiiii_3,jsCall_iiiiiii_4,jsCall_iiiiiii_5,jsCall_iiiiiii_6,jsCall_iiiiiii_7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_int_get_new_index,_RSA_sign,_RSA_verify,_ec_GFp_simple_set_Jprojective_coordinates_GFp,_ec_GFp_simple_get_Jprojective_coordinates_GFp,_bn_c2i,_long_c2i,_rsa_item_verify,_rsa_item_sign,_BN_mod_exp_mont,b7
,b7,b7,b7];
var FUNCTION_TABLE_ii = [b8,jsCall_ii_0,jsCall_ii_1,jsCall_ii_2,jsCall_ii_3,jsCall_ii_4,jsCall_ii_5,jsCall_ii_6,jsCall_ii_7,b8,b8,b8,b8,b8,b8,b8,b8,b8,_malloc,_int_err_get,_int_err_get_item,_int_err_set_item,_int_err_del_item,_int_thread_get,_int_thread_get_item,_int_thread_set_item,_init2157,_init224,_init256
,_cmac_size,_pkey_cmac_init,_hmac_size,_pkey_hmac_init,_int_ec_size,_ec_bits,_ec_missing_parameters,_pkey_ec_init,_ec_GFp_mont_group_init,_ec_GFp_simple_group_get_degree,_ec_GFp_simple_point_init,_ec_GFp_simple_group_init,_int_dsa_size,_dsa_bits,_dsa_missing_parameters,_dsa_init,_dsa_finish,_pkey_dsa_init,_int_dh_size,_dh_bits,_dh_missing_parameters,_generate_key,_dh_init,_dh_finish,_pkey_dh_init,_int_rsa_size,_rsa_bits,_RSA_eay_init,_RSA_eay_finish,_pkey_rsa_init
,___stdio_close,_ex_class_item_LHASH_HASH,_app_info_LHASH_HASH,_err_string_data_LHASH_HASH,_err_state_LHASH_HASH,_lh_strhash,_obj_name_LHASH_HASH,_ecdh_data_dup,_ecdsa_data_dup,_ec_pre_comp_dup,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9,jsCall_viii_0,jsCall_viii_1,jsCall_viii_2,jsCall_viii_3,jsCall_viii_4,jsCall_viii_5,jsCall_viii_6,jsCall_viii_7,b9,b9,b9,b9,b9,b9,b9,b9,b9,_int_free_ex_data,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_v = [b10,jsCall_v_0,jsCall_v_1,jsCall_v_2,jsCall_v_3,jsCall_v_4,jsCall_v_5,jsCall_v_6,jsCall_v_7,b10,b10,b10,b10,b10,b10,b10,b10,b10,_int_cleanup,_int_err_del,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_iiiiiiiii = [b11,jsCall_iiiiiiiii_0,jsCall_iiiiiiiii_1,jsCall_iiiiiiiii_2,jsCall_iiiiiiiii_3,jsCall_iiiiiiiii_4,jsCall_iiiiiiiii_5,jsCall_iiiiiiiii_6,jsCall_iiiiiiiii_7,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_iiiii = [b12,jsCall_iiiii_0,jsCall_iiiii_1,jsCall_iiiii_2,jsCall_iiiii_3,jsCall_iiiii_4,jsCall_iiiii_5,jsCall_iiiii_6,jsCall_iiiii_7,b12,b12,b12,b12,b12,b12,b12,b12,b12,_default_realloc_ex,_cmac_signctx,_pkey_cmac_ctrl,_hmac_pkey_ctrl,_hmac_signctx,_pkey_hmac_ctrl,_ecdsa_sign_setup,_ecdsa_do_verify,_eckey_pub_print,_eckey_priv_print,_eckey_param_print
,_ec_pkey_ctrl,_pkey_ec_ctrl,_ec_GFp_simple_dbl,_ec_GFp_simple_cmp,_ec_GFp_simple_points_make_affine,_ec_GFp_mont_field_sqr,_ec_GFp_mont_field_encode,_ec_GFp_mont_field_decode,_ec_GFp_nist_field_sqr,_dsa_pub_print,_dsa_priv_print,_dsa_param_print,_dsa_pkey_ctrl,_sig_cb,_dsa_cb,_dsa_sign_setup,_dsa_do_verify,_pkey_dsa_ctrl,_dh_public_print,_dh_private_print,_dh_param_print,_dh_pkey_ctrl,_dh_cb,_pkey_dh_ctrl,_bn_i2c,_long_i2c,_pubkey_cb,_rsa_pub_print,_rsa_priv_print,_rsa_pkey_ctrl
,_rsa_cb,_RSA_eay_mod_exp,_pkey_rsa_ctrl,_BN_nist_mod_192,_BN_nist_mod_224,_BN_nist_mod_256,_BN_nist_mod_384,_BN_nist_mod_521,_bn_sub_words,_bn_add_words,_BN_pseudo_rand,_BN_rand,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiiiii = [b13,jsCall_viiiiii_0,jsCall_viiiiii_1,jsCall_viiiiii_2,jsCall_viiiiii_3,jsCall_viiiiii_4,jsCall_viiiiii_5,jsCall_viiiiii_6,jsCall_viiiiii_7,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iii = [b14,jsCall_iii_0,jsCall_iii_1,jsCall_iii_2,jsCall_iii_3,jsCall_iii_4,jsCall_iii_5,jsCall_iii_6,jsCall_iii_7,b14,b14,b14,b14,b14,b14,b14,b14,b14,_realloc,_final2159,_final256,_pkey_cmac_copy,_pkey_cmac_keygen,_cmac_signctx_init,_old_hmac_encode,_pkey_hmac_copy,_pkey_hmac_keygen,_hmac_signctx_init,_eckey_pub_decode
,_eckey_pub_encode,_eckey_pub_cmp,_eckey_priv_decode,_eckey_priv_encode,_eckey_param_encode,_ec_copy_parameters,_ec_cmp_parameters,_old_ec_priv_encode,_pkey_ec_copy,_pkey_ec_paramgen,_pkey_ec_keygen,_ec_GFp_mont_group_copy,_ec_GFp_simple_group_check_discriminant,_ec_GFp_simple_point_copy,_ec_GFp_simple_point_set_to_infinity,_ec_GFp_simple_is_at_infinity,_ec_GFp_nist_group_copy,_dsa_pub_decode,_dsa_pub_encode,_dsa_pub_cmp,_dsa_priv_decode,_dsa_priv_encode,_dsa_param_encode,_dsa_copy_parameters,_dsa_cmp_parameters,_old_dsa_priv_encode,_pkey_dsa_copy,_pkey_dsa_paramgen,_pkey_dsa_keygen,_dh_pub_decode
,_dh_pub_encode,_dh_pub_cmp,_dh_priv_decode,_dh_priv_encode,_dh_param_encode,_dh_copy_parameters,_dh_cmp_parameters,_pkey_dh_copy,_pkey_dh_paramgen,_pkey_dh_keygen,_bn_new,_long_new,_rsa_pub_decode,_rsa_pub_encode,_rsa_pub_cmp,_rsa_priv_decode,_rsa_priv_encode,_old_rsa_priv_encode,_pkey_rsa_copy,_pkey_rsa_keygen,_ex_class_item_LHASH_COMP,_app_info_LHASH_COMP,_err_string_data_LHASH_COMP,_err_state_LHASH_COMP,_strcmp,_obj_name_LHASH_COMP,_sig_cmp_BSEARCH_CMP_FN,_sigx_cmp_BSEARCH_CMP_FN,_pmeth_cmp_BSEARCH_CMP_FN,_ameth_cmp_BSEARCH_CMP_FN
,_der_cmp,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_iiiiii = [b15,jsCall_iiiiii_0,jsCall_iiiiii_1,jsCall_iiiiii_2,jsCall_iiiiii_3,jsCall_iiiiii_4,jsCall_iiiiii_5,jsCall_iiiiii_6,jsCall_iiiiii_7,b15,b15,b15,b15,b15,b15,b15,b15,b15,_ecdh_compute_key,_ecdsa_do_sign,_pkey_ec_sign,_pkey_ec_verify,_ec_GFp_mont_group_set_curve,_ec_GFp_simple_group_get_curve,_ec_GFp_simple_point_set_affine_coordinates,_ec_GFp_simple_point_get_affine_coordinates,_ec_GFp_simple_add,_ec_GFp_mont_field_mul,_ec_GFp_nist_group_set_curve
,_ec_GFp_nist_field_mul,_dsa_sig_print,_pkey_dsa_sign,_pkey_dsa_verify,_long_print,_rsa_sig_print,_RSA_eay_public_encrypt,_RSA_eay_public_decrypt,_RSA_eay_private_encrypt,_RSA_eay_private_decrypt,_pkey_rsa_sign,_pkey_rsa_verify,_pkey_rsa_verifyrecover,_pkey_rsa_encrypt,_pkey_rsa_decrypt,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_viiii = [b16,jsCall_viiii_0,jsCall_viiii_1,jsCall_viiii_2,jsCall_viiii_3,jsCall_viiii_4,jsCall_viiii_5,jsCall_viiii_6,jsCall_viiii_7,b16,b16,b16,b16,b16,b16,b16,b16,b16,_look_str_cb,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];

  return { _rsasignjs_public_key_bytes: _rsasignjs_public_key_bytes, _rsasignjs_init: _rsasignjs_init, _i64Subtract: _i64Subtract, _free: _free, _htonl: _htonl, _rsasignjs_verify: _rsasignjs_verify, _rsasignjs_secret_key_bytes: _rsasignjs_secret_key_bytes, _i64Add: _i64Add, _memmove: _memmove, _bitshift64Ashr: _bitshift64Ashr, _rsasignjs_signature_bytes: _rsasignjs_signature_bytes, _memset: _memset, _rsasignjs_keypair: _rsasignjs_keypair, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _htons: _htons, _bitshift64Shl: _bitshift64Shl, _rsasignjs_sign: _rsasignjs_sign, _llvm_bswap_i32: _llvm_bswap_i32, _ntohs: _ntohs, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _rsasignjs_signature_bytes = Module["_rsasignjs_signature_bytes"] = asm["_rsasignjs_signature_bytes"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _rsasignjs_sign = Module["_rsasignjs_sign"] = asm["_rsasignjs_sign"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _htons = Module["_htons"] = asm["_htons"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _rsasignjs_public_key_bytes = Module["_rsasignjs_public_key_bytes"] = asm["_rsasignjs_public_key_bytes"];
var _rsasignjs_init = Module["_rsasignjs_init"] = asm["_rsasignjs_init"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _rsasignjs_verify = Module["_rsasignjs_verify"] = asm["_rsasignjs_verify"];
var _rsasignjs_secret_key_bytes = Module["_rsasignjs_secret_key_bytes"] = asm["_rsasignjs_secret_key_bytes"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _rsasignjs_keypair = Module["_rsasignjs_keypair"] = asm["_rsasignjs_keypair"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_bitshift64Ashr","_i64Subtract","_i64Add","_memset","_bitshift64Lshr","_bitshift64Shl","_memcpy","_memmove","_llvm_bswap_i32","_llvm_cttz_i32"]


;

function dataReturn (returnValue, result) {
	if (returnValue === 0) {
		return result;
	}
	else {
		throw new Error('RSA error: ' + returnValue);
	}
}

function dataResult (buffer, bytes) {
	return new Uint8Array(
		new Uint8Array(Module.HEAPU8.buffer, buffer, bytes)
	);
}

function dataFree (buffer) {
	try {
		Module._free(buffer);
	}
	catch (_) {}
}

function dereferenceNumber (buffer) {
	return new Uint32Array(Module.HEAPU32.buffer, buffer, 1)[0];
}


Module._rsasignjs_init();


var rsaSign	= {
	publicKeyLength: Module._rsasignjs_public_key_bytes(),
	privateKeyLength: Module._rsasignjs_secret_key_bytes(),
	signatureLength: Module._rsasignjs_signature_bytes(),

	keyPair: function () {
		var publicKeyBuffer;
		var publicKeyBufferBuffer	= Module._malloc(4);
		var publicKeySizeBuffer		= Module._malloc(4);

		var privateKeyBuffer;
		var privateKeyBufferBuffer	= Module._malloc(4);
		var privateKeySizeBuffer	= Module._malloc(4);

		try {
			var returnValue	= Module._rsasignjs_keypair(
				publicKeyBufferBuffer,
				publicKeySizeBuffer,
				privateKeyBufferBuffer,
				privateKeySizeBuffer
			);

			var publicKeySize	= dereferenceNumber(publicKeySizeBuffer);
			var privateKeySize	= dereferenceNumber(privateKeySizeBuffer);

			publicKeyBuffer		=
				dereferenceNumber(publicKeyBufferBuffer) - publicKeySize
			;

			privateKeyBuffer	=
				dereferenceNumber(privateKeyBufferBuffer) - privateKeySize
			;

			return dataReturn(returnValue, {
				publicKey: dataResult(
					publicKeyBuffer,
					publicKeySize
				),
				privateKey: dataResult(
					privateKeyBuffer,
					privateKeySize
				)
			});
		}
		finally {
			dataFree(publicKeyBuffer);
			dataFree(publicKeyBufferBuffer);
			dataFree(publicKeySizeBuffer);
			dataFree(privateKeyBuffer);
			dataFree(privateKeyBufferBuffer);
			dataFree(privateKeySizeBuffer);
		}
	},

	sign: function (message, privateKey) {
		var signature	= rsaSign.signDetached(message, privateKey);
		var signed		= new Uint8Array(rsaSign.signatureLength + message.length);
		signed.set(signature);
		signed.set(message, rsaSign.signatureLength);
		return signed;
	},

	signDetached: function (message, privateKey) {
		var signatureBuffer		= Module._malloc(rsaSign.signatureLength);
		var messageBuffer		= Module._malloc(message.length);
		var privateKeyBuffer	= Module._malloc(rsaSign.privateKeyLength);

		Module.writeArrayToMemory(message, messageBuffer);
		Module.writeArrayToMemory(privateKey, privateKeyBuffer);

		try {
			var returnValue	= Module._rsasignjs_sign(
				signatureBuffer,
				messageBuffer,
				message.length,
				privateKeyBuffer
			);

			return dataReturn(
				returnValue,
				dataResult(signatureBuffer, rsaSign.signatureLength)
			);
		}
		finally {
			dataFree(signatureBuffer);
			dataFree(messageBuffer);
			dataFree(privateKeyBuffer);
		}
	},

	open: function (signed, publicKey) {
		var signature	= new Uint8Array(signed.buffer, 0, rsaSign.signatureLength);
		var message		= new Uint8Array(signed.buffer, rsaSign.signatureLength);

		if (rsaSign.verifyDetached(signature, message, publicKey)) {
			return message;
		}
		else {
			dataResult('Invalid signature.');
		}
	},

	verifyDetached: function (signature, message, publicKey) {
		var signatureBuffer	= Module._malloc(rsaSign.signatureLength);
		var messageBuffer	= Module._malloc(message.length);
		var publicKeyBuffer	= Module._malloc(rsaSign.publicKeyLength);

		Module.writeArrayToMemory(signature, signatureBuffer);
		Module.writeArrayToMemory(message, messageBuffer);
		Module.writeArrayToMemory(publicKey, publicKeyBuffer);

		try {
			return Module._rsasignjs_verify(
				signatureBuffer,
				messageBuffer,
				message.length,
				publicKeyBuffer
			) === 1;
		}
		finally {
			dataFree(signatureBuffer);
			dataFree(messageBuffer);
			dataFree(publicKeyBuffer);
		}
	}
};



return rsaSign;

}());

self.rsaSign	= rsaSign;

//# sourceMappingURL=rsa-sign.debug.js.map