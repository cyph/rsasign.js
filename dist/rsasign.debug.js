var isNode	=
	typeof process === 'object' &&
	typeof require === 'function' &&
	typeof window !== 'object' &&
	typeof importScripts !== 'function'
;


var pemJwk		= require('pem-jwk-norecompute');
var sodiumUtil	= require('sodiumutil');


var nodeCrypto, rsaKeygen;
if (isNode) {
	nodeCrypto	= require('crypto');
	rsaKeygen	= require('rsa-keygen');
}

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return xhr.response;
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  abort('NO_DYNAMIC_EXECUTION=1 was set, cannot eval');
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 1*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-1)/1] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    abort('NO_DYNAMIC_EXECUTION=1 was set, cannot eval');
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  // NO_DYNAMIC_EXECUTION is on, so we can't use the fast version of cwrap.
  // Fall back to returning a bound version of ccall.
  cwrap = function cwrap(ident, returnType, argTypes) {
    return function() {
      return ccall(ident, returnType, argTypes, arguments);
    }
  }
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 8388608;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function() { { return Module.getRandomValue(); } },
 function() { { if (Module.getRandomValue === undefined) { try { var window_ = "object" === typeof window ? window : self, crypto_ = typeof window_.crypto !== "undefined" ? window_.crypto : window_.msCrypto, randomValuesStandard = function() { var buf = new Uint32Array(1); crypto_.getRandomValues(buf); return buf[0] >>> 0; }; randomValuesStandard(); Module.getRandomValue = randomValuesStandard; } catch (e) { try { var crypto = require('crypto'), randomValueNodeJS = function() { var buf = crypto.randomBytes(4); return (buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3]) >>> 0; }; randomValueNodeJS(); Module.getRandomValue = randomValueNodeJS; } catch (e) { throw 'No secure random number generator found'; } } } } }];

function _emscripten_asm_const_i(code) {
 return ASM_CONSTS[code]();
}

function _emscripten_asm_const_v(code) {
 return ASM_CONSTS[code]();
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 83264;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([13,0,0,0,1,0,0,0,64,0,0,0,6,40,0,0,0,0,0,0,14,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,15,0,0,0,1,0,0,0,128,0,0,0,6,40,0,0,0,0,0,0,16,0,0,0,1,0,0,0,128,0,0,0,6,40,0,0,0,0,0,0,17,0,0,0,1,0,0,0,64,0,0,0,6,40,0,0,0,0,0,0,18,0,0,0,1,0,0,0,64,0,0,0,6,40,0,0,0,0,0,0,48,0,0,0,1,0,0,0,128,0,0,0,16,0,0,0,2,0,0,0,49,0,0,0,1,0,0,0,255,255,255,255,22,40,0,0,0,0,0,0,54,0,0,0,1,0,0,0,255,255,255,255,22,40,0,0,0,0,0,0,55,0,0,0,1,0,0,0,255,255,255,255,6,40,0,0,0,0,0,0,99,0,0,0,1,0,0,0,0,128,0,0,6,40,0,0,0,0,0,0,100,0,0,0,1,0,0,0,0,128,0,0,6,40,0,0,0,0,0,0,101,0,0,0,1,0,0,0,0,128,0,0,6,40,0,0,0,0,0,0,105,0,0,0,1,0,0,0,64,0,0,0,2,0,0,0,2,0,0,0,156,0,0,0,255,255,255,255,255,255,255,255,0,8,0,0,2,0,0,0,173,0,0,0,1,0,0,0,0,128,0,0,6,40,0,0,0,0,0,0,174,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,2,0,0,0,135,1,0,0,1,0,0,0,255,255,255,255,16,0,0,0,2,0,0,0,161,1,0,0,255,255,255,255,255,255,255,255,0,8,0,0,2,0,0,0,204,1,0,0,1,0,0,0,0,1,0,0,16,0,0,0,2,0,0,0,189,3,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,236,3,0,0,1,0,0,0,12,0,0,0,1,0,0,0,2,0,0,0,237,3,0,0,1,0,0,0,13,0,0,0,1,0,0,0,2,0,0,0,238,3,0,0,1,0,0,0,11,0,0,0,1,0,0,0,2,0,0,0,120,156,0,0,232,156,0,0,100,7,0,0,54,183,0,0,4,0,0,0,1,0,0,0,59,183,0,0,7,0,0,0,1,0,0,0,199,253,0,0,4,0,0,0,5,0,0,0,67,183,0,0,3,0,0,0,2,0,0,0,71,183,0,0,7,0,0,0,2,0,0,0,79,183,0,0,4,0,0,0,10,0,0,0,84,183,0,0,10,0,0,0,10,0,0,0,95,183,0,0,3,0,0,0,6,0,0,0,99,183,0,0,6,0,0,0,6,0,0,0,106,183,0,0,7,0,0,0,23,0,0,0,114,183,0,0,3,0,0,0,23,0,0,0,118,183,0,0,15,0,0,0,24,0,0,0,134,183,0,0,7,0,0,0,24,0,0,0,142,183,0,0,3,0,0,0,4,0,0,0,146,183,0,0,11,0,0,0,4,0,0,0,158,183,0,0,6,0,0,0,3,0,0,0,165,183,0,0,9,0,0,0,3,0,0,0,175,183,0,0,15,0,0,0,28,0,0,0,191,183,0,0,4,0,0,0,28,0,0,0,196,183,0,0,3,0,0,0,22,0,0,0,200,183,0,0,9,0,0,0,22,0,0,0,49,183,0,0,4,0,0,0,12,0,0,0,210,183,0,0,10,0,0,0,12,0,0,0,221,183,0,0,3,0,0,0,30,0,0,0,225,183,0,0,9,0,0,0,30,0,0,0,235,183,0,0,13,0,0,0,26,0,0,0,249,183,0,0,7,0,0,0,26,0,0,0,1,184,0,0,15,0,0,0,19,0,0,0,17,184,0,0,9,0,0,0,19,0,0,0,27,184,0,0,3,0,0,0,20,0,0,0,31,184,0,0,9,0,0,0,20,0,0,0,41,184,0,0,13,0,0,0,20,0,0,0,55,184,0,0,13,0,0,0,27,0,0,0,69,184,0,0,6,0,0,0,27,0,0,0,76,184,0,0,7,0,0,0,18,0,0,0,84,184,0,0,13,0,0,0,18,0,0,0,98,184,0,0,8,0,0,0,16,0,0,0,107,184,0,0,3,0,0,0,16,0,0,0,111,184,0,0,3,0,0,0,17,0,0,0,115,184,0,0,3,0,0,0,2,0,1,0,119,184,0,0,8,0,0,0,2,0,1,0,128,184,0,0,3,0,0,0,1,0,1,0,132,184,0,0,8,0,0,0,1,0,1,0,141,184,0,0,7,0,0,0,5,0,1,0,149,184,0,0,7,0,0,0,6,0,1,0,157,184,0,0,7,0,0,0,7,0,1,0,165,184,0,0,7,0,0,0,4,0,1,0,173,184,0,0,4,0,0,0,8,0,1,0,178,184,0,0,6,0,0,0,8,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,32,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,1,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,0,64,0,0,0,128,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,16,0,0,0,8,0,0,0,16,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,185,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,185,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,185,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,185,0,0,0,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,185,0,0,1,0,0,0,16,0,0,0,104,5,0,0,2,0,0,0,0,0,0,0,8,0,0,0,130,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,252,0,0,20,5,0,0,1,0,0,0,0,0,0,0,4,0,0,0,141,185,0,0,48,5,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,172,5,0,0,0,0,0,0,151,185,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,232,5,0,0,1,0,0,0,158,185,0,0,0,0,0,0,0,0,0,0,19,0,0,0,18,0,0,0,0,0,0,0,19,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,36,6,0,0,255,255,255,127,166,185,0,0,0,0,0,0,0,0,0,0,20,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,19,0,0,0,19,0,0,0,1,0,0,0,16,0,0,0,96,6,0,0,2,0,0,0,0,0,0,0,8,0,0,0,176,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,60,1,0,76,5,0,0,0,0,0,0,0,0,0,0,4,0,0,0,185,185,0,0,192,4,0,0,156,6,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,213,187,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,18,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,19,0,0,0,128,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,0,0,0,0,22,0,0,0,20,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,96,0,0,0,0,0,0,0,64,0,0,0,65,0,0,0,20,0,0,0,8,0,0,0,23,0,0,0,21,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,100,0,0,0,20,0,0,0,64,159,0,0,212,7,0,0,172,8,0,0,64,8,0,0,87,3,0,0,87,3,0,0,0,0,0,0,124,36,1,0,250,188,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,21,0,0,0,22,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,87,3,0,0,0,0,0,0,25,0,0,0,28,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,23,0,0,0,12,4,0,0,0,0,0,0,26,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,24,0,0,0,25,0,0,0,253,3,0,0,0,0,0,0,27,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,25,0,0,0,27,0,0,0,1,0,0,0,28,0,0,0,26,0,0,0,18,0,0,0,29,0,0,0,37,4,0,0,252,193,0,0,2,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,194,0,0,19,194,0,0,1,0,0,0,6,0,0,0,43,194,0,0,0,0,0,0,152,220,0,0,157,220,0,0,2,0,0,0,7,0,0,0,49,194,0,0,0,0,0,0,186,220,0,0,190,220,0,0,3,0,0,0,8,0,0,0,56,194,0,0,0,0,0,0,194,220,0,0,198,220,0,0,4,0,0,0,8,0,0,0,64,194,0,0,0,0,0,0,202,220,0,0,206,220,0,0,5,0,0,0,8,0,0,0,72,194,0,0,0,0,0,0,210,220,0,0,210,220,0,0,6,0,0,0,9,0,0,0,80,194,0,0,0,0,0,0,224,220,0,0,232,220,0,0,7,0,0,0,9,0,0,0,89,194,0,0,0,0,0,0,253,220,0,0,5,221,0,0,8,0,0,0,9,0,0,0,98,194,0,0,0,0,0,0,26,221,0,0,38,221,0,0,9,0,0,0,9,0,0,0,107,194,0,0,0,0,0,0,59,221,0,0,71,221,0,0,10,0,0,0,9,0,0,0,116,194,0,0,0,0,0,0,92,221,0,0,97,221,0,0,11,0,0,0,1,0,0,0,125,194,0,0,0,0,0,0,124,221,0,0,124,221,0,0,12,0,0,0,2,0,0,0,126,194,0,0,0,0,0,0,129,221,0,0,132,221,0,0,13,0,0,0,3,0,0,0,128,194,0,0,0,0,0,0,143,221,0,0,145,221,0,0,14,0,0,0,3,0,0,0,131,194,0,0,0,0,0,0,157,221,0,0,159,221,0,0,15,0,0,0,3,0,0,0,134,194,0,0,0,0,0,0,172,221,0,0,175,221,0,0,16,0,0,0,3,0,0,0,137,194,0,0,0,0,0,0,195,221,0,0,197,221,0,0,17,0,0,0,3,0,0,0,140,194,0,0,0,0,0,0,214,221,0,0,217,221,0,0,18,0,0,0,3,0,0,0,143,194,0,0,0,0,0,0,155,58,1,0,240,221,0,0,19,0,0,0,4,0,0,0,146,194,0,0,0,0,0,0,244,221,0,0,244,221,0,0,20,0,0,0,8,0,0,0,150,194,0,0,0,0,0,0,250,221,0,0,250,221,0,0,21,0,0,0,9,0,0,0,158,194,0,0,0,0,0,0,5,222,0,0,5,222,0,0,22,0,0,0,9,0,0,0,167,194,0,0,0,0,0,0,22,222,0,0,22,222,0,0,23,0,0,0,9,0,0,0,176,194,0,0,0,0,0,0,42,222,0,0,42,222,0,0,24,0,0,0,9,0,0,0,185,194,0,0,0,0,0,0,71,222,0,0,71,222,0,0,25,0,0,0,9,0,0,0,194,194,0,0,0,0,0,0,88,222,0,0,88,222,0,0,26,0,0,0,9,0,0,0,203,194,0,0,0,0,0,0,108,222,0,0,108,222,0,0,27,0,0,0,8,0,0,0,212,194,0,0,0,0,0,0,114,222,0,0,114,222,0,0,28,0,0,0,9,0,0,0,220,194,0,0,0,0,0,0,129,222,0,0,137,222,0,0,29,0,0,0,5,0,0,0,229,194,0,0,0,0,0,0,145,222,0,0,153,222,0,0,30,0,0,0,5,0,0,0,234,194,0,0,0,0,0,0,161,222,0,0,169,222,0,0,31,0,0,0,5,0,0,0,239,194,0,0,0,0,0,0,177,222,0,0,185,222,0,0,32,0,0,0,5,0,0,0,244,194,0,0,0,0,0,0,193,222,0,0,202,222,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,222,0,0,220,222,0,0,34,0,0,0,11,0,0,0,249,194,0,0,0,0,0,0,229,222,0,0,238,222,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,222,0,0,0,223,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,223,0,0,17,223,0,0,37,0,0,0,8,0,0,0,4,195,0,0,0,0,0,0,25,223,0,0,33,223,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,223,0,0,49,223,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,223,0,0,65,223,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,223,0,0,77,223,0,0,41,0,0,0,5,0,0,0,12,195,0,0,0,0,0,0,81,223,0,0,89,223,0,0,42,0,0,0,5,0,0,0,17,195,0,0,0,0,0,0,110,223,0,0,122,223,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,223,0,0,147,223,0,0,44,0,0,0,8,0,0,0,22,195,0,0,0,0,0,0,160,223,0,0,168,223,0,0,45,0,0,0,5,0,0,0,30,195,0,0,0,0,0,0,176,223,0,0,185,223,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,223,0,0,194,223,0,0,47,0,0,0,8,0,0,0,35,195,0,0,0,0,0,0,200,223,0,0,200,223,0,0,48,0,0,0,9,0,0,0,43,195,0,0,0,0,0,0,213,223,0,0,213,223,0,0,49,0,0,0,9,0,0,0,52,195,0,0,0,0,0,0,230,223,0,0,230,223,0,0,50,0,0,0,9,0,0,0,61,195,0,0,0,0,0,0,242,223,0,0,242,223,0,0,51,0,0,0,9,0,0,0,70,195,0,0,0,0,0,0,0,224,0,0,0,224,0,0,52,0,0,0,9,0,0,0,79,195,0,0,0,0,0,0,12,224,0,0,12,224,0,0,53,0,0,0,9,0,0,0,88,195,0,0,0,0,0,0,29,224,0,0,29,224,0,0,54,0,0,0,9,0,0,0,97,195,0,0,0,0,0,0,47,224,0,0,47,224,0,0,55,0,0,0,9,0,0,0,106,195,0,0,0,0,0,0,67,224,0,0,67,224,0,0,56,0,0,0,9,0,0,0,115,195,0,0,0,0,0,0,97,224,0,0,106,224,0,0,57,0,0,0,7,0,0,0,124,195,0,0,0,0,0,0,136,224,0,0,146,224,0,0,58,0,0,0,8,0,0,0,131,195,0,0,0,0,0,0,177,224,0,0,188,224,0,0,59,0,0,0,8,0,0,0,139,195,0,0,0,0,0,0,207,224,0,0,219,224,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,224,0,0,244,224,0,0,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,225,0,0,13,225,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,225,0,0,38,225,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,225,0,0,56,225,0,0,64,0,0,0,5,0,0,0,147,195,0,0,0,0,0,0,61,225,0,0,70,225,0,0,65,0,0,0,9,0,0,0,152,195,0,0,0,0,0,0,92,225,0,0,100,225,0,0,66,0,0,0,5,0,0,0,161,195,0,0,0,0,0,0,111,225,0,0,119,225,0,0,67,0,0,0,5,0,0,0,166,195,0,0,0,0,0,0,137,225,0,0,153,225,0,0,68,0,0,0,9,0,0,0,171,195,0,0,0,0,0,0,175,225,0,0,175,225,0,0,69,0,0,0,9,0,0,0,180,195,0,0,0,0,0,0,182,225,0,0,195,225,0,0,70,0,0,0,5,0,0,0,189,195,0,0,0,0,0,0,211,225,0,0,222,225,0,0,71,0,0,0,9,0,0,0,194,195,0,0,0,0,0,0,241,225,0,0,251,225,0,0,72,0,0,0,9,0,0,0,203,195,0,0,0,0,0,0,13,226,0,0,29,226,0,0,73,0,0,0,9,0,0,0,212,195,0,0,0,0,0,0,53,226,0,0,71,226,0,0,74,0,0,0,9,0,0,0,221,195,0,0,0,0,0,0,98,226,0,0,111,226,0,0,75,0,0,0,9,0,0,0,230,195,0,0,0,0,0,0,132,226,0,0,146,226,0,0,76,0,0,0,9,0,0,0,239,195,0,0,0,0,0,0,169,226,0,0,185,226,0,0,77,0,0,0,9,0,0,0,248,195,0,0,0,0,0,0,210,226,0,0,220,226,0,0,78,0,0,0,9,0,0,0,1,196,0,0,0,0,0,0,237,226,0,0,252,226,0,0,79,0,0,0,9,0,0,0,10,196,0,0,0,0,0,0,26,227,0,0,35,227,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,227,0,0,44,227,0,0,81,0,0,0,2,0,0,0,19,196,0,0,0,0,0,0,50,227,0,0,71,227,0,0,82,0,0,0,3,0,0,0,21,196,0,0,0,0,0,0,101,227,0,0,110,227,0,0,83,0,0,0,3,0,0,0,24,196,0,0,0,0,0,0,127,227,0,0,149,227,0,0,84,0,0,0,3,0,0,0,27,196,0,0,0,0,0,0,181,227,0,0,196,227,0,0,85,0,0,0,3,0,0,0,30,196,0,0,0,0,0,0,228,227,0,0,242,227,0,0,86,0,0,0,3,0,0,0,33,196,0,0,0,0,0,0,17,228,0,0,34,228,0,0,87,0,0,0,3,0,0,0,36,196,0,0,0,0,0,0,59,228,0,0,69,228,0,0,88,0,0,0,3,0,0,0,39,196,0,0,0,0,0,0,87,228,0,0,107,228,0,0,89,0,0,0,3,0,0,0,42,196,0,0,0,0,0,0,135,228,0,0,158,228,0,0,90,0,0,0,3,0,0,0,45,196,0,0,0,0,0,0,190,228,0,0,197,228,0,0,91,0,0,0,9,0,0,0,48,196,0,0,0,0,0,0,204,228,0,0,211,228,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,228,0,0,225,228,0,0,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,228,0,0,239,228,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,228,0,0,251,228,0,0,95,0,0,0,4,0,0,0,57,196,0,0,0,0,0,0,0,229,0,0,9,229,0,0,96,0,0,0,4,0,0,0,61,196,0,0,0,0,0,0,21,229,0,0,28,229,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,229,0,0,46,229,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,229,0,0,60,229,0,0,99,0,0,0,3,0,0,0,65,196,0,0,0,0,0,0,70,229,0,0,73,229,0,0,100,0,0,0,3,0,0,0,68,196,0,0,0,0,0,0,81,229,0,0,81,229,0,0,101,0,0,0,3,0,0,0,71,196,0,0,0,0,0,0,90,229,0,0,94,229,0,0,102,0,0,0,10,0,0,0,74,196,0,0,0,0,0,0,111,229,0,0,133,229,0,0,103,0,0,0,3,0,0,0,84,196,0,0,0,0,0,0,164,229,0,0,175,229,0,0,104,0,0,0,5,0,0,0,87,196,0,0,0,0,0,0,186,229,0,0,186,229,0,0,105,0,0,0,3,0,0,0,92,196,0,0,0,0,0,0,199,229,0,0,199,229,0,0,106,0,0,0,3,0,0,0,95,196,0,0,0,0,0,0,205,229,0,0,205,229,0,0,107,0,0,0,3,0,0,0,98,196,0,0,0,0,0,0,217,229,0,0,227,229,0,0,108,0,0,0,9,0,0,0,101,196,0,0,0,0,0,0,237,229,0,0,247,229,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,230,0,0,11,230,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,230,0,0,31,230,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,230,0,0,41,230,0,0,112,0,0,0,9,0,0,0,110,196,0,0,0,0,0,0,63,230,0,0,72,230,0,0,113,0,0,0,7,0,0,0,119,196,0,0,0,0,0,0,84,230,0,0,93,230,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,230,0,0,113,230,0,0,115,0,0,0,5,0,0,0,126,196,0,0,0,0,0,0,125,230,0,0,129,230,0,0,116,0,0,0,7,0,0,0,131,196,0,0,0,0,0,0,143,230,0,0,153,230,0,0,117,0,0,0,5,0,0,0,138,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,230,0,0,177,230,0,0,119,0,0,0,6,0,0,0,143,196,0,0,0,0,0,0,194,230,0,0,202,230,0,0,120,0,0,0,8,0,0,0,149,196,0,0,0,0,0,0,210,230,0,0,218,230,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,230,0,0,234,230,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,230,0,0,250,230,0,0,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,231,0,0,7,231,0,0,125,0,0,0,11,0,0,0,157,196,0,0,0,0,0,0,24,231,0,0,41,231,0,0,126,0,0,0,3,0,0,0,168,196,0,0,0,0,0,0,67,231,0,0,67,231,0,0,127,0,0,0,6,0,0,0,171,196,0,0,0,0,0,0,72,231,0,0,72,231,0,0,128,0,0,0,7,0,0,0,177,196,0,0,0,0,0,0,78,231,0,0,89,231,0,0,129,0,0,0,8,0,0,0,184,196,0,0,0,0,0,0,119,231,0,0,130,231,0,0,130,0,0,0,8,0,0,0,192,196,0,0,0,0,0,0,160,231,0,0,172,231,0,0,131,0,0,0,8,0,0,0,200,196,0,0,0,0,0,0,185,231,0,0,201,231,0,0,132,0,0,0,8,0,0,0,208,196,0,0,0,0,0,0,219,231,0,0,232,231,0,0,133,0,0,0,8,0,0,0,216,196,0,0,0,0,0,0,246,231,0,0,0,232,0,0,134,0,0,0,10,0,0,0,224,196,0,0,0,0,0,0,34,232,0,0,44,232,0,0,135,0,0,0,10,0,0,0,234,196,0,0,0,0,0,0,78,232,0,0,88,232,0,0,136,0,0,0,10,0,0,0,244,196,0,0,0,0,0,0,117,232,0,0,123,232,0,0,137,0,0,0,10,0,0,0,254,196,0,0,0,0,0,0,153,232,0,0,159,232,0,0,138,0,0,0,10,0,0,0,8,197,0,0,0,0,0,0,191,232,0,0,197,232,0,0,139,0,0,0,9,0,0,0,18,197,0,0,0,0,0,0,226,232,0,0,235,232,0,0,140,0,0,0,3,0,0,0,27,197,0,0,0,0,0,0,6,233,0,0,16,233,0,0,141,0,0,0,3,0,0,0,30,197,0,0,0,0,0,0,39,233,0,0,54,233,0,0,142,0,0,0,3,0,0,0,33,197,0,0,0,0,0,0,70,233,0,0,78,233,0,0,143,0,0,0,5,0,0,0,36,197,0,0,0,0,0,0,97,233,0,0,114,233,0,0,144,0,0,0,10,0,0,0,41,197,0,0,0,0,0,0,138,233,0,0,154,233,0,0,145,0,0,0,10,0,0,0,51,197,0,0,0,0,0,0,177,233,0,0,191,233,0,0,146,0,0,0,10,0,0,0,61,197,0,0,0,0,0,0,224,233,0,0,238,233,0,0,147,0,0,0,10,0,0,0,71,197,0,0,0,0,0,0,15,234,0,0,32,234,0,0,148,0,0,0,10,0,0,0,81,197,0,0,0,0,0,0,60,234,0,0,76,234,0,0,149,0,0,0,10,0,0,0,91,197,0,0,0,0,0,0,103,234,0,0,103,234,0,0,150,0,0,0,11,0,0,0,101,197,0,0,0,0,0,0,110,234,0,0,110,234,0,0,151,0,0,0,11,0,0,0,112,197,0,0,0,0,0,0,130,234,0,0,130,234,0,0,152,0,0,0,11,0,0,0,123,197,0,0,0,0,0,0,138,234,0,0,138,234,0,0,153,0,0,0,11,0,0,0,134,197,0,0,0,0,0,0,145,234,0,0,145,234,0,0,154,0,0,0,11,0,0,0,145,197,0,0,0,0,0,0,155,234,0,0,155,234,0,0,155,0,0,0,11,0,0,0,156,197,0,0,0,0,0,0,171,234,0,0,171,234,0,0,156,0,0,0,9,0,0,0,167,197,0,0,0,0,0,0,184,234,0,0,184,234,0,0,157,0,0,0,9,0,0,0,176,197,0,0,0,0,0,0,195,234,0,0,195,234,0,0,158,0,0,0,10,0,0,0,185,197,0,0,0,0,0,0,211,234,0,0,211,234,0,0,159,0,0,0,10,0,0,0,195,197,0,0,0,0,0,0,227,234,0,0,227,234,0,0,160,0,0,0,10,0,0,0,205,197,0,0,0,0,0,0,235,234,0,0,235,234,0,0,161,0,0,0,9,0,0,0,215,197,0,0,0,0,0,0,241,234,0,0,241,234,0,0,162,0,0,0,9,0,0,0,224,197,0,0,0,0,0,0,248,234,0,0,248,234,0,0,163,0,0,0,8,0,0,0,233,197,0,0,0,0,0,0,5,235,0,0,15,235,0,0,164,0,0,0,8,0,0,0,241,197,0,0,0,0,0,0,36,235,0,0,50,235,0,0,165,0,0,0,8,0,0,0,249,197,0,0,0,0,0,0,79,235,0,0,90,235,0,0,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,235,0,0,112,235,0,0,167,0,0,0,9,0,0,0,1,198,0,0,0,0,0,0,132,235,0,0,147,235,0,0,168,0,0,0,9,0,0,0,10,198,0,0,0,0,0,0,168,235,0,0,183,235,0,0,169,0,0,0,9,0,0,0,19,198,0,0,0,0,0,0,204,235,0,0,217,235,0,0,170,0,0,0,9,0,0,0,28,198,0,0,0,0,0,0,239,235,0,0,248,235,0,0,171,0,0,0,10,0,0,0,37,198,0,0,0,0,0,0,20,236,0,0,27,236,0,0,172,0,0,0,9,0,0,0,47,198,0,0,0,0,0,0,45,236,0,0,45,236,0,0,173,0,0,0,3,0,0,0,56,198,0,0,0,0,0,0,50,236,0,0,50,236,0,0,174,0,0,0,3,0,0,0,59,198,0,0,0,0,0,0,62,236,0,0,62,236,0,0,175,0,0,0,7,0,0,0,62,198,0,0,0,0,0,0,68,236,0,0,68,236,0,0,176,0,0,0,7,0,0,0,69,198,0,0,0,0,0,0,74,236,0,0,94,236,0,0,177,0,0,0,8,0,0,0,76,198,0,0,0,0,0,0,123,236,0,0,123,236,0,0,178,0,0,0,8,0,0,0,84,198,0,0,0,0,0,0,128,236,0,0,138,236,0,0,179,0,0,0,8,0,0,0,92,198,0,0,0,0,0,0,149,236,0,0,161,236,0,0,180,0,0,0,8,0,0,0,100,198,0,0,0,0,0,0,174,236,0,0,178,236,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,236,0,0,194,236,0,0,182,0,0,0,1,0,0,0,108,198,0,0,0,0,0,0,210,236,0,0,217,236,0,0,183,0,0,0,3,0,0,0,109,198,0,0,0,0,0,0,236,236,0,0,242,236,0,0,184,0,0,0,5,0,0,0,112,198,0,0,0,0,0,0,248,236,0,0,253,236,0,0,185,0,0,0,6,0,0,0,117,198,0,0,0,0,0,0,58,59,1,0,58,59,1,0,186,0,0,0,8,0,0,0,123,198,0,0,0,0,0,0,8,237,0,0,8,237,0,0,187,0,0,0,8,0,0,0,131,198,0,0,0,0,0,0,14,237,0,0,20,237,0,0,188,0,0,0,9,0,0,0,139,198,0,0,0,0,0,0,27,237,0,0,27,237,0,0,189,0,0,0,10,0,0,0,148,198,0,0,0,0,0,0,40,237,0,0,40,237,0,0,190,0,0,0,10,0,0,0,158,198,0,0,0,0,0,0,52,237,0,0,52,237,0,0,191,0,0,0,10,0,0,0,168,198,0,0,0,0,0,0,64,237,0,0,64,237,0,0,192,0,0,0,10,0,0,0,178,198,0,0,0,0,0,0,77,237,0,0,77,237,0,0,193,0,0,0,10,0,0,0,188,198,0,0,0,0,0,0,89,237,0,0,89,237,0,0,194,0,0,0,10,0,0,0,198,198,0,0,0,0,0,0,102,237,0,0,102,237,0,0,195,0,0,0,10,0,0,0,208,198,0,0,0,0,0,0,115,237,0,0,115,237,0,0,196,0,0,0,11,0,0,0,218,198,0,0,0,0,0,0,132,237,0,0,132,237,0,0,197,0,0,0,11,0,0,0,229,198,0,0,0,0,0,0,149,237,0,0,149,237,0,0,198,0,0,0,11,0,0,0,240,198,0,0,0,0,0,0,166,237,0,0,166,237,0,0,199,0,0,0,11,0,0,0,251,198,0,0,0,0,0,0,186,237,0,0,186,237,0,0,200,0,0,0,11,0,0,0,6,199,0,0,0,0,0,0,217,237,0,0,217,237,0,0,201,0,0,0,11,0,0,0,17,199,0,0,0,0,0,0,248,237,0,0,248,237,0,0,202,0,0,0,11,0,0,0,28,199,0,0,0,0,0,0,23,238,0,0,23,238,0,0,203,0,0,0,11,0,0,0,39,199,0,0,0,0,0,0,54,238,0,0,54,238,0,0,204,0,0,0,11,0,0,0,50,199,0,0,0,0,0,0,74,238,0,0,74,238,0,0,205,0,0,0,11,0,0,0,61,199,0,0,0,0,0,0,95,238,0,0,95,238,0,0,206,0,0,0,11,0,0,0,72,199,0,0,0,0,0,0,119,238,0,0,119,238,0,0,207,0,0,0,11,0,0,0,83,199,0,0,0,0,0,0,139,238,0,0,139,238,0,0,208,0,0,0,11,0,0,0,94,199,0,0,0,0,0,0,159,238,0,0,159,238,0,0,209,0,0,0,11,0,0,0,105,199,0,0,0,0,0,0,183,238,0,0,183,238,0,0,210,0,0,0,11,0,0,0,116,199,0,0,0,0,0,0,211,238,0,0,211,238,0,0,211,0,0,0,11,0,0,0,127,199,0,0,0,0,0,0,240,238,0,0,240,238,0,0,212,0,0,0,11,0,0,0,138,199,0,0,0,0,0,0,11,239,0,0,11,239,0,0,213,0,0,0,11,0,0,0,149,199,0,0,0,0,0,0,37,239,0,0,37,239,0,0,214,0,0,0,11,0,0,0,160,199,0,0,0,0,0,0,65,239,0,0,65,239,0,0,215,0,0,0,11,0,0,0,171,199,0,0,0,0,0,0,89,239,0,0,89,239,0,0,216,0,0,0,11,0,0,0,182,199,0,0,0,0,0,0,114,239,0,0,114,239,0,0,217,0,0,0,11,0,0,0,193,199,0,0,0,0,0,0,143,239,0,0,143,239,0,0,218,0,0,0,11,0,0,0,204,199,0,0,0,0,0,0,173,239,0,0,173,239,0,0,219,0,0,0,11,0,0,0,215,199,0,0,0,0,0,0,194,239,0,0,194,239,0,0,220,0,0,0,11,0,0,0,226,199,0,0,0,0,0,0,223,239,0,0,223,239,0,0,221,0,0,0,11,0,0,0,237,199,0,0,0,0,0,0,252,239,0,0,252,239,0,0,222,0,0,0,11,0,0,0,248,199,0,0,0,0,0,0,22,240,0,0,22,240,0,0,223,0,0,0,11,0,0,0,3,200,0,0,0,0,0,0,53,240,0,0,53,240,0,0,224,0,0,0,11,0,0,0,14,200,0,0,0,0,0,0,83,240,0,0,83,240,0,0,225,0,0,0,11,0,0,0,25,200,0,0,0,0,0,0,110,240,0,0,110,240,0,0,226,0,0,0,11,0,0,0,36,200,0,0,0,0,0,0,138,240,0,0,138,240,0,0,227,0,0,0,11,0,0,0,47,200,0,0,0,0,0,0,169,240,0,0,169,240,0,0,228,0,0,0,11,0,0,0,58,200,0,0,0,0,0,0,200,240,0,0,200,240,0,0,229,0,0,0,11,0,0,0,69,200,0,0,0,0,0,0,227,240,0,0,227,240,0,0,230,0,0,0,11,0,0,0,80,200,0,0,0,0,0,0,0,241,0,0,0,241,0,0,231,0,0,0,11,0,0,0,91,200,0,0,0,0,0,0,33,241,0,0,33,241,0,0,232,0,0,0,11,0,0,0,102,200,0,0,0,0,0,0,65,241,0,0,65,241,0,0,233,0,0,0,11,0,0,0,113,200,0,0,0,0,0,0,96,241,0,0,96,241,0,0,234,0,0,0,11,0,0,0,124,200,0,0,0,0,0,0,123,241,0,0,123,241,0,0,235,0,0,0,11,0,0,0,135,200,0,0,0,0,0,0,156,241,0,0,156,241,0,0,236,0,0,0,11,0,0,0,146,200,0,0,0,0,0,0,185,241,0,0,185,241,0,0,237,0,0,0,11,0,0,0,157,200,0,0,0,0,0,0,218,241,0,0,218,241,0,0,238,0,0,0,11,0,0,0,168,200,0,0,0,0,0,0,251,241,0,0,251,241,0,0,239,0,0,0,11,0,0,0,179,200,0,0,0,0,0,0,21,242,0,0,21,242,0,0,240,0,0,0,11,0,0,0,190,200,0,0,0,0,0,0,42,242,0,0,42,242,0,0,241,0,0,0,11,0,0,0,201,200,0,0,0,0,0,0,68,242,0,0,68,242,0,0,242,0,0,0,11,0,0,0,212,200,0,0,0,0,0,0,93,242,0,0,93,242,0,0,243,0,0,0,11,0,0,0,223,200,0,0,0,0,0,0,115,242,0,0,115,242,0,0,244,0,0,0,11,0,0,0,234,200,0,0,0,0,0,0,136,242,0,0,136,242,0,0,245,0,0,0,11,0,0,0,245,200,0,0,0,0,0,0,154,242,0,0,154,242,0,0,246,0,0,0,11,0,0,0,0,201,0,0,0,0,0,0,179,242,0,0,179,242,0,0,247,0,0,0,11,0,0,0,11,201,0,0,0,0,0,0,203,242,0,0,203,242,0,0,248,0,0,0,11,0,0,0,22,201,0,0,0,0,0,0,220,242,0,0,220,242,0,0,249,0,0,0,11,0,0,0,33,201,0,0,0,0,0,0,245,242,0,0,245,242,0,0,250,0,0,0,11,0,0,0,44,201,0,0,0,0,0,0,18,243,0,0,18,243,0,0,251,0,0,0,11,0,0,0,55,201,0,0,0,0,0,0,49,243,0,0,49,243,0,0,252,0,0,0,11,0,0,0,66,201,0,0,0,0,0,0,81,243,0,0,81,243,0,0,253,0,0,0,11,0,0,0,77,201,0,0,0,0,0,0,114,243,0,0,114,243,0,0,254,0,0,0,11,0,0,0,88,201,0,0,0,0,0,0,145,243,0,0,145,243,0,0,255,0,0,0,11,0,0,0,99,201,0,0,0,0,0,0,178,243,0,0,178,243,0,0,0,1,0,0,11,0,0,0,110,201,0,0,0,0,0,0,211,243,0,0,215,243,0,0,1,1,0,0,8,0,0,0,121,201,0,0,0,0,0,0,219,243,0,0,219,243,0,0,2,1,0,0,7,0,0,0,129,201,0,0,0,0,0,0,231,243,0,0,231,243,0,0,3,1,0,0,7,0,0,0,136,201,0,0,0,0,0,0,237,243,0,0,237,243,0,0,4,1,0,0,7,0,0,0,143,201,0,0,0,0,0,0,243,243,0,0,243,243,0,0,5,1,0,0,7,0,0,0,150,201,0,0,0,0,0,0,251,243,0,0,251,243,0,0,6,1,0,0,7,0,0,0,157,201,0,0,0,0,0,0,2,244,0,0,2,244,0,0,7,1,0,0,7,0,0,0,164,201,0,0,0,0,0,0,9,244,0,0,9,244,0,0,8,1,0,0,7,0,0,0,171,201,0,0,0,0,0,0,15,244,0,0,15,244,0,0,9,1,0,0,7,0,0,0,178,201,0,0,0,0,0,0,22,244,0,0,22,244,0,0,10,1,0,0,7,0,0,0,185,201,0,0,0,0,0,0,29,244,0,0,29,244,0,0,11,1,0,0,7,0,0,0,192,201,0,0,0,0,0,0,36,244,0,0,36,244,0,0,12,1,0,0,7,0,0,0,199,201,0,0,0,0,0,0,43,244,0,0,43,244,0,0,13,1,0,0,8,0,0,0,206,201,0,0,0,0,0,0,64,244,0,0,64,244,0,0,14,1,0,0,8,0,0,0,214,201,0,0,0,0,0,0,85,244,0,0,85,244,0,0,15,1,0,0,8,0,0,0,222,201,0,0,0,0,0,0,106,244,0,0,106,244,0,0,16,1,0,0,8,0,0,0,230,201,0,0,0,0,0,0,127,244,0,0,127,244,0,0,17,1,0,0,8,0,0,0,238,201,0,0,0,0,0,0,139,244,0,0,139,244,0,0,18,1,0,0,8,0,0,0,246,201,0,0,0,0,0,0,150,244,0,0,150,244,0,0,19,1,0,0,8,0,0,0,254,201,0,0,0,0,0,0,172,244,0,0,172,244,0,0,20,1,0,0,8,0,0,0,6,202,0,0,0,0,0,0,194,244,0,0,194,244,0,0,21,1,0,0,8,0,0,0,14,202,0,0,0,0,0,0,205,244,0,0,205,244,0,0,22,1,0,0,8,0,0,0,22,202,0,0,0,0,0,0,230,244,0,0,230,244,0,0,23,1,0,0,8,0,0,0,30,202,0,0,0,0,0,0,255,244,0,0,255,244,0,0,24,1,0,0,8,0,0,0,38,202,0,0,0,0,0,0,21,245,0,0,21,245,0,0,25,1,0,0,8,0,0,0,46,202,0,0,0,0,0,0,47,245,0,0,47,245,0,0,26,1,0,0,8,0,0,0,54,202,0,0,0,0,0,0,59,245,0,0,59,245,0,0,27,1,0,0,8,0,0,0,62,202,0,0,0,0,0,0,71,245,0,0,71,245,0,0,28,1,0,0,8,0,0,0,70,202,0,0,0,0,0,0,86,245,0,0,100,245,0,0,29,1,0,0,8,0,0,0,78,202,0,0,0,0,0,0,115,245,0,0,115,245,0,0,30,1,0,0,8,0,0,0,86,202,0,0,0,0,0,0,128,245,0,0,128,245,0,0,31,1,0,0,8,0,0,0,94,202,0,0,0,0,0,0,143,245,0,0,143,245,0,0,32,1,0,0,8,0,0,0,102,202,0,0,0,0,0,0,156,245,0,0,156,245,0,0,33,1,0,0,8,0,0,0,110,202,0,0,0,0,0,0,167,245,0,0,167,245,0,0,34,1,0,0,8,0,0,0,118,202,0,0,0,0,0,0,184,245,0,0,184,245,0,0,35,1,0,0,8,0,0,0,126,202,0,0,0,0,0,0,206,245,0,0,206,245,0,0,36,1,0,0,8,0,0,0,134,202,0,0,0,0,0,0,228,245,0,0,228,245,0,0,37,1,0,0,8,0,0,0,142,202,0,0,0,0,0,0,239,245,0,0,254,245,0,0,38,1,0,0,8,0,0,0,150,202,0,0,0,0,0,0,15,246,0,0,27,246,0,0,39,1,0,0,8,0,0,0,158,202,0,0,0,0,0,0,40,246,0,0,50,246,0,0,40,1,0,0,8,0,0,0,166,202,0,0,0,0,0,0,61,246,0,0,66,246,0,0,41,1,0,0,8,0,0,0,174,202,0,0,0,0,0,0,71,246,0,0,71,246,0,0,42,1,0,0,8,0,0,0,182,202,0,0,0,0,0,0,91,246,0,0,91,246,0,0,43,1,0,0,8,0,0,0,190,202,0,0,0,0,0,0,114,246,0,0,114,246,0,0,44,1,0,0,8,0,0,0,198,202,0,0,0,0,0,0,136,246,0,0,136,246,0,0,45,1,0,0,8,0,0,0,206,202,0,0,0,0,0,0,159,246,0,0,159,246,0,0,46,1,0,0,8,0,0,0,214,202,0,0,0,0,0,0,181,246,0,0,181,246,0,0,47,1,0,0,8,0,0,0,222,202,0,0,0,0,0,0,198,246,0,0,198,246,0,0,48,1,0,0,8,0,0,0,230,202,0,0,0,0,0,0,220,246,0,0,220,246,0,0,49,1,0,0,8,0,0,0,238,202,0,0,0,0,0,0,246,246,0,0,246,246,0,0,50,1,0,0,8,0,0,0,246,202,0,0,0,0,0,0,17,247,0,0,17,247,0,0,51,1,0,0,8,0,0,0,254,202,0,0,0,0,0,0,39,247,0,0,39,247,0,0,52,1,0,0,8,0,0,0,6,203,0,0,0,0,0,0,61,247,0,0,61,247,0,0,53,1,0,0,8,0,0,0,14,203,0,0,0,0,0,0,81,247,0,0,81,247,0,0,54,1,0,0,8,0,0,0,22,203,0,0,0,0,0,0,103,247,0,0,103,247,0,0,55,1,0,0,8,0,0,0,30,203,0,0,0,0,0,0,125,247,0,0,125,247,0,0,56,1,0,0,8,0,0,0,38,203,0,0,0,0,0,0,146,247,0,0,146,247,0,0,57,1,0,0,8,0,0,0,46,203,0,0,0,0,0,0,157,247,0,0,157,247,0,0,58,1,0,0,8,0,0,0,54,203,0,0,0,0,0,0,168,247,0,0,168,247,0,0,59,1,0,0,9,0,0,0,62,203,0,0,0,0,0,0,188,247,0,0,188,247,0,0,60,1,0,0,9,0,0,0,71,203,0,0,0,0,0,0,213,247,0,0,213,247,0,0,61,1,0,0,9,0,0,0,80,203,0,0,0,0,0,0,243,247,0,0,243,247,0,0,62,1,0,0,9,0,0,0,89,203,0,0,0,0,0,0,16,248,0,0,16,248,0,0,63,1,0,0,9,0,0,0,98,203,0,0,0,0,0,0,37,248,0,0,37,248,0,0,64,1,0,0,9,0,0,0,107,203,0,0,0,0,0,0,64,248,0,0,64,248,0,0,65,1,0,0,9,0,0,0,116,203,0,0,0,0,0,0,85,248,0,0,85,248,0,0,66,1,0,0,9,0,0,0,125,203,0,0,0,0,0,0,104,248,0,0,104,248,0,0,67,1,0,0,8,0,0,0,134,203,0,0,0,0,0,0,117,248,0,0,117,248,0,0,68,1,0,0,8,0,0,0,142,203,0,0,0,0,0,0,136,248,0,0,136,248,0,0,69,1,0,0,8,0,0,0,150,203,0,0,0,0,0,0,160,248,0,0,160,248,0,0,70,1,0,0,8,0,0,0,158,203,0,0,0,0,0,0,174,248,0,0,174,248,0,0,71,1,0,0,8,0,0,0,166,203,0,0,0,0,0,0,192,248,0,0,192,248,0,0,72,1,0,0,8,0,0,0,174,203,0,0,0,0,0,0,214,248,0,0,214,248,0,0,73,1,0,0,8,0,0,0,182,203,0,0,0,0,0,0,235,248,0,0,235,248,0,0,74,1,0,0,8,0,0,0,190,203,0,0,0,0,0,0,253,248,0,0,253,248,0,0,75,1,0,0,8,0,0,0,198,203,0,0,0,0,0,0,18,249,0,0,18,249,0,0,76,1,0,0,8,0,0,0,206,203,0,0,0,0,0,0,37,249,0,0,37,249,0,0,77,1,0,0,8,0,0,0,214,203,0,0,0,0,0,0,59,249,0,0,59,249,0,0,78,1,0,0,8,0,0,0,222,203,0,0,0,0,0,0,80,249,0,0,80,249,0,0,79,1,0,0,8,0,0,0,230,203,0,0,0,0,0,0,100,249,0,0,100,249,0,0,80,1,0,0,8,0,0,0,238,203,0,0,0,0,0,0,120,249,0,0,120,249,0,0,81,1,0,0,8,0,0,0,246,203,0,0,0,0,0,0,141,249,0,0,141,249,0,0,82,1,0,0,8,0,0,0,254,203,0,0,0,0,0,0,156,249,0,0,156,249,0,0,83,1,0,0,8,0,0,0,6,204,0,0,0,0,0,0,170,249,0,0,170,249,0,0,84,1,0,0,8,0,0,0,14,204,0,0,0,0,0,0,191,249,0,0,191,249,0,0,85,1,0,0,8,0,0,0,22,204,0,0,0,0,0,0,206,249,0,0,206,249,0,0,86,1,0,0,8,0,0,0,30,204,0,0,0,0,0,0,226,249,0,0,226,249,0,0,87,1,0,0,8,0,0,0,38,204,0,0,0,0,0,0,246,249,0,0,246,249,0,0,88,1,0,0,8,0,0,0,46,204,0,0,0,0,0,0,11,250,0,0,11,250,0,0,89,1,0,0,8,0,0,0,54,204,0,0,0,0,0,0,33,250,0,0,33,250,0,0,90,1,0,0,8,0,0,0,62,204,0,0,0,0,0,0,62,250,0,0,62,250,0,0,91,1,0,0,8,0,0,0,70,204,0,0,0,0,0,0,81,250,0,0,81,250,0,0,92,1,0,0,8,0,0,0,78,204,0,0,0,0,0,0,100,250,0,0,100,250,0,0,93,1,0,0,8,0,0,0,86,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,250,0,0,120,250,0,0,95,1,0,0,8,0,0,0,94,204,0,0,0,0,0,0,134,250,0,0,134,250,0,0,96,1,0,0,8,0,0,0,102,204,0,0,0,0,0,0,162,250,0,0,162,250,0,0,97,1,0,0,8,0,0,0,110,204,0,0,0,0,0,0,188,250,0,0,188,250,0,0,98,1,0,0,8,0,0,0,118,204,0,0,0,0,0,0,214,250,0,0,214,250,0,0,99,1,0,0,8,0,0,0,126,204,0,0,0,0,0,0,236,250,0,0,236,250,0,0,100,1,0,0,8,0,0,0,134,204,0,0,0,0,0,0,4,251,0,0,4,251,0,0,101,1,0,0,8,0,0,0,142,204,0,0,0,0,0,0,17,251,0,0,17,251,0,0,102,1,0,0,8,0,0,0,150,204,0,0,0,0,0,0,29,251,0,0,29,251,0,0,103,1,0,0,8,0,0,0,158,204,0,0,0,0,0,0,52,251,0,0,52,251,0,0,104,1,0,0,8,0,0,0,166,204,0,0,0,0,0,0,63,251,0,0,63,251,0,0,105,1,0,0,8,0,0,0,174,204,0,0,0,0,0,0,78,251,0,0,78,251,0,0,106,1,0,0,8,0,0,0,182,204,0,0,0,0,0,0,97,251,0,0,113,251,0,0,107,1,0,0,8,0,0,0,190,204,0,0,0,0,0,0,130,251,0,0,138,251,0,0,108,1,0,0,8,0,0,0,198,204,0,0,0,0,0,0,146,251,0,0,164,251,0,0,109,1,0,0,9,0,0,0,206,204,0,0,0,0,0,0,184,251,0,0,190,251,0,0,110,1,0,0,9,0,0,0,215,204,0,0,0,0,0,0,201,251,0,0,207,251,0,0,111,1,0,0,9,0,0,0,224,204,0,0,0,0,0,0,219,251,0,0,239,251,0,0,112,1,0,0,9,0,0,0,233,204,0,0,0,0,0,0,9,252,0,0,17,252,0,0,113,1,0,0,9,0,0,0,242,204,0,0,0,0,0,0,31,252,0,0,45,252,0,0,114,1,0,0,9,0,0,0,251,204,0,0,0,0,0,0,65,252,0,0,80,252,0,0,115,1,0,0,9,0,0,0,4,205,0,0,0,0,0,0,101,252,0,0,116,252,0,0,116,1,0,0,9,0,0,0,13,205,0,0,0,0,0,0,137,252,0,0,137,252,0,0,117,1,0,0,9,0,0,0,22,205,0,0,0,0,0,0,143,252,0,0,143,252,0,0,118,1,0,0,9,0,0,0,31,205,0,0,0,0,0,0,148,252,0,0,158,252,0,0,119,1,0,0,9,0,0,0,40,205,0,0,0,0,0,0,169,252,0,0,169,252,0,0,120,1,0,0,4,0,0,0,49,205,0,0,0,0,0,0,179,252,0,0,179,252,0,0,121,1,0,0,5,0,0,0,53,205,0,0,0,0,0,0,192,252,0,0,207,252,0,0,122,1,0,0,2,0,0,0,58,205,0,0,0,0,0,0,239,252,0,0,243,252,0,0,123,1,0,0,1,0,0,0,60,205,0,0,0,0,0,0,247,252,0,0,251,252,0,0,124,1,0,0,2,0,0,0,61,205,0,0,0,0,0,0,255,252,0,0,4,253,0,0,125,1,0,0,3,0,0,0,63,205,0,0,0,0,0,0,9,253,0,0,19,253,0,0,126,1,0,0,4,0,0,0,66,205,0,0,0,0,0,0,29,253,0,0,34,253,0,0,127,1,0,0,4,0,0,0,70,205,0,0,0,0,0,0,45,253,0,0,58,253,0,0,128,1,0,0,4,0,0,0,74,205,0,0,0,0,0,0,71,253,0,0,79,253,0,0,129,1,0,0,4,0,0,0,78,205,0,0,0,0,0,0,87,253,0,0,96,253,0,0,130,1,0,0,4,0,0,0,82,205,0,0,0,0,0,0,105,253,0,0,112,253,0,0,131,1,0,0,4,0,0,0,86,205,0,0,0,0,0,0,119,253,0,0,119,253,0,0,132,1,0,0,4,0,0,0,90,205,0,0,0,0,0,0,124,253,0,0,136,253,0,0,133,1,0,0,5,0,0,0,94,205,0,0,0,0,0,0,148,253,0,0,157,253,0,0,134,1,0,0,9,0,0,0,99,205,0,0,0,0,0,0,166,253,0,0,169,253,0,0,135,1,0,0,10,0,0,0,108,205,0,0,0,0,0,0,185,253,0,0,192,253,0,0,136,1,0,0,10,0,0,0,118,205,0,0,0,0,0,0,199,253,0,0,199,253,0,0,137,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,253,0,0,229,253,0,0,138,1,0,0,3,0,0,0,128,205,0,0,0,0,0,0,254,253,0,0,254,253,0,0,139,1,0,0,4,0,0,0,131,205,0,0,0,0,0,0,8,254,0,0,16,254,0,0,140,1,0,0,9,0,0,0,135,205,0,0,0,0,0,0,37,254,0,0,37,254,0,0,141,1,0,0,8,0,0,0,144,205,0,0,0,0,0,0,49,254,0,0,67,254,0,0,142,1,0,0,8,0,0,0,152,205,0,0,0,0,0,0,94,254,0,0,94,254,0,0,143,1,0,0,8,0,0,0,160,205,0,0,0,0,0,0,110,254,0,0,110,254,0,0,144,1,0,0,3,0,0,0,168,205,0,0,0,0,0,0,115,254,0,0,133,254,0,0,145,1,0,0,3,0,0,0,171,205,0,0,0,0,0,0,159,254,0,0,177,254,0,0,146,1,0,0,3,0,0,0,174,205,0,0,0,0,0,0,197,254,0,0,208,254,0,0,147,1,0,0,3,0,0,0,177,205,0,0,0,0,0,0,199,253,0,0,199,253,0,0,148,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,254,0,0,250,254,0,0,149,1,0,0,5,0,0,0,180,205,0,0,0,0,0,0,5,255,0,0,5,255,0,0,150,1,0,0,7,0,0,0,185,205,0,0,0,0,0,0,17,255,0,0,17,255,0,0,151,1,0,0,7,0,0,0,192,205,0,0,0,0,0,0,42,255,0,0,42,255,0,0,152,1,0,0,7,0,0,0,199,205,0,0,0,0,0,0,57,255,0,0,57,255,0,0,153,1,0,0,8,0,0,0,206,205,0,0,0,0,0,0,68,255,0,0,68,255,0,0,154,1,0,0,8,0,0,0,214,205,0,0,0,0,0,0,79,255,0,0,79,255,0,0,155,1,0,0,8,0,0,0,222,205,0,0,0,0,0,0,90,255,0,0,90,255,0,0,156,1,0,0,8,0,0,0,230,205,0,0,0,0,0,0,101,255,0,0,101,255,0,0,157,1,0,0,8,0,0,0,238,205,0,0,0,0,0,0,112,255,0,0,112,255,0,0,158,1,0,0,8,0,0,0,246,205,0,0,0,0,0,0,123,255,0,0,123,255,0,0,159,1,0,0,8,0,0,0,254,205,0,0,0,0,0,0,134,255,0,0,134,255,0,0,160,1,0,0,7,0,0,0,6,206,0,0,0,0,0,0,150,255,0,0,158,255,0,0,161,1,0,0,9,0,0,0,13,206,0,0,0,0,0,0,177,255,0,0,189,255,0,0,162,1,0,0,9,0,0,0,22,206,0,0,0,0,0,0,201,255,0,0,213,255,0,0,163,1,0,0,9,0,0,0,31,206,0,0,0,0,0,0,225,255,0,0,237,255,0,0,164,1,0,0,9,0,0,0,40,206,0,0,0,0,0,0,249,255,0,0,5,0,1,0,165,1,0,0,9,0,0,0,49,206,0,0,0,0,0,0,17,0,1,0,29,0,1,0,166,1,0,0,9,0,0,0,58,206,0,0,0,0,0,0,41,0,1,0,53,0,1,0,167,1,0,0,9,0,0,0,67,206,0,0,0,0,0,0,65,0,1,0,77,0,1,0,168,1,0,0,9,0,0,0,76,206,0,0,0,0,0,0,89,0,1,0,101,0,1,0,169,1,0,0,9,0,0,0,85,206,0,0,0,0,0,0,113,0,1,0,125,0,1,0,170,1,0,0,9,0,0,0,94,206,0,0,0,0,0,0,137,0,1,0,149,0,1,0,171,1,0,0,9,0,0,0,103,206,0,0,0,0,0,0,161,0,1,0,173,0,1,0,172,1,0,0,9,0,0,0,112,206,0,0,0,0,0,0,185,0,1,0,197,0,1,0,173,1,0,0,9,0,0,0,121,206,0,0,0,0,0,0,209,0,1,0,229,0,1,0,174,1,0,0,3,0,0,0,130,206,0,0,0,0,0,0,251,0,1,0,15,1,1,0,175,1,0,0,7,0,0,0,133,206,0,0,0,0,0,0,37,1,1,0,63,1,1,0,176,1,0,0,7,0,0,0,140,206,0,0,0,0,0,0,92,1,1,0,114,1,1,0,177,1,0,0,7,0,0,0,147,206,0,0,0,0,0,0,138,1,1,0,138,1,1,0,178,1,0,0,1,0,0,0,154,206,0,0,0,0,0,0,91,59,1,0,91,59,1,0,179,1,0,0,3,0,0,0,155,206,0,0,0,0,0,0,143,1,1,0,143,1,1,0,180,1,0,0,7,0,0,0,158,206,0,0,0,0,0,0,147,1,1,0,147,1,1,0,181,1,0,0,8,0,0,0,165,206,0,0,0,0,0,0,153,1,1,0,153,1,1,0,182,1,0,0,9,0,0,0,173,206,0,0,0,0,0,0,172,1,1,0,172,1,1,0,183,1,0,0,9,0,0,0,182,206,0,0,0,0,0,0,193,1,1,0,193,1,1,0,184,1,0,0,9,0,0,0,191,206,0,0,0,0,0,0,210,1,1,0,210,1,1,0,185,1,0,0,9,0,0,0,200,206,0,0,0,0,0,0,222,1,1,0,222,1,1,0,186,1,0,0,10,0,0,0,209,206,0,0,0,0,0,0,238,1,1,0,238,1,1,0,187,1,0,0,10,0,0,0,219,206,0,0,0,0,0,0,8,2,1,0,8,2,1,0,188,1,0,0,10,0,0,0,229,206,0,0,0,0,0,0,20,2,1,0,20,2,1,0,189,1,0,0,10,0,0,0,239,206,0,0,0,0,0,0,32,2,1,0,32,2,1,0,190,1,0,0,10,0,0,0,249,206,0,0,0,0,0,0,40,2,1,0,40,2,1,0,191,1,0,0,10,0,0,0,3,207,0,0,0,0,0,0,49,2,1,0,49,2,1,0,192,1,0,0,10,0,0,0,13,207,0,0,0,0,0,0,54,2,1,0,54,2,1,0,193,1,0,0,10,0,0,0,23,207,0,0,0,0,0,0,69,2,1,0,69,2,1,0,194,1,0,0,10,0,0,0,33,207,0,0,0,0,0,0,85,2,1,0,85,2,1,0,195,1,0,0,10,0,0,0,43,207,0,0,0,0,0,0,95,2,1,0,95,2,1,0,196,1,0,0,10,0,0,0,53,207,0,0,0,0,0,0,115,2,1,0,115,2,1,0,197,1,0,0,10,0,0,0,63,207,0,0,0,0,0,0,131,2,1,0,131,2,1,0,198,1,0,0,10,0,0,0,73,207,0,0,0,0,0,0,152,2,1,0,152,2,1,0,199,1,0,0,10,0,0,0,83,207,0,0,0,0,0,0,170,2,1,0,170,2,1,0,200,1,0,0,10,0,0,0,93,207,0,0,0,0,0,0,179,2,1,0,179,2,1,0,201,1,0,0,10,0,0,0,103,207,0,0,0,0,0,0,199,2,1,0,203,2,1,0,202,1,0,0,10,0,0,0,113,207,0,0,0,0,0,0,210,2,1,0,210,2,1,0,203,1,0,0,10,0,0,0,123,207,0,0,0,0,0,0,231,2,1,0,236,2,1,0,204,1,0,0,10,0,0,0,133,207,0,0,0,0,0,0,250,2,1,0,250,2,1,0,205,1,0,0,10,0,0,0,143,207,0,0,0,0,0,0,255,2,1,0,255,2,1,0,206,1,0,0,10,0,0,0,153,207,0,0,0,0,0,0,14,3,1,0,14,3,1,0,207,1,0,0,10,0,0,0,163,207,0,0,0,0,0,0,25,3,1,0,25,3,1,0,208,1,0,0,10,0,0,0,173,207,0,0,0,0,0,0,31,3,1,0,31,3,1,0,209,1,0,0,10,0,0,0,183,207,0,0,0,0,0,0,41,3,1,0,41,3,1,0,210,1,0,0,10,0,0,0,193,207,0,0,0,0,0,0,46,3,1,0,46,3,1,0,211,1,0,0,10,0,0,0,203,207,0,0,0,0,0,0,54,3,1,0,54,3,1,0,212,1,0,0,10,0,0,0,213,207,0,0,0,0,0,0,73,3,1,0,73,3,1,0,213,1,0,0,10,0,0,0,223,207,0,0,0,0,0,0,87,3,1,0,87,3,1,0,214,1,0,0,10,0,0,0,233,207,0,0,0,0,0,0,103,3,1,0,103,3,1,0,215,1,0,0,10,0,0,0,243,207,0,0,0,0,0,0,118,3,1,0,118,3,1,0,216,1,0,0,10,0,0,0,253,207,0,0,0,0,0,0,135,3,1,0,135,3,1,0,217,1,0,0,10,0,0,0,7,208,0,0,0,0,0,0,155,3,1,0,155,3,1,0,218,1,0,0,10,0,0,0,17,208,0,0,0,0,0,0,165,3,1,0,165,3,1,0,219,1,0,0,10,0,0,0,27,208,0,0,0,0,0,0,178,3,1,0,178,3,1,0,220,1,0,0,10,0,0,0,37,208,0,0,0,0,0,0,195,3,1,0,195,3,1,0,221,1,0,0,10,0,0,0,47,208,0,0,0,0,0,0,210,3,1,0,210,3,1,0,222,1,0,0,10,0,0,0,57,208,0,0,0,0,0,0,218,3,1,0,218,3,1,0,223,1,0,0,10,0,0,0,67,208,0,0,0,0,0,0,239,3,1,0,239,3,1,0,224,1,0,0,10,0,0,0,77,208,0,0,0,0,0,0,248,3,1,0,248,3,1,0,225,1,0,0,10,0,0,0,87,208,0,0,0,0,0,0,1,4,1,0,1,4,1,0,226,1,0,0,10,0,0,0,97,208,0,0,0,0,0,0,11,4,1,0,11,4,1,0,227,1,0,0,10,0,0,0,107,208,0,0,0,0,0,0,23,4,1,0,23,4,1,0,228,1,0,0,10,0,0,0,117,208,0,0,0,0,0,0,40,4,1,0,40,4,1,0,229,1,0,0,10,0,0,0,127,208,0,0,0,0,0,0,55,4,1,0,55,4,1,0,230,1,0,0,10,0,0,0,137,208,0,0,0,0,0,0,73,4,1,0,73,4,1,0,231,1,0,0,10,0,0,0,147,208,0,0,0,0,0,0,87,4,1,0,87,4,1,0,232,1,0,0,10,0,0,0,157,208,0,0,0,0,0,0,109,4,1,0,109,4,1,0,233,1,0,0,10,0,0,0,167,208,0,0,0,0,0,0,130,4,1,0,130,4,1,0,234,1,0,0,10,0,0,0,177,208,0,0,0,0,0,0,150,4,1,0,150,4,1,0,235,1,0,0,10,0,0,0,187,208,0,0,0,0,0,0,171,4,1,0,171,4,1,0,236,1,0,0,10,0,0,0,197,208,0,0,0,0,0,0,184,4,1,0,184,4,1,0,237,1,0,0,10,0,0,0,207,208,0,0,0,0,0,0,205,4,1,0,205,4,1,0,238,1,0,0,10,0,0,0,217,208,0,0,0,0,0,0,218,4,1,0,218,4,1,0,239,1,0,0,10,0,0,0,227,208,0,0,0,0,0,0,229,4,1,0,229,4,1,0,240,1,0,0,10,0,0,0,237,208,0,0,0,0,0,0,248,4,1,0,248,4,1,0,241,1,0,0,10,0,0,0,247,208,0,0,0,0,0,0,14,5,1,0,14,5,1,0,242,1,0,0,10,0,0,0,1,209,0,0,0,0,0,0,36,5,1,0,36,5,1,0,243,1,0,0,10,0,0,0,11,209,0,0,0,0,0,0,54,5,1,0,54,5,1,0,244,1,0,0,10,0,0,0,21,209,0,0,0,0,0,0,66,5,1,0,66,5,1,0,245,1,0,0,10,0,0,0,31,209,0,0,0,0,0,0,72,5,1,0,72,5,1,0,246,1,0,0,10,0,0,0,41,209,0,0,0,0,0,0,90,5,1,0,90,5,1,0,247,1,0,0,3,0,0,0,51,209,0,0,0,0,0,0,111,5,1,0,120,5,1,0,248,1,0,0,5,0,0,0,54,209,0,0,0,0,0,0,129,5,1,0,129,5,1,0,249,1,0,0,6,0,0,0,59,209,0,0,0,0,0,0,147,5,1,0,147,5,1,0,250,1,0,0,6,0,0,0,65,209,0,0,0,0,0,0,163,5,1,0,163,5,1,0,251,1,0,0,7,0,0,0,71,209,0,0,0,0,0,0,186,5,1,0,186,5,1,0,252,1,0,0,7,0,0,0,78,209,0,0,0,0,0,0,211,5,1,0,211,5,1,0,253,1,0,0,3,0,0,0,85,209,0,0,0,0,0,0,231,5,1,0,231,5,1,0,254,1,0,0,3,0,0,0,88,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,5,1,0,248,5,1,0,0,2,0,0,2,0,0,0,91,209,0,0,0,0,0,0,23,6,1,0,33,6,1,0,1,2,0,0,3,0,0,0,93,209,0,0,0,0,0,0,47,6,1,0,58,6,1,0,2,2,0,0,3,0,0,0,96,209,0,0,0,0,0,0,77,6,1,0,77,6,1,0,3,2,0,0,3,0,0,0,99,209,0,0,0,0,0,0,86,6,1,0,86,6,1,0,4,2,0,0,3,0,0,0,102,209,0,0,0,0,0,0,97,6,1,0,109,6,1,0,5,2,0,0,3,0,0,0,105,209,0,0,0,0,0,0,132,6,1,0,132,6,1,0,6,2,0,0,3,0,0,0,108,209,0,0,0,0,0,0,142,6,1,0,142,6,1,0,7,2,0,0,4,0,0,0,111,209,0,0,0,0,0,0,156,6,1,0,156,6,1,0,8,2,0,0,4,0,0,0,115,209,0,0,0,0,0,0,171,6,1,0,171,6,1,0,9,2,0,0,4,0,0,0,119,209,0,0,0,0,0,0,185,6,1,0,185,6,1,0,10,2,0,0,4,0,0,0,123,209,0,0,0,0,0,0,198,6,1,0,198,6,1,0,11,2,0,0,4,0,0,0,127,209,0,0,0,0,0,0,207,6,1,0,207,6,1,0,12,2,0,0,4,0,0,0,131,209,0,0,0,0,0,0,220,6,1,0,220,6,1,0,13,2,0,0,4,0,0,0,135,209,0,0,0,0,0,0,241,6,1,0,241,6,1,0,14,2,0,0,4,0,0,0,139,209,0,0,0,0,0,0,0,7,1,0,0,7,1,0,15,2,0,0,4,0,0,0,143,209,0,0,0,0,0,0,21,7,1,0,21,7,1,0,16,2,0,0,4,0,0,0,147,209,0,0,0,0,0,0,45,7,1,0,45,7,1,0,17,2,0,0,4,0,0,0,151,209,0,0,0,0,0,0,69,7,1,0,69,7,1,0,18,2,0,0,4,0,0,0,155,209,0,0,0,0,0,0,87,7,1,0,87,7,1,0,19,2,0,0,4,0,0,0,159,209,0,0,0,0,0,0,106,7,1,0,106,7,1,0,20,2,0,0,4,0,0,0,163,209,0,0,0,0,0,0,119,7,1,0,119,7,1,0,21,2,0,0,4,0,0,0,167,209,0,0,0,0,0,0,134,7,1,0,134,7,1,0,22,2,0,0,4,0,0,0,171,209,0,0,0,0,0,0,151,7,1,0,151,7,1,0,23,2,0,0,4,0,0,0,175,209,0,0,0,0,0,0,168,7,1,0,168,7,1,0,24,2,0,0,4,0,0,0,179,209,0,0,0,0,0,0,186,7,1,0,186,7,1,0,25,2,0,0,4,0,0,0,183,209,0,0,0,0,0,0,205,7,1,0,205,7,1,0,26,2,0,0,4,0,0,0,187,209,0,0,0,0,0,0,224,7,1,0,224,7,1,0,27,2,0,0,4,0,0,0,191,209,0,0,0,0,0,0,242,7,1,0,242,7,1,0,28,2,0,0,4,0,0,0,195,209,0,0,0,0,0,0,7,8,1,0,7,8,1,0,29,2,0,0,4,0,0,0,199,209,0,0,0,0,0,0,27,8,1,0,27,8,1,0,30,2,0,0,4,0,0,0,203,209,0,0,0,0,0,0,48,8,1,0,48,8,1,0,31,2,0,0,4,0,0,0,207,209,0,0,0,0,0,0,68,8,1,0,68,8,1,0,32,2,0,0,4,0,0,0,211,209,0,0,0,0,0,0,84,8,1,0,84,8,1,0,33,2,0,0,4,0,0,0,215,209,0,0,0,0,0,0,101,8,1,0,101,8,1,0,34,2,0,0,4,0,0,0,219,209,0,0,0,0,0,0,118,8,1,0,118,8,1,0,35,2,0,0,4,0,0,0,223,209,0,0,0,0,0,0,137,8,1,0,137,8,1,0,36,2,0,0,4,0,0,0,227,209,0,0,0,0,0,0,157,8,1,0,157,8,1,0,37,2,0,0,4,0,0,0,231,209,0,0,0,0,0,0,177,8,1,0,177,8,1,0,38,2,0,0,4,0,0,0,235,209,0,0,0,0,0,0,194,8,1,0,194,8,1,0,39,2,0,0,4,0,0,0,239,209,0,0,0,0,0,0,212,8,1,0,212,8,1,0,40,2,0,0,4,0,0,0,243,209,0,0,0,0,0,0,230,8,1,0,230,8,1,0,41,2,0,0,4,0,0,0,247,209,0,0,0,0,0,0,250,8,1,0,250,8,1,0,42,2,0,0,4,0,0,0,251,209,0,0,0,0,0,0,15,9,1,0,15,9,1,0,43,2,0,0,4,0,0,0,255,209,0,0,0,0,0,0,36,9,1,0,36,9,1,0,44,2,0,0,4,0,0,0,3,210,0,0,0,0,0,0,55,9,1,0,55,9,1,0,45,2,0,0,4,0,0,0,7,210,0,0,0,0,0,0,73,9,1,0,73,9,1,0,46,2,0,0,4,0,0,0,11,210,0,0,0,0,0,0,97,9,1,0,97,9,1,0,47,2,0,0,4,0,0,0,15,210,0,0,0,0,0,0,121,9,1,0,121,9,1,0,48,2,0,0,4,0,0,0,19,210,0,0,0,0,0,0,143,9,1,0,143,9,1,0,49,2,0,0,4,0,0,0,23,210,0,0,0,0,0,0,165,9,1,0,165,9,1,0,50,2,0,0,4,0,0,0,27,210,0,0,0,0,0,0,185,9,1,0,185,9,1,0,51,2,0,0,4,0,0,0,31,210,0,0,0,0,0,0,203,9,1,0,203,9,1,0,52,2,0,0,4,0,0,0,35,210,0,0,0,0,0,0,220,9,1,0,220,9,1,0,53,2,0,0,4,0,0,0,39,210,0,0,0,0,0,0,238,9,1,0,238,9,1,0,54,2,0,0,4,0,0,0,43,210,0,0,0,0,0,0,2,10,1,0,2,10,1,0,55,2,0,0,4,0,0,0,47,210,0,0,0,0,0,0,17,10,1,0,17,10,1,0,56,2,0,0,4,0,0,0,51,210,0,0,0,0,0,0,39,10,1,0,39,10,1,0,57,2,0,0,4,0,0,0,55,210,0,0,0,0,0,0,59,10,1,0,59,10,1,0,58,2,0,0,4,0,0,0,59,210,0,0,0,0,0,0,76,10,1,0,76,10,1,0,59,2,0,0,4,0,0,0,63,210,0,0,0,0,0,0,93,10,1,0,93,10,1,0,60,2,0,0,4,0,0,0,67,210,0,0,0,0,0,0,111,10,1,0,111,10,1,0,61,2,0,0,4,0,0,0,71,210,0,0,0,0,0,0,130,10,1,0,130,10,1,0,62,2,0,0,4,0,0,0,75,210,0,0,0,0,0,0,148,10,1,0,148,10,1,0,63,2,0,0,4,0,0,0,79,210,0,0,0,0,0,0,167,10,1,0,167,10,1,0,64,2,0,0,4,0,0,0,83,210,0,0,0,0,0,0,191,10,1,0,191,10,1,0,65,2,0,0,4,0,0,0,87,210,0,0,0,0,0,0,211,10,1,0,211,10,1,0,66,2,0,0,4,0,0,0,91,210,0,0,0,0,0,0,231,10,1,0,231,10,1,0,67,2,0,0,4,0,0,0,95,210,0,0,0,0,0,0,252,10,1,0,252,10,1,0,68,2,0,0,4,0,0,0,99,210,0,0,0,0,0,0,12,11,1,0,12,11,1,0,69,2,0,0,4,0,0,0,103,210,0,0,0,0,0,0,29,11,1,0,29,11,1,0,70,2,0,0,4,0,0,0,107,210,0,0,0,0,0,0,45,11,1,0,45,11,1,0,71,2,0,0,4,0,0,0,111,210,0,0,0,0,0,0,64,11,1,0,64,11,1,0,72,2,0,0,4,0,0,0,115,210,0,0,0,0,0,0,84,11,1,0,84,11,1,0,73,2,0,0,4,0,0,0,119,210,0,0,0,0,0,0,103,11,1,0,103,11,1,0,74,2,0,0,4,0,0,0,123,210,0,0,0,0,0,0,120,11,1,0,120,11,1,0,75,2,0,0,4,0,0,0,127,210,0,0,0,0,0,0,138,11,1,0,138,11,1,0,76,2,0,0,4,0,0,0,131,210,0,0,0,0,0,0,155,11,1,0,155,11,1,0,77,2,0,0,4,0,0,0,135,210,0,0,0,0,0,0,175,11,1,0,175,11,1,0,78,2,0,0,4,0,0,0,139,210,0,0,0,0,0,0,196,11,1,0,196,11,1,0,79,2,0,0,4,0,0,0,143,210,0,0,0,0,0,0,216,11,1,0,216,11,1,0,80,2,0,0,4,0,0,0,147,210,0,0,0,0,0,0,239,11,1,0,239,11,1,0,81,2,0,0,4,0,0,0,151,210,0,0,0,0,0,0,6,12,1,0,6,12,1,0,82,2,0,0,4,0,0,0,155,210,0,0,0,0,0,0,26,12,1,0,26,12,1,0,83,2,0,0,4,0,0,0,159,210,0,0,0,0,0,0,43,12,1,0,43,12,1,0,84,2,0,0,4,0,0,0,163,210,0,0,0,0,0,0,61,12,1,0,61,12,1,0,85,2,0,0,4,0,0,0,167,210,0,0,0,0,0,0,78,12,1,0,78,12,1,0,86,2,0,0,4,0,0,0,171,210,0,0,0,0,0,0,103,12,1,0,103,12,1,0,87,2,0,0,4,0,0,0,175,210,0,0,0,0,0,0,131,12,1,0,131,12,1,0,88,2,0,0,4,0,0,0,179,210,0,0,0,0,0,0,156,12,1,0,172,12,1,0,89,2,0,0,4,0,0,0,183,210,0,0,0,0,0,0,191,12,1,0,205,12,1,0,90,2,0,0,4,0,0,0,187,210,0,0,0,0,0,0,229,12,1,0,229,12,1,0,91,2,0,0,4,0,0,0,191,210,0,0,0,0,0,0,246,12,1,0,246,12,1,0,92,2,0,0,4,0,0,0,195,210,0,0,0,0,0,0,4,13,1,0,4,13,1,0,93,2,0,0,4,0,0,0,199,210,0,0,0,0,0,0,18,13,1,0,28,13,1,0,94,2,0,0,4,0,0,0,203,210,0,0,0,0,0,0,52,13,1,0,52,13,1,0,95,2,0,0,4,0,0,0,207,210,0,0,0,0,0,0,68,13,1,0,68,13,1,0,96,2,0,0,4,0,0,0,211,210,0,0,0,0,0,0,87,13,1,0,87,13,1,0,97,2,0,0,4,0,0,0,215,210,0,0,0,0,0,0,104,13,1,0,104,13,1,0,98,2,0,0,4,0,0,0,219,210,0,0,0,0,0,0,122,13,1,0,122,13,1,0,99,2,0,0,4,0,0,0,223,210,0,0,0,0,0,0,144,13,1,0,144,13,1,0,100,2,0,0,4,0,0,0,227,210,0,0,0,0,0,0,162,13,1,0,162,13,1,0,101,2,0,0,4,0,0,0,231,210,0,0,0,0,0,0,177,13,1,0,177,13,1,0,102,2,0,0,4,0,0,0,235,210,0,0,0,0,0,0,194,13,1,0,194,13,1,0,103,2,0,0,4,0,0,0,239,210,0,0,0,0,0,0,219,13,1,0,219,13,1,0,104,2,0,0,4,0,0,0,243,210,0,0,0,0,0,0,243,13,1,0,243,13,1,0,105,2,0,0,4,0,0,0,247,210,0,0,0,0,0,0,6,14,1,0,6,14,1,0,106,2,0,0,4,0,0,0,251,210,0,0,0,0,0,0,24,14,1,0,24,14,1,0,107,2,0,0,4,0,0,0,255,210,0,0,0,0,0,0,51,14,1,0,51,14,1,0,108,2,0,0,4,0,0,0,3,211,0,0,0,0,0,0,64,14,1,0,80,14,1,0,109,2,0,0,4,0,0,0,7,211,0,0,0,0,0,0,109,14,1,0,109,14,1,0,110,2,0,0,4,0,0,0,11,211,0,0,0,0,0,0,127,14,1,0,142,14,1,0,111,2,0,0,4,0,0,0,15,211,0,0,0,0,0,0,162,14,1,0,162,14,1,0,112,2,0,0,5,0,0,0,19,211,0,0,0,0,0,0,179,14,1,0,179,14,1,0,113,2,0,0,5,0,0,0,24,211,0,0,0,0,0,0,193,14,1,0,193,14,1,0,114,2,0,0,5,0,0,0,29,211,0,0,0,0,0,0,211,14,1,0,211,14,1,0,115,2,0,0,5,0,0,0,34,211,0,0,0,0,0,0,233,14,1,0,233,14,1,0,116,2,0,0,5,0,0,0,39,211,0,0,0,0,0,0,252,14,1,0,252,14,1,0,117,2,0,0,5,0,0,0,44,211,0,0,0,0,0,0,14,15,1,0,14,15,1,0,118,2,0,0,5,0,0,0,49,211,0,0,0,0,0,0,33,15,1,0,53,15,1,0,119,2,0,0,6,0,0,0,54,211,0,0,0,0,0,0,73,15,1,0,87,15,1,0,120,2,0,0,6,0,0,0,60,211,0,0,0,0,0,0,105,15,1,0,124,15,1,0,121,2,0,0,6,0,0,0,66,211,0,0,0,0,0,0,142,15,1,0,160,15,1,0,122,2,0,0,6,0,0,0,72,211,0,0,0,0,0,0,183,15,1,0,201,15,1,0,123,2,0,0,6,0,0,0,78,211,0,0,0,0,0,0,225,15,1,0,225,15,1,0,124,2,0,0,4,0,0,0,84,211,0,0,0,0,0,0,244,15,1,0,244,15,1,0,125,2,0,0,4,0,0,0,88,211,0,0,0,0,0,0,5,16,1,0,5,16,1,0,126,2,0,0,4,0,0,0,92,211,0,0,0,0,0,0,31,16,1,0,31,16,1,0,127,2,0,0,4,0,0,0,96,211,0,0,0,0,0,0,45,16,1,0,45,16,1,0,128,2,0,0,4,0,0,0,100,211,0,0,0,0,0,0,60,16,1,0,60,16,1,0,129,2,0,0,4,0,0,0,104,211,0,0,0,0,0,0,81,16,1,0,81,16,1,0,130,2,0,0,5,0,0,0,108,211,0,0,0,0,0,0,97,16,1,0,106,16,1,0,131,2,0,0,8,0,0,0,113,211,0,0,0,0,0,0,115,16,1,0,115,16,1,0,132,2,0,0,9,0,0,0,121,211,0,0,0,0,0,0,136,16,1,0,142,16,1,0,133,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,16,1,0,164,16,1,0,134,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,16,1,0,208,16,1,0,135,2,0,0,1,0,0,0,130,211,0,0,0,0,0,0,236,16,1,0,253,16,1,0,136,2,0,0,10,0,0,0,131,211,0,0,0,0,0,0,22,17,1,0,28,17,1,0,137,2,0,0,10,0,0,0,141,211,0,0,0,0,0,0,63,17,1,0,76,17,1,0,138,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,17,1,0,102,17,1,0,139,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,17,1,0,128,17,1,0,140,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,17,1,0,154,17,1,0,141,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,17,1,0,180,17,1,0,142,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,17,1,0,206,17,1,0,143,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,219,17,1,0,228,17,1,0,144,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,17,1,0,246,17,1,0,145,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,17,1,0,13,18,1,0,146,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,18,1,0,41,18,1,0,147,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,18,1,0,62,18,1,0,148,2,0,0,3,0,0,0,151,211,0,0,0,0,0,0,76,18,1,0,76,18,1,0,149,2,0,0,3,0,0,0,154,211,0,0,0,0,0,0,87,18,1,0,87,18,1,0,150,2,0,0,7,0,0,0,157,211,0,0,0,0,0,0,94,18,1,0,108,18,1,0,151,2,0,0,8,0,0,0,164,211,0,0,0,0,0,0,138,18,1,0,157,18,1,0,152,2,0,0,8,0,0,0,172,211,0,0,0,0,0,0,170,18,1,0,188,18,1,0,153,2,0,0,8,0,0,0,180,211,0,0,0,0,0,0,200,18,1,0,216,18,1,0,154,2,0,0,3,0,0,0,188,211,0,0,0,0,0,0,240,18,1,0,3,19,1,0,155,2,0,0,8,0,0,0,191,211,0,0,0,0,0,0,15,19,1,0,26,19,1,0,156,2,0,0,9,0,0,0,199,211,0,0,0,0,0,0,50,19,1,0,61,19,1,0,157,2,0,0,9,0,0,0,208,211,0,0,0,0,0,0,85,19,1,0,96,19,1,0,158,2,0,0,9,0,0,0,217,211,0,0,0,0,0,0,120,19,1,0,131,19,1,0,159,2,0,0,9,0,0,0,226,211,0,0,0,0,0,0,155,19,1,0,162,19,1,0,160,2,0,0,9,0,0,0,235,211,0,0,0,0,0,0,169,19,1,0,176,19,1,0,161,2,0,0,9,0,0,0,244,211,0,0,0,0,0,0,183,19,1,0,190,19,1,0,162,2,0,0,9,0,0,0,253,211,0,0,0,0,0,0,197,19,1,0,204,19,1,0,163,2,0,0,9,0,0,0,6,212,0,0,0,0,0,0,211,19,1,0,211,19,1,0,164,2,0,0,1,0,0,0,15,212,0,0,0,0,0,0,235,19,1,0,235,19,1,0,165,2,0,0,3,0,0,0,16,212,0,0,0,0,0,0,248,19,1,0,248,19,1,0,166,2,0,0,2,0,0,0,19,212,0,0,0,0,0,0,252,19,1,0,252,19,1,0,167,2,0,0,3,0,0,0,21,212,0,0,0,0,0,0,4,20,1,0,4,20,1,0,168,2,0,0,8,0,0,0,24,212,0,0,0,0,0,0,32,20,1,0,32,20,1,0,169,2,0,0,9,0,0,0,32,212,0,0,0,0,0,0,40,20,1,0,40,20,1,0,170,2,0,0,9,0,0,0,41,212,0,0,0,0,0,0,48,20,1,0,48,20,1,0,171,2,0,0,9,0,0,0,50,212,0,0,0,0,0,0,56,20,1,0,56,20,1,0,172,2,0,0,8,0,0,0,59,212,0,0,0,0,0,0,67,20,1,0,67,20,1,0,173,2,0,0,8,0,0,0,67,212,0,0,0,0,0,0,78,20,1,0,78,20,1,0,174,2,0,0,8,0,0,0,75,212,0,0,0,0,0,0,89,20,1,0,89,20,1,0,175,2,0,0,8,0,0,0,83,212,0,0,0,0,0,0,100,20,1,0,100,20,1,0,176,2,0,0,8,0,0,0,91,212,0,0,0,0,0,0,111,20,1,0,111,20,1,0,177,2,0,0,8,0,0,0,99,212,0,0,0,0,0,0,122,20,1,0,122,20,1,0,178,2,0,0,8,0,0,0,107,212,0,0,0,0,0,0,133,20,1,0,133,20,1,0,179,2,0,0,8,0,0,0,115,212,0,0,0,0,0,0,144,20,1,0,144,20,1,0,180,2,0,0,8,0,0,0,123,212,0,0,0,0,0,0,155,20,1,0,155,20,1,0,181,2,0,0,8,0,0,0,131,212,0,0,0,0,0,0,166,20,1,0,166,20,1,0,182,2,0,0,8,0,0,0,139,212,0,0,0,0,0,0,177,20,1,0,177,20,1,0,183,2,0,0,8,0,0,0,147,212,0,0,0,0,0,0,188,20,1,0,188,20,1,0,184,2,0,0,8,0,0,0,155,212,0,0,0,0,0,0,199,20,1,0,199,20,1,0,185,2,0,0,8,0,0,0,163,212,0,0,0,0,0,0,210,20,1,0,210,20,1,0,186,2,0,0,8,0,0,0,171,212,0,0,0,0,0,0,221,20,1,0,221,20,1,0,187,2,0,0,8,0,0,0,179,212,0,0,0,0,0,0,232,20,1,0,232,20,1,0,188,2,0,0,8,0,0,0,187,212,0,0,0,0,0,0,243,20,1,0,243,20,1,0,189,2,0,0,8,0,0,0,195,212,0,0,0,0,0,0,254,20,1,0,254,20,1,0,190,2,0,0,8,0,0,0,203,212,0,0,0,0,0,0,9,21,1,0,9,21,1,0,191,2,0,0,8,0,0,0,211,212,0,0,0,0,0,0,20,21,1,0,20,21,1,0,192,2,0,0,5,0,0,0,219,212,0,0,0,0,0,0,30,21,1,0,30,21,1,0,193,2,0,0,5,0,0,0,224,212,0,0,0,0,0,0,40,21,1,0,40,21,1,0,194,2,0,0,5,0,0,0,229,212,0,0,0,0,0,0,50,21,1,0,50,21,1,0,195,2,0,0,5,0,0,0,234,212,0,0,0,0,0,0,60,21,1,0,60,21,1,0,196,2,0,0,5,0,0,0,239,212,0,0,0,0,0,0,70,21,1,0,70,21,1,0,197,2,0,0,5,0,0,0,244,212,0,0,0,0,0,0,80,21,1,0,80,21,1,0,198,2,0,0,5,0,0,0,249,212,0,0,0,0,0,0,90,21,1,0,90,21,1,0,199,2,0,0,5,0,0,0,254,212,0,0,0,0,0,0,100,21,1,0,100,21,1,0,200,2,0,0,5,0,0,0,3,213,0,0,0,0,0,0,110,21,1,0,110,21,1,0,201,2,0,0,5,0,0,0,8,213,0,0,0,0,0,0,120,21,1,0,120,21,1,0,202,2,0,0,5,0,0,0,13,213,0,0,0,0,0,0,130,21,1,0,130,21,1,0,203,2,0,0,5,0,0,0,18,213,0,0,0,0,0,0,140,21,1,0,140,21,1,0,204,2,0,0,5,0,0,0,23,213,0,0,0,0,0,0,150,21,1,0,150,21,1,0,205,2,0,0,5,0,0,0,28,213,0,0,0,0,0,0,160,21,1,0,160,21,1,0,206,2,0,0,5,0,0,0,33,213,0,0,0,0,0,0,170,21,1,0,170,21,1,0,207,2,0,0,5,0,0,0,38,213,0,0,0,0,0,0,180,21,1,0,180,21,1,0,208,2,0,0,5,0,0,0,43,213,0,0,0,0,0,0,190,21,1,0,190,21,1,0,209,2,0,0,5,0,0,0,48,213,0,0,0,0,0,0,200,21,1,0,200,21,1,0,210,2,0,0,5,0,0,0,53,213,0,0,0,0,0,0,210,21,1,0,210,21,1,0,211,2,0,0,5,0,0,0,58,213,0,0,0,0,0,0,220,21,1,0,220,21,1,0,212,2,0,0,5,0,0,0,63,213,0,0,0,0,0,0,230,21,1,0,230,21,1,0,213,2,0,0,5,0,0,0,68,213,0,0,0,0,0,0,240,21,1,0,240,21,1,0,214,2,0,0,5,0,0,0,73,213,0,0,0,0,0,0,250,21,1,0,250,21,1,0,215,2,0,0,5,0,0,0,78,213,0,0,0,0,0,0,4,22,1,0,4,22,1,0,216,2,0,0,5,0,0,0,83,213,0,0,0,0,0,0,14,22,1,0,14,22,1,0,217,2,0,0,5,0,0,0,88,213,0,0,0,0,0,0,24,22,1,0,24,22,1,0,218,2,0,0,5,0,0,0,93,213,0,0,0,0,0,0,34,22,1,0,34,22,1,0,219,2,0,0,5,0,0,0,98,213,0,0,0,0,0,0,44,22,1,0,44,22,1,0,220,2,0,0,5,0,0,0,103,213,0,0,0,0,0,0,54,22,1,0,54,22,1,0,221,2,0,0,5,0,0,0,108,213,0,0,0,0,0,0,64,22,1,0,64,22,1,0,222,2,0,0,5,0,0,0,113,213,0,0,0,0,0,0,74,22,1,0,74,22,1,0,223,2,0,0,5,0,0,0,118,213,0,0,0,0,0,0,97,22,1,0,97,22,1,0,224,2,0,0,5,0,0,0,123,213,0,0,0,0,0,0,120,22,1,0,120,22,1,0,225,2,0,0,5,0,0,0,128,213,0,0,0,0,0,0,143,22,1,0,143,22,1,0,226,2,0,0,5,0,0,0,133,213,0,0,0,0,0,0,166,22,1,0,166,22,1,0,227,2,0,0,5,0,0,0,138,213,0,0,0,0,0,0,189,22,1,0,189,22,1,0,228,2,0,0,5,0,0,0,143,213,0,0,0,0,0,0,212,22,1,0,212,22,1,0,229,2,0,0,5,0,0,0,148,213,0,0,0,0,0,0,235,22,1,0,235,22,1,0,230,2,0,0,5,0,0,0,153,213,0,0,0,0,0,0,2,23,1,0,2,23,1,0,231,2,0,0,5,0,0,0,158,213,0,0,0,0,0,0,26,23,1,0,26,23,1,0,232,2,0,0,5,0,0,0,163,213,0,0,0,0,0,0,50,23,1,0,50,23,1,0,233,2,0,0,5,0,0,0,168,213,0,0,0,0,0,0,74,23,1,0,84,23,1,0,234,2,0,0,4,0,0,0,173,213,0,0,0,0,0,0,102,23,1,0,117,23,1,0,235,2,0,0,3,0,0,0,177,213,0,0,0,0,0,0,140,23,1,0,157,23,1,0,236,2,0,0,3,0,0,0,180,213,0,0,0,0,0,0,183,23,1,0,197,23,1,0,237,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,23,1,0,218,23,1,0,238,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,23,1,0,242,23,1,0,239,2,0,0,11,0,0,0,183,213,0,0,0,0,0,0,3,24,1,0,20,24,1,0,240,2,0,0,11,0,0,0,194,213,0,0,0,0,0,0,37,24,1,0,54,24,1,0,241,2,0,0,11,0,0,0,205,213,0,0,0,0,0,0,71,24,1,0,88,24,1,0,242,2,0,0,8,0,0,0,216,213,0,0,0,0,0,0,105,24,1,0,122,24,1,0,243,2,0,0,8,0,0,0,224,213,0,0,0,0,0,0,139,24,1,0,156,24,1,0,244,2,0,0,8,0,0,0,232,213,0,0,0,0,0,0,173,24,1,0,190,24,1,0,245,2,0,0,8,0,0,0,240,213,0,0,0,0,0,0,207,24,1,0,224,24,1,0,246,2,0,0,8,0,0,0,248,213,0,0,0,0,0,0,241,24,1,0,2,25,1,0,247,2,0,0,8,0,0,0,0,214,0,0,0,0,0,0,19,25,1,0,37,25,1,0,248,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,25,1,0,73,25,1,0,249,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,25,1,0,109,25,1,0,250,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,25,1,0,145,25,1,0,251,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,25,1,0,181,25,1,0,252,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,25,1,0,217,25,1,0,253,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,25,1,0,252,25,1,0,254,2,0,0,8,0,0,0,8,214,0,0,0,0,0,0,13,26,1,0,30,26,1,0,255,2,0,0,8,0,0,0,16,214,0,0,0,0,0,0,47,26,1,0,64,26,1,0,0,3,0,0,8,0,0,0,24,214,0,0,0,0,0,0,81,26,1,0,108,26,1,0,1,3,0,0,3,0,0,0,32,214,0,0,0,0,0,0,144,26,1,0,169,26,1,0,2,3,0,0,3,0,0,0,35,214,0,0,0,0,0,0,203,26,1,0,221,26,1,0,3,3,0,0,3,0,0,0,38,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,26,1,0,252,26,1,0,5,3,0,0,6,0,0,0,41,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,27,1,0,10,27,1,0,8,3,0,0,8,0,0,0,47,214,0,0,0,0,0,0,19,27,1,0,28,27,1,0,9,3,0,0,8,0,0,0,55,214,0,0,0,0,0,0,37,27,1,0,46,27,1,0,10,3,0,0,8,0,0,0,63,214,0,0,0,0,0,0,55,27,1,0,64,27,1,0,11,3,0,0,8,0,0,0,71,214,0,0,0,0,0,0,73,27,1,0,82,27,1,0,12,3,0,0,8,0,0,0,79,214,0,0,0,0,0,0,91,27,1,0,101,27,1,0,13,3,0,0,8,0,0,0,87,214,0,0,0,0,0,0,111,27,1,0,131,27,1,0,14,3,0,0,9,0,0,0,95,214,0,0,0,0,0,0,150,27,1,0,164,27,1,0,15,3,0,0,9,0,0,0,104,214,0,0,0,0,0,0,189,27,1,0,189,27,1,0,16,3,0,0,8,0,0,0,113,214,0,0,0,0,0,0,208,27,1,0,221,27,1,0,17,3,0,0,8,0,0,0,121,214,0,0,0,0,0,0,235,27,1,0,235,27,1,0,18,3,0,0,11,0,0,0,129,214,0,0,0,0,0,0,6,28,1,0,6,28,1,0,19,3,0,0,11,0,0,0,140,214,0,0,0,0,0,0,30,28,1,0,30,28,1,0,20,3,0,0,9,0,0,0,151,214,0,0,0,0,0,0,45,28,1,0,45,28,1,0,21,3,0,0,9,0,0,0,160,214,0,0,0,0,0,0,60,28,1,0,60,28,1,0,22,3,0,0,9,0,0,0,169,214,0,0,0,0,0,0,75,28,1,0,75,28,1,0,23,3,0,0,7,0,0,0,178,214,0,0,0,0,0,0,98,28,1,0,98,28,1,0,24,3,0,0,7,0,0,0,185,214,0,0,0,0,0,0,119,28,1,0,119,28,1,0,25,3,0,0,8,0,0,0,192,214,0,0,0,0,0,0,137,28,1,0,137,28,1,0,26,3,0,0,8,0,0,0,200,214,0,0,0,0,0,0,155,28,1,0,155,28,1,0,27,3,0,0,8,0,0,0,208,214,0,0,0,0,0,0,173,28,1,0,173,28,1,0,28,3,0,0,8,0,0,0,216,214,0,0,0,0,0,0,191,28,1,0,191,28,1,0,29,3,0,0,8,0,0,0,224,214,0,0,0,0,0,0,203,28,1,0,203,28,1,0,30,3,0,0,8,0,0,0,232,214,0,0,0,0,0,0,218,28,1,0,218,28,1,0,31,3,0,0,8,0,0,0,240,214,0,0,0,0,0,0,233,28,1,0,233,28,1,0,32,3,0,0,8,0,0,0,248,214,0,0,0,0,0,0,248,28,1,0,248,28,1,0,33,3,0,0,8,0,0,0,0,215,0,0,0,0,0,0,7,29,1,0,7,29,1,0,34,3,0,0,9,0,0,0,8,215,0,0,0,0,0,0,23,29,1,0,23,29,1,0,35,3,0,0,9,0,0,0,17,215,0,0,0,0,0,0,39,29,1,0,39,29,1,0,36,3,0,0,6,0,0,0,26,215,0,0,0,0,0,0,49,29,1,0,49,29,1,0,37,3,0,0,5,0,0,0,32,215,0,0,0,0,0,0,59,29,1,0,59,29,1,0,38,3,0,0,5,0,0,0,37,215,0,0,0,0,0,0,69,29,1,0,105,29,1,0,39,3,0,0,6,0,0,0,42,215,0,0,0,0,0,0,144,29,1,0,178,29,1,0,40,3,0,0,6,0,0,0,48,215,0,0,0,0,0,0,215,29,1,0,225,29,1,0,41,3,0,0,6,0,0,0,54,215,0,0,0,0,0,0,241,29,1,0,5,30,1,0,42,3,0,0,6,0,0,0,60,215,0,0,0,0,0,0,24,30,1,0,33,30,1,0,43,3,0,0,6,0,0,0,66,215,0,0,0,0,0,0,51,30,1,0,58,30,1,0,44,3,0,0,6,0,0,0,72,215,0,0,0,0,0,0,74,30,1,0,81,30,1,0,45,3,0,0,6,0,0,0,78,215,0,0,0,0,0,0,95,30,1,0,95,30,1,0,46,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,30,1,0,115,30,1,0,47,3,0,0,6,0,0,0,84,215,0,0,0,0,0,0,133,30,1,0,150,30,1,0,48,3,0,0,6,0,0,0,90,215,0,0,0,0,0,0,170,30,1,0,190,30,1,0,49,3,0,0,6,0,0,0,96,215,0,0,0,0,0,0,211,30,1,0,229,30,1,0,50,3,0,0,6,0,0,0,102,215,0,0,0,0,0,0,248,30,1,0,248,30,1,0,51,3,0,0,7,0,0,0,108,215,0,0,0,0,0,0,29,31,1,0,29,31,1,0,52,3,0,0,7,0,0,0,115,215,0,0,0,0,0,0,61,31,1,0,61,31,1,0,53,3,0,0,7,0,0,0,122,215,0,0,0,0,0,0,90,31,1,0,90,31,1,0,54,3,0,0,7,0,0,0,129,215,0,0,0,0,0,0,124,31,1,0,124,31,1,0,55,3,0,0,7,0,0,0,136,215,0,0,0,0,0,0,153,31,1,0,153,31,1,0,56,3,0,0,7,0,0,0,143,215,0,0,0,0,0,0,190,31,1,0,190,31,1,0,57,3,0,0,7,0,0,0,150,215,0,0,0,0,0,0,227,31,1,0,227,31,1,0,58,3,0,0,7,0,0,0,157,215,0,0,0,0,0,0,8,32,1,0,8,32,1,0,59,3,0,0,7,0,0,0,164,215,0,0,0,0,0,0,45,32,1,0,45,32,1,0,60,3,0,0,7,0,0,0,171,215,0,0,0,0,0,0,90,32,1,0,90,32,1,0,61,3,0,0,7,0,0,0,178,215,0,0,0,0,0,0,135,32,1,0,135,32,1,0,62,3,0,0,7,0,0,0,185,215,0,0,0,0,0,0,176,32,1,0,176,32,1,0,63,3,0,0,7,0,0,0,192,215,0,0,0,0,0,0,205,32,1,0,205,32,1,0,64,3,0,0,7,0,0,0,199,215,0,0,0,0,0,0,242,32,1,0,242,32,1,0,65,3,0,0,7,0,0,0,206,215,0,0,0,0,0,0,23,33,1,0,23,33,1,0,66,3,0,0,7,0,0,0,213,215,0,0,0,0,0,0,60,33,1,0,60,33,1,0,67,3,0,0,7,0,0,0,220,215,0,0,0,0,0,0,97,33,1,0,97,33,1,0,68,3,0,0,7,0,0,0,227,215,0,0,0,0,0,0,137,33,1,0,137,33,1,0,69,3,0,0,7,0,0,0,234,215,0,0,0,0,0,0,177,33,1,0,177,33,1,0,70,3,0,0,7,0,0,0,241,215,0,0,0,0,0,0,217,33,1,0,217,33,1,0,71,3,0,0,7,0,0,0,248,215,0,0,0,0,0,0,248,33,1,0,248,33,1,0,72,3,0,0,7,0,0,0,255,215,0,0,0,0,0,0,31,34,1,0,31,34,1,0,73,3,0,0,7,0,0,0,6,216,0,0,0,0,0,0,70,34,1,0,70,34,1,0,74,3,0,0,7,0,0,0,13,216,0,0,0,0,0,0,109,34,1,0,109,34,1,0,75,3,0,0,7,0,0,0,20,216,0,0,0,0,0,0,151,34,1,0,151,34,1,0,76,3,0,0,7,0,0,0,27,216,0,0,0,0,0,0,193,34,1,0,193,34,1,0,77,3,0,0,7,0,0,0,34,216,0,0,0,0,0,0,211,34,1,0,211,34,1,0,78,3,0,0,7,0,0,0,41,216,0,0,0,0,0,0,232,34,1,0,232,34,1,0,79,3,0,0,7,0,0,0,48,216,0,0,0,0,0,0,250,34,1,0,250,34,1,0,80,3,0,0,7,0,0,0,55,216,0,0,0,0,0,0,15,35,1,0,34,35,1,0,81,3,0,0,8,0,0,0,62,216,0,0,0,0,0,0,67,35,1,0,76,35,1,0,82,3,0,0,8,0,0,0,70,216,0,0,0,0,0,0,100,35,1,0,111,35,1,0,83,3,0,0,8,0,0,0,78,216,0,0,0,0,0,0,137,35,1,0,174,35,1,0,84,3,0,0,8,0,0,0,86,216,0,0,0,0,0,0,221,35,1,0,4,36,1,0,85,3,0,0,8,0,0,0,94,216,0,0,0,0,0,0,53,36,1,0,83,36,1,0,86,3,0,0,8,0,0,0,102,216,0,0,0,0,0,0,124,36,1,0,129,36,1,0,87,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,134,36,1,0,146,36,1,0,88,3,0,0,9,0,0,0,110,216,0,0,0,0,0,0,170,36,1,0,182,36,1,0,89,3,0,0,3,0,0,0,119,216,0,0,0,0,0,0,202,36,1,0,228,36,1,0,90,3,0,0,8,0,0,0,122,216,0,0,0,0,0,0,249,36,1,0,249,36,1,0,91,3,0,0,3,0,0,0,130,216,0,0,0,0,0,0,5,37,1,0,5,37,1,0,92,3,0,0,3,0,0,0,133,216,0,0,0,0,0,0,22,37,1,0,22,37,1,0,93,3,0,0,3,0,0,0,136,216,0,0,0,0,0,0,36,37,1,0,36,37,1,0,94,3,0,0,3,0,0,0,139,216,0,0,0,0,0,0,50,37,1,0,50,37,1,0,95,3,0,0,3,0,0,0,142,216,0,0,0,0,0,0,77,37,1,0,77,37,1,0,96,3,0,0,3,0,0,0,145,216,0,0,0,0,0,0,93,37,1,0,93,37,1,0,97,3,0,0,3,0,0,0,148,216,0,0,0,0,0,0,105,37,1,0,105,37,1,0,98,3,0,0,3,0,0,0,151,216,0,0,0,0,0,0,131,37,1,0,131,37,1,0,99,3,0,0,3,0,0,0,154,216,0,0,0,0,0,0,156,37,1,0,156,37,1,0,100,3,0,0,3,0,0,0,157,216,0,0,0,0,0,0,168,37,1,0,168,37,1,0,101,3,0,0,3,0,0,0,160,216,0,0,0,0,0,0,192,37,1,0,192,37,1,0,102,3,0,0,3,0,0,0,163,216,0,0,0,0,0,0,210,37,1,0,210,37,1,0,103,3,0,0,3,0,0,0,166,216,0,0,0,0,0,0,231,37,1,0,231,37,1,0,104,3,0,0,3,0,0,0,169,216,0,0,0,0,0,0,255,37,1,0,255,37,1,0,105,3,0,0,3,0,0,0,172,216,0,0,0,0,0,0,19,38,1,0,19,38,1,0,106,3,0,0,3,0,0,0,175,216,0,0,0,0,0,0,47,38,1,0,47,38,1,0,107,3,0,0,3,0,0,0,178,216,0,0,0,0,0,0,54,38,1,0,54,38,1,0,108,3,0,0,3,0,0,0,181,216,0,0,0,0,0,0,60,38,1,0,60,38,1,0,109,3,0,0,3,0,0,0,184,216,0,0,0,0,0,0,73,38,1,0,73,38,1,0,110,3,0,0,3,0,0,0,187,216,0,0,0,0,0,0,81,38,1,0,81,38,1,0,111,3,0,0,3,0,0,0,190,216,0,0,0,0,0,0,94,38,1,0,94,38,1,0,112,3,0,0,3,0,0,0,193,216,0,0,0,0,0,0,110,38,1,0,110,38,1,0,113,3,0,0,3,0,0,0,196,216,0,0,0,0,0,0,124,38,1,0,124,38,1,0,114,3,0,0,3,0,0,0,199,216,0,0,0,0,0,0,148,38,1,0,148,38,1,0,115,3,0,0,3,0,0,0,202,216,0,0,0,0,0,0,174,38,1,0,174,38,1,0,116,3,0,0,3,0,0,0,205,216,0,0,0,0,0,0,195,38,1,0,195,38,1,0,117,3,0,0,3,0,0,0,208,216,0,0,0,0,0,0,215,38,1,0,215,38,1,0,118,3,0,0,3,0,0,0,211,216,0,0,0,0,0,0,235,38,1,0,235,38,1,0,119,3,0,0,3,0,0,0,214,216,0,0,0,0,0,0,253,38,1,0,253,38,1,0,120,3,0,0,3,0,0,0,217,216,0,0,0,0,0,0,10,39,1,0,10,39,1,0,121,3,0,0,3,0,0,0,220,216,0,0,0,0,0,0,26,39,1,0,26,39,1,0,122,3,0,0,3,0,0,0,223,216,0,0,0,0,0,0,46,39,1,0,46,39,1,0,123,3,0,0,3,0,0,0,226,216,0,0,0,0,0,0,66,39,1,0,66,39,1,0,124,3,0,0,3,0,0,0,229,216,0,0,0,0,0,0,74,39,1,0,74,39,1,0,125,3,0,0,11,0,0,0,232,216,0,0,0,0,0,0,90,39,1,0,95,39,1,0,126,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,39,1,0,114,39,1,0,127,3,0,0,9,0,0,0,243,216,0,0,0,0,0,0,126,39,1,0,140,39,1,0,128,3,0,0,9,0,0,0,252,216,0,0,0,0,0,0,152,39,1,0,152,39,1,0,129,3,0,0,9,0,0,0,5,217,0,0,0,0,0,0,171,39,1,0,185,39,1,0,130,3,0,0,9,0,0,0,14,217,0,0,0,0,0,0,197,39,1,0,211,39,1,0,131,3,0,0,9,0,0,0,23,217,0,0,0,0,0,0,223,39,1,0,223,39,1,0,132,3,0,0,9,0,0,0,32,217,0,0,0,0,0,0,242,39,1,0,0,40,1,0,133,3,0,0,9,0,0,0,41,217,0,0,0,0,0,0,12,40,1,0,26,40,1,0,134,3,0,0,9,0,0,0,50,217,0,0,0,0,0,0,38,40,1,0,38,40,1,0,135,3,0,0,9,0,0,0,59,217,0,0,0,0,0,0,57,40,1,0,69,40,1,0,136,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,40,1,0,93,40,1,0,137,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,40,1,0,117,40,1,0,138,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,40,1,0,129,40,1,0,139,3,0,0,11,0,0,0,68,217,0,0,0,0,0,0,149,40,1,0,149,40,1,0,140,3,0,0,11,0,0,0,79,217,0,0,0,0,0,0,169,40,1,0,169,40,1,0,141,3,0,0,11,0,0,0,90,217,0,0,0,0,0,0,189,40,1,0,209,40,1,0,142,3,0,0,4,0,0,0,101,217,0,0,0,0,0,0,232,40,1,0,237,40,1,0,143,3,0,0,9,0,0,0,105,217,0,0,0,0,0,0,242,40,1,0,253,40,1,0,144,3,0,0,9,0,0,0,114,217,0,0,0,0,0,0,7,41,1,0,19,41,1,0,145,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,41,1,0,43,41,1,0,146,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,41,1,0,68,41,1,0,147,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,41,1,0,103,41,1,0,148,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,41,1,0,147,41,1,0,149,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,41,1,0,191,41,1,0,150,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,41,1,0,224,41,1,0,151,3,0,0,9,0,0,0,123,217,0,0,0,0,0,0,234,41,1,0,249,41,1,0,152,3,0,0,7,0,0,0,132,217,0,0,0,0,0,0,2,42,1,0,2,42,1,0,153,3,0,0,9,0,0,0,139,217,0,0,0,0,0,0,18,42,1,0,18,42,1,0,154,3,0,0,9,0,0,0,148,217,0,0,0,0,0,0,34,42,1,0,34,42,1,0,155,3,0,0,9,0,0,0,157,217,0,0,0,0,0,0,50,42,1,0,50,42,1,0,156,3,0,0,9,0,0,0,166,217,0,0,0,0,0,0,66,42,1,0,66,42,1,0,157,3,0,0,9,0,0,0,175,217,0,0,0,0,0,0,82,42,1,0,82,42,1,0,158,3,0,0,9,0,0,0,184,217,0,0,0,0,0,0,98,42,1,0,98,42,1,0,159,3,0,0,9,0,0,0,193,217,0,0,0,0,0,0,114,42,1,0,114,42,1,0,160,3,0,0,9,0,0,0,202,217,0,0,0,0,0,0,130,42,1,0,130,42,1,0,161,3,0,0,9,0,0,0,211,217,0,0,0,0,0,0,146,42,1,0,146,42,1,0,162,3,0,0,9,0,0,0,220,217,0,0,0,0,0,0,162,42,1,0,162,42,1,0,163,3,0,0,9,0,0,0,229,217,0,0,0,0,0,0,178,42,1,0,178,42,1,0,164,3,0,0,9,0,0,0,238,217,0,0,0,0,0,0,194,42,1,0,194,42,1,0,165,3,0,0,9,0,0,0,247,217,0,0,0,0,0,0,210,42,1,0,210,42,1,0,166,3,0,0,9,0,0,0,0,218,0,0,0,0,0,0,226,42,1,0,237,42,1,0,167,3,0,0,9,0,0,0,9,218,0,0,0,0,0,0,248,42,1,0,248,42,1,0,168,3,0,0,9,0,0,0,18,218,0,0,0,0,0,0,26,43,1,0,26,43,1,0,169,3,0,0,6,0,0,0,27,218,0,0,0,0,0,0,62,43,1,0,62,43,1,0,170,3,0,0,6,0,0,0,33,218,0,0,0,0,0,0,98,43,1,0,98,43,1,0,171,3,0,0,6,0,0,0,39,218,0,0,0,0,0,0,134,43,1,0,134,43,1,0,172,3,0,0,6,0,0,0,45,218,0,0,0,0,0,0,170,43,1,0,170,43,1,0,173,3,0,0,9,0,0,0,51,218,0,0,0,0,0,0,209,43,1,0,209,43,1,0,174,3,0,0,6,0,0,0,60,218,0,0,0,0,0,0,250,43,1,0,250,43,1,0,175,3,0,0,6,0,0,0,66,218,0,0,0,0,0,0,35,44,1,0,35,44,1,0,176,3,0,0,6,0,0,0,72,218,0,0,0,0,0,0,76,44,1,0,76,44,1,0,177,3,0,0,6,0,0,0,78,218,0,0,0,0,0,0,117,44,1,0,117,44,1,0,178,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,44,1,0,128,44,1,0,179,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,44,1,0,168,44,1,0,180,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,44,1,0,216,44,1,0,181,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,44,1,0,8,45,1,0,182,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,45,1,0,48,45,1,0,183,3,0,0,10,0,0,0,84,218,0,0,0,0,0,0,71,45,1,0,89,45,1,0,184,3,0,0,10,0,0,0,94,218,0,0,0,0,0,0,114,45,1,0,132,45,1,0,185,3,0,0,10,0,0,0,104,218,0,0,0,0,0,0,157,45,1,0,170,45,1,0,186,3,0,0,10,0,0,0,114,218,0,0,0,0,0,0,190,45,1,0,204,45,1,0,187,3,0,0,11,0,0,0,124,218,0,0,0,0,0,0,229,45,1,0,244,45,1,0,188,3,0,0,11,0,0,0,135,218,0,0,0,0,0,0,20,46,1,0,34,46,1,0,189,3,0,0,11,0,0,0,146,218,0,0,0,0,0,0,58,46,1,0,70,46,1,0,190,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,46,1,0,94,46,1,0,191,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,46,1,0,118,46,1,0,192,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,46,1,0,147,46,1,0,193,3,0,0,8,0,0,0,157,218,0,0,0,0,0,0,164,46,1,0,181,46,1,0,194,3,0,0,8,0,0,0,165,218,0,0,0,0,0,0,198,46,1,0,215,46,1,0,195,3,0,0,8,0,0,0,173,218,0,0,0,0,0,0,232,46,1,0,250,46,1,0,196,3,0,0,8,0,0,0,181,218,0,0,0,0,0,0,12,47,1,0,29,47,1,0,197,3,0,0,8,0,0,0,189,218,0,0,0,0,0,0,46,47,1,0,63,47,1,0,198,3,0,0,8,0,0,0,197,218,0,0,0,0,0,0,80,47,1,0,97,47,1,0,199,3,0,0,8,0,0,0,205,218,0,0,0,0,0,0,114,47,1,0,132,47,1,0,200,3,0,0,8,0,0,0,213,218,0,0,0,0,0,0,150,47,1,0,167,47,1,0,201,3,0,0,8,0,0,0,221,218,0,0,0,0,0,0,184,47,1,0,201,47,1,0,202,3,0,0,8,0,0,0,229,218,0,0,0,0,0,0,218,47,1,0,235,47,1,0,203,3,0,0,8,0,0,0,237,218,0,0,0,0,0,0,252,47,1,0,14,48,1,0,204,3,0,0,8,0,0,0,245,218,0,0,0,0,0,0,32,48,1,0,32,48,1,0,205,3,0,0,9,0,0,0,253,218,0,0,0,0,0,0,42,48,1,0,42,48,1,0,206,3,0,0,5,0,0,0,6,219,0,0,0,0,0,0,50,48,1,0,50,48,1,0,207,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,48,1,0,64,48,1,0,208,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,48,1,0,76,48,1,0,209,3,0,0,6,0,0,0,11,219,0,0,0,0,0,0,95,48,1,0,95,48,1,0,210,3,0,0,7,0,0,0,17,219,0,0,0,0,0,0,108,48,1,0,121,48,1,0,211,3,0,0,8,0,0,0,24,219,0,0,0,0,0,0,160,48,1,0,173,48,1,0,212,3,0,0,8,0,0,0,32,219,0,0,0,0,0,0,212,48,1,0,212,48,1,0,213,3,0,0,7,0,0,0,40,219,0,0,0,0,0,0,227,48,1,0,241,48,1,0,214,3,0,0,8,0,0,0,47,219,0,0,0,0,0,0,21,49,1,0,35,49,1,0,215,3,0,0,8,0,0,0,55,219,0,0,0,0,0,0,71,49,1,0,71,49,1,0,216,3,0,0,7,0,0,0,63,219,0,0,0,0,0,0,94,49,1,0,135,49,1,0,217,3,0,0,8,0,0,0,70,219,0,0,0,0,0,0,186,49,1,0,227,49,1,0,218,3,0,0,8,0,0,0,78,219,0,0,0,0,0,0,22,50,1,0,22,50,1,0,219,3,0,0,7,0,0,0,86,219,0,0,0,0,0,0,34,50,1,0,66,50,1,0,220,3,0,0,8,0,0,0,93,219,0,0,0,0,0,0,95,50,1,0,127,50,1,0,221,3,0,0,8,0,0,0,101,219,0,0,0,0,0,0,156,50,1,0,156,50,1,0,222,3,0,0,7,0,0,0,109,219,0,0,0,0,0,0,171,50,1,0,171,50,1,0,223,3,0,0,7,0,0,0,116,219,0,0,0,0,0,0,189,50,1,0,189,50,1,0,224,3,0,0,8,0,0,0,123,219,0,0,0,0,0,0,226,50,1,0,226,50,1,0,225,3,0,0,8,0,0,0,131,219,0,0,0,0,0,0,7,51,1,0,7,51,1,0,226,3,0,0,6,0,0,0,139,219,0,0,0,0,0,0,25,51,1,0,25,51,1,0,227,3,0,0,7,0,0,0,145,219,0,0,0,0,0,0,48,51,1,0,48,51,1,0,228,3,0,0,8,0,0,0,152,219,0,0,0,0,0,0,85,51,1,0,125,51,1,0,229,3,0,0,9,0,0,0,160,219,0,0,0,0,0,0,175,51,1,0,212,51,1,0,230,3,0,0,9,0,0,0,169,219,0,0,0,0,0,0,251,51,1,0,32,52,1,0,231,3,0,0,9,0,0,0,178,219,0,0,0,0,0,0,71,52,1,0,71,52,1,0,232,3,0,0,7,0,0,0,187,219,0,0,0,0,0,0,96,52,1,0,96,52,1,0,233,3,0,0,7,0,0,0,194,219,0,0,0,0,0,0,121,52,1,0,121,52,1,0,234,3,0,0,8,0,0,0,201,219,0,0,0,0,0,0,150,52,1,0,177,52,1,0,235,3,0,0,9,0,0,0,209,219,0,0,0,0,0,0,210,52,1,0,210,52,1,0,236,3,0,0,8,0,0,0,218,219,0,0,0,0,0,0,214,52,1,0,214,52,1,0,237,3,0,0,5,0,0,0,226,219,0,0,0,0,0,0,219,52,1,0,219,52,1,0,238,3,0,0,5,0,0,0,231,219,0,0,0,0,0,0,225,52,1,0,241,52,1,0,239,3,0,0,5,0,0,0,236,219,0,0,0,0,0,0,9,53,1,0,24,53,1,0,240,3,0,0,5,0,0,0,241,219,0,0,0,0,0,0,47,53,1,0,47,53,1,0,241,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,53,1,0,58,53,1,0,242,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,53,1,0,69,53,1,0,243,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,53,1,0,80,53,1,0,244,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,53,1,0,96,53,1,0,245,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,53,1,0,112,53,1,0,246,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,53,1,0,128,53,1,0,247,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,53,1,0,144,53,1,0,248,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,53,1,0,160,53,1,0,249,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,53,1,0,194,53,1,0,250,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,53,1,0,221,53,1,0,251,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,53,1,0,241,53,1,0,252,3,0,0,8,0,0,0,246,219,0,0,0,0,0,0,253,53,1,0,6,54,1,0,253,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,54,1,0,24,54,1,0,254,3,0,0,8,0,0,0,254,219,0,0,0,0,0,0,52,54,1,0,61,54,1,0,255,3,0,0,8,0,0,0,6,220,0,0,0,0,0,0,87,54,1,0,97,54,1,0,0,4,0,0,8,0,0,0,14,220,0,0,0,0,0,0,128,54,1,0,146,54,1,0,1,4,0,0,8,0,0,0,22,220,0,0,0,0,0,0,157,54,1,0,175,54,1,0,2,4,0,0,8,0,0,0,30,220,0,0,0,0,0,0,186,54,1,0,197,54,1,0,3,4,0,0,8,0,0,0,38,220,0,0,0,0,0,0,209,54,1,0,227,54,1,0,4,4,0,0,8,0,0,0,46,220,0,0,0,0,0,0,247,54,1,0,1,55,1,0,5,4,0,0,8,0,0,0,54,220,0,0,0,0,0,0,12,55,1,0,29,55,1,0,6,4,0,0,8,0,0,0,62,220,0,0,0,0,0,0,48,55,1,0,48,55,1,0,7,4,0,0,6,0,0,0,70,220,0,0,0,0,0,0,58,55,1,0,75,55,1,0,8,4,0,0,7,0,0,0,76,220,0,0,0,0,0,0,94,55,1,0,104,55,1,0,9,4,0,0,7,0,0,0,83,220,0,0,0,0,0,0,125,55,1,0,125,55,1,0,10,4,0,0,3,0,0,0,90,220,0,0,0,0,0,0,132,55,1,0,132,55,1,0,11,4,0,0,3,0,0,0,93,220,0,0,0,0,0,0,137,55,1,0,142,55,1,0,12,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,55,1,0,153,55,1,0,13,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,55,1,0,168,55,1,0,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,55,1,0,183,55,1,0,15,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,55,1,0,202,55,1,0,16,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,55,1,0,225,55,1,0,17,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,55,1,0,246,55,1,0,18,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,56,1,0,7,56,1,0,19,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,56,1,0,20,56,1,0,20,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,56,1,0,34,56,1,0,21,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,56,1,0,50,56,1,0,22,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,56,1,0,69,56,1,0,23,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,56,1,0,88,56,1,0,24,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,56,1,0,105,56,1,0,25,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,56,1,0,125,56,1,0,26,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,56,1,0,148,56,1,0,27,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,56,1,0,168,56,1,0,28,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,56,1,0,186,56,1,0,29,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,56,1,0,207,56,1,0,32,4,0,0,11,0,0,0,96,220,0,0,0,0,0,0,218,56,1,0,229,56,1,0,33,4,0,0,11,0,0,0,107,220,0,0,0,0,0,0,240,56,1,0,240,56,1,0,34,4,0,0,11,0,0,0,118,220,0,0,0,0,0,0,14,57,1,0,14,57,1,0,35,4,0,0,11,0,0,0,129,220,0,0,0,0,0,0,44,57,1,0,44,57,1,0,36,4,0,0,11,0,0,0,140,220,0,0,0,0,0,0,0,0,0,0,181,0,0,0,137,1,0,0,148,1,0,0,133,2,0,0,134,2,0,0,178,1,0,0,182,0,0,0,123,1,0,0,164,2,0,0,11,0,0,0,135,2,0,0,124,1,0,0,12,0,0,0,122,1,0,0,81,0,0,0,0,2,0,0,166,2,0,0,179,1,0,0,183,0,0,0,125,1,0,0,10,4,0,0,11,4,0,0,165,2,0,0,138,1,0,0,13,0,0,0,100,0,0,0,105,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,148,2,0,0,17,0,0,0,18,0,0,0,106,0,0,0,107,0,0,0,91,3,0,0,92,3,0,0,93,3,0,0,149,2,0,0,94,3,0,0,95,3,0,0,96,3,0,0,97,3,0,0,98,3,0,0,99,3,0,0,100,3,0,0,101,3,0,0,102,3,0,0,103,3,0,0,104,3,0,0,105,3,0,0,106,3,0,0,107,3,0,0,108,3,0,0,109,3,0,0,110,3,0,0,111,3,0,0,112,3,0,0,113,3,0,0,114,3,0,0,115,3,0,0,116,3,0,0,173,0,0,0,99,0,0,0,101,0,0,0,253,1,0,0,247,1,0,0,174,0,0,0,117,3,0,0,118,3,0,0,119,3,0,0,120,3,0,0,121,3,0,0,122,3,0,0,123,3,0,0,124,3,0,0,254,1,0,0,144,1,0,0,1,3,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,141,0,0,0,174,1,0,0,142,0,0,0,140,0,0,0,2,3,0,0,3,3,0,0,154,2,0,0,103,0,0,0,89,0,0,0,235,2,0,0,90,0,0,0,145,1,0,0,126,0,0,0,89,3,0,0,236,2,0,0,146,1,0,0,147,1,0,0,1,2,0,0,2,2,0,0,3,2,0,0,4,2,0,0,5,2,0,0,6,2,0,0,167,2,0,0,126,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,130,1,0,0,131,1,0,0,132,1,0,0,120,1,0,0,139,1,0,0,19,0,0,0,96,0,0,0,95,0,0,0,234,2,0,0,142,3,0,0,7,2,0,0,8,2,0,0,9,2,0,0,10,2,0,0,11,2,0,0,12,2,0,0,13,2,0,0,14,2,0,0,15,2,0,0,16,2,0,0,17,2,0,0,18,2,0,0,19,2,0,0,20,2,0,0,21,2,0,0,22,2,0,0,23,2,0,0,24,2,0,0,25,2,0,0,26,2,0,0,27,2,0,0,28,2,0,0,29,2,0,0,30,2,0,0,31,2,0,0,32,2,0,0,33,2,0,0,34,2,0,0,35,2,0,0,36,2,0,0,37,2,0,0,38,2,0,0,39,2,0,0,40,2,0,0,41,2,0,0,42,2,0,0,43,2,0,0,44,2,0,0,45,2,0,0,46,2,0,0,47,2,0,0,48,2,0,0,49,2,0,0,50,2,0,0,51,2,0,0,52,2,0,0,53,2,0,0,54,2,0,0,55,2,0,0,56,2,0,0,57,2,0,0,58,2,0,0,59,2,0,0,60,2,0,0,61,2,0,0,62,2,0,0,63,2,0,0,64,2,0,0,65,2,0,0,66,2,0,0,67,2,0,0,68,2,0,0,69,2,0,0,70,2,0,0,71,2,0,0,72,2,0,0,73,2,0,0,74,2,0,0,75,2,0,0,76,2,0,0,77,2,0,0,78,2,0,0,79,2,0,0,80,2,0,0,81,2,0,0,82,2,0,0,83,2,0,0,84,2,0,0,85,2,0,0,86,2,0,0,87,2,0,0,88,2,0,0,89,2,0,0,90,2,0,0,91,2,0,0,92,2,0,0,93,2,0,0,94,2,0,0,108,2,0,0,109,2,0,0,110,2,0,0,111,2,0,0,95,2,0,0,96,2,0,0,97,2,0,0,98,2,0,0,99,2,0,0,100,2,0,0,101,2,0,0,102,2,0,0,103,2,0,0,104,2,0,0,105,2,0,0,106,2,0,0,107,2,0,0,124,2,0,0,128,2,0,0,129,2,0,0,125,2,0,0,126,2,0,0,127,2,0,0,37,3,0,0,38,3,0,0,206,3,0,0,237,3,0,0,238,3,0,0,239,3,0,0,240,3,0,0,184,0,0,0,149,1,0,0,133,1,0,0,248,1,0,0,104,0,0,0,29,0,0,0,31,0,0,0,45,0,0,0,30,0,0,0,121,1,0,0,67,0,0,0,66,0,0,0,42,0,0,0,32,0,0,0,41,0,0,0,64,0,0,0,70,0,0,0,115,0,0,0,117,0,0,0,143,0,0,0,209,2,0,0,210,2,0,0,216,2,0,0,205,2,0,0,206,2,0,0,192,2,0,0,193,2,0,0,197,2,0,0,196,2,0,0,202,2,0,0,211,2,0,0,217,2,0,0,218,2,0,0,207,2,0,0,208,2,0,0,212,2,0,0,213,2,0,0,214,2,0,0,215,2,0,0,194,2,0,0,195,2,0,0,198,2,0,0,199,2,0,0,200,2,0,0,201,2,0,0,203,2,0,0,204,2,0,0,219,2,0,0,220,2,0,0,221,2,0,0,222,2,0,0,112,2,0,0,113,2,0,0,114,2,0,0,115,2,0,0,116,2,0,0,117,2,0,0,118,2,0,0,130,2,0,0,223,2,0,0,224,2,0,0,225,2,0,0,226,2,0,0,227,2,0,0,228,2,0,0,229,2,0,0,230,2,0,0,231,2,0,0,232,2,0,0,233,2,0,0,36,3,0,0,5,3,0,0,39,3,0,0,40,3,0,0,41,3,0,0,42,3,0,0,43,3,0,0,44,3,0,0,45,3,0,0,47,3,0,0,48,3,0,0,49,3,0,0,50,3,0,0,209,3,0,0,226,3,0,0,1,0,0,0,185,0,0,0,7,4,0,0,127,0,0,0,249,1,0,0,250,1,0,0,119,0,0,0,169,3,0,0,170,3,0,0,171,3,0,0,172,3,0,0,174,3,0,0,175,3,0,0,176,3,0,0,177,3,0,0,119,2,0,0,120,2,0,0,121,2,0,0,122,2,0,0,123,2,0,0,180,1,0,0,52,3,0,0,51,3,0,0,77,3,0,0,78,3,0,0,79,3,0,0,80,3,0,0,53,3,0,0,54,3,0,0,55,3,0,0,56,3,0,0,57,3,0,0,58,3,0,0,59,3,0,0,60,3,0,0,61,3,0,0,62,3,0,0,63,3,0,0,64,3,0,0,65,3,0,0,66,3,0,0,67,3,0,0,68,3,0,0,69,3,0,0,70,3,0,0,71,3,0,0,72,3,0,0,73,3,0,0,74,3,0,0,75,3,0,0,76,3,0,0,210,3,0,0,213,3,0,0,216,3,0,0,219,3,0,0,222,3,0,0,223,3,0,0,227,3,0,0,232,3,0,0,233,3,0,0,2,0,0,0,175,1,0,0,176,1,0,0,177,1,0,0,116,0,0,0,113,0,0,0,150,1,0,0,151,1,0,0,152,1,0,0,160,1,0,0,23,3,0,0,24,3,0,0,152,3,0,0,8,4,0,0,9,4,0,0,2,1,0,0,175,0,0,0,3,1,0,0,128,0,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,150,2,0,0,176,0,0,0,251,1,0,0,252,1,0,0,57,0,0,0,242,2,0,0,254,2,0,0,245,2,0,0,193,3,0,0,194,3,0,0,195,3,0,0,196,3,0,0,243,2,0,0,255,2,0,0,246,2,0,0,197,3,0,0,198,3,0,0,199,3,0,0,200,3,0,0,244,2,0,0,0,3,0,0,247,2,0,0,201,3,0,0,202,3,0,0,203,3,0,0,204,3,0,0,181,1,0,0,8,3,0,0,9,3,0,0,11,3,0,0,10,3,0,0,84,3,0,0,85,3,0,0,82,3,0,0,83,3,0,0,81,3,0,0,86,3,0,0,236,3,0,0,211,3,0,0,212,3,0,0,214,3,0,0,215,3,0,0,217,3,0,0,218,3,0,0,220,3,0,0,221,3,0,0,224,3,0,0,225,3,0,0,228,3,0,0,234,3,0,0,186,0,0,0,27,0,0,0,187,0,0,0,20,0,0,0,47,0,0,0,3,0,0,0,1,1,0,0,4,0,0,0,29,3,0,0,163,0,0,0,30,3,0,0,31,3,0,0,32,3,0,0,33,3,0,0,37,0,0,0,5,0,0,0,44,0,0,0,120,0,0,0,131,2,0,0,168,2,0,0,172,2,0,0,173,2,0,0,174,2,0,0,175,2,0,0,176,2,0,0,177,2,0,0,178,2,0,0,179,2,0,0,180,2,0,0,181,2,0,0,182,2,0,0,183,2,0,0,184,2,0,0,185,2,0,0,186,2,0,0,187,2,0,0,188,2,0,0,189,2,0,0,190,2,0,0,191,2,0,0,153,1,0,0,154,1,0,0,155,1,0,0,156,1,0,0,157,1,0,0,158,1,0,0,159,1,0,0,25,3,0,0,26,3,0,0,27,3,0,0,28,3,0,0,13,1,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,177,0,0,0,29,1,0,0,30,1,0,0,31,1,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,141,1,0,0,142,1,0,0,151,2,0,0,252,3,0,0,164,0,0,0,165,0,0,0,37,1,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,38,1,0,0,39,1,0,0,40,1,0,0,133,0,0,0,180,0,0,0,41,1,0,0,254,3,0,0,255,3,0,0,0,4,0,0,1,4,0,0,2,4,0,0,3,4,0,0,4,4,0,0,5,4,0,0,6,4,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,50,1,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,16,3,0,0,57,1,0,0,58,1,0,0,67,1,0,0,68,1,0,0,69,1,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,77,1,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,90,3,0,0,92,1,0,0,93,1,0,0,95,1,0,0,96,1,0,0,97,1,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,143,1,0,0,103,1,0,0,104,1,0,0,105,1,0,0,106,1,0,0,152,2,0,0,153,2,0,0,155,2,0,0,178,0,0,0,179,0,0,0,107,1,0,0,108,1,0,0,17,3,0,0,12,3,0,0,13,3,0,0,58,0,0,0,59,0,0,0,182,1,0,0,183,1,0,0,184,1,0,0,185,1,0,0,229,3,0,0,230,3,0,0,231,3,0,0,235,3,0,0,108,0,0,0,112,0,0,0,14,3,0,0,15,3,0,0,6,0,0,0,7,0,0,0,140,1,0,0,8,0,0,0,65,0,0,0,132,2,0,0,151,3,0,0,143,3,0,0,167,3,0,0,144,3,0,0,156,2,0,0,157,2,0,0,158,2,0,0,159,2,0,0,28,0,0,0,9,0,0,0,10,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,68,0,0,0,69,0,0,0,161,0,0,0,162,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,172,0,0,0,167,0,0,0,188,0,0,0,156,0,0,0,157,0,0,0,169,2,0,0,170,2,0,0,171,2,0,0,161,1,0,0,88,3,0,0,134,1,0,0,91,0,0,0,205,3,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,114,1,0,0,115,1,0,0,116,1,0,0,117,1,0,0,118,1,0,0,119,1,0,0,153,3,0,0,154,3,0,0,155,3,0,0,156,3,0,0,157,3,0,0,158,3,0,0,159,3,0,0,160,3,0,0,161,3,0,0,162,3,0,0,163,3,0,0,164,3,0,0,165,3,0,0,166,3,0,0,168,3,0,0,173,3,0,0,162,1,0,0,163,1,0,0,164,1,0,0,165,1,0,0,20,3,0,0,127,3,0,0,128,3,0,0,129,3,0,0,166,1,0,0,167,1,0,0,168,1,0,0,169,1,0,0,21,3,0,0,130,3,0,0,131,3,0,0,132,3,0,0,170,1,0,0,171,1,0,0,172,1,0,0,173,1,0,0,22,3,0,0,133,3,0,0,134,3,0,0,135,3,0,0,160,2,0,0,161,2,0,0,162,2,0,0,163,2,0,0,34,3,0,0,35,3,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,139,0,0,0,202,1,0,0,203,1,0,0,204,1,0,0,205,1,0,0,206,1,0,0,207,1,0,0,208,1,0,0,209,1,0,0,210,1,0,0,211,1,0,0,212,1,0,0,213,1,0,0,214,1,0,0,215,1,0,0,216,1,0,0,217,1,0,0,218,1,0,0,219,1,0,0,220,1,0,0,221,1,0,0,135,1,0,0,222,1,0,0,223,1,0,0,224,1,0,0,225,1,0,0,226,1,0,0,227,1,0,0,228,1,0,0,229,1,0,0,230,1,0,0,231,1,0,0,232,1,0,0,233,1,0,0,234,1,0,0,102,0,0,0,235,1,0,0,236,1,0,0,237,1,0,0,238,1,0,0,239,1,0,0,240,1,0,0,241,1,0,0,242,1,0,0,243,1,0,0,244,1,0,0,245,1,0,0,246,1,0,0,186,1,0,0,187,1,0,0,188,1,0,0,189,1,0,0,190,1,0,0,191,1,0,0,192,1,0,0,193,1,0,0,136,1,0,0,194,1,0,0,195,1,0,0,196,1,0,0,197,1,0,0,198,1,0,0,199,1,0,0,200,1,0,0,201,1,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,171,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,136,2,0,0,137,2,0,0,183,3,0,0,184,3,0,0,185,3,0,0,186,3,0,0,239,2,0,0,240,2,0,0,241,2,0,0,139,3,0,0,140,3,0,0,141,3,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,18,3,0,0,34,4,0,0,35,4,0,0,19,3,0,0,36,4,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,125,0,0,0,125,3,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,34,0,0,0,187,3,0,0,188,3,0,0,189,3,0,0,32,4,0,0,33,4,0,0,108,1,0,0,163,1,0,0,148,3,0,0,180,3,0,0,165,1,0,0,138,2,0,0,141,2,0,0,136,3,0,0,162,1,0,0,190,3,0,0,164,1,0,0,145,3,0,0,167,1,0,0,149,3,0,0,181,3,0,0,169,1,0,0,139,2,0,0,142,2,0,0,137,3,0,0,166,1,0,0,191,3,0,0,168,1,0,0,171,1,0,0,150,3,0,0,182,3,0,0,173,1,0,0,140,2,0,0,143,2,0,0,138,3,0,0,170,1,0,0,192,3,0,0,172,1,0,0,146,3,0,0,25,4,0,0,23,4,0,0,26,4,0,0,27,4,0,0,29,4,0,0,24,4,0,0,22,4,0,0,28,4,0,0,91,0,0,0,93,0,0,0,92,0,0,0,94,0,0,0,32,4,0,0,33,4,0,0,14,0,0,0,239,2,0,0,194,3,0,0,245,2,0,0,248,2,0,0,251,2,0,0,196,3,0,0,195,3,0,0,242,2,0,0,193,3,0,0,254,2,0,0,240,2,0,0,198,3,0,0,246,2,0,0,249,2,0,0,252,2,0,0,200,3,0,0,199,3,0,0,243,2,0,0,197,3,0,0,255,2,0,0,241,2,0,0,202,3,0,0,247,2,0,0,250,2,0,0,253,2,0,0,204,3,0,0,203,3,0,0,244,2,0,0,201,3,0,0,0,3,0,0,108,0,0,0,110,0,0,0,109,0,0,0,111,0,0,0,126,3,0,0,13,0,0,0,141,0,0,0,161,1,0,0,251,3,0,0,250,3,0,0,111,1,0,0,135,1,0,0,31,0,0,0,131,2,0,0,30,0,0,0,144,2,0,0,145,2,0,0,29,0,0,0,32,0,0,0,43,0,0,0,60,0,0,0,62,0,0,0,33,0,0,0,44,0,0,0,61,0,0,0,146,2,0,0,147,2,0,0,63,0,0,0,45,0,0,0,80,0,0,0,124,1,0,0,116,0,0,0,66,0,0,0,113,0,0,0,70,0,0,0,67,0,0,0,41,1,0,0,99,0,0,0,12,4,0,0,87,3,0,0,12,3,0,0,13,3,0,0,125,1,0,0,34,0,0,0,35,0,0,0,36,0,0,0,46,0,0,0,236,3,0,0,181,0,0,0,183,0,0,0,133,2,0,0,134,2,0,0,5,3,0,0,15,4,0,0,17,4,0,0,14,4,0,0,16,4,0,0,21,4,0,0,19,4,0,0,13,4,0,0,18,4,0,0,20,4,0,0,15,0,0,0,88,3,0,0,3,0,0,0,1,1,0,0,4,0,0,0,114,0,0,0,95,0,0,0,143,3,0,0,132,1,0,0,137,1,0,0,148,1,0,0,57,0,0,0,110,1,0,0,17,0,0,0,178,0,0,0,180,0,0,0,237,3,0,0,123,1,0,0,18,0,0,0,237,2,0,0,238,2,0,0,9,0,0,0,168,0,0,0,10,0,0,0,169,0,0,0,147,0,0,0,146,0,0,0,170,0,0,0,148,0,0,0,149,0,0,0,68,0,0,0,144,0,0,0,145,0,0,0,161,0,0,0,69,0,0,0,162,0,0,0,127,0,0,0,167,3,0,0,98,0,0,0,166,0,0,0,37,0,0,0,39,0,0,0,38,0,0,0,40,0,0,0,5,0,0,0,97,0,0,0,147,3,0,0,120,0,0,0,122,0,0,0,121,0,0,0,123,0,0,0,117,0,0,0,19,0,0,0,7,0,0,0,140,1,0,0,8,0,0,0,96,0,0,0,104,0,0,0,119,0,0,0,42,0,0,0,65,0,0,0,115,0,0,0,159,2,0,0,156,2,0,0,157,2,0,0,158,2,0,0,151,3,0,0,144,3,0,0,9,3,0,0,11,3,0,0,8,3,0,0,10,3,0,0,41,0,0,0,64,0,0,0,163,2,0,0,160,2,0,0,161,2,0,0,162,2,0,0,188,0,0,0,167,0,0,0,100,0,0,0,238,3,0,0,16,0,0,0,143,0,0,0,253,3,0,0,202,1,0,0,0,0,0,0,10,4,0,0,11,4,0,0,11,0,0,0,122,1,0,0,12,0,0,0,184,0,0,0,185,0,0,0,125,0,0,0,222,1,0,0,33,1,0,0,31,1,0,0,141,1,0,0,32,1,0,0,112,1,0,0,190,1,0,0,107,1,0,0,120,1,0,0,149,1,0,0,142,3,0,0,234,2,0,0,114,1,0,0,228,1,0,0,229,1,0,0,245,1,0,0,177,0,0,0,90,0,0,0,114,3,0,0,87,0,0,0,109,1,0,0,29,1,0,0,153,3,0,0,154,3,0,0,155,3,0,0,156,3,0,0,157,3,0,0,158,3,0,0,159,3,0,0,160,3,0,0,161,3,0,0,162,3,0,0,163,3,0,0,164,3,0,0,165,3,0,0,166,3,0,0,238,1,0,0,92,3,0,0,179,2,0,0,180,2,0,0,185,2,0,0,186,2,0,0,172,2,0,0,173,2,0,0,174,2,0,0,175,2,0,0,181,2,0,0,187,2,0,0,188,2,0,0,190,2,0,0,176,2,0,0,177,2,0,0,178,2,0,0,182,2,0,0,183,2,0,0,184,2,0,0,189,2,0,0,191,2,0,0,113,3,0,0,227,1,0,0,179,0,0,0,17,3,0,0,255,3,0,0,0,4,0,0,187,1,0,0,152,0,0,0,165,2,0,0,3,3,0,0,89,0,0,0,115,3,0,0,54,0,0,0,151,1,0,0,139,1,0,0,130,0,0,0,131,0,0,0,50,0,0,0,53,0,0,0,153,0,0,0,103,0,0,0,88,0,0,0,116,3,0,0,38,3,0,0,37,3,0,0,186,3,0,0,184,3,0,0,183,3,0,0,185,3,0,0,244,1,0,0,195,1,0,0,239,1,0,0,178,1,0,0,134,1,0,0,140,0,0,0,123,3,0,0,107,0,0,0,103,3,0,0,179,3,0,0,178,3,0,0,28,0,0,0,173,3,0,0,174,3,0,0,175,3,0,0,176,3,0,0,177,3,0,0,168,3,0,0,169,3,0,0,170,3,0,0,171,3,0,0,172,3,0,0,152,3,0,0,126,1,0,0,119,3,0,0,124,3,0,0,174,0,0,0,191,1,0,0,215,1,0,0,212,1,0,0,216,1,0,0,246,1,0,0,193,1,0,0,213,1,0,0,214,1,0,0,136,1,0,0,196,1,0,0,34,3,0,0,35,3,0,0,23,3,0,0,160,1,0,0,25,3,0,0,26,3,0,0,27,3,0,0,28,3,0,0,24,3,0,0,48,0,0,0,132,0,0,0,117,3,0,0,133,1,0,0,128,1,0,0,172,0,0,0,56,0,0,0,126,0,0,0,116,1,0,0,99,3,0,0,206,1,0,0,89,3,0,0,197,1,0,0,234,1,0,0,156,0,0,0,253,1,0,0,47,3,0,0,208,3,0,0,43,3,0,0,83,3,0,0,211,3,0,0,212,3,0,0,45,3,0,0,241,3,0,0,46,3,0,0,207,3,0,0,243,3,0,0,242,3,0,0,44,3,0,0,82,3,0,0,247,3,0,0,248,3,0,0,245,3,0,0,244,3,0,0,249,3,0,0,246,3,0,0,29,3,0,0,163,0,0,0,30,3,0,0,31,3,0,0,32,3,0,0,33,3,0,0,176,1,0,0,174,1,0,0,175,1,0,0,177,1,0,0,230,1,0,0,217,1,0,0,210,1,0,0,121,3,0,0,186,1,0,0,15,3,0,0,56,3,0,0,57,3,0,0,58,3,0,0,59,3,0,0,51,3,0,0,61,3,0,0,60,3,0,0,62,3,0,0,52,3,0,0,55,3,0,0,81,3,0,0,72,3,0,0,73,3,0,0,74,3,0,0,75,3,0,0,76,3,0,0,86,3,0,0,71,3,0,0,49,3,0,0,64,3,0,0,65,3,0,0,66,3,0,0,67,3,0,0,68,3,0,0,69,3,0,0,70,3,0,0,63,3,0,0,77,3,0,0,78,3,0,0,79,3,0,0,80,3,0,0,50,3,0,0,54,3,0,0,53,3,0,0,39,3,0,0,85,3,0,0,40,3,0,0,84,3,0,0,42,3,0,0,14,3,0,0,10,1,0,0,99,1,0,0,98,1,0,0,100,1,0,0,143,1,0,0,101,1,0,0,102,1,0,0,176,0,0,0,128,3,0,0,127,3,0,0,20,3,0,0,129,3,0,0,131,3,0,0,130,3,0,0,21,3,0,0,132,3,0,0,134,3,0,0,133,3,0,0,22,3,0,0,135,3,0,0,6,1,0,0,125,3,0,0,67,1,0,0,70,1,0,0,69,1,0,0,68,1,0,0,139,3,0,0,140,3,0,0,141,3,0,0,12,1,0,0,105,1,0,0,106,1,0,0,104,1,0,0,81,0,0,0,168,2,0,0,7,1,0,0,78,1,0,0,90,1,0,0,74,1,0,0,80,1,0,0,79,1,0,0,83,1,0,0,82,1,0,0,72,1,0,0,73,1,0,0,81,1,0,0,88,1,0,0,89,1,0,0,87,1,0,0,77,1,0,0,85,1,0,0,86,1,0,0,84,1,0,0,76,1,0,0,71,1,0,0,75,1,0,0,19,3,0,0,36,4,0,0,152,1,0,0,252,1,0,0,251,1,0,0,4,1,0,0,46,1,0,0,42,1,0,0,55,1,0,0,47,1,0,0,44,1,0,0,54,1,0,0,52,1,0,0,51,1,0,0,56,1,0,0,45,1,0,0,53,1,0,0,43,1,0,0,49,1,0,0,50,1,0,0,16,3,0,0,48,1,0,0,128,0,0,0,24,1,0,0,18,1,0,0,21,1,0,0,28,1,0,0,17,1,0,0,27,1,0,0,19,1,0,0,20,1,0,0,26,1,0,0,22,1,0,0,23,1,0,0,25,1,0,0,8,1,0,0,90,3,0,0,91,1,0,0,9,1,0,0,96,1,0,0,97,1,0,0,92,1,0,0,95,1,0,0,93,1,0,0,175,0,0,0,7,4,0,0,5,1,0,0,2,1,0,0,13,1,0,0,15,1,0,0,14,1,0,0,16,1,0,0,150,2,0,0,152,2,0,0,155,2,0,0,153,2,0,0,11,1,0,0,103,1,0,0,3,1,0,0,164,0,0,0,165,0,0,0,57,1,0,0,60,1,0,0,63,1,0,0,62,1,0,0,61,1,0,0,64,1,0,0,59,1,0,0,58,1,0,0,66,1,0,0,65,1,0,0,205,3,0,0,0,2,0,0,191,0,0,0,215,0,0,0,218,0,0,0,221,0,0,0,240,0,0,0,217,0,0,0,222,0,0,0,220,0,0,0,232,0,0,0,233,0,0,0,238,0,0,0,237,0,0,0,234,0,0,0,227,0,0,0,231,0,0,0,236,0,0,0,230,0,0,0,235,0,0,0,226,0,0,0,229,0,0,0,228,0,0,0,219,0,0,0,214,0,0,0,216,0,0,0,212,0,0,0,213,0,0,0,239,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,192,0,0,0,243,0,0,0,246,0,0,0,247,0,0,0,245,0,0,0,241,0,0,0,242,0,0,0,244,0,0,0,193,0,0,0,248,0,0,0,190,0,0,0,210,0,0,0,211,0,0,0,208,0,0,0,207,0,0,0,205,0,0,0,35,4,0,0,18,3,0,0,34,4,0,0,209,0,0,0,206,0,0,0,204,0,0,0,195,0,0,0,255,0,0,0,0,1,0,0,253,0,0,0,251,0,0,0,252,0,0,0,254,0,0,0,189,0,0,0,196,0,0,0,197,0,0,0,202,0,0,0,203,0,0,0,200,0,0,0,201,0,0,0,199,0,0,0,198,0,0,0,194,0,0,0,250,0,0,0,249,0,0,0,206,3,0,0,223,3,0,0,224,3,0,0,225,3,0,0,209,3,0,0,222,3,0,0,233,3,0,0,226,3,0,0,213,3,0,0,232,3,0,0,234,3,0,0,235,3,0,0,228,3,0,0,230,3,0,0,231,3,0,0,229,3,0,0,220,3,0,0,221,3,0,0,219,3,0,0,210,3,0,0,227,3,0,0,216,3,0,0,217,3,0,0,218,3,0,0,164,2,0,0,205,1,0,0,236,2,0,0,101,0,0,0,135,2,0,0,101,3,0,0,142,0,0,0,38,1,0,0,254,3,0,0,39,1,0,0,40,1,0,0,86,0,0,0,240,3,0,0,2,3,0,0,236,1,0,0,189,3,0,0,187,3,0,0,188,3,0,0,150,0,0,0,83,0,0,0,221,1,0,0,220,1,0,0,157,0,0,0,224,1,0,0,204,1,0,0,237,1,0,0,211,1,0,0,214,3,0,0,215,3,0,0,41,3,0,0,107,3,0,0,182,0,0,0,51,0,0,0,127,1,0,0,248,1,0,0,250,1,0,0,249,1,0,0,232,1,0,0,136,0,0,0,135,0,0,0,134,0,0,0,138,0,0,0,171,0,0,0,137,0,0,0,136,2,0,0,137,2,0,0,225,1,0,0,173,0,0,0,154,2,0,0,113,1,0,0,147,1,0,0,72,0,0,0,76,0,0,0,74,0,0,0,58,0,0,0,79,0,0,0,71,0,0,0,78,0,0,0,59,0,0,0,75,0,0,0,73,0,0,0,139,0,0,0,77,0,0,0,169,2,0,0,235,1,0,0,219,1,0,0,108,3,0,0,233,1,0,0,118,1,0,0,112,0,0,0,243,1,0,0,231,1,0,0,208,1,0,0,95,3,0,0,181,1,0,0,183,1,0,0,182,1,0,0,223,1,0,0,200,1,0,0,185,1,0,0,188,1,0,0,184,1,0,0,199,1,0,0,189,1,0,0,8,4,0,0,9,4,0,0,2,0,0,0,186,0,0,0,27,0,0,0,187,0,0,0,20,0,0,0,21,0,0,0,25,0,0,0,26,0,0,0,23,0,0,0,24,0,0,0,22,0,0,0,151,0,0,0,47,0,0,0,145,1,0,0,235,2,0,0,94,3,0,0,93,3,0,0,149,2,0,0,171,2,0,0,104,3,0,0,105,3,0,0,48,3,0,0,150,1,0,0,153,1,0,0,154,1,0,0,155,1,0,0,156,1,0,0,157,1,0,0,158,1,0,0,159,1,0,0,129,1,0,0,84,0,0,0,118,3,0,0,151,2,0,0,254,1,0,0,179,1,0,0,30,1,0,0,201,1,0,0,194,1,0,0,102,3,0,0,144,1,0,0,109,3,0,0,192,1,0,0,207,1,0,0,6,0,0,0,132,2,0,0,121,1,0,0,1,0,0,0,226,1,0,0,155,0,0,0,35,1,0,0,34,1,0,0,36,1,0,0,159,0,0,0,91,3,0,0,192,2,0,0,193,2,0,0,194,2,0,0,195,2,0,0,196,2,0,0,197,2,0,0,198,2,0,0,199,2,0,0,200,2,0,0,201,2,0,0,202,2,0,0,203,2,0,0,204,2,0,0,154,0,0,0,218,1,0,0,205,2,0,0,206,2,0,0,207,2,0,0,208,2,0,0,209,2,0,0,210,2,0,0,211,2,0,0,212,2,0,0,213,2,0,0,214,2,0,0,215,2,0,0,216,2,0,0,217,2,0,0,218,2,0,0,219,2,0,0,220,2,0,0,221,2,0,0,222,2,0,0,1,4,0,0,2,4,0,0,130,1,0,0,110,3,0,0,138,1,0,0,5,4,0,0,6,4,0,0,4,4,0,0,3,4,0,0,105,0,0,0,129,0,0,0,115,1,0,0,113,2,0,0,3,2,0,0,6,2,0,0,126,2,0,0,125,2,0,0,124,2,0,0,127,2,0,0,129,2,0,0,130,2,0,0,128,2,0,0,5,2,0,0,1,2,0,0,2,2,0,0,4,2,0,0,95,2,0,0,112,2,0,0,108,2,0,0,119,2,0,0,111,2,0,0,116,2,0,0,118,2,0,0,117,2,0,0,109,2,0,0,123,2,0,0,120,2,0,0,121,2,0,0,122,2,0,0,115,2,0,0,114,2,0,0,110,2,0,0,107,2,0,0,103,2,0,0,104,2,0,0,106,2,0,0,105,2,0,0,99,2,0,0,97,2,0,0,96,2,0,0,98,2,0,0,101,2,0,0,102,2,0,0,100,2,0,0,28,2,0,0,64,2,0,0,58,2,0,0,22,2,0,0,15,2,0,0,59,2,0,0,60,2,0,0,23,2,0,0,24,2,0,0,16,2,0,0,65,2,0,0,29,2,0,0,17,2,0,0,30,2,0,0,66,2,0,0,67,2,0,0,31,2,0,0,61,2,0,0,25,2,0,0,88,2,0,0,46,2,0,0,80,2,0,0,47,2,0,0,81,2,0,0,87,2,0,0,86,2,0,0,68,2,0,0,69,2,0,0,32,2,0,0,33,2,0,0,34,2,0,0,70,2,0,0,71,2,0,0,72,2,0,0,35,2,0,0,36,2,0,0,37,2,0,0,73,2,0,0,26,2,0,0,18,2,0,0,62,2,0,0,63,2,0,0,27,2,0,0,48,2,0,0,54,2,0,0,51,2,0,0,83,2,0,0,84,2,0,0,52,2,0,0,53,2,0,0,85,2,0,0,74,2,0,0,75,2,0,0,38,2,0,0,39,2,0,0,40,2,0,0,76,2,0,0,77,2,0,0,78,2,0,0,41,2,0,0,42,2,0,0,43,2,0,0,79,2,0,0,55,2,0,0,14,2,0,0,49,2,0,0,10,2,0,0,7,2,0,0,9,2,0,0,8,2,0,0,44,2,0,0,45,2,0,0,11,2,0,0,20,2,0,0,12,2,0,0,13,2,0,0,56,2,0,0,57,2,0,0,19,2,0,0,21,2,0,0,82,2,0,0,50,2,0,0,94,2,0,0,89,2,0,0,90,2,0,0,92,2,0,0,91,2,0,0,93,2,0,0,52,0,0,0,198,1,0,0,240,1,0,0,131,1,0,0,148,2,0,0,85,0,0,0,1,3,0,0,142,1,0,0,82,0,0,0,239,3,0,0,242,1,0,0,241,1,0,0,122,3,0,0,106,3,0,0,146,1,0,0,96,3,0,0,98,3,0,0,97,3,0,0,203,1,0,0,37,1,0,0,133,0,0,0,106,0,0,0,252,3,0,0,170,2,0,0,119,1,0,0,180,1,0,0,102,0,0,0,120,3,0,0,55,0,0,0,49,0,0,0,112,3,0,0,209,1,0,0,111,3,0,0,117,1,0,0,166,2,0,0,167,2,0,0,223,2,0,0,231,2,0,0,232,2,0,0,233,2,0,0,224,2,0,0,225,2,0,0,226,2,0,0,227,2,0,0,228,2,0,0,229,2,0,0,230,2,0,0,36,3,0,0,100,3,0,0,247,1,0,0,158,0,0,0,160,0,0,0,107,1,0,0,149,1,0,0,112,1,0,0,142,3,0,0,152,2,0,0,177,0,0,0,109,1,0,0,29,1,0,0,179,0,0,0,17,3,0,0,186,3,0,0,184,3,0,0,183,3,0,0,185,3,0,0,131,0,0,0,0,4,0,0,255,3,0,0,15,3,0,0,126,1,0,0,136,1,0,0,132,0,0,0,133,1,0,0,128,1,0,0,116,1,0,0,172,0,0,0,45,3,0,0,81,3,0,0,47,3,0,0,235,3,0,0,83,3,0,0,82,3,0,0,43,3,0,0,49,3,0,0,230,3,0,0,231,3,0,0,229,3,0,0,211,3,0,0,212,3,0,0,217,3,0,0,218,3,0,0,44,3,0,0,50,3,0,0,214,3,0,0,215,3,0,0,41,3,0,0,48,3,0,0,39,3,0,0,85,3,0,0,40,3,0,0,84,3,0,0,86,3,0,0,220,3,0,0,221,3,0,0,42,3,0,0,176,1,0,0,174,1,0,0,175,1,0,0,177,1,0,0,122,2,0,0,236,3,0,0,38,1,0,0,39,1,0,0,40,1,0,0,182,0,0,0,183,0,0,0,155,2,0,0,153,2,0,0,135,2,0,0,142,0,0,0,248,1,0,0,132,1,0,0,127,1,0,0,161,1,0,0,135,0,0,0,138,0,0,0,171,0,0,0,134,0,0,0,88,3,0,0,137,0,0,0,136,2,0,0,136,0,0,0,137,2,0,0,137,1,0,0,148,1,0,0,72,0,0,0,76,0,0,0,74,0,0,0,71,0,0,0,58,0,0,0,79,0,0,0,78,0,0,0,57,0,0,0,59,0,0,0,75,0,0,0,73,0,0,0,77,0,0,0,139,0,0,0,178,0,0,0,114,1,0,0,111,1,0,0,113,1,0,0,110,1,0,0,115,1,0,0,180,0,0,0,237,3,0,0,161,0,0,0,69,0,0,0,162,0,0,0,8,4,0,0,127,0,0,0,90,3,0,0,164,0,0,0,165,0,0,0,129,1,0,0,151,2,0,0,1,0,0,0,2,0,0,0,188,0,0,0,167,0,0,0,238,3,0,0,131,1,0,0,1,4,0,0,2,4,0,0,0,2,0,0,130,1,0,0,138,1,0,0,5,4,0,0,6,4,0,0,4,4,0,0,3,4,0,0,9,4,0,0,240,3,0,0,239,3,0,0,143,0,0,0,142,1,0,0,252,3,0,0,130,0,0,0,129,0,0,0,133,0,0,0,119,1,0,0,10,4,0,0,11,4,0,0,12,0,0,0,146,1,0,0,234,2,0,0,90,0,0,0,87,0,0,0,103,0,0,0,88,0,0,0,141,0,0,0,3,3,0,0,89,0,0,0,140,0,0,0,126,0,0,0,89,3,0,0,236,2,0,0,86,0,0,0,2,3,0,0,83,0,0,0,154,2,0,0,147,1,0,0,145,1,0,0,235,2,0,0,84,0,0,0,85,0,0,0,1,3,0,0,82,0,0,0,152,3,0,0,184,0,0,0,185,0,0,0,222,1,0,0,33,1,0,0,31,1,0,0,141,1,0,0,32,1,0,0,190,1,0,0,108,1,0,0,94,2,0,0,163,1,0,0,148,3,0,0,180,3,0,0,128,3,0,0,165,1,0,0,138,2,0,0,141,2,0,0,136,3,0,0,162,1,0,0,127,3,0,0,190,3,0,0,164,1,0,0,145,3,0,0,167,1,0,0,149,3,0,0,181,3,0,0,131,3,0,0,169,1,0,0,139,2,0,0,142,2,0,0,137,3,0,0,166,1,0,0,130,3,0,0,191,3,0,0,168,1,0,0,171,1,0,0,150,3,0,0,182,3,0,0,134,3,0,0,173,1,0,0,140,2,0,0,143,2,0,0,138,3,0,0,170,1,0,0,133,3,0,0,192,3,0,0,172,1,0,0,146,3,0,0,120,1,0,0,228,1,0,0,229,1,0,0,245,1,0,0,25,4,0,0,23,4,0,0,26,4,0,0,27,4,0,0,29,4,0,0,24,4,0,0,22,4,0,0,28,4,0,0,114,3,0,0,91,0,0,0,93,0,0,0,92,0,0,0,94,0,0,0,32,4,0,0,33,4,0,0,153,3,0,0,154,3,0,0,155,3,0,0,156,3,0,0,157,3,0,0,158,3,0,0,159,3,0,0,160,3,0,0,161,3,0,0,162,3,0,0,163,3,0,0,164,3,0,0,165,3,0,0,166,3,0,0,238,1,0,0,92,3,0,0,179,2,0,0,180,2,0,0,185,2,0,0,186,2,0,0,172,2,0,0,173,2,0,0,174,2,0,0,175,2,0,0,181,2,0,0,187,2,0,0,188,2,0,0,190,2,0,0,176,2,0,0,177,2,0,0,178,2,0,0,182,2,0,0,183,2,0,0,184,2,0,0,189,2,0,0,191,2,0,0,113,3,0,0,227,1,0,0,239,2,0,0,194,3,0,0,245,2,0,0,248,2,0,0,251,2,0,0,196,3,0,0,195,3,0,0,242,2,0,0,193,3,0,0,254,2,0,0,240,2,0,0,198,3,0,0,246,2,0,0,249,2,0,0,252,2,0,0,200,3,0,0,199,3,0,0,243,2,0,0,197,3,0,0,255,2,0,0,241,2,0,0,202,3,0,0,247,2,0,0,250,2,0,0,253,2,0,0,204,3,0,0,203,3,0,0,244,2,0,0,201,3,0,0,0,3,0,0,187,1,0,0,108,0,0,0,110,0,0,0,109,0,0,0,111,0,0,0,152,0,0,0,165,2,0,0,5,2,0,0,115,3,0,0,251,3,0,0,250,3,0,0,54,0,0,0,151,1,0,0,139,1,0,0,121,2,0,0,126,3,0,0,13,0,0,0,1,2,0,0,50,0,0,0,53,0,0,0,14,0,0,0,153,0,0,0,116,3,0,0,38,3,0,0,37,3,0,0,244,1,0,0,195,1,0,0,239,1,0,0,178,1,0,0,134,1,0,0,123,3,0,0,31,0,0,0,131,2,0,0,30,0,0,0,144,2,0,0,145,2,0,0,29,0,0,0,32,0,0,0,43,0,0,0,60,0,0,0,62,0,0,0,33,0,0,0,44,0,0,0,61,0,0,0,146,2,0,0,147,2,0,0,63,0,0,0,45,0,0,0,107,0,0,0,103,3,0,0,80,0,0,0,179,3,0,0,178,3,0,0,28,0,0,0,173,3,0,0,174,3,0,0,175,3,0,0,176,3,0,0,177,3,0,0,168,3,0,0,169,3,0,0,170,3,0,0,171,3,0,0,172,3,0,0,11,0,0,0,122,1,0,0,119,3,0,0,124,3,0,0,174,0,0,0,191,1,0,0,215,1,0,0,212,1,0,0,216,1,0,0,246,1,0,0,193,1,0,0,213,1,0,0,214,1,0,0,124,1,0,0,135,1,0,0,196,1,0,0,116,0,0,0,67,0,0,0,66,0,0,0,113,0,0,0,70,0,0,0,34,3,0,0,35,3,0,0,41,1,0,0,23,3,0,0,160,1,0,0,25,3,0,0,26,3,0,0,27,3,0,0,28,3,0,0,24,3,0,0,48,0,0,0,120,2,0,0,117,3,0,0,56,0,0,0,99,3,0,0,206,1,0,0,197,1,0,0,234,1,0,0,156,0,0,0,119,2,0,0,253,1,0,0,89,2,0,0,99,0,0,0,208,3,0,0,241,3,0,0,46,3,0,0,207,3,0,0,243,3,0,0,242,3,0,0,247,3,0,0,248,3,0,0,245,3,0,0,244,3,0,0,249,3,0,0,246,3,0,0,12,4,0,0,87,3,0,0,12,3,0,0,13,3,0,0,29,3,0,0,163,0,0,0,30,3,0,0,31,3,0,0,32,3,0,0,33,3,0,0,230,1,0,0,217,1,0,0,210,1,0,0,121,3,0,0,186,1,0,0,125,1,0,0,56,3,0,0,57,3,0,0,58,3,0,0,59,3,0,0,51,3,0,0,61,3,0,0,60,3,0,0,62,3,0,0,52,3,0,0,55,3,0,0,72,3,0,0,73,3,0,0,74,3,0,0,75,3,0,0,76,3,0,0,71,3,0,0,64,3,0,0,65,3,0,0,66,3,0,0,67,3,0,0,68,3,0,0,69,3,0,0,70,3,0,0,63,3,0,0,77,3,0,0,78,3,0,0,79,3,0,0,80,3,0,0,54,3,0,0,53,3,0,0,10,1,0,0,99,1,0,0,98,1,0,0,100,1,0,0,143,1,0,0,101,1,0,0,102,1,0,0,176,0,0,0,20,3,0,0,129,3,0,0,21,3,0,0,132,3,0,0,22,3,0,0,135,3,0,0,6,1,0,0,125,3,0,0,67,1,0,0,70,1,0,0,69,1,0,0,68,1,0,0,139,3,0,0,140,3,0,0,141,3,0,0,12,1,0,0,105,1,0,0,106,1,0,0,104,1,0,0,81,0,0,0,168,2,0,0,7,1,0,0,78,1,0,0,90,1,0,0,74,1,0,0,80,1,0,0,79,1,0,0,83,1,0,0,82,1,0,0,72,1,0,0,73,1,0,0,81,1,0,0,88,1,0,0,89,1,0,0,87,1,0,0,77,1,0,0,85,1,0,0,86,1,0,0,84,1,0,0,76,1,0,0,71,1,0,0,75,1,0,0,19,3,0,0,36,4,0,0,152,1,0,0,252,1,0,0,251,1,0,0,4,1,0,0,46,1,0,0,42,1,0,0,55,1,0,0,47,1,0,0,44,1,0,0,54,1,0,0,52,1,0,0,51,1,0,0,56,1,0,0,45,1,0,0,53,1,0,0,43,1,0,0,49,1,0,0,50,1,0,0,16,3,0,0,48,1,0,0,128,0,0,0,24,1,0,0,18,1,0,0,21,1,0,0,28,1,0,0,17,1,0,0,27,1,0,0,19,1,0,0,20,1,0,0,26,1,0,0,22,1,0,0,23,1,0,0,25,1,0,0,8,1,0,0,91,1,0,0,9,1,0,0,96,1,0,0,97,1,0,0,92,1,0,0,95,1,0,0,93,1,0,0,175,0,0,0,7,4,0,0,5,1,0,0,2,1,0,0,13,1,0,0,15,1,0,0,14,1,0,0,16,1,0,0,150,2,0,0,11,1,0,0,103,1,0,0,3,1,0,0,57,1,0,0,60,1,0,0,63,1,0,0,62,1,0,0,61,1,0,0,64,1,0,0,59,1,0,0,58,1,0,0,66,1,0,0,65,1,0,0,205,3,0,0,191,0,0,0,215,0,0,0,218,0,0,0,221,0,0,0,240,0,0,0,217,0,0,0,222,0,0,0,220,0,0,0,232,0,0,0,233,0,0,0,238,0,0,0,237,0,0,0,234,0,0,0,227,0,0,0,231,0,0,0,236,0,0,0,230,0,0,0,235,0,0,0,226,0,0,0,229,0,0,0,228,0,0,0,219,0,0,0,214,0,0,0,216,0,0,0,212,0,0,0,213,0,0,0,239,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,192,0,0,0,243,0,0,0,246,0,0,0,247,0,0,0,245,0,0,0,241,0,0,0,242,0,0,0,244,0,0,0,193,0,0,0,248,0,0,0,190,0,0,0,210,0,0,0,211,0,0,0,208,0,0,0,207,0,0,0,205,0,0,0,35,4,0,0,18,3,0,0,34,4,0,0,209,0,0,0,206,0,0,0,204,0,0,0,195,0,0,0,255,0,0,0,0,1,0,0,253,0,0,0,251,0,0,0,252,0,0,0,254,0,0,0,189,0,0,0,196,0,0,0,197,0,0,0,202,0,0,0,203,0,0,0,200,0,0,0,201,0,0,0,199,0,0,0,198,0,0,0,194,0,0,0,250,0,0,0,249,0,0,0,206,3,0,0,223,3,0,0,224,3,0,0,225,3,0,0,209,3,0,0,222,3,0,0,233,3,0,0,226,3,0,0,213,3,0,0,232,3,0,0,234,3,0,0,228,3,0,0,219,3,0,0,210,3,0,0,227,3,0,0,216,3,0,0,34,0,0,0,35,0,0,0,36,0,0,0,46,0,0,0,164,2,0,0,205,1,0,0,101,0,0,0,101,3,0,0,254,3,0,0,237,2,0,0,238,2,0,0,181,0,0,0,111,2,0,0,133,2,0,0,236,1,0,0,134,2,0,0,189,3,0,0,187,3,0,0,188,3,0,0,150,0,0,0,5,3,0,0,15,4,0,0,17,4,0,0,14,4,0,0,16,4,0,0,21,4,0,0,19,4,0,0,13,4,0,0,18,4,0,0,20,4,0,0,221,1,0,0,220,1,0,0,157,0,0,0,15,0,0,0,224,1,0,0,237,1,0,0,211,1,0,0,3,0,0,0,7,0,0,0,1,1,0,0,140,1,0,0,4,0,0,0,114,0,0,0,104,0,0,0,8,0,0,0,95,0,0,0,96,0,0,0,107,3,0,0,90,2,0,0,2,2,0,0,51,0,0,0,143,3,0,0,250,1,0,0,249,1,0,0,232,1,0,0,225,1,0,0,173,0,0,0,169,2,0,0,123,1,0,0,17,0,0,0,235,1,0,0,18,0,0,0,219,1,0,0,108,3,0,0,167,3,0,0,233,1,0,0,14,3,0,0,118,1,0,0,109,2,0,0,9,0,0,0,168,0,0,0,112,0,0,0,10,0,0,0,169,0,0,0,148,0,0,0,144,0,0,0,147,0,0,0,146,0,0,0,149,0,0,0,145,0,0,0,170,0,0,0,68,0,0,0,243,1,0,0,231,1,0,0,208,1,0,0,95,3,0,0,181,1,0,0,183,1,0,0,182,1,0,0,223,1,0,0,200,1,0,0,185,1,0,0,188,1,0,0,184,1,0,0,199,1,0,0,189,1,0,0,186,0,0,0,27,0,0,0,187,0,0,0,20,0,0,0,21,0,0,0,25,0,0,0,26,0,0,0,23,0,0,0,24,0,0,0,22,0,0,0,151,0,0,0,47,0,0,0,94,3,0,0,93,3,0,0,149,2,0,0,171,2,0,0,104,3,0,0,105,3,0,0,150,1,0,0,153,1,0,0,154,1,0,0,155,1,0,0,156,1,0,0,157,1,0,0,158,1,0,0,159,1,0,0,118,3,0,0,254,1,0,0,179,1,0,0,30,1,0,0,201,1,0,0,194,1,0,0,98,0,0,0,166,0,0,0,37,0,0,0,39,0,0,0,38,0,0,0,40,0,0,0,5,0,0,0,97,0,0,0,147,3,0,0,120,0,0,0,122,0,0,0,121,0,0,0,123,0,0,0,102,3,0,0,204,1,0,0,117,0,0,0,119,0,0,0,144,1,0,0,109,3,0,0,192,1,0,0,207,1,0,0,19,0,0,0,6,0,0,0,132,2,0,0,121,1,0,0,151,3,0,0,144,3,0,0,226,1,0,0,155,0,0,0,35,1,0,0,34,1,0,0,36,1,0,0,159,0,0,0,91,3,0,0,192,2,0,0,193,2,0,0,194,2,0,0,195,2,0,0,196,2,0,0,197,2,0,0,198,2,0,0,199,2,0,0,200,2,0,0,201,2,0,0,202,2,0,0,203,2,0,0,204,2,0,0,154,0,0,0,218,1,0,0,205,2,0,0,206,2,0,0,207,2,0,0,208,2,0,0,209,2,0,0,210,2,0,0,211,2,0,0,212,2,0,0,213,2,0,0,214,2,0,0,215,2,0,0,216,2,0,0,217,2,0,0,218,2,0,0,219,2,0,0,220,2,0,0,221,2,0,0,222,2,0,0,123,2,0,0,110,3,0,0,9,3,0,0,11,3,0,0,8,3,0,0,10,3,0,0,105,0,0,0,113,2,0,0,3,2,0,0,6,2,0,0,126,2,0,0,125,2,0,0,124,2,0,0,127,2,0,0,129,2,0,0,130,2,0,0,128,2,0,0,4,2,0,0,95,2,0,0,112,2,0,0,108,2,0,0,116,2,0,0,118,2,0,0,117,2,0,0,115,2,0,0,114,2,0,0,110,2,0,0,107,2,0,0,103,2,0,0,104,2,0,0,106,2,0,0,105,2,0,0,99,2,0,0,97,2,0,0,96,2,0,0,98,2,0,0,101,2,0,0,102,2,0,0,100,2,0,0,28,2,0,0,64,2,0,0,58,2,0,0,22,2,0,0,15,2,0,0,59,2,0,0,60,2,0,0,23,2,0,0,24,2,0,0,16,2,0,0,65,2,0,0,29,2,0,0,17,2,0,0,30,2,0,0,66,2,0,0,67,2,0,0,31,2,0,0,61,2,0,0,25,2,0,0,88,2,0,0,46,2,0,0,80,2,0,0,47,2,0,0,81,2,0,0,87,2,0,0,86,2,0,0,68,2,0,0,69,2,0,0,32,2,0,0,33,2,0,0,34,2,0,0,70,2,0,0,71,2,0,0,72,2,0,0,35,2,0,0,36,2,0,0,37,2,0,0,73,2,0,0,26,2,0,0,18,2,0,0,62,2,0,0,63,2,0,0,27,2,0,0,48,2,0,0,54,2,0,0,51,2,0,0,83,2,0,0,84,2,0,0,52,2,0,0,53,2,0,0,85,2,0,0,74,2,0,0,75,2,0,0,38,2,0,0,39,2,0,0,40,2,0,0,76,2,0,0,77,2,0,0,78,2,0,0,41,2,0,0,42,2,0,0,43,2,0,0,79,2,0,0,55,2,0,0,14,2,0,0,49,2,0,0,10,2,0,0,7,2,0,0,9,2,0,0,8,2,0,0,44,2,0,0,45,2,0,0,11,2,0,0,20,2,0,0,12,2,0,0,13,2,0,0,56,2,0,0,57,2,0,0,19,2,0,0,21,2,0,0,82,2,0,0,50,2,0,0,92,2,0,0,91,2,0,0,93,2,0,0,41,0,0,0,64,0,0,0,115,0,0,0,65,0,0,0,163,2,0,0,159,2,0,0,160,2,0,0,156,2,0,0,161,2,0,0,157,2,0,0,162,2,0,0,158,2,0,0,42,0,0,0,52,0,0,0,198,1,0,0,240,1,0,0,16,0,0,0,148,2,0,0,242,1,0,0,241,1,0,0,122,3,0,0,106,3,0,0,100,0,0,0,96,3,0,0,98,3,0,0,97,3,0,0,203,1,0,0,37,1,0,0,106,0,0,0,253,3,0,0,170,2,0,0,180,1,0,0,0,0,0,0,102,0,0,0,120,3,0,0,55,0,0,0,49,0,0,0,112,3,0,0,209,1,0,0,202,1,0,0,111,3,0,0,117,1,0,0,166,2,0,0,167,2,0,0,223,2,0,0,231,2,0,0,232,2,0,0,233,2,0,0,224,2,0,0,225,2,0,0,226,2,0,0,227,2,0,0,228,2,0,0,229,2,0,0,230,2,0,0,36,3,0,0,100,3,0,0,247,1,0,0,158,0,0,0,160,0,0,0,125,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,155,58,1,0,59,57,1,0,31,0,0,0,32,0,0,0,33,0,0,0,27,0,0,0,34,0,0,0,35,0,0,0,28,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,22,0,0,0,29,0,0,0,30,0,0,0,36,0,0,0,21,0,0,0,22,0,0,0,19,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,16,0,0,0,116,157,0,0,9,0,0,0,40,158,0,0,88,0,0,0,155,58,1,0,0,0,0,0,0,0,0,0,4,0,0,0,159,58,1,0,8,6,0,0,0,0,0,0,0,0,0,0,16,0,0,0,90,60,1,0,144,5,0,0,0,0,0,0,0,0,0,0,20,0,0,0,167,58,1,0,144,5,0,0,0,0,0,0,0,0,0,0,24,0,0,0,169,58,1,0,204,5,0,0,0,0,0,0,0,0,0,0,28,0,0,0,171,58,1,0,204,5,0,0,0,0,0,0,0,0,0,0,32,0,0,0,173,58,1,0,204,5,0,0,0,0,0,0,0,0,0,0,36,0,0,0,175,58,1,0,204,5,0,0,0,0,0,0,0,0,0,0,40,0,0,0,180,58,1,0,204,5,0,0,0,0,0,0,0,0,0,0,44,0,0,0,185,58,1,0,204,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,1,0,0,0,16,0,0,0,92,158,0,0,2,0,0,0,132,158,0,0,88,0,0,0,155,58,1,0,0,0,0,0,0,0,0,0,16,0,0,0,90,60,1,0,144,5,0,0,0,0,0,0,0,0,0,0,20,0,0,0,167,58,1,0,144,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,1,0,0,0,16,0,0,0,184,158,0,0,4,0,0,0,0,0,0,0,16,0,0,0,190,58,1,0,145,0,0,0,0,0,0,0,0,0,0,0,205,58,1,0,76,5,0,0,145,0,0,0,1,0,0,0,4,0,0,0,219,58,1,0,76,5,0,0,145,0,0,0,2,0,0,0,8,0,0,0,236,58,1,0,220,4,0,0,145,0,0,0,3,0,0,0,12,0,0,0,247,58,1,0,220,4,0,0,4,59,1,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,31,0,0,0,23,0,0,0,31,0,0,0,32,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,2,0,0,0,33,0,0,0,37,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,31,0,0,0,152,47,138,66,145,68,55,113,207,251,192,181,165,219,181,233,91,194,86,57,241,17,241,89,164,130,63,146,213,94,28,171,152,170,7,216,1,91,131,18,190,133,49,36,195,125,12,85,116,93,190,114,254,177,222,128,167,6,220,155,116,241,155,193,193,105,155,228,134,71,190,239,198,157,193,15,204,161,12,36,111,44,233,45,170,132,116,74,220,169,176,92,218,136,249,118,82,81,62,152,109,198,49,168,200,39,3,176,199,127,89,191,243,11,224,198,71,145,167,213,81,99,202,6,103,41,41,20,133,10,183,39,56,33,27,46,252,109,44,77,19,13,56,83,84,115,10,101,187,10,106,118,46,201,194,129,133,44,114,146,161,232,191,162,75,102,26,168,112,139,75,194,163,81,108,199,25,232,146,209,36,6,153,214,133,53,14,244,112,160,106,16,22,193,164,25,8,108,55,30,76,119,72,39,181,188,176,52,179,12,28,57,74,170,216,78,79,202,156,91,243,111,46,104,238,130,143,116,111,99,165,120,20,120,200,132,8,2,199,140,250,255,190,144,235,108,80,164,247,163,249,190,242,120,113,198,1,0,0,0,16,0,0,0,200,160,0,0,2,0,0,0,0,0,0,0,8,0,0,0,255,59,1,0,0,0,0,0,0,0,0,0,0,0,0,0,14,60,1,0,20,5,0,0,2,0,0,0,0,0,0,0,4,0,0,0,21,60,1,0,48,5,0,0,1,0,0,0,16,0,0,0,12,161,0,0,2,0,0,0,52,161,0,0,12,0,0,0,25,60,1,0,0,0,0,0,0,0,0,0,0,0,0,0,37,60,1,0,76,5,0,0,0,0,0,0,0,0,0,0,4,0,0,0,43,60,1,0,248,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,66,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,5,0,7,0,11,0,13,0,17,0,19,0,23,0,29,0,31,0,37,0,41,0,43,0,47,0,53,0,59,0,61,0,67,0,71,0,73,0,79,0,83,0,89,0,97,0,101,0,103,0,107,0,109,0,113,0,127,0,131,0,137,0,139,0,149,0,151,0,157,0,163,0,167,0,173,0,179,0,181,0,191,0,193,0,197,0,199,0,211,0,223,0,227,0,229,0,233,0,239,0,241,0,251,0,1,1,7,1,13,1,15,1,21,1,25,1,27,1,37,1,51,1,55,1,57,1,61,1,75,1,81,1,91,1,93,1,97,1,103,1,111,1,117,1,123,1,127,1,133,1,141,1,145,1,153,1,163,1,165,1,175,1,177,1,183,1,187,1,193,1,201,1,205,1,207,1,211,1,223,1,231,1,235,1,243,1,247,1,253,1,9,2,11,2,29,2,35,2,45,2,51,2,57,2,59,2,65,2,75,2,81,2,87,2,89,2,95,2,101,2,105,2,107,2,119,2,129,2,131,2,135,2,141,2,147,2,149,2,161,2,165,2,171,2,179,2,189,2,197,2,207,2,215,2,221,2,227,2,231,2,239,2,245,2,249,2,1,3,5,3,19,3,29,3,41,3,43,3,53,3,55,3,59,3,61,3,71,3,85,3,89,3,91,3,95,3,109,3,113,3,115,3,119,3,139,3,143,3,151,3,161,3,169,3,173,3,179,3,185,3,199,3,203,3,209,3,215,3,223,3,229,3,241,3,245,3,251,3,253,3,7,4,9,4,15,4,25,4,27,4,37,4,39,4,45,4,63,4,67,4,69,4,73,4,79,4,85,4,93,4,99,4,105,4,127,4,129,4,139,4,147,4,157,4,163,4,169,4,177,4,189,4,193,4,199,4,205,4,207,4,213,4,225,4,235,4,253,4,255,4,3,5,9,5,11,5,17,5,21,5,23,5,27,5,39,5,41,5,47,5,81,5,87,5,93,5,101,5,119,5,129,5,143,5,147,5,149,5,153,5,159,5,167,5,171,5,173,5,179,5,191,5,201,5,203,5,207,5,209,5,213,5,219,5,231,5,243,5,251,5,7,6,13,6,17,6,23,6,31,6,35,6,43,6,47,6,61,6,65,6,71,6,73,6,77,6,83,6,85,6,91,6,101,6,121,6,127,6,131,6,133,6,157,6,161,6,163,6,173,6,185,6,187,6,197,6,205,6,211,6,217,6,223,6,241,6,247,6,251,6,253,6,9,7,19,7,31,7,39,7,55,7,69,7,75,7,79,7,81,7,85,7,87,7,97,7,109,7,115,7,121,7,139,7,141,7,157,7,159,7,181,7,187,7,195,7,201,7,205,7,207,7,211,7,219,7,225,7,235,7,237,7,247,7,5,8,15,8,21,8,33,8,35,8,39,8,41,8,51,8,63,8,65,8,81,8,83,8,89,8,93,8,95,8,105,8,113,8,131,8,155,8,159,8,165,8,173,8,189,8,191,8,195,8,203,8,219,8,221,8,225,8,233,8,239,8,245,8,249,8,5,9,7,9,29,9,35,9,37,9,43,9,47,9,53,9,67,9,73,9,77,9,79,9,85,9,89,9,95,9,107,9,113,9,119,9,133,9,137,9,143,9,155,9,163,9,169,9,173,9,199,9,217,9,227,9,235,9,239,9,245,9,247,9,253,9,19,10,31,10,33,10,49,10,57,10,61,10,73,10,87,10,97,10,99,10,103,10,111,10,117,10,123,10,127,10,129,10,133,10,139,10,147,10,151,10,153,10,159,10,169,10,171,10,181,10,189,10,193,10,207,10,217,10,229,10,231,10,237,10,241,10,243,10,3,11,17,11,21,11,27,11,35,11,41,11,45,11,63,11,71,11,81,11,87,11,93,11,101,11,111,11,123,11,137,11,141,11,147,11,153,11,155,11,183,11,185,11,195,11,203,11,207,11,221,11,225,11,233,11,245,11,251,11,7,12,11,12,17,12,37,12,47,12,49,12,65,12,91,12,95,12,97,12,109,12,115,12,119,12,131,12,137,12,145,12,149,12,157,12,179,12,181,12,185,12,187,12,199,12,227,12,229,12,235,12,241,12,247,12,251,12,1,13,3,13,15,13,19,13,31,13,33,13,43,13,45,13,61,13,63,13,79,13,85,13,105,13,121,13,129,13,133,13,135,13,139,13,141,13,163,13,171,13,183,13,189,13,199,13,201,13,205,13,211,13,213,13,219,13,229,13,231,13,243,13,253,13,255,13,9,14,23,14,29,14,33,14,39,14,47,14,53,14,59,14,75,14,87,14,89,14,93,14,107,14,113,14,117,14,125,14,135,14,143,14,149,14,155,14,177,14,183,14,185,14,195,14,209,14,213,14,219,14,237,14,239,14,249,14,7,15,11,15,13,15,23,15,37,15,41,15,49,15,67,15,71,15,77,15,79,15,83,15,89,15,91,15,103,15,107,15,127,15,149,15,161,15,163,15,167,15,173,15,179,15,181,15,187,15,209,15,211,15,217,15,233,15,239,15,251,15,253,15,3,16,15,16,31,16,33,16,37,16,43,16,57,16,61,16,63,16,81,16,105,16,115,16,121,16,123,16,133,16,135,16,145,16,147,16,157,16,163,16,165,16,175,16,177,16,187,16,193,16,201,16,231,16,241,16,243,16,253,16,5,17,11,17,21,17,39,17,45,17,57,17,69,17,71,17,89,17,95,17,99,17,105,17,111,17,129,17,131,17,141,17,155,17,161,17,165,17,167,17,171,17,195,17,197,17,209,17,215,17,231,17,239,17,245,17,251,17,13,18,29,18,31,18,35,18,41,18,43,18,49,18,55,18,65,18,71,18,83,18,95,18,113,18,115,18,121,18,125,18,143,18,151,18,175,18,179,18,181,18,185,18,191,18,193,18,205,18,209,18,223,18,253,18,7,19,13,19,25,19,39,19,45,19,55,19,67,19,69,19,73,19,79,19,87,19,93,19,103,19,105,19,109,19,123,19,129,19,135,19,139,19,145,19,147,19,157,19,159,19,175,19,187,19,195,19,213,19,217,19,223,19,235,19,237,19,243,19,249,19,255,19,27,20,33,20,47,20,51,20,59,20,69,20,77,20,89,20,107,20,111,20,113,20,117,20,141,20,153,20,159,20,161,20,177,20,183,20,189,20,203,20,213,20,227,20,231,20,5,21,11,21,17,21,23,21,31,21,37,21,41,21,43,21,55,21,61,21,65,21,67,21,73,21,95,21,101,21,103,21,107,21,125,21,127,21,131,21,143,21,145,21,151,21,155,21,181,21,187,21,193,21,197,21,205,21,215,21,247,21,7,22,9,22,15,22,19,22,21,22,25,22,27,22,37,22,51,22,57,22,61,22,69,22,79,22,85,22,105,22,109,22,111,22,117,22,147,22,151,22,159,22,169,22,175,22,181,22,189,22,195,22,207,22,211,22,217,22,219,22,225,22,229,22,235,22,237,22,247,22,249,22,9,23,15,23,35,23,39,23,51,23,65,23,93,23,99,23,119,23,123,23,141,23,149,23,155,23,159,23,165,23,179,23,185,23,191,23,201,23,203,23,213,23,225,23,233,23,243,23,245,23,255,23,7,24,19,24,29,24,53,24,55,24,59,24,67,24,73,24,77,24,85,24,103,24,113,24,119,24,125,24,127,24,133,24,143,24,155,24,157,24,167,24,173,24,179,24,185,24,193,24,199,24,209,24,215,24,217,24,223,24,229,24,235,24,245,24,253,24,21,25,27,25,49,25,51,25,69,25,73,25,81,25,91,25,121,25,129,25,147,25,151,25,153,25,163,25,169,25,171,25,177,25,181,25,199,25,207,25,219,25,237,25,253,25,3,26,5,26,17,26,23,26,33,26,35,26,45,26,47,26,53,26,63,26,77,26,81,26,105,26,107,26,123,26,125,26,135,26,137,26,147,26,167,26,171,26,173,26,177,26,185,26,201,26,207,26,213,26,215,26,227,26,243,26,251,26,255,26,5,27,35,27,37,27,47,27,49,27,55,27,59,27,65,27,71,27,79,27,85,27,89,27,101,27,107,27,115,27,127,27,131,27,145,27,157,27,167,27,191,27,197,27,209,27,215,27,217,27,239,27,247,27,9,28,19,28,25,28,39,28,43,28,45,28,51,28,61,28,69,28,75,28,79,28,85,28,115,28,129,28,139,28,141,28,153,28,163,28,165,28,181,28,183,28,201,28,225,28,243,28,249,28,9,29,27,29,33,29,35,29,53,29,57,29,63,29,65,29,75,29,83,29,93,29,99,29,105,29,113,29,117,29,123,29,125,29,135,29,137,29,149,29,153,29,159,29,165,29,167,29,179,29,183,29,197,29,215,29,219,29,225,29,245,29,249,29,1,30,7,30,11,30,19,30,23,30,37,30,43,30,47,30,61,30,73,30,77,30,79,30,109,30,113,30,137,30,143,30,149,30,161,30,173,30,187,30,193,30,197,30,199,30,203,30,221,30,227,30,239,30,247,30,253,30,1,31,13,31,15,31,27,31,57,31,73,31,75,31,81,31,103,31,117,31,123,31,133,31,145,31,151,31,153,31,157,31,165,31,175,31,181,31,187,31,211,31,225,31,231,31,235,31,243,31,255,31,17,32,27,32,29,32,39,32,41,32,45,32,51,32,71,32,77,32,81,32,95,32,99,32,101,32,105,32,119,32,125,32,137,32,161,32,171,32,177,32,185,32,195,32,197,32,227,32,231,32,237,32,239,32,251,32,255,32,13,33,19,33,53,33,65,33,73,33,79,33,89,33,91,33,95,33,115,33,125,33,133,33,149,33,151,33,161,33,175,33,179,33,181,33,193,33,199,33,215,33,221,33,229,33,233,33,241,33,245,33,251,33,3,34,9,34,15,34,27,34,33,34,37,34,43,34,49,34,57,34,75,34,79,34,99,34,103,34,115,34,117,34,127,34,133,34,135,34,145,34,157,34,159,34,163,34,183,34,189,34,219,34,225,34,229,34,237,34,247,34,3,35,9,35,11,35,39,35,41,35,47,35,51,35,53,35,69,35,81,35,83,35,89,35,99,35,107,35,131,35,143,35,149,35,167,35,173,35,177,35,191,35,197,35,201,35,213,35,221,35,227,35,239,35,243,35,249,35,5,36,11,36,23,36,25,36,41,36,61,36,65,36,67,36,77,36,95,36,103,36,107,36,121,36,125,36,127,36,133,36,155,36,161,36,175,36,181,36,187,36,197,36,203,36,205,36,215,36,217,36,221,36,223,36,245,36,247,36,251,36,1,37,7,37,19,37,25,37,39,37,49,37,61,37,67,37,75,37,79,37,115,37,129,37,141,37,147,37,151,37,157,37,159,37,171,37,177,37,189,37,205,37,207,37,217,37,225,37,247,37,249,37,5,38,11,38,15,38,21,38,39,38,41,38,53,38,59,38,63,38,75,38,83,38,89,38,101,38,105,38,111,38,123,38,129,38,131,38,143,38,155,38,159,38,173,38,179,38,195,38,201,38,203,38,213,38,221,38,239,38,245,38,23,39,25,39,53,39,55,39,77,39,83,39,85,39,95,39,107,39,109,39,115,39,119,39,127,39,149,39,155,39,157,39,167,39,175,39,179,39,185,39,193,39,197,39,209,39,227,39,239,39,3,40,7,40,13,40,19,40,27,40,31,40,33,40,49,40,61,40,63,40,73,40,81,40,91,40,93,40,97,40,103,40,117,40,129,40,151,40,159,40,187,40,189,40,193,40,213,40,217,40,219,40,223,40,237,40,247,40,3,41,5,41,17,41,33,41,35,41,63,41,71,41,93,41,101,41,105,41,111,41,117,41,131,41,135,41,143,41,155,41,161,41,167,41,171,41,191,41,195,41,213,41,215,41,227,41,233,41,237,41,243,41,1,42,19,42,29,42,37,42,47,42,79,42,85,42,95,42,101,42,107,42,109,42,115,42,131,42,137,42,139,42,151,42,157,42,185,42,187,42,197,42,205,42,221,42,227,42,235,42,241,42,251,42,19,43,39,43,49,43,51,43,61,43,63,43,75,43,79,43,85,43,105,43,109,43,111,43,123,43,141,43,151,43,153,43,163,43,165,43,169,43,189,43,205,43,231,43,235,43,243,43,249,43,253,43,9,44,15,44,23,44,35,44,47,44,53,44,57,44,65,44,87,44,89,44,105,44,119,44,129,44,135,44,147,44,159,44,173,44,179,44,183,44,203,44,207,44,219,44,225,44,227,44,233,44,239,44,255,44,7,45,29,45,31,45,59,45,67,45,73,45,77,45,97,45,101,45,113,45,137,45,157,45,161,45,169,45,179,45,181,45,197,45,199,45,211,45,223,45,1,46,3,46,7,46,13,46,25,46,31,46,37,46,45,46,51,46,55,46,57,46,63,46,87,46,91,46,111,46,121,46,127,46,133,46,147,46,151,46,157,46,163,46,165,46,177,46,183,46,193,46,195,46,205,46,211,46,231,46,235,46,5,47,9,47,11,47,17,47,39,47,41,47,65,47,69,47,75,47,77,47,81,47,87,47,111,47,117,47,125,47,129,47,131,47,165,47,171,47,179,47,195,47,207,47,209,47,219,47,221,47,231,47,237,47,245,47,249,47,1,48,13,48,35,48,41,48,55,48,59,48,85,48,89,48,91,48,103,48,113,48,121,48,125,48,133,48,145,48,149,48,163,48,169,48,185,48,191,48,199,48,203,48,209,48,215,48,223,48,229,48,239,48,251,48,253,48,3,49,9,49,25,49,33,49,39,49,45,49,57,49,67,49,69,49,75,49,93,49,97,49,103,49,109,49,115,49,127,49,145,49,153,49,159,49,169,49,177,49,195,49,199,49,213,49,219,49,237,49,247,49,255,49,9,50,21,50,23,50,29,50,41,50,53,50,89,50,93,50,99,50,107,50,111,50,117,50,119,50,123,50,141,50,153,50,159,50,167,50,173,50,179,50,183,50,201,50,203,50,207,50,209,50,233,50,237,50,243,50,249,50,7,51,37,51,43,51,47,51,53,51,65,51,71,51,91,51,95,51,103,51,107,51,115,51,121,51,127,51,131,51,161,51,163,51,173,51,185,51,193,51,203,51,211,51,235,51,241,51,253,51,1,52,15,52,19,52,25,52,27,52,55,52,69,52,85,52,87,52,99,52,105,52,109,52,129,52,139,52,145,52,151,52,157,52,165,52,175,52,187,52,201,52,211,52,225,52,241,52,255,52,9,53,23,53,29,53,45,53,51,53,59,53,65,53,81,53,101,53,111,53,113,53,119,53,123,53,125,53,129,53,141,53,143,53,153,53,155,53,161,53,183,53,189,53,191,53,195,53,213,53,221,53,231,53,239,53,5,54,7,54,17,54,35,54,49,54,53,54,55,54,59,54,77,54,79,54,83,54,89,54,97,54,107,54,109,54,139,54,143,54,173,54,175,54,185,54,187,54,205,54,209,54,227,54,233,54,247,54,1,55,3,55,7,55,27,55,63,55,69,55,73,55,79,55,93,55,97,55,117,55,127,55,141,55,163,55,169,55,171,55,201,55,213,55,223,55,241,55,243,55,247,55,5,56,11,56,33,56,51,56,53,56,65,56,71,56,75,56,83,56,87,56,95,56,101,56,111,56,113,56,125,56,143,56,153,56,167,56,183,56,197,56,201,56,207,56,213,56,215,56,221,56,225,56,227,56,255,56,1,57,29,57,35,57,37,57,41,57,47,57,61,57,65,57,77,57,91,57,107,57,121,57,125,57,131,57,139,57,145,57,149,57,155,57,161,57,167,57,175,57,179,57,187,57,191,57,205,57,221,57,229,57,235,57,239,57,251,57,3,58,19,58,21,58,31,58,39,58,43,58,49,58,75,58,81,58,91,58,99,58,103,58,109,58,121,58,135,58,165,58,169,58,183,58,205,58,213,58,225,58,229,58,235,58,243,58,253,58,3,59,17,59,27,59,33,59,35,59,45,59,57,59,69,59,83,59,89,59,95,59,113,59,123,59,129,59,137,59,155,59,159,59,165,59,167,59,173,59,183,59,185,59,195,59,203,59,209,59,215,59,225,59,227,59,245,59,255,59,1,60,13,60,17,60,23,60,31,60,41,60,53,60,67,60,79,60,83,60,91,60,101,60,107,60,113,60,133,60,137,60,151,60,167,60,181,60,191,60,199,60,209,60,221,60,223,60,241,60,247,60,3,61,13,61,25,61,27,61,31,61,33,61,45,61,51,61,55,61,63,61,67,61,111,61,115,61,117,61,121,61,123,61,133,61,145,61,151,61,157,61,171,61,175,61,181,61,187,61,193,61,201,61,207,61,243,61,5,62,9,62,15,62,17,62,29,62,35,62,41,62,47,62,51,62,65,62,87,62,99,62,101,62,119,62,129,62,135,62,161,62,185,62,189,62,191,62,195,62,197,62,201,62,215,62,219,62,225,62,231,62,239,62,255,62,11,63,13,63,55,63,59,63,61,63,65,63,89,63,95,63,101,63,103,63,121,63,125,63,139,63,145,63,173,63,191,63,205,63,211,63,221,63,233,63,235,63,241,63,253,63,27,64,33,64,37,64,43,64,49,64,63,64,67,64,69,64,93,64,97,64,103,64,109,64,135,64,145,64,163,64,169,64,177,64,183,64,189,64,219,64,223,64,235,64,247,64,249,64,9,65,11,65,17,65,21,65,33,65,51,65,53,65,59,65,63,65,89,65,101,65,107,65,119,65,123,65,147,65,171,65,183,65,189,65,191,65,203,65,231,65,239,65,243,65,249,65,5,66,7,66,25,66,31,66,35,66,41,66,47,66,67,66,83,66,85,66,91,66,97,66,115,66,125,66,131,66,133,66,137,66,145,66,151,66,157,66,181,66,197,66,203,66,211,66,221,66,227,66,241,66,7,67,15,67,31,67,37,67,39,67,51,67,55,67,57,67,79,67,87,67,105,67,139,67,141,67,147,67,165,67,169,67,175,67,181,67,189,67,199,67,207,67,225,67,231,67,235,67,237,67,241,67,249,67,9,68,11,68,23,68,35,68,41,68,59,68,63,68,69,68,75,68,81,68,83,68,89,68,101,68,111,68,131,68,143,68,161,68,165,68,171,68,173,68,189,68,191,68,201,68,215,68,219,68,249,68,251,68,5,69,17,69,19,69,43,69,49,69,65,69,73,69,83,69,85,69,97,69,119,69,125,69,127,69,143,69,163,69,173,69,175,69,187,69,199,69,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,2,64,0,128,0,0,0,0,2,0,2,64,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,2,0,0,0,0,0,0,0,2,0,2,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,0,0,32,0,0,0,0,2,0,1,64,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,0,0,0,2,0,0,0,2,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,123,32,114,101,116,117,114,110,32,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,40,41,59,32,125,0,123,32,105,102,32,40,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,32,61,61,61,32,117,110,100,101,102,105,110,101,100,41,32,123,32,116,114,121,32,123,32,118,97,114,32,119,105,110,100,111,119,95,32,61,32,34,111,98,106,101,99,116,34,32,61,61,61,32,116,121,112,101,111,102,32,119,105,110,100,111,119,32,63,32,119,105,110,100,111,119,32,58,32,115,101,108,102,44,32,99,114,121,112,116,111,95,32,61,32,116,121,112,101,111,102,32,119,105,110,100,111,119,95,46,99,114,121,112,116,111,32,33,61,61,32,34,117,110,100,101,102,105,110,101,100,34,32,63,32,119,105,110,100,111,119,95,46,99,114,121,112,116,111,32,58,32,119,105,110,100,111,119,95,46,109,115,67,114,121,112,116,111,44,32,114,97,110,100,111,109,86,97,108,117,101,115,83,116,97,110,100,97,114,100,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,118,97,114,32,98,117,102,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,49,41,59,32,99,114,121,112,116,111,95,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,115,40,98,117,102,41,59,32,114,101,116,117,114,110,32,98,117,102,91,48,93,32,62,62,62,32,48,59,32,125,59,32,114,97,110,100,111,109,86,97,108,117,101,115,83,116,97,110,100,97,114,100,40,41,59,32,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,32,61,32,114,97,110,100,111,109,86,97,108,117,101,115,83,116,97,110,100,97,114,100,59,32,125,32,99,97,116,99,104,32,40,101,41,32,123,32,116,114,121,32,123,32,118,97,114,32,99,114,121,112,116,111,32,61,32,114,101,113,117,105,114,101,40,39,99,114,121,112,116,111,39,41,44,32,114,97,110,100,111,109,86,97,108,117,101,78,111,100,101,74,83,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,118,97,114,32,98,117,102,32,61,32,99,114,121,112,116,111,46,114,97,110,100,111,109,66,121,116,101,115,40,52,41,59,32,114,101,116,117,114,110,32,40,98,117,102,91,48,93,32,60,60,32,50,52,32,124,32,98,117,102,91,49,93,32,60,60,32,49,54,32,124,32,98,117,102,91,50,93,32,60,60,32,56,32,124,32,98,117,102,91,51,93,41,32,62,62,62,32,48,59,32,125,59,32,114,97,110,100,111,109,86,97,108,117,101,78,111,100,101,74,83,40,41,59,32,77,111,100,117,108,101,46,103,101,116,82,97,110,100,111,109,86,97,108,117,101,32,61,32,114,97,110,100,111,109,86,97,108,117,101,78,111,100,101,74,83,59,32,125,32,99,97,116,99,104,32,40,101,41,32,123,32,116,104,114,111,119,32,39,78,111,32,115,101,99,117,114,101,32,114,97,110,100,111,109,32,110,117,109,98,101,114,32,103,101,110,101,114,97,116,111,114,32,102,111,117,110,100,39,59,32,125,32,125,32,125,32,125,0,60,73,78,86,65,76,73,68,62,0,85,84,70,56,0,66,79,79,76,0,66,79,79,76,69,65,78,0,73,78,84,0,73,78,84,69,71,69,82,0,69,78,85,77,0,69,78,85,77,69,82,65,84,69,68,0,79,73,68,0,79,66,74,69,67,84,0,85,84,67,84,73,77,69,0,85,84,67,0,71,69,78,69,82,65,76,73,90,69,68,84,73,77,69,0,71,69,78,84,73,77,69,0,79,67,84,0,79,67,84,69,84,83,84,82,73,78,71,0,66,73,84,83,84,82,0,66,73,84,83,84,82,73,78,71,0,85,78,73,86,69,82,83,65,76,83,84,82,73,78,71,0,85,78,73,86,0,73,65,53,0,73,65,53,83,84,82,73,78,71,0,85,84,70,56,83,116,114,105,110,103,0,66,77,80,0,66,77,80,83,84,82,73,78,71,0,86,73,83,73,66,76,69,83,84,82,73,78,71,0,86,73,83,73,66,76,69,0,80,82,73,78,84,65,66,76,69,83,84,82,73,78,71,0,80,82,73,78,84,65,66,76,69,0,84,54,49,0,84,54,49,83,84,82,73,78,71,0,84,69,76,69,84,69,88,83,84,82,73,78,71,0,71,101,110,101,114,97,108,83,116,114,105,110,103,0,71,69,78,83,84,82,0,78,85,77,69,82,73,67,0,78,85,77,69,82,73,67,83,84,82,73,78,71,0,83,69,81,85,69,78,67,69,0,83,69,81,0,83,69,84,0,69,88,80,0,69,88,80,76,73,67,73,84,0,73,77,80,0,73,77,80,76,73,67,73,84,0,79,67,84,87,82,65,80,0,83,69,81,87,82,65,80,0,83,69,84,87,82,65,80,0,66,73,84,87,82,65,80,0,70,79,82,77,0,70,79,82,77,65,84,0,68,73,82,0,111,105,100,95,115,101,99,116,105,111,110,0,115,116,98,108,95,115,101,99,116,105,111,110,0,109,105,110,0,109,97,120,0,109,97,115,107,0,102,108,97,103,115,0,110,111,109,97,115,107,0,102,105,101,108,100,61,0,48,48,0,92,10,0,37,115,32,48,10,0,37,115,32,37,115,37,108,117,32,40,37,115,48,120,37,108,120,41,10,0,32,40,78,101,103,97,116,105,118,101,41,0,37,115,37,115,10,0,70,105,101,108,100,61,0,44,32,84,121,112,101,61,0,84,121,112,101,61,0,65,83,78,49,95,79,67,84,69,84,95,83,84,82,73,78,71,0,65,83,78,49,95,73,78,84,69,71,69,82,0,65,83,78,49,95,66,73,84,95,83,84,82,73,78,71,0,65,83,78,49,95,79,66,74,69,67,84,0,65,83,78,49,95,65,78,89,0,88,53,48,57,95,65,76,71,79,82,0,112,97,114,97,109,101,116,101,114,0,66,73,71,78,85,77,0,67,66,73,71,78,85,77,0,76,79,78,71,0,37,108,100,10,0,88,53,48,57,95,83,73,71,0,100,105,103,101,115,116,0,37,48,52,120,32,45,32,0,37,99,0,32,32,32,0,37,48,50,120,37,99,0,32,32,0,37,115,37,48,52,120,32,45,32,60,83,80,65,67,69,83,47,78,85,76,83,62,10,0,60,78,85,76,76,62,0,48,49,50,51,52,53,54,55,56,57,0,48,120,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,42,115,98,117,102,102,101,114,32,33,61,32,78,85,76,76,32,124,124,32,98,117,102,102,101,114,32,33,61,32,78,85,76,76,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,42,99,117,114,114,108,101,110,32,60,61,32,42,109,97,120,108,101,110,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,42,115,98,117,102,102,101,114,32,33,61,32,78,85,76,76,0,32,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,48,0,37,117,0,37,48,57,117,0,45,0,69,78,86,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,118,118,32,61,61,32,78,85,76,76,0,79,112,101,110,83,83,76,32,100,101,102,97,117,108,116,0,114,98,0,91,37,115,93,32,37,115,61,37,115,10,0,91,91,37,115,93,93,10,0,100,101,102,97,117,108,116,0,37,108,100,0,108,105,110,101,32,0,103,114,111,117,112,61,0,32,110,97,109,101,61,0,111,112,101,110,115,115,108,95,99,111,110,102,0,79,80,69,78,83,83,76,95,105,110,105,116,0,79,80,69,78,83,83,76,95,102,105,110,105,115,104,0,109,111,100,117,108,101,61,0,44,32,112,97,116,104,61,0,37,45,56,100,0,44,32,114,101,116,99,111,100,101,61,0,79,80,69,78,83,83,76,95,67,79,78,70,0,47,0,111,112,101,110,115,115,108,46,99,110,102,0,78,85,76,76,32,115,104,97,114,101,100,32,108,105,98,114,97,114,121,32,109,101,116,104,111,100,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,99,116,120,45,62,100,105,103,101,115,116,45,62,109,100,95,115,105,122,101,32,60,61,32,69,86,80,95,77,65,88,95,77,68,95,83,73,90,69,0,97,108,103,95,115,101,99,116,105,111,110,0,102,105,112,115,95,109,111,100,101,0,110,97,109,101,61,0,44,32,118,97,108,117,101,61,0,79,112,101,110,83,83,76,32,72,77,65,67,32,109,101,116,104,111,100,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,106,32,60,61,32,40,105,110,116,41,115,105,122,101,111,102,40,99,116,120,45,62,107,101,121,41,0,115,97,108,116,0,104,101,120,115,97,108,116,0,107,101,121,0,104,101,120,107,101,121,0,104,101,120,105,110,102,111,0,109,100,0,115,101,99,114,101,116,0,104,101,120,115,101,99,114,101,116,0,115,101,101,100,0,104,101,120,115,101,101,100,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,99,104,117,110,107,32,62,61,32,48,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,87,73,84,72,73,78,95,70,82,69,69,76,73,83,84,40,108,105,115,116,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,87,73,84,72,73,78,95,65,82,69,78,65,40,112,116,114,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,116,101,109,112,45,62,110,101,120,116,32,61,61,32,78,85,76,76,32,124,124,32,87,73,84,72,73,78,95,65,82,69,78,65,40,116,101,109,112,45,62,110,101,120,116,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,40,99,104,97,114,32,42,42,41,116,101,109,112,45,62,110,101,120,116,45,62,112,95,110,101,120,116,32,61,61,32,108,105,115,116,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,108,105,115,116,32,62,61,32,48,32,38,38,32,108,105,115,116,32,60,32,115,104,46,102,114,101,101,108,105,115,116,95,115,105,122,101,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,40,40,112,116,114,32,45,32,115,104,46,97,114,101,110,97,41,32,38,32,40,40,115,104,46,97,114,101,110,97,95,115,105,122,101,32,62,62,32,108,105,115,116,41,32,45,32,49,41,41,32,61,61,32,48,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,98,105,116,32,62,32,48,32,38,38,32,98,105,116,32,60,32,115,104,46,98,105,116,116,97,98,108,101,95,115,105,122,101,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,33,84,69,83,84,66,73,84,40,116,97,98,108,101,44,32,98,105,116,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,33,115,104,95,116,101,115,116,98,105,116,40,116,101,109,112,44,32,115,108,105,115,116,44,32,115,104,46,98,105,116,109,97,108,108,111,99,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,87,73,84,72,73,78,95,70,82,69,69,76,73,83,84,40,116,101,109,112,50,45,62,112,95,110,101,120,116,41,32,124,124,32,87,73,84,72,73,78,95,65,82,69,78,65,40,116,101,109,112,50,45,62,112,95,110,101,120,116,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,116,101,109,112,32,33,61,32,115,104,46,102,114,101,101,108,105,115,116,91,115,108,105,115,116,93,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,115,104,46,102,114,101,101,108,105,115,116,91,115,108,105,115,116,93,32,61,61,32,116,101,109,112,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,116,101,109,112,45,40,115,104,46,97,114,101,110,97,95,115,105,122,101,32,62,62,32,115,108,105,115,116,41,32,61,61,32,115,104,95,102,105,110,100,95,109,121,95,98,117,100,100,121,40,116,101,109,112,44,32,115,108,105,115,116,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,115,104,95,116,101,115,116,98,105,116,40,99,104,117,110,107,44,32,108,105,115,116,44,32,115,104,46,98,105,116,116,97,98,108,101,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,87,73,84,72,73,78,95,65,82,69,78,65,40,99,104,117,110,107,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,40,98,105,116,32,38,32,49,41,32,61,61,32,48,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,115,104,95,116,101,115,116,98,105,116,40,112,116,114,44,32,108,105,115,116,44,32,115,104,46,98,105,116,116,97,98,108,101,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,84,69,83,84,66,73,84,40,116,97,98,108,101,44,32,98,105,116,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,112,116,114,32,61,61,32,115,104,95,102,105,110,100,95,109,121,95,98,117,100,100,121,40,98,117,100,100,121,44,32,108,105,115,116,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,112,116,114,32,33,61,32,78,85,76,76,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,33,115,104,95,116,101,115,116,98,105,116,40,112,116,114,44,32,108,105,115,116,44,32,115,104,46,98,105,116,109,97,108,108,111,99,41,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,115,104,46,102,114,101,101,108,105,115,116,91,108,105,115,116,93,32,61,61,32,112,116,114,0,85,78,68,69,70,0,117,110,100,101,102,105,110,101,100,0,114,115,97,100,115,105,0,82,83,65,32,68,97,116,97,32,83,101,99,117,114,105,116,121,44,32,73,110,99,46,0,42,134,72,134,247,13,42,134,72,134,247,13,1,42,134,72,134,247,13,2,2,42,134,72,134,247,13,2,5,42,134,72,134,247,13,3,4,42,134,72,134,247,13,1,1,1,42,134,72,134,247,13,1,1,2,42,134,72,134,247,13,1,1,4,42,134,72,134,247,13,1,5,1,42,134,72,134,247,13,1,5,3,85,85,4,85,4,3,85,4,6,85,4,7,85,4,8,85,4,10,85,4,11,85,8,1,1,42,134,72,134,247,13,1,7,42,134,72,134,247,13,1,7,1,42,134,72,134,247,13,1,7,2,42,134,72,134,247,13,1,7,3,42,134,72,134,247,13,1,7,4,42,134,72,134,247,13,1,7,5,42,134,72,134,247,13,1,7,6,42,134,72,134,247,13,1,3,42,134,72,134,247,13,1,3,1,43,14,3,2,6,43,14,3,2,9,43,14,3,2,7,43,14,3,2,17,43,6,1,4,1,129,60,7,1,1,2,42,134,72,134,247,13,3,2,43,14,3,2,18,43,14,3,2,15,42,134,72,134,247,13,3,7,43,14,3,2,8,42,134,72,134,247,13,1,9,42,134,72,134,247,13,1,9,1,42,134,72,134,247,13,1,9,2,42,134,72,134,247,13,1,9,3,42,134,72,134,247,13,1,9,4,42,134,72,134,247,13,1,9,5,42,134,72,134,247,13,1,9,6,42,134,72,134,247,13,1,9,7,42,134,72,134,247,13,1,9,8,42,134,72,134,247,13,1,9,9,96,134,72,1,134,248,66,96,134,72,1,134,248,66,1,96,134,72,1,134,248,66,2,43,14,3,2,26,42,134,72,134,247,13,1,1,5,43,14,3,2,13,43,14,3,2,12,42,134,72,134,247,13,1,5,11,42,134,72,134,247,13,1,5,12,43,14,3,2,27,96,134,72,1,134,248,66,1,1,96,134,72,1,134,248,66,1,2,96,134,72,1,134,248,66,1,3,96,134,72,1,134,248,66,1,4,96,134,72,1,134,248,66,1,7,96,134,72,1,134,248,66,1,8,96,134,72,1,134,248,66,1,12,96,134,72,1,134,248,66,1,13,96,134,72,1,134,248,66,2,5,85,29,85,29,14,85,29,15,85,29,16,85,29,17,85,29,18,85,29,19,85,29,20,85,29,32,85,29,35,43,6,1,4,1,151,85,1,2,85,8,3,101,85,8,3,100,85,4,42,85,4,4,85,4,43,9,146,38,137,147,242,44,100,1,44,85,29,31,43,14,3,2,3,85,4,5,85,4,12,85,4,13,42,134,72,134,246,125,7,66,10,42,134,72,134,246,125,7,66,12,42,134,72,206,56,4,3,43,14,3,2,29,42,134,72,206,56,4,1,43,36,3,2,1,43,36,3,3,1,2,42,134,72,134,247,13,3,8,42,134,72,134,247,13,1,9,16,3,8,85,29,37,43,6,1,5,5,7,43,6,1,5,5,7,3,43,6,1,5,5,7,3,1,43,6,1,5,5,7,3,2,43,6,1,5,5,7,3,3,43,6,1,5,5,7,3,4,43,6,1,5,5,7,3,8,43,6,1,4,1,130,55,2,1,21,43,6,1,4,1,130,55,2,1,22,43,6,1,4,1,130,55,10,3,1,43,6,1,4,1,130,55,10,3,3,43,6,1,4,1,130,55,10,3,4,96,134,72,1,134,248,66,4,1,85,29,27,85,29,21,85,29,24,43,101,1,4,1,42,134,72,134,247,13,1,12,1,1,42,134,72,134,247,13,1,12,1,2,42,134,72,134,247,13,1,12,1,3,42,134,72,134,247,13,1,12,1,4,42,134,72,134,247,13,1,12,1,5,42,134,72,134,247,13,1,12,1,6,42,134,72,134,247,13,1,12,10,1,1,42,134,72,134,247,13,1,12,10,1,2,42,134,72,134,247,13,1,12,10,1,3,42,134,72,134,247,13,1,12,10,1,4,42,134,72,134,247,13,1,12,10,1,5,42,134,72,134,247,13,1,12,10,1,6,42,134,72,134,247,13,1,9,20,42,134,72,134,247,13,1,9,21,42,134,72,134,247,13,1,9,22,1,42,134,72,134,247,13,1,9,22,2,42,134,72,134,247,13,1,9,23,1,42,134,72,134,247,13,1,5,13,42,134,72,134,247,13,1,5,14,42,134,72,134,247,13,2,7,43,6,1,5,5,7,2,1,43,6,1,5,5,7,2,2,42,134,72,134,247,13,1,9,15,42,134,72,134,247,13,1,5,4,42,134,72,134,247,13,1,5,6,42,134,72,134,247,13,1,5,10,43,6,1,4,1,130,55,2,1,14,42,134,72,134,247,13,1,9,14,85,4,41,85,4,46,43,6,1,5,5,7,1,43,6,1,5,5,7,48,43,6,1,5,5,7,1,1,43,6,1,5,5,7,48,1,43,6,1,5,5,7,48,2,43,6,1,5,5,7,3,9,42,42,134,72,42,134,72,206,56,42,134,72,206,56,4,42,134,72,134,247,13,1,1,42,134,72,134,247,13,1,5,42,134,72,134,247,13,1,9,16,42,134,72,134,247,13,1,9,16,0,42,134,72,134,247,13,1,9,16,1,42,134,72,134,247,13,1,9,16,2,42,134,72,134,247,13,1,9,16,3,42,134,72,134,247,13,1,9,16,4,42,134,72,134,247,13,1,9,16,5,42,134,72,134,247,13,1,9,16,6,42,134,72,134,247,13,1,9,16,0,1,42,134,72,134,247,13,1,9,16,0,2,42,134,72,134,247,13,1,9,16,0,3,42,134,72,134,247,13,1,9,16,0,4,42,134,72,134,247,13,1,9,16,0,5,42,134,72,134,247,13,1,9,16,0,6,42,134,72,134,247,13,1,9,16,0,7,42,134,72,134,247,13,1,9,16,0,8,42,134,72,134,247,13,1,9,16,1,1,42,134,72,134,247,13,1,9,16,1,2,42,134,72,134,247,13,1,9,16,1,3,42,134,72,134,247,13,1,9,16,1,4,42,134,72,134,247,13,1,9,16,1,5,42,134,72,134,247,13,1,9,16,1,6,42,134,72,134,247,13,1,9,16,1,7,42,134,72,134,247,13,1,9,16,1,8,42,134,72,134,247,13,1,9,16,2,1,42,134,72,134,247,13,1,9,16,2,2,42,134,72,134,247,13,1,9,16,2,3,42,134,72,134,247,13,1,9,16,2,4,42,134,72,134,247,13,1,9,16,2,5,42,134,72,134,247,13,1,9,16,2,6,42,134,72,134,247,13,1,9,16,2,7,42,134,72,134,247,13,1,9,16,2,8,42,134,72,134,247,13,1,9,16,2,9,42,134,72,134,247,13,1,9,16,2,10,42,134,72,134,247,13,1,9,16,2,11,42,134,72,134,247,13,1,9,16,2,12,42,134,72,134,247,13,1,9,16,2,13,42,134,72,134,247,13,1,9,16,2,14,42,134,72,134,247,13,1,9,16,2,15,42,134,72,134,247,13,1,9,16,2,16,42,134,72,134,247,13,1,9,16,2,17,42,134,72,134,247,13,1,9,16,2,18,42,134,72,134,247,13,1,9,16,2,19,42,134,72,134,247,13,1,9,16,2,20,42,134,72,134,247,13,1,9,16,2,21,42,134,72,134,247,13,1,9,16,2,22,42,134,72,134,247,13,1,9,16,2,23,42,134,72,134,247,13,1,9,16,2,24,42,134,72,134,247,13,1,9,16,2,25,42,134,72,134,247,13,1,9,16,2,26,42,134,72,134,247,13,1,9,16,2,27,42,134,72,134,247,13,1,9,16,2,28,42,134,72,134,247,13,1,9,16,2,29,42,134,72,134,247,13,1,9,16,3,1,42,134,72,134,247,13,1,9,16,3,2,42,134,72,134,247,13,1,9,16,3,3,42,134,72,134,247,13,1,9,16,3,4,42,134,72,134,247,13,1,9,16,3,5,42,134,72,134,247,13,1,9,16,3,6,42,134,72,134,247,13,1,9,16,3,7,42,134,72,134,247,13,1,9,16,4,1,42,134,72,134,247,13,1,9,16,5,1,42,134,72,134,247,13,1,9,16,5,2,42,134,72,134,247,13,1,9,16,6,1,42,134,72,134,247,13,1,9,16,6,2,42,134,72,134,247,13,1,9,16,6,3,42,134,72,134,247,13,1,9,16,6,4,42,134,72,134,247,13,1,9,16,6,5,42,134,72,134,247,13,1,9,16,6,6,42,134,72,134,247,13,2,4,43,6,1,5,5,7,0,43,6,1,5,5,7,2,43,6,1,5,5,7,4,43,6,1,5,5,7,5,43,6,1,5,5,7,6,43,6,1,5,5,7,7,43,6,1,5,5,7,8,43,6,1,5,5,7,9,43,6,1,5,5,7,10,43,6,1,5,5,7,11,43,6,1,5,5,7,12,43,6,1,5,5,7,0,1,43,6,1,5,5,7,0,2,43,6,1,5,5,7,0,3,43,6,1,5,5,7,0,4,43,6,1,5,5,7,0,5,43,6,1,5,5,7,0,6,43,6,1,5,5,7,0,7,43,6,1,5,5,7,0,8,43,6,1,5,5,7,0,9,43,6,1,5,5,7,0,10,43,6,1,5,5,7,0,11,43,6,1,5,5,7,0,12,43,6,1,5,5,7,0,13,43,6,1,5,5,7,0,14,43,6,1,5,5,7,0,15,43,6,1,5,5,7,0,16,43,6,1,5,5,7,1,2,43,6,1,5,5,7,1,3,43,6,1,5,5,7,1,4,43,6,1,5,5,7,1,5,43,6,1,5,5,7,1,6,43,6,1,5,5,7,1,7,43,6,1,5,5,7,1,8,43,6,1,5,5,7,1,9,43,6,1,5,5,7,2,3,43,6,1,5,5,7,3,5,43,6,1,5,5,7,3,6,43,6,1,5,5,7,3,7,43,6,1,5,5,7,3,10,43,6,1,5,5,7,4,1,43,6,1,5,5,7,4,2,43,6,1,5,5,7,4,3,43,6,1,5,5,7,4,4,43,6,1,5,5,7,4,5,43,6,1,5,5,7,4,6,43,6,1,5,5,7,4,7,43,6,1,5,5,7,4,8,43,6,1,5,5,7,4,9,43,6,1,5,5,7,4,10,43,6,1,5,5,7,4,11,43,6,1,5,5,7,4,12,43,6,1,5,5,7,4,13,43,6,1,5,5,7,4,14,43,6,1,5,5,7,4,15,43,6,1,5,5,7,5,1,43,6,1,5,5,7,5,2,43,6,1,5,5,7,5,1,1,43,6,1,5,5,7,5,1,2,43,6,1,5,5,7,5,1,3,43,6,1,5,5,7,5,1,4,43,6,1,5,5,7,5,1,5,43,6,1,5,5,7,5,1,6,43,6,1,5,5,7,5,2,1,43,6,1,5,5,7,5,2,2,43,6,1,5,5,7,6,1,43,6,1,5,5,7,6,2,43,6,1,5,5,7,6,3,43,6,1,5,5,7,6,4,43,6,1,5,5,7,7,1,43,6,1,5,5,7,7,2,43,6,1,5,5,7,7,3,43,6,1,5,5,7,7,4,43,6,1,5,5,7,7,5,43,6,1,5,5,7,7,6,43,6,1,5,5,7,7,7,43,6,1,5,5,7,7,8,43,6,1,5,5,7,7,9,43,6,1,5,5,7,7,10,43,6,1,5,5,7,7,11,43,6,1,5,5,7,7,15,43,6,1,5,5,7,7,16,43,6,1,5,5,7,7,17,43,6,1,5,5,7,7,18,43,6,1,5,5,7,7,19,43,6,1,5,5,7,7,21,43,6,1,5,5,7,7,22,43,6,1,5,5,7,7,23,43,6,1,5,5,7,7,24,43,6,1,5,5,7,8,1,43,6,1,5,5,7,9,1,43,6,1,5,5,7,9,2,43,6,1,5,5,7,9,3,43,6,1,5,5,7,9,4,43,6,1,5,5,7,9,5,43,6,1,5,5,7,10,1,43,6,1,5,5,7,10,2,43,6,1,5,5,7,10,3,43,6,1,5,5,7,10,4,43,6,1,5,5,7,10,5,43,6,1,5,5,7,11,1,43,6,1,5,5,7,12,1,43,6,1,5,5,7,12,2,43,6,1,5,5,7,12,3,43,6,1,5,5,7,48,3,43,6,1,5,5,7,48,4,43,6,1,5,5,7,48,1,1,43,6,1,5,5,7,48,1,2,43,6,1,5,5,7,48,1,3,43,6,1,5,5,7,48,1,4,43,6,1,5,5,7,48,1,5,43,6,1,5,5,7,48,1,6,43,6,1,5,5,7,48,1,7,43,6,1,5,5,7,48,1,8,43,6,1,5,5,7,48,1,9,43,6,1,5,5,7,48,1,10,43,6,1,5,5,7,48,1,11,43,14,3,2,43,14,3,2,11,85,8,43,43,6,43,6,1,43,6,1,1,43,6,1,2,43,6,1,3,43,6,1,4,43,6,1,5,43,6,1,6,43,6,1,7,43,6,1,4,1,43,6,1,4,1,139,58,130,88,9,146,38,137,147,242,44,100,1,25,9,146,38,137,147,242,44,100,4,13,85,1,5,85,1,5,55,42,134,72,134,247,13,1,1,3,43,6,1,5,5,7,1,10,43,6,1,5,5,7,1,11,43,6,1,5,5,7,10,6,85,4,72,85,29,36,85,29,55,85,29,56,42,134,72,206,61,42,134,72,206,61,1,1,42,134,72,206,61,1,2,42,134,72,206,61,2,1,42,134,72,206,61,3,1,1,42,134,72,206,61,3,1,2,42,134,72,206,61,3,1,3,42,134,72,206,61,3,1,4,42,134,72,206,61,3,1,5,42,134,72,206,61,3,1,6,42,134,72,206,61,3,1,7,42,134,72,206,61,4,1,43,6,1,4,1,130,55,17,1,96,134,72,1,101,3,4,1,1,96,134,72,1,101,3,4,1,2,96,134,72,1,101,3,4,1,3,96,134,72,1,101,3,4,1,4,96,134,72,1,101,3,4,1,21,96,134,72,1,101,3,4,1,22,96,134,72,1,101,3,4,1,23,96,134,72,1,101,3,4,1,24,96,134,72,1,101,3,4,1,41,96,134,72,1,101,3,4,1,42,96,134,72,1,101,3,4,1,43,96,134,72,1,101,3,4,1,44,85,29,23,42,134,72,206,56,2,1,42,134,72,206,56,2,2,42,134,72,206,56,2,3,9,9,146,38,9,146,38,137,147,242,44,9,146,38,137,147,242,44,100,9,146,38,137,147,242,44,100,1,9,146,38,137,147,242,44,100,3,9,146,38,137,147,242,44,100,4,9,146,38,137,147,242,44,100,10,9,146,38,137,147,242,44,100,3,4,9,146,38,137,147,242,44,100,3,5,9,146,38,137,147,242,44,100,4,3,9,146,38,137,147,242,44,100,4,4,9,146,38,137,147,242,44,100,4,5,9,146,38,137,147,242,44,100,4,6,9,146,38,137,147,242,44,100,4,7,9,146,38,137,147,242,44,100,4,9,9,146,38,137,147,242,44,100,4,14,9,146,38,137,147,242,44,100,4,15,9,146,38,137,147,242,44,100,4,17,9,146,38,137,147,242,44,100,4,18,9,146,38,137,147,242,44,100,4,19,9,146,38,137,147,242,44,100,4,20,9,146,38,137,147,242,44,100,4,21,9,146,38,137,147,242,44,100,4,22,9,146,38,137,147,242,44,100,1,1,9,146,38,137,147,242,44,100,1,2,9,146,38,137,147,242,44,100,1,3,9,146,38,137,147,242,44,100,1,4,9,146,38,137,147,242,44,100,1,5,9,146,38,137,147,242,44,100,1,6,9,146,38,137,147,242,44,100,1,7,9,146,38,137,147,242,44,100,1,8,9,146,38,137,147,242,44,100,1,9,9,146,38,137,147,242,44,100,1,10,9,146,38,137,147,242,44,100,1,11,9,146,38,137,147,242,44,100,1,12,9,146,38,137,147,242,44,100,1,13,9,146,38,137,147,242,44,100,1,14,9,146,38,137,147,242,44,100,1,15,9,146,38,137,147,242,44,100,1,20,9,146,38,137,147,242,44,100,1,21,9,146,38,137,147,242,44,100,1,22,9,146,38,137,147,242,44,100,1,23,9,146,38,137,147,242,44,100,1,24,9,146,38,137,147,242,44,100,1,26,9,146,38,137,147,242,44,100,1,27,9,146,38,137,147,242,44,100,1,28,9,146,38,137,147,242,44,100,1,29,9,146,38,137,147,242,44,100,1,30,9,146,38,137,147,242,44,100,1,31,9,146,38,137,147,242,44,100,1,37,9,146,38,137,147,242,44,100,1,38,9,146,38,137,147,242,44,100,1,39,9,146,38,137,147,242,44,100,1,40,9,146,38,137,147,242,44,100,1,41,9,146,38,137,147,242,44,100,1,42,9,146,38,137,147,242,44,100,1,43,9,146,38,137,147,242,44,100,1,45,9,146,38,137,147,242,44,100,1,46,9,146,38,137,147,242,44,100,1,47,9,146,38,137,147,242,44,100,1,48,9,146,38,137,147,242,44,100,1,49,9,146,38,137,147,242,44,100,1,50,9,146,38,137,147,242,44,100,1,51,9,146,38,137,147,242,44,100,1,52,9,146,38,137,147,242,44,100,1,53,9,146,38,137,147,242,44,100,1,54,9,146,38,137,147,242,44,100,1,55,9,146,38,137,147,242,44,100,1,56,85,4,45,43,6,1,7,1,43,6,1,7,1,1,43,6,1,7,1,2,43,6,1,7,1,1,1,43,6,1,7,1,1,2,85,4,44,85,4,65,103,42,103,42,0,103,42,1,103,42,3,103,42,5,103,42,7,103,42,8,103,42,0,0,103,42,0,1,103,42,0,2,103,42,0,3,103,42,0,4,103,42,0,5,103,42,0,6,103,42,0,7,103,42,0,8,103,42,0,9,103,42,0,10,103,42,0,11,103,42,0,12,103,42,0,13,103,42,0,14,103,42,0,16,103,42,0,17,103,42,0,18,103,42,0,19,103,42,0,20,103,42,0,21,103,42,0,22,103,42,0,23,103,42,0,24,103,42,0,25,103,42,0,26,103,42,0,27,103,42,0,28,103,42,0,29,103,42,0,30,103,42,0,31,103,42,0,32,103,42,0,33,103,42,0,34,103,42,0,35,103,42,0,36,103,42,0,37,103,42,0,38,103,42,0,39,103,42,0,40,103,42,0,41,103,42,0,42,103,42,0,43,103,42,0,44,103,42,0,45,103,42,0,46,103,42,0,47,103,42,0,48,103,42,0,49,103,42,0,50,103,42,0,51,103,42,0,52,103,42,0,53,103,42,0,54,103,42,0,55,103,42,0,56,103,42,0,57,103,42,0,58,103,42,0,59,103,42,0,60,103,42,0,61,103,42,0,62,103,42,0,63,103,42,0,64,103,42,0,65,103,42,0,66,103,42,0,67,103,42,0,68,103,42,0,69,103,42,0,70,103,42,0,71,103,42,0,72,103,42,0,73,103,42,0,74,103,42,0,75,103,42,0,76,103,42,0,77,103,42,0,78,103,42,0,79,103,42,0,80,103,42,0,81,103,42,0,82,103,42,1,1,103,42,1,3,103,42,1,4,103,42,1,5,103,42,1,7,103,42,1,8,103,42,5,0,103,42,7,0,103,42,7,1,103,42,7,2,103,42,7,3,103,42,7,4,103,42,7,5,103,42,7,6,103,42,7,7,103,42,7,8,103,42,7,9,103,42,7,10,103,42,7,11,103,42,3,0,103,42,3,1,103,42,3,2,103,42,3,3,103,42,3,0,0,103,42,3,0,1,103,42,3,2,1,103,42,3,2,2,103,42,3,3,3,103,42,3,3,4,103,42,3,3,5,103,42,3,3,3,1,103,42,3,3,4,1,103,42,3,3,4,2,103,42,3,3,5,1,103,42,3,3,5,2,103,42,8,1,103,42,8,30,103,42,8,34,103,42,8,35,103,42,8,4,103,42,8,5,103,42,8,174,123,42,134,72,134,247,13,3,10,42,134,72,134,247,13,1,1,6,103,43,6,1,4,1,130,55,20,2,2,43,6,1,4,1,130,55,20,2,3,85,4,9,85,4,17,43,6,1,5,5,7,21,43,6,1,5,5,7,1,14,43,6,1,5,5,7,21,0,43,6,1,5,5,7,21,1,85,29,30,43,6,1,5,5,7,21,2,42,134,72,134,247,13,1,1,11,42,134,72,134,247,13,1,1,12,42,134,72,134,247,13,1,1,13,42,134,72,134,247,13,1,1,14,96,134,72,1,101,3,4,2,1,96,134,72,1,101,3,4,2,2,96,134,72,1,101,3,4,2,3,96,134,72,1,101,3,4,2,4,43,43,129,4,103,43,103,43,1,42,134,72,206,61,1,2,3,42,134,72,206,61,1,2,3,1,42,134,72,206,61,1,2,3,2,42,134,72,206,61,1,2,3,3,42,134,72,206,61,3,0,1,42,134,72,206,61,3,0,2,42,134,72,206,61,3,0,3,42,134,72,206,61,3,0,4,42,134,72,206,61,3,0,5,42,134,72,206,61,3,0,6,42,134,72,206,61,3,0,7,42,134,72,206,61,3,0,8,42,134,72,206,61,3,0,9,42,134,72,206,61,3,0,10,42,134,72,206,61,3,0,11,42,134,72,206,61,3,0,12,42,134,72,206,61,3,0,13,42,134,72,206,61,3,0,14,42,134,72,206,61,3,0,15,42,134,72,206,61,3,0,16,42,134,72,206,61,3,0,17,42,134,72,206,61,3,0,18,42,134,72,206,61,3,0,19,42,134,72,206,61,3,0,20,43,129,4,0,6,43,129,4,0,7,43,129,4,0,28,43,129,4,0,29,43,129,4,0,9,43,129,4,0,8,43,129,4,0,30,43,129,4,0,31,43,129,4,0,32,43,129,4,0,33,43,129,4,0,10,43,129,4,0,34,43,129,4,0,35,43,129,4,0,4,43,129,4,0,5,43,129,4,0,22,43,129,4,0,23,43,129,4,0,1,43,129,4,0,2,43,129,4,0,15,43,129,4,0,24,43,129,4,0,25,43,129,4,0,26,43,129,4,0,27,43,129,4,0,3,43,129,4,0,16,43,129,4,0,17,43,129,4,0,36,43,129,4,0,37,43,129,4,0,38,43,129,4,0,39,103,43,1,4,1,103,43,1,4,3,103,43,1,4,4,103,43,1,4,5,103,43,1,4,6,103,43,1,4,7,103,43,1,4,8,103,43,1,4,9,103,43,1,4,10,103,43,1,4,11,103,43,1,4,12,85,29,32,0,85,29,33,85,29,54,42,131,8,140,154,75,61,1,1,1,2,42,131,8,140,154,75,61,1,1,1,3,42,131,8,140,154,75,61,1,1,1,4,3,162,49,5,3,1,9,1,3,162,49,5,3,1,9,21,3,162,49,5,3,1,9,41,3,162,49,5,3,1,9,4,3,162,49,5,3,1,9,24,3,162,49,5,3,1,9,44,3,162,49,5,3,1,9,3,3,162,49,5,3,1,9,23,3,162,49,5,3,1,9,43,85,29,9,85,29,28,85,29,29,42,131,26,140,154,68,42,131,26,140,154,68,1,3,42,131,26,140,154,68,1,4,42,131,26,140,154,68,1,6,42,131,26,140,154,68,1,5,43,6,1,5,5,8,1,1,43,6,1,5,5,8,1,2,42,134,72,134,246,125,7,66,13,42,134,72,134,246,125,7,66,30,43,6,1,5,5,7,4,16,43,6,1,5,5,7,48,5,42,134,72,134,247,13,1,9,16,1,9,42,134,72,134,247,13,1,9,16,1,27,96,134,72,1,101,3,4,1,5,96,134,72,1,101,3,4,1,25,96,134,72,1,101,3,4,1,45,42,134,72,206,61,4,2,42,134,72,206,61,4,3,42,134,72,206,61,4,3,1,42,134,72,206,61,4,3,2,42,134,72,206,61,4,3,3,42,134,72,206,61,4,3,4,42,134,72,134,247,13,2,6,42,134,72,134,247,13,2,8,42,134,72,134,247,13,2,9,42,134,72,134,247,13,2,10,42,134,72,134,247,13,2,11,96,134,72,1,101,3,4,3,1,96,134,72,1,101,3,4,3,2,40,207,6,3,0,55,42,133,3,2,2,42,133,3,2,9,42,133,3,2,2,3,42,133,3,2,2,4,42,133,3,2,2,9,42,133,3,2,2,10,42,133,3,2,2,19,42,133,3,2,2,20,42,133,3,2,2,21,42,133,3,2,2,22,42,133,3,2,2,23,42,133,3,2,2,98,42,133,3,2,2,99,42,133,3,2,2,14,1,42,133,3,2,2,14,0,42,133,3,2,2,30,0,42,133,3,2,2,30,1,42,133,3,2,2,31,0,42,133,3,2,2,31,1,42,133,3,2,2,31,2,42,133,3,2,2,31,3,42,133,3,2,2,31,4,42,133,3,2,2,31,5,42,133,3,2,2,31,6,42,133,3,2,2,31,7,42,133,3,2,2,32,0,42,133,3,2,2,32,2,42,133,3,2,2,32,3,42,133,3,2,2,32,4,42,133,3,2,2,32,5,42,133,3,2,2,33,1,42,133,3,2,2,33,2,42,133,3,2,2,33,3,42,133,3,2,2,35,0,42,133,3,2,2,35,1,42,133,3,2,2,35,2,42,133,3,2,2,35,3,42,133,3,2,2,36,0,42,133,3,2,2,36,1,42,133,3,2,2,20,1,42,133,3,2,2,20,2,42,133,3,2,2,20,3,42,133,3,2,2,20,4,42,133,3,2,9,1,6,1,42,133,3,2,9,1,5,3,42,133,3,2,9,1,5,4,42,133,3,2,9,1,3,3,42,133,3,2,9,1,3,4,42,133,3,2,9,1,8,1,43,6,1,4,1,130,55,17,2,85,29,46,43,6,1,5,5,7,8,3,85,4,14,85,4,15,85,4,16,85,4,18,85,4,19,85,4,20,85,4,21,85,4,22,85,4,23,85,4,24,85,4,25,85,4,26,85,4,27,85,4,28,85,4,29,85,4,30,85,4,31,85,4,32,85,4,33,85,4,34,85,4,35,85,4,36,85,4,37,85,4,38,85,4,39,85,4,40,85,4,47,85,4,48,85,4,49,85,4,50,85,4,51,85,4,52,85,4,53,85,4,54,42,134,72,134,247,13,1,9,16,3,9,96,134,72,1,101,3,4,1,6,96,134,72,1,101,3,4,1,7,96,134,72,1,101,3,4,1,8,96,134,72,1,101,3,4,1,26,96,134,72,1,101,3,4,1,27,96,134,72,1,101,3,4,1,28,96,134,72,1,101,3,4,1,46,96,134,72,1,101,3,4,1,47,96,134,72,1,101,3,4,1,48,42,131,8,140,154,75,61,1,1,3,2,42,131,8,140,154,75,61,1,1,3,3,42,131,8,140,154,75,61,1,1,3,4,85,29,37,0,42,134,72,134,247,13,1,1,8,42,134,72,134,247,13,1,1,10,42,134,72,134,247,13,1,1,7,42,134,72,206,62,2,1,43,36,3,3,2,8,1,1,1,43,36,3,3,2,8,1,1,2,43,36,3,3,2,8,1,1,3,43,36,3,3,2,8,1,1,4,43,36,3,3,2,8,1,1,5,43,36,3,3,2,8,1,1,6,43,36,3,3,2,8,1,1,7,43,36,3,3,2,8,1,1,8,43,36,3,3,2,8,1,1,9,43,36,3,3,2,8,1,1,10,43,36,3,3,2,8,1,1,11,43,36,3,3,2,8,1,1,12,43,36,3,3,2,8,1,1,13,43,36,3,3,2,8,1,1,14,42,134,72,134,247,13,1,1,9,43,129,5,16,134,72,63,0,2,43,129,4,1,11,0,43,129,4,1,11,1,43,129,4,1,11,2,43,129,4,1,11,3,43,129,5,16,134,72,63,0,3,43,129,4,1,14,0,43,129,4,1,14,1,43,129,4,1,14,2,43,129,4,1,14,3,43,6,1,4,1,214,121,2,4,2,43,6,1,4,1,214,121,2,4,3,43,6,1,4,1,214,121,2,4,4,43,6,1,4,1,214,121,2,4,5,43,6,1,4,1,130,55,60,2,1,1,43,6,1,4,1,130,55,60,2,1,2,43,6,1,4,1,130,55,60,2,1,3,3,162,49,5,3,1,9,6,3,162,49,5,3,1,9,7,3,162,49,5,3,1,9,9,3,162,49,5,3,1,9,10,3,162,49,5,3,1,9,26,3,162,49,5,3,1,9,27,3,162,49,5,3,1,9,29,3,162,49,5,3,1,9,30,3,162,49,5,3,1,9,46,3,162,49,5,3,1,9,47,3,162,49,5,3,1,9,49,3,162,49,5,3,1,9,50,43,6,1,4,1,218,71,4,11,42,133,3,7,1,42,133,3,7,1,1,42,133,3,7,1,1,1,42,133,3,7,1,1,1,1,42,133,3,7,1,1,1,2,42,133,3,7,1,1,2,42,133,3,7,1,1,2,2,42,133,3,7,1,1,2,3,42,133,3,7,1,1,3,42,133,3,7,1,1,3,2,42,133,3,7,1,1,3,3,42,133,3,7,1,1,4,42,133,3,7,1,1,4,1,42,133,3,7,1,1,4,2,42,133,3,7,1,1,5,42,133,3,7,1,1,6,42,133,3,7,1,1,6,1,42,133,3,7,1,1,6,2,42,133,3,7,1,2,42,133,3,7,1,2,1,42,133,3,7,1,2,1,2,42,133,3,7,1,2,1,2,0,42,133,3,7,1,2,1,2,1,42,133,3,7,1,2,1,2,2,42,133,3,7,1,2,2,42,133,3,7,1,2,5,42,133,3,7,1,2,5,1,42,133,3,7,1,2,5,1,1,42,133,3,3,129,3,1,1,42,133,3,100,1,42,133,3,100,3,42,133,3,100,111,42,133,3,100,112,43,6,1,5,5,7,1,24,43,6,1,5,5,7,3,17,43,6,1,5,5,7,3,18,43,6,1,5,5,7,3,19,43,6,1,5,5,7,3,21,43,6,1,5,5,7,3,22,43,6,1,5,5,7,3,23,43,6,1,5,5,7,3,24,43,6,1,5,5,7,3,25,43,6,1,5,5,7,3,26,43,6,1,5,2,3,43,6,1,5,2,3,4,43,6,1,5,2,3,5,43,101,110,43,101,111,43,6,1,4,1,141,58,12,2,1,16,43,6,1,4,1,141,58,12,2,2,8,42,134,72,134,247,13,1,9,16,1,19,42,134,72,134,247,13,1,9,16,1,23,42,134,72,134,247,13,1,9,16,1,28,0,112,107,99,115,0,82,83,65,32,68,97,116,97,32,83,101,99,117,114,105,116,121,44,32,73,110,99,46,32,80,75,67,83,0,77,68,50,0,109,100,50,0,77,68,53,0,109,100,53,0,82,67,52,0,114,99,52,0,114,115,97,69,110,99,114,121,112,116,105,111,110,0,82,83,65,45,77,68,50,0,109,100,50,87,105,116,104,82,83,65,69,110,99,114,121,112,116,105,111,110,0,82,83,65,45,77,68,53,0,109,100,53,87,105,116,104,82,83,65,69,110,99,114,121,112,116,105,111,110,0,80,66,69,45,77,68,50,45,68,69,83,0,112,98,101,87,105,116,104,77,68,50,65,110,100,68,69,83,45,67,66,67,0,80,66,69,45,77,68,53,45,68,69,83,0,112,98,101,87,105,116,104,77,68,53,65,110,100,68,69,83,45,67,66,67,0,88,53,48,48,0,100,105,114,101,99,116,111,114,121,32,115,101,114,118,105,99,101,115,32,40,88,46,53,48,48,41,0,88,53,48,57,0,67,78,0,99,111,109,109,111,110,78,97,109,101,0,67,0,99,111,117,110,116,114,121,78,97,109,101,0,76,0,108,111,99,97,108,105,116,121,78,97,109,101,0,83,84,0,115,116,97,116,101,79,114,80,114,111,118,105,110,99,101,78,97,109,101,0,79,0,111,114,103,97,110,105,122,97,116,105,111,110,78,97,109,101,0,79,85,0,111,114,103,97,110,105,122,97,116,105,111,110,97,108,85,110,105,116,78,97,109,101,0,114,115,97,0,112,107,99,115,55,0,112,107,99,115,55,45,100,97,116,97,0,112,107,99,115,55,45,115,105,103,110,101,100,68,97,116,97,0,112,107,99,115,55,45,101,110,118,101,108,111,112,101,100,68,97,116,97,0,112,107,99,115,55,45,115,105,103,110,101,100,65,110,100,69,110,118,101,108,111,112,101,100,68,97,116,97,0,112,107,99,115,55,45,100,105,103,101,115,116,68,97,116,97,0,112,107,99,115,55,45,101,110,99,114,121,112,116,101,100,68,97,116,97,0,112,107,99,115,51,0,100,104,75,101,121,65,103,114,101,101,109,101,110,116,0,68,69,83,45,69,67,66,0,100,101,115,45,101,99,98,0,68,69,83,45,67,70,66,0,100,101,115,45,99,102,98,0,68,69,83,45,67,66,67,0,100,101,115,45,99,98,99,0,68,69,83,45,69,68,69,0,100,101,115,45,101,100,101,0,68,69,83,45,69,68,69,51,0,100,101,115,45,101,100,101,51,0,73,68,69,65,45,67,66,67,0,105,100,101,97,45,99,98,99,0,73,68,69,65,45,67,70,66,0,105,100,101,97,45,99,102,98,0,73,68,69,65,45,69,67,66,0,105,100,101,97,45,101,99,98,0,82,67,50,45,67,66,67,0,114,99,50,45,99,98,99,0,82,67,50,45,69,67,66,0,114,99,50,45,101,99,98,0,82,67,50,45,67,70,66,0,114,99,50,45,99,102,98,0,82,67,50,45,79,70,66,0,114,99,50,45,111,102,98,0,83,72,65,0,115,104,97,0,82,83,65,45,83,72,65,0,115,104,97,87,105,116,104,82,83,65,69,110,99,114,121,112,116,105,111,110,0,68,69,83,45,69,68,69,45,67,66,67,0,100,101,115,45,101,100,101,45,99,98,99,0,68,69,83,45,69,68,69,51,45,67,66,67,0,100,101,115,45,101,100,101,51,45,99,98,99,0,68,69,83,45,79,70,66,0,100,101,115,45,111,102,98,0,73,68,69,65,45,79,70,66,0,105,100,101,97,45,111,102,98,0,112,107,99,115,57,0,101,109,97,105,108,65,100,100,114,101,115,115,0,117,110,115,116,114,117,99,116,117,114,101,100,78,97,109,101,0,99,111,110,116,101,110,116,84,121,112,101,0,109,101,115,115,97,103,101,68,105,103,101,115,116,0,115,105,103,110,105,110,103,84,105,109,101,0,99,111,117,110,116,101,114,115,105,103,110,97,116,117,114,101,0,99,104,97,108,108,101,110,103,101,80,97,115,115,119,111,114,100,0,117,110,115,116,114,117,99,116,117,114,101,100,65,100,100,114,101,115,115,0,101,120,116,101,110,100,101,100,67,101,114,116,105,102,105,99,97,116,101,65,116,116,114,105,98,117,116,101,115,0,78,101,116,115,99,97,112,101,0,78,101,116,115,99,97,112,101,32,67,111,109,109,117,110,105,99,97,116,105,111,110,115,32,67,111,114,112,46,0,110,115,67,101,114,116,69,120,116,0,78,101,116,115,99,97,112,101,32,67,101,114,116,105,102,105,99,97,116,101,32,69,120,116,101,110,115,105,111,110,0,110,115,68,97,116,97,84,121,112,101,0,78,101,116,115,99,97,112,101,32,68,97,116,97,32,84,121,112,101,0,68,69,83,45,69,68,69,45,67,70,66,0,100,101,115,45,101,100,101,45,99,102,98,0,68,69,83,45,69,68,69,51,45,67,70,66,0,100,101,115,45,101,100,101,51,45,99,102,98,0,68,69,83,45,69,68,69,45,79,70,66,0,100,101,115,45,101,100,101,45,111,102,98,0,68,69,83,45,69,68,69,51,45,79,70,66,0,100,101,115,45,101,100,101,51,45,111,102,98,0,83,72,65,49,0,115,104,97,49,0,82,83,65,45,83,72,65,49,0,115,104,97,49,87,105,116,104,82,83,65,69,110,99,114,121,112,116,105,111,110,0,68,83,65,45,83,72,65,0,100,115,97,87,105,116,104,83,72,65,0,68,83,65,45,111,108,100,0,100,115,97,69,110,99,114,121,112,116,105,111,110,45,111,108,100,0,80,66,69,45,83,72,65,49,45,82,67,50,45,54,52,0,112,98,101,87,105,116,104,83,72,65,49,65,110,100,82,67,50,45,67,66,67,0,80,66,75,68,70,50,0,68,83,65,45,83,72,65,49,45,111,108,100,0,100,115,97,87,105,116,104,83,72,65,49,45,111,108,100,0,110,115,67,101,114,116,84,121,112,101,0,78,101,116,115,99,97,112,101,32,67,101,114,116,32,84,121,112,101,0,110,115,66,97,115,101,85,114,108,0,78,101,116,115,99,97,112,101,32,66,97,115,101,32,85,114,108,0,110,115,82,101,118,111,99,97,116,105,111,110,85,114,108,0,78,101,116,115,99,97,112,101,32,82,101,118,111,99,97,116,105,111,110,32,85,114,108,0,110,115,67,97,82,101,118,111,99,97,116,105,111,110,85,114,108,0,78,101,116,115,99,97,112,101,32,67,65,32,82,101,118,111,99,97,116,105,111,110,32,85,114,108,0,110,115,82,101,110,101,119,97,108,85,114,108,0,78,101,116,115,99,97,112,101,32,82,101,110,101,119,97,108,32,85,114,108,0,110,115,67,97,80,111,108,105,99,121,85,114,108,0,78,101,116,115,99,97,112,101,32,67,65,32,80,111,108,105,99,121,32,85,114,108,0,110,115,83,115,108,83,101,114,118,101,114,78,97,109,101,0,78,101,116,115,99,97,112,101,32,83,83,76,32,83,101,114,118,101,114,32,78,97,109,101,0,110,115,67,111,109,109,101,110,116,0,78,101,116,115,99,97,112,101,32,67,111,109,109,101,110,116,0,110,115,67,101,114,116,83,101,113,117,101,110,99,101,0,78,101,116,115,99,97,112,101,32,67,101,114,116,105,102,105,99,97,116,101,32,83,101,113,117,101,110,99,101,0,68,69,83,88,45,67,66,67,0,100,101,115,120,45,99,98,99,0,105,100,45,99,101,0,115,117,98,106,101,99,116,75,101,121,73,100,101,110,116,105,102,105,101,114,0,88,53,48,57,118,51,32,83,117,98,106,101,99,116,32,75,101,121,32,73,100,101,110,116,105,102,105,101,114,0,107,101,121,85,115,97,103,101,0,88,53,48,57,118,51,32,75,101,121,32,85,115,97,103,101,0,112,114,105,118,97,116,101,75,101,121,85,115,97,103,101,80,101,114,105,111,100,0,88,53,48,57,118,51,32,80,114,105,118,97,116,101,32,75,101,121,32,85,115,97,103,101,32,80,101,114,105,111,100,0,115,117,98,106,101,99,116,65,108,116,78,97,109,101,0,88,53,48,57,118,51,32,83,117,98,106,101,99,116,32,65,108,116,101,114,110,97,116,105,118,101,32,78,97,109,101,0,105,115,115,117,101,114,65,108,116,78,97,109,101,0,88,53,48,57,118,51,32,73,115,115,117,101,114,32,65,108,116,101,114,110,97,116,105,118,101,32,78,97,109,101,0,98,97,115,105,99,67,111,110,115,116,114,97,105,110,116,115,0,88,53,48,57,118,51,32,66,97,115,105,99,32,67,111,110,115,116,114,97,105,110,116,115,0,99,114,108,78,117,109,98,101,114,0,88,53,48,57,118,51,32,67,82,76,32,78,117,109,98,101,114,0,99,101,114,116,105,102,105,99,97,116,101,80,111,108,105,99,105,101,115,0,88,53,48,57,118,51,32,67,101,114,116,105,102,105,99,97,116,101,32,80,111,108,105,99,105,101,115,0,97,117,116,104,111,114,105,116,121,75,101,121,73,100,101,110,116,105,102,105,101,114,0,88,53,48,57,118,51,32,65,117,116,104,111,114,105,116,121,32,75,101,121,32,73,100,101,110,116,105,102,105,101,114,0,66,70,45,67,66,67,0,98,102,45,99,98,99,0,66,70,45,69,67,66,0,98,102,45,101,99,98,0,66,70,45,67,70,66,0,98,102,45,99,102,98,0,66,70,45,79,70,66,0,98,102,45,111,102,98,0,77,68,67,50,0,109,100,99,50,0,82,83,65,45,77,68,67,50,0,109,100,99,50,87,105,116,104,82,83,65,0,82,67,52,45,52,48,0,114,99,52,45,52,48,0,82,67,50,45,52,48,45,67,66,67,0,114,99,50,45,52,48,45,99,98,99,0,71,78,0,103,105,118,101,110,78,97,109,101,0,83,78,0,115,117,114,110,97,109,101,0,105,110,105,116,105,97,108,115,0,117,105,100,0,117,110,105,113,117,101,73,100,101,110,116,105,102,105,101,114,0,99,114,108,68,105,115,116,114,105,98,117,116,105,111,110,80,111,105,110,116,115,0,88,53,48,57,118,51,32,67,82,76,32,68,105,115,116,114,105,98,117,116,105,111,110,32,80,111,105,110,116,115,0,82,83,65,45,78,80,45,77,68,53,0,109,100,53,87,105,116,104,82,83,65,0,115,101,114,105,97,108,78,117,109,98,101,114,0,116,105,116,108,101,0,100,101,115,99,114,105,112,116,105,111,110,0,67,65,83,84,53,45,67,66,67,0,99,97,115,116,53,45,99,98,99,0,67,65,83,84,53,45,69,67,66,0,99,97,115,116,53,45,101,99,98,0,67,65,83,84,53,45,67,70,66,0,99,97,115,116,53,45,99,102,98,0,67,65,83,84,53,45,79,70,66,0,99,97,115,116,53,45,111,102,98,0,112,98,101,87,105,116,104,77,68,53,65,110,100,67,97,115,116,53,67,66,67,0,68,83,65,45,83,72,65,49,0,100,115,97,87,105,116,104,83,72,65,49,0,77,68,53,45,83,72,65,49,0,109,100,53,45,115,104,97,49,0,82,83,65,45,83,72,65,49,45,50,0,115,104,97,49,87,105,116,104,82,83,65,0,68,83,65,0,100,115,97,69,110,99,114,121,112,116,105,111,110,0,82,73,80,69,77,68,49,54,48,0,114,105,112,101,109,100,49,54,48,0,82,83,65,45,82,73,80,69,77,68,49,54,48,0,114,105,112,101,109,100,49,54,48,87,105,116,104,82,83,65,0,82,67,53,45,67,66,67,0,114,99,53,45,99,98,99,0,82,67,53,45,69,67,66,0,114,99,53,45,101,99,98,0,82,67,53,45,67,70,66,0,114,99,53,45,99,102,98,0,82,67,53,45,79,70,66,0,114,99,53,45,111,102,98,0,90,76,73,66,0,122,108,105,98,32,99,111,109,112,114,101,115,115,105,111,110,0,101,120,116,101,110,100,101,100,75,101,121,85,115,97,103,101,0,88,53,48,57,118,51,32,69,120,116,101,110,100,101,100,32,75,101,121,32,85,115,97,103,101,0,80,75,73,88,0,105,100,45,107,112,0,115,101,114,118,101,114,65,117,116,104,0,84,76,83,32,87,101,98,32,83,101,114,118,101,114,32,65,117,116,104,101,110,116,105,99,97,116,105,111,110,0,99,108,105,101,110,116,65,117,116,104,0,84,76,83,32,87,101,98,32,67,108,105,101,110,116,32,65,117,116,104,101,110,116,105,99,97,116,105,111,110,0,99,111,100,101,83,105,103,110,105,110,103,0,67,111,100,101,32,83,105,103,110,105,110,103,0,101,109,97,105,108,80,114,111,116,101,99,116,105,111,110,0,69,45,109,97,105,108,32,80,114,111,116,101,99,116,105,111,110,0,116,105,109,101,83,116,97,109,112,105,110,103,0,84,105,109,101,32,83,116,97,109,112,105,110,103,0,109,115,67,111,100,101,73,110,100,0,77,105,99,114,111,115,111,102,116,32,73,110,100,105,118,105,100,117,97,108,32,67,111,100,101,32,83,105,103,110,105,110,103,0,109,115,67,111,100,101,67,111,109,0,77,105,99,114,111,115,111,102,116,32,67,111,109,109,101,114,99,105,97,108,32,67,111,100,101,32,83,105,103,110,105,110,103,0,109,115,67,84,76,83,105,103,110,0,77,105,99,114,111,115,111,102,116,32,84,114,117,115,116,32,76,105,115,116,32,83,105,103,110,105,110,103,0,109,115,83,71,67,0,77,105,99,114,111,115,111,102,116,32,83,101,114,118,101,114,32,71,97,116,101,100,32,67,114,121,112,116,111,0,109,115,69,70,83,0,77,105,99,114,111,115,111,102,116,32,69,110,99,114,121,112,116,101,100,32,70,105,108,101,32,83,121,115,116,101,109,0,110,115,83,71,67,0,78,101,116,115,99,97,112,101,32,83,101,114,118,101,114,32,71,97,116,101,100,32,67,114,121,112,116,111,0,100,101,108,116,97,67,82,76,0,88,53,48,57,118,51,32,68,101,108,116,97,32,67,82,76,32,73,110,100,105,99,97,116,111,114,0,67,82,76,82,101,97,115,111,110,0,88,53,48,57,118,51,32,67,82,76,32,82,101,97,115,111,110,32,67,111,100,101,0,105,110,118,97,108,105,100,105,116,121,68,97,116,101,0,73,110,118,97,108,105,100,105,116,121,32,68,97,116,101,0,83,88,78,101,116,73,68,0,83,116,114,111,110,103,32,69,120,116,114,97,110,101,116,32,73,68,0,80,66,69,45,83,72,65,49,45,82,67,52,45,49,50,56,0,112,98,101,87,105,116,104,83,72,65,49,65,110,100,49,50,56,66,105,116,82,67,52,0,80,66,69,45,83,72,65,49,45,82,67,52,45,52,48,0,112,98,101,87,105,116,104,83,72,65,49,65,110,100,52,48,66,105,116,82,67,52,0,80,66,69,45,83,72,65,49,45,51,68,69,83,0,112,98,101,87,105,116,104,83,72,65,49,65,110,100,51,45,75,101,121,84,114,105,112,108,101,68,69,83,45,67,66,67,0,80,66,69,45,83,72,65,49,45,50,68,69,83,0,112,98,101,87,105,116,104,83,72,65,49,65,110,100,50,45,75,101,121,84,114,105,112,108,101,68,69,83,45,67,66,67,0,80,66,69,45,83,72,65,49,45,82,67,50,45,49,50,56,0,112,98,101,87,105,116,104,83,72,65,49,65,110,100,49,50,56,66,105,116,82,67,50,45,67,66,67,0,80,66,69,45,83,72,65,49,45,82,67,50,45,52,48,0,112,98,101,87,105,116,104,83,72,65,49,65,110,100,52,48,66,105,116,82,67,50,45,67,66,67,0,107,101,121,66,97,103,0,112,107,99,115,56,83,104,114,111,117,100,101,100,75,101,121,66,97,103,0,99,101,114,116,66,97,103,0,99,114,108,66,97,103,0,115,101,99,114,101,116,66,97,103,0,115,97,102,101,67,111,110,116,101,110,116,115,66,97,103,0,102,114,105,101,110,100,108,121,78,97,109,101,0,108,111,99,97,108,75,101,121,73,68,0,120,53,48,57,67,101,114,116,105,102,105,99,97,116,101,0,115,100,115,105,67,101,114,116,105,102,105,99,97,116,101,0,120,53,48,57,67,114,108,0,80,66,69,83,50,0,80,66,77,65,67,49,0,104,109,97,99,87,105,116,104,83,72,65,49,0,105,100,45,113,116,45,99,112,115,0,80,111,108,105,99,121,32,81,117,97,108,105,102,105,101,114,32,67,80,83,0,105,100,45,113,116,45,117,110,111,116,105,99,101,0,80,111,108,105,99,121,32,81,117,97,108,105,102,105,101,114,32,85,115,101,114,32,78,111,116,105,99,101,0,82,67,50,45,54,52,45,67,66,67,0,114,99,50,45,54,52,45,99,98,99,0,83,77,73,77,69,45,67,65,80,83,0,83,47,77,73,77,69,32,67,97,112,97,98,105,108,105,116,105,101,115,0,80,66,69,45,77,68,50,45,82,67,50,45,54,52,0,112,98,101,87,105,116,104,77,68,50,65,110,100,82,67,50,45,67,66,67,0,80,66,69,45,77,68,53,45,82,67,50,45,54,52,0,112,98,101,87,105,116,104,77,68,53,65,110,100,82,67,50,45,67,66,67,0,80,66,69,45,83,72,65,49,45,68,69,83,0,112,98,101,87,105,116,104,83,72,65,49,65,110,100,68,69,83,45,67,66,67,0,109,115,69,120,116,82,101,113,0,77,105,99,114,111,115,111,102,116,32,69,120,116,101,110,115,105,111,110,32,82,101,113,117,101,115,116,0,101,120,116,82,101,113,0,69,120,116,101,110,115,105,111,110,32,82,101,113,117,101,115,116,0,110,97,109,101,0,100,110,81,117,97,108,105,102,105,101,114,0,105,100,45,112,101,0,105,100,45,97,100,0,97,117,116,104,111,114,105,116,121,73,110,102,111,65,99,99,101,115,115,0,65,117,116,104,111,114,105,116,121,32,73,110,102,111,114,109,97,116,105,111,110,32,65,99,99,101,115,115,0,79,67,83,80,0,99,97,73,115,115,117,101,114,115,0,67,65,32,73,115,115,117,101,114,115,0,79,67,83,80,83,105,103,110,105,110,103,0,79,67,83,80,32,83,105,103,110,105,110,103,0,73,83,79,0,105,115,111,0,109,101,109,98,101,114,45,98,111,100,121,0,73,83,79,32,77,101,109,98,101,114,32,66,111,100,121,0,73,83,79,45,85,83,0,73,83,79,32,85,83,32,77,101,109,98,101,114,32,66,111,100,121,0,88,57,45,53,55,0,88,57,46,53,55,0,88,57,99,109,0,88,57,46,53,55,32,67,77,32,63,0,112,107,99,115,53,0,83,77,73,77,69,0,83,47,77,73,77,69,0,105,100,45,115,109,105,109,101,45,109,111,100,0,105,100,45,115,109,105,109,101,45,99,116,0,105,100,45,115,109,105,109,101,45,97,97,0,105,100,45,115,109,105,109,101,45,97,108,103,0,105,100,45,115,109,105,109,101,45,99,100,0,105,100,45,115,109,105,109,101,45,115,112,113,0,105,100,45,115,109,105,109,101,45,99,116,105,0,105,100,45,115,109,105,109,101,45,109,111,100,45,99,109,115,0,105,100,45,115,109,105,109,101,45,109,111,100,45,101,115,115,0,105,100,45,115,109,105,109,101,45,109,111,100,45,111,105,100,0,105,100,45,115,109,105,109,101,45,109,111,100,45,109,115,103,45,118,51,0,105,100,45,115,109,105,109,101,45,109,111,100,45,101,116,115,45,101,83,105,103,110,97,116,117,114,101,45,56,56,0,105,100,45,115,109,105,109,101,45,109,111,100,45,101,116,115,45,101,83,105,103,110,97,116,117,114,101,45,57,55,0,105,100,45,115,109,105,109,101,45,109,111,100,45,101,116,115,45,101,83,105,103,80,111,108,105,99,121,45,56,56,0,105,100,45,115,109,105,109,101,45,109,111,100,45,101,116,115,45,101,83,105,103,80,111,108,105,99,121,45,57,55,0,105,100,45,115,109,105,109,101,45,99,116,45,114,101,99,101,105,112,116,0,105,100,45,115,109,105,109,101,45,99,116,45,97,117,116,104,68,97,116,97,0,105,100,45,115,109,105,109,101,45,99,116,45,112,117,98,108,105,115,104,67,101,114,116,0,105,100,45,115,109,105,109,101,45,99,116,45,84,83,84,73,110,102,111,0,105,100,45,115,109,105,109,101,45,99,116,45,84,68,84,73,110,102,111,0,105,100,45,115,109,105,109,101,45,99,116,45,99,111,110,116,101,110,116,73,110,102,111,0,105,100,45,115,109,105,109,101,45,99,116,45,68,86,67,83,82,101,113,117,101,115,116,68,97,116,97,0,105,100,45,115,109,105,109,101,45,99,116,45,68,86,67,83,82,101,115,112,111,110,115,101,68,97,116,97,0,105,100,45,115,109,105,109,101,45,97,97,45,114,101,99,101,105,112,116,82,101,113,117,101,115,116,0,105,100,45,115,109,105,109,101,45,97,97,45,115,101,99,117,114,105,116,121,76,97,98,101,108,0,105,100,45,115,109,105,109,101,45,97,97,45,109,108,69,120,112,97,110,100,72,105,115,116,111,114,121,0,105,100,45,115,109,105,109,101,45,97,97,45,99,111,110,116,101,110,116,72,105,110,116,0,105,100,45,115,109,105,109,101,45,97,97,45,109,115,103,83,105,103,68,105,103,101,115,116,0,105,100,45,115,109,105,109,101,45,97,97,45,101,110,99,97,112,67,111,110,116,101,110,116,84,121,112,101,0,105,100,45,115,109,105,109,101,45,97,97,45,99,111,110,116,101,110,116,73,100,101,110,116,105,102,105,101,114,0,105,100,45,115,109,105,109,101,45,97,97,45,109,97,99,86,97,108,117,101,0,105,100,45,115,109,105,109,101,45,97,97,45,101,113,117,105,118,97,108,101,110,116,76,97,98,101,108,115,0,105,100,45,115,109,105,109,101,45,97,97,45,99,111,110,116,101,110,116,82,101,102,101,114,101,110,99,101,0,105,100,45,115,109,105,109,101,45,97,97,45,101,110,99,114,121,112,75,101,121,80,114,101,102,0,105,100,45,115,109,105,109,101,45,97,97,45,115,105,103,110,105,110,103,67,101,114,116,105,102,105,99,97,116,101,0,105,100,45,115,109,105,109,101,45,97,97,45,115,109,105,109,101,69,110,99,114,121,112,116,67,101,114,116,115,0,105,100,45,115,109,105,109,101,45,97,97,45,116,105,109,101,83,116,97,109,112,84,111,107,101,110,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,115,105,103,80,111,108,105,99,121,73,100,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,99,111,109,109,105,116,109,101,110,116,84,121,112,101,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,115,105,103,110,101,114,76,111,99,97,116,105,111,110,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,115,105,103,110,101,114,65,116,116,114,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,111,116,104,101,114,83,105,103,67,101,114,116,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,99,111,110,116,101,110,116,84,105,109,101,115,116,97,109,112,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,67,101,114,116,105,102,105,99,97,116,101,82,101,102,115,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,82,101,118,111,99,97,116,105,111,110,82,101,102,115,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,99,101,114,116,86,97,108,117,101,115,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,114,101,118,111,99,97,116,105,111,110,86,97,108,117,101,115,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,101,115,99,84,105,109,101,83,116,97,109,112,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,99,101,114,116,67,82,76,84,105,109,101,115,116,97,109,112,0,105,100,45,115,109,105,109,101,45,97,97,45,101,116,115,45,97,114,99,104,105,118,101,84,105,109,101,83,116,97,109,112,0,105,100,45,115,109,105,109,101,45,97,97,45,115,105,103,110,97,116,117,114,101,84,121,112,101,0,105,100,45,115,109,105,109,101,45,97,97,45,100,118,99,115,45,100,118,99,0,105,100,45,115,109,105,109,101,45,97,108,103,45,69,83,68,72,119,105,116,104,51,68,69,83,0,105,100,45,115,109,105,109,101,45,97,108,103,45,69,83,68,72,119,105,116,104,82,67,50,0,105,100,45,115,109,105,109,101,45,97,108,103,45,51,68,69,83,119,114,97,112,0,105,100,45,115,109,105,109,101,45,97,108,103,45,82,67,50,119,114,97,112,0,105,100,45,115,109,105,109,101,45,97,108,103,45,69,83,68,72,0,105,100,45,115,109,105,109,101,45,97,108,103,45,67,77,83,51,68,69,83,119,114,97,112,0,105,100,45,115,109,105,109,101,45,97,108,103,45,67,77,83,82,67,50,119,114,97,112,0,105,100,45,115,109,105,109,101,45,99,100,45,108,100,97,112,0,105,100,45,115,109,105,109,101,45,115,112,113,45,101,116,115,45,115,113,116,45,117,114,105,0,105,100,45,115,109,105,109,101,45,115,112,113,45,101,116,115,45,115,113,116,45,117,110,111,116,105,99,101,0,105,100,45,115,109,105,109,101,45,99,116,105,45,101,116,115,45,112,114,111,111,102,79,102,79,114,105,103,105,110,0,105,100,45,115,109,105,109,101,45,99,116,105,45,101,116,115,45,112,114,111,111,102,79,102,82,101,99,101,105,112,116,0,105,100,45,115,109,105,109,101,45,99,116,105,45,101,116,115,45,112,114,111,111,102,79,102,68,101,108,105,118,101,114,121,0,105,100,45,115,109,105,109,101,45,99,116,105,45,101,116,115,45,112,114,111,111,102,79,102,83,101,110,100,101,114,0,105,100,45,115,109,105,109,101,45,99,116,105,45,101,116,115,45,112,114,111,111,102,79,102,65,112,112,114,111,118,97,108,0,105,100,45,115,109,105,109,101,45,99,116,105,45,101,116,115,45,112,114,111,111,102,79,102,67,114,101,97,116,105,111,110,0,77,68,52,0,109,100,52,0,105,100,45,112,107,105,120,45,109,111,100,0,105,100,45,113,116,0,105,100,45,105,116,0,105,100,45,112,107,105,112,0,105,100,45,97,108,103,0,105,100,45,99,109,99,0,105,100,45,111,110,0,105,100,45,112,100,97,0,105,100,45,97,99,97,0,105,100,45,113,99,115,0,105,100,45,99,99,116,0,105,100,45,112,107,105,120,49,45,101,120,112,108,105,99,105,116,45,56,56,0,105,100,45,112,107,105,120,49,45,105,109,112,108,105,99,105,116,45,56,56,0,105,100,45,112,107,105,120,49,45,101,120,112,108,105,99,105,116,45,57,51,0,105,100,45,112,107,105,120,49,45,105,109,112,108,105,99,105,116,45,57,51,0,105,100,45,109,111,100,45,99,114,109,102,0,105,100,45,109,111,100,45,99,109,99,0,105,100,45,109,111,100,45,107,101,97,45,112,114,111,102,105,108,101,45,56,56,0,105,100,45,109,111,100,45,107,101,97,45,112,114,111,102,105,108,101,45,57,51,0,105,100,45,109,111,100,45,99,109,112,0,105,100,45,109,111,100,45,113,117,97,108,105,102,105,101,100,45,99,101,114,116,45,56,56,0,105,100,45,109,111,100,45,113,117,97,108,105,102,105,101,100,45,99,101,114,116,45,57,51,0,105,100,45,109,111,100,45,97,116,116,114,105,98,117,116,101,45,99,101,114,116,0,105,100,45,109,111,100,45,116,105,109,101,115,116,97,109,112,45,112,114,111,116,111,99,111,108,0,105,100,45,109,111,100,45,111,99,115,112,0,105,100,45,109,111,100,45,100,118,99,115,0,105,100,45,109,111,100,45,99,109,112,50,48,48,48,0,98,105,111,109,101,116,114,105,99,73,110,102,111,0,66,105,111,109,101,116,114,105,99,32,73,110,102,111,0,113,99,83,116,97,116,101,109,101,110,116,115,0,97,99,45,97,117,100,105,116,69,110,116,105,116,121,0,97,99,45,116,97,114,103,101,116,105,110,103,0,97,97,67,111,110,116,114,111,108,115,0,115,98,103,112,45,105,112,65,100,100,114,66,108,111,99,107,0,115,98,103,112,45,97,117,116,111,110,111,109,111,117,115,83,121,115,78,117,109,0,115,98,103,112,45,114,111,117,116,101,114,73,100,101,110,116,105,102,105,101,114,0,116,101,120,116,78,111,116,105,99,101,0,105,112,115,101,99,69,110,100,83,121,115,116,101,109,0,73,80,83,101,99,32,69,110,100,32,83,121,115,116,101,109,0,105,112,115,101,99,84,117,110,110,101,108,0,73,80,83,101,99,32,84,117,110,110,101,108,0,105,112,115,101,99,85,115,101,114,0,73,80,83,101,99,32,85,115,101,114,0,68,86,67,83,0,100,118,99,115,0,105,100,45,105,116,45,99,97,80,114,111,116,69,110,99,67,101,114,116,0,105,100,45,105,116,45,115,105,103,110,75,101,121,80,97,105,114,84,121,112,101,115,0,105,100,45,105,116,45,101,110,99,75,101,121,80,97,105,114,84,121,112,101,115,0,105,100,45,105,116,45,112,114,101,102,101,114,114,101,100,83,121,109,109,65,108,103,0,105,100,45,105,116,45,99,97,75,101,121,85,112,100,97,116,101,73,110,102,111,0,105,100,45,105,116,45,99,117,114,114,101,110,116,67,82,76,0,105,100,45,105,116,45,117,110,115,117,112,112,111,114,116,101,100,79,73,68,115,0,105,100,45,105,116,45,115,117,98,115,99,114,105,112,116,105,111,110,82,101,113,117,101,115,116,0,105,100,45,105,116,45,115,117,98,115,99,114,105,112,116,105,111,110,82,101,115,112,111,110,115,101,0,105,100,45,105,116,45,107,101,121,80,97,105,114,80,97,114,97,109,82,101,113,0,105,100,45,105,116,45,107,101,121,80,97,105,114,80,97,114,97,109,82,101,112,0,105,100,45,105,116,45,114,101,118,80,97,115,115,112,104,114,97,115,101,0,105,100,45,105,116,45,105,109,112,108,105,99,105,116,67,111,110,102,105,114,109,0,105,100,45,105,116,45,99,111,110,102,105,114,109,87,97,105,116,84,105,109,101,0,105,100,45,105,116,45,111,114,105,103,80,75,73,77,101,115,115,97,103,101,0,105,100,45,114,101,103,67,116,114,108,0,105,100,45,114,101,103,73,110,102,111,0,105,100,45,114,101,103,67,116,114,108,45,114,101,103,84,111,107,101,110,0,105,100,45,114,101,103,67,116,114,108,45,97,117,116,104,101,110,116,105,99,97,116,111,114,0,105,100,45,114,101,103,67,116,114,108,45,112,107,105,80,117,98,108,105,99,97,116,105,111,110,73,110,102,111,0,105,100,45,114,101,103,67,116,114,108,45,112,107,105,65,114,99,104,105,118,101,79,112,116,105,111,110,115,0,105,100,45,114,101,103,67,116,114,108,45,111,108,100,67,101,114,116,73,68,0,105,100,45,114,101,103,67,116,114,108,45,112,114,111,116,111,99,111,108,69,110,99,114,75,101,121,0,105,100,45,114,101,103,73,110,102,111,45,117,116,102,56,80,97,105,114,115,0,105,100,45,114,101,103,73,110,102,111,45,99,101,114,116,82,101,113,0,105,100,45,97,108,103,45,100,101,115,52,48,0,105,100,45,97,108,103,45,110,111,83,105,103,110,97,116,117,114,101,0,105,100,45,97,108,103,45,100,104,45,115,105,103,45,104,109,97,99,45,115,104,97,49,0,105,100,45,97,108,103,45,100,104,45,112,111,112,0,105,100,45,99,109,99,45,115,116,97,116,117,115,73,110,102,111,0,105,100,45,99,109,99,45,105,100,101,110,116,105,102,105,99,97,116,105,111,110,0,105,100,45,99,109,99,45,105,100,101,110,116,105,116,121,80,114,111,111,102,0,105,100,45,99,109,99,45,100,97,116,97,82,101,116,117,114,110,0,105,100,45,99,109,99,45,116,114,97,110,115,97,99,116,105,111,110,73,100,0,105,100,45,99,109,99,45,115,101,110,100,101,114,78,111,110,99,101,0,105,100,45,99,109,99,45,114,101,99,105,112,105,101,110,116,78,111,110,99,101,0,105,100,45,99,109,99,45,97,100,100,69,120,116,101,110,115,105,111,110,115,0,105,100,45,99,109,99,45,101,110,99,114,121,112,116,101,100,80,79,80,0,105,100,45,99,109,99,45,100,101,99,114,121,112,116,101,100,80,79,80,0,105,100,45,99,109,99,45,108,114,97,80,79,80,87,105,116,110,101,115,115,0,105,100,45,99,109,99,45,103,101,116,67,101,114,116,0,105,100,45,99,109,99,45,103,101,116,67,82,76,0,105,100,45,99,109,99,45,114,101,118,111,107,101,82,101,113,117,101,115,116,0,105,100,45,99,109,99,45,114,101,103,73,110,102,111,0,105,100,45,99,109,99,45,114,101,115,112,111,110,115,101,73,110,102,111,0,105,100,45,99,109,99,45,113,117,101,114,121,80,101,110,100,105,110,103,0,105,100,45,99,109,99,45,112,111,112,76,105,110,107,82,97,110,100,111,109,0,105,100,45,99,109,99,45,112,111,112,76,105,110,107,87,105,116,110,101,115,115,0,105,100,45,99,109,99,45,99,111,110,102,105,114,109,67,101,114,116,65,99,99,101,112,116,97,110,99,101,0,105,100,45,111,110,45,112,101,114,115,111,110,97,108,68,97,116,97,0,105,100,45,112,100,97,45,100,97,116,101,79,102,66,105,114,116,104,0,105,100,45,112,100,97,45,112,108,97,99,101,79,102,66,105,114,116,104,0,105,100,45,112,100,97,45,103,101,110,100,101,114,0,105,100,45,112,100,97,45,99,111,117,110,116,114,121,79,102,67,105,116,105,122,101,110,115,104,105,112,0,105,100,45,112,100,97,45,99,111,117,110,116,114,121,79,102,82,101,115,105,100,101,110,99,101,0,105,100,45,97,99,97,45,97,117,116,104,101,110,116,105,99,97,116,105,111,110,73,110,102,111,0,105,100,45,97,99,97,45,97,99,99,101,115,115,73,100,101,110,116,105,116,121,0,105,100,45,97,99,97,45,99,104,97,114,103,105,110,103,73,100,101,110,116,105,116,121,0,105,100,45,97,99,97,45,103,114,111,117,112,0,105,100,45,97,99,97,45,114,111,108,101,0,105,100,45,113,99,115,45,112,107,105,120,81,67,83,121,110,116,97,120,45,118,49,0,105,100,45,99,99,116,45,99,114,115,0,105,100,45,99,99,116,45,80,75,73,68,97,116,97,0,105,100,45,99,99,116,45,80,75,73,82,101,115,112,111,110,115,101,0,97,100,95,116,105,109,101,115,116,97,109,112,105,110,103,0,65,68,32,84,105,109,101,32,83,116,97,109,112,105,110,103,0,65,68,95,68,86,67,83,0,97,100,32,100,118,99,115,0,98,97,115,105,99,79,67,83,80,82,101,115,112,111,110,115,101,0,66,97,115,105,99,32,79,67,83,80,32,82,101,115,112,111,110,115,101,0,78,111,110,99,101,0,79,67,83,80,32,78,111,110,99,101,0,67,114,108,73,68,0,79,67,83,80,32,67,82,76,32,73,68,0,97,99,99,101,112,116,97,98,108,101,82,101,115,112,111,110,115,101,115,0,65,99,99,101,112,116,97,98,108,101,32,79,67,83,80,32,82,101,115,112,111,110,115,101,115,0,110,111,67,104,101,99,107,0,79,67,83,80,32,78,111,32,67,104,101,99,107,0,97,114,99,104,105,118,101,67,117,116,111,102,102,0,79,67,83,80,32,65,114,99,104,105,118,101,32,67,117,116,111,102,102,0,115,101,114,118,105,99,101,76,111,99,97,116,111,114,0,79,67,83,80,32,83,101,114,118,105,99,101,32,76,111,99,97,116,111,114,0,101,120,116,101,110,100,101,100,83,116,97,116,117,115,0,69,120,116,101,110,100,101,100,32,79,67,83,80,32,83,116,97,116,117,115,0,118,97,108,105,100,0,112,97,116,104,0,116,114,117,115,116,82,111,111,116,0,84,114,117,115,116,32,82,111,111,116,0,97,108,103,111,114,105,116,104,109,0,114,115,97,83,105,103,110,97,116,117,114,101,0,88,53,48,48,97,108,103,111,114,105,116,104,109,115,0,100,105,114,101,99,116,111,114,121,32,115,101,114,118,105,99,101,115,32,45,32,97,108,103,111,114,105,116,104,109,115,0,79,82,71,0,111,114,103,0,68,79,68,0,100,111,100,0,73,65,78,65,0,105,97,110,97,0,100,105,114,101,99,116,111,114,121,0,68,105,114,101,99,116,111,114,121,0,109,103,109,116,0,77,97,110,97,103,101,109,101,110,116,0,101,120,112,101,114,105,109,101,110,116,97,108,0,69,120,112,101,114,105,109,101,110,116,97,108,0,112,114,105,118,97,116,101,0,80,114,105,118,97,116,101,0,115,101,99,117,114,105,116,121,0,83,101,99,117,114,105,116,121,0,115,110,109,112,118,50,0,83,78,77,80,118,50,0,77,97,105,108,0,101,110,116,101,114,112,114,105,115,101,115,0,69,110,116,101,114,112,114,105,115,101,115,0,100,99,111,98,106,101,99,116,0,100,99,79,98,106,101,99,116,0,68,67,0,100,111,109,97,105,110,67,111,109,112,111,110,101,110,116,0,100,111,109,97,105,110,0,68,111,109,97,105,110,0,78,85,76,76,0,115,101,108,101,99,116,101,100,45,97,116,116,114,105,98,117,116,101,45,116,121,112,101,115,0,83,101,108,101,99,116,101,100,32,65,116,116,114,105,98,117,116,101,32,84,121,112,101,115,0,99,108,101,97,114,97,110,99,101,0,82,83,65,45,77,68,52,0,109,100,52,87,105,116,104,82,83,65,69,110,99,114,121,112,116,105,111,110,0,97,99,45,112,114,111,120,121,105,110,103,0,115,117,98,106,101,99,116,73,110,102,111,65,99,99,101,115,115,0,83,117,98,106,101,99,116,32,73,110,102,111,114,109,97,116,105,111,110,32,65,99,99,101,115,115,0,105,100,45,97,99,97,45,101,110,99,65,116,116,114,115,0,114,111,108,101,0,112,111,108,105,99,121,67,111,110,115,116,114,97,105,110,116,115,0,88,53,48,57,118,51,32,80,111,108,105,99,121,32,67,111,110,115,116,114,97,105,110,116,115,0,116,97,114,103,101,116,73,110,102,111,114,109,97,116,105,111,110,0,88,53,48,57,118,51,32,65,67,32,84,97,114,103,101,116,105,110,103,0,110,111,82,101,118,65,118,97,105,108,0,88,53,48,57,118,51,32,78,111,32,82,101,118,111,99,97,116,105,111,110,32,65,118,97,105,108,97,98,108,101,0,97,110,115,105,45,88,57,45,54,50,0,65,78,83,73,32,88,57,46,54,50,0,112,114,105,109,101,45,102,105,101,108,100,0,99,104,97,114,97,99,116,101,114,105,115,116,105,99,45,116,119,111,45,102,105,101,108,100,0,105,100,45,101,99,80,117,98,108,105,99,75,101,121,0,112,114,105,109,101,49,57,50,118,49,0,112,114,105,109,101,49,57,50,118,50,0,112,114,105,109,101,49,57,50,118,51,0,112,114,105,109,101,50,51,57,118,49,0,112,114,105,109,101,50,51,57,118,50,0,112,114,105,109,101,50,51,57,118,51,0,112,114,105,109,101,50,53,54,118,49,0,101,99,100,115,97,45,119,105,116,104,45,83,72,65,49,0,67,83,80,78,97,109,101,0,77,105,99,114,111,115,111,102,116,32,67,83,80,32,78,97,109,101,0,65,69,83,45,49,50,56,45,69,67,66,0,97,101,115,45,49,50,56,45,101,99,98,0,65,69,83,45,49,50,56,45,67,66,67,0,97,101,115,45,49,50,56,45,99,98,99,0,65,69,83,45,49,50,56,45,79,70,66,0,97,101,115,45,49,50,56,45,111,102,98,0,65,69,83,45,49,50,56,45,67,70,66,0,97,101,115,45,49,50,56,45,99,102,98,0,65,69,83,45,49,57,50,45,69,67,66,0,97,101,115,45,49,57,50,45,101,99,98,0,65,69,83,45,49,57,50,45,67,66,67,0,97,101,115,45,49,57,50,45,99,98,99,0,65,69,83,45,49,57,50,45,79,70,66,0,97,101,115,45,49,57,50,45,111,102,98,0,65,69,83,45,49,57,50,45,67,70,66,0,97,101,115,45,49,57,50,45,99,102,98,0,65,69,83,45,50,53,54,45,69,67,66,0,97,101,115,45,50,53,54,45,101,99,98,0,65,69,83,45,50,53,54,45,67,66,67,0,97,101,115,45,50,53,54,45,99,98,99,0,65,69,83,45,50,53,54,45,79,70,66,0,97,101,115,45,50,53,54,45,111,102,98,0,65,69,83,45,50,53,54,45,67,70,66,0,97,101,115,45,50,53,54,45,99,102,98,0,104,111,108,100,73,110,115,116,114,117,99,116,105,111,110,67,111,100,101,0,72,111,108,100,32,73,110,115,116,114,117,99,116,105,111,110,32,67,111,100,101,0,104,111,108,100,73,110,115,116,114,117,99,116,105,111,110,78,111,110,101,0,72,111,108,100,32,73,110,115,116,114,117,99,116,105,111,110,32,78,111,110,101,0,104,111,108,100,73,110,115,116,114,117,99,116,105,111,110,67,97,108,108,73,115,115,117,101,114,0,72,111,108,100,32,73,110,115,116,114,117,99,116,105,111,110,32,67,97,108,108,32,73,115,115,117,101,114,0,104,111,108,100,73,110,115,116,114,117,99,116,105,111,110,82,101,106,101,99,116,0,72,111,108,100,32,73,110,115,116,114,117,99,116,105,111,110,32,82,101,106,101,99,116,0,100,97,116,97,0,117,99,108,0,112,105,108,111,116,0,112,105,108,111,116,65,116,116,114,105,98,117,116,101,84,121,112,101,0,112,105,108,111,116,65,116,116,114,105,98,117,116,101,83,121,110,116,97,120,0,112,105,108,111,116,79,98,106,101,99,116,67,108,97,115,115,0,112,105,108,111,116,71,114,111,117,112,115,0,105,65,53,83,116,114,105,110,103,83,121,110,116,97,120,0,99,97,115,101,73,103,110,111,114,101,73,65,53,83,116,114,105,110,103,83,121,110,116,97,120,0,112,105,108,111,116,79,98,106,101,99,116,0,112,105,108,111,116,80,101,114,115,111,110,0,97,99,99,111,117,110,116,0,100,111,99,117,109,101,110,116,0,114,111,111,109,0,100,111,99,117,109,101,110,116,83,101,114,105,101,115,0,114,70,67,56,50,50,108,111,99,97,108,80,97,114,116,0,100,78,83,68,111,109,97,105,110,0,100,111,109,97,105,110,82,101,108,97,116,101,100,79,98,106,101,99,116,0,102,114,105,101,110,100,108,121,67,111,117,110,116,114,121,0,115,105,109,112,108,101,83,101,99,117,114,105,116,121,79,98,106,101,99,116,0,112,105,108,111,116,79,114,103,97,110,105,122,97,116,105,111,110,0,112,105,108,111,116,68,83,65,0,113,117,97,108,105,116,121,76,97,98,101,108,108,101,100,68,97,116,97,0,85,73,68,0,117,115,101,114,73,100,0,116,101,120,116,69,110,99,111,100,101,100,79,82,65,100,100,114,101,115,115,0,109,97,105,108,0,114,102,99,56,50,50,77,97,105,108,98,111,120,0,105,110,102,111,0,102,97,118,111,117,114,105,116,101,68,114,105,110,107,0,114,111,111,109,78,117,109,98,101,114,0,112,104,111,116,111,0,117,115,101,114,67,108,97,115,115,0,104,111,115,116,0,109,97,110,97,103,101,114,0,100,111,99,117,109,101,110,116,73,100,101,110,116,105,102,105,101,114,0,100,111,99,117,109,101,110,116,84,105,116,108,101,0,100,111,99,117,109,101,110,116,86,101,114,115,105,111,110,0,100,111,99,117,109,101,110,116,65,117,116,104,111,114,0,100,111,99,117,109,101,110,116,76,111,99,97,116,105,111,110,0,104,111,109,101,84,101,108,101,112,104,111,110,101,78,117,109,98,101,114,0,115,101,99,114,101,116,97,114,121,0,111,116,104,101,114,77,97,105,108,98,111,120,0,108,97,115,116,77,111,100,105,102,105,101,100,84,105,109,101,0,108,97,115,116,77,111,100,105,102,105,101,100,66,121,0,97,82,101,99,111,114,100,0,112,105,108,111,116,65,116,116,114,105,98,117,116,101,84,121,112,101,50,55,0,109,88,82,101,99,111,114,100,0,110,83,82,101,99,111,114,100,0,115,79,65,82,101,99,111,114,100,0,99,78,65,77,69,82,101,99,111,114,100,0,97,115,115,111,99,105,97,116,101,100,68,111,109,97,105,110,0,97,115,115,111,99,105,97,116,101,100,78,97,109,101,0,104,111,109,101,80,111,115,116,97,108,65,100,100,114,101,115,115,0,112,101,114,115,111,110,97,108,84,105,116,108,101,0,109,111,98,105,108,101,84,101,108,101,112,104,111,110,101,78,117,109,98,101,114,0,112,97,103,101,114,84,101,108,101,112,104,111,110,101,78,117,109,98,101,114,0,102,114,105,101,110,100,108,121,67,111,117,110,116,114,121,78,97,109,101,0,111,114,103,97,110,105,122,97,116,105,111,110,97,108,83,116,97,116,117,115,0,106,97,110,101,116,77,97,105,108,98,111,120,0,109,97,105,108,80,114,101,102,101,114,101,110,99,101,79,112,116,105,111,110,0,98,117,105,108,100,105,110,103,78,97,109,101,0,100,83,65,81,117,97,108,105,116,121,0,115,105,110,103,108,101,76,101,118,101,108,81,117,97,108,105,116,121,0,115,117,98,116,114,101,101,77,105,110,105,109,117,109,81,117,97,108,105,116,121,0,115,117,98,116,114,101,101,77,97,120,105,109,117,109,81,117,97,108,105,116,121,0,112,101,114,115,111,110,97,108,83,105,103,110,97,116,117,114,101,0,100,73,84,82,101,100,105,114,101,99,116,0,97,117,100,105,111,0,100,111,99,117,109,101,110,116,80,117,98,108,105,115,104,101,114,0,120,53,48,48,85,110,105,113,117,101,73,100,101,110,116,105,102,105,101,114,0,109,105,109,101,45,109,104,115,0,77,73,77,69,32,77,72,83,0,109,105,109,101,45,109,104,115,45,104,101,97,100,105,110,103,115,0,109,105,109,101,45,109,104,115,45,98,111,100,105,101,115,0,105,100,45,104,101,120,45,112,97,114,116,105,97,108,45,109,101,115,115,97,103,101,0,105,100,45,104,101,120,45,109,117,108,116,105,112,97,114,116,45,109,101,115,115,97,103,101,0,103,101,110,101,114,97,116,105,111,110,81,117,97,108,105,102,105,101,114,0,112,115,101,117,100,111,110,121,109,0,105,100,45,115,101,116,0,83,101,99,117,114,101,32,69,108,101,99,116,114,111,110,105,99,32,84,114,97,110,115,97,99,116,105,111,110,115,0,115,101,116,45,99,116,121,112,101,0,99,111,110,116,101,110,116,32,116,121,112,101,115,0,115,101,116,45,109,115,103,69,120,116,0,109,101,115,115,97,103,101,32,101,120,116,101,110,115,105,111,110,115,0,115,101,116,45,97,116,116,114,0,115,101,116,45,112,111,108,105,99,121,0,115,101,116,45,99,101,114,116,69,120,116,0,99,101,114,116,105,102,105,99,97,116,101,32,101,120,116,101,110,115,105,111,110,115,0,115,101,116,45,98,114,97,110,100,0,115,101,116,99,116,45,80,65,78,68,97,116,97,0,115,101,116,99,116,45,80,65,78,84,111,107,101,110,0,115,101,116,99,116,45,80,65,78,79,110,108,121,0,115,101,116,99,116,45,79,73,68,97,116,97,0,115,101,116,99,116,45,80,73,0,115,101,116,99,116,45,80,73,68,97,116,97,0,115,101,116,99,116,45,80,73,68,97,116,97,85,110,115,105,103,110,101,100,0,115,101,116,99,116,45,72,79,68,73,110,112,117,116,0,115,101,116,99,116,45,65,117,116,104,82,101,115,66,97,103,103,97,103,101,0,115,101,116,99,116,45,65,117,116,104,82,101,118,82,101,113,66,97,103,103,97,103,101,0,115,101,116,99,116,45,65,117,116,104,82,101,118,82,101,115,66,97,103,103,97,103,101,0,115,101,116,99,116,45,67,97,112,84,111,107,101,110,83,101,113,0,115,101,116,99,116,45,80,73,110,105,116,82,101,115,68,97,116,97,0,115,101,116,99,116,45,80,73,45,84,66,83,0,115,101,116,99,116,45,80,82,101,115,68,97,116,97,0,115,101,116,99,116,45,65,117,116,104,82,101,113,84,66,83,0,115,101,116,99,116,45,65,117,116,104,82,101,115,84,66,83,0,115,101,116,99,116,45,65,117,116,104,82,101,115,84,66,83,88,0,115,101,116,99,116,45,65,117,116,104,84,111,107,101,110,84,66,83,0,115,101,116,99,116,45,67,97,112,84,111,107,101,110,68,97,116,97,0,115,101,116,99,116,45,67,97,112,84,111,107,101,110,84,66,83,0,115,101,116,99,116,45,65,99,113,67,97,114,100,67,111,100,101,77,115,103,0,115,101,116,99,116,45,65,117,116,104,82,101,118,82,101,113,84,66,83,0,115,101,116,99,116,45,65,117,116,104,82,101,118,82,101,115,68,97,116,97,0,115,101,116,99,116,45,65,117,116,104,82,101,118,82,101,115,84,66,83,0,115,101,116,99,116,45,67,97,112,82,101,113,84,66,83,0,115,101,116,99,116,45,67,97,112,82,101,113,84,66,83,88,0,115,101,116,99,116,45,67,97,112,82,101,115,68,97,116,97,0,115,101,116,99,116,45,67,97,112,82,101,118,82,101,113,84,66,83,0,115,101,116,99,116,45,67,97,112,82,101,118,82,101,113,84,66,83,88,0,115,101,116,99,116,45,67,97,112,82,101,118,82,101,115,68,97,116,97,0,115,101,116,99,116,45,67,114,101,100,82,101,113,84,66,83,0,115,101,116,99,116,45,67,114,101,100,82,101,113,84,66,83,88,0,115,101,116,99,116,45,67,114,101,100,82,101,115,68,97,116,97,0,115,101,116,99,116,45,67,114,101,100,82,101,118,82,101,113,84,66,83,0,115,101,116,99,116,45,67,114,101,100,82,101,118,82,101,113,84,66,83,88,0,115,101,116,99,116,45,67,114,101,100,82,101,118,82,101,115,68,97,116,97,0,115,101,116,99,116,45,80,67,101,114,116,82,101,113,68,97,116,97,0,115,101,116,99,116,45,80,67,101,114,116,82,101,115,84,66,83,0,115,101,116,99,116,45,66,97,116,99,104,65,100,109,105,110,82,101,113,68,97,116,97,0,115,101,116,99,116,45,66,97,116,99,104,65,100,109,105,110,82,101,115,68,97,116,97,0,115,101,116,99,116,45,67,97,114,100,67,73,110,105,116,82,101,115,84,66,83,0,115,101,116,99,116,45,77,101,65,113,67,73,110,105,116,82,101,115,84,66,83,0,115,101,116,99,116,45,82,101,103,70,111,114,109,82,101,115,84,66,83,0,115,101,116,99,116,45,67,101,114,116,82,101,113,68,97,116,97,0,115,101,116,99,116,45,67,101,114,116,82,101,113,84,66,83,0,115,101,116,99,116,45,67,101,114,116,82,101,115,68,97,116,97,0,115,101,116,99,116,45,67,101,114,116,73,110,113,82,101,113,84,66,83,0,115,101,116,99,116,45,69,114,114,111,114,84,66,83,0,115,101,116,99,116,45,80,73,68,117,97,108,83,105,103,110,101,100,84,66,69,0,115,101,116,99,116,45,80,73,85,110,115,105,103,110,101,100,84,66,69,0,115,101,116,99,116,45,65,117,116,104,82,101,113,84,66,69,0,115,101,116,99,116,45,65,117,116,104,82,101,115,84,66,69,0,115,101,116,99,116,45,65,117,116,104,82,101,115,84,66,69,88,0,115,101,116,99,116,45,65,117,116,104,84,111,107,101,110,84,66,69,0,115,101,116,99,116,45,67,97,112,84,111,107,101,110,84,66,69,0,115,101,116,99,116,45,67,97,112,84,111,107,101,110,84,66,69,88,0,115,101,116,99,116,45,65,99,113,67,97,114,100,67,111,100,101,77,115,103,84,66,69,0,115,101,116,99,116,45,65,117,116,104,82,101,118,82,101,113,84,66,69,0,115,101,116,99,116,45,65,117,116,104,82,101,118,82,101,115,84,66,69,0,115,101,116,99,116,45,65,117,116,104,82,101,118,82,101,115,84,66,69,66,0,115,101,116,99,116,45,67,97,112,82,101,113,84,66,69,0,115,101,116,99,116,45,67,97,112,82,101,113,84,66,69,88,0,115,101,116,99,116,45,67,97,112,82,101,115,84,66,69,0,115,101,116,99,116,45,67,97,112,82,101,118,82,101,113,84,66,69,0,115,101,116,99,116,45,67,97,112,82,101,118,82,101,113,84,66,69,88,0,115,101,116,99,116,45,67,97,112,82,101,118,82,101,115,84,66,69,0,115,101,116,99,116,45,67,114,101,100,82,101,113,84,66,69,0,115,101,116,99,116,45,67,114,101,100,82,101,113,84,66,69,88,0,115,101,116,99,116,45,67,114,101,100,82,101,115,84,66,69,0,115,101,116,99,116,45,67,114,101,100,82,101,118,82,101,113,84,66,69,0,115,101,116,99,116,45,67,114,101,100,82,101,118,82,101,113,84,66,69,88,0,115,101,116,99,116,45,67,114,101,100,82,101,118,82,101,115,84,66,69,0,115,101,116,99,116,45,66,97,116,99,104,65,100,109,105,110,82,101,113,84,66,69,0,115,101,116,99,116,45,66,97,116,99,104,65,100,109,105,110,82,101,115,84,66,69,0,115,101,116,99,116,45,82,101,103,70,111,114,109,82,101,113,84,66,69,0,115,101,116,99,116,45,67,101,114,116,82,101,113,84,66,69,0,115,101,116,99,116,45,67,101,114,116,82,101,113,84,66,69,88,0,115,101,116,99,116,45,67,101,114,116,82,101,115,84,66,69,0,115,101,116,99,116,45,67,82,76,78,111,116,105,102,105,99,97,116,105,111,110,84,66,83,0,115,101,116,99,116,45,67,82,76,78,111,116,105,102,105,99,97,116,105,111,110,82,101,115,84,66,83,0,115,101,116,99,116,45,66,67,73,68,105,115,116,114,105,98,117,116,105,111,110,84,66,83,0,115,101,116,101,120,116,45,103,101,110,67,114,121,112,116,0,103,101,110,101,114,105,99,32,99,114,121,112,116,111,103,114,97,109,0,115,101,116,101,120,116,45,109,105,65,117,116,104,0,109,101,114,99,104,97,110,116,32,105,110,105,116,105,97,116,101,100,32,97,117,116,104,0,115,101,116,101,120,116,45,112,105,110,83,101,99,117,114,101,0,115,101,116,101,120,116,45,112,105,110,65,110,121,0,115,101,116,101,120,116,45,116,114,97,99,107,50,0,115,101,116,101,120,116,45,99,118,0,97,100,100,105,116,105,111,110,97,108,32,118,101,114,105,102,105,99,97,116,105,111,110,0,115,101,116,45,112,111,108,105,99,121,45,114,111,111,116,0,115,101,116,67,101,120,116,45,104,97,115,104,101,100,82,111,111,116,0,115,101,116,67,101,120,116,45,99,101,114,116,84,121,112,101,0,115,101,116,67,101,120,116,45,109,101,114,99,104,68,97,116,97,0,115,101,116,67,101,120,116,45,99,67,101,114,116,82,101,113,117,105,114,101,100,0,115,101,116,67,101,120,116,45,116,117,110,110,101,108,105,110,103,0,115,101,116,67,101,120,116,45,115,101,116,69,120,116,0,115,101,116,67,101,120,116,45,115,101,116,81,117,97,108,102,0,115,101,116,67,101,120,116,45,80,71,87,89,99,97,112,97,98,105,108,105,116,105,101,115,0,115,101,116,67,101,120,116,45,84,111,107,101,110,73,100,101,110,116,105,102,105,101,114,0,115,101,116,67,101,120,116,45,84,114,97,99,107,50,68,97,116,97,0,115,101,116,67,101,120,116,45,84,111,107,101,110,84,121,112,101,0,115,101,116,67,101,120,116,45,73,115,115,117,101,114,67,97,112,97,98,105,108,105,116,105,101,115,0,115,101,116,65,116,116,114,45,67,101,114,116,0,115,101,116,65,116,116,114,45,80,71,87,89,99,97,112,0,112,97,121,109,101,110,116,32,103,97,116,101,119,97,121,32,99,97,112,97,98,105,108,105,116,105,101,115,0,115,101,116,65,116,116,114,45,84,111,107,101,110,84,121,112,101,0,115,101,116,65,116,116,114,45,73,115,115,67,97,112,0,105,115,115,117,101,114,32,99,97,112,97,98,105,108,105,116,105,101,115,0,115,101,116,45,114,111,111,116,75,101,121,84,104,117,109,98,0,115,101,116,45,97,100,100,80,111,108,105,99,121,0,115,101,116,65,116,116,114,45,84,111,107,101,110,45,69,77,86,0,115,101,116,65,116,116,114,45,84,111,107,101,110,45,66,48,80,114,105,109,101,0,115,101,116,65,116,116,114,45,73,115,115,67,97,112,45,67,86,77,0,115,101,116,65,116,116,114,45,73,115,115,67,97,112,45,84,50,0,115,101,116,65,116,116,114,45,73,115,115,67,97,112,45,83,105,103,0,115,101,116,65,116,116,114,45,71,101,110,67,114,121,112,116,103,114,109,0,103,101,110,101,114,97,116,101,32,99,114,121,112,116,111,103,114,97,109,0,115,101,116,65,116,116,114,45,84,50,69,110,99,0,101,110,99,114,121,112,116,101,100,32,116,114,97,99,107,32,50,0,115,101,116,65,116,116,114,45,84,50,99,108,101,97,114,116,120,116,0,99,108,101,97,114,116,101,120,116,32,116,114,97,99,107,32,50,0,115,101,116,65,116,116,114,45,84,111,107,73,67,67,115,105,103,0,73,67,67,32,111,114,32,116,111,107,101,110,32,115,105,103,110,97,116,117,114,101,0,115,101,116,65,116,116,114,45,83,101,99,68,101,118,83,105,103,0,115,101,99,117,114,101,32,100,101,118,105,99,101,32,115,105,103,110,97,116,117,114,101,0,115,101,116,45,98,114,97,110,100,45,73,65,84,65,45,65,84,65,0,115,101,116,45,98,114,97,110,100,45,68,105,110,101,114,115,0,115,101,116,45,98,114,97,110,100,45,65,109,101,114,105,99,97,110,69,120,112,114,101,115,115,0,115,101,116,45,98,114,97,110,100,45,74,67,66,0,115,101,116,45,98,114,97,110,100,45,86,105,115,97,0,115,101,116,45,98,114,97,110,100,45,77,97,115,116,101,114,67,97,114,100,0,115,101,116,45,98,114,97,110,100,45,78,111,118,117,115,0,68,69,83,45,67,68,77,70,0,100,101,115,45,99,100,109,102,0,114,115,97,79,65,69,80,69,110,99,114,121,112,116,105,111,110,83,69,84,0,73,84,85,45,84,0,105,116,117,45,116,0,74,79,73,78,84,45,73,83,79,45,73,84,85,45,84,0,106,111,105,110,116,45,105,115,111,45,105,116,117,45,116,0,105,110,116,101,114,110,97,116,105,111,110,97,108,45,111,114,103,97,110,105,122,97,116,105,111,110,115,0,73,110,116,101,114,110,97,116,105,111,110,97,108,32,79,114,103,97,110,105,122,97,116,105,111,110,115,0,109,115,83,109,97,114,116,99,97,114,100,76,111,103,105,110,0,77,105,99,114,111,115,111,102,116,32,83,109,97,114,116,99,97,114,100,108,111,103,105,110,0,109,115,85,80,78,0,77,105,99,114,111,115,111,102,116,32,85,110,105,118,101,114,115,97,108,32,80,114,105,110,99,105,112,97,108,32,78,97,109,101,0,65,69,83,45,49,50,56,45,67,70,66,49,0,97,101,115,45,49,50,56,45,99,102,98,49,0,65,69,83,45,49,57,50,45,67,70,66,49,0,97,101,115,45,49,57,50,45,99,102,98,49,0,65,69,83,45,50,53,54,45,67,70,66,49,0,97,101,115,45,50,53,54,45,99,102,98,49,0,65,69,83,45,49,50,56,45,67,70,66,56,0,97,101,115,45,49,50,56,45,99,102,98,56,0,65,69,83,45,49,57,50,45,67,70,66,56,0,97,101,115,45,49,57,50,45,99,102,98,56,0,65,69,83,45,50,53,54,45,67,70,66,56,0,97,101,115,45,50,53,54,45,99,102,98,56,0,68,69,83,45,67,70,66,49,0,100,101,115,45,99,102,98,49,0,68,69,83,45,67,70,66,56,0,100,101,115,45,99,102,98,56,0,68,69,83,45,69,68,69,51,45,67,70,66,49,0,100,101,115,45,101,100,101,51,45,99,102,98,49,0,68,69,83,45,69,68,69,51,45,67,70,66,56,0,100,101,115,45,101,100,101,51,45,99,102,98,56,0,115,116,114,101,101,116,0,115,116,114,101,101,116,65,100,100,114,101,115,115,0,112,111,115,116,97,108,67,111,100,101,0,105,100,45,112,112,108,0,112,114,111,120,121,67,101,114,116,73,110,102,111,0,80,114,111,120,121,32,67,101,114,116,105,102,105,99,97,116,101,32,73,110,102,111,114,109,97,116,105,111,110,0,105,100,45,112,112,108,45,97,110,121,76,97,110,103,117,97,103,101,0,65,110,121,32,108,97,110,103,117,97,103,101,0,105,100,45,112,112,108,45,105,110,104,101,114,105,116,65,108,108,0,73,110,104,101,114,105,116,32,97,108,108,0,110,97,109,101,67,111,110,115,116,114,97,105,110,116,115,0,88,53,48,57,118,51,32,78,97,109,101,32,67,111,110,115,116,114,97,105,110,116,115,0,105,100,45,112,112,108,45,105,110,100,101,112,101,110,100,101,110,116,0,73,110,100,101,112,101,110,100,101,110,116,0,82,83,65,45,83,72,65,50,53,54,0,115,104,97,50,53,54,87,105,116,104,82,83,65,69,110,99,114,121,112,116,105,111,110,0,82,83,65,45,83,72,65,51,56,52,0,115,104,97,51,56,52,87,105,116,104,82,83,65,69,110,99,114,121,112,116,105,111,110,0,82,83,65,45,83,72,65,53,49,50,0,115,104,97,53,49,50,87,105,116,104,82,83,65,69,110,99,114,121,112,116,105,111,110,0,82,83,65,45,83,72,65,50,50,52,0,115,104,97,50,50,52,87,105,116,104,82,83,65,69,110,99,114,121,112,116,105,111,110,0,83,72,65,50,53,54,0,115,104,97,50,53,54,0,83,72,65,51,56,52,0,115,104,97,51,56,52,0,83,72,65,53,49,50,0,115,104,97,53,49,50,0,83,72,65,50,50,52,0,115,104,97,50,50,52,0,105,100,101,110,116,105,102,105,101,100,45,111,114,103,97,110,105,122,97,116,105,111,110,0,99,101,114,116,105,99,111,109,45,97,114,99,0,119,97,112,0,119,97,112,45,119,115,103,0,105,100,45,99,104,97,114,97,99,116,101,114,105,115,116,105,99,45,116,119,111,45,98,97,115,105,115,0,111,110,66,97,115,105,115,0,116,112,66,97,115,105,115,0,112,112,66,97,115,105,115,0,99,50,112,110,98,49,54,51,118,49,0,99,50,112,110,98,49,54,51,118,50,0,99,50,112,110,98,49,54,51,118,51,0,99,50,112,110,98,49,55,54,118,49,0,99,50,116,110,98,49,57,49,118,49,0,99,50,116,110,98,49,57,49,118,50,0,99,50,116,110,98,49,57,49,118,51,0,99,50,111,110,98,49,57,49,118,52,0,99,50,111,110,98,49,57,49,118,53,0,99,50,112,110,98,50,48,56,119,49,0,99,50,116,110,98,50,51,57,118,49,0,99,50,116,110,98,50,51,57,118,50,0,99,50,116,110,98,50,51,57,118,51,0,99,50,111,110,98,50,51,57,118,52,0,99,50,111,110,98,50,51,57,118,53,0,99,50,112,110,98,50,55,50,119,49,0,99,50,112,110,98,51,48,52,119,49,0,99,50,116,110,98,51,53,57,118,49,0,99,50,112,110,98,51,54,56,119,49,0,99,50,116,110,98,52,51,49,114,49,0,115,101,99,112,49,49,50,114,49,0,115,101,99,112,49,49,50,114,50,0,115,101,99,112,49,50,56,114,49,0,115,101,99,112,49,50,56,114,50,0,115,101,99,112,49,54,48,107,49,0,115,101,99,112,49,54,48,114,49,0,115,101,99,112,49,54,48,114,50,0,115,101,99,112,49,57,50,107,49,0,115,101,99,112,50,50,52,107,49,0,115,101,99,112,50,50,52,114,49,0,115,101,99,112,50,53,54,107,49,0,115,101,99,112,51,56,52,114,49,0,115,101,99,112,53,50,49,114,49,0,115,101,99,116,49,49,51,114,49,0,115,101,99,116,49,49,51,114,50,0,115,101,99,116,49,51,49,114,49,0,115,101,99,116,49,51,49,114,50,0,115,101,99,116,49,54,51,107,49,0,115,101,99,116,49,54,51,114,49,0,115,101,99,116,49,54,51,114,50,0,115,101,99,116,49,57,51,114,49,0,115,101,99,116,49,57,51,114,50,0,115,101,99,116,50,51,51,107,49,0,115,101,99,116,50,51,51,114,49,0,115,101,99,116,50,51,57,107,49,0,115,101,99,116,50,56,51,107,49,0,115,101,99,116,50,56,51,114,49,0,115,101,99,116,52,48,57,107,49,0,115,101,99,116,52,48,57,114,49,0,115,101,99,116,53,55,49,107,49,0,115,101,99,116,53,55,49,114,49,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,49,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,51,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,52,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,53,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,54,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,55,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,56,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,57,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,49,48,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,49,49,0,119,97,112,45,119,115,103,45,105,100,109,45,101,99,105,100,45,119,116,108,115,49,50,0,97,110,121,80,111,108,105,99,121,0,88,53,48,57,118,51,32,65,110,121,32,80,111,108,105,99,121,0,112,111,108,105,99,121,77,97,112,112,105,110,103,115,0,88,53,48,57,118,51,32,80,111,108,105,99,121,32,77,97,112,112,105,110,103,115,0,105,110,104,105,98,105,116,65,110,121,80,111,108,105,99,121,0,88,53,48,57,118,51,32,73,110,104,105,98,105,116,32,65,110,121,32,80,111,108,105,99,121,0,79,97,107,108,101,121,45,69,67,50,78,45,51,0,105,112,115,101,99,51,0,79,97,107,108,101,121,45,69,67,50,78,45,52,0,105,112,115,101,99,52,0,67,65,77,69,76,76,73,65,45,49,50,56,45,67,66,67,0,99,97,109,101,108,108,105,97,45,49,50,56,45,99,98,99,0,67,65,77,69,76,76,73,65,45,49,57,50,45,67,66,67,0,99,97,109,101,108,108,105,97,45,49,57,50,45,99,98,99,0,67,65,77,69,76,76,73,65,45,50,53,54,45,67,66,67,0,99,97,109,101,108,108,105,97,45,50,53,54,45,99,98,99,0,67,65,77,69,76,76,73,65,45,49,50,56,45,69,67,66,0,99,97,109,101,108,108,105,97,45,49,50,56,45,101,99,98,0,67,65,77,69,76,76,73,65,45,49,57,50,45,69,67,66,0,99,97,109,101,108,108,105,97,45,49,57,50,45,101,99,98,0,67,65,77,69,76,76,73,65,45,50,53,54,45,69,67,66,0,99,97,109,101,108,108,105,97,45,50,53,54,45,101,99,98,0,67,65,77,69,76,76,73,65,45,49,50,56,45,67,70,66,0,99,97,109,101,108,108,105,97,45,49,50,56,45,99,102,98,0,67,65,77,69,76,76,73,65,45,49,57,50,45,67,70,66,0,99,97,109,101,108,108,105,97,45,49,57,50,45,99,102,98,0,67,65,77,69,76,76,73,65,45,50,53,54,45,67,70,66,0,99,97,109,101,108,108,105,97,45,50,53,54,45,99,102,98,0,67,65,77,69,76,76,73,65,45,49,50,56,45,67,70,66,49,0,99,97,109,101,108,108,105,97,45,49,50,56,45,99,102,98,49,0,67,65,77,69,76,76,73,65,45,49,57,50,45,67,70,66,49,0,99,97,109,101,108,108,105,97,45,49,57,50,45,99,102,98,49,0,67,65,77,69,76,76,73,65,45,50,53,54,45,67,70,66,49,0,99,97,109,101,108,108,105,97,45,50,53,54,45,99,102,98,49,0,67,65,77,69,76,76,73,65,45,49,50,56,45,67,70,66,56,0,99,97,109,101,108,108,105,97,45,49,50,56,45,99,102,98,56,0,67,65,77,69,76,76,73,65,45,49,57,50,45,67,70,66,56,0,99,97,109,101,108,108,105,97,45,49,57,50,45,99,102,98,56,0,67,65,77,69,76,76,73,65,45,50,53,54,45,67,70,66,56,0,99,97,109,101,108,108,105,97,45,50,53,54,45,99,102,98,56,0,67,65,77,69,76,76,73,65,45,49,50,56,45,79,70,66,0,99,97,109,101,108,108,105,97,45,49,50,56,45,111,102,98,0,67,65,77,69,76,76,73,65,45,49,57,50,45,79,70,66,0,99,97,109,101,108,108,105,97,45,49,57,50,45,111,102,98,0,67,65,77,69,76,76,73,65,45,50,53,54,45,79,70,66,0,99,97,109,101,108,108,105,97,45,50,53,54,45,111,102,98,0,115,117,98,106,101,99,116,68,105,114,101,99,116,111,114,121,65,116,116,114,105,98,117,116,101,115,0,88,53,48,57,118,51,32,83,117,98,106,101,99,116,32,68,105,114,101,99,116,111,114,121,32,65,116,116,114,105,98,117,116,101,115,0,105,115,115,117,105,110,103,68,105,115,116,114,105,98,117,116,105,111,110,80,111,105,110,116,0,88,53,48,57,118,51,32,73,115,115,117,105,110,103,32,68,105,115,116,114,105,98,117,116,105,111,110,32,80,111,105,110,116,0,99,101,114,116,105,102,105,99,97,116,101,73,115,115,117,101,114,0,88,53,48,57,118,51,32,67,101,114,116,105,102,105,99,97,116,101,32,73,115,115,117,101,114,0,75,73,83,65,0,107,105,115,97,0,83,69,69,68,45,69,67,66,0,115,101,101,100,45,101,99,98,0,83,69,69,68,45,67,66,67,0,115,101,101,100,45,99,98,99,0,83,69,69,68,45,79,70,66,0,115,101,101,100,45,111,102,98,0,83,69,69,68,45,67,70,66,0,115,101,101,100,45,99,102,98,0,72,77,65,67,45,77,68,53,0,104,109,97,99,45,109,100,53,0,72,77,65,67,45,83,72,65,49,0,104,109,97,99,45,115,104,97,49,0,105,100,45,80,97,115,115,119,111,114,100,66,97,115,101,100,77,65,67,0,112,97,115,115,119,111,114,100,32,98,97,115,101,100,32,77,65,67,0,105,100,45,68,72,66,97,115,101,100,77,97,99,0,68,105,102,102,105,101,45,72,101,108,108,109,97,110,32,98,97,115,101,100,32,77,65,67,0,105,100,45,105,116,45,115,117,112,112,76,97,110,103,84,97,103,115,0,99,97,82,101,112,111,115,105,116,111,114,121,0,67,65,32,82,101,112,111,115,105,116,111,114,121,0,105,100,45,115,109,105,109,101,45,99,116,45,99,111,109,112,114,101,115,115,101,100,68,97,116,97,0,105,100,45,99,116,45,97,115,99,105,105,84,101,120,116,87,105,116,104,67,82,76,70,0,105,100,45,97,101,115,49,50,56,45,119,114,97,112,0,105,100,45,97,101,115,49,57,50,45,119,114,97,112,0,105,100,45,97,101,115,50,53,54,45,119,114,97,112,0,101,99,100,115,97,45,119,105,116,104,45,82,101,99,111,109,109,101,110,100,101,100,0,101,99,100,115,97,45,119,105,116,104,45,83,112,101,99,105,102,105,101,100,0,101,99,100,115,97,45,119,105,116,104,45,83,72,65,50,50,52,0,101,99,100,115,97,45,119,105,116,104,45,83,72,65,50,53,54,0,101,99,100,115,97,45,119,105,116,104,45,83,72,65,51,56,52,0,101,99,100,115,97,45,119,105,116,104,45,83,72,65,53,49,50,0,104,109,97,99,87,105,116,104,77,68,53,0,104,109,97,99,87,105,116,104,83,72,65,50,50,52,0,104,109,97,99,87,105,116,104,83,72,65,50,53,54,0,104,109,97,99,87,105,116,104,83,72,65,51,56,52,0,104,109,97,99,87,105,116,104,83,72,65,53,49,50,0,100,115,97,95,119,105,116,104,95,83,72,65,50,50,52,0,100,115,97,95,119,105,116,104,95,83,72,65,50,53,54,0,119,104,105,114,108,112,111,111,108,0,99,114,121,112,116,111,112,114,111,0,99,114,121,112,116,111,99,111,109,0,105,100,45,71,111,115,116,82,51,52,49,49,45,57,52,45,119,105,116,104,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,0,71,79,83,84,32,82,32,51,52,46,49,49,45,57,52,32,119,105,116,104,32,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,48,49,0,105,100,45,71,111,115,116,82,51,52,49,49,45,57,52,45,119,105,116,104,45,71,111,115,116,82,51,52,49,48,45,57,52,0,71,79,83,84,32,82,32,51,52,46,49,49,45,57,52,32,119,105,116,104,32,71,79,83,84,32,82,32,51,52,46,49,48,45,57,52,0,109,100,95,103,111,115,116,57,52,0,71,79,83,84,32,82,32,51,52,46,49,49,45,57,52,0,105,100,45,72,77,65,67,71,111,115,116,82,51,52,49,49,45,57,52,0,72,77,65,67,32,71,79,83,84,32,51,52,46,49,49,45,57,52,0,103,111,115,116,50,48,48,49,0,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,48,49,0,103,111,115,116,57,52,0,71,79,83,84,32,82,32,51,52,46,49,48,45,57,52,0,103,111,115,116,56,57,0,71,79,83,84,32,50,56,49,52,55,45,56,57,0,103,111,115,116,56,57,45,99,110,116,0,103,111,115,116,45,109,97,99,0,71,79,83,84,32,50,56,49,52,55,45,56,57,32,77,65,67,0,112,114,102,45,103,111,115,116,114,51,52,49,49,45,57,52,0,71,79,83,84,32,82,32,51,52,46,49,49,45,57,52,32,80,82,70,0,105,100,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,68,72,0,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,48,49,32,68,72,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,68,72,0,71,79,83,84,32,82,32,51,52,46,49,48,45,57,52,32,68,72,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,67,114,121,112,116,111,80,114,111,45,75,101,121,77,101,115,104,105,110,103,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,78,111,110,101,45,75,101,121,77,101,115,104,105,110,103,0,105,100,45,71,111,115,116,82,51,52,49,49,45,57,52,45,84,101,115,116,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,49,45,57,52,45,67,114,121,112,116,111,80,114,111,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,84,101,115,116,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,67,114,121,112,116,111,80,114,111,45,65,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,67,114,121,112,116,111,80,114,111,45,66,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,67,114,121,112,116,111,80,114,111,45,67,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,67,114,121,112,116,111,80,114,111,45,68,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,67,114,121,112,116,111,80,114,111,45,79,115,99,97,114,45,49,45,49,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,67,114,121,112,116,111,80,114,111,45,79,115,99,97,114,45,49,45,48,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,67,114,121,112,116,111,80,114,111,45,82,73,67,45,49,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,84,101,115,116,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,67,114,121,112,116,111,80,114,111,45,65,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,67,114,121,112,116,111,80,114,111,45,66,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,67,114,121,112,116,111,80,114,111,45,67,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,67,114,121,112,116,111,80,114,111,45,68,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,67,114,121,112,116,111,80,114,111,45,88,99,104,65,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,67,114,121,112,116,111,80,114,111,45,88,99,104,66,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,67,114,121,112,116,111,80,114,111,45,88,99,104,67,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,45,84,101,115,116,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,45,67,114,121,112,116,111,80,114,111,45,65,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,45,67,114,121,112,116,111,80,114,111,45,66,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,45,67,114,121,112,116,111,80,114,111,45,67,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,45,67,114,121,112,116,111,80,114,111,45,88,99,104,65,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,45,67,114,121,112,116,111,80,114,111,45,88,99,104,66,45,80,97,114,97,109,83,101,116,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,97,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,97,66,105,115,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,98,0,105,100,45,71,111,115,116,82,51,52,49,48,45,57,52,45,98,66,105,115,0,105,100,45,71,111,115,116,50,56,49,52,55,45,56,57,45,99,99,0,71,79,83,84,32,50,56,49,52,55,45,56,57,32,67,114,121,112,116,111,99,111,109,32,80,97,114,97,109,83,101,116,0,103,111,115,116,57,52,99,99,0,71,79,83,84,32,51,52,46,49,48,45,57,52,32,67,114,121,112,116,111,99,111,109,0,103,111,115,116,50,48,48,49,99,99,0,71,79,83,84,32,51,52,46,49,48,45,50,48,48,49,32,67,114,121,112,116,111,99,111,109,0,105,100,45,71,111,115,116,82,51,52,49,49,45,57,52,45,119,105,116,104,45,71,111,115,116,82,51,52,49,48,45,57,52,45,99,99,0,71,79,83,84,32,82,32,51,52,46,49,49,45,57,52,32,119,105,116,104,32,71,79,83,84,32,82,32,51,52,46,49,48,45,57,52,32,67,114,121,112,116,111,99,111,109,0,105,100,45,71,111,115,116,82,51,52,49,49,45,57,52,45,119,105,116,104,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,45,99,99,0,71,79,83,84,32,82,32,51,52,46,49,49,45,57,52,32,119,105,116,104,32,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,48,49,32,67,114,121,112,116,111,99,111,109,0,105,100,45,71,111,115,116,82,51,52,49,48,45,50,48,48,49,45,80,97,114,97,109,83,101,116,45,99,99,0,71,79,83,84,32,82,32,51,52,49,48,45,50,48,48,49,32,80,97,114,97,109,101,116,101,114,32,83,101,116,32,67,114,121,112,116,111,99,111,109,0,72,77,65,67,0,104,109,97,99,0,76,111,99,97,108,75,101,121,83,101,116,0,77,105,99,114,111,115,111,102,116,32,76,111,99,97,108,32,75,101,121,32,115,101,116,0,102,114,101,115,104,101,115,116,67,82,76,0,88,53,48,57,118,51,32,70,114,101,115,104,101,115,116,32,67,82,76,0,105,100,45,111,110,45,112,101,114,109,97,110,101,110,116,73,100,101,110,116,105,102,105,101,114,0,80,101,114,109,97,110,101,110,116,32,73,100,101,110,116,105,102,105,101,114,0,115,101,97,114,99,104,71,117,105,100,101,0,98,117,115,105,110,101,115,115,67,97,116,101,103,111,114,121,0,112,111,115,116,97,108,65,100,100,114,101,115,115,0,112,111,115,116,79,102,102,105,99,101,66,111,120,0,112,104,121,115,105,99,97,108,68,101,108,105,118,101,114,121,79,102,102,105,99,101,78,97,109,101,0,116,101,108,101,112,104,111,110,101,78,117,109,98,101,114,0,116,101,108,101,120,78,117,109,98,101,114,0,116,101,108,101,116,101,120,84,101,114,109,105,110,97,108,73,100,101,110,116,105,102,105,101,114,0,102,97,99,115,105,109,105,108,101,84,101,108,101,112,104,111,110,101,78,117,109,98,101,114,0,120,49,50,49,65,100,100,114,101,115,115,0,105,110,116,101,114,110,97,116,105,111,110,97,108,105,83,68,78,78,117,109,98,101,114,0,114,101,103,105,115,116,101,114,101,100,65,100,100,114,101,115,115,0,100,101,115,116,105,110,97,116,105,111,110,73,110,100,105,99,97,116,111,114,0,112,114,101,102,101,114,114,101,100,68,101,108,105,118,101,114,121,77,101,116,104,111,100,0,112,114,101,115,101,110,116,97,116,105,111,110,65,100,100,114,101,115,115,0,115,117,112,112,111,114,116,101,100,65,112,112,108,105,99,97,116,105,111,110,67,111,110,116,101,120,116,0,109,101,109,98,101,114,0,111,119,110,101,114,0,114,111,108,101,79,99,99,117,112,97,110,116,0,115,101,101,65,108,115,111,0,117,115,101,114,80,97,115,115,119,111,114,100,0,117,115,101,114,67,101,114,116,105,102,105,99,97,116,101,0,99,65,67,101,114,116,105,102,105,99,97,116,101,0,97,117,116,104,111,114,105,116,121,82,101,118,111,99,97,116,105,111,110,76,105,115,116,0,99,101,114,116,105,102,105,99,97,116,101,82,101,118,111,99,97,116,105,111,110,76,105,115,116,0,99,114,111,115,115,67,101,114,116,105,102,105,99,97,116,101,80,97,105,114,0,101,110,104,97,110,99,101,100,83,101,97,114,99,104,71,117,105,100,101,0,112,114,111,116,111,99,111,108,73,110,102,111,114,109,97,116,105,111,110,0,100,105,115,116,105,110,103,117,105,115,104,101,100,78,97,109,101,0,117,110,105,113,117,101,77,101,109,98,101,114,0,104,111,117,115,101,73,100,101,110,116,105,102,105,101,114,0,115,117,112,112,111,114,116,101,100,65,108,103,111,114,105,116,104,109,115,0,100,101,108,116,97,82,101,118,111,99,97,116,105,111,110,76,105,115,116,0,100,109,100,78,97,109,101,0,105,100,45,97,108,103,45,80,87,82,73,45,75,69,75,0,67,77,65,67,0,99,109,97,99,0,105,100,45,97,101,115,49,50,56,45,71,67,77,0,97,101,115,45,49,50,56,45,103,99,109,0,105,100,45,97,101,115,49,50,56,45,67,67,77,0,97,101,115,45,49,50,56,45,99,99,109,0,105,100,45,97,101,115,49,50,56,45,119,114,97,112,45,112,97,100,0,105,100,45,97,101,115,49,57,50,45,71,67,77,0,97,101,115,45,49,57,50,45,103,99,109,0,105,100,45,97,101,115,49,57,50,45,67,67,77,0,97,101,115,45,49,57,50,45,99,99,109,0,105,100,45,97,101,115,49,57,50,45,119,114,97,112,45,112,97,100,0,105,100,45,97,101,115,50,53,54,45,71,67,77,0,97,101,115,45,50,53,54,45,103,99,109,0,105,100,45,97,101,115,50,53,54,45,67,67,77,0,97,101,115,45,50,53,54,45,99,99,109,0,105,100,45,97,101,115,50,53,54,45,119,114,97,112,45,112,97,100,0,65,69,83,45,49,50,56,45,67,84,82,0,97,101,115,45,49,50,56,45,99,116,114,0,65,69,83,45,49,57,50,45,67,84,82,0,97,101,115,45,49,57,50,45,99,116,114,0,65,69,83,45,50,53,54,45,67,84,82,0,97,101,115,45,50,53,54,45,99,116,114,0,105,100,45,99,97,109,101,108,108,105,97,49,50,56,45,119,114,97,112,0,105,100,45,99,97,109,101,108,108,105,97,49,57,50,45,119,114,97,112,0,105,100,45,99,97,109,101,108,108,105,97,50,53,54,45,119,114,97,112,0,97,110,121,69,120,116,101,110,100,101,100,75,101,121,85,115,97,103,101,0,65,110,121,32,69,120,116,101,110,100,101,100,32,75,101,121,32,85,115,97,103,101,0,77,71,70,49,0,109,103,102,49,0,82,83,65,83,83,65,45,80,83,83,0,114,115,97,115,115,97,80,115,115,0,65,69,83,45,49,50,56,45,88,84,83,0,97,101,115,45,49,50,56,45,120,116,115,0,65,69,83,45,50,53,54,45,88,84,83,0,97,101,115,45,50,53,54,45,120,116,115,0,82,67,52,45,72,77,65,67,45,77,68,53,0,114,99,52,45,104,109,97,99,45,109,100,53,0,65,69,83,45,49,50,56,45,67,66,67,45,72,77,65,67,45,83,72,65,49,0,97,101,115,45,49,50,56,45,99,98,99,45,104,109,97,99,45,115,104,97,49,0,65,69,83,45,49,57,50,45,67,66,67,45,72,77,65,67,45,83,72,65,49,0,97,101,115,45,49,57,50,45,99,98,99,45,104,109,97,99,45,115,104,97,49,0,65,69,83,45,50,53,54,45,67,66,67,45,72,77,65,67,45,83,72,65,49,0,97,101,115,45,50,53,54,45,99,98,99,45,104,109,97,99,45,115,104,97,49,0,82,83,65,69,83,45,79,65,69,80,0,114,115,97,101,115,79,97,101,112,0,100,104,112,117,98,108,105,99,110,117,109,98,101,114,0,88,57,46,52,50,32,68,72,0,98,114,97,105,110,112,111,111,108,80,49,54,48,114,49,0,98,114,97,105,110,112,111,111,108,80,49,54,48,116,49,0,98,114,97,105,110,112,111,111,108,80,49,57,50,114,49,0,98,114,97,105,110,112,111,111,108,80,49,57,50,116,49,0,98,114,97,105,110,112,111,111,108,80,50,50,52,114,49,0,98,114,97,105,110,112,111,111,108,80,50,50,52,116,49,0,98,114,97,105,110,112,111,111,108,80,50,53,54,114,49,0,98,114,97,105,110,112,111,111,108,80,50,53,54,116,49,0,98,114,97,105,110,112,111,111,108,80,51,50,48,114,49,0,98,114,97,105,110,112,111,111,108,80,51,50,48,116,49,0,98,114,97,105,110,112,111,111,108,80,51,56,52,114,49,0,98,114,97,105,110,112,111,111,108,80,51,56,52,116,49,0,98,114,97,105,110,112,111,111,108,80,53,49,50,114,49,0,98,114,97,105,110,112,111,111,108,80,53,49,50,116,49,0,80,83,80,69,67,73,70,73,69,68,0,112,83,112,101,99,105,102,105,101,100,0,100,104,83,105,110,103,108,101,80,97,115,115,45,115,116,100,68,72,45,115,104,97,49,107,100,102,45,115,99,104,101,109,101,0,100,104,83,105,110,103,108,101,80,97,115,115,45,115,116,100,68,72,45,115,104,97,50,50,52,107,100,102,45,115,99,104,101,109,101,0,100,104,83,105,110,103,108,101,80,97,115,115,45,115,116,100,68,72,45,115,104,97,50,53,54,107,100,102,45,115,99,104,101,109,101,0,100,104,83,105,110,103,108,101,80,97,115,115,45,115,116,100,68,72,45,115,104,97,51,56,52,107,100,102,45,115,99,104,101,109,101,0,100,104,83,105,110,103,108,101,80,97,115,115,45,115,116,100,68,72,45,115,104,97,53,49,50,107,100,102,45,115,99,104,101,109,101,0,100,104,83,105,110,103,108,101,80,97,115,115,45,99,111,102,97,99,116,111,114,68,72,45,115,104,97,49,107,100,102,45,115,99,104,101,109,101,0,100,104,83,105,110,103,108,101,80,97,115,115,45,99,111,102,97,99,116,111,114,68,72,45,115,104,97,50,50,52,107,100,102,45,115,99,104,101,109,101,0,100,104,83,105,110,103,108,101,80,97,115,115,45,99,111,102,97,99,116,111,114,68,72,45,115,104,97,50,53,54,107,100,102,45,115,99,104,101,109,101,0,100,104,83,105,110,103,108,101,80,97,115,115,45,99,111,102,97,99,116,111,114,68,72,45,115,104,97,51,56,52,107,100,102,45,115,99,104,101,109,101,0,100,104,83,105,110,103,108,101,80,97,115,115,45,99,111,102,97,99,116,111,114,68,72,45,115,104,97,53,49,50,107,100,102,45,115,99,104,101,109,101,0,100,104,45,115,116,100,45,107,100,102,0,100,104,45,99,111,102,97,99,116,111,114,45,107,100,102,0,65,69,83,45,49,50,56,45,67,66,67,45,72,77,65,67,45,83,72,65,50,53,54,0,97,101,115,45,49,50,56,45,99,98,99,45,104,109,97,99,45,115,104,97,50,53,54,0,65,69,83,45,49,57,50,45,67,66,67,45,72,77,65,67,45,83,72,65,50,53,54,0,97,101,115,45,49,57,50,45,99,98,99,45,104,109,97,99,45,115,104,97,50,53,54,0,65,69,83,45,50,53,54,45,67,66,67,45,72,77,65,67,45,83,72,65,50,53,54,0,97,101,115,45,50,53,54,45,99,98,99,45,104,109,97,99,45,115,104,97,50,53,54,0,99,116,95,112,114,101,99,101,114,116,95,115,99,116,115,0,67,84,32,80,114,101,99,101,114,116,105,102,105,99,97,116,101,32,83,67,84,115,0,99,116,95,112,114,101,99,101,114,116,95,112,111,105,115,111,110,0,67,84,32,80,114,101,99,101,114,116,105,102,105,99,97,116,101,32,80,111,105,115,111,110,0,99,116,95,112,114,101,99,101,114,116,95,115,105,103,110,101,114,0,67,84,32,80,114,101,99,101,114,116,105,102,105,99,97,116,101,32,83,105,103,110,101,114,0,99,116,95,99,101,114,116,95,115,99,116,115,0,67,84,32,67,101,114,116,105,102,105,99,97,116,101,32,83,67,84,115,0,106,117,114,105,115,100,105,99,116,105,111,110,76,0,106,117,114,105,115,100,105,99,116,105,111,110,76,111,99,97,108,105,116,121,78,97,109,101,0,106,117,114,105,115,100,105,99,116,105,111,110,83,84,0,106,117,114,105,115,100,105,99,116,105,111,110,83,116,97,116,101,79,114,80,114,111,118,105,110,99,101,78,97,109,101,0,106,117,114,105,115,100,105,99,116,105,111,110,67,0,106,117,114,105,115,100,105,99,116,105,111,110,67,111,117,110,116,114,121,78,97,109,101,0,65,69,83,45,49,50,56,45,79,67,66,0,97,101,115,45,49,50,56,45,111,99,98,0,65,69,83,45,49,57,50,45,79,67,66,0,97,101,115,45,49,57,50,45,111,99,98,0,65,69,83,45,50,53,54,45,79,67,66,0,97,101,115,45,50,53,54,45,111,99,98,0,67,65,77,69,76,76,73,65,45,49,50,56,45,71,67,77,0,99,97,109,101,108,108,105,97,45,49,50,56,45,103,99,109,0,67,65,77,69,76,76,73,65,45,49,50,56,45,67,67,77,0,99,97,109,101,108,108,105,97,45,49,50,56,45,99,99,109,0,67,65,77,69,76,76,73,65,45,49,50,56,45,67,84,82,0,99,97,109,101,108,108,105,97,45,49,50,56,45,99,116,114,0,67,65,77,69,76,76,73,65,45,49,50,56,45,67,77,65,67,0,99,97,109,101,108,108,105,97,45,49,50,56,45,99,109,97,99,0,67,65,77,69,76,76,73,65,45,49,57,50,45,71,67,77,0,99,97,109,101,108,108,105,97,45,49,57,50,45,103,99,109,0,67,65,77,69,76,76,73,65,45,49,57,50,45,67,67,77,0,99,97,109,101,108,108,105,97,45,49,57,50,45,99,99,109,0,67,65,77,69,76,76,73,65,45,49,57,50,45,67,84,82,0,99,97,109,101,108,108,105,97,45,49,57,50,45,99,116,114,0,67,65,77,69,76,76,73,65,45,49,57,50,45,67,77,65,67,0,99,97,109,101,108,108,105,97,45,49,57,50,45,99,109,97,99,0,67,65,77,69,76,76,73,65,45,50,53,54,45,71,67,77,0,99,97,109,101,108,108,105,97,45,50,53,54,45,103,99,109,0,67,65,77,69,76,76,73,65,45,50,53,54,45,67,67,77,0,99,97,109,101,108,108,105,97,45,50,53,54,45,99,99,109,0,67,65,77,69,76,76,73,65,45,50,53,54,45,67,84,82,0,99,97,109,101,108,108,105,97,45,50,53,54,45,99,116,114,0,67,65,77,69,76,76,73,65,45,50,53,54,45,67,77,65,67,0,99,97,109,101,108,108,105,97,45,50,53,54,45,99,109,97,99,0,105,100,45,115,99,114,121,112,116,0,105,100,45,116,99,50,54,0,103,111,115,116,56,57,45,99,110,116,45,49,50,0,103,111,115,116,45,109,97,99,45,49,50,0,105,100,45,116,99,50,54,45,97,108,103,111,114,105,116,104,109,115,0,105,100,45,116,99,50,54,45,115,105,103,110,0,103,111,115,116,50,48,49,50,95,50,53,54,0,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,49,50,32,119,105,116,104,32,50,53,54,32,98,105,116,32,109,111,100,117,108,117,115,0,103,111,115,116,50,48,49,50,95,53,49,50,0,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,49,50,32,119,105,116,104,32,53,49,50,32,98,105,116,32,109,111,100,117,108,117,115,0,105,100,45,116,99,50,54,45,100,105,103,101,115,116,0,109,100,95,103,111,115,116,49,50,95,50,53,54,0,71,79,83,84,32,82,32,51,52,46,49,49,45,50,48,49,50,32,119,105,116,104,32,50,53,54,32,98,105,116,32,104,97,115,104,0,109,100,95,103,111,115,116,49,50,95,53,49,50,0,71,79,83,84,32,82,32,51,52,46,49,49,45,50,48,49,50,32,119,105,116,104,32,53,49,50,32,98,105,116,32,104,97,115,104,0,105,100,45,116,99,50,54,45,115,105,103,110,119,105,116,104,100,105,103,101,115,116,0,105,100,45,116,99,50,54,45,115,105,103,110,119,105,116,104,100,105,103,101,115,116,45,103,111,115,116,51,52,49,48,45,50,48,49,50,45,50,53,54,0,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,49,50,32,119,105,116,104,32,71,79,83,84,32,82,32,51,52,46,49,49,45,50,48,49,50,32,40,50,53,54,32,98,105,116,41,0,105,100,45,116,99,50,54,45,115,105,103,110,119,105,116,104,100,105,103,101,115,116,45,103,111,115,116,51,52,49,48,45,50,48,49,50,45,53,49,50,0,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,49,50,32,119,105,116,104,32,71,79,83,84,32,82,32,51,52,46,49,49,45,50,48,49,50,32,40,53,49,50,32,98,105,116,41,0,105,100,45,116,99,50,54,45,109,97,99,0,105,100,45,116,99,50,54,45,104,109,97,99,45,103,111,115,116,45,51,52,49,49,45,50,48,49,50,45,50,53,54,0,72,77,65,67,32,71,79,83,84,32,51,52,46,49,49,45,50,48,49,50,32,50,53,54,32,98,105,116,0,105,100,45,116,99,50,54,45,104,109,97,99,45,103,111,115,116,45,51,52,49,49,45,50,48,49,50,45,53,49,50,0,72,77,65,67,32,71,79,83,84,32,51,52,46,49,49,45,50,48,49,50,32,53,49,50,32,98,105,116,0,105,100,45,116,99,50,54,45,99,105,112,104,101,114,0,105,100,45,116,99,50,54,45,97,103,114,101,101,109,101,110,116,0,105,100,45,116,99,50,54,45,97,103,114,101,101,109,101,110,116,45,103,111,115,116,45,51,52,49,48,45,50,48,49,50,45,50,53,54,0,105,100,45,116,99,50,54,45,97,103,114,101,101,109,101,110,116,45,103,111,115,116,45,51,52,49,48,45,50,48,49,50,45,53,49,50,0,105,100,45,116,99,50,54,45,99,111,110,115,116,97,110,116,115,0,105,100,45,116,99,50,54,45,115,105,103,110,45,99,111,110,115,116,97,110,116,115,0,105,100,45,116,99,50,54,45,103,111,115,116,45,51,52,49,48,45,50,48,49,50,45,53,49,50,45,99,111,110,115,116,97,110,116,115,0,105,100,45,116,99,50,54,45,103,111,115,116,45,51,52,49,48,45,50,48,49,50,45,53,49,50,45,112,97,114,97,109,83,101,116,84,101,115,116,0,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,49,50,32,40,53,49,50,32,98,105,116,41,32,116,101,115,116,105,110,103,32,112,97,114,97,109,101,116,101,114,32,115,101,116,0,105,100,45,116,99,50,54,45,103,111,115,116,45,51,52,49,48,45,50,48,49,50,45,53,49,50,45,112,97,114,97,109,83,101,116,65,0,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,49,50,32,40,53,49,50,32,98,105,116,41,32,80,97,114,97,109,83,101,116,32,65,0,105,100,45,116,99,50,54,45,103,111,115,116,45,51,52,49,48,45,50,48,49,50,45,53,49,50,45,112,97,114,97,109,83,101,116,66,0,71,79,83,84,32,82,32,51,52,46,49,48,45,50,48,49,50,32,40,53,49,50,32,98,105,116,41,32,80,97,114,97,109,83,101,116,32,66,0,105,100,45,116,99,50,54,45,100,105,103,101,115,116,45,99,111,110,115,116,97,110,116,115,0,105,100,45,116,99,50,54,45,99,105,112,104,101,114,45,99,111,110,115,116,97,110,116,115,0,105,100,45,116,99,50,54,45,103,111,115,116,45,50,56,49,52,55,45,99,111,110,115,116,97,110,116,115,0,105,100,45,116,99,50,54,45,103,111,115,116,45,50,56,49,52,55,45,112,97,114,97,109,45,90,0,71,79,83,84,32,50,56,49,52,55,45,56,57,32,84,67,50,54,32,112,97,114,97,109,101,116,101,114,32,115,101,116,0,73,78,78,0,79,71,82,78,0,83,78,73,76,83,0,115,117,98,106,101,99,116,83,105,103,110,84,111,111,108,0,83,105,103,110,105,110,103,32,84,111,111,108,32,111,102,32,83,117,98,106,101,99,116,0,105,115,115,117,101,114,83,105,103,110,84,111,111,108,0,83,105,103,110,105,110,103,32,84,111,111,108,32,111,102,32,73,115,115,117,101,114,0,103,111,115,116,56,57,45,99,98,99,0,103,111,115,116,56,57,45,101,99,98,0,103,111,115,116,56,57,45,99,116,114,0,103,114,97,115,115,104,111,112,112,101,114,45,101,99,98,0,103,114,97,115,115,104,111,112,112,101,114,45,99,116,114,0,103,114,97,115,115,104,111,112,112,101,114,45,111,102,98,0,103,114,97,115,115,104,111,112,112,101,114,45,99,98,99,0,103,114,97,115,115,104,111,112,112,101,114,45,99,102,98,0,103,114,97,115,115,104,111,112,112,101,114,45,109,97,99,0,67,104,97,67,104,97,50,48,45,80,111,108,121,49,51,48,53,0,99,104,97,99,104,97,50,48,45,112,111,108,121,49,51,48,53,0,67,104,97,67,104,97,50,48,0,99,104,97,99,104,97,50,48,0,116,108,115,102,101,97,116,117,114,101,0,84,76,83,32,70,101,97,116,117,114,101,0,84,76,83,49,45,80,82,70,0,116,108,115,49,45,112,114,102,0,105,112,115,101,99,73,75,69,0,105,112,115,101,99,32,73,110,116,101,114,110,101,116,32,75,101,121,32,69,120,99,104,97,110,103,101,0,99,97,112,119,97,112,65,67,0,67,116,114,108,47,112,114,111,118,105,115,105,111,110,32,87,65,80,32,65,99,99,101,115,115,0,99,97,112,119,97,112,87,84,80,0,67,116,114,108,47,80,114,111,118,105,115,105,111,110,32,87,65,80,32,84,101,114,109,105,110,97,116,105,111,110,0,115,101,99,117,114,101,83,104,101,108,108,67,108,105,101,110,116,0,83,83,72,32,67,108,105,101,110,116,0,115,101,99,117,114,101,83,104,101,108,108,83,101,114,118,101,114,0,83,83,72,32,83,101,114,118,101,114,0,115,101,110,100,82,111,117,116,101,114,0,83,101,110,100,32,82,111,117,116,101,114,0,115,101,110,100,80,114,111,120,105,101,100,82,111,117,116,101,114,0,83,101,110,100,32,80,114,111,120,105,101,100,32,82,111,117,116,101,114,0,115,101,110,100,79,119,110,101,114,0,83,101,110,100,32,79,119,110,101,114,0,115,101,110,100,80,114,111,120,105,101,100,79,119,110,101,114,0,83,101,110,100,32,80,114,111,120,105,101,100,32,79,119,110,101,114,0,105,100,45,112,107,105,110,105,116,0,112,107,73,110,105,116,67,108,105,101,110,116,65,117,116,104,0,80,75,73,78,73,84,32,67,108,105,101,110,116,32,65,117,116,104,0,112,107,73,110,105,116,75,68,67,0,83,105,103,110,105,110,103,32,75,68,67,32,82,101,115,112,111,110,115,101,0,88,50,53,53,49,57,0,88,52,52,56,0,72,75,68,70,0,104,107,100,102,0,75,120,82,83,65,0,107,120,45,114,115,97,0,75,120,69,67,68,72,69,0,107,120,45,101,99,100,104,101,0,75,120,68,72,69,0,107,120,45,100,104,101,0,75,120,69,67,68,72,69,45,80,83,75,0,107,120,45,101,99,100,104,101,45,112,115,107,0,75,120,68,72,69,45,80,83,75,0,107,120,45,100,104,101,45,112,115,107,0,75,120,82,83,65,95,80,83,75,0,107,120,45,114,115,97,45,112,115,107,0,75,120,80,83,75,0,107,120,45,112,115,107,0,75,120,83,82,80,0,107,120,45,115,114,112,0,75,120,71,79,83,84,0,107,120,45,103,111,115,116,0,65,117,116,104,82,83,65,0,97,117,116,104,45,114,115,97,0,65,117,116,104,69,67,68,83,65,0,97,117,116,104,45,101,99,100,115,97,0,65,117,116,104,80,83,75,0,97,117,116,104,45,112,115,107,0,65,117,116,104,68,83,83,0,97,117,116,104,45,100,115,115,0,65,117,116,104,71,79,83,84,48,49,0,97,117,116,104,45,103,111,115,116,48,49,0,65,117,116,104,71,79,83,84,49,50,0,97,117,116,104,45,103,111,115,116,49,50,0,65,117,116,104,83,82,80,0,97,117,116,104,45,115,114,112,0,65,117,116,104,78,85,76,76,0,97,117,116,104,45,110,117,108,108,0,66,76,65,75,69,50,98,53,49,50,0,98,108,97,107,101,50,98,53,49,50,0,66,76,65,75,69,50,115,50,53,54,0,98,108,97,107,101,50,115,50,53,54,0,105,100,45,115,109,105,109,101,45,99,116,45,99,111,110,116,101,110,116,67,111,108,108,101,99,116,105,111,110,0,105,100,45,115,109,105,109,101,45,99,116,45,97,117,116,104,69,110,118,101,108,111,112,101,100,68,97,116,97,0,105,100,45,99,116,45,120,109,108,0,46,37,108,117,0,79,112,101,110,83,83,76,32,82,83,65,32,109,101,116,104,111,100,0,32,40,73,78,86,65,76,73,68,32,80,83,83,32,80,65,82,65,77,69,84,69,82,83,41,10,0,72,97,115,104,32,65,108,103,111,114,105,116,104,109,58,32,0,115,104,97,49,32,40,100,101,102,97,117,108,116,41,0,77,97,115,107,32,65,108,103,111,114,105,116,104,109,58,32,0,32,119,105,116,104,32,0,73,78,86,65,76,73,68,0,109,103,102,49,32,119,105,116,104,32,115,104,97,49,32,40,100,101,102,97,117,108,116,41,0,83,97,108,116,32,76,101,110,103,116,104,58,32,48,120,0,49,52,32,40,100,101,102,97,117,108,116,41,0,84,114,97,105,108,101,114,32,70,105,101,108,100,58,32,48,120,0,66,67,32,40,100,101,102,97,117,108,116,41,0,80,114,105,118,97,116,101,45,75,101,121,58,32,40,37,100,32,98,105,116,41,10,0,80,117,98,108,105,99,45,75,101,121,58,32,40,37,100,32,98,105,116,41,10,0,109,111,100,117,108,117,115,58,0,77,111,100,117,108,117,115,58,0,112,117,98,108,105,99,69,120,112,111,110,101,110,116,58,0,69,120,112,111,110,101,110,116,58,0,112,114,105,118,97,116,101,69,120,112,111,110,101,110,116,58,0,112,114,105,109,101,49,58,0,112,114,105,109,101,50,58,0,101,120,112,111,110,101,110,116,49,58,0,101,120,112,111,110,101,110,116,50,58,0,99,111,101,102,102,105,99,105,101,110,116,58,0,82,83,65,0,118,101,114,115,105,111,110,0,101,0,100,0,112,0,113,0,100,109,112,49,0,100,109,113,49,0,105,113,109,112,0,82,83,65,95,80,83,83,95,80,65,82,65,77,83,0,104,97,115,104,65,108,103,111,114,105,116,104,109,0,109,97,115,107,71,101,110,65,108,103,111,114,105,116,104,109,0,115,97,108,116,76,101,110,103,116,104,0,116,114,97,105,108,101,114,70,105,101,108,100,0,79,112,101,110,83,83,76,32,80,75,67,83,35,49,32,82,83,65,32,40,102,114,111,109,32,69,114,105,99,32,89,111,117,110,103,41,0,114,115,97,95,112,97,100,100,105,110,103,95,109,111,100,101,0,112,107,99,115,49,0,115,115,108,118,50,51,0,110,111,110,101,0,111,101,97,112,0,111,97,101,112,0,120,57,51,49,0,112,115,115,0,114,115,97,95,112,115,115,95,115,97,108,116,108,101,110,0,114,115,97,95,107,101,121,103,101,110,95,98,105,116,115,0,114,115,97,95,107,101,121,103,101,110,95,112,117,98,101,120,112,0,114,115,97,95,109,103,102,49,95,109,100,0,114,115,97,95,111,97,101,112,95,109,100,0,114,115,97,95,111,97,101,112,95,108,97,98,101,108,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,42,40,117,110,115,105,103,110,101,100,32,105,110,116,32,42,41,108,111,99,107,32,61,61,32,49,0,10,0,58,0,37,48,50,120,37,115,0,47,117,115,114,47,108,111,99,97,108,47,115,115,108,0,88,53,48,57,95,65,84,84,82,73,66,85,84,69,0,111,98,106,101,99,116,0,115,101,116,0,88,53,48,57,95,80,85,66,75,69,89,0,97,108,103,111,114,0,112,117,98,108,105,99,95,107,101,121,0,70,65,76,83,69,0,84,82,85,69,0,116,114,117,101,0,89,0,121,0,89,69,83,0,121,101,115,0,102,97,108,115,101,0,78,0,110,0,78,79,0,110,111,0,115,101,99,116,105,111,110,58,0,44,110,97,109,101,58,0,44,118,97,108,117,101,58,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  var _emscripten_asm_const=true;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    } 
  Module["_sbrk"] = _sbrk;

  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }

   
  Module["_memmove"] = _memmove;

   
  Module["___uremdi3"] = ___uremdi3;

  var _emscripten_asm_const_int=true;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory



function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_vi(index,a1) {
    Runtime.functionPointers[index](a1);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_vii(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_viii(index,a1,a2,a3) {
    Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_v(index) {
    Runtime.functionPointers[index]();
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6,a7,a8);
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiiii(index,a1,a2,a3,a4) {
    return Runtime.functionPointers[index](a1,a2,a3,a4);
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    Runtime.functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiiiii(index,a1,a2,a3,a4,a5) {
    return Runtime.functionPointers[index](a1,a2,a3,a4,a5);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_vi": invoke_vi, "jsCall_vi": jsCall_vi, "invoke_vii": invoke_vii, "jsCall_vii": jsCall_vii, "invoke_iiiiiii": invoke_iiiiiii, "jsCall_iiiiiii": jsCall_iiiiiii, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_viii": invoke_viii, "jsCall_viii": jsCall_viii, "invoke_v": invoke_v, "jsCall_v": jsCall_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "jsCall_iiiiiiiii": jsCall_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "jsCall_iiiii": jsCall_iiiii, "invoke_viiiiii": invoke_viiiiii, "jsCall_viiiiii": jsCall_viiiiii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_iiiiii": invoke_iiiiii, "jsCall_iiiiii": jsCall_iiiiii, "___buildEnvironment": ___buildEnvironment, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_time": _time, "_abort": _abort, "___setErrNo": ___setErrNo, "_getenv": _getenv, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_atexit": _atexit, "_emscripten_asm_const_v": _emscripten_asm_const_v, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_vi=env.invoke_vi;
  var jsCall_vi=env.jsCall_vi;
  var invoke_vii=env.invoke_vii;
  var jsCall_vii=env.jsCall_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var jsCall_iiiiiii=env.jsCall_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_viii=env.invoke_viii;
  var jsCall_viii=env.jsCall_viii;
  var invoke_v=env.invoke_v;
  var jsCall_v=env.jsCall_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var jsCall_iiiiiiiii=env.jsCall_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var jsCall_iiiii=env.jsCall_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var jsCall_viiiiii=env.jsCall_viiiiii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var jsCall_iiiiii=env.jsCall_iiiiii;
  var ___buildEnvironment=env.___buildEnvironment;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _time=env._time;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var _getenv=env._getenv;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _atexit=env._atexit;
  var _emscripten_asm_const_v=env._emscripten_asm_const_v;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _randombytes_random() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _emscripten_asm_const_i(0)|0; //@line 78 "libsodium/src/libsodium/randombytes/randombytes.c"
 return ($0|0); //@line 78 "libsodium/src/libsodium/randombytes/randombytes.c"
}
function _randombytes_stir() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _emscripten_asm_const_v(1); //@line 93 "libsodium/src/libsodium/randombytes/randombytes.c"
 return; //@line 121 "libsodium/src/libsodium/randombytes/randombytes.c"
}
function _randombytes_buf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $0;
 $3 = $1;
 $6 = $2; //@line 155 "libsodium/src/libsodium/randombytes/randombytes.c"
 $4 = $6; //@line 155 "libsodium/src/libsodium/randombytes/randombytes.c"
 $5 = 0; //@line 158 "libsodium/src/libsodium/randombytes/randombytes.c"
 while(1) {
  $7 = $5; //@line 158 "libsodium/src/libsodium/randombytes/randombytes.c"
  $8 = $3; //@line 158 "libsodium/src/libsodium/randombytes/randombytes.c"
  $9 = ($7>>>0)<($8>>>0); //@line 158 "libsodium/src/libsodium/randombytes/randombytes.c"
  if (!($9)) {
   break;
  }
  $10 = (_randombytes_random()|0); //@line 159 "libsodium/src/libsodium/randombytes/randombytes.c"
  $11 = $10&255; //@line 159 "libsodium/src/libsodium/randombytes/randombytes.c"
  $12 = $4; //@line 159 "libsodium/src/libsodium/randombytes/randombytes.c"
  $13 = $5; //@line 159 "libsodium/src/libsodium/randombytes/randombytes.c"
  $14 = (($12) + ($13)|0); //@line 159 "libsodium/src/libsodium/randombytes/randombytes.c"
  HEAP8[$14>>0] = $11; //@line 159 "libsodium/src/libsodium/randombytes/randombytes.c"
  $15 = $5; //@line 158 "libsodium/src/libsodium/randombytes/randombytes.c"
  $16 = (($15) + 1)|0; //@line 158 "libsodium/src/libsodium/randombytes/randombytes.c"
  $5 = $16; //@line 158 "libsodium/src/libsodium/randombytes/randombytes.c"
 }
 STACKTOP = sp;return; //@line 162 "libsodium/src/libsodium/randombytes/randombytes.c"
}
function _i2c_ASN1_BIT_STRING($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0, $$048 = 0, $$049 = 0, $$050 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(0);
 do {
  if ($4) {
   $5 = ((($0)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 & 8;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $11 = $6 & 7;
    $$050 = $11;$$1 = $3;
    break;
   }
   $9 = ((($0)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $$049 = $3;
   while(1) {
    $12 = ($$049|0)>(0);
    $13 = (($$049) + -1)|0;
    $14 = (($10) + ($13)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = ($15<<24>>24)==(0);
    $or$cond = $12 & $16;
    if ($or$cond) {
     $$049 = $13;
    } else {
     break;
    }
   }
   $17 = $15&255;
   $18 = $17 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = $17 & 2;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $17 & 4;
     $23 = ($22|0)==(0);
     if ($23) {
      $24 = $17 & 8;
      $25 = ($24|0)==(0);
      if ($25) {
       $26 = $17 & 16;
       $27 = ($26|0)==(0);
       if ($27) {
        $28 = $17 & 32;
        $29 = ($28|0)==(0);
        if ($29) {
         $30 = $17 & 64;
         $31 = ($30|0)==(0);
         $32 = $17 & 128;
         $33 = ($32|0)==(0);
         $$ = $33 ? 0 : 7;
         $$$ = $31 ? $$ : 6;
         $$050 = $$$;$$1 = $$049;
        } else {
         $$050 = 5;$$1 = $$049;
        }
       } else {
        $$050 = 4;$$1 = $$049;
       }
      } else {
       $$050 = 3;$$1 = $$049;
      }
     } else {
      $$050 = 2;$$1 = $$049;
     }
    } else {
     $$050 = 1;$$1 = $$049;
    }
   } else {
    $$050 = 0;$$1 = $$049;
   }
  } else {
   $$050 = 0;$$1 = $3;
  }
 } while(0);
 $34 = (($$1) + 1)|0;
 $35 = ($1|0)==(0|0);
 if ($35) {
  $$0 = $34;
  return ($$0|0);
 }
 $36 = HEAP32[$1>>2]|0;
 $37 = $$050&255;
 $38 = ((($36)) + 1|0);
 HEAP8[$36>>0] = $37;
 $39 = ($$1|0)>(0);
 if ($39) {
  $40 = ((($0)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  _memcpy(($38|0),($41|0),($$1|0))|0;
  $42 = (($38) + ($$1)|0);
  $43 = 255 << $$050;
  $44 = ((($42)) + -1|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $46 & $43;
  $48 = $47&255;
  HEAP8[$44>>0] = $48;
  $$048 = $42;
 } else {
  $$048 = $38;
 }
 HEAP32[$1>>2] = $$048;
 $$0 = $34;
 return ($$0|0);
}
function _c2i_ASN1_BIT_STRING($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$045 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)<(1);
 do {
  if ($3) {
   $$0 = 152;$$1 = 0;
  } else {
   $4 = ($0|0)==(0|0);
   if ($4) {
    label = 4;
   } else {
    $5 = HEAP32[$0>>2]|0;
    $6 = ($5|0)==(0|0);
    if ($6) {
     label = 4;
    } else {
     $$047 = $5;
    }
   }
   if ((label|0) == 4) {
    $7 = (_ASN1_BIT_STRING_new()|0);
    $8 = ($7|0)==(0|0);
    if ($8) {
     $$048 = 0;
     return ($$048|0);
    } else {
     $$047 = $7;
    }
   }
   $9 = HEAP32[$1>>2]|0;
   $10 = ((($9)) + 1|0);
   $11 = HEAP8[$9>>0]|0;
   $12 = $11&255;
   $13 = ($11&255)>(7);
   if ($13) {
    $$0 = 220;$$1 = $$047;
   } else {
    $14 = ((($$047)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -16;
    $17 = $12 | $16;
    $18 = $17 | 8;
    HEAP32[$14>>2] = $18;
    $19 = (($2) + -1)|0;
    $20 = ($2|0)>(1);
    if ($20) {
     $21 = (_CRYPTO_malloc($19,83252,0)|0);
     $22 = ($21|0)==(0|0);
     if ($22) {
      $$0 = 65;$$1 = $$047;
      break;
     }
     _memcpy(($21|0),($10|0),($19|0))|0;
     $23 = 255 << $12;
     $24 = (($2) + -2)|0;
     $25 = (($21) + ($24)|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = $27 & $23;
     $29 = $28&255;
     HEAP8[$25>>0] = $29;
     $30 = (($10) + ($19)|0);
     $$045 = $21;$$046 = $30;
    } else {
     $$045 = 0;$$046 = $10;
    }
    HEAP32[$$047>>2] = $19;
    $31 = ((($$047)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    _CRYPTO_free($32,83252,0);
    HEAP32[$31>>2] = $$045;
    $33 = ((($$047)) + 4|0);
    HEAP32[$33>>2] = 3;
    if (!($4)) {
     HEAP32[$0>>2] = $$047;
    }
    HEAP32[$1>>2] = $$046;
    $$048 = $$047;
    return ($$048|0);
   }
  }
 } while(0);
 _ERR_put_error(13,189,$$0,0,0);
 $34 = ($0|0)==(0|0);
 if (!($34)) {
  $35 = HEAP32[$0>>2]|0;
  $36 = ($35|0)==($$1|0);
  if ($36) {
   $$048 = 0;
   return ($$048|0);
  }
 }
 _ASN1_BIT_STRING_free($$1);
 $$048 = 0;
 return ($$048|0);
}
function _i2c_ASN1_INTEGER($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$01116$i$i = 0, $$01215$i$i = 0, $$01314$i$i = 0, $$017$i$i = 0, $$04350$i = 0, $$044$i = 0, $$045$lcssa$i = 0, $$04549$i = 0, $$048$i = 0, $$1$i = 0, $$146$i = 0, $$146$shrunk$i = 0, $$2$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $or$cond$i = 0, $or$cond3$i = 0, $phitmp$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)!=(0|0);
 $6 = ($4|0)!=(0);
 $or$cond$i = $5 & $6;
 if ($or$cond$i) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 256;
  $10 = HEAP8[$3>>0]|0;
  $11 = ($9|0)==(0);
  $12 = ($10<<24>>24)<(0);
  $or$cond3$i = $11 & $12;
  if ($11) {
   $$0$i = 0;$$146$shrunk$i = $or$cond3$i;
  } else {
   $13 = ($10&255)>(128);
   if ($13) {
    $$0$i = -1;$$146$shrunk$i = 1;
   } else {
    $14 = ($10<<24>>24)==(-128);
    if ($14) {
     $15 = ($4>>>0)>(1);
     if ($15) {
      $$04350$i = 1;$$04549$i = 0;
      while(1) {
       $16 = (($3) + ($$04350$i)|0);
       $17 = HEAP8[$16>>0]|0;
       $18 = $17&255;
       $19 = $18 | $$04549$i;
       $20 = (($$04350$i) + 1)|0;
       $exitcond$i = ($20|0)==($4|0);
       if ($exitcond$i) {
        break;
       } else {
        $$04350$i = $20;$$04549$i = $19;
       }
      }
      $phitmp$i = ($19|0)!=(0);
      $$045$lcssa$i = $phitmp$i;
     } else {
      $$045$lcssa$i = 0;
     }
     $21 = $$045$lcssa$i << 31 >> 31;
     $$0$i = $21;$$146$shrunk$i = $$045$lcssa$i;
    } else {
     $$0$i = -1;$$146$shrunk$i = 0;
    }
   }
  }
  $$146$i = $$146$shrunk$i&1;
  $22 = (($$146$i) + ($4))|0;
  $$044$i = $22;$$048$i = $4;$$1$i = $$0$i;$$2$i = $$146$i;
 } else {
  $$044$i = 1;$$048$i = 0;$$1$i = 0;$$2$i = 0;
 }
 $23 = ($1|0)==(0|0);
 if ($23) {
  return ($$044$i|0);
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  return ($$044$i|0);
 }
 HEAP8[$24>>0] = $$1$i;
 $26 = ($$048$i|0)==(0);
 if (!($26)) {
  $27 = (($24) + ($$2$i)|0);
  $28 = (($3) + ($$048$i)|0);
  $29 = (($27) + ($$048$i)|0);
  $30 = $$1$i & 1;
  $31 = $30&255;
  $$01116$i$i = $29;$$01215$i$i = $$048$i;$$01314$i$i = $28;$$017$i$i = $31;
  while(1) {
   $32 = (($$01215$i$i) + -1)|0;
   $33 = ((($$01314$i$i)) + -1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 ^ $$1$i;
   $36 = $35&255;
   $37 = (($36) + ($$017$i$i))|0;
   $38 = $37&255;
   $39 = ((($$01116$i$i)) + -1|0);
   HEAP8[$39>>0] = $38;
   $40 = $37 >>> 8;
   $41 = ($32|0)==(0);
   if ($41) {
    break;
   } else {
    $$01116$i$i = $39;$$01215$i$i = $32;$$01314$i$i = $33;$$017$i$i = $40;
   }
  }
 }
 $42 = HEAP32[$1>>2]|0;
 $43 = (($42) + ($$044$i)|0);
 HEAP32[$1>>2] = $43;
 return ($$044$i|0);
}
function _c2i_ASN1_INTEGER($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$027 = 0, $$04045$i = 0, $$041$i29 = 0, $$046$i = 0, $$142$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($2|0)==(0);
 if ($5) {
  _ERR_put_error(13,226,222,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP8[$4>>0]|0;
 $7 = ($2|0)==(1);
 if ($7) {
  $$041$i29 = 1;
 } else {
  switch ($6<<24>>24) {
  case 0:  {
   label = 7;
   break;
  }
  case -1:  {
   $$04045$i = 0;$$046$i = 1;
   while(1) {
    $8 = (($4) + ($$046$i)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $11 = $10 | $$04045$i;
    $12 = (($$046$i) + 1)|0;
    $exitcond$i = ($12|0)==($2|0);
    if ($exitcond$i) {
     break;
    } else {
     $$04045$i = $11;$$046$i = $12;
    }
   }
   $phitmp$i = ($11|0)==(0);
   if ($phitmp$i) {
    $$142$i = 0;
   } else {
    label = 7;
   }
   break;
  }
  default: {
   $$142$i = 0;
  }
  }
  if ((label|0) == 7) {
   $13 = ((($4)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 ^ $6;
   $16 = ($15<<24>>24)>(-1);
   if ($16) {
    _ERR_put_error(13,226,221,0,0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$142$i = 1;
   }
  }
  $17 = (($2) - ($$142$i))|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$041$i29 = $17;
  }
 }
 $19 = ($0|0)==(0|0);
 if ($19) {
  label = 12;
 } else {
  $20 = HEAP32[$0>>2]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   label = 12;
  } else {
   $$027 = $20;
  }
 }
 do {
  if ((label|0) == 12) {
   $22 = (_ASN1_INTEGER_new()|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $24 = ((($22)) + 4|0);
    HEAP32[$24>>2] = 2;
    $$027 = $22;
    break;
   }
  }
 } while(0);
 $25 = (_ASN1_STRING_set($$027,0,$$041$i29)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  _ERR_put_error(13,194,65,0,0);
  if (!($19)) {
   $37 = HEAP32[$0>>2]|0;
   $38 = ($37|0)==($$027|0);
   if ($38) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  _ASN1_INTEGER_free($$027);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = ((($$027)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$1>>2]|0;
 (_c2i_ibuf($28,$3,$29,$2)|0);
 $30 = HEAP32[$3>>2]|0;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $32 = ((($$027)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 | 256;
  HEAP32[$32>>2] = $34;
 }
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + ($2)|0);
 HEAP32[$1>>2] = $36;
 if ($19) {
  $$0 = $$027;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = $$027;
 $$0 = $$027;
 STACKTOP = sp;return ($$0|0);
}
function _c2i_ibuf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$01116$i = 0, $$01215$i = 0, $$01314$i = 0, $$017$i = 0, $$04045 = 0, $$041 = 0, $$046 = 0, $$142 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $phitmp = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  _ERR_put_error(13,226,222,0,0);
  $$041 = 0;
  return ($$041|0);
 }
 $5 = HEAP8[$2>>0]|0;
 $6 = $5 & -128;
 $7 = ($1|0)==(0|0);
 if (!($7)) {
  $8 = $6&255;
  HEAP32[$1>>2] = $8;
 }
 $9 = ($3|0)==(1);
 if ($9) {
  $10 = ($0|0)==(0|0);
  if ($10) {
   $$041 = 1;
   return ($$041|0);
  }
  $11 = ($6<<24>>24)==(0);
  $12 = HEAP8[$2>>0]|0;
  $13 = $12 ^ -1;
  $14 = $13&255;
  $15 = (($14) + 1)|0;
  $16 = $15&255;
  $$sink = $11 ? $12 : $16;
  HEAP8[$0>>0] = $$sink;
  $$041 = 1;
  return ($$041|0);
 }
 $17 = HEAP8[$2>>0]|0;
 switch ($17<<24>>24) {
 case 0:  {
  label = 11;
  break;
 }
 case -1:  {
  $$04045 = 0;$$046 = 1;
  while(1) {
   $18 = (($2) + ($$046)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = $20 | $$04045;
   $22 = (($$046) + 1)|0;
   $exitcond = ($22|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $$04045 = $21;$$046 = $22;
   }
  }
  $phitmp = ($21|0)==(0);
  if ($phitmp) {
   $$142 = 0;
  } else {
   label = 11;
  }
  break;
 }
 default: {
  $$142 = 0;
 }
 }
 if ((label|0) == 11) {
  $23 = ((($2)) + 1|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 & -128;
  $26 = ($6<<24>>24)==($25<<24>>24);
  if ($26) {
   _ERR_put_error(13,226,221,0,0);
   $$041 = 0;
   return ($$041|0);
  } else {
   $$142 = 1;
  }
 }
 $27 = (($3) - ($$142))|0;
 $28 = ($0|0)==(0|0);
 if ($28) {
  $$041 = $27;
  return ($$041|0);
 }
 $sext = ($5<<24>>24) >> 7;
 $29 = ($27|0)==(0);
 if ($29) {
  $$041 = 0;
  return ($$041|0);
 }
 $30 = (($2) + ($$142)|0);
 $31 = (($30) + ($27)|0);
 $32 = (($0) + ($27)|0);
 $33 = $sext & 1;
 $34 = $33&255;
 $$01116$i = $32;$$01215$i = $27;$$01314$i = $31;$$017$i = $34;
 while(1) {
  $35 = (($$01215$i) + -1)|0;
  $36 = ((($$01314$i)) + -1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 ^ $sext;
  $39 = $38&255;
  $40 = (($39) + ($$017$i))|0;
  $41 = $40&255;
  $42 = ((($$01116$i)) + -1|0);
  HEAP8[$42>>0] = $41;
  $43 = $40 >>> 8;
  $44 = ($35|0)==(0);
  if ($44) {
   $$041 = $27;
   break;
  } else {
   $$01116$i = $42;$$01215$i = $35;$$01314$i = $36;$$017$i = $43;
  }
 }
 return ($$041|0);
}
function _asn1_string_get_int64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01315$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  _ERR_put_error(13,227,67,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -257;
 $7 = ($6|0)==($2|0);
 if (!($7)) {
  _ERR_put_error(13,227,225,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = $5 & 256;
 $12 = ($10>>>0)>(8);
 if ($12) {
  _ERR_put_error(13,225,223,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ($9|0)==(0|0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ($10|0)==(0);
 if ($14) {
  $25 = 0;$27 = 0;
 } else {
  $$01315$i$i = 0;$15 = 0;$16 = 0;
  while(1) {
   $17 = (_bitshift64Shl(($15|0),($16|0),8)|0);
   $18 = tempRet0;
   $19 = (($9) + ($$01315$i$i)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $21 | $17;
   $23 = (($$01315$i$i) + 1)|0;
   $exitcond$i$i = ($23|0)==($10|0);
   if ($exitcond$i$i) {
    $25 = $18;$27 = $22;
    break;
   } else {
    $$01315$i$i = $23;$15 = $22;$16 = $18;
   }
  }
 }
 $24 = ($11|0)==(0);
 $26 = ($25|0)>(-1);
 $28 = ($27>>>0)>(4294967295);
 $29 = ($25|0)==(-1);
 $30 = $29 & $28;
 $31 = $26 | $30;
 do {
  if ($24) {
   if ($31) {
    $39 = $27;$42 = $25;
   } else {
    _ERR_put_error(13,224,223,0,0);
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   if ($31) {
    $32 = (_i64Subtract(0,0,($27|0),($25|0))|0);
    $33 = tempRet0;
    $39 = $32;$42 = $33;
    break;
   }
   $34 = ($27|0)==(0);
   $35 = ($25|0)==(-2147483648);
   $36 = $34 & $35;
   if ($36) {
    $39 = 0;$42 = -2147483648;
   } else {
    _ERR_put_error(13,224,224,0,0);
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 $37 = $0;
 $38 = $37;
 HEAP32[$38>>2] = $39;
 $40 = (($37) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $42;
 $$0 = 1;
 return ($$0|0);
}
function _ASN1_INTEGER_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i10$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($1|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 2;
 $6 = ($1|0)<(0);
 if ($6) {
  $7 = (_i64Subtract(0,0,($1|0),($4|0))|0);
  $8 = tempRet0;
  $$0$i$i$i = 8;$10 = $7;$13 = $8;
  while(1) {
   $9 = $10&255;
   $11 = (($$0$i$i$i) + -1)|0;
   $12 = (($2) + ($11)|0);
   HEAP8[$12>>0] = $9;
   $14 = (_bitshift64Lshr(($10|0),($13|0),8)|0);
   $15 = tempRet0;
   $16 = ($14|0)==(0);
   $17 = ($15|0)==(0);
   $18 = $16 & $17;
   if ($18) {
    $$0$i$i = $11;$storemerge$i$i = 258;
    break;
   } else {
    $$0$i$i$i = $11;$10 = $14;$13 = $15;
   }
  }
 } else {
  $$0$i10$i$i = 8;$20 = $1;$23 = $4;
  while(1) {
   $19 = $20&255;
   $21 = (($$0$i10$i$i) + -1)|0;
   $22 = (($2) + ($21)|0);
   HEAP8[$22>>0] = $19;
   $24 = (_bitshift64Lshr(($20|0),($23|0),8)|0);
   $25 = tempRet0;
   $26 = ($24|0)==(0);
   $27 = ($25|0)==(0);
   $28 = $26 & $27;
   if ($28) {
    $$0$i$i = $21;$storemerge$i$i = 2;
    break;
   } else {
    $$0$i10$i$i = $21;$20 = $24;$23 = $25;
   }
  }
 }
 HEAP32[$5>>2] = $storemerge$i$i;
 $29 = (($2) + ($$0$i$i)|0);
 $30 = (8 - ($$0$i$i))|0;
 $31 = (_ASN1_STRING_set($0,$29,$30)|0);
 STACKTOP = sp;return ($31|0);
}
function _ASN1_INTEGER_get($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_asn1_string_get_int64($1,$0,2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $1;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_i64Add(($7|0),($10|0),-2147483648,0)|0);
 $12 = tempRet0;
 $13 = ($12>>>0)>(0);
 $14 = ($11>>>0)>(4294967295);
 $15 = ($12|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $$ = $17 ? -1 : $7;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _a2d_ASN1_OBJECT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0121$lcssa321 = 0, $$0121230 = 0, $$0123$ph381 = 0, $$0123$ph421 = 0, $$0126229 = 0, $$0129228 = 0, $$0133226 = 0, $$0138$lcssa = 0, $$0138$us = 0, $$0140225 = 0, $$0143$be = 0, $$0143$lcssa320 = 0, $$0143224 = 0, $$0145 = 0, $$0149218 = 0, $$1122$lcssa = 0, $$1122$lcssa181 = 0, $$1122$us = 0, $$1127$ph420 = 0;
 var $$1127$us = 0, $$1130$ph = 0, $$1134$ph = 0, $$1139157$us = 0, $$1141$ph419 = 0, $$1141$us = 0, $$1144$lcssa = 0, $$1144219 = 0, $$1144219$phi = 0, $$1146223 = 0, $$2125 = 0, $$2128 = 0, $$2142 = 0, $$2147$ph418 = 0, $$2147$us = 0, $$2155$us = 0, $$3132 = 0, $$3136 = 0, $$3148 = 0, $$3152 = 0;
 var $$3158$us = 0, $$4 = 0, $$4137 = 0, $$4137322 = 0, $$4153 = 0, $$4166 = 0, $$4323 = 0, $$in = 0, $$in238 = 0, $$lcssa194 = 0, $$off = 0, $$off154 = 0, $$off154$us = 0, $$off237 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $or$cond11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 switch ($3|0) {
 case -1:  {
  $5 = (_strlen($2)|0);
  $$0145 = $5;
  break;
 }
 case 0:  {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0145 = $3;
 }
 }
 $6 = ((($2)) + 1|0);
 $7 = HEAP8[$2>>0]|0;
 $$off = (($7) + -48)<<24>>24;
 $8 = ($$off&255)<(3);
 L5: do {
  if ($8) {
   $9 = $7 << 24 >> 24;
   $10 = (($9) + -48)|0;
   $11 = ($$0145|0)<(2);
   if ($11) {
    _ERR_put_error(13,100,138,0,0);
    $$4166 = 0;
    break;
   }
   $12 = (($$0145) + -2)|0;
   $13 = ($12|0)<(1);
   do {
    if ($13) {
     $$0121$lcssa321 = 0;$$0143$lcssa320 = 0;
    } else {
     $14 = HEAP8[$6>>0]|0;
     $15 = $14 << 24 >> 24;
     $16 = ((($2)) + 2|0);
     $17 = ($10|0)<(2);
     $18 = ($10*40)|0;
     $19 = ($0|0)==(0|0);
     $$0121230 = 0;$$0126229 = $16;$$0129228 = 24;$$0133226 = $4;$$0140225 = $15;$$0143224 = 0;$$1146223 = $12;
     L12: while(1) {
      switch ($$0140225|0) {
      case 32: case 46:  {
       $$0123$ph421 = 0;$$1127$ph420 = $$0126229;$$1141$ph419 = $$0140225;$$2147$ph418 = $$1146223;
       break;
      }
      default: {
       label = 10;
       break L12;
      }
      }
      L14: while(1) {
       $29 = ($$2147$ph418|0)<(1);
       if ($29) {
        $$0123$ph381 = $$0123$ph421;$$0138$lcssa = 0;$$1122$lcssa = $$0121230;$$2128 = $$1127$ph420;$$2142 = $$1141$ph419;$$3148 = $$2147$ph418;
        break;
       }
       $20 = (($$2147$ph418) + -1)|0;
       $21 = ((($$1127$ph420)) + 1|0);
       $22 = HEAP8[$$1127$ph420>>0]|0;
       $23 = $22 << 24 >> 24;
       switch ($22<<24>>24) {
       case 32: case 46:  {
        $$0123$ph381 = $$0123$ph421;$$0138$lcssa = 0;$$1122$lcssa = $$0121230;$$2128 = $21;$$2142 = $23;$$3148 = $20;
        break L14;
        break;
       }
       default: {
       }
       }
       $$off154 = (($22) + -48)<<24>>24;
       $24 = ($$off154&255)>(9);
       if ($24) {
        $$1122$lcssa181 = $$0121230;
        label = 13;
        break L12;
       }
       $25 = ($$0123$ph421*10)|0;
       $26 = (($25) + -48)|0;
       $27 = (($26) + ($23))|0;
       $28 = ($27>>>0)>(429496720);
       if ($28) {
        $$0138$us = 0;$$1122$us = $$0121230;$$1127$us = $21;$$1141$us = $23;$$2147$us = $20;
        label = 16;
        break;
       } else {
        $$0123$ph421 = $27;$$1127$ph420 = $21;$$1141$ph419 = $23;$$2147$ph418 = $20;
       }
      }
      L19: do {
       if ((label|0) == 16) {
        while(1) {
         label = 0;
         $30 = ($$2147$us|0)<(1);
         if ($30) {
          $$0123$ph381 = $27;$$0138$lcssa = $$0138$us;$$1122$lcssa = $$1122$us;$$2128 = $$1127$us;$$2142 = $$1141$us;$$3148 = $$2147$us;
          break L19;
         }
         $31 = (($$2147$us) + -1)|0;
         $32 = ((($$1127$us)) + 1|0);
         $33 = HEAP8[$$1127$us>>0]|0;
         $34 = $33 << 24 >> 24;
         switch ($33<<24>>24) {
         case 32: case 46:  {
          $$0123$ph381 = $27;$$0138$lcssa = $$0138$us;$$1122$lcssa = $$1122$us;$$2128 = $32;$$2142 = $34;$$3148 = $31;
          break L19;
          break;
         }
         default: {
         }
         }
         $$off154$us = (($33) + -48)<<24>>24;
         $35 = ($$off154$us&255)>(9);
         if ($35) {
          $$1122$lcssa181 = $$1122$us;
          label = 13;
          break L12;
         }
         $36 = ($$0138$us|0)==(0);
         if ($36) {
          $37 = ($$1122$us|0)==(0|0);
          if ($37) {
           $38 = (_BN_new()|0);
           $39 = ($38|0)==(0|0);
           if ($39) {
            $$4 = 0;$$4137 = $$0133226;
            label = 52;
            break L12;
           } else {
            $$2155$us = $38;
           }
          } else {
           $$2155$us = $$1122$us;
          }
          $40 = (_BN_set_word($$2155$us,$27)|0);
          $41 = ($40|0)==(0);
          if ($41) {
           $$4 = $$2155$us;$$4137 = $$0133226;
           label = 52;
           break L12;
          } else {
           $$1139157$us = 1;$$3158$us = $$2155$us;
          }
         } else {
          $$1139157$us = $$0138$us;$$3158$us = $$1122$us;
         }
         $42 = (_BN_mul_word($$3158$us,10)|0);
         $43 = ($42|0)==(0);
         if ($43) {
          $$4 = $$3158$us;$$4137 = $$0133226;
          label = 52;
          break L12;
         }
         $44 = (($34) + -48)|0;
         $45 = (_BN_add_word($$3158$us,$44)|0);
         $46 = ($45|0)==(0);
         if ($46) {
          $$4 = $$3158$us;$$4137 = $$0133226;
          label = 52;
          break L12;
         } else {
          $$0138$us = $$1139157$us;$$1122$us = $$3158$us;$$1127$us = $32;$$1141$us = $34;$$2147$us = $31;
          label = 16;
         }
        }
       }
      } while(0);
      $47 = ($$0143224|0)==(0);
      do {
       if ($47) {
        $48 = ($$0123$ph381>>>0)>(39);
        $or$cond11 = $17 & $48;
        if ($or$cond11) {
         label = 27;
         break L12;
        }
        $49 = ($$0138$lcssa|0)==(0);
        if ($49) {
         $52 = (($$0123$ph381) + ($18))|0;
         $$2125 = $52;$$3152 = 0;
         label = 39;
         break;
        } else {
         $50 = (_BN_add_word($$1122$lcssa,$18)|0);
         $51 = ($50|0)==(0);
         if ($51) {
          $$4 = $$1122$lcssa;$$4137 = $$0133226;
          label = 52;
          break L12;
         } else {
          label = 32;
          break;
         }
        }
       } else {
        $53 = ($$0138$lcssa|0)==(0);
        if ($53) {
         $$2125 = $$0123$ph381;$$3152 = 0;
         label = 39;
        } else {
         label = 32;
        }
       }
      } while(0);
      if ((label|0) == 32) {
       label = 0;
       $54 = (_BN_num_bits($$1122$lcssa)|0);
       $55 = (($54) + 6)|0;
       $56 = (($55|0) / 7)&-1;
       $57 = ($56|0)>($$0129228|0);
       if ($57) {
        $58 = ($$0133226|0)==($4|0);
        if (!($58)) {
         _CRYPTO_free($$0133226,83252,0);
        }
        $59 = (($56) + 32)|0;
        $60 = (_CRYPTO_malloc($59,83252,0)|0);
        $61 = ($60|0)==(0|0);
        if ($61) {
         $$4137322 = 0;$$4323 = $$1122$lcssa;
         break;
        } else {
         $$1130$ph = $59;$$1134$ph = $60;
        }
       } else {
        $$1130$ph = $$0129228;$$1134$ph = $$0133226;
       }
       $$off237 = (($54) + 12)|0;
       $62 = ($$off237>>>0)<(13);
       if ($62) {
        $$3132 = $$1130$ph;$$3136 = $$1134$ph;$$4153 = 0;
       } else {
        $$0149218 = 0;$$in = $56;
        while(1) {
         $63 = (($$in) + -1)|0;
         $64 = (_BN_div_word($$1122$lcssa,128)|0);
         $65 = ($64|0)==(-1);
         if ($65) {
          $$4 = $$1122$lcssa;$$4137 = $$1134$ph;
          label = 52;
          break L12;
         }
         $66 = (($$1134$ph) + ($$0149218)|0);
         $67 = (($$0149218) + 1)|0;
         $68 = $64&255;
         HEAP8[$66>>0] = $68;
         $69 = ($63|0)==(0);
         if ($69) {
          $$3132 = $$1130$ph;$$3136 = $$1134$ph;$$4153 = $67;
          break;
         } else {
          $$0149218 = $67;$$in = $63;
         }
        }
       }
      }
      else if ((label|0) == 39) {
       while(1) {
        label = 0;
        $70 = $$2125 & 127;
        $71 = $70&255;
        $72 = (($$3152) + 1)|0;
        $73 = (($$0133226) + ($$3152)|0);
        HEAP8[$73>>0] = $71;
        $74 = $$2125 >>> 7;
        $75 = ($74|0)==(0);
        if ($75) {
         $$3132 = $$0129228;$$3136 = $$0133226;$$4153 = $72;
         break;
        } else {
         $$2125 = $74;$$3152 = $72;
         label = 39;
        }
       }
      }
      $76 = (($$4153) + ($$0143224))|0;
      if ($19) {
       $$0143$be = $76;
      } else {
       $77 = ($76|0)>($1|0);
       if ($77) {
        label = 44;
        break;
       }
       $78 = ($$4153|0)>(1);
       $79 = (($$0143224) + 1)|0;
       if ($78) {
        $80 = (($$4153) + -1)|0;
        $$1144219 = $$0143224;$$in238 = $$4153;$88 = $79;
        while(1) {
         $81 = (($$in238) + -1)|0;
         $82 = (($$3136) + ($81)|0);
         $83 = HEAP8[$82>>0]|0;
         $84 = $83 | -128;
         $85 = (($0) + ($$1144219)|0);
         HEAP8[$85>>0] = $84;
         $86 = ($81|0)>(1);
         $87 = (($88) + 1)|0;
         if ($86) {
          $$1144219$phi = $88;$$in238 = $81;$88 = $87;$$1144219 = $$1144219$phi;
         } else {
          break;
         }
        }
        $89 = (($80) + ($$0143224))|0;
        $$1144$lcssa = $89;$$lcssa194 = $76;
       } else {
        $$1144$lcssa = $$0143224;$$lcssa194 = $79;
       }
       $90 = HEAP8[$$3136>>0]|0;
       $91 = (($0) + ($$1144$lcssa)|0);
       HEAP8[$91>>0] = $90;
       $$0143$be = $$lcssa194;
      }
      $92 = ($$3148|0)<(1);
      if ($92) {
       label = 49;
       break;
      } else {
       $$0121230 = $$1122$lcssa;$$0126229 = $$2128;$$0129228 = $$3132;$$0133226 = $$3136;$$0140225 = $$2142;$$0143224 = $$0143$be;$$1146223 = $$3148;
      }
     }
     if ((label|0) == 10) {
      _ERR_put_error(13,100,131,0,0);
      $$4 = $$0121230;$$4137 = $$0133226;
      label = 52;
     }
     else if ((label|0) == 13) {
      _ERR_put_error(13,100,130,0,0);
      $$4 = $$1122$lcssa181;$$4137 = $$0133226;
      label = 52;
     }
     else if ((label|0) == 27) {
      _ERR_put_error(13,100,147,0,0);
      $$4 = $$1122$lcssa;$$4137 = $$0133226;
      label = 52;
     }
     else if ((label|0) == 44) {
      _ERR_put_error(13,100,107,0,0);
      $$4 = $$1122$lcssa;$$4137 = $$3136;
      label = 52;
     }
     else if ((label|0) == 49) {
      $93 = ($$3136|0)==($4|0);
      if ($93) {
       $$0121$lcssa321 = $$1122$lcssa;$$0143$lcssa320 = $$0143$be;
       break;
      }
      _CRYPTO_free($$3136,83252,0);
      $$0121$lcssa321 = $$1122$lcssa;$$0143$lcssa320 = $$0143$be;
      break;
     }
     if ((label|0) == 52) {
      $94 = ($$4137|0)==($4|0);
      if ($94) {
       $$4166 = $$4;
       break L5;
      } else {
       $$4137322 = $$4137;$$4323 = $$4;
      }
     }
     _CRYPTO_free($$4137322,83252,0);
     $$4166 = $$4323;
     break L5;
    }
   } while(0);
   _BN_free($$0121$lcssa321);
   $$0 = $$0143$lcssa320;
   STACKTOP = sp;return ($$0|0);
  } else {
   _ERR_put_error(13,100,122,0,0);
   $$4166 = 0;
  }
 } while(0);
 _BN_free($$4166);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _i2a_ASN1_OBJECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $2 = sp;
 $3 = ($1|0)==(0|0);
 do {
  if ($3) {
   label = 3;
  } else {
   $4 = ((($1)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    label = 3;
   } else {
    $8 = (_OBJ_obj2txt($2,80,$1,0)|0);
    $9 = ($8|0)>(79);
    if ($9) {
     $10 = (($8) + 1)|0;
     $11 = (_CRYPTO_malloc($10,83252,0)|0);
     $12 = ($11|0)==(0|0);
     if ($12) {
      $$025 = -1;
      break;
     }
     (_OBJ_obj2txt($11,$10,$1,0)|0);
     (_BIO_write($0,$11,$8)|0);
     $20 = ($11|0)==($2|0);
     if ($20) {
      $$025 = $8;
      break;
     }
     _CRYPTO_free($11,83252,0);
     $$025 = $8;
     break;
    } else {
     $13 = ($8|0)<(1);
     if ($13) {
      $14 = (_BIO_write($0,46887,9)|0);
      $15 = HEAP32[$4>>2]|0;
      $16 = ((($1)) + 12|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (_BIO_dump($0,$15,$17)|0);
      $19 = (($18) + ($14))|0;
      $$025 = $19;
      break;
     } else {
      (_BIO_write($0,$2,$8)|0);
      $$025 = $8;
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $7 = (_BIO_write($0,64967,4)|0);
  $$025 = $7;
 }
 STACKTOP = sp;return ($$025|0);
}
function _d2i_ASN1_OBJECT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$3>>2] = $7;
 $8 = (_ASN1_get_object($3,$4,$5,$6,$2)|0);
 $9 = $8 & 128;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = HEAP32[$5>>2]|0;
  $12 = ($11|0)==(6);
  if ($12) {
   $13 = HEAP32[$4>>2]|0;
   $14 = (_c2i_ASN1_OBJECT($0,$3,$13)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$013 = 0;
    STACKTOP = sp;return ($$013|0);
   }
   $16 = HEAP32[$3>>2]|0;
   HEAP32[$1>>2] = $16;
   $$013 = $14;
   STACKTOP = sp;return ($$013|0);
  } else {
   $$0 = 116;
  }
 } else {
  $$0 = 102;
 }
 _ERR_put_error(13,147,$$0,0,0);
 $$013 = 0;
 STACKTOP = sp;return ($$013|0);
}
function _c2i_ASN1_OBJECT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$07479 = 0, $$075 = 0, $$07678 = 0, $$077 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = ($2|0)<(1);
 $5 = ($1|0)==(0|0);
 $or$cond3 = $5 | $4;
 if (!($or$cond3)) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = (($2) + -1)|0;
   $9 = (($6) + ($8)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)<(0);
   if (!($11)) {
    $12 = ((($3)) + 8|0);
    HEAP32[$12>>2] = 0;
    $13 = ((($3)) + 16|0);
    HEAP32[$13>>2] = $6;
    $14 = ((($3)) + 12|0);
    HEAP32[$14>>2] = $2;
    $15 = ((($3)) + 20|0);
    HEAP32[$15>>2] = 0;
    $16 = (_OBJ_obj2nid($3)|0);
    $17 = ($16|0)==(0);
    if (!($17)) {
     $19 = (_OBJ_nid2obj($16)|0);
     $20 = ($0|0)==(0|0);
     if (!($20)) {
      $21 = HEAP32[$0>>2]|0;
      _ASN1_OBJECT_free($21);
      HEAP32[$0>>2] = $19;
     }
     $22 = HEAP32[$1>>2]|0;
     $23 = (($22) + ($2)|0);
     HEAP32[$1>>2] = $23;
     $$0 = $19;
     STACKTOP = sp;return ($$0|0);
    }
    $18 = ($2|0)>(0);
    L12: do {
     if ($18) {
      $$07479 = 0;$$07678 = $6;
      while(1) {
       $24 = HEAP8[$$07678>>0]|0;
       $25 = ($24<<24>>24)==(-128);
       if ($25) {
        $26 = ($$07479|0)==(0);
        if ($26) {
         break;
        }
        $27 = ((($$07678)) + -1|0);
        $28 = HEAP8[$27>>0]|0;
        $29 = ($28<<24>>24)<(0);
        if (!($29)) {
         break;
        }
       }
       $30 = (($$07479) + 1)|0;
       $31 = ((($$07678)) + 1|0);
       $32 = ($30|0)<($2|0);
       if ($32) {
        $$07479 = $30;$$07678 = $31;
       } else {
        break L12;
       }
      }
      _ERR_put_error(13,196,216,0,0);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $33 = ($0|0)==(0|0);
    if ($33) {
     label = 18;
    } else {
     $34 = HEAP32[$0>>2]|0;
     $35 = ($34|0)==(0|0);
     if ($35) {
      label = 18;
     } else {
      $36 = ((($34)) + 20|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $37 & 1;
      $39 = ($38|0)==(0);
      if ($39) {
       label = 18;
      } else {
       $$077 = $34;
      }
     }
    }
    do {
     if ((label|0) == 18) {
      $40 = (_CRYPTO_zalloc(24,83252,0)|0);
      $41 = ($40|0)==(0|0);
      if (!($41)) {
       $42 = ((($40)) + 20|0);
       HEAP32[$42>>2] = 1;
       $$077 = $40;
       break;
      }
      _ERR_put_error(13,123,65,0,0);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $43 = HEAP32[$1>>2]|0;
    $44 = ((($$077)) + 16|0);
    $45 = HEAP32[$44>>2]|0;
    HEAP32[$44>>2] = 0;
    $46 = ($45|0)==(0|0);
    $$pre = ((($$077)) + 12|0);
    if ($46) {
     label = 23;
    } else {
     $47 = HEAP32[$$pre>>2]|0;
     $48 = ($47|0)<($2|0);
     if ($48) {
      label = 23;
     } else {
      $$075 = $45;
     }
    }
    do {
     if ((label|0) == 23) {
      HEAP32[$$pre>>2] = 0;
      _CRYPTO_free($45,83252,0);
      $49 = (_CRYPTO_malloc($2,83252,0)|0);
      $50 = ($49|0)==(0|0);
      if (!($50)) {
       $51 = ((($$077)) + 20|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = $52 | 8;
       HEAP32[$51>>2] = $53;
       $$075 = $49;
       break;
      }
      _ERR_put_error(13,196,65,0,0);
      if (!($33)) {
       $56 = HEAP32[$0>>2]|0;
       $57 = ($56|0)==($$077|0);
       if ($57) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
      }
      _ASN1_OBJECT_free($$077);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    _memcpy(($$075|0),($43|0),($2|0))|0;
    HEAP32[$44>>2] = $$075;
    HEAP32[$$pre>>2] = $2;
    HEAP32[$$077>>2] = 0;
    $54 = ((($$077)) + 4|0);
    HEAP32[$54>>2] = 0;
    $55 = (($43) + ($2)|0);
    if (!($33)) {
     HEAP32[$0>>2] = $$077;
    }
    HEAP32[$1>>2] = $55;
    $$0 = $$077;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 _ERR_put_error(13,196,216,0,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ASN1_OBJECT_free($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre12 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $10 = $3;
 } else {
  $6 = HEAP32[$0>>2]|0;
  _CRYPTO_free($6,83252,0);
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  _CRYPTO_free($8,83252,0);
  HEAP32[$7>>2] = 0;
  HEAP32[$0>>2] = 0;
  $$pre = HEAP32[$2>>2]|0;
  $10 = $$pre;
 }
 $9 = $10 & 8;
 $11 = ($9|0)==(0);
 if ($11) {
  $16 = $10;
 } else {
  $12 = ((($0)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  _CRYPTO_free($13,83252,0);
  HEAP32[$12>>2] = 0;
  $14 = ((($0)) + 12|0);
  HEAP32[$14>>2] = 0;
  $$pre12 = HEAP32[$2>>2]|0;
  $16 = $$pre12;
 }
 $15 = $16 & 1;
 $17 = ($15|0)==(0);
 if ($17) {
  return;
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _ASN1_OBJECT_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(24,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(13,123,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = ((($0)) + 20|0);
  HEAP32[$2>>2] = 1;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _ASN1_OCTET_STRING_dup($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ASN1_STRING_dup($0)|0);
 return ($1|0);
}
function _ASN1_OCTET_STRING_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_ASN1_STRING_cmp($0,$1)|0);
 return ($2|0);
}
function _ASN1_OCTET_STRING_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_ASN1_STRING_set($0,$1,$2)|0);
 return ($3|0);
}
function _table_cmp_BSEARCH_CMP_FN($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val = 0, $$idx7$val = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$0>>2]|0;
 $$idx7$val = HEAP32[$1>>2]|0;
 $2 = (($$idx$val) - ($$idx7$val))|0;
 return ($2|0);
}
function _ASN1_STRING_TABLE_add($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i16$in = 0, $$sink$i = 0, $$sink$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $6 = HEAP32[20321]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_OPENSSL_sk_new(39)|0);
  HEAP32[20321] = $8;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = $8;$11 = $5;
   label = 5;
  }
 } else {
  $10 = $6;$11 = $5;
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   HEAP32[$5>>2] = $0;
   $12 = (_OPENSSL_sk_find($10,$11)|0);
   $13 = ($12|0)>(-1);
   if ($13) {
    $14 = HEAP32[20321]|0;
    $15 = (_OPENSSL_sk_value($14,$12)|0);
    $$sink$i$i = $15;
   } else {
    $16 = (_OBJ_bsearch_($11,8,24,20,40)|0);
    $$sink$i$i = $16;
   }
   $17 = ($$sink$i$i|0)!=(0|0);
   if ($17) {
    $18 = ((($$sink$i$i)) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 & 1;
    $21 = ($20|0)==(0);
    if ($21) {
     label = 10;
    } else {
     $$0$i16$in = $$sink$i$i;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    $22 = (_CRYPTO_zalloc(20,83252,0)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     break;
    }
    $24 = HEAP32[20321]|0;
    $25 = (_OPENSSL_sk_push($24,$22)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     _CRYPTO_free($22,83252,0);
     break;
    }
    if ($17) {
     $27 = HEAP32[$$sink$i$i>>2]|0;
     HEAP32[$22>>2] = $27;
     $28 = ((($$sink$i$i)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($22)) + 4|0);
     HEAP32[$30>>2] = $29;
     $31 = ((($$sink$i$i)) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($22)) + 8|0);
     HEAP32[$33>>2] = $32;
     $34 = ((($$sink$i$i)) + 12|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ((($22)) + 12|0);
     HEAP32[$36>>2] = $35;
     $37 = ((($$sink$i$i)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $38 | 1;
     $$sink$i = $39;
    } else {
     $40 = ((($22)) + 4|0);
     HEAP32[$40>>2] = -1;
     $41 = ((($22)) + 8|0);
     HEAP32[$41>>2] = -1;
     $$sink$i = 1;
    }
    $42 = ((($22)) + 16|0);
    HEAP32[$42>>2] = $$sink$i;
    $$0$i16$in = $22;
   }
   $43 = ($1|0)>(-1);
   if ($43) {
    $44 = ((($$0$i16$in)) + 4|0);
    HEAP32[$44>>2] = $1;
   }
   $45 = ($2|0)>(-1);
   if ($45) {
    $46 = ((($$0$i16$in)) + 8|0);
    HEAP32[$46>>2] = $2;
   }
   $47 = ($3|0)==(0);
   if (!($47)) {
    $48 = ((($$0$i16$in)) + 12|0);
    HEAP32[$48>>2] = $3;
   }
   $49 = ($4|0)==(0);
   if ($49) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $50 = ((($$0$i16$in)) + 16|0);
   $51 = $4 | 1;
   HEAP32[$50>>2] = $51;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _ERR_put_error(13,129,65,0,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sk_table_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 return ($6|0);
}
function _ASN1_STRING_TABLE_cleanup() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20321]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 HEAP32[20321] = 0;
 _OPENSSL_sk_pop_free($0,24);
 return;
}
function _st_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _ASN1_TYPE_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $0;
 } else {
  _asn1_primitive_free($3,0,0);
  $$pre = HEAP32[$3>>2]|0;
  $7 = $$pre;
 }
 HEAP32[$7>>2] = $1;
 $8 = ($1|0)==(1);
 if ($8) {
  $9 = ($2|0)!=(0|0);
  $10 = $9 ? 255 : 0;
  $11 = ((($7)) + 4|0);
  HEAP32[$11>>2] = $10;
  STACKTOP = sp;return;
 } else {
  $12 = ((($7)) + 4|0);
  HEAP32[$12>>2] = $2;
  STACKTOP = sp;return;
 }
}
function _ASN1_TYPE_unpack_sequence($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(16);
  if ($4) {
   $5 = ((($1)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = (_ASN1_item_unpack($6,$0)|0);
    $$0 = $8;
   }
  } else {
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _EVP_PKEY_asn1_find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1$i = 0, $$1$i7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $2 = sp + 8|0;
 $3 = sp;
 $$0 = $1;
 while(1) {
  HEAP32[$3>>2] = $2;
  HEAP32[$2>>2] = $$0;
  $4 = HEAP32[20322]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
  } else {
   $6 = (_OPENSSL_sk_find($4,$2)|0);
   $7 = ($6|0)>(-1);
   if ($7) {
    $8 = HEAP32[20322]|0;
    $9 = (_OPENSSL_sk_value($8,$6)|0);
    $$1$i = $9;
   } else {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $10 = (_OBJ_bsearch_($3,488,3,4,41)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    label = 6;
    break;
   }
   $12 = HEAP32[$10>>2]|0;
   $$1$i = $12;
  }
  $13 = ($$1$i|0)==(0|0);
  if ($13) {
   $$1$i7 = 0;
   break;
  }
  $14 = ((($$1$i)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 1;
  $17 = ($16|0)==(0);
  if ($17) {
   $$1$i7 = $$1$i;
   break;
  }
  $18 = ((($$1$i)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $$0 = $19;
 }
 if ((label|0) == 6) {
  $$1$i7 = 0;
 }
 $20 = ($0|0)==(0|0);
 if ($20) {
  STACKTOP = sp;return ($$1$i7|0);
 }
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return ($$1$i7|0);
}
function _ameth_cmp_BSEARCH_CMP_FN($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 return ($6|0);
}
function _ASN1_str2mask($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 0;
 $2 = (_CONF_parse_list($0,124,1,32,$1)|0);
 return ($2|0);
}
function _mask_cb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$012$i = 0, $$08$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 switch ($1|0) {
 case 3:  {
  $4 = (_strncmp($0,47289,3)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = HEAP32[$2>>2]|0;
   $7 = $6 | 10502;
   HEAP32[$2>>2] = $7;
   $$0 = 1;
   return ($$0|0);
  } else {
   $$08$i = 3;
  }
  break;
 }
 case -1:  {
  $8 = (_strlen($0)|0);
  $$08$i = $8;
  break;
 }
 default: {
  $$08$i = $1;
 }
 }
 HEAP32[20323] = 500;
 $$012$i = 0;$10 = 500;
 while(1) {
  $9 = ((($10)) + 4|0);
  $11 = HEAP32[$9>>2]|0;
  $12 = ($$08$i|0)==($11|0);
  if ($12) {
   $13 = HEAP32[$10>>2]|0;
   $14 = (_strncmp($13,$0,$$08$i)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   }
  }
  $16 = (($$012$i) + 1)|0;
  $17 = ((($10)) + 12|0);
  HEAP32[20323] = $17;
  $18 = ($16>>>0)<(49);
  if ($18) {
   $$012$i = $16;$10 = $17;
  } else {
   $$0 = 0;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 $19 = ((($10)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 $22 = $20 & 65536;
 $23 = ($22|0)==(0);
 $or$cond = $21 & $23;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $24 = (_ASN1_tag2bit($20)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  $$0 = 0;
  return ($$0|0);
 }
 $26 = HEAP32[$2>>2]|0;
 $27 = $26 | $24;
 HEAP32[$2>>2] = $27;
 $$0 = 1;
 return ($$0|0);
}
function _ASN1_get_object($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$03143$i = 0, $$03143$i$pn = 0, $$038 = 0, $$039 = 0, $$040 = 0, $$041 = 0, $$044$i = 0, $$04952 = 0, $$1 = 0, $$13035$i$ph = 0, $$234$i$ph = 0, $$in = 0, $$lcssa = 0, $$pre = 0, $$sroa$0$0 = 0, $$sroa$0$1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($4|0)==(0);
 L1: do {
  if (!($5)) {
   $6 = HEAP32[$0>>2]|0;
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = $8 & 32;
   $10 = $8 & 192;
   $11 = $8 & 31;
   $12 = ($11|0)==(31);
   $13 = (($4) + -1)|0;
   $14 = ($13|0)==(0);
   $15 = ((($6)) + 1|0);
   $16 = $15;
   $17 = $6;
   if ($12) {
    if ($14) {
     break;
    } else {
     $$0 = $13;$$040 = 0;$$sroa$0$0 = $16;
    }
    while(1) {
     $18 = $$sroa$0$0;
     $19 = HEAP8[$18>>0]|0;
     $20 = ($19<<24>>24)<(0);
     $21 = $$040 << 7;
     $22 = ((($18)) + 1|0);
     $23 = $22;
     $24 = $19 & 127;
     $25 = $24&255;
     $26 = $25 | $21;
     $27 = (($$0) + -1)|0;
     $28 = ($27|0)==(0);
     if (!($20)) {
      break;
     }
     $29 = ($26|0)>(16777215);
     $or$cond = $28 | $29;
     if ($or$cond) {
      break L1;
     } else {
      $$0 = $27;$$040 = $26;$$sroa$0$0 = $23;
     }
    }
    if ($28) {
     break;
    } else {
     $$039 = $26;$$1 = $27;$$sroa$0$1 = $23;
    }
   } else {
    if ($14) {
     break;
    } else {
     $$039 = $11;$$1 = $13;$$sroa$0$1 = $16;
    }
   }
   HEAP32[$2>>2] = $$039;
   HEAP32[$3>>2] = $10;
   $30 = $$sroa$0$1;
   $31 = ($$1|0)<(1);
   if (!($31)) {
    $32 = HEAP8[$30>>0]|0;
    $33 = ($32<<24>>24)==(-128);
    if ($33) {
     $60 = ((($30)) + 1|0);
     HEAP32[$1>>2] = 0;
     $61 = ($9|0)==(0);
     if ($61) {
      break;
     } else {
      $$04952 = 1;$$in = $60;$65 = 0;
     }
    } else {
     $34 = $32&255;
     $35 = $34 & 127;
     $36 = ((($30)) + 1|0);
     $37 = $34 & 128;
     $38 = ($37|0)==(0);
     L15: do {
      if ($38) {
       $$13035$i$ph = $35;$$234$i$ph = $36;
      } else {
       $39 = (($35) + 1)|0;
       $40 = ($39|0)<($$1|0);
       if (!($40)) {
        break L1;
       }
       $41 = ($35|0)==(0);
       if ($41) {
        $$13035$i$ph = 0;$$234$i$ph = $36;
       } else {
        $$03143$i = $36;$$044$i = $35;
        while(1) {
         $42 = HEAP8[$$03143$i>>0]|0;
         $43 = ($42<<24>>24)==(0);
         if (!($43)) {
          break;
         }
         $44 = ((($$03143$i)) + 1|0);
         $45 = (($$044$i) + -1)|0;
         $46 = ($45|0)==(0);
         if ($46) {
          $$13035$i$ph = 0;$$234$i$ph = $44;
          break L15;
         } else {
          $$03143$i = $44;$$044$i = $45;
         }
        }
        $47 = ($$044$i>>>0)>(4);
        if ($47) {
         break L1;
        }
        $48 = (($$044$i) + -1)|0;
        $49 = $42&255;
        $50 = ($48|0)==(0);
        if ($50) {
         $$lcssa = $49;
        } else {
         $$03143$i$pn = $$03143$i;$53 = $48;$55 = $49;
         while(1) {
          $51 = ((($$03143$i$pn)) + 1|0);
          $$pre = HEAP8[$51>>0]|0;
          $52 = (($53) + -1)|0;
          $54 = $55 << 8;
          $56 = $$pre&255;
          $57 = $56 | $54;
          $58 = ($52|0)==(0);
          if ($58) {
           $$lcssa = $57;
           break;
          } else {
           $$03143$i$pn = $51;$53 = $52;$55 = $57;
          }
         }
        }
        $scevgep$i = (($$03143$i) + ($$044$i)|0);
        $59 = ($$lcssa|0)<(0);
        if ($59) {
         break L1;
        } else {
         $$13035$i$ph = $$lcssa;$$234$i$ph = $scevgep$i;
        }
       }
      }
     } while(0);
     HEAP32[$1>>2] = $$13035$i$ph;
     $$04952 = 0;$$in = $$234$i$ph;$65 = $$13035$i$ph;
    }
    $62 = $$in;
    $63 = (($4) - ($62))|0;
    $64 = (($63) + ($17))|0;
    $66 = ($65|0)>($64|0);
    if ($66) {
     $67 = $9 | 128;
     _ERR_put_error(13,114,155,0,0);
     $$041 = $67;
    } else {
     $$041 = $9;
    }
    HEAP32[$0>>2] = $62;
    $68 = $$041 | $$04952;
    $$038 = $68;
    return ($$038|0);
   }
  }
 } while(0);
 _ERR_put_error(13,114,123,0,0);
 $$038 = 128;
 return ($$038|0);
}
function _ASN1_put_object($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$02327$i = 0, $$02526$i = 0, $$02534 = 0, $$02632 = 0, $$028$i = 0, $$035 = 0, $$133 = 0, $$133$phi = 0, $$sroa$0$0$in = 0, $$sroa$0$1 = 0, $$sroa$0$1$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($1|0)!=(0);
 $7 = $6 ? 32 : 0;
 $8 = $4 & 192;
 $9 = $8 | $7;
 $10 = ($3|0)<(31);
 if ($10) {
  $11 = $3 & 31;
  $12 = $9 | $11;
  $13 = $12&255;
  $14 = ((($5)) + 1|0);
  HEAP8[$5>>0] = $13;
  $$sroa$0$0$in = $14;
 } else {
  $15 = $9 | 31;
  $16 = $15&255;
  HEAP8[$5>>0] = $16;
  $$02534 = 0;$$035 = $3;
  while(1) {
   $19 = $$035 >>> 7;
   $20 = (($$02534) + 1)|0;
   $21 = ($19|0)==(0);
   if ($21) {
    break;
   } else {
    $$02534 = $20;$$035 = $19;
   }
  }
  $17 = ((($5)) + 1|0);
  $18 = ($$02534|0)>(-1);
  if ($18) {
   $$02632 = $3;$$133 = $20;$25 = $$02534;
   while(1) {
    $22 = $$02632 & 127;
    $23 = $22&255;
    $24 = (($17) + ($25)|0);
    $26 = ($$133|0)==($20|0);
    $27 = $23 | -128;
    $$ = $26 ? $23 : $27;
    HEAP8[$24>>0] = $$;
    $28 = $$02632 >> 7;
    $29 = (($25) + -1)|0;
    $30 = ($25|0)>(0);
    if ($30) {
     $$133$phi = $25;$$02632 = $28;$25 = $29;$$133 = $$133$phi;
    } else {
     break;
    }
   }
  }
  $31 = (($17) + ($20)|0);
  $$sroa$0$0$in = $31;
 }
 $32 = ($1|0)==(2);
 if ($32) {
  $33 = ((($$sroa$0$0$in)) + 1|0);
  HEAP8[$$sroa$0$0$in>>0] = -128;
  $$sroa$0$1$in = $33;
  $$sroa$0$1 = $$sroa$0$1$in;
  HEAP32[$0>>2] = $$sroa$0$1;
  return;
 }
 $34 = ($2|0)<(128);
 if ($34) {
  $35 = $2&255;
  $36 = ((($$sroa$0$0$in)) + 1|0);
  HEAP8[$$sroa$0$0$in>>0] = $35;
  $$sroa$0$1$in = $36;
  $$sroa$0$1 = $$sroa$0$1$in;
  HEAP32[$0>>2] = $$sroa$0$1;
  return;
 } else {
  $$02327$i = 0;$$028$i = $2;
 }
 while(1) {
  $37 = $$028$i >>> 8;
  $38 = (($$02327$i) + 1)|0;
  $39 = ($37|0)==(0);
  if ($39) {
   break;
  } else {
   $$02327$i = $38;$$028$i = $37;
  }
 }
 $40 = $38 | 128;
 $41 = $40&255;
 $42 = ((($$sroa$0$0$in)) + 1|0);
 HEAP8[$$sroa$0$0$in>>0] = $41;
 $43 = ($$02327$i|0)>(-1);
 if ($43) {
  $$02526$i = $2;$46 = $$02327$i;
  while(1) {
   $44 = $$02526$i&255;
   $45 = (($42) + ($46)|0);
   HEAP8[$45>>0] = $44;
   $47 = $$02526$i >> 8;
   $48 = (($46) + -1)|0;
   $49 = ($46|0)>(0);
   if ($49) {
    $$02526$i = $47;$46 = $48;
   } else {
    break;
   }
  }
 }
 $50 = (($42) + ($38)|0);
 $$sroa$0$1$in = $50;
 $$sroa$0$1 = $$sroa$0$1$in;
 HEAP32[$0>>2] = $$sroa$0$1;
 return;
}
function _ASN1_put_eoc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 1|0);
 HEAP8[$1>>0] = 0;
 $3 = ((($1)) + 2|0);
 HEAP8[$2>>0] = 0;
 HEAP32[$0>>2] = $3;
 return 2;
}
function _ASN1_object_size($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$022 = 0, $$023 = 0, $$028 = 0, $$1 = 0, $$227 = 0, $$3 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)<(0);
 if ($3) {
  return -1;
 }
 $4 = ($2|0)>(30);
 if ($4) {
  $$022 = 1;$$023 = $2;
  while(1) {
   $5 = $$023 >> 7;
   $6 = (($$022) + 1)|0;
   $$old1 = ($5|0)>(0);
   if ($$old1) {
    $$022 = $6;$$023 = $5;
   } else {
    $$1 = $6;
    break;
   }
  }
 } else {
  $$1 = 1;
 }
 $7 = ($0|0)==(2);
 if ($7) {
  $8 = (($$1) + 3)|0;
  $$3 = $8;
 } else {
  $9 = (($$1) + 1)|0;
  $10 = ($1|0)>(127);
  if ($10) {
   $$028 = $1;$$227 = $9;
   while(1) {
    $11 = $$028 >>> 8;
    $12 = (($$227) + 1)|0;
    $13 = ($11|0)==(0);
    if ($13) {
     $$3 = $12;
     break;
    } else {
     $$028 = $11;$$227 = $12;
    }
   }
  } else {
   $$3 = $9;
  }
 }
 $14 = (2147483647 - ($1))|0;
 $15 = ($$3|0)<($14|0);
 $16 = (($$3) + ($1))|0;
 $$ = $15 ? $16 : -1;
 return ($$|0);
}
function _ASN1_STRING_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$025$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)<(0);
 do {
  if ($9) {
   $10 = ($7|0)==(0|0);
   if ($10) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $11 = (_strlen($7)|0);
    $$025$i = $11;
    break;
   }
  } else {
   $$025$i = $8;
  }
 } while(0);
 $12 = HEAP32[$0>>2]|0;
 $13 = ($12|0)>($$025$i|0);
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 if ($13) {
  $16 = ($15|0)==(0|0);
  if ($16) {
   $18 = 0;
   label = 7;
  } else {
   $22 = $15;
  }
 } else {
  $18 = $15;
  label = 7;
 }
 if ((label|0) == 7) {
  $17 = (($$025$i) + 1)|0;
  $19 = (_CRYPTO_realloc($18,$17,83252,0)|0);
  HEAP32[$14>>2] = $19;
  $20 = ($19|0)==(0|0);
  if ($20) {
   _ERR_put_error(13,186,65,0,0);
   HEAP32[$14>>2] = $18;
   $$0 = 0;
   return ($$0|0);
  } else {
   $22 = $19;
  }
 }
 HEAP32[$0>>2] = $$025$i;
 $21 = ($7|0)==(0|0);
 if (!($21)) {
  _memcpy(($22|0),($7|0),($$025$i|0))|0;
  $23 = HEAP32[$14>>2]|0;
  $24 = (($23) + ($$025$i)|0);
  HEAP8[$24>>0] = 0;
 }
 $25 = ((($0)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 128;
 HEAP32[$25>>2] = $27;
 $28 = ((($1)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & -129;
 $31 = $30 | $27;
 HEAP32[$25>>2] = $31;
 $$0 = 1;
 return ($$0|0);
}
function _ASN1_STRING_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)<(0);
 do {
  if ($3) {
   $4 = ($1|0)==(0|0);
   if ($4) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $5 = (_strlen($1)|0);
    $$025 = $5;
    break;
   }
  } else {
   $$025 = $2;
  }
 } while(0);
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)>($$025|0);
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 if ($7) {
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = 0;
   label = 6;
  } else {
   $17 = $9;
  }
 } else {
  $12 = $9;
  label = 6;
 }
 if ((label|0) == 6) {
  $11 = (($$025) + 1)|0;
  $13 = (_CRYPTO_realloc($12,$11,83252,0)|0);
  HEAP32[$8>>2] = $13;
  $14 = ($13|0)==(0|0);
  if ($14) {
   _ERR_put_error(13,186,65,0,0);
   HEAP32[$8>>2] = $12;
   $$0 = 0;
   return ($$0|0);
  } else {
   $17 = $13;
  }
 }
 HEAP32[$0>>2] = $$025;
 $15 = ($1|0)==(0|0);
 if ($15) {
  $$0 = 1;
  return ($$0|0);
 }
 $16 = ((($0)) + 8|0);
 _memcpy(($17|0),($1|0),($$025|0))|0;
 $18 = HEAP32[$16>>2]|0;
 $19 = (($18) + ($$025)|0);
 HEAP8[$19>>0] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _ASN1_STRING_dup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_CRYPTO_zalloc(16,83252,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(13,130,65,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 4;
 $5 = (_ASN1_STRING_copy($2,$0)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $2;
  return ($$0|0);
 }
 $7 = ((($2)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 128;
 $10 = $8 & 16;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ((($2)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  _CRYPTO_free($13,83252,0);
 }
 $14 = ($9|0)==(0);
 if (!($14)) {
  $$0 = 0;
  return ($$0|0);
 }
 _CRYPTO_free($2,83252,0);
 $$0 = 0;
 return ($$0|0);
}
function _ASN1_STRING_new() {
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(16,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(13,130,65,0,0);
  $$0$i = 0;
  return ($$0$i|0);
 } else {
  $2 = ((($0)) + 4|0);
  HEAP32[$2>>2] = 4;
  $$0$i = $0;
  return ($$0$i|0);
 }
 return (0)|0;
}
function _ASN1_STRING_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 128;
 $5 = $3 & 16;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  _CRYPTO_free($8,83252,0);
 }
 $9 = ($4|0)==(0);
 if (!($9)) {
  return;
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _ASN1_STRING_set0($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _CRYPTO_free($4,83252,0);
 HEAP32[$3>>2] = $1;
 HEAP32[$0>>2] = $2;
 return;
}
function _ASN1_STRING_type_new($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_zalloc(16,83252,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(13,130,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $3 = ((($1)) + 4|0);
  HEAP32[$3>>2] = $0;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _asn1_string_embed_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 16;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  _CRYPTO_free($8,83252,0);
 }
 $9 = ($1|0)==(0);
 if (!($9)) {
  return;
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _ASN1_STRING_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_memcmp($7,$9,$2)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = $10;
  return ($$0|0);
 }
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) - ($15))|0;
 $$0 = $16;
 return ($$0|0);
}
function _ASN1_STRING_length($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _ASN1_STRING_get0_data($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _ASN1_add_oid_module() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_CONF_module_add(47293,42,25)|0);
 return;
}
function _oid_module_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01721 = 0, $$045$i = 0, $$047$i = 0, $$1$i = 0, $$148$i = 0, $$not$i = 0, $$pn$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_CONF_imodule_get_value($0)|0);
 $3 = (_NCONF_get_section($1,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _ERR_put_error(13,174,172,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_OPENSSL_sk_num($3)|0);
 $6 = ($5|0)>(0);
 if ($6) {
  $$01721 = 0;
 } else {
  $$0 = 1;
  return ($$0|0);
 }
 L7: while(1) {
  $7 = (_OPENSSL_sk_value($3,$$01721)|0);
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($7)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strrchr($9,44)|0);
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = ((($12)) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    break;
   }
   $17 = $15&255;
   $18 = (_isspace($17)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $$047$i = 0;$$1$i = $14;
   } else {
    $20 = ((($12)) + 2|0);
    $21 = $20;
    while(1) {
     $$pre$i = HEAP8[$21>>0]|0;
     $22 = $$pre$i&255;
     $23 = (_isspace($22)|0);
     $24 = ($23|0)==(0);
     $25 = ((($21)) + 1|0);
     if ($24) {
      $$047$i = 0;$$1$i = $21;
      break;
     } else {
      $21 = $25;
     }
    }
   }
  } else {
   $$047$i = $11;$$1$i = $9;
  }
  $26 = (_OBJ_create($$1$i,$11,$$047$i)|0);
  $27 = ($26|0)==(0);
  $$not$i = $13 ^ 1;
  $brmerge$i = $27 | $$not$i;
  if ($brmerge$i) {
   if ($27) {
    break;
   }
  } else {
   $$148$i = $9;
   while(1) {
    $28 = HEAP8[$$148$i>>0]|0;
    $29 = $28&255;
    $30 = (_isspace($29)|0);
    $31 = ($30|0)==(0);
    $32 = ((($$148$i)) + 1|0);
    if ($31) {
     $$pn$i = $12;
     break;
    } else {
     $$148$i = $32;
    }
   }
   while(1) {
    $$045$i = ((($$pn$i)) + -1|0);
    $33 = HEAP8[$$045$i>>0]|0;
    $34 = $33&255;
    $35 = (_isspace($34)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     break;
    }
    $37 = ($$045$i|0)==($$148$i|0);
    if ($37) {
     break L7;
    } else {
     $$pn$i = $$045$i;
    }
   }
   $38 = $$pn$i;
   $39 = $$148$i;
   $40 = (($38) - ($39))|0;
   $41 = (($40) + 1)|0;
   $42 = (_CRYPTO_malloc($41,83252,0)|0);
   $43 = ($42|0)==(0|0);
   if ($43) {
    break;
   }
   _memcpy(($42|0),($$148$i|0),($40|0))|0;
   $44 = (($42) + ($40)|0);
   HEAP8[$44>>0] = 0;
   $45 = (_OBJ_nid2obj($26)|0);
   $46 = ((($45)) + 4|0);
   HEAP32[$46>>2] = $42;
  }
  $47 = (($$01721) + 1)|0;
  $48 = (_OPENSSL_sk_num($3)|0);
  $49 = ($47|0)<($48|0);
  if ($49) {
   $$01721 = $47;
  } else {
   $$0 = 1;
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  return ($$0|0);
 }
 _ERR_put_error(13,174,171,0,0);
 $$0 = 0;
 return ($$0|0);
}
function _oid_module_finish($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _ASN1_add_stable_module() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_CONF_module_add(47305,43,26)|0);
 return;
}
function _stbl_module_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01723 = 0, $$045$ph70$i = 0, $$04562$i = 0, $$046$lcssa$i = 0, $$04681$i = 0, $$048$lcssa$i = 0, $$04880$i = 0, $$051$lcssa$i = 0, $$05179$i = 0, $$05678$i = 0, $$05758$i = 0, $$147$i = 0, $$149$i = 0, $$152$i = 0, $$155$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = (_CONF_imodule_get_value($0)|0);
 $5 = (_NCONF_get_section($1,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _ERR_put_error(13,223,172,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_OPENSSL_sk_num($5)|0);
 $8 = ($7|0)>(0);
 if (!($8)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $$01723 = 0;
 while(1) {
  $12 = (_OPENSSL_sk_value($5,$$01723)|0);
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($12)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$3>>2] = 0;
  $17 = (_OBJ_sn2nid($16)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = (_OBJ_ln2nid($16)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    label = 21;
   } else {
    $$05758$i = $19;
    label = 8;
   }
  } else {
   $$05758$i = $17;
   label = 8;
  }
  L12: do {
   if ((label|0) == 8) {
    label = 0;
    $21 = (_X509V3_parse_list($14)|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     label = 21;
    } else {
     $23 = (_OPENSSL_sk_num($21)|0);
     $24 = ($23|0)>(0);
     do {
      if ($24) {
       $$04681$i = 0;$$04880$i = -1;$$05179$i = -1;$$05678$i = 0;
       L16: while(1) {
        $25 = (_OPENSSL_sk_value($21,$$05678$i)|0);
        $26 = ((($25)) + 4|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = (_strcmp($27,47318)|0);
        $29 = ($28|0)==(0);
        do {
         if ($29) {
          $30 = ((($25)) + 8|0);
          $31 = HEAP32[$30>>2]|0;
          $32 = (_strtoul($31,$2,0)|0);
          $33 = HEAP32[$2>>2]|0;
          $34 = HEAP8[$33>>0]|0;
          $35 = ($34<<24>>24)==(0);
          if ($35) {
           $$147$i = $$04681$i;$$149$i = $$04880$i;$$152$i = $32;
          } else {
           label = 20;
           break L16;
          }
         } else {
          $36 = (_strcmp($27,47322)|0);
          $37 = ($36|0)==(0);
          if ($37) {
           $38 = ((($25)) + 8|0);
           $39 = HEAP32[$38>>2]|0;
           $40 = (_strtoul($39,$2,0)|0);
           $41 = HEAP32[$2>>2]|0;
           $42 = HEAP8[$41>>0]|0;
           $43 = ($42<<24>>24)==(0);
           if ($43) {
            $$147$i = $$04681$i;$$149$i = $40;$$152$i = $$05179$i;
            break;
           } else {
            label = 20;
            break L16;
           }
          }
          $44 = (_strcmp($27,47326)|0);
          $45 = ($44|0)==(0);
          if ($45) {
           $46 = ((($25)) + 8|0);
           $47 = HEAP32[$46>>2]|0;
           $48 = (_ASN1_str2mask($47,$3)|0);
           $49 = ($48|0)!=(0);
           $50 = HEAP32[$3>>2]|0;
           $51 = ($50|0)!=(0);
           $or$cond$i = $49 & $51;
           if ($or$cond$i) {
            $$147$i = $$04681$i;$$149$i = $$04880$i;$$152$i = $$05179$i;
            break;
           } else {
            label = 20;
            break L16;
           }
          }
          $52 = (_strcmp($27,47331)|0);
          $53 = ($52|0)==(0);
          if (!($53)) {
           label = 22;
           break L16;
          }
          $54 = ((($25)) + 8|0);
          $55 = HEAP32[$54>>2]|0;
          $56 = (_strcmp($55,47337)|0);
          $57 = ($56|0)==(0);
          if ($57) {
           $$147$i = 2;$$149$i = $$04880$i;$$152$i = $$05179$i;
          } else {
           $58 = (_strcmp($55,80711)|0);
           $59 = ($58|0)==(0);
           if ($59) {
            $$147$i = 1;$$149$i = $$04880$i;$$152$i = $$05179$i;
           } else {
            label = 20;
            break L16;
           }
          }
         }
        } while(0);
        $60 = (($$05678$i) + 1)|0;
        $61 = (_OPENSSL_sk_num($21)|0);
        $62 = ($60|0)<($61|0);
        if ($62) {
         $$04681$i = $$147$i;$$04880$i = $$149$i;$$05179$i = $$152$i;$$05678$i = $60;
        } else {
         label = 25;
         break;
        }
       }
       if ((label|0) == 20) {
        label = 0;
        _ERR_put_error(13,222,218,0,0);
       }
       else if ((label|0) == 22) {
        label = 0;
        _ERR_put_error(13,222,218,0,0);
        $63 = ($25|0)==(0|0);
        if ($63) {
         $$045$ph70$i = $21;
         label = 24;
         break L12;
        }
       }
       else if ((label|0) == 25) {
        label = 0;
        $$pre$i = HEAP32[$3>>2]|0;
        $$046$lcssa$i = $$147$i;$$048$lcssa$i = $$149$i;$$051$lcssa$i = $$152$i;$67 = $$pre$i;
        break;
       }
       $64 = HEAP32[$26>>2]|0;
       $65 = ((($25)) + 8|0);
       $66 = HEAP32[$65>>2]|0;
       HEAP32[$vararg_buffer>>2] = 47344;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $64;
       $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
       HEAP32[$vararg_ptr2>>2] = 48369;
       $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
       HEAP32[$vararg_ptr3>>2] = $66;
       _ERR_add_error_data(4,$vararg_buffer);
       $$04562$i = $21;$$155$i = 0;
       break L12;
      } else {
       $$046$lcssa$i = 0;$$048$lcssa$i = -1;$$051$lcssa$i = -1;$67 = 0;
      }
     } while(0);
     $68 = (_ASN1_STRING_TABLE_add($$05758$i,$$051$lcssa$i,$$048$lcssa$i,$67,$$046$lcssa$i)|0);
     $69 = ($68|0)==(0);
     if ($69) {
      _ERR_put_error(13,222,65,0,0);
      $$04562$i = $21;$$155$i = 0;
     } else {
      $$04562$i = $21;$$155$i = $68;
     }
    }
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   _ERR_put_error(13,222,218,0,0);
   $$045$ph70$i = 0;
   label = 24;
  }
  if ((label|0) == 24) {
   label = 0;
   HEAP32[$vararg_buffer4>>2] = 48363;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $16;
   $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
   HEAP32[$vararg_ptr8>>2] = 48369;
   $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
   HEAP32[$vararg_ptr9>>2] = $14;
   _ERR_add_error_data(4,$vararg_buffer4);
   $$04562$i = $$045$ph70$i;$$155$i = 0;
  }
  _OPENSSL_sk_pop_free($$04562$i,27);
  $70 = ($$155$i|0)==(0);
  $10 = (($$01723) + 1)|0;
  if ($70) {
   break;
  }
  $9 = (_OPENSSL_sk_num($5)|0);
  $11 = ($10|0)<($9|0);
  if ($11) {
   $$01723 = $10;
  } else {
   $$0 = 1;
   label = 30;
   break;
  }
 }
 if ((label|0) == 30) {
  STACKTOP = sp;return ($$0|0);
 }
 _ERR_put_error(13,223,219,0,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbl_module_finish($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_STRING_TABLE_cleanup();
 return;
}
function _ASN1_item_pack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  label = 3;
 } else {
  $4 = HEAP32[$2>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 3;
  } else {
   $$0 = $4;
  }
 }
 if ((label|0) == 3) {
  $6 = (_ASN1_STRING_new()|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   _ERR_put_error(13,198,65,0,0);
   $$020 = 0;
   return ($$020|0);
  } else {
   $$0 = $6;
  }
 }
 $8 = ((($$0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _CRYPTO_free($9,83252,0);
 HEAP32[$8>>2] = 0;
 $10 = (_ASN1_item_i2d($0,$8,$1)|0);
 HEAP32[$$0>>2] = $10;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   _ERR_put_error(13,198,112,0,0);
  } else {
   $12 = HEAP32[$8>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    _ERR_put_error(13,198,65,0,0);
    break;
   }
   if ($3) {
    $$020 = $$0;
    return ($$020|0);
   }
   $14 = HEAP32[$2>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $$020 = $$0;
    return ($$020|0);
   }
   HEAP32[$2>>2] = $$0;
   $$020 = $$0;
   return ($$020|0);
  }
 } while(0);
 if (!($3)) {
  $16 = HEAP32[$2>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $$020 = 0;
   return ($$020|0);
  }
 }
 _ASN1_STRING_free($$0);
 $$020 = 0;
 return ($$020|0);
}
function _ASN1_item_unpack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_ASN1_item_d2i(0,$2,$5,$1)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  STACKTOP = sp;return ($6|0);
 }
 _ERR_put_error(13,199,110,0,0);
 STACKTOP = sp;return ($6|0);
}
function _i2a_ASN1_INTEGER($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$02326 = 0, $$024 = 0, $$127 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$024 = 0;
  STACKTOP = sp;return ($$024|0);
 }
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 256;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
 } else {
  $8 = (_BIO_write($0,48050,1)|0);
  $9 = ($8|0)==(1);
  if ($9) {
   $$0 = 1;
  } else {
   $$024 = -1;
   STACKTOP = sp;return ($$024|0);
  }
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = (_BIO_write($0,47351,2)|0);
  $16 = ($15|0)==(2);
  $17 = $$0 | 2;
  $$ = $16 ? $17 : -1;
  $$024 = $$;
  STACKTOP = sp;return ($$024|0);
 }
 $12 = ($10|0)>(0);
 if (!($12)) {
  $$024 = $$0;
  STACKTOP = sp;return ($$024|0);
 }
 $13 = ((($1)) + 8|0);
 $14 = ((($2)) + 1|0);
 $$02326 = 0;$$127 = $$0;
 while(1) {
  $18 = ($$02326|0)!=(0);
  $19 = (($$02326|0) % 35)&-1;
  $20 = ($19|0)==(0);
  $or$cond = $18 & $20;
  if ($or$cond) {
   $21 = (_BIO_write($0,47354,2)|0);
   $22 = ($21|0)==(2);
   if (!($22)) {
    $$024 = -1;
    label = 13;
    break;
   }
   $23 = (($$127) + 2)|0;
   $$2 = $23;
  } else {
   $$2 = $$127;
  }
  $24 = HEAP32[$13>>2]|0;
  $25 = (($24) + ($$02326)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 >>> 4;
  $29 = (47622 + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  HEAP8[$2>>0] = $30;
  $31 = HEAP8[$25>>0]|0;
  $32 = $31 & 15;
  $33 = $32&255;
  $34 = (47622 + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  HEAP8[$14>>0] = $35;
  $36 = (_BIO_write($0,$2,2)|0);
  $37 = ($36|0)==(2);
  if (!($37)) {
   $$024 = -1;
   label = 13;
   break;
  }
  $38 = (($$2) + 2)|0;
  $39 = (($$02326) + 1)|0;
  $40 = HEAP32[$1>>2]|0;
  $41 = ($39|0)<($40|0);
  if ($41) {
   $$02326 = $39;$$127 = $38;
  } else {
   $$024 = $38;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return ($$024|0);
 }
 return (0)|0;
}
function _PKCS8_pkey_set0($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($2|0)>(-1);
 if ($7) {
  $8 = HEAP32[$0>>2]|0;
  $9 = (_ASN1_INTEGER_set($8,$2)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_X509_ALGOR_set0($12,$1,$3,$4)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = 0;
  return ($$0|0);
 }
 $15 = ($5|0)==(0|0);
 if ($15) {
  $$0 = 1;
  return ($$0|0);
 }
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 _ASN1_STRING_set0($17,$5,$6);
 $$0 = 1;
 return ($$0|0);
}
function _PKCS8_pkey_get0($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$0>>2] = $8;
 }
 $9 = ($1|0)==(0|0);
 if (!($9)) {
  $10 = ((($4)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_ASN1_STRING_get0_data($11)|0);
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$10>>2]|0;
  $14 = (_ASN1_STRING_length($13)|0);
  HEAP32[$2>>2] = $14;
 }
 $15 = ($3|0)==(0|0);
 if ($15) {
  return 1;
 }
 $16 = ((($4)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $17;
 return 1;
}
function _ASN1_bn_print($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$015$i = 0, $$016$i = 0, $$044 = 0, $$045 = 0, $$046 = 0, $$47 = 0, $$48 = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$50 = 0, $phitmp49 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = ($2|0)==(0|0);
 if ($5) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_BN_is_negative($2)|0);
 $7 = ($6|0)!=(0);
 $8 = $7 ? 48050 : 83252;
 $9 = (_BIO_indent($0,$4,128)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_BN_is_zero($2)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  HEAP32[$vararg_buffer>>2] = $1;
  $13 = (_BIO_printf($0,47357,$vararg_buffer)|0);
  $not$ = ($13|0)>(0);
  $$ = $not$&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (_BN_num_bits($2)|0);
 $15 = (($14) + 7)|0;
 $16 = ($15|0)<(40);
 if ($16) {
  $17 = (_bn_get_words($2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_bn_get_words($2)|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $1;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $8;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $18;
  $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $8;
  $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $20;
  $21 = (_BIO_printf($0,47363,$vararg_buffer1)|0);
  $not$50 = ($21|0)>(0);
  $$47 = $not$50&1;
  $$0 = $$47;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = (_BN_num_bits($2)|0);
 $23 = (($22) + 7)|0;
 $24 = (($23|0) / 8)&-1;
 $25 = (($24) + 1)|0;
 $26 = (_CRYPTO_malloc($25,83252,0)|0);
 $27 = ($26|0)==(0|0);
 if ($27) {
  $$046 = 0;
 } else {
  HEAP8[$26>>0] = 0;
  $28 = HEAP8[$8>>0]|0;
  $29 = ($28<<24>>24)==(45);
  $30 = $29 ? 47383 : 83252;
  HEAP32[$vararg_buffer8>>2] = $1;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $30;
  $31 = (_BIO_printf($0,47395,$vararg_buffer8)|0);
  $32 = ($31|0)<(1);
  if ($32) {
   $$046 = 0;
  } else {
   $33 = ((($26)) + 1|0);
   $34 = (_BN_bn2bin($2,$33)|0);
   $35 = HEAP8[$33>>0]|0;
   $36 = ($35<<24>>24)<(0);
   $$lobit = ($35&255) >>> 7;
   $37 = $$lobit&255;
   $$045 = (($37) + ($34))|0;
   $$044 = $36 ? $26 : $33;
   $38 = (($4) + 4)|0;
   $39 = ($$045|0)==(0);
   L18: do {
    if ($39) {
     label = 17;
    } else {
     $40 = (($$045) + -1)|0;
     $$016$i = 0;
     while(1) {
      $43 = (($$016$i>>>0) % 15)&-1;
      $44 = ($43|0)==(0);
      if ($44) {
       $45 = ($$016$i|0)==(0);
       if (!($45)) {
        $46 = (_BIO_puts($0,80869)|0);
        $47 = ($46|0)<(1);
        if ($47) {
         $$015$i = 0;
         break L18;
        }
       }
       $48 = (_BIO_indent($0,$38,128)|0);
       $49 = ($48|0)==(0);
       if ($49) {
        $$015$i = 0;
        break L18;
       }
      }
      $50 = (($$044) + ($$016$i)|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = $51&255;
      $53 = ($$016$i|0)==($40|0);
      $54 = $53 ? 83252 : 80871;
      HEAP32[$vararg_buffer12>>2] = $52;
      $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
      HEAP32[$vararg_ptr15>>2] = $54;
      $55 = (_BIO_printf($0,80873,$vararg_buffer12)|0);
      $56 = ($55|0)<(1);
      $41 = (($$016$i) + 1)|0;
      if ($56) {
       $$015$i = 0;
       break L18;
      }
      $42 = ($41>>>0)<($$045>>>0);
      if ($42) {
       $$016$i = $41;
      } else {
       label = 17;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $57 = (_BIO_write($0,80869,1)|0);
    $phitmp49 = ($57|0)>(0);
    $$015$i = $phitmp49;
   }
   $$48 = $$015$i&1;
   $$046 = $$48;
  }
 }
 _CRYPTO_clear_free($26,$25,83252,0);
 $$0 = $$046;
 STACKTOP = sp;return ($$0|0);
}
function _ASN1_tag2bit($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(30);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (1088 + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _ASN1_item_d2i($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp + 8|0;
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ($0|0)==(0|0);
 $$ = $6 ? $5 : $0;
 HEAP8[$4>>0] = 0;
 $7 = (_asn1_item_embed_d2i($$,$1,$2,$3,-1,0,0,$4)|0);
 $8 = ($7|0)<(1);
 if ($8) {
  _ASN1_item_ex_free($$,$3);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = HEAP32[$$>>2]|0;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _asn1_item_embed_d2i($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$0 = 0, $$0$i224 = 0, $$0206262$lcssa = 0, $$0206262363 = 0, $$0211 = 0, $$0214244 = 0, $$0214261$lcssa = 0, $$0214261364 = 0, $$0218 = 0, $$0219 = 0, $$1215277 = 0, $$1278 = 0, $$2$lcssa = 0, $$221 = 0, $$2216$lcssa = 0, $$2216259 = 0, $$2216267 = 0, $$2255 = 0, $$2268 = 0;
 var $$3217264 = 0, $$3265 = 0, $$6 = 0, $$6235 = 0, $$lcssa338 = 0, $$lcssa340 = 0, $$pr = 0, $$pre = 0, $$pre305 = 0, $$pre306 = 0, $$pre307 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond220 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 38|0;
 $11 = sp + 37|0;
 $12 = sp + 36|0;
 $13 = sp + 24|0;
 HEAP32[$8>>2] = $2;
 $14 = ((($3)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$9>>2] = 0;
 $16 = ($0|0)==(0|0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($15|0)!=(0|0);
 if ($17) {
  $18 = ((($15)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   label = 4;
  } else {
   $$0211 = $19;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $$0211 = 0;
 }
 $21 = HEAP8[$3>>0]|0;
 $22 = $21 << 24 >> 24;
 L9: do {
  switch ($22|0) {
  case 0:  {
   $23 = ((($3)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $29 = (_asn1_d2i_ex_primitive($0,$1,$2,$3,$4,$5,$6,$7)|0);
    $$0 = $29;
    STACKTOP = sp;return ($$0|0);
   }
   $26 = ($4|0)==(-1);
   $27 = ($6<<24>>24)==(0);
   $or$cond220 = $26 & $27;
   if (!($or$cond220)) {
    _ERR_put_error(13,120,170,0,0);
    label = 98;
    break L9;
   }
   $28 = (_asn1_template_ex_d2i($0,$1,$2,$24,0,$7)|0);
   $$0 = $28;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 5:  {
   $30 = HEAP32[$1>>2]|0;
   HEAP32[$9>>2] = $30;
   $31 = (_asn1_check_tlen(0,$13,$10,0,0,$9,$2,-1,0,1,$7)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    _ERR_put_error(13,120,58,0,0);
    label = 98;
    break L9;
   }
   $33 = HEAP8[$10>>0]|0;
   $34 = ($33<<24>>24)==(0);
   if (!($34)) {
    $35 = ($6<<24>>24)==(0);
    if ($35) {
     _ERR_put_error(13,120,139,0,0);
     label = 98;
     break L9;
    } else {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $36 = HEAP32[$13>>2]|0;
   $37 = ($36>>>0)>(30);
   if ($37) {
    $$0$i224 = 0;
   } else {
    $38 = (1088 + ($36<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $$0$i224 = $39;
   }
   $40 = ((($3)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 & $$0$i224;
   $43 = ($42|0)==(0);
   if (!($43)) {
    $45 = HEAP32[$8>>2]|0;
    $46 = (_asn1_d2i_ex_primitive($0,$1,$45,$3,$36,0,0,$7)|0);
    $$0 = $46;
    STACKTOP = sp;return ($$0|0);
   }
   $44 = ($6<<24>>24)==(0);
   if ($44) {
    _ERR_put_error(13,120,140,0,0);
    label = 98;
    break L9;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 4:  {
   $47 = ((($15)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_iiiiiiiii[$48 & 31]($0,$1,$2,$3,$4,$5,$6,$7)|0);
   $$0 = $49;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 2:  {
   $50 = ($$0211|0)!=(0|0);
   if ($50) {
    $51 = (FUNCTION_TABLE_iiiii[$$0211 & 63](4,$0,$3,0)|0);
    $52 = ($51|0)==(0);
    if ($52) {
     label = 95;
     break L9;
    }
   }
   $53 = HEAP32[$0>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    $64 = (_ASN1_item_ex_new($0,$3)|0);
    $65 = ($64|0)==(0);
    if ($65) {
     _ERR_put_error(13,120,58,0,0);
     label = 98;
     break L9;
    }
   } else {
    $55 = (_asn1_get_choice_selector($0,$3)|0);
    $56 = ($55|0)>(-1);
    if ($56) {
     $57 = ((($3)) + 12|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($55|0)<($58|0);
     if ($59) {
      $60 = ((($3)) + 8|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($61) + (($55*20)|0)|0);
      $63 = (_asn1_get_field_ptr($0,$62)|0);
      _asn1_template_free($63,$62);
      (_asn1_set_choice_selector($0,-1,$3)|0);
     }
    }
   }
   $66 = HEAP32[$1>>2]|0;
   HEAP32[$9>>2] = $66;
   $67 = ((($3)) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)>(0);
   L52: do {
    if ($69) {
     $70 = ((($3)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (_asn1_get_field_ptr($0,$71)|0);
     $73 = (_asn1_template_ex_d2i($72,$9,$2,$71,1,$7)|0);
     $74 = ($73|0)==(-1);
     if ($74) {
      $$0206262363 = $71;$$0214261364 = 0;
      while(1) {
       $76 = (($$0214261364) + 1)|0;
       $77 = HEAP32[$67>>2]|0;
       $78 = ($76|0)<($77|0);
       if (!($78)) {
        $$0214244 = $76;$84 = $77;
        break L52;
       }
       $79 = ((($$0206262363)) + 20|0);
       $$pre306 = HEAP32[$8>>2]|0;
       $80 = (_asn1_get_field_ptr($0,$79)|0);
       $81 = (_asn1_template_ex_d2i($80,$9,$$pre306,$79,1,$7)|0);
       $82 = ($81|0)==(-1);
       if ($82) {
        $$0206262363 = $79;$$0214261364 = $76;
       } else {
        $$0206262$lcssa = $79;$$0214261$lcssa = $76;$$lcssa338 = $81;$$lcssa340 = $80;
        break;
       }
      }
     } else {
      $$0206262$lcssa = $71;$$0214261$lcssa = 0;$$lcssa338 = $73;$$lcssa340 = $72;
     }
     $75 = ($$lcssa338|0)>(0);
     if ($75) {
      $$pre307 = HEAP32[$67>>2]|0;
      $$0214244 = $$0214261$lcssa;$84 = $$pre307;
      break;
     } else {
      _asn1_template_free($$lcssa340,$$0206262$lcssa);
      _ERR_put_error(13,120,58,0,0);
      $$6 = $$0206262$lcssa;
      label = 96;
      break L9;
     }
    } else {
     $$0214244 = 0;$84 = $68;
    }
   } while(0);
   $83 = ($$0214244|0)==($84|0);
   if ($83) {
    $85 = ($6<<24>>24)==(0);
    if ($85) {
     _ERR_put_error(13,120,143,0,0);
     label = 98;
     break L9;
    }
    _ASN1_item_ex_free($0,$3);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    (_asn1_set_choice_selector($0,$$0214244,$3)|0);
    if ($50) {
     $86 = (FUNCTION_TABLE_iiiii[$$0211 & 63](5,$0,$3,0)|0);
     $87 = ($86|0)==(0);
     if ($87) {
      label = 95;
      break L9;
     }
    }
    $88 = HEAP32[$9>>2]|0;
    HEAP32[$1>>2] = $88;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 1: case 6:  {
   $89 = HEAP32[$1>>2]|0;
   HEAP32[$9>>2] = $89;
   $90 = ($4|0)==(-1);
   $$ = $90 ? 0 : $5;
   $$221 = $90 ? 16 : $4;
   $91 = (_asn1_check_tlen($8,0,0,$11,$12,$9,$2,$$221,$$,$6,$7)|0);
   switch ($91|0) {
   case 0:  {
    _ERR_put_error(13,120,58,0,0);
    label = 98;
    break L9;
    break;
   }
   case -1:  {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    if ($17) {
     $92 = ((($15)) + 4|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $93 & 4;
     $95 = ($94|0)==(0);
     if ($95) {
      label = 50;
     } else {
      $96 = HEAP32[$9>>2]|0;
      $97 = HEAP32[$1>>2]|0;
      $98 = (($2) - ($96))|0;
      $99 = (($98) + ($97))|0;
      HEAP32[$8>>2] = $99;
      $$0219 = 1;
     }
    } else {
     label = 50;
    }
    if ((label|0) == 50) {
     $100 = HEAP8[$11>>0]|0;
     $$0219 = $100;
    }
    $101 = HEAP8[$12>>0]|0;
    $102 = ($101<<24>>24)==(0);
    if ($102) {
     _ERR_put_error(13,120,149,0,0);
     label = 98;
     break L9;
    }
    $103 = HEAP32[$0>>2]|0;
    $104 = ($103|0)==(0|0);
    if ($104) {
     $105 = (_ASN1_item_ex_new($0,$3)|0);
     $106 = ($105|0)==(0);
     if ($106) {
      _ERR_put_error(13,120,58,0,0);
      label = 98;
      break L9;
     }
    }
    $107 = ($$0211|0)!=(0|0);
    if ($107) {
     $108 = (FUNCTION_TABLE_iiiii[$$0211 & 63](4,$0,$3,0)|0);
     $109 = ($108|0)==(0);
     if ($109) {
      label = 95;
      break L9;
     }
    }
    $110 = ((($3)) + 8|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ((($3)) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ($113|0)>(0);
    L93: do {
     if ($114) {
      $$1215277 = 0;$$1278 = $111;
      while(1) {
       $115 = HEAP32[$$1278>>2]|0;
       $116 = $115 & 768;
       $117 = ($116|0)==(0);
       if (!($117)) {
        $118 = (_asn1_do_adb($0,$$1278,0)|0);
        $119 = ($118|0)==(0|0);
        if (!($119)) {
         $120 = (_asn1_get_field_ptr($0,$118)|0);
         _asn1_template_free($120,$118);
        }
       }
       $121 = (($$1215277) + 1)|0;
       $122 = ((($$1278)) + 20|0);
       $123 = HEAP32[$112>>2]|0;
       $124 = ($121|0)<($123|0);
       if ($124) {
        $$1215277 = $121;$$1278 = $122;
       } else {
        break;
       }
      }
      $$pre = HEAP32[$110>>2]|0;
      $125 = ($123|0)>(0);
      if ($125) {
       $$2216267 = 0;$$2268 = $$pre;
       while(1) {
        $126 = (_asn1_do_adb($0,$$2268,1)|0);
        $127 = ($126|0)==(0|0);
        if ($127) {
         label = 98;
         break L9;
        }
        $128 = (_asn1_get_field_ptr($0,$126)|0);
        $129 = HEAP32[$8>>2]|0;
        $130 = ($129|0)==(0);
        if ($130) {
         $$2$lcssa = $$2268;$$2216$lcssa = $$2216267;
         label = 78;
         break L93;
        }
        $131 = HEAP32[$9>>2]|0;
        $132 = ($129|0)<(2);
        if (!($132)) {
         $133 = HEAP8[$131>>0]|0;
         $134 = ($133<<24>>24)==(0);
         if ($134) {
          $135 = ((($131)) + 1|0);
          $136 = HEAP8[$135>>0]|0;
          $137 = ($136<<24>>24)==(0);
          if ($137) {
           break;
          }
         }
        }
        $142 = HEAP32[$112>>2]|0;
        $143 = (($142) + -1)|0;
        $144 = ($$2216267|0)==($143|0);
        if ($144) {
         $$0218 = 0;
        } else {
         $145 = HEAP32[$126>>2]|0;
         $146 = $145 & 1;
         $147 = $146&255;
         $$0218 = $147;
        }
        $148 = (_asn1_template_ex_d2i($128,$9,$129,$126,$$0218,$7)|0);
        switch ($148|0) {
        case 0:  {
         $$6 = $126;
         label = 96;
         break L9;
         break;
        }
        case -1:  {
         _asn1_template_free($128,$126);
         break;
        }
        default: {
         $149 = HEAP32[$9>>2]|0;
         $150 = $131;
         $151 = HEAP32[$8>>2]|0;
         $152 = (($150) - ($149))|0;
         $153 = (($152) + ($151))|0;
         HEAP32[$8>>2] = $153;
        }
        }
        $154 = (($$2216267) + 1)|0;
        $155 = ((($$2268)) + 20|0);
        $156 = HEAP32[$112>>2]|0;
        $157 = ($154|0)<($156|0);
        if ($157) {
         $$2216267 = $154;$$2268 = $155;
        } else {
         $$2$lcssa = $155;$$2216$lcssa = $154;
         label = 78;
         break L93;
        }
       }
       $138 = ((($131)) + 2|0);
       HEAP32[$9>>2] = $138;
       $139 = HEAP8[$11>>0]|0;
       $140 = ($139<<24>>24)==(0);
       if ($140) {
        _ERR_put_error(13,120,159,0,0);
        label = 98;
        break L9;
       } else {
        $141 = (($129) + -2)|0;
        HEAP32[$8>>2] = $141;
        HEAP8[$11>>0] = 0;
        $$2216259 = $$2216267;$$2255 = $$2268;$168 = $141;
        break;
       }
      } else {
       $$2$lcssa = $$pre;$$2216$lcssa = 0;
       label = 78;
      }
     } else {
      $$2$lcssa = $111;$$2216$lcssa = 0;
      label = 78;
     }
    } while(0);
    do {
     if ((label|0) == 78) {
      $$pr = HEAP8[$11>>0]|0;
      $158 = ($$pr<<24>>24)==(0);
      $$pre305 = HEAP32[$8>>2]|0;
      if ($158) {
       $$2216259 = $$2216$lcssa;$$2255 = $$2$lcssa;$168 = $$pre305;
      } else {
       $159 = ($$pre305|0)<(2);
       if (!($159)) {
        $160 = HEAP32[$9>>2]|0;
        $161 = HEAP8[$160>>0]|0;
        $162 = ($161<<24>>24)==(0);
        if ($162) {
         $163 = ((($160)) + 1|0);
         $164 = HEAP8[$163>>0]|0;
         $165 = ($164<<24>>24)==(0);
         if ($165) {
          $166 = ((($160)) + 2|0);
          HEAP32[$9>>2] = $166;
          $$2216259 = $$2216$lcssa;$$2255 = $$2$lcssa;$168 = $$pre305;
          break;
         }
        }
       }
       _ERR_put_error(13,120,137,0,0);
       label = 98;
       break L9;
      }
     }
    } while(0);
    $167 = ($$0219<<24>>24)==(0);
    $169 = ($168|0)!=(0);
    $or$cond = $167 & $169;
    if ($or$cond) {
     _ERR_put_error(13,120,148,0,0);
     label = 98;
     break L9;
    }
    $170 = HEAP32[$112>>2]|0;
    $171 = ($$2216259|0)<($170|0);
    L132: do {
     if ($171) {
      $$3217264 = $$2216259;$$3265 = $$2255;
      while(1) {
       $172 = (_asn1_do_adb($0,$$3265,1)|0);
       $173 = ($172|0)==(0|0);
       if ($173) {
        label = 98;
        break L9;
       }
       $174 = HEAP32[$172>>2]|0;
       $175 = $174 & 1;
       $176 = ($175|0)==(0);
       if ($176) {
        break;
       }
       $179 = (_asn1_get_field_ptr($0,$172)|0);
       _asn1_template_free($179,$172);
       $180 = ((($$3265)) + 20|0);
       $181 = (($$3217264) + 1)|0;
       $182 = HEAP32[$112>>2]|0;
       $183 = ($181|0)<($182|0);
       if ($183) {
        $$3217264 = $181;$$3265 = $180;
       } else {
        break L132;
       }
      }
      _ERR_put_error(13,120,121,0,0);
      $177 = ((($3)) + 24|0);
      $178 = HEAP32[$177>>2]|0;
      $$6235 = $172;$197 = $178;
      label = 97;
      break L9;
     }
    } while(0);
    $184 = HEAP32[$1>>2]|0;
    $185 = HEAP32[$9>>2]|0;
    $186 = $184;
    $187 = (($185) - ($186))|0;
    $188 = (_asn1_enc_save($0,$184,$187,$3)|0);
    $189 = ($188|0)==(0);
    if ($189) {
     label = 95;
     break L9;
    }
    if ($107) {
     $190 = (FUNCTION_TABLE_iiiii[$$0211 & 63](5,$0,$3,0)|0);
     $191 = ($190|0)==(0);
     if ($191) {
      label = 95;
      break L9;
     }
    }
    HEAP32[$1>>2] = $185;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   }
   break;
  }
  default: {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 if ((label|0) == 95) {
  _ERR_put_error(13,120,100,0,0);
  label = 98;
 }
 else if ((label|0) == 96) {
  $192 = ($$6|0)==(0|0);
  $193 = ((($3)) + 24|0);
  $194 = HEAP32[$193>>2]|0;
  if ($192) {
   $200 = $194;
  } else {
   $$6235 = $$6;$197 = $194;
   label = 97;
  }
 }
 if ((label|0) == 97) {
  $195 = ((($$6235)) + 12|0);
  $196 = HEAP32[$195>>2]|0;
  HEAP32[$vararg_buffer>>2] = 47401;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $196;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 47408;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $197;
  _ERR_add_error_data(4,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 98) {
  $198 = ((($3)) + 24|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = $199;
 }
 HEAP32[$vararg_buffer4>>2] = 47416;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $200;
 _ERR_add_error_data(2,$vararg_buffer4);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _asn1_template_ex_d2i($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$032$ph = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = sp + 9|0;
 $9 = sp + 8|0;
 $10 = ($0|0)==(0|0);
 if ($10) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $11 = HEAP32[$3>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 HEAP32[$7>>2] = $12;
 $13 = $11 & 16;
 $14 = ($13|0)==(0);
 if ($14) {
  $41 = (_asn1_template_noexp_d2i($0,$1,$2,$3,$4,$5)|0);
  $$1 = $41;
  STACKTOP = sp;return ($$1|0);
 }
 $15 = $11 & 192;
 $16 = ((($3)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_asn1_check_tlen($6,0,0,$8,$9,$7,$2,$17,$15,$4,$5)|0);
 $19 = HEAP32[$7>>2]|0;
 L8: do {
  switch ($18|0) {
  case 0:  {
   _ERR_put_error(13,132,58,0,0);
   $$032$ph = 0;
   break;
  }
  case -1:  {
   $$032$ph = -1;
   break;
  }
  default: {
   $20 = HEAP8[$9>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    _ERR_put_error(13,132,120,0,0);
    $$032$ph = 0;
    break L8;
   }
   $22 = HEAP32[$6>>2]|0;
   $23 = (_asn1_template_noexp_d2i($0,$7,$22,$3,0,$5)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    _ERR_put_error(13,132,58,0,0);
    $$032$ph = 0;
    break L8;
   }
   $25 = HEAP32[$7>>2]|0;
   $26 = HEAP32[$6>>2]|0;
   $27 = (($19) - ($25))|0;
   $28 = (($26) + ($27))|0;
   HEAP32[$6>>2] = $28;
   $29 = HEAP8[$8>>0]|0;
   $30 = ($29<<24>>24)==(0);
   $31 = $25;
   do {
    if ($30) {
     $40 = ($28|0)==(0);
     if ($40) {
      $42 = $25;
      label = 19;
     } else {
      _ERR_put_error(13,132,119,0,0);
      label = 20;
     }
    } else {
     $32 = ($28|0)<(2);
     if (!($32)) {
      $33 = HEAP8[$31>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $35 = ((($31)) + 1|0);
       $36 = HEAP8[$35>>0]|0;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $38 = ((($31)) + 2|0);
        HEAP32[$7>>2] = $38;
        $39 = $38;
        $42 = $39;
        label = 19;
        break;
       }
      }
     }
     _ERR_put_error(13,132,137,0,0);
     label = 20;
    }
   } while(0);
   if ((label|0) == 19) {
    HEAP32[$1>>2] = $42;
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   }
   else if ((label|0) == 20) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
  }
  }
 } while(0);
 $$1 = $$032$ph;
 STACKTOP = sp;return ($$1|0);
}
function _asn1_d2i_ex_primitive($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$$053 = 0, $$0$i20$i = 0, $$018$ph51$i = 0, $$01843$i = 0, $$019$ph50$i = 0, $$01942$i = 0, $$01942$lcssa$i = 0, $$029$ph48$i = 0, $$031$ph47$i = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$053 = 0, $$080$i = 0, $$081$i = 0, $$083$i = 0, $$085$i = 0, $$1 = 0, $$1$i = 0;
 var $$130$i = 0, $$132$i = 0, $$184$i = 0, $$old$i = 0, $$old86$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi81Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre64$i = 0, $$pre66$i = 0, $$sroa$0$0$ph49$i = 0, $$sroa$0$041$i = 0, $$sroa$0$2$i = 0, $$sroa$0$3$i = 0, $$sroa$0$434$i = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 $10 = sp + 36|0;
 $11 = sp + 32|0;
 $12 = sp + 28|0;
 $13 = sp + 24|0;
 $14 = sp + 20|0;
 $15 = sp + 51|0;
 $16 = sp + 50|0;
 $17 = sp + 49|0;
 $18 = sp + 16|0;
 $19 = sp;
 $20 = sp + 48|0;
 HEAP8[$17>>0] = 0;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;
 $21 = ($0|0)==(0|0);
 if ($21) {
  _ERR_put_error(13,108,125,0,0);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $22 = HEAP8[$3>>0]|0;
 $23 = ($22<<24>>24)==(5);
 if ($23) {
  $$053 = -1;$storemerge = $4;
 } else {
  $24 = ((($3)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $$053 = $4;$storemerge = $25;
 }
 HEAP32[$13>>2] = $storemerge;
 $26 = ($storemerge|0)==(-4);
 if ($26) {
  $27 = ($$053|0)>(-1);
  if ($27) {
   _ERR_put_error(13,108,127,0,0);
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  $28 = ($6<<24>>24)==(0);
  if (!($28)) {
   _ERR_put_error(13,108,126,0,0);
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  $29 = HEAP32[$1>>2]|0;
  HEAP32[$18>>2] = $29;
  $30 = (_asn1_check_tlen(0,$13,$20,0,0,$18,$2,-1,0,0,$7)|0);
  $31 = ($30|0)==(0);
  if ($31) {
   _ERR_put_error(13,108,58,0,0);
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  $32 = HEAP8[$20>>0]|0;
  $33 = ($32<<24>>24)==(0);
  if ($33) {
   $$pre$pre = HEAP32[$13>>2]|0;
   $$pre = $$pre$pre;
  } else {
   HEAP32[$13>>2] = -3;
   $$pre = -3;
  }
  $$pre$phi81Z2D = $18;$$pre$phiZ2D = $1;$35 = $$pre;
 } else {
  $$pre$phi81Z2D = $18;$$pre$phiZ2D = $1;$35 = $storemerge;
 }
 $34 = ($$053|0)==(-1);
 $$ = $34 ? 0 : $5;
 $$$053 = $34 ? $35 : $$053;
 $36 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$$pre$phi81Z2D>>2] = $36;
 $37 = (_asn1_check_tlen($14,0,0,$16,$15,$18,$2,$$$053,$$,$6,$7)|0);
 switch ($37|0) {
 case 0:  {
  _ERR_put_error(13,108,58,0,0);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
  break;
 }
 case -1:  {
  $$1 = -1;
  STACKTOP = sp;return ($$1|0);
  break;
 }
 default: {
  $38 = HEAP32[$13>>2]|0;
  L30: do {
   switch ($38|0) {
   case -3:  {
    $39 = ($7|0)==(0|0);
    if ($39) {
     label = 24;
    } else {
     HEAP8[$7>>0] = 0;
     label = 24;
    }
    break;
   }
   case 17: case 16:  {
    $40 = HEAP8[$15>>0]|0;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     _ERR_put_error(13,108,156,0,0);
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    } else {
     label = 24;
    }
    break;
   }
   default: {
    $87 = HEAP8[$15>>0]|0;
    $88 = ($87<<24>>24)==(0);
    if ($88) {
     $101 = HEAP32[$18>>2]|0;
     $102 = HEAP32[$14>>2]|0;
     $103 = (($101) + ($102)|0);
     HEAP32[$18>>2] = $103;
     $$049 = $102;$$050 = $101;
     label = 59;
     break L30;
    }
    switch ($38|0) {
    case 1: case 2: case 5: case 6: case 10:  {
     _ERR_put_error(13,108,195,0,0);
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
     break;
    }
    default: {
    }
    }
    HEAP8[$17>>0] = 1;
    $89 = HEAP32[$14>>2]|0;
    $90 = HEAP8[$16>>0]|0;
    $91 = (_asn1_collect($19,$18,$89,$90,0)|0);
    $92 = ($91|0)==(0);
    if ($92) {
     $$051 = 0;
    } else {
     $93 = HEAP32[$19>>2]|0;
     $94 = (($93) + 1)|0;
     $95 = (_BUF_MEM_grow_clean($19,$94)|0);
     $96 = ($95|0)==(0);
     if ($96) {
      _ERR_put_error(13,108,65,0,0);
      $$051 = 0;
      break L30;
     } else {
      $97 = ((($19)) + 4|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($98) + ($93)|0);
      HEAP8[$99>>0] = 0;
      $100 = HEAP32[$97>>2]|0;
      $$049 = $93;$$050 = $100;
      label = 59;
      break L30;
     }
    }
   }
   }
  } while(0);
  L48: do {
   if ((label|0) == 24) {
    $42 = HEAP32[$1>>2]|0;
    $43 = HEAP8[$16>>0]|0;
    $44 = ($43<<24>>24)==(0);
    $45 = HEAP32[$14>>2]|0;
    if ($44) {
     $81 = HEAP32[$18>>2]|0;
     $82 = $81;
     $83 = $42;
     $84 = (($45) - ($83))|0;
     $85 = (($84) + ($82))|0;
     $86 = (($81) + ($45)|0);
     HEAP32[$18>>2] = $86;
     $$049 = $85;$$050 = $42;
     label = 59;
     break;
    }
    $46 = ($45|0)>(0);
    L53: do {
     if ($46) {
      $47 = HEAP32[$$pre$phi81Z2D>>2]|0;
      $$018$ph51$i = 1;$$019$ph50$i = $45;$$029$ph48$i = 0;$$031$ph47$i = $43;$$sroa$0$0$ph49$i = $47;
      L55: while(1) {
       $$01843$i = $$018$ph51$i;$$01942$i = $$019$ph50$i;$$sroa$0$041$i = $$sroa$0$0$ph49$i;
       while(1) {
        $48 = ($$01942$i|0)==(1);
        $$pre66$i = $$sroa$0$041$i;
        if ($48) {
         $$01942$lcssa$i = 1;
         break;
        }
        $49 = HEAP8[$$pre66$i>>0]|0;
        $50 = ($49<<24>>24)==(0);
        if (!($50)) {
         $$01942$lcssa$i = $$01942$i;
         break;
        }
        $51 = ((($$pre66$i)) + 1|0);
        $52 = HEAP8[$51>>0]|0;
        $53 = ($52<<24>>24)==(0);
        if (!($53)) {
         $$01942$lcssa$i = $$01942$i;
         break;
        }
        $54 = ((($$pre66$i)) + 2|0);
        $55 = $54;
        $56 = (($$01843$i) + -1)|0;
        $57 = ($56|0)==(0);
        if ($57) {
         $$sroa$0$434$i = $55;
         break L55;
        }
        $58 = (($$01942$i) + -2)|0;
        $59 = ($$01942$i|0)>(2);
        if ($59) {
         $$01843$i = $56;$$01942$i = $58;$$sroa$0$041$i = $55;
        } else {
         break L53;
        }
       }
       HEAP32[$12>>2] = $$pre66$i;
       $60 = (_ASN1_get_object($12,$11,$9,$10,$$01942$lcssa$i)|0);
       $61 = $60 & 128;
       $62 = ($61|0)==(0);
       if ($62) {
        $63 = $60 & 1;
        $64 = ($63|0)==(0);
        if ($64) {
         $$pre$i = HEAP32[$11>>2]|0;
         $$pre64$i = HEAP32[$12>>2]|0;
         $161 = $$pre64$i;$162 = $$pre$i;
        } else {
         $65 = (($$01942$lcssa$i) + ($$sroa$0$041$i))|0;
         $66 = HEAP32[$12>>2]|0;
         $67 = (($65) - ($66))|0;
         HEAP32[$11>>2] = $67;
         $161 = $66;$162 = $67;
        }
        $68 = $63&255;
        $$0$i20$i = 0;$$130$i = $162;$$132$i = $68;$$sroa$0$2$i = $161;
       } else {
        _ERR_put_error(13,104,102,0,0);
        $$0$i20$i = 1;$$130$i = $$029$ph48$i;$$132$i = $$031$ph47$i;$$sroa$0$2$i = $$sroa$0$041$i;
       }
       if ($$0$i20$i) {
        label = 39;
        break;
       }
       $69 = ($$132$i<<24>>24)==(0);
       if ($69) {
        $72 = $$sroa$0$2$i;
        $73 = (($72) + ($$130$i)|0);
        $74 = $73;
        $$1$i = $$01843$i;$$sroa$0$3$i = $74;
       } else {
        $70 = ($$01843$i|0)==(-1);
        if ($70) {
         label = 42;
         break;
        }
        $71 = (($$01843$i) + 1)|0;
        $$1$i = $71;$$sroa$0$3$i = $$sroa$0$2$i;
       }
       $75 = (($$01942$lcssa$i) + ($$sroa$0$041$i))|0;
       $76 = (($75) - ($$sroa$0$3$i))|0;
       $77 = ($76|0)>(0);
       if ($77) {
        $$018$ph51$i = $$1$i;$$019$ph50$i = $76;$$029$ph48$i = $$130$i;$$031$ph47$i = $$132$i;$$sroa$0$0$ph49$i = $$sroa$0$3$i;
       } else {
        label = 47;
        break;
       }
      }
      if ((label|0) == 39) {
       _ERR_put_error(13,190,58,0,0);
       $$051 = 0;
       break L48;
      }
      else if ((label|0) == 42) {
       _ERR_put_error(13,190,58,0,0);
       $$051 = 0;
       break L48;
      }
      else if ((label|0) == 47) {
       $78 = ($$1$i|0)==(0);
       if ($78) {
        $$sroa$0$434$i = $$sroa$0$3$i;
       } else {
        break;
       }
      }
      HEAP32[$$pre$phi81Z2D>>2] = $$sroa$0$434$i;
      $79 = $42;
      $80 = (($$sroa$0$434$i) - ($79))|0;
      $$049 = $80;$$050 = $42;
      label = 59;
      break L48;
     }
    } while(0);
    _ERR_put_error(13,190,137,0,0);
    $$051 = 0;
   }
  } while(0);
  L84: do {
   if ((label|0) == 59) {
    $104 = HEAP32[$13>>2]|0;
    HEAP32[$8>>2] = $$050;
    $105 = ((($3)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ($106|0)==(0|0);
    $108 = $$050;
    if ($107) {
     label = 61;
    } else {
     $109 = ((($106)) + 20|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      label = 61;
     } else {
      $154 = (FUNCTION_TABLE_iiiiiii[$110 & 31]($0,$$050,$$049,$104,$17,$3)|0);
      $155 = ($154|0)==(0);
      if ($155) {
       $$051 = 0;
       break;
      }
     }
    }
    do {
     if ((label|0) == 61) {
      $112 = ((($3)) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(-4);
      L91: do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = ($115|0)==(0|0);
        do {
         if ($116) {
          $117 = (_ASN1_TYPE_new()|0);
          $118 = ($117|0)==(0|0);
          if ($118) {
           _ASN1_TYPE_free(0);
           break L91;
          } else {
           HEAP32[$0>>2] = $117;
           $$083$i = $117;
           break;
          }
         } else {
          $$083$i = $115;
         }
        } while(0);
        $119 = HEAP32[$$083$i>>2]|0;
        $120 = ($119|0)==($104|0);
        if (!($120)) {
         _ASN1_TYPE_set($$083$i,$104,0);
        }
        $121 = ((($$083$i)) + 4|0);
        $$080$i = $121;$$081$i = $0;$$184$i = $$083$i;
        label = 70;
       } else {
        $$080$i = $0;$$081$i = 0;$$184$i = 0;
        label = 70;
       }
      } while(0);
      if ((label|0) == 70) {
       L105: do {
        switch ($104|0) {
        case 6:  {
         $122 = (_c2i_ASN1_OBJECT($$080$i,$8,$$049)|0);
         $123 = ($122|0)==(0|0);
         if (!($123)) {
          label = 98;
         }
         break;
        }
        case 5:  {
         $124 = ($$049|0)==(0);
         if ($124) {
          HEAP32[$$080$i>>2] = (1);
          label = 94;
          break L105;
         } else {
          _ERR_put_error(13,204,144,0,0);
          break L105;
         }
         break;
        }
        case 1:  {
         $125 = ($$049|0)==(1);
         if ($125) {
          $126 = HEAP8[$$050>>0]|0;
          $127 = $126&255;
          HEAP32[$$080$i>>2] = $127;
          label = 98;
          break L105;
         } else {
          _ERR_put_error(13,204,106,0,0);
          break L105;
         }
         break;
        }
        case 3:  {
         $128 = (_c2i_ASN1_BIT_STRING($$080$i,$8,$$049)|0);
         $129 = ($128|0)==(0|0);
         if (!($129)) {
          label = 98;
         }
         break;
        }
        case 10: case 2:  {
         $130 = (_c2i_ASN1_INTEGER($$080$i,$8,$$049)|0);
         $131 = ($130|0)==(0|0);
         if (!($131)) {
          $132 = HEAP32[$$080$i>>2]|0;
          $133 = ((($132)) + 4|0);
          $134 = HEAP32[$133>>2]|0;
          $135 = $134 & 256;
          $136 = $135 | $104;
          HEAP32[$133>>2] = $136;
          label = 94;
         }
         break;
        }
        case 30:  {
         $137 = $$049 & 1;
         $138 = ($137|0)==(0);
         if ($138) {
          label = 85;
         } else {
          _ERR_put_error(13,204,214,0,0);
         }
         break;
        }
        case 28:  {
         $$old$i = $$049 & 3;
         $$old86$i = ($$old$i|0)==(0);
         if ($$old86$i) {
          label = 85;
         } else {
          _ERR_put_error(13,204,215,0,0);
         }
         break;
        }
        default: {
         label = 85;
        }
        }
       } while(0);
       L122: do {
        if ((label|0) == 85) {
         $139 = HEAP32[$$080$i>>2]|0;
         $140 = ($139|0)==(0|0);
         do {
          if ($140) {
           $141 = (_ASN1_STRING_type_new($104)|0);
           $142 = ($141|0)==(0|0);
           if ($142) {
            _ERR_put_error(13,204,65,0,0);
            break L122;
           } else {
            HEAP32[$$080$i>>2] = $141;
            $$085$i = $141;
            break;
           }
          } else {
           $143 = ((($139)) + 4|0);
           HEAP32[$143>>2] = $104;
           $$085$i = $139;
          }
         } while(0);
         $144 = HEAP8[$17>>0]|0;
         $145 = ($144<<24>>24)==(0);
         if (!($145)) {
          $146 = ((($$085$i)) + 8|0);
          $147 = HEAP32[$146>>2]|0;
          _CRYPTO_free($147,83252,0);
          HEAP32[$146>>2] = $108;
          HEAP32[$$085$i>>2] = $$049;
          HEAP8[$17>>0] = 0;
          label = 98;
          break;
         }
         $148 = (_ASN1_STRING_set($$085$i,$$050,$$049)|0);
         $149 = ($148|0)==(0);
         if ($149) {
          _ERR_put_error(13,204,65,0,0);
          _ASN1_STRING_free($$085$i);
          HEAP32[$$080$i>>2] = 0;
         } else {
          label = 98;
         }
        }
        else if ((label|0) == 94) {
         $150 = ($$184$i|0)!=(0|0);
         $151 = ($104|0)==(5);
         $or$cond$i = $151 & $150;
         if ($or$cond$i) {
          $152 = ((($$184$i)) + 4|0);
          HEAP32[$152>>2] = 0;
          label = 98;
         } else {
          label = 98;
         }
        }
       } while(0);
       if ((label|0) == 98) {
        break;
       }
       _ASN1_TYPE_free($$184$i);
       $153 = ($$081$i|0)==(0|0);
       if (!($153)) {
        HEAP32[$$081$i>>2] = 0;
       }
      }
      $$051 = 0;
      break L84;
     }
    } while(0);
    $156 = HEAP32[$$pre$phi81Z2D>>2]|0;
    HEAP32[$$pre$phiZ2D>>2] = $156;
    $$051 = 1;
   }
  } while(0);
  $157 = HEAP8[$17>>0]|0;
  $158 = ($157<<24>>24)==(0);
  if ($158) {
   $$1 = $$051;
   STACKTOP = sp;return ($$1|0);
  }
  $159 = ((($19)) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  _CRYPTO_free($160,83252,0);
  $$1 = $$051;
  STACKTOP = sp;return ($$1|0);
 }
 }
 return (0)|0;
}
function _asn1_check_tlen($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$053 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $or$cond = 0, $or$cond56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp + 12|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = HEAP32[$5>>2]|0;
 HEAP32[$14>>2] = $15;
 $16 = ($10|0)!=(0|0);
 do {
  if ($16) {
   $17 = HEAP8[$10>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if (!($18)) {
    $19 = ((($10)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($10)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$13>>2] = $22;
    $23 = ((($10)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$12>>2] = $24;
    $25 = ((($10)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    HEAP32[$11>>2] = $26;
    $27 = ((($10)) + 20|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($15) + ($28)|0);
    HEAP32[$14>>2] = $29;
    $$053 = $20;
    break;
   }
   $31 = (_ASN1_get_object($14,$13,$11,$12,$6)|0);
   $32 = ((($10)) + 4|0);
   HEAP32[$32>>2] = $31;
   $33 = HEAP32[$13>>2]|0;
   $34 = ((($10)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$12>>2]|0;
   $36 = ((($10)) + 16|0);
   HEAP32[$36>>2] = $35;
   $37 = HEAP32[$11>>2]|0;
   $38 = ((($10)) + 12|0);
   HEAP32[$38>>2] = $37;
   $39 = HEAP32[$14>>2]|0;
   $40 = $15;
   $41 = (($39) - ($40))|0;
   $42 = ((($10)) + 20|0);
   HEAP32[$42>>2] = $41;
   HEAP8[$10>>0] = 1;
   $43 = $31 & 129;
   $44 = ($43|0)==(0);
   $45 = (($41) + ($33))|0;
   $46 = ($45|0)>($6|0);
   $or$cond56 = $44 & $46;
   if ($or$cond56) {
    _ERR_put_error(13,104,155,0,0);
    HEAP8[$10>>0] = 0;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$053 = $31;
   }
  } else {
   $30 = (_ASN1_get_object($14,$13,$11,$12,$6)|0);
   $$053 = $30;
  }
 } while(0);
 $47 = $$053 & 128;
 $48 = ($47|0)==(0);
 if (!($48)) {
  _ERR_put_error(13,104,102,0,0);
  if (!($16)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$10>>0] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = ($7|0)>(-1);
 do {
  if ($49) {
   $50 = HEAP32[$11>>2]|0;
   $51 = ($50|0)==($7|0);
   $52 = HEAP32[$12>>2]|0;
   $53 = ($52|0)==($8|0);
   $or$cond = $51 & $53;
   if ($or$cond) {
    if (!($16)) {
     break;
    }
    HEAP8[$10>>0] = 0;
    break;
   }
   $54 = ($9<<24>>24)==(0);
   if (!($54)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   if ($16) {
    HEAP8[$10>>0] = 0;
   }
   _ERR_put_error(13,104,168,0,0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $55 = $$053 & 1;
 $56 = ($55|0)==(0);
 if (!($56)) {
  $57 = HEAP32[$14>>2]|0;
  $58 = $15;
  $59 = (($58) + ($6))|0;
  $60 = (($59) - ($57))|0;
  HEAP32[$13>>2] = $60;
 }
 $61 = ($3|0)==(0|0);
 if (!($61)) {
  $62 = $55&255;
  HEAP8[$3>>0] = $62;
 }
 $63 = ($4|0)==(0|0);
 if (!($63)) {
  $64 = $$053 & 32;
  $65 = $64&255;
  HEAP8[$4>>0] = $65;
 }
 $66 = ($0|0)==(0|0);
 if (!($66)) {
  $67 = HEAP32[$13>>2]|0;
  HEAP32[$0>>2] = $67;
 }
 $68 = ($2|0)==(0|0);
 if (!($68)) {
  $69 = HEAP32[$12>>2]|0;
  $70 = $69&255;
  HEAP8[$2>>0] = $70;
 }
 $71 = ($1|0)==(0|0);
 if (!($71)) {
  $72 = HEAP32[$11>>2]|0;
  HEAP32[$1>>2] = $72;
 }
 $73 = HEAP32[$14>>2]|0;
 HEAP32[$5>>2] = $73;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _asn1_collect($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i1 = 0, $$0$i1$us = 0, $$01013 = 0, $$01013$us = 0, $$02416 = 0, $$02416$us = 0, $$0715 = 0, $$0814 = 0, $$1 = 0, $$111 = 0, $$111$us = 0, $$19 = 0, $$19$us = 0, $$lcssa = 0, $$pre = 0, $$pre26 = 0, $$pre28 = 0, $$pre30 = 0, $$pre31 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $10;
 $11 = $3 & 1;
 $12 = ($0|0)!=(0|0);
 $13 = ($11<<24>>24)!=(0);
 $or$cond = $12 | $13;
 $14 = $10;
 if (!($or$cond)) {
  $57 = (($14) + ($2)|0);
  HEAP32[$1>>2] = $57;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($2|0)>(0);
 L5: do {
  if ($15) {
   $16 = ($0|0)==(0|0);
   $17 = ((($0)) + 4|0);
   $18 = ($4|0)>(4);
   $19 = (($4) + 1)|0;
   L7: do {
    if ($18) {
     $$01013$us = 0;$$02416$us = $2;$103 = $10;$22 = $14;$52 = $10;
     while(1) {
      $20 = ($$02416$us|0)==(1);
      if (!($20)) {
       $21 = HEAP8[$22>>0]|0;
       $23 = ($21<<24>>24)==(0);
       if ($23) {
        $24 = ((($22)) + 1|0);
        $25 = HEAP8[$24>>0]|0;
        $26 = ($25<<24>>24)==(0);
        if ($26) {
         $$lcssa = $22;
         label = 25;
         break L7;
        }
       }
      }
      HEAP32[$8>>2] = $22;
      $27 = (_ASN1_get_object($8,$7,$5,$6,$$02416$us)|0);
      $28 = $27 & 128;
      $29 = ($28|0)==(0);
      if ($29) {
       $30 = $27 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        $$pre30 = HEAP32[$7>>2]|0;
        $$pre31 = HEAP32[$8>>2]|0;
        $107 = $$pre30;$38 = $$pre31;
       } else {
        $32 = $22;
        $33 = (($32) + ($$02416$us))|0;
        $34 = HEAP32[$8>>2]|0;
        $35 = (($33) - ($34))|0;
        HEAP32[$7>>2] = $35;
        $107 = $35;$38 = $34;
       }
       $36 = $27 & 32;
       $37 = $36&255;
       HEAP32[$9>>2] = $38;
       $39 = $38;
       $$0$i1$us = 0;$$111$us = $107;$$19$us = $37;$105 = $38;$106 = $38;$48 = $39;
      } else {
       _ERR_put_error(13,104,102,0,0);
       $$0$i1$us = 1;$$111$us = $$01013$us;$$19$us = 0;$105 = $103;$106 = $52;$48 = $22;
      }
      if ($$0$i1$us) {
       label = 34;
       break L7;
      }
      $40 = ($$19$us<<24>>24)==(0);
      if (!($40)) {
       break;
      }
      $41 = ($$111$us|0)==(0);
      if ($41) {
       $108 = $105;$54 = $106;
      } else {
       if (!($16)) {
        $42 = HEAP32[$0>>2]|0;
        $43 = (($42) + ($$111$us))|0;
        $44 = (_BUF_MEM_grow_clean($0,$43)|0);
        $45 = ($44|0)==(0);
        if ($45) {
         label = 42;
         break L7;
        }
        $46 = HEAP32[$17>>2]|0;
        $47 = (($46) + ($42)|0);
        _memcpy(($47|0),($48|0),($$111$us|0))|0;
       }
       $49 = (($48) + ($$111$us)|0);
       HEAP32[$9>>2] = $49;
       $50 = $49;
       $108 = $50;$54 = $50;
      }
      $51 = (($52) + ($$02416$us))|0;
      $53 = (($51) - ($54))|0;
      $55 = ($53|0)>(0);
      $56 = $54;
      if ($55) {
       $$01013$us = $$111$us;$$02416$us = $53;$103 = $108;$22 = $56;$52 = $54;
      } else {
       $102 = $108;
       label = 46;
       break L5;
      }
     }
     _ERR_put_error(13,106,197,0,0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $$01013 = 0;$$02416 = $2;$$0715 = 0;$$0814 = 0;$104 = $10;$60 = $14;$95 = $10;
     while(1) {
      $58 = ($$02416|0)==(1);
      if (!($58)) {
       $59 = HEAP8[$60>>0]|0;
       $61 = ($59<<24>>24)==(0);
       if ($61) {
        $62 = ((($60)) + 1|0);
        $63 = HEAP8[$62>>0]|0;
        $64 = ($63<<24>>24)==(0);
        if ($64) {
         $$lcssa = $60;
         label = 25;
         break L7;
        }
       }
      }
      HEAP32[$8>>2] = $60;
      $67 = (_ASN1_get_object($8,$7,$5,$6,$$02416)|0);
      $68 = $67 & 128;
      $69 = ($68|0)==(0);
      if ($69) {
       $70 = $67 & 1;
       $71 = ($70|0)==(0);
       if ($71) {
        $$pre = HEAP32[$7>>2]|0;
        $$pre26 = HEAP32[$8>>2]|0;
        $111 = $$pre;$79 = $$pre26;
       } else {
        $72 = $60;
        $73 = (($72) + ($$02416))|0;
        $74 = HEAP32[$8>>2]|0;
        $75 = (($73) - ($74))|0;
        HEAP32[$7>>2] = $75;
        $111 = $75;$79 = $74;
       }
       $76 = $70&255;
       $77 = $67 & 32;
       $78 = $77&255;
       HEAP32[$9>>2] = $79;
       $80 = $79;
       $$0$i1 = 0;$$1 = $76;$$111 = $111;$$19 = $78;$109 = $79;$110 = $79;$91 = $80;
      } else {
       _ERR_put_error(13,104,102,0,0);
       $$0$i1 = 1;$$1 = $$0715;$$111 = $$01013;$$19 = $$0814;$109 = $104;$110 = $95;$91 = $60;
      }
      if ($$0$i1) {
       label = 34;
       break L7;
      }
      $81 = ($$19<<24>>24)==(0);
      if ($81) {
       $84 = ($$111|0)==(0);
       if ($84) {
        $112 = $109;$97 = $110;
       } else {
        if (!($16)) {
         $85 = HEAP32[$0>>2]|0;
         $86 = (($85) + ($$111))|0;
         $87 = (_BUF_MEM_grow_clean($0,$86)|0);
         $88 = ($87|0)==(0);
         if ($88) {
          label = 42;
          break L7;
         }
         $89 = HEAP32[$17>>2]|0;
         $90 = (($89) + ($85)|0);
         _memcpy(($90|0),($91|0),($$111|0))|0;
        }
        $92 = (($91) + ($$111)|0);
        HEAP32[$9>>2] = $92;
        $93 = $92;
        $112 = $93;$97 = $93;
       }
      } else {
       $82 = (_asn1_collect($0,$9,$$111,$$1,$19)|0);
       $83 = ($82|0)==(0);
       if ($83) {
        $$0 = 0;
        break;
       }
       $$pre28 = HEAP32[$9>>2]|0;
       $112 = $$pre28;$97 = $$pre28;
      }
      $94 = (($95) + ($$02416))|0;
      $96 = (($94) - ($97))|0;
      $98 = ($96|0)>(0);
      $99 = $97;
      if ($98) {
       $$01013 = $$111;$$02416 = $96;$$0715 = $$1;$$0814 = $$19;$104 = $112;$60 = $99;$95 = $97;
      } else {
       $102 = $112;
       label = 46;
       break L5;
      }
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   if ((label|0) == 25) {
    $65 = ((($$lcssa)) + 2|0);
    HEAP32[$9>>2] = $65;
    $66 = $65;
    if ($13) {
     $101 = $66;
     break;
    }
    _ERR_put_error(13,106,159,0,0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    _ERR_put_error(13,106,58,0,0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 42) {
    _ERR_put_error(13,140,65,0,0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $102 = $10;
   label = 46;
  }
 } while(0);
 if ((label|0) == 46) {
  $100 = ($11<<24>>24)==(0);
  if ($100) {
   $101 = $102;
  } else {
   _ERR_put_error(13,106,137,0,0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$1>>2] = $101;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _asn1_template_noexp_d2i($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$ph = 0, $$060 = 0, $$061 = 0, $$062 = 0, $$064 = 0, $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $9 = 0, $cond = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$6>>2] = $2;
 $12 = ($0|0)==(0|0);
 if ($12) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = $13 & 192;
 $15 = HEAP32[$1>>2]|0;
 HEAP32[$8>>2] = $15;
 $16 = $13 & 4096;
 $17 = ($16|0)==(0);
 if ($17) {
  $$064 = $0;
 } else {
  HEAP32[$7>>2] = $0;
  $$064 = $7;
 }
 $18 = $13 & 6;
 $19 = ($18|0)==(0);
 L7: do {
  if ($19) {
   $72 = $13 & 8;
   $73 = ($72|0)==(0);
   $74 = ((($3)) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   if ($73) {
    $79 = (_asn1_item_embed_d2i($$064,$8,$2,$75,-1,0,$4,$5)|0);
    switch ($79|0) {
    case 0:  {
     break;
    }
    case -1:  {
     $$1 = -1;
     STACKTOP = sp;return ($$1|0);
     break;
    }
    default: {
     break L7;
    }
    }
    _ERR_put_error(13,131,58,0,0);
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   } else {
    $76 = ((($3)) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (_asn1_item_embed_d2i($$064,$8,$2,$75,$77,$14,$4,$5)|0);
    switch ($78|0) {
    case 0:  {
     break;
    }
    case -1:  {
     $$1 = -1;
     STACKTOP = sp;return ($$1|0);
     break;
    }
    default: {
     break L7;
    }
    }
    _ERR_put_error(13,131,58,0,0);
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
  } else {
   $20 = $13 & 8;
   $21 = ($20|0)==(0);
   if ($21) {
    $24 = $13 >>> 1;
    $25 = $24 & 1;
    $26 = $25 | 16;
    $$060 = 0;$$061 = $26;
   } else {
    $22 = ((($3)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $$060 = $14;$$061 = $23;
   }
   $27 = (_asn1_check_tlen($6,0,0,$9,0,$8,$2,$$061,$$060,$4,$5)|0);
   switch ($27|0) {
   case 0:  {
    _ERR_put_error(13,131,58,0,0);
    $$0$ph = 0;
    break;
   }
   case -1:  {
    $$0$ph = -1;
    break;
   }
   default: {
    $28 = HEAP32[$$064>>2]|0;
    $29 = ($28|0)==(0|0);
    if ($29) {
     $30 = (_OPENSSL_sk_new_null()|0);
     HEAP32[$$064>>2] = $30;
     $38 = $30;
    } else {
     $31 = (_OPENSSL_sk_num($28)|0);
     $32 = ($31|0)>(0);
     if ($32) {
      $33 = ((($3)) + 16|0);
      while(1) {
       $34 = (_OPENSSL_sk_pop($28)|0);
       HEAP32[$10>>2] = $34;
       $35 = HEAP32[$33>>2]|0;
       _ASN1_item_ex_free($10,$35);
       $36 = (_OPENSSL_sk_num($28)|0);
       $37 = ($36|0)>(0);
       if (!($37)) {
        break;
       }
      }
     }
     $$pr = HEAP32[$$064>>2]|0;
     $38 = $$pr;
    }
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      _ERR_put_error(13,131,65,0,0);
     } else {
      $40 = ((($3)) + 16|0);
      L39: while(1) {
       $41 = HEAP32[$6>>2]|0;
       $42 = ($41|0)>(0);
       if (!($42)) {
        break;
       }
       $43 = HEAP32[$8>>2]|0;
       $44 = ($41|0)==(1);
       do {
        if ($44) {
         label = 26;
        } else {
         $45 = HEAP8[$43>>0]|0;
         $46 = ($45<<24>>24)==(0);
         if ($46) {
          $47 = ((($43)) + 1|0);
          $48 = HEAP8[$47>>0]|0;
          $49 = ($48<<24>>24)==(0);
          if ($49) {
           $50 = ((($43)) + 2|0);
           HEAP32[$8>>2] = $50;
           $51 = HEAP8[$9>>0]|0;
           $52 = ($51<<24>>24)==(0);
           if ($52) {
            _ERR_put_error(13,131,159,0,0);
            $$062 = 4;
            break;
           } else {
            $53 = (($41) + -2)|0;
            HEAP32[$6>>2] = $53;
            HEAP8[$9>>0] = 0;
            $$062 = 6;
            break;
           }
          } else {
           label = 26;
          }
         } else {
          label = 26;
         }
        }
       } while(0);
       do {
        if ((label|0) == 26) {
         label = 0;
         HEAP32[$11>>2] = 0;
         $54 = HEAP32[$40>>2]|0;
         $55 = (_asn1_item_embed_d2i($11,$8,$41,$54,-1,0,0,$5)|0);
         $56 = ($55|0)==(0);
         if ($56) {
          _ERR_put_error(13,131,58,0,0);
          $57 = HEAP32[$11>>2]|0;
          $58 = HEAP32[$40>>2]|0;
          _ASN1_item_free($57,$58);
          $$062 = 4;
          break;
         }
         $59 = HEAP32[$8>>2]|0;
         $60 = $43;
         $61 = HEAP32[$6>>2]|0;
         $62 = (($60) - ($59))|0;
         $63 = (($62) + ($61))|0;
         HEAP32[$6>>2] = $63;
         $64 = HEAP32[$$064>>2]|0;
         $65 = HEAP32[$11>>2]|0;
         $66 = (_OPENSSL_sk_push($64,$65)|0);
         $67 = ($66|0)==(0);
         if ($67) {
          _ERR_put_error(13,131,65,0,0);
          $68 = HEAP32[$11>>2]|0;
          $69 = HEAP32[$40>>2]|0;
          _ASN1_item_free($68,$69);
          $$062 = 4;
         } else {
          $$062 = 0;
         }
        }
       } while(0);
       $trunc = $$062&255;
       $trunc$clear = $trunc & 7;
       switch ($trunc$clear<<24>>24) {
       case 0:  {
        break;
       }
       case 6:  {
        break L39;
        break;
       }
       default: {
        label = 36;
        break L39;
       }
       }
      }
      if ((label|0) == 36) {
       $cond = ($$062|0)==(0);
       if ($cond) {
        break L7;
       } else {
        $$1 = 0;
       }
       STACKTOP = sp;return ($$1|0);
      }
      $70 = HEAP8[$9>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if ($71) {
       break L7;
      } else {
       _ERR_put_error(13,131,137,0,0);
       break;
      }
     }
    } while(0);
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
   }
   $$1 = $$0$ph;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $80 = HEAP32[$8>>2]|0;
 HEAP32[$1>>2] = $80;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _ASN1_item_ex_i2d($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0138156 = 0, $$0140155 = 0, $$0142 = 0, $$0143 = 0, $$1139154 = 0, $$1141153 = 0, $$147 = 0, $$148 = 0, $$4 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = ((($2)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP8[$2>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  label = 3;
 } else {
  $10 = HEAP32[$0>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $$4 = 0;
  } else {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $12 = ($7|0)==(0|0);
   if ($12) {
    $$0143 = 0;
   } else {
    $13 = ((($7)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $$0143 = $14;
   }
   $15 = $8 << 24 >> 24;
   switch ($15|0) {
   case 0:  {
    $16 = ((($2)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0|0);
    if ($18) {
     $20 = (_asn1_i2d_ex_primitive($0,$1,$2,$3,$4)|0);
     $$4 = $20;
     break L3;
    } else {
     $19 = (_asn1_template_ex_i2d($0,$1,$17,$3,$4)|0);
     $$4 = $19;
     break L3;
    }
    break;
   }
   case 5:  {
    $21 = (_asn1_i2d_ex_primitive($0,$1,$2,-1,$4)|0);
    $$4 = $21;
    break L3;
    break;
   }
   case 2:  {
    $22 = ($$0143|0)!=(0|0);
    if ($22) {
     $23 = (FUNCTION_TABLE_iiiii[$$0143 & 63](6,$0,$2,0)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $$4 = 0;
      break L3;
     }
    }
    $25 = (_asn1_get_choice_selector($0,$2)|0);
    $26 = ($25|0)>(-1);
    if ($26) {
     $27 = ((($2)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($25|0)<($28|0);
     if ($29) {
      $30 = ((($2)) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($31) + (($25*20)|0)|0);
      $33 = (_asn1_get_field_ptr($0,$32)|0);
      $34 = (_asn1_template_ex_i2d($33,$1,$32,-1,$4)|0);
      $$4 = $34;
      break L3;
     }
    }
    if (!($22)) {
     $$4 = 0;
     break L3;
    }
    (FUNCTION_TABLE_iiiii[$$0143 & 63](7,$0,$2,0)|0);
    $$4 = 0;
    break L3;
    break;
   }
   case 4:  {
    $35 = ((($7)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_iiiiii[$36 & 31]($0,$1,$2,$3,$4)|0);
    $$4 = $37;
    break L3;
    break;
   }
   case 6:  {
    $38 = $4 >>> 11;
    $39 = $38 & 1;
    $40 = (($39) + 1)|0;
    $$0142 = $40;
    break;
   }
   case 1:  {
    $$0142 = 1;
    break;
   }
   default: {
    $$4 = 0;
    break L3;
   }
   }
   $41 = (_asn1_enc_restore($5,$1,$0,$2)|0);
   $42 = ($41|0)<(0);
   if ($42) {
    $$4 = 0;
   } else {
    $43 = ($41|0)==(0);
    if (!($43)) {
     $44 = HEAP32[$5>>2]|0;
     $$4 = $44;
     break;
    }
    HEAP32[$5>>2] = 0;
    $45 = ($3|0)==(-1);
    $46 = $4 & -193;
    $$147 = $45 ? $46 : $4;
    $$148 = $45 ? 16 : $3;
    $47 = ($$0143|0)!=(0|0);
    if ($47) {
     $48 = (FUNCTION_TABLE_iiiii[$$0143 & 63](6,$0,$2,0)|0);
     $49 = ($48|0)==(0);
     if ($49) {
      $$4 = 0;
      break;
     }
    }
    $50 = ((($2)) + 8|0);
    $51 = ((($2)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)>(0);
    if ($53) {
     $54 = HEAP32[$50>>2]|0;
     $$0138156 = $54;$$0140155 = 0;
     while(1) {
      $55 = (_asn1_do_adb($0,$$0138156,1)|0);
      $56 = ($55|0)==(0|0);
      if ($56) {
       $$4 = 0;
       break L3;
      }
      $57 = (_asn1_get_field_ptr($0,$55)|0);
      $58 = (_asn1_template_ex_i2d($57,0,$55,-1,$$147)|0);
      $59 = ($58|0)==(-1);
      if ($59) {
       $$4 = -1;
       break L3;
      }
      $60 = HEAP32[$5>>2]|0;
      $61 = (2147483647 - ($60))|0;
      $62 = ($58|0)>($61|0);
      if ($62) {
       $$4 = -1;
       break L3;
      }
      $63 = (($60) + ($58))|0;
      HEAP32[$5>>2] = $63;
      $64 = ((($$0138156)) + 20|0);
      $65 = (($$0140155) + 1)|0;
      $66 = HEAP32[$51>>2]|0;
      $67 = ($65|0)<($66|0);
      if ($67) {
       $$0138156 = $64;$$0140155 = $65;
      } else {
       $68 = $63;
       break;
      }
     }
    } else {
     $$pre = HEAP32[$5>>2]|0;
     $68 = $$pre;
    }
    $69 = (_ASN1_object_size($$0142,$68,$$148)|0);
    $70 = ($1|0)==(0|0);
    $71 = ($69|0)==(-1);
    $or$cond = $70 | $71;
    if ($or$cond) {
     $$4 = $69;
    } else {
     $72 = HEAP32[$5>>2]|0;
     _ASN1_put_object($1,$$0142,$72,$$148,$$147);
     $73 = HEAP32[$51>>2]|0;
     $74 = ($73|0)>(0);
     if ($74) {
      $75 = HEAP32[$50>>2]|0;
      $$1139154 = $75;$$1141153 = 0;
      while(1) {
       $76 = (_asn1_do_adb($0,$$1139154,1)|0);
       $77 = ($76|0)==(0|0);
       if ($77) {
        $$4 = 0;
        break L3;
       }
       $78 = (_asn1_get_field_ptr($0,$76)|0);
       (_asn1_template_ex_i2d($78,$1,$76,-1,$$147)|0);
       $79 = ((($$1139154)) + 20|0);
       $80 = (($$1141153) + 1)|0;
       $81 = HEAP32[$51>>2]|0;
       $82 = ($80|0)<($81|0);
       if ($82) {
        $$1139154 = $79;$$1141153 = $80;
       } else {
        break;
       }
      }
     }
     $83 = ($$0142|0)==(2);
     if ($83) {
      (_ASN1_put_eoc($1)|0);
     }
     if ($47) {
      $84 = (FUNCTION_TABLE_iiiii[$$0143 & 63](7,$0,$2,0)|0);
      $85 = ($84|0)==(0);
      if ($85) {
       $$4 = 0;
       break;
      }
     }
     $$4 = $69;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$4|0);
}
function _asn1_template_ex_i2d($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i158 = 0, $$0124 = 0, $$0125$ = 0, $$0125$lcssa = 0, $$0125163 = 0, $$0127 = 0, $$0128 = 0, $$0132 = 0, $$0133 = 0, $$0134162 = 0, $$0135 = 0, $$061$i150 = 0, $$1$i155 = 0, $$143 = 0, $$162$i157 = 0, $$2 = 0, $$2$i152 = 0, $$263$i154 = 0, $$3 = 0, $$3$i151 = 0;
 var $$lcssa = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$or$cond141$demorgan = 0;
 var $or$cond = 0, $or$cond139 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 $9 = HEAP32[$2>>2]|0;
 $10 = $9 & 4096;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0124 = $0;
 } else {
  HEAP32[$7>>2] = $0;
  $$0124 = $7;
 }
 $12 = $9 & 24;
 $13 = ($12|0)==(0);
 $14 = ($3|0)!=(-1);
 do {
  if ($13) {
   $18 = $4 & 192;
   $$143 = $14 ? $18 : 0;
   $$0132 = $$143;$$0133 = $3;
  } else {
   if ($14) {
    $$3 = -1;
    STACKTOP = sp;return ($$3|0);
   } else {
    $15 = ((($2)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $9 & 192;
    $$0132 = $17;$$0133 = $16;
    break;
   }
  }
 } while(0);
 $19 = $4 & -193;
 $20 = $9 & $4;
 $21 = $20 >>> 11;
 $22 = $21 & 1;
 $23 = (($22) + 1)|0;
 $24 = $9 & 6;
 $25 = ($24|0)==(0);
 if ($25) {
  $109 = $9 & 16;
  $110 = ($109|0)==(0);
  $111 = ((($2)) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  if ($110) {
   $120 = $$0132 | $19;
   $121 = (_ASN1_item_ex_i2d($$0124,$1,$112,$$0133,$120)|0);
   $$3 = $121;
   STACKTOP = sp;return ($$3|0);
  }
  $113 = (_ASN1_item_ex_i2d($$0124,0,$112,-1,$19)|0);
  $114 = ($113|0)==(0);
  if ($114) {
   $$3 = 0;
   STACKTOP = sp;return ($$3|0);
  }
  $115 = (_ASN1_object_size($23,$113,$$0133)|0);
  $116 = ($1|0)!=(0|0);
  $117 = ($115|0)!=(-1);
  $or$cond3 = $116 & $117;
  if (!($or$cond3)) {
   $$3 = $115;
   STACKTOP = sp;return ($$3|0);
  }
  _ASN1_put_object($1,$23,$113,$$0133,$$0132);
  $118 = HEAP32[$111>>2]|0;
  (_ASN1_item_ex_i2d($$0124,$1,$118,-1,$19)|0);
  $119 = ($23|0)==(2);
  if (!($119)) {
   $$3 = $115;
   STACKTOP = sp;return ($$3|0);
  }
  (_ASN1_put_eoc($1)|0);
  $$3 = $115;
  STACKTOP = sp;return ($$3|0);
 }
 $26 = HEAP32[$$0124>>2]|0;
 $27 = ($26|0)==(0|0);
 L28: do {
  if ($27) {
   $$2 = 0;
  } else {
   $28 = $9 & 2;
   $29 = ($28|0)==(0);
   $30 = $9 & 4;
   $31 = ($$0133|0)!=(-1);
   $32 = $9 & 16;
   $33 = ($32|0)==(0);
   $or$cond139 = $33 & $31;
   $34 = $28 >>> 1;
   $35 = $34 | 16;
   $$0128 = $or$cond139 ? $$0133 : $35;
   $$0127 = $or$cond139 ? $$0132 : 0;
   $36 = (_OPENSSL_sk_num($26)|0);
   $37 = ($36|0)>(0);
   if ($37) {
    $38 = ((($2)) + 16|0);
    $$0125163 = 0;$$0134162 = 0;
    while(1) {
     $39 = (_OPENSSL_sk_value($26,$$0134162)|0);
     HEAP32[$8>>2] = $39;
     $40 = HEAP32[$38>>2]|0;
     $41 = (_ASN1_item_ex_i2d($8,0,$40,-1,$19)|0);
     $42 = ($41|0)==(-1);
     $43 = (2147483647 - ($41))|0;
     $44 = ($$0125163|0)>($43|0);
     $not$or$cond141$demorgan = $42 | $44;
     if ($not$or$cond141$demorgan) {
      $$2 = -1;
      break L28;
     }
     $$0125$ = (($41) + ($$0125163))|0;
     $45 = (($$0134162) + 1)|0;
     $46 = (_OPENSSL_sk_num($26)|0);
     $47 = ($45|0)<($46|0);
     if ($47) {
      $$0125163 = $$0125$;$$0134162 = $45;
     } else {
      $$0125$lcssa = $$0125$;
      break;
     }
    }
   } else {
    $$0125$lcssa = 0;
   }
   $48 = (_ASN1_object_size($23,$$0125$lcssa,$$0128)|0);
   $49 = ($48|0)==(-1);
   if ($49) {
    $$2 = -1;
   } else {
    $50 = ($32|0)!=(0);
    if ($50) {
     $51 = (_ASN1_object_size($23,$48,$$0133)|0);
     $$0135 = $51;
    } else {
     $$0135 = $48;
    }
    $52 = ($1|0)==(0|0);
    $53 = ($$0135|0)==(-1);
    $or$cond = $52 | $53;
    if ($or$cond) {
     $$2 = $$0135;
    } else {
     if ($50) {
      _ASN1_put_object($1,$23,$48,$$0133,$$0132);
     }
     _ASN1_put_object($1,$23,$$0125$lcssa,$$0128,$$0127);
     $54 = ((($2)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     HEAP32[$6>>2] = 0;
     do {
      if ($29) {
       label = 21;
      } else {
       $56 = (_OPENSSL_sk_num($26)|0);
       $57 = ($56|0)<(2);
       if ($57) {
        label = 21;
       } else {
        $60 = (_OPENSSL_sk_num($26)|0);
        $61 = ($60*12)|0;
        $62 = (_CRYPTO_malloc($61,83252,0)|0);
        $63 = ($62|0)==(0|0);
        if (!($63)) {
         $64 = (_CRYPTO_malloc($$0125$lcssa,83252,0)|0);
         $65 = ($64|0)==(0|0);
         if ($65) {
          _CRYPTO_free($62,83252,0);
          break;
         }
         HEAP32[$6>>2] = $64;
         $70 = (_OPENSSL_sk_num($26)|0);
         $71 = ($70|0)>(0);
         if ($71) {
          $$0$i158 = $62;$$162$i157 = 0;
          while(1) {
           $72 = (_OPENSSL_sk_value($26,$$162$i157)|0);
           HEAP32[$5>>2] = $72;
           $73 = HEAP32[$6>>2]|0;
           HEAP32[$$0$i158>>2] = $73;
           $74 = (_ASN1_item_ex_i2d($5,$6,$55,-1,$19)|0);
           $75 = ((($$0$i158)) + 4|0);
           HEAP32[$75>>2] = $74;
           $76 = HEAP32[$5>>2]|0;
           $77 = ((($$0$i158)) + 8|0);
           HEAP32[$77>>2] = $76;
           $78 = (($$162$i157) + 1)|0;
           $79 = ((($$0$i158)) + 12|0);
           $80 = (_OPENSSL_sk_num($26)|0);
           $81 = ($78|0)<($80|0);
           if ($81) {
            $$0$i158 = $79;$$162$i157 = $78;
           } else {
            $$pre$phiZ2D = $6;
            break;
           }
          }
         } else {
          $$pre$phiZ2D = $6;
         }
         $82 = (_OPENSSL_sk_num($26)|0);
         _qsort($62,$82,12,44);
         $83 = HEAP32[$1>>2]|0;
         HEAP32[$$pre$phiZ2D>>2] = $83;
         $84 = (_OPENSSL_sk_num($26)|0);
         $85 = ($84|0)>(0);
         $86 = HEAP32[$6>>2]|0;
         if ($85) {
          $$1$i155 = $62;$$263$i154 = 0;$90 = $86;
          while(1) {
           $87 = HEAP32[$$1$i155>>2]|0;
           $88 = ((($$1$i155)) + 4|0);
           $89 = HEAP32[$88>>2]|0;
           _memcpy(($90|0),($87|0),($89|0))|0;
           $91 = HEAP32[$88>>2]|0;
           $92 = HEAP32[$6>>2]|0;
           $93 = (($92) + ($91)|0);
           HEAP32[$6>>2] = $93;
           $94 = (($$263$i154) + 1)|0;
           $95 = ((($$1$i155)) + 12|0);
           $96 = (_OPENSSL_sk_num($26)|0);
           $97 = ($94|0)<($96|0);
           $98 = HEAP32[$6>>2]|0;
           if ($97) {
            $$1$i155 = $95;$$263$i154 = $94;$90 = $98;
           } else {
            $$lcssa = $98;
            break;
           }
          }
         } else {
          $$lcssa = $86;
         }
         HEAP32[$1>>2] = $$lcssa;
         $99 = ($30|0)==(0);
         if (!($99)) {
          $100 = (_OPENSSL_sk_num($26)|0);
          $101 = ($100|0)>(0);
          if ($101) {
           $$2$i152 = $62;$$3$i151 = 0;
           while(1) {
            $102 = ((($$2$i152)) + 8|0);
            $103 = HEAP32[$102>>2]|0;
            (_OPENSSL_sk_set($26,$$3$i151,$103)|0);
            $104 = (($$3$i151) + 1)|0;
            $105 = ((($$2$i152)) + 12|0);
            $106 = (_OPENSSL_sk_num($26)|0);
            $107 = ($104|0)<($106|0);
            if ($107) {
             $$2$i152 = $105;$$3$i151 = $104;
            } else {
             break;
            }
           }
          }
         }
         _CRYPTO_free($62,83252,0);
         _CRYPTO_free($64,83252,0);
        }
       }
      }
     } while(0);
     if ((label|0) == 21) {
      $58 = (_OPENSSL_sk_num($26)|0);
      $59 = ($58|0)>(0);
      if ($59) {
       $$061$i150 = 0;
       while(1) {
        $66 = (_OPENSSL_sk_value($26,$$061$i150)|0);
        HEAP32[$5>>2] = $66;
        (_ASN1_item_ex_i2d($5,$1,$55,-1,$19)|0);
        $67 = (($$061$i150) + 1)|0;
        $68 = (_OPENSSL_sk_num($26)|0);
        $69 = ($67|0)<($68|0);
        if ($69) {
         $$061$i150 = $67;
        } else {
         break;
        }
       }
      }
     }
     $108 = ($23|0)==(2);
     if ($108) {
      (_ASN1_put_eoc($1)|0);
      if ($50) {
       (_ASN1_put_eoc($1)|0);
       $$2 = $$0135;
      } else {
       $$2 = $$0135;
      }
     } else {
      $$2 = $$0135;
     }
    }
   }
  }
 } while(0);
 $$3 = $$2;
 STACKTOP = sp;return ($$3|0);
}
function _asn1_i2d_ex_primitive($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$033 = 0, $$034 = 0, $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$5>>2] = $7;
 $8 = (_asn1_ex_i2c($0,0,$5,$2)|0);
 $9 = HEAP32[$5>>2]|0;
 switch ($9|0) {
 case 16: case 17: case -3:  {
  $$033 = 0;
  break;
 }
 default: {
  $$033 = 1;
 }
 }
 switch ($8|0) {
 case -2:  {
  $$0 = 2;$$034 = 0;
  break;
 }
 case -1:  {
  $$035 = 0;
  STACKTOP = sp;return ($$035|0);
  break;
 }
 default: {
  $$0 = 0;$$034 = $8;
 }
 }
 $10 = ($3|0)==(-1);
 $$ = $10 ? $9 : $3;
 $11 = ($1|0)==(0|0);
 do {
  if (!($11)) {
   $12 = ($$033|0)==(0);
   if (!($12)) {
    _ASN1_put_object($1,$$0,$$034,$$,$4);
   }
   $13 = HEAP32[$1>>2]|0;
   (_asn1_ex_i2c($0,$13,$5,$2)|0);
   $14 = ($$0|0)==(0);
   if ($14) {
    $15 = HEAP32[$1>>2]|0;
    $16 = (($15) + ($$034)|0);
    HEAP32[$1>>2] = $16;
    break;
   } else {
    (_ASN1_put_eoc($1)|0);
    break;
   }
  }
 } while(0);
 $17 = ($$033|0)==(0);
 if ($17) {
  $$035 = $$034;
  STACKTOP = sp;return ($$035|0);
 }
 $18 = (_ASN1_object_size($$0,$$034,$$)|0);
 $$035 = $18;
 STACKTOP = sp;return ($$035|0);
}
function _asn1_ex_i2c($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$064 = 0, $$065 = 0, $$066 = 0, $$067 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = sp + 4|0;
 HEAP32[$4>>2] = $1;
 $6 = ((($3)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = ((($7)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = (FUNCTION_TABLE_iiiii[$10 & 63]($0,$1,$2,$3)|0);
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $13 = HEAP8[$3>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $15 = ((($3)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(1);
  if ($17) {
   label = 11;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 do {
  if ((label|0) == 6) {
   $18 = HEAP32[$0>>2]|0;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $20 = ($13<<24>>24)==(5);
   if ($20) {
    $21 = ((($18)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$2>>2] = $22;
    $$064 = $0;$$067 = $22;
    break;
   }
   $$phi$trans$insert = ((($3)) + 4|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $phitmp = ($$pre|0)==(-4);
   if ($phitmp) {
    $23 = HEAP32[$0>>2]|0;
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$2>>2] = $24;
    $25 = ((($23)) + 4|0);
    $$064 = $25;$$067 = $24;
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $26 = HEAP32[$2>>2]|0;
  $$064 = $0;$$067 = $26;
 }
 switch ($$067|0) {
 case 6:  {
  $27 = HEAP32[$$064>>2]|0;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($27)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $$065 = $31;$$066 = $29;
  break;
 }
 case 1:  {
  $32 = HEAP32[$$064>>2]|0;
  $33 = ($32|0)==(-1);
  if ($33) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $34 = ((($3)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(-4);
  do {
   if (!($36)) {
    $37 = ($32|0)==(0);
    $38 = ((($3)) + 20|0);
    $39 = HEAP32[$38>>2]|0;
    if ($37) {
     $41 = ($39|0)==(0);
     if ($41) {
      $$0 = -1;
     } else {
      break;
     }
     STACKTOP = sp;return ($$0|0);
    } else {
     $40 = ($39|0)>(0);
     if ($40) {
      $$0 = -1;
     } else {
      break;
     }
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $42 = $32&255;
  HEAP8[$5>>0] = $42;
  $$065 = 1;$$066 = $5;
  break;
 }
 case 3:  {
  $43 = HEAP32[$$064>>2]|0;
  $44 = ($1|0)!=(0|0);
  $$ = $44 ? $4 : 0;
  $45 = (_i2c_ASN1_BIT_STRING($43,$$)|0);
  $$0 = $45;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 10: case 2:  {
  $46 = HEAP32[$$064>>2]|0;
  $47 = ($1|0)!=(0|0);
  $$1 = $47 ? $4 : 0;
  $48 = (_i2c_ASN1_INTEGER($46,$$1)|0);
  $$0 = $48;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 5:  {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $49 = HEAP32[$$064>>2]|0;
  $50 = ((($3)) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(2048);
  if ($52) {
   $53 = ((($49)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & 16;
   $56 = ($55|0)==(0);
   if (!($56)) {
    $57 = ($1|0)==(0|0);
    if ($57) {
     $$0 = -2;
     STACKTOP = sp;return ($$0|0);
    }
    $58 = ((($49)) + 8|0);
    HEAP32[$58>>2] = $1;
    HEAP32[$49>>2] = 0;
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $59 = ((($49)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$49>>2]|0;
  $$065 = $61;$$066 = $60;
 }
 }
 $62 = ($1|0)!=(0|0);
 $63 = ($$065|0)!=(0);
 $or$cond = $63 & $62;
 if (!($or$cond)) {
  $$0 = $$065;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($1|0),($$066|0),($$065|0))|0;
 $$0 = $$065;
 STACKTOP = sp;return ($$0|0);
}
function _der_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink1$v = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)<($5|0);
 $$sink1$v = $6 ? $0 : $1;
 $7 = ((($$sink1$v)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (_memcmp($9,$10,$8)|0);
 $12 = ($11|0)==(0);
 $13 = (($3) - ($5))|0;
 $$ = $12 ? $13 : $11;
 return ($$|0);
}
function _ASN1_item_i2d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$3>>2] = $0;
 $5 = ($1|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $8 = (_ASN1_item_ex_i2d($3,0,$2,-1,0)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    $$0$i = $8;
   } else {
    $10 = (_CRYPTO_malloc($8,83252,0)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0$i = -1;
    } else {
     HEAP32[$4>>2] = $10;
     (_ASN1_item_ex_i2d($3,$4,$2,-1,0)|0);
     HEAP32[$1>>2] = $10;
     $$0$i = $8;
    }
   }
   $$1$i = $$0$i;
   STACKTOP = sp;return ($$1$i|0);
  }
 }
 $12 = (_ASN1_item_ex_i2d($3,$1,$2,-1,0)|0);
 $$1$i = $12;
 STACKTOP = sp;return ($$1$i|0);
}
function _ASN1_item_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 _asn1_item_embed_free($2,$1,0);
 STACKTOP = sp;return;
}
function _asn1_item_embed_free($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$088 = 0, $$09091 = 0, $$092 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($0|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = HEAP8[$1>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[$0>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   return;
  }
 }
 $10 = ($4|0)==(0|0);
 if ($10) {
  label = 6;
 } else {
  $11 = ((($4)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   label = 6;
  } else {
   $$088 = $12;
  }
 }
 if ((label|0) == 6) {
  $$088 = 0;
 }
 $14 = $6 << 24 >> 24;
 switch ($14|0) {
 case 0:  {
  $15 = ((($1)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   _asn1_primitive_free($0,$1,$2);
   return;
  } else {
   _asn1_template_free($0,$16);
   return;
  }
  break;
 }
 case 5:  {
  _asn1_primitive_free($0,$1,$2);
  return;
  break;
 }
 case 2:  {
  $18 = ($$088|0)!=(0|0);
  if ($18) {
   $19 = (FUNCTION_TABLE_iiiii[$$088 & 63](2,$0,$1,0)|0);
   $20 = ($19|0)==(2);
   if ($20) {
    return;
   }
  }
  $21 = (_asn1_get_choice_selector($0,$1)|0);
  $22 = ($21|0)>(-1);
  if ($22) {
   $23 = ((($1)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($21|0)<($24|0);
   if ($25) {
    $26 = ((($1)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + (($21*20)|0)|0);
    $29 = (_asn1_get_field_ptr($0,$28)|0);
    _asn1_template_free($29,$28);
   }
  }
  if ($18) {
   (FUNCTION_TABLE_iiiii[$$088 & 63](3,$0,$1,0)|0);
  }
  $30 = ($2|0)==(0);
  if (!($30)) {
   return;
  }
  $31 = HEAP32[$0>>2]|0;
  _CRYPTO_free($31,83252,0);
  HEAP32[$0>>2] = 0;
  return;
  break;
 }
 case 4:  {
  $32 = ($4|0)==(0|0);
  if ($32) {
   return;
  }
  $33 = ((($4)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0|0);
  if ($35) {
   return;
  }
  FUNCTION_TABLE_vii[$34 & 31]($0,$1);
  return;
  break;
 }
 case 1: case 6:  {
  $36 = (_asn1_do_lock($0,-1,$1)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   return;
  }
  $38 = ($$088|0)!=(0|0);
  if ($38) {
   $39 = (FUNCTION_TABLE_iiiii[$$088 & 63](2,$0,$1,0)|0);
   $40 = ($39|0)==(2);
   if ($40) {
    return;
   }
  }
  _asn1_enc_free($0,$1);
  $41 = ((($1)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)>(0);
  if ($43) {
   $44 = ((($1)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + (($42*20)|0)|0);
   $$09091 = 0;$$092 = $46;
   while(1) {
    $47 = ((($$092)) + -20|0);
    $48 = (_asn1_do_adb($0,$47,0)|0);
    $49 = ($48|0)==(0|0);
    if (!($49)) {
     $50 = (_asn1_get_field_ptr($0,$48)|0);
     _asn1_template_free($50,$48);
    }
    $51 = (($$09091) + 1)|0;
    $52 = HEAP32[$41>>2]|0;
    $53 = ($51|0)<($52|0);
    if ($53) {
     $$09091 = $51;$$092 = $47;
    } else {
     break;
    }
   }
  }
  if ($38) {
   (FUNCTION_TABLE_iiiii[$$088 & 63](3,$0,$1,0)|0);
  }
  $54 = ($2|0)==(0);
  if (!($54)) {
   return;
  }
  $55 = HEAP32[$0>>2]|0;
  _CRYPTO_free($55,83252,0);
  HEAP32[$0>>2] = 0;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _asn1_template_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$021 = 0, $$022 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = $4 & 4096;
 $6 = ($5|0)==(0);
 if ($6) {
  $$021 = $0;
 } else {
  HEAP32[$2>>2] = $0;
  $$021 = $2;
 }
 $7 = $4 & 6;
 $8 = ($7|0)==(0);
 if ($8) {
  $18 = ((($1)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  _asn1_item_embed_free($$021,$19,$5);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$$021>>2]|0;
 $10 = (_OPENSSL_sk_num($9)|0);
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = ((($1)) + 16|0);
  $$022 = 0;
  while(1) {
   $13 = (_OPENSSL_sk_value($9,$$022)|0);
   HEAP32[$3>>2] = $13;
   $14 = HEAP32[$12>>2]|0;
   _asn1_item_embed_free($3,$14,$5);
   $15 = (($$022) + 1)|0;
   $16 = (_OPENSSL_sk_num($9)|0);
   $17 = ($15|0)<($16|0);
   if ($17) {
    $$022 = $15;
   } else {
    break;
   }
  }
 }
 _OPENSSL_sk_free($9);
 HEAP32[$$021>>2] = 0;
 STACKTOP = sp;return;
}
function _asn1_primitive_free($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$043 = 0, $$046 = 0, $$047 = 0, $$049 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)!=(0|0);
 do {
  if ($3) {
   $4 = ((($1)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($2|0)==(0);
   $7 = ($5|0)!=(0|0);
   if ($6) {
    if ($7) {
     $11 = ((($5)) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(0|0);
     if (!($13)) {
      FUNCTION_TABLE_vii[$12 & 31]($0,$1);
      return;
     }
    }
   } else {
    if ($7) {
     $8 = ((($5)) + 16|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==(0|0);
     if (!($10)) {
      FUNCTION_TABLE_vii[$9 & 31]($0,$1);
      return;
     }
    }
   }
   $18 = HEAP8[$1>>0]|0;
   $19 = ($18<<24>>24)==(5);
   if ($19) {
    $20 = HEAP32[$0>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $$047 = $0;
     label = 20;
     break;
    }
    return;
   }
   $22 = ((($1)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(1);
   if ($24) {
    $$049 = $0;
    label = 16;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     return;
    } else {
     $$0 = $0;$$043 = $23;
     label = 14;
    }
   }
  } else {
   $14 = HEAP32[$0>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($14)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $not$ = ($17|0)==(0|0);
   if ($not$) {
    return;
   } else {
    $$0 = $16;$$043 = $15;
    label = 14;
   }
  }
 } while(0);
 L21: do {
  if ((label|0) == 14) {
   switch ($$043|0) {
   case 1:  {
    $$049 = $$0;
    label = 16;
    break L21;
    break;
   }
   case 5:  {
    $$046 = $$0;
    break L21;
    break;
   }
   case 6:  {
    $27 = HEAP32[$$0>>2]|0;
    _ASN1_OBJECT_free($27);
    $$046 = $$0;
    break L21;
    break;
   }
   case -4:  {
    _asn1_primitive_free($$0,0,0);
    $30 = HEAP32[$$0>>2]|0;
    _CRYPTO_free($30,83252,0);
    $$046 = $$0;
    break L21;
    break;
   }
   default: {
    $$047 = $$0;
    label = 20;
    break L21;
   }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  if ($3) {
   $28 = ((($1)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $$sink = $29;
  } else {
   $$sink = -1;
  }
  HEAP32[$$049>>2] = $$sink;
  return;
 }
 else if ((label|0) == 20) {
  $31 = HEAP32[$$047>>2]|0;
  _asn1_string_embed_free($31,$2);
  $$046 = $$047;
 }
 HEAP32[$$046>>2] = 0;
 return;
}
function _ASN1_item_ex_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _asn1_item_embed_free($0,$1,0);
 return;
}
function _ASN1_item_new($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = 0;
 $2 = (_asn1_item_embed_new($1,$0,0)|0);
 $3 = ($2|0)>(0);
 $4 = HEAP32[$1>>2]|0;
 $$0 = $3 ? $4 : 0;
 STACKTOP = sp;return ($$0|0);
}
function _asn1_item_embed_new($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027$i = 0, $$027$i83 = 0, $$080 = 0, $$081 = 0, $$08289 = 0, $$090 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  label = 3;
 } else {
  $8 = ((($6)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   label = 3;
  } else {
   $$081 = $9;
  }
 }
 if ((label|0) == 3) {
  $$081 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = $11 << 24 >> 24;
 L6: do {
  switch ($12|0) {
  case 4:  {
   $13 = ($6|0)==(0|0);
   if ($13) {
    $$080 = 1;
    STACKTOP = sp;return ($$080|0);
   }
   $14 = ((($6)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $$080 = 1;
    STACKTOP = sp;return ($$080|0);
   }
   $17 = (FUNCTION_TABLE_iii[$15 & 63]($0,$1)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    label = 54;
   } else {
    $$080 = 1;
    STACKTOP = sp;return ($$080|0);
   }
   break;
  }
  case 0:  {
   $19 = ((($1)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $37 = (_asn1_primitive_new($0,$1,$2)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     label = 54;
     break L6;
    } else {
     $$080 = 1;
    }
    STACKTOP = sp;return ($$080|0);
   }
   $22 = ((($20)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$20>>2]|0;
   $25 = $24 & 4096;
   $26 = ($25|0)==(0);
   if ($26) {
    $$027$i83 = $0;
   } else {
    HEAP32[$3>>2] = $0;
    $$027$i83 = $3;
   }
   $27 = $24 & 1;
   $28 = ($27|0)==(0);
   do {
    if ($28) {
     $29 = $24 & 768;
     $30 = ($29|0)==(0);
     if (!($30)) {
      HEAP32[$$027$i83>>2] = 0;
      break;
     }
     $31 = $24 & 6;
     $32 = ($31|0)==(0);
     if ($32) {
      $35 = (_asn1_item_embed_new($$027$i83,$23,$25)|0);
      $36 = ($35|0)==(0);
      if ($36) {
       label = 54;
       break L6;
      } else {
       $$080 = 1;
      }
      STACKTOP = sp;return ($$080|0);
     }
     $33 = (_OPENSSL_sk_new_null()|0);
     $34 = ($33|0)==(0|0);
     if ($34) {
      _ERR_put_error(13,133,65,0,0);
      label = 54;
      break L6;
     } else {
      HEAP32[$$027$i83>>2] = $33;
      break;
     }
    } else {
     _asn1_template_clear($$027$i83,$20);
    }
   } while(0);
   $$080 = 1;
   STACKTOP = sp;return ($$080|0);
   break;
  }
  case 5:  {
   $39 = (_asn1_primitive_new($0,$1,$2)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    label = 54;
   } else {
    $$080 = 1;
    STACKTOP = sp;return ($$080|0);
   }
   break;
  }
  case 2:  {
   $41 = ($$081|0)!=(0|0);
   L41: do {
    if ($41) {
     $42 = (FUNCTION_TABLE_iiiii[$$081 & 63](0,$0,$1,0)|0);
     switch ($42|0) {
     case 0:  {
      break L6;
      break;
     }
     case 2:  {
      $$080 = 1;
      break;
     }
     default: {
      break L41;
     }
     }
     STACKTOP = sp;return ($$080|0);
    }
   } while(0);
   $43 = ($2|0)==(0);
   $44 = ((($1)) + 20|0);
   $45 = HEAP32[$44>>2]|0;
   if ($43) {
    $47 = (_CRYPTO_zalloc($45,83252,0)|0);
    HEAP32[$0>>2] = $47;
    $48 = ($47|0)==(0|0);
    if ($48) {
     label = 54;
     break L6;
    }
   } else {
    $46 = HEAP32[$0>>2]|0;
    _memset(($46|0),0,($45|0))|0;
   }
   (_asn1_set_choice_selector($0,-1,$1)|0);
   if (!($41)) {
    $$080 = 1;
    STACKTOP = sp;return ($$080|0);
   }
   $49 = (FUNCTION_TABLE_iiiii[$$081 & 63](1,$0,$1,0)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    label = 55;
   } else {
    $$080 = 1;
    STACKTOP = sp;return ($$080|0);
   }
   break;
  }
  case 1: case 6:  {
   $51 = ($$081|0)!=(0|0);
   L54: do {
    if ($51) {
     $52 = (FUNCTION_TABLE_iiiii[$$081 & 63](0,$0,$1,0)|0);
     switch ($52|0) {
     case 0:  {
      break L6;
      break;
     }
     case 2:  {
      $$080 = 1;
      break;
     }
     default: {
      break L54;
     }
     }
     STACKTOP = sp;return ($$080|0);
    }
   } while(0);
   $53 = ($2|0)==(0);
   $54 = ((($1)) + 20|0);
   $55 = HEAP32[$54>>2]|0;
   if ($53) {
    $57 = (_CRYPTO_zalloc($55,83252,0)|0);
    HEAP32[$0>>2] = $57;
    $58 = ($57|0)==(0|0);
    if ($58) {
     label = 54;
     break L6;
    }
   } else {
    $56 = HEAP32[$0>>2]|0;
    _memset(($56|0),0,($55|0))|0;
   }
   $59 = (_asn1_do_lock($0,0,$1)|0);
   $60 = ($59|0)<(0);
   L62: do {
    if (!($60)) {
     _asn1_enc_init($0,$1);
     $61 = ((($1)) + 12|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)>(0);
     L64: do {
      if ($63) {
       $64 = ((($1)) + 8|0);
       $65 = HEAP32[$64>>2]|0;
       $$08289 = $65;$$090 = 0;
       L66: while(1) {
        $66 = (_asn1_get_field_ptr($0,$$08289)|0);
        $67 = ((($$08289)) + 16|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = HEAP32[$$08289>>2]|0;
        $70 = $69 & 4096;
        $71 = ($70|0)==(0);
        if ($71) {
         $$027$i = $66;
        } else {
         HEAP32[$4>>2] = $66;
         $$027$i = $4;
        }
        $72 = $69 & 1;
        $73 = ($72|0)==(0);
        do {
         if ($73) {
          $74 = $69 & 768;
          $75 = ($74|0)==(0);
          if (!($75)) {
           HEAP32[$$027$i>>2] = 0;
           label = 48;
           break;
          }
          $76 = $69 & 6;
          $77 = ($76|0)==(0);
          if ($77) {
           $80 = (_asn1_item_embed_new($$027$i,$68,$70)|0);
           $81 = ($80|0)==(0);
           if ($81) {
            break L62;
           } else {
            break;
           }
          }
          $78 = (_OPENSSL_sk_new_null()|0);
          $79 = ($78|0)==(0|0);
          if ($79) {
           break L66;
          }
          HEAP32[$$027$i>>2] = $78;
          label = 48;
         } else {
          _asn1_template_clear($$027$i,$$08289);
          label = 48;
         }
        } while(0);
        if ((label|0) == 48) {
         label = 0;
        }
        $82 = ((($$08289)) + 20|0);
        $83 = (($$090) + 1)|0;
        $84 = HEAP32[$61>>2]|0;
        $85 = ($83|0)<($84|0);
        if ($85) {
         $$08289 = $82;$$090 = $83;
        } else {
         break L64;
        }
       }
       _ERR_put_error(13,133,65,0,0);
       break L62;
      }
     } while(0);
     if (!($51)) {
      $$080 = 1;
      STACKTOP = sp;return ($$080|0);
     }
     $86 = (FUNCTION_TABLE_iiiii[$$081 & 63](1,$0,$1,0)|0);
     $87 = ($86|0)==(0);
     if ($87) {
      label = 55;
      break L6;
     } else {
      $$080 = 1;
     }
     STACKTOP = sp;return ($$080|0);
    }
   } while(0);
   _ASN1_item_ex_free($0,$1);
   label = 54;
   break;
  }
  default: {
   $$080 = 1;
   STACKTOP = sp;return ($$080|0);
  }
  }
 } while(0);
 if ((label|0) == 54) {
  _ERR_put_error(13,121,65,0,0);
  $$080 = 0;
  STACKTOP = sp;return ($$080|0);
 }
 else if ((label|0) == 55) {
  _ASN1_item_ex_free($0,$1);
 }
 _ERR_put_error(13,121,100,0,0);
 $$080 = 0;
 STACKTOP = sp;return ($$080|0);
}
function _asn1_template_clear($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$tr3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp$i$i = 0, $phitmp$i15$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr3 = $1;
 L1: while(1) {
  $2 = HEAP32[$$tr3>>2]|0;
  $3 = $2 & 774;
  $4 = ($3|0)==(0);
  if (!($4)) {
   label = 3;
   break;
  }
  $5 = ((($$tr3)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  switch ($8|0) {
  case 4:  {
   label = 5;
   break L1;
   break;
  }
  case 5:  {
   label = 18;
   break L1;
   break;
  }
  case 6: case 1: case 2:  {
   label = 27;
   break L1;
   break;
  }
  case 0:  {
   break;
  }
  default: {
   label = 28;
   break L1;
  }
  }
  $15 = ((($6)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   label = 10;
   break;
  } else {
   $$tr3 = $16;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$0>>2] = 0;
  return;
 }
 else if ((label|0) == 5) {
  $9 = ((($6)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = ((($10)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    FUNCTION_TABLE_vii[$13 & 31]($0,$6);
    return;
   }
  }
  HEAP32[$0>>2] = 0;
  return;
 }
 else if ((label|0) == 10) {
  $18 = ((($6)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   $21 = ((($19)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if ($23) {
    HEAP32[$0>>2] = 0;
    return;
   } else {
    FUNCTION_TABLE_vii[$22 & 31]($0,$6);
    return;
   }
  }
  $24 = ($7<<24>>24)==(5);
  if (!($24)) {
   $25 = ((($6)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $phitmp$i15$i = ($26|0)==(1);
   if ($phitmp$i15$i) {
    $27 = ((($6)) + 20|0);
    $28 = HEAP32[$27>>2]|0;
    HEAP32[$0>>2] = $28;
    return;
   }
  }
  HEAP32[$0>>2] = 0;
  return;
 }
 else if ((label|0) == 18) {
  $29 = ($6|0)==(0|0);
  do {
   if (!($29)) {
    $30 = ((($6)) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0|0);
    if ($32) {
     $36 = ($7<<24>>24)==(5);
     if ($36) {
      break;
     }
     $37 = ((($6)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $phitmp$i$i = ($38|0)==(1);
     if (!($phitmp$i$i)) {
      break;
     }
     $39 = ((($6)) + 20|0);
     $40 = HEAP32[$39>>2]|0;
     HEAP32[$0>>2] = $40;
     return;
    }
    $33 = ((($31)) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     HEAP32[$0>>2] = 0;
     return;
    } else {
     FUNCTION_TABLE_vii[$34 & 31]($0,$6);
     return;
    }
   }
  } while(0);
  HEAP32[$0>>2] = 0;
  return;
 }
 else if ((label|0) == 27) {
  HEAP32[$0>>2] = 0;
  return;
 }
 else if ((label|0) == 28) {
  return;
 }
}
function _asn1_primitive_new($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$04649 = 0, $$047 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$1 = 0;
  return ($$1|0);
 }
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if (!($6)) {
   $7 = ($2|0)==(0);
   if ($7) {
    $11 = ((($5)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     break;
    }
    $14 = (FUNCTION_TABLE_iii[$12 & 63]($0,$1)|0);
    $$1 = $14;
    return ($$1|0);
   } else {
    $8 = ((($5)) + 16|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     break;
    }
    FUNCTION_TABLE_vii[$9 & 31]($0,$1);
    $$1 = 1;
    return ($$1|0);
   }
  }
 } while(0);
 $15 = HEAP8[$1>>0]|0;
 $16 = ($15<<24>>24)==(5);
 L14: do {
  if ($16) {
   $$04649 = -1;
   label = 15;
  } else {
   $17 = ((($1)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   switch ($18|0) {
   case 6:  {
    $19 = (_OBJ_nid2obj(0)|0);
    HEAP32[$0>>2] = $19;
    $$1 = 1;
    return ($$1|0);
    break;
   }
   case 1:  {
    $20 = ((($1)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    HEAP32[$0>>2] = $21;
    $$1 = 1;
    return ($$1|0);
    break;
   }
   case 5:  {
    HEAP32[$0>>2] = (1);
    $$1 = 1;
    return ($$1|0);
    break;
   }
   case -4:  {
    $22 = (_CRYPTO_malloc(8,83252,0)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     $$1 = 0;
     return ($$1|0);
    } else {
     $24 = ((($22)) + 4|0);
     HEAP32[$24>>2] = 0;
     HEAP32[$22>>2] = -1;
     HEAP32[$0>>2] = $22;
     break L14;
    }
    break;
   }
   default: {
    $$04649 = $18;
    label = 15;
    break L14;
   }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $25 = ($2|0)==(0);
  if ($25) {
   $29 = (_ASN1_STRING_type_new($$04649)|0);
   HEAP32[$0>>2] = $29;
   $$047 = $29;
  } else {
   $26 = HEAP32[$0>>2]|0;
   ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
   $27 = ((($26)) + 4|0);
   HEAP32[$27>>2] = $$04649;
   $28 = ((($26)) + 12|0);
   HEAP32[$28>>2] = 128;
   $$047 = $26;
  }
  $30 = HEAP8[$1>>0]|0;
  $31 = ($30<<24>>24)==(5);
  $32 = ($$047|0)!=(0|0);
  $or$cond = $32 & $31;
  if ($or$cond) {
   $33 = ((($$047)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 | 64;
   HEAP32[$33>>2] = $35;
  }
 }
 $36 = HEAP32[$0>>2]|0;
 $not$ = ($36|0)!=(0|0);
 $$ = $not$&1;
 $$1 = $$;
 return ($$1|0);
}
function _ASN1_item_ex_new($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_asn1_item_embed_new($0,$1,0)|0);
 return ($2|0);
}
function _i2d_ASN1_OCTET_STRING($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_ASN1_item_i2d($0,$1,1216)|0);
 return ($2|0);
}
function _ASN1_OCTET_STRING_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_STRING_type_new(4)|0);
 return ($0|0);
}
function _ASN1_OCTET_STRING_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_STRING_free($0);
 return;
}
function _ASN1_INTEGER_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_STRING_type_new(2)|0);
 return ($0|0);
}
function _ASN1_INTEGER_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_STRING_free($0);
 return;
}
function _ASN1_BIT_STRING_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_STRING_type_new(3)|0);
 return ($0|0);
}
function _ASN1_BIT_STRING_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_STRING_free($0);
 return;
}
function _ASN1_TYPE_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(1328)|0);
 return ($0|0);
}
function _ASN1_TYPE_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($0,1328);
 return;
}
function _asn1_get_choice_selector($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _asn1_set_choice_selector($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$6>>2] = $1;
 return ($7|0);
}
function _asn1_do_lock($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = HEAP8[$2>>0]|0;
 L1: do {
  switch ($4<<24>>24) {
  case 6: case 1:  {
   $5 = ((($2)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = ((($6)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 & 1;
    $11 = ($10|0)==(0);
    if ($11) {
     $$0 = 0;
    } else {
     $12 = HEAP32[$0>>2]|0;
     $13 = ((($6)) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($12) + ($14)|0);
     $16 = ((($6)) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (($12) + ($17)|0);
     $19 = ($1|0)==(0);
     if ($19) {
      HEAP32[$15>>2] = 1;
      $20 = (_CRYPTO_THREAD_lock_new()|0);
      HEAP32[$18>>2] = $20;
      $21 = ($20|0)==(0|0);
      if (!($21)) {
       $$0 = 1;
       break L1;
      }
      _ERR_put_error(13,233,65,0,0);
      $$0 = -1;
      break L1;
     }
     $22 = HEAP32[$18>>2]|0;
     $23 = (_CRYPTO_atomic_add($15,$1,$3,$22)|0);
     $24 = ($23|0)<(0);
     if ($24) {
      $$0 = -1;
     } else {
      $25 = HEAP32[$3>>2]|0;
      $26 = ($25|0)==(0);
      if ($26) {
       $27 = HEAP32[$18>>2]|0;
       _CRYPTO_THREAD_lock_free($27);
       HEAP32[$18>>2] = 0;
       $$pre = HEAP32[$3>>2]|0;
       $$0 = $$pre;
      } else {
       $$0 = $25;
      }
     }
    }
   }
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _asn1_enc_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = ((($6)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = ((($6)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($3) + ($13)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  return;
 }
 HEAP32[$14>>2] = 0;
 $16 = ((($14)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($14)) + 8|0);
 HEAP32[$17>>2] = 1;
 return;
}
function _asn1_enc_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = ((($6)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = ((($6)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($3) + ($13)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  return;
 }
 $16 = HEAP32[$14>>2]|0;
 _CRYPTO_free($16,83252,0);
 HEAP32[$14>>2] = 0;
 $17 = ((($14)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($14)) + 8|0);
 HEAP32[$18>>2] = 1;
 return;
}
function _asn1_enc_save($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = ((($3)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ((($8)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2;
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 1;
  return ($$0|0);
 }
 $14 = ((($8)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($5) + ($15)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 1;
  return ($$0|0);
 }
 $18 = HEAP32[$16>>2]|0;
 _CRYPTO_free($18,83252,0);
 $19 = (_CRYPTO_malloc($2,83252,0)|0);
 HEAP32[$16>>2] = $19;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($19|0),($1|0),($2|0))|0;
 $21 = ((($16)) + 4|0);
 HEAP32[$21>>2] = $2;
 $22 = ((($16)) + 8|0);
 HEAP32[$22>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _asn1_enc_restore($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($3)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($8)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2;
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ((($8)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($5) + ($15)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = ((($16)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = ($1|0)==(0|0);
 if (!($21)) {
  $22 = HEAP32[$1>>2]|0;
  $23 = HEAP32[$16>>2]|0;
  $24 = ((($16)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  _memcpy(($22|0),($23|0),($25|0))|0;
  $26 = HEAP32[$24>>2]|0;
  $27 = HEAP32[$1>>2]|0;
  $28 = (($27) + ($26)|0);
  HEAP32[$1>>2] = $28;
 }
 $29 = ($0|0)==(0|0);
 if ($29) {
  $$0 = 1;
  return ($$0|0);
 }
 $30 = ((($16)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$0>>2] = $31;
 $$0 = 1;
 return ($$0|0);
}
function _asn1_get_field_ptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 return ($5|0);
}
function _asn1_do_adb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$028 = 0, $$02931 = 0, $$032 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = $4 & 768;
 $6 = ($5|0)==(0);
 if ($6) {
  $$028 = $1;
  STACKTOP = sp;return ($$028|0);
 }
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($8)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + ($11)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = ((($8)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $$028 = $16;
   STACKTOP = sp;return ($$028|0);
  }
 } else {
  $18 = $4 & 256;
  $19 = ($18|0)==(0);
  if ($19) {
   $21 = (_ASN1_INTEGER_get($13)|0);
   $storemerge = $21;
  } else {
   $20 = (_OBJ_obj2nid($13)|0);
   $storemerge = $20;
  }
  HEAP32[$3>>2] = $storemerge;
  $22 = ((($8)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = (FUNCTION_TABLE_ii[$23 & 63]($3)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    _ERR_put_error(13,110,164,0,0);
    $$028 = 0;
    STACKTOP = sp;return ($$028|0);
   }
  }
  $27 = ((($8)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)>(0);
  L17: do {
   if ($29) {
    $30 = ((($8)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[$3>>2]|0;
    $$02931 = $31;$$032 = 0;
    while(1) {
     $33 = HEAP32[$$02931>>2]|0;
     $34 = ($33|0)==($32|0);
     if ($34) {
      break;
     }
     $36 = (($$032) + 1)|0;
     $37 = ((($$02931)) + 24|0);
     $38 = ($36|0)<($28|0);
     if ($38) {
      $$02931 = $37;$$032 = $36;
     } else {
      break L17;
     }
    }
    $35 = ((($$02931)) + 4|0);
    $$028 = $35;
    STACKTOP = sp;return ($$028|0);
   }
  } while(0);
  $39 = ((($8)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   $$028 = $40;
   STACKTOP = sp;return ($$028|0);
  }
 }
 $42 = ($2|0)==(0);
 if ($42) {
  $$028 = 0;
  STACKTOP = sp;return ($$028|0);
 }
 _ERR_put_error(13,110,164,0,0);
 $$028 = 0;
 STACKTOP = sp;return ($$028|0);
}
function _X509_ALGOR_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(1356)|0);
 return ($0|0);
}
function _X509_ALGOR_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($0,1356);
 return;
}
function _X509_ALGOR_set0($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($2|0)==(-1);
 if (!($5)) {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = (_ASN1_TYPE_new()|0);
   HEAP32[$6>>2] = $9;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 $11 = HEAP32[$0>>2]|0;
 _ASN1_OBJECT_free($11);
 HEAP32[$0>>2] = $1;
 $12 = ($2|0)==(0);
 if ($12) {
  $$0 = 1;
  return ($$0|0);
 }
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 if ($5) {
  _ASN1_TYPE_free($14);
  HEAP32[$13>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 } else {
  _ASN1_TYPE_set($14,$2,$3);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _X509_ALGOR_set_md($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 $$ = $5 ? 5 : -1;
 $6 = (_EVP_MD_type($1)|0);
 $7 = (_OBJ_nid2obj($6)|0);
 $8 = ($0|0)==(0|0);
 if ($8) {
  return;
 }
 $9 = ((($0)) + 4|0);
 if ($5) {
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = (_ASN1_TYPE_new()|0);
   HEAP32[$9>>2] = $12;
   $13 = ($12|0)==(0|0);
   if ($13) {
    return;
   }
  }
 }
 $14 = HEAP32[$0>>2]|0;
 _ASN1_OBJECT_free($14);
 HEAP32[$0>>2] = $7;
 $15 = HEAP32[$9>>2]|0;
 if ($5) {
  _ASN1_TYPE_set($15,$$,0);
  return;
 } else {
  _ASN1_TYPE_free($15);
  HEAP32[$9>>2] = 0;
  return;
 }
}
function _bn_new($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_BN_new()|0);
 HEAP32[$0>>2] = $2;
 $not$ = ($2|0)!=(0|0);
 $$ = $not$&1;
 return ($$|0);
}
function _bn_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($1)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  _BN_free($2);
 } else {
  _BN_clear_free($2);
 }
 HEAP32[$0>>2] = 0;
 return;
}
function _bn_c2i($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_BN_new()|0);
  HEAP32[$0>>2] = $8;
  $not$$i = ($8|0)==(0|0);
  if ($not$$i) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $9 = $8;
  }
 } else {
  $9 = $6;
 }
 $10 = (_BN_bin2bn($1,$2,$9)|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $$0 = 1;
  return ($$0|0);
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ((($5)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 1;
 $17 = ($16|0)==(0);
 if ($17) {
  _BN_free($12);
 } else {
  _BN_clear_free($12);
 }
 HEAP32[$0>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _bn_i2c($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$013 = 0, $$014 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$013 = -1;
  return ($$013|0);
 }
 $6 = (_BN_num_bits($4)|0);
 $7 = $6 & 7;
 $8 = ($7|0)==(0);
 $$ = $8&1;
 $9 = ($1|0)==(0|0);
 if (!($9)) {
  if ($8) {
   $10 = ((($1)) + 1|0);
   HEAP8[$1>>0] = 0;
   $$014 = $10;
  } else {
   $$014 = $1;
  }
  (_BN_bn2bin($4,$$014)|0);
 }
 $11 = (_BN_num_bits($4)|0);
 $12 = (($11) + 7)|0;
 $13 = (($12|0) / 8)&-1;
 $14 = (($13) + ($$))|0;
 $$013 = $14;
 return ($$013|0);
}
function _bn_print($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = (_BN_print($0,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_BIO_puts($0,80869)|0);
 $not$ = ($8|0)>(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _bn_secure_new($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_BN_secure_new()|0);
 HEAP32[$0>>2] = $2;
 $not$ = ($2|0)!=(0|0);
 $$ = $not$&1;
 return ($$|0);
}
function _bn_secure_c2i($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_BN_secure_new()|0);
  HEAP32[$0>>2] = $8;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $10 = (_BN_new()|0);
   HEAP32[$0>>2] = $10;
   $not$$i$i = ($10|0)==(0|0);
   if ($not$$i$i) {
    $$0$i = 0;
    return ($$0$i|0);
   } else {
    $11 = $10;
   }
  } else {
   $20 = $8;
   label = 3;
  }
 } else {
  $20 = $6;
  label = 3;
 }
 if ((label|0) == 3) {
  $11 = $20;
 }
 $12 = (_BN_bin2bn($1,$2,$11)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $$0$i = 1;
  return ($$0$i|0);
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $16 = ((($5)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  _BN_free($14);
 } else {
  _BN_clear_free($14);
 }
 HEAP32[$0>>2] = 0;
 $$0$i = 0;
 return ($$0$i|0);
}
function _long_new($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $3;
 return 1;
}
function _long_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $3;
 return;
}
function _long_c2i($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$036 = 0, $$037$ = 0, $$037$lcssa62 = 0, $$03756 = 0, $$03955 = 0, $$040 = 0, $$0404346 = 0, $$040434658 = 0, $$040434753 = 0, $$040434754 = 0, $$041 = 0, $$041424851 = 0, $$041424852 = 0, $$0414249 = 0, $$041424957 = 0, $$1 = 0, $$15961 = 0, $$160 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($2|0)>(1);
 if ($6) {
  $7 = HEAP8[$1>>0]|0;
  switch ($7<<24>>24) {
  case -1:  {
   $8 = ((($1)) + 1|0);
   $9 = (($2) + -1)|0;
   $$036 = 255;$$040 = $8;$$041 = $9;
   break;
  }
  case 0:  {
   $10 = ((($1)) + 1|0);
   $11 = (($2) + -1)|0;
   $$036 = 0;$$040 = $10;$$041 = $11;
   break;
  }
  default: {
   $$036 = 256;$$040 = $1;$$041 = $2;
  }
  }
  $12 = ($$041|0)>(4);
  if ($12) {
   _ERR_put_error(13,166,128,0,0);
   $$0 = 0;
   return ($$0|0);
  }
  $13 = ($$036|0)==(256);
  if ($13) {
   $$040434753 = $$040;$$041424851 = $$041;
   label = 9;
  } else {
   $17 = HEAP8[$$040>>0]|0;
   $18 = $17&255;
   $19 = $18 ^ $$036;
   $20 = $19 & 128;
   $21 = ($20|0)==(0);
   if ($21) {
    _ERR_put_error(13,166,221,0,0);
    $$0 = 0;
    return ($$0|0);
   } else {
    $$040434658 = $$040;$$041424957 = $$041;$$160 = $$036;
    label = 14;
   }
  }
 } else {
  $14 = ($2|0)==(0);
  if ($14) {
   $$040434754 = $1;$$041424852 = 0;
   label = 10;
  } else {
   $$040434753 = $1;$$041424851 = $2;
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $15 = HEAP8[$$040434753>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   $$0404346 = $$040434753;$$0414249 = $$041424851;$$1 = 255;
   label = 13;
  } else {
   $$040434754 = $$040434753;$$041424852 = $$041424851;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $$0404346 = $$040434754;$$0414249 = $$041424852;$$1 = 0;
  label = 13;
 }
 if ((label|0) == 13) {
  $22 = ($$0414249|0)>(0);
  if ($22) {
   $$040434658 = $$0404346;$$041424957 = $$0414249;$$160 = $$1;
   label = 14;
  } else {
   $$037$lcssa62 = 0;$$15961 = $$1;
  }
 }
 if ((label|0) == 14) {
  $$03756 = 0;$$03955 = 0;
  while(1) {
   $23 = $$03756 << 8;
   $24 = (($$040434658) + ($$03955)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = $26 ^ $$160;
   $28 = $27 | $23;
   $29 = (($$03955) + 1)|0;
   $exitcond = ($29|0)==($$041424957|0);
   if ($exitcond) {
    break;
   } else {
    $$03756 = $28;$$03955 = $29;
   }
  }
  $30 = ($28|0)<(0);
  if ($30) {
   _ERR_put_error(13,166,128,0,0);
   $$0 = 0;
   return ($$0|0);
  } else {
   $$037$lcssa62 = $28;$$15961 = $$160;
  }
 }
 $not$ = ($$15961|0)!=(0);
 $31 = $not$ << 31 >> 31;
 $$037$ = $$037$lcssa62 ^ $31;
 $32 = ((($5)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($$037$|0)==($33|0);
 if ($34) {
  _ERR_put_error(13,166,128,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP8[$0>>0]=$$037$&255;HEAP8[$0+1>>0]=($$037$>>8)&255;HEAP8[$0+2>>0]=($$037$>>16)&255;HEAP8[$0+3>>0]=$$037$>>24;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _long_i2c($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$0$copyload = 0, $$0$copyload$lobit = 0, $$03744 = 0, $$03744$in = 0, $$040 = 0, $$041 = 0, $$143 = 0, $$lobit$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$0$copyload = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($$0$copyload|0)==($5|0);
 if ($6) {
  $$0 = -1;
  return ($$0|0);
 }
 $$0$copyload$lobit = $$0$copyload >> 31;
 $$040 = $$0$copyload$lobit ^ $$0$copyload;
 $7 = ($$040|0)!=(0);
 $8 = $7&1;
 $9 = ($$040>>>0)>(1);
 $10 = $9&1;
 $11 = ($$040>>>0)>(3);
 $12 = $11&1;
 $13 = ($$040>>>0)>(7);
 $14 = $13&1;
 $15 = ($$040>>>0)>(15);
 $16 = $15&1;
 $17 = ($$040>>>0)>(31);
 $18 = $17&1;
 $19 = ($$040>>>0)>(63);
 $20 = $19&1;
 $21 = ($$040>>>0)>(127);
 $22 = $21&1;
 $23 = ($$040>>>0)>(255);
 $24 = $23&1;
 $25 = ($$040>>>0)>(511);
 $26 = $25&1;
 $27 = ($$040>>>0)>(1023);
 $28 = $27&1;
 $29 = ($$040>>>0)>(2047);
 $30 = $29&1;
 $31 = ($$040>>>0)>(4095);
 $32 = $31&1;
 $33 = ($$040>>>0)>(8191);
 $34 = $33&1;
 $35 = ($$040>>>0)>(16383);
 $36 = $35&1;
 $37 = ($$040>>>0)>(32767);
 $38 = $37&1;
 $39 = ($$040>>>0)>(65535);
 $40 = $39&1;
 $41 = ($$040>>>0)>(131071);
 $42 = $41&1;
 $43 = ($$040>>>0)>(262143);
 $44 = $43&1;
 $45 = ($$040>>>0)>(524287);
 $46 = $45&1;
 $47 = ($$040>>>0)>(1048575);
 $48 = $47&1;
 $49 = ($$040>>>0)>(2097151);
 $50 = $49&1;
 $51 = ($$040>>>0)>(4194303);
 $52 = $51&1;
 $53 = ($$040>>>0)>(8388607);
 $54 = $53&1;
 $55 = ($$040>>>0)>(16777215);
 $56 = $55&1;
 $57 = ($$040>>>0)>(33554431);
 $58 = $57&1;
 $59 = ($$040>>>0)>(67108863);
 $60 = $59&1;
 $61 = ($$040>>>0)>(134217727);
 $62 = $61&1;
 $63 = ($$040>>>0)>(268435455);
 $64 = $63&1;
 $65 = ($$040>>>0)>(536870911);
 $66 = $65&1;
 $67 = ($$040>>>0)>(1073741823);
 $68 = $67&1;
 $$lobit$i = $$040 >>> 31;
 $69 = (($10) + ($$lobit$i))|0;
 $70 = (($69) + ($8))|0;
 $71 = (($70) + ($12))|0;
 $72 = (($71) + ($14))|0;
 $73 = (($72) + ($16))|0;
 $74 = (($73) + ($18))|0;
 $75 = (($74) + ($20))|0;
 $76 = (($75) + ($22))|0;
 $77 = (($76) + ($24))|0;
 $78 = (($77) + ($26))|0;
 $79 = (($78) + ($28))|0;
 $80 = (($79) + ($30))|0;
 $81 = (($80) + ($32))|0;
 $82 = (($81) + ($34))|0;
 $83 = (($82) + ($36))|0;
 $84 = (($83) + ($38))|0;
 $85 = (($84) + ($40))|0;
 $86 = (($85) + ($42))|0;
 $87 = (($86) + ($44))|0;
 $88 = (($87) + ($46))|0;
 $89 = (($88) + ($48))|0;
 $90 = (($89) + ($50))|0;
 $91 = (($90) + ($52))|0;
 $92 = (($91) + ($54))|0;
 $93 = (($92) + ($56))|0;
 $94 = (($93) + ($58))|0;
 $95 = (($94) + ($60))|0;
 $96 = (($95) + ($62))|0;
 $97 = (($96) + ($64))|0;
 $98 = (($97) + ($66))|0;
 $99 = (($98) + ($68))|0;
 $100 = $99 & 7;
 $101 = ($100|0)==(0);
 $$ = $101&1;
 $102 = (($99) + 7)|0;
 $103 = $102 >> 3;
 $104 = ($1|0)==(0|0);
 if (!($104)) {
  if ($101) {
   $105 = $$0$copyload$lobit&255;
   $106 = ((($1)) + 1|0);
   HEAP8[$1>>0] = $105;
   $$041 = $106;
  } else {
   $$041 = $1;
  }
  $107 = ($103|0)>(0);
  if ($107) {
   $$03744$in = $103;$$143 = $$040;
   while(1) {
    $$03744 = (($$03744$in) + -1)|0;
    $108 = $$143 ^ $$0$copyload$lobit;
    $109 = $108&255;
    $110 = (($$041) + ($$03744)|0);
    HEAP8[$110>>0] = $109;
    $111 = $$143 >>> 8;
    $112 = ($$03744$in|0)>(1);
    if ($112) {
     $$03744$in = $$03744;$$143 = $111;
    } else {
     break;
    }
   }
  }
 }
 $113 = (($$) + ($103))|0;
 $$0 = $113;
 return ($$0|0);
}
function _long_print($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $6 = (_BIO_printf($0,47531,$vararg_buffer)|0);
 STACKTOP = sp;return ($6|0);
}
function _i2d_X509_SIG($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_ASN1_item_i2d($0,$1,1604)|0);
 return ($2|0);
}
function _async_local_cleanup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _async_free_pool_internal($0) {
 $0 = $0|0;
 var $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$pre$phiZ2D = $0;
 } else {
  $4 = (_OPENSSL_sk_pop($2)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$pre$phiZ2D = $0;
  } else {
   $7 = $4;
   while(1) {
    $6 = ((($7)) + 8|0);
    $8 = HEAP32[$6>>2]|0;
    _CRYPTO_free($8,83252,0);
    _CRYPTO_free($7,83252,0);
    $9 = HEAP32[$0>>2]|0;
    $10 = (_OPENSSL_sk_pop($9)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$pre$phiZ2D = $0;
     break;
    } else {
     $7 = $10;
    }
   }
  }
 }
 $12 = HEAP32[$$pre$phiZ2D>>2]|0;
 _OPENSSL_sk_free($12);
 _CRYPTO_free($0,83252,0);
 (_CRYPTO_THREAD_set_local(81300,0)|0);
 $13 = (_OPENSSL_init_crypto(256,0,0)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $18 = 0;
 } else {
  $15 = (_CRYPTO_THREAD_get_local(81296)|0);
  $18 = $15;
 }
 $16 = (_CRYPTO_THREAD_set_local(81296,0)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  return;
 }
 _CRYPTO_free($18,83252,0);
 return;
}
function _async_init() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_THREAD_init_local(81296,0)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_CRYPTO_THREAD_init_local(81300,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 1;
  return ($$0|0);
 }
 (_CRYPTO_THREAD_cleanup_local(81296)|0);
 $$0 = 0;
 return ($$0|0);
}
function _async_deinit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_CRYPTO_THREAD_cleanup_local(81296)|0);
 (_CRYPTO_THREAD_cleanup_local(81300)|0);
 return;
}
function _ASYNC_cleanup_thread() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_THREAD_get_local(81300)|0);
 _async_free_pool_internal($0);
 return;
}
function _BIO_dump_indent_cb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$0$lcssa = 0, $$074$lcssa = 0, $$07496 = 0, $$07685$us = 0, $$07792 = 0, $$07792$us = 0, $$078$lcssa = 0, $$07891 = 0, $$07891$us = 0, $$097 = 0, $$179 = 0, $$187$us = 0, $$2 = 0, $$82 = 0, $$off$us = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond107 = 0, $exitcond108 = 0, $or$cond$us = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 192|0;
 $6 = sp + 172|0;
 $7 = sp + 40|0;
 $8 = ($3|0)>(0);
 L1: do {
  if ($8) {
   $$07496 = 0;$$097 = $3;
   while(1) {
    $9 = (($$097) + -1)|0;
    $10 = (($2) + ($9)|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 0: case 32:  {
     break;
    }
    default: {
     $$0$lcssa = $$097;$$074$lcssa = $$07496;
     break L1;
    }
    }
    $12 = (($$07496) + 1)|0;
    $13 = ($$097|0)>(1);
    if ($13) {
     $$07496 = $12;$$097 = $9;
    } else {
     $$0$lcssa = $9;$$074$lcssa = $12;
     break L1;
    }
   }
  } else {
   $$0$lcssa = $3;$$074$lcssa = 0;
  }
 } while(0);
 $14 = ($4|0)>(0);
 $$ = $14 ? $4 : 0;
 $15 = ($4|0)<(1);
 $16 = ($$|0)<(128);
 $$$ = $16 ? $$ : 128;
 if ($15) {
  $$2 = 0;
 } else {
  _memset(($7|0),32,($$$|0))|0;
  $$2 = $$$;
 }
 $17 = (($7) + ($$2)|0);
 HEAP8[$17>>0] = 0;
 $18 = ($$2|0)<(6);
 $19 = $18 ? $$2 : 6;
 $20 = (($$2) + 3)|0;
 $21 = (($20) - ($19))|0;
 $22 = (($21|0) / 4)&-1;
 $23 = (16 - ($22))|0;
 $24 = (($$0$lcssa|0) / ($23|0))&-1;
 $25 = Math_imul($23, $24)|0;
 $26 = ($25|0)<($$0$lcssa|0);
 $27 = $26&1;
 $$82 = (($27) + ($24))|0;
 $28 = ($$82|0)>(0);
 L9: do {
  if ($28) {
   $29 = ($23|0)>(0);
   if ($29) {
    $$07792$us = 0;$$07891$us = 0;
   } else {
    $$07792 = 0;$$07891 = 0;
    while(1) {
     (_OPENSSL_strlcpy($5,$7,289)|0);
     $54 = Math_imul($$07792, $23)|0;
     HEAP32[$vararg_buffer8>>2] = $54;
     (_BIO_snprintf($6,20,47552,$vararg_buffer8)|0);
     (_OPENSSL_strlcat($5,$6,289)|0);
     (_OPENSSL_strlcat($5,47574,289)|0);
     (_OPENSSL_strlcat($5,80869,289)|0);
     $55 = (_strlen($5)|0);
     $56 = (FUNCTION_TABLE_iiii[$0 & 63]($5,$55,$1)|0);
     $57 = (($56) + ($$07891))|0;
     $58 = (($$07792) + 1)|0;
     $exitcond108 = ($58|0)==($$82|0);
     if ($exitcond108) {
      $$078$lcssa = $57;
      break L9;
     } else {
      $$07792 = $58;$$07891 = $57;
     }
    }
   }
   while(1) {
    (_OPENSSL_strlcpy($5,$7,289)|0);
    $30 = Math_imul($$07792$us, $23)|0;
    HEAP32[$vararg_buffer>>2] = $30;
    (_BIO_snprintf($6,20,47552,$vararg_buffer)|0);
    (_OPENSSL_strlcat($5,$6,289)|0);
    $31 = (($2) + ($30)|0);
    $$07685$us = 0;
    while(1) {
     $45 = (($$07685$us) + ($30))|0;
     $46 = ($45|0)<($$0$lcssa|0);
     if ($46) {
      $47 = (($31) + ($$07685$us)|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $48&255;
      $50 = ($$07685$us|0)==(7);
      $51 = $50 ? 45 : 32;
      HEAP32[$vararg_buffer4>>2] = $49;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $51;
      (_BIO_snprintf($6,20,47567,$vararg_buffer4)|0);
      (_OPENSSL_strlcat($5,$6,289)|0);
     } else {
      (_OPENSSL_strlcat($5,47563,289)|0);
     }
     $52 = (($$07685$us) + 1)|0;
     $exitcond = ($52|0)==($23|0);
     if ($exitcond) {
      break;
     } else {
      $$07685$us = $52;
     }
    }
    (_OPENSSL_strlcat($5,47574,289)|0);
    $53 = ($30|0)<($$0$lcssa|0);
    if ($53) {
     $$187$us = 0;
     while(1) {
      $36 = (($31) + ($$187$us)|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37&255;
      $$off$us = (($37) + -32)<<24>>24;
      $39 = ($$off$us&255)<(95);
      $40 = $39 ? $38 : 46;
      HEAP32[$vararg_buffer1>>2] = $40;
      (_BIO_snprintf($6,20,47560,$vararg_buffer1)|0);
      (_OPENSSL_strlcat($5,$6,289)|0);
      $41 = (($$187$us) + 1)|0;
      $42 = ($41|0)<($23|0);
      $43 = (($41) + ($30))|0;
      $44 = ($43|0)<($$0$lcssa|0);
      $or$cond$us = $42 & $44;
      if ($or$cond$us) {
       $$187$us = $41;
      } else {
       break;
      }
     }
    }
    (_OPENSSL_strlcat($5,80869,289)|0);
    $32 = (_strlen($5)|0);
    $33 = (FUNCTION_TABLE_iiii[$0 & 63]($5,$32,$1)|0);
    $34 = (($33) + ($$07891$us))|0;
    $35 = (($$07792$us) + 1)|0;
    $exitcond107 = ($35|0)==($$82|0);
    if ($exitcond107) {
     $$078$lcssa = $34;
     break;
    } else {
     $$07792$us = $35;$$07891$us = $34;
    }
   }
  } else {
   $$078$lcssa = 0;
  }
 } while(0);
 $59 = ($$074$lcssa|0)>(0);
 if (!($59)) {
  $$179 = $$078$lcssa;
  STACKTOP = sp;return ($$179|0);
 }
 $60 = (($$0$lcssa) + ($$074$lcssa))|0;
 HEAP32[$vararg_buffer11>>2] = $7;
 $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
 HEAP32[$vararg_ptr14>>2] = $60;
 (_BIO_snprintf($5,289,47577,$vararg_buffer11)|0);
 $61 = (_strlen($5)|0);
 $62 = (FUNCTION_TABLE_iiii[$0 & 63]($5,$61,$1)|0);
 $63 = (($62) + ($$078$lcssa))|0;
 $$179 = $63;
 STACKTOP = sp;return ($$179|0);
}
function _BIO_dump($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_BIO_dump_indent_cb(33,$0,$1,$2,0)|0);
 return ($3|0);
}
function _write_bio($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_BIO_write($2,$0,$1)|0);
 return ($3|0);
}
function _BIO_printf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_BIO_vprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _BIO_vprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$05 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$5>>2] = $4;
 HEAP32[$6>>2] = 2048;
 HEAP32[$7>>2] = 0;
 $9 = (__dopr($5,$7,$6,$3,$8,$1,$2)|0);
 $10 = ($9|0)==(0);
 $11 = HEAP32[$7>>2]|0;
 if ($10) {
  _CRYPTO_free($11,83252,0);
  $$05 = -1;
  STACKTOP = sp;return ($$05|0);
 }
 $12 = ($11|0)==(0|0);
 $13 = HEAP32[$3>>2]|0;
 if ($12) {
  $16 = (_BIO_write($0,$4,$13)|0);
  $$05 = $16;
  STACKTOP = sp;return ($$05|0);
 } else {
  $14 = (_BIO_write($0,$11,$13)|0);
  $15 = HEAP32[$7>>2]|0;
  _CRYPTO_free($15,83252,0);
  $$05 = $14;
  STACKTOP = sp;return ($$05|0);
 }
 return (0)|0;
}
function __dopr($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$$i = 0, $$$0209 = 0, $$$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0200$sink224 = 0, $$0200242$be = 0, $$0200242280 = 0, $$0201241$be = 0, $$0201241281 = 0, $$0208240$be = 0, $$0208240282 = 0, $$0209239$be = 0, $$0209239$mux = 0, $$0209239283 = 0, $$0212238$be = 0, $$0212238284 = 0, $$0215237$be = 0, $$0215237285 = 0, $$0219236$be = 0;
 var $$0219236286 = 0, $$05778$i = 0, $$05778$us$i = 0, $$058$lcssa$i = 0, $$05883$i = 0, $$05883$us$i = 0, $$084$i = 0, $$084$us$i = 0, $$1 = 0, $$1$lcssa$i = 0, $$1216 = 0, $$1220 = 0, $$15973$i = 0, $$15973$us$i = 0, $$16377$i = 0, $$16377$us$i = 0, $$179$i = 0, $$179$us$i = 0, $$2211 = 0, $$2214 = 0;
 var $$2217 = 0, $$2221$ph = 0, $$274$i = 0, $$3 = 0, $$3218 = 0, $$64$i = 0, $$67$$i = 0, $$67$i = 0, $$mask = 0, $$not = 0, $$not243 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = +0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = +0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = +0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0;
 var $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $brmerge = 0, $expanded = 0, $expanded100 = 0, $expanded102 = 0;
 var $expanded103 = 0, $expanded104 = 0, $expanded106 = 0, $expanded107 = 0, $expanded109 = 0, $expanded110 = 0, $expanded111 = 0, $expanded113 = 0, $expanded114 = 0, $expanded116 = 0, $expanded117 = 0, $expanded118 = 0, $expanded120 = 0, $expanded121 = 0, $expanded123 = 0, $expanded124 = 0, $expanded125 = 0, $expanded127 = 0, $expanded128 = 0, $expanded130 = 0;
 var $expanded131 = 0, $expanded132 = 0, $expanded134 = 0, $expanded135 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0, $expanded141 = 0, $expanded142 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded148 = 0, $expanded149 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0, $expanded155 = 0, $expanded156 = 0, $expanded158 = 0;
 var $expanded159 = 0, $expanded160 = 0, $expanded162 = 0, $expanded163 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0, $expanded169 = 0, $expanded170 = 0, $expanded172 = 0, $expanded173 = 0, $expanded174 = 0, $expanded176 = 0, $expanded177 = 0, $expanded179 = 0, $expanded180 = 0, $expanded181 = 0, $expanded183 = 0, $expanded184 = 0, $expanded186 = 0;
 var $expanded187 = 0, $expanded188 = 0, $expanded190 = 0, $expanded191 = 0, $expanded193 = 0, $expanded194 = 0, $expanded195 = 0, $expanded58 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded64 = 0, $expanded65 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded71 = 0, $expanded72 = 0, $expanded74 = 0, $expanded75 = 0;
 var $expanded76 = 0, $expanded78 = 0, $expanded79 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded85 = 0, $expanded86 = 0, $expanded88 = 0, $expanded89 = 0, $expanded90 = 0, $expanded92 = 0, $expanded93 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded99 = 0, $isdigit = 0, $isdigit223 = 0, $isdigittmp = 0;
 var $isdigittmp222 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $7 = sp;
 HEAP32[$7>>2] = 0;
 $8 = HEAP8[$5>>0]|0;
 $9 = ($1|0)==(0|0);
 $$not243 = ($1|0)!=(0|0);
 $10 = ($8<<24>>24)==(0);
 L1: do {
  if ($10) {
   label = 83;
  } else {
   $11 = $8 << 24 >> 24;
   $12 = ((($5)) + 1|0);
   $$0200242280 = $12;$$0201241281 = $8;$$0208240282 = 0;$$0209239283 = -1;$$0212238284 = 0;$$0215237285 = 0;$$0219236286 = 0;$19 = $11;
   L3: while(1) {
    if ($9) {
     $13 = HEAP32[$7>>2]|0;
     $14 = HEAP32[$2>>2]|0;
     $15 = ($13>>>0)<($14>>>0);
     if (!($15)) {
      label = 84;
      break L1;
     }
    }
    L8: do {
     switch ($$0212238284|0) {
     case 7:  {
      label = 83;
      break L1;
      break;
     }
     case 0:  {
      $18 = ($$0201241281<<24>>24)==(37);
      if ($18) {
       $$2214 = 1;
      } else {
       $20 = (_doapr_outch($0,$1,$7,$2,$19)|0);
       $21 = ($20|0)==(0);
       if ($21) {
        $$0 = 0;
        label = 88;
        break L3;
       } else {
        $$2214 = 0;
       }
      }
      $22 = ((($$0200242280)) + 1|0);
      $23 = HEAP8[$$0200242280>>0]|0;
      $$0200242$be = $22;$$0201241$be = $23;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = $$2214;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
      break;
     }
     case 1:  {
      switch ($19|0) {
      case 45:  {
       $24 = $$0215237285 | 1;
       $25 = ((($$0200242280)) + 1|0);
       $26 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $25;$$0201241$be = $26;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 1;$$0215237$be = $24;$$0219236$be = $$0219236286;
       break L8;
       break;
      }
      case 43:  {
       $27 = $$0215237285 | 2;
       $28 = ((($$0200242280)) + 1|0);
       $29 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $28;$$0201241$be = $29;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 1;$$0215237$be = $27;$$0219236$be = $$0219236286;
       break L8;
       break;
      }
      case 32:  {
       $30 = $$0215237285 | 4;
       $31 = ((($$0200242280)) + 1|0);
       $32 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $31;$$0201241$be = $32;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 1;$$0215237$be = $30;$$0219236$be = $$0219236286;
       break L8;
       break;
      }
      case 35:  {
       $33 = $$0215237285 | 8;
       $34 = ((($$0200242280)) + 1|0);
       $35 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $34;$$0201241$be = $35;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 1;$$0215237$be = $33;$$0219236$be = $$0219236286;
       break L8;
       break;
      }
      case 48:  {
       $36 = $$0215237285 | 16;
       $37 = ((($$0200242280)) + 1|0);
       $38 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $37;$$0201241$be = $38;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 1;$$0215237$be = $36;$$0219236$be = $$0219236286;
       break L8;
       break;
      }
      default: {
       $$0200242$be = $$0200242280;$$0201241$be = $$0201241281;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 2;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
       break L8;
      }
      }
      break;
     }
     case 2:  {
      $39 = $$0201241281&255;
      $isdigittmp222 = (($39) + -48)|0;
      $isdigit223 = ($isdigittmp222>>>0)<(10);
      if ($isdigit223) {
       $40 = ($$0208240282*10)|0;
       $41 = (($40) + -48)|0;
       $42 = (($41) + ($19))|0;
       $43 = ((($$0200242280)) + 1|0);
       $44 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $43;$$0201241$be = $44;$$0208240$be = $42;$$0209239$be = $$0209239283;$$0212238$be = 2;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
       break L8;
      }
      $45 = ($$0201241281<<24>>24)==(42);
      if ($45) {
       $arglist_current = HEAP32[$6>>2]|0;
       $46 = $arglist_current;
       $47 = ((0) + 4|0);
       $expanded58 = $47;
       $expanded = (($expanded58) - 1)|0;
       $48 = (($46) + ($expanded))|0;
       $49 = ((0) + 4|0);
       $expanded62 = $49;
       $expanded61 = (($expanded62) - 1)|0;
       $expanded60 = $expanded61 ^ -1;
       $50 = $48 & $expanded60;
       $51 = $50;
       $52 = HEAP32[$51>>2]|0;
       $arglist_next = ((($51)) + 4|0);
       HEAP32[$6>>2] = $arglist_next;
       $53 = ((($$0200242280)) + 1|0);
       $54 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $53;$$0201241$be = $54;$$0208240$be = $52;$$0209239$be = $$0209239283;$$0212238$be = 3;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
      } else {
       $$0200242$be = $$0200242280;$$0201241$be = $$0201241281;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 3;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
      }
      break;
     }
     case 3:  {
      $55 = ($$0201241281<<24>>24)==(46);
      if ($55) {
       $56 = ((($$0200242280)) + 1|0);
       $57 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $56;$$0201241$be = $57;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 4;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
      } else {
       $$0200242$be = $$0200242280;$$0201241$be = $$0201241281;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 5;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
      }
      break;
     }
     case 4:  {
      $58 = $$0201241281&255;
      $isdigittmp = (($58) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $59 = ($$0209239283|0)>(0);
       $$$0209 = $59 ? $$0209239283 : 0;
       $60 = ($$$0209*10)|0;
       $61 = (($19) + -48)|0;
       $62 = (($61) + ($60))|0;
       $63 = ((($$0200242280)) + 1|0);
       $64 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $63;$$0201241$be = $64;$$0208240$be = $$0208240282;$$0209239$be = $62;$$0212238$be = 4;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
       break L8;
      }
      $65 = ($$0201241281<<24>>24)==(42);
      if ($65) {
       $arglist_current2 = HEAP32[$6>>2]|0;
       $66 = $arglist_current2;
       $67 = ((0) + 4|0);
       $expanded65 = $67;
       $expanded64 = (($expanded65) - 1)|0;
       $68 = (($66) + ($expanded64))|0;
       $69 = ((0) + 4|0);
       $expanded69 = $69;
       $expanded68 = (($expanded69) - 1)|0;
       $expanded67 = $expanded68 ^ -1;
       $70 = $68 & $expanded67;
       $71 = $70;
       $72 = HEAP32[$71>>2]|0;
       $arglist_next3 = ((($71)) + 4|0);
       HEAP32[$6>>2] = $arglist_next3;
       $73 = ((($$0200242280)) + 1|0);
       $74 = HEAP8[$$0200242280>>0]|0;
       $$0200242$be = $73;$$0201241$be = $74;$$0208240$be = $$0208240282;$$0209239$be = $72;$$0212238$be = 5;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
      } else {
       $$0200242$be = $$0200242280;$$0201241$be = $$0201241281;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 5;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
      }
      break;
     }
     case 5:  {
      switch ($19|0) {
      case 104:  {
       $$0200$sink224 = $$0200242280;$$2221$ph = 1;
       break;
      }
      case 108:  {
       $75 = HEAP8[$$0200242280>>0]|0;
       $76 = ($75<<24>>24)==(108);
       $77 = ((($$0200242280)) + 1|0);
       $$1220 = $76 ? 4 : 2;
       $$1 = $76 ? $77 : $$0200242280;
       $$0200$sink224 = $$1;$$2221$ph = $$1220;
       break;
      }
      case 113:  {
       $$0200$sink224 = $$0200242280;$$2221$ph = 4;
       break;
      }
      case 76:  {
       $$0200$sink224 = $$0200242280;$$2221$ph = 3;
       break;
      }
      default: {
       $$0200242$be = $$0200242280;$$0201241$be = $$0201241281;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 6;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
       break L8;
      }
      }
      $78 = ((($$0200$sink224)) + 1|0);
      $79 = HEAP8[$$0200$sink224>>0]|0;
      $$0200242$be = $78;$$0201241$be = $79;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = 6;$$0215237$be = $$0215237285;$$0219236$be = $$2221$ph;
      break;
     }
     case 6:  {
      L39: do {
       switch ($19|0) {
       case 105: case 100:  {
        switch ($$0219236286|0) {
        case 1:  {
         $arglist_current5 = HEAP32[$6>>2]|0;
         $80 = $arglist_current5;
         $81 = ((0) + 4|0);
         $expanded72 = $81;
         $expanded71 = (($expanded72) - 1)|0;
         $82 = (($80) + ($expanded71))|0;
         $83 = ((0) + 4|0);
         $expanded76 = $83;
         $expanded75 = (($expanded76) - 1)|0;
         $expanded74 = $expanded75 ^ -1;
         $84 = $82 & $expanded74;
         $85 = $84;
         $86 = HEAP32[$85>>2]|0;
         $arglist_next6 = ((($85)) + 4|0);
         HEAP32[$6>>2] = $arglist_next6;
         $87 = $86&65535;
         $88 = $87 << 16 >> 16;
         $89 = ($88|0)<(0);
         $90 = $89 << 31 >> 31;
         $121 = $88;$122 = $90;
         break;
        }
        case 2:  {
         $arglist_current8 = HEAP32[$6>>2]|0;
         $91 = $arglist_current8;
         $92 = ((0) + 4|0);
         $expanded79 = $92;
         $expanded78 = (($expanded79) - 1)|0;
         $93 = (($91) + ($expanded78))|0;
         $94 = ((0) + 4|0);
         $expanded83 = $94;
         $expanded82 = (($expanded83) - 1)|0;
         $expanded81 = $expanded82 ^ -1;
         $95 = $93 & $expanded81;
         $96 = $95;
         $97 = HEAP32[$96>>2]|0;
         $arglist_next9 = ((($96)) + 4|0);
         HEAP32[$6>>2] = $arglist_next9;
         $98 = ($97|0)<(0);
         $99 = $98 << 31 >> 31;
         $121 = $97;$122 = $99;
         break;
        }
        case 4:  {
         $arglist_current11 = HEAP32[$6>>2]|0;
         $100 = $arglist_current11;
         $101 = ((0) + 8|0);
         $expanded86 = $101;
         $expanded85 = (($expanded86) - 1)|0;
         $102 = (($100) + ($expanded85))|0;
         $103 = ((0) + 8|0);
         $expanded90 = $103;
         $expanded89 = (($expanded90) - 1)|0;
         $expanded88 = $expanded89 ^ -1;
         $104 = $102 & $expanded88;
         $105 = $104;
         $106 = $105;
         $107 = $106;
         $108 = HEAP32[$107>>2]|0;
         $109 = (($106) + 4)|0;
         $110 = $109;
         $111 = HEAP32[$110>>2]|0;
         $arglist_next12 = ((($105)) + 8|0);
         HEAP32[$6>>2] = $arglist_next12;
         $121 = $108;$122 = $111;
         break;
        }
        default: {
         $arglist_current14 = HEAP32[$6>>2]|0;
         $112 = $arglist_current14;
         $113 = ((0) + 4|0);
         $expanded93 = $113;
         $expanded92 = (($expanded93) - 1)|0;
         $114 = (($112) + ($expanded92))|0;
         $115 = ((0) + 4|0);
         $expanded97 = $115;
         $expanded96 = (($expanded97) - 1)|0;
         $expanded95 = $expanded96 ^ -1;
         $116 = $114 & $expanded95;
         $117 = $116;
         $118 = HEAP32[$117>>2]|0;
         $arglist_next15 = ((($117)) + 4|0);
         HEAP32[$6>>2] = $arglist_next15;
         $119 = ($118|0)<(0);
         $120 = $119 << 31 >> 31;
         $121 = $118;$122 = $120;
        }
        }
        $123 = (_fmtint($0,$1,$7,$2,$121,$122,10,$$0208240282,$$0209239283,$$0215237285)|0);
        $124 = ($123|0)==(0);
        if ($124) {
         $$0 = 0;
         label = 88;
         break L3;
        } else {
         $$3 = $$0200242280;
        }
        break;
       }
       case 88:  {
        $125 = $$0215237285 | 32;
        $$1216 = $125;
        label = 39;
        break;
       }
       case 117: case 111: case 120:  {
        $$1216 = $$0215237285;
        label = 39;
        break;
       }
       case 102:  {
        $arglist_current29 = HEAP32[$6>>2]|0;
        $168 = $arglist_current29;
        $169 = ((0) + 8|0);
        $expanded128 = $169;
        $expanded127 = (($expanded128) - 1)|0;
        $170 = (($168) + ($expanded127))|0;
        $171 = ((0) + 8|0);
        $expanded132 = $171;
        $expanded131 = (($expanded132) - 1)|0;
        $expanded130 = $expanded131 ^ -1;
        $172 = $170 & $expanded130;
        $173 = $172;
        $174 = +HEAPF64[$173>>3];
        $arglist_next30 = ((($173)) + 8|0);
        HEAP32[$6>>2] = $arglist_next30;
        $175 = (_fmtfp($0,$1,$7,$2,$174,$$0208240282,$$0209239283,$$0215237285,0)|0);
        $176 = ($175|0)==(0);
        if ($176) {
         $$0 = 0;
         label = 88;
         break L3;
        } else {
         $$3 = $$0200242280;
        }
        break;
       }
       case 69:  {
        $177 = $$0215237285 | 32;
        $$2217 = $177;
        label = 47;
        break;
       }
       case 101:  {
        $$2217 = $$0215237285;
        label = 47;
        break;
       }
       case 71:  {
        $187 = $$0215237285 | 32;
        $$3218 = $187;
        label = 49;
        break;
       }
       case 103:  {
        $$3218 = $$0215237285;
        label = 49;
        break;
       }
       case 99:  {
        $arglist_current38 = HEAP32[$6>>2]|0;
        $197 = $arglist_current38;
        $198 = ((0) + 4|0);
        $expanded149 = $198;
        $expanded148 = (($expanded149) - 1)|0;
        $199 = (($197) + ($expanded148))|0;
        $200 = ((0) + 4|0);
        $expanded153 = $200;
        $expanded152 = (($expanded153) - 1)|0;
        $expanded151 = $expanded152 ^ -1;
        $201 = $199 & $expanded151;
        $202 = $201;
        $203 = HEAP32[$202>>2]|0;
        $arglist_next39 = ((($202)) + 4|0);
        HEAP32[$6>>2] = $arglist_next39;
        $204 = (_doapr_outch($0,$1,$7,$2,$203)|0);
        $205 = ($204|0)==(0);
        if ($205) {
         $$0 = 0;
         label = 88;
         break L3;
        } else {
         $$3 = $$0200242280;
        }
        break;
       }
       case 115:  {
        $arglist_current41 = HEAP32[$6>>2]|0;
        $206 = $arglist_current41;
        $207 = ((0) + 4|0);
        $expanded156 = $207;
        $expanded155 = (($expanded156) - 1)|0;
        $208 = (($206) + ($expanded155))|0;
        $209 = ((0) + 4|0);
        $expanded160 = $209;
        $expanded159 = (($expanded160) - 1)|0;
        $expanded158 = $expanded159 ^ -1;
        $210 = $208 & $expanded158;
        $211 = $210;
        $212 = HEAP32[$211>>2]|0;
        $arglist_next42 = ((($211)) + 4|0);
        HEAP32[$6>>2] = $arglist_next42;
        $$not = ($$0209239283|0)>(-1);
        $brmerge = $$not | $$not243;
        $$0209239$mux = $$not ? $$0209239283 : 2147483647;
        if ($brmerge) {
         $$2211 = $$0209239$mux;
        } else {
         $213 = HEAP32[$2>>2]|0;
         $$2211 = $213;
        }
        $214 = ($212|0)==(0|0);
        $$64$i = $214 ? 47601 : $212;
        $215 = ($$2211|0)>(-1);
        $216 = $215 ? $$2211 : -1;
        $217 = (_OPENSSL_strnlen($$64$i,$216)|0);
        $218 = (($$0208240282) - ($217))|0;
        $219 = $218 | $$0208240282;
        $220 = ($219|0)<(0);
        $$$i = $220 ? 0 : $218;
        $221 = (2147483647 - ($$$i))|0;
        $222 = ($221|0)>($$2211|0);
        $223 = (($$$i) + ($$2211))|0;
        $$67$i = $222 ? $223 : 2147483647;
        $$67$$i = $215 ? $$67$i : $$2211;
        $224 = $$0215237285 & 1;
        $225 = ($224|0)==(0);
        $226 = (0 - ($$$i))|0;
        $$$$i = $225 ? $$$i : $226;
        $227 = ($$$$i|0)>(0);
        L56: do {
         if ($227) {
          $228 = ($$67$$i|0)<(0);
          if ($228) {
           $$05883$us$i = $$$$i;$$084$us$i = 0;
           while(1) {
            $229 = (_doapr_outch($0,$1,$7,$2,32)|0);
            $230 = ($229|0)==(0);
            if ($230) {
             $$0 = 0;
             label = 88;
             break L3;
            }
            $231 = (($$05883$us$i) + -1)|0;
            $232 = (($$084$us$i) + 1)|0;
            $233 = ($$05883$us$i|0)>(1);
            if ($233) {
             $$05883$us$i = $231;$$084$us$i = $232;
            } else {
             $$0$lcssa$i = $232;$$058$lcssa$i = $231;
             break L56;
            }
           }
          } else {
           $$05883$i = $$$$i;$$084$i = 0;
          }
          while(1) {
           $234 = ($$084$i|0)<($$67$$i|0);
           if (!($234)) {
            $$0$lcssa$i = $$084$i;$$058$lcssa$i = $$05883$i;
            break L56;
           }
           $245 = (_doapr_outch($0,$1,$7,$2,32)|0);
           $246 = ($245|0)==(0);
           if ($246) {
            $$0 = 0;
            label = 88;
            break L3;
           }
           $247 = (($$05883$i) + -1)|0;
           $248 = (($$084$i) + 1)|0;
           $249 = ($$05883$i|0)>(1);
           if ($249) {
            $$05883$i = $247;$$084$i = $248;
           } else {
            $$0$lcssa$i = $248;$$058$lcssa$i = $247;
            break;
           }
          }
         } else {
          $$0$lcssa$i = 0;$$058$lcssa$i = $$$$i;
         }
        } while(0);
        $235 = ($217|0)==(0);
        L67: do {
         if ($235) {
          $$1$lcssa$i = $$0$lcssa$i;
         } else {
          $236 = ($$67$$i|0)<(0);
          if ($236) {
           $$05778$us$i = $217;$$16377$us$i = $$64$i;$$179$us$i = $$0$lcssa$i;
           while(1) {
            $237 = HEAP8[$$16377$us$i>>0]|0;
            $238 = $237 << 24 >> 24;
            $239 = (_doapr_outch($0,$1,$7,$2,$238)|0);
            $240 = ($239|0)==(0);
            if ($240) {
             $$0 = 0;
             label = 88;
             break L3;
            }
            $241 = ((($$16377$us$i)) + 1|0);
            $242 = (($$05778$us$i) + -1)|0;
            $243 = (($$179$us$i) + 1)|0;
            $244 = ($242|0)==(0);
            if ($244) {
             $$1$lcssa$i = $243;
             break L67;
            } else {
             $$05778$us$i = $242;$$16377$us$i = $241;$$179$us$i = $243;
            }
           }
          } else {
           $$05778$i = $217;$$16377$i = $$64$i;$$179$i = $$0$lcssa$i;
          }
          while(1) {
           $250 = ($$179$i|0)<($$67$$i|0);
           if (!($250)) {
            $$1$lcssa$i = $$179$i;
            break L67;
           }
           $257 = HEAP8[$$16377$i>>0]|0;
           $258 = $257 << 24 >> 24;
           $259 = (_doapr_outch($0,$1,$7,$2,$258)|0);
           $260 = ($259|0)==(0);
           if ($260) {
            $$0 = 0;
            label = 88;
            break L3;
           }
           $261 = ((($$16377$i)) + 1|0);
           $262 = (($$05778$i) + -1)|0;
           $263 = (($$179$i) + 1)|0;
           $264 = ($262|0)==(0);
           if ($264) {
            $$1$lcssa$i = $263;
            break;
           } else {
            $$05778$i = $262;$$16377$i = $261;$$179$i = $263;
           }
          }
         }
        } while(0);
        $251 = ($$058$lcssa$i|0)<(0);
        if ($251) {
         $252 = ($$67$$i|0)<(0);
         if ($252) {
          $$15973$us$i = $$058$lcssa$i;
          while(1) {
           $253 = (_doapr_outch($0,$1,$7,$2,32)|0);
           $254 = ($253|0)==(0);
           if ($254) {
            $$0 = 0;
            label = 88;
            break L3;
           }
           $255 = (($$15973$us$i) + 1)|0;
           $256 = ($$15973$us$i|0)<(-1);
           if ($256) {
            $$15973$us$i = $255;
           } else {
            $$3 = $$0200242280;
            break L39;
           }
          }
         } else {
          $$15973$i = $$058$lcssa$i;$$274$i = $$1$lcssa$i;
         }
         while(1) {
          $265 = ($$274$i|0)<($$67$$i|0);
          if (!($265)) {
           $$3 = $$0200242280;
           break L39;
          }
          $266 = (_doapr_outch($0,$1,$7,$2,32)|0);
          $267 = ($266|0)==(0);
          if ($267) {
           $$0 = 0;
           label = 88;
           break L3;
          }
          $268 = (($$15973$i) + 1)|0;
          $269 = (($$274$i) + 1)|0;
          $270 = ($$15973$i|0)<(-1);
          if ($270) {
           $$15973$i = $268;$$274$i = $269;
          } else {
           $$3 = $$0200242280;
           break;
          }
         }
        } else {
         $$3 = $$0200242280;
        }
        break;
       }
       case 112:  {
        $arglist_current44 = HEAP32[$6>>2]|0;
        $271 = $arglist_current44;
        $272 = ((0) + 4|0);
        $expanded163 = $272;
        $expanded162 = (($expanded163) - 1)|0;
        $273 = (($271) + ($expanded162))|0;
        $274 = ((0) + 4|0);
        $expanded167 = $274;
        $expanded166 = (($expanded167) - 1)|0;
        $expanded165 = $expanded166 ^ -1;
        $275 = $273 & $expanded165;
        $276 = $275;
        $277 = HEAP32[$276>>2]|0;
        $arglist_next45 = ((($276)) + 4|0);
        HEAP32[$6>>2] = $arglist_next45;
        $278 = $277;
        $279 = $$0215237285 | 8;
        $280 = (_fmtint($0,$1,$7,$2,$278,0,16,$$0208240282,$$0209239283,$279)|0);
        $281 = ($280|0)==(0);
        if ($281) {
         $$0 = 0;
         label = 88;
         break L3;
        } else {
         $$3 = $$0200242280;
        }
        break;
       }
       case 110:  {
        $282 = HEAP32[$7>>2]|0;
        switch ($$0219236286|0) {
        case 1:  {
         $arglist_current47 = HEAP32[$6>>2]|0;
         $283 = $arglist_current47;
         $284 = ((0) + 4|0);
         $expanded170 = $284;
         $expanded169 = (($expanded170) - 1)|0;
         $285 = (($283) + ($expanded169))|0;
         $286 = ((0) + 4|0);
         $expanded174 = $286;
         $expanded173 = (($expanded174) - 1)|0;
         $expanded172 = $expanded173 ^ -1;
         $287 = $285 & $expanded172;
         $288 = $287;
         $289 = HEAP32[$288>>2]|0;
         $arglist_next48 = ((($288)) + 4|0);
         HEAP32[$6>>2] = $arglist_next48;
         $290 = $282&65535;
         HEAP16[$289>>1] = $290;
         $$3 = $$0200242280;
         break L39;
         break;
        }
        case 2:  {
         $arglist_current50 = HEAP32[$6>>2]|0;
         $291 = $arglist_current50;
         $292 = ((0) + 4|0);
         $expanded177 = $292;
         $expanded176 = (($expanded177) - 1)|0;
         $293 = (($291) + ($expanded176))|0;
         $294 = ((0) + 4|0);
         $expanded181 = $294;
         $expanded180 = (($expanded181) - 1)|0;
         $expanded179 = $expanded180 ^ -1;
         $295 = $293 & $expanded179;
         $296 = $295;
         $297 = HEAP32[$296>>2]|0;
         $arglist_next51 = ((($296)) + 4|0);
         HEAP32[$6>>2] = $arglist_next51;
         HEAP32[$297>>2] = $282;
         $$3 = $$0200242280;
         break L39;
         break;
        }
        case 4:  {
         $arglist_current53 = HEAP32[$6>>2]|0;
         $298 = $arglist_current53;
         $299 = ((0) + 4|0);
         $expanded184 = $299;
         $expanded183 = (($expanded184) - 1)|0;
         $300 = (($298) + ($expanded183))|0;
         $301 = ((0) + 4|0);
         $expanded188 = $301;
         $expanded187 = (($expanded188) - 1)|0;
         $expanded186 = $expanded187 ^ -1;
         $302 = $300 & $expanded186;
         $303 = $302;
         $304 = HEAP32[$303>>2]|0;
         $arglist_next54 = ((($303)) + 4|0);
         HEAP32[$6>>2] = $arglist_next54;
         $305 = $304;
         $306 = $305;
         HEAP32[$306>>2] = $282;
         $307 = (($305) + 4)|0;
         $308 = $307;
         HEAP32[$308>>2] = 0;
         $$3 = $$0200242280;
         break L39;
         break;
        }
        default: {
         $arglist_current56 = HEAP32[$6>>2]|0;
         $309 = $arglist_current56;
         $310 = ((0) + 4|0);
         $expanded191 = $310;
         $expanded190 = (($expanded191) - 1)|0;
         $311 = (($309) + ($expanded190))|0;
         $312 = ((0) + 4|0);
         $expanded195 = $312;
         $expanded194 = (($expanded195) - 1)|0;
         $expanded193 = $expanded194 ^ -1;
         $313 = $311 & $expanded193;
         $314 = $313;
         $315 = HEAP32[$314>>2]|0;
         $arglist_next57 = ((($314)) + 4|0);
         HEAP32[$6>>2] = $arglist_next57;
         HEAP32[$315>>2] = $282;
         $$3 = $$0200242280;
         break L39;
        }
        }
        break;
       }
       case 37:  {
        $316 = (_doapr_outch($0,$1,$7,$2,37)|0);
        $317 = ($316|0)==(0);
        if ($317) {
         $$0 = 0;
         label = 88;
         break L3;
        } else {
         $$3 = $$0200242280;
        }
        break;
       }
       case 119:  {
        $318 = ((($$0200242280)) + 1|0);
        $$3 = $318;
        break;
       }
       default: {
        $$3 = $$0200242280;
       }
       }
      } while(0);
      if ((label|0) == 39) {
       label = 0;
       $126 = $$1216 | 64;
       switch ($$0219236286|0) {
       case 1:  {
        $arglist_current17 = HEAP32[$6>>2]|0;
        $127 = $arglist_current17;
        $128 = ((0) + 4|0);
        $expanded100 = $128;
        $expanded99 = (($expanded100) - 1)|0;
        $129 = (($127) + ($expanded99))|0;
        $130 = ((0) + 4|0);
        $expanded104 = $130;
        $expanded103 = (($expanded104) - 1)|0;
        $expanded102 = $expanded103 ^ -1;
        $131 = $129 & $expanded102;
        $132 = $131;
        $133 = HEAP32[$132>>2]|0;
        $arglist_next18 = ((($132)) + 4|0);
        HEAP32[$6>>2] = $arglist_next18;
        $$mask = $133 & 65535;
        $164 = $$mask;$165 = 0;
        break;
       }
       case 2:  {
        $arglist_current20 = HEAP32[$6>>2]|0;
        $134 = $arglist_current20;
        $135 = ((0) + 4|0);
        $expanded107 = $135;
        $expanded106 = (($expanded107) - 1)|0;
        $136 = (($134) + ($expanded106))|0;
        $137 = ((0) + 4|0);
        $expanded111 = $137;
        $expanded110 = (($expanded111) - 1)|0;
        $expanded109 = $expanded110 ^ -1;
        $138 = $136 & $expanded109;
        $139 = $138;
        $140 = HEAP32[$139>>2]|0;
        $arglist_next21 = ((($139)) + 4|0);
        HEAP32[$6>>2] = $arglist_next21;
        $164 = $140;$165 = 0;
        break;
       }
       case 4:  {
        $arglist_current23 = HEAP32[$6>>2]|0;
        $141 = $arglist_current23;
        $142 = ((0) + 8|0);
        $expanded114 = $142;
        $expanded113 = (($expanded114) - 1)|0;
        $143 = (($141) + ($expanded113))|0;
        $144 = ((0) + 8|0);
        $expanded118 = $144;
        $expanded117 = (($expanded118) - 1)|0;
        $expanded116 = $expanded117 ^ -1;
        $145 = $143 & $expanded116;
        $146 = $145;
        $147 = $146;
        $148 = $147;
        $149 = HEAP32[$148>>2]|0;
        $150 = (($147) + 4)|0;
        $151 = $150;
        $152 = HEAP32[$151>>2]|0;
        $arglist_next24 = ((($146)) + 8|0);
        HEAP32[$6>>2] = $arglist_next24;
        $164 = $149;$165 = $152;
        break;
       }
       default: {
        $arglist_current26 = HEAP32[$6>>2]|0;
        $153 = $arglist_current26;
        $154 = ((0) + 4|0);
        $expanded121 = $154;
        $expanded120 = (($expanded121) - 1)|0;
        $155 = (($153) + ($expanded120))|0;
        $156 = ((0) + 4|0);
        $expanded125 = $156;
        $expanded124 = (($expanded125) - 1)|0;
        $expanded123 = $expanded124 ^ -1;
        $157 = $155 & $expanded123;
        $158 = $157;
        $159 = HEAP32[$158>>2]|0;
        $arglist_next27 = ((($158)) + 4|0);
        HEAP32[$6>>2] = $arglist_next27;
        $164 = $159;$165 = 0;
       }
       }
       $160 = ($$0201241281<<24>>24)==(111);
       $161 = ($$0201241281<<24>>24)==(117);
       $162 = $161 ? 10 : 16;
       $163 = $160 ? 8 : $162;
       $166 = (_fmtint($0,$1,$7,$2,$164,$165,$163,$$0208240282,$$0209239283,$126)|0);
       $167 = ($166|0)==(0);
       if ($167) {
        $$0 = 0;
        label = 88;
        break L3;
       } else {
        $$3 = $$0200242280;
       }
      }
      else if ((label|0) == 47) {
       label = 0;
       $arglist_current32 = HEAP32[$6>>2]|0;
       $178 = $arglist_current32;
       $179 = ((0) + 8|0);
       $expanded135 = $179;
       $expanded134 = (($expanded135) - 1)|0;
       $180 = (($178) + ($expanded134))|0;
       $181 = ((0) + 8|0);
       $expanded139 = $181;
       $expanded138 = (($expanded139) - 1)|0;
       $expanded137 = $expanded138 ^ -1;
       $182 = $180 & $expanded137;
       $183 = $182;
       $184 = +HEAPF64[$183>>3];
       $arglist_next33 = ((($183)) + 8|0);
       HEAP32[$6>>2] = $arglist_next33;
       $185 = (_fmtfp($0,$1,$7,$2,$184,$$0208240282,$$0209239283,$$2217,1)|0);
       $186 = ($185|0)==(0);
       if ($186) {
        $$0 = 0;
        label = 88;
        break L3;
       } else {
        $$3 = $$0200242280;
       }
      }
      else if ((label|0) == 49) {
       label = 0;
       $arglist_current35 = HEAP32[$6>>2]|0;
       $188 = $arglist_current35;
       $189 = ((0) + 8|0);
       $expanded142 = $189;
       $expanded141 = (($expanded142) - 1)|0;
       $190 = (($188) + ($expanded141))|0;
       $191 = ((0) + 8|0);
       $expanded146 = $191;
       $expanded145 = (($expanded146) - 1)|0;
       $expanded144 = $expanded145 ^ -1;
       $192 = $190 & $expanded144;
       $193 = $192;
       $194 = +HEAPF64[$193>>3];
       $arglist_next36 = ((($193)) + 8|0);
       HEAP32[$6>>2] = $arglist_next36;
       $195 = (_fmtfp($0,$1,$7,$2,$194,$$0208240282,$$0209239283,$$3218,2)|0);
       $196 = ($195|0)==(0);
       if ($196) {
        $$0 = 0;
        label = 88;
        break L3;
       } else {
        $$3 = $$0200242280;
       }
      }
      $319 = ((($$3)) + 1|0);
      $320 = HEAP8[$$3>>0]|0;
      $$0200242$be = $319;$$0201241$be = $320;$$0208240$be = 0;$$0209239$be = -1;$$0212238$be = 0;$$0215237$be = 0;$$0219236$be = 0;
      break;
     }
     default: {
      $$0200242$be = $$0200242280;$$0201241$be = $$0201241281;$$0208240$be = $$0208240282;$$0209239$be = $$0209239283;$$0212238$be = $$0212238284;$$0215237$be = $$0215237285;$$0219236$be = $$0219236286;
     }
     }
    } while(0);
    $16 = $$0201241$be << 24 >> 24;
    $17 = ($$0201241$be<<24>>24)==(0);
    if ($17) {
     label = 83;
     break L1;
    } else {
     $$0200242280 = $$0200242$be;$$0201241281 = $$0201241$be;$$0208240282 = $$0208240$be;$$0209239283 = $$0209239$be;$$0212238284 = $$0212238$be;$$0215237285 = $$0215237$be;$$0219236286 = $$0219236$be;$19 = $16;
    }
   }
   if ((label|0) == 88) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 if ((label|0) == 83) {
  if ($9) {
   label = 84;
  }
 }
 if ((label|0) == 84) {
  $321 = HEAP32[$7>>2]|0;
  $322 = HEAP32[$2>>2]|0;
  $323 = (($322) + -1)|0;
  $324 = ($321>>>0)>($323>>>0);
  $325 = $324&1;
  HEAP32[$4>>2] = $325;
  if ($324) {
   $326 = HEAP32[$2>>2]|0;
   $327 = (($326) + -1)|0;
   HEAP32[$7>>2] = $327;
  }
 }
 $328 = (_doapr_outch($0,$1,$7,$2,0)|0);
 $329 = ($328|0)==(0);
 if ($329) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $330 = HEAP32[$7>>2]|0;
 $331 = (($330) + -1)|0;
 HEAP32[$3>>2] = $331;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _doapr_outch($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$1 = 0, $$pn = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = ($1|0)!=(0|0);
 $or$cond = $7 | $6;
 if (!($or$cond)) {
  _OPENSSL_die(47656,83252,0);
  // unreachable;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = ($8>>>0)>($9>>>0);
 if ($10) {
  _OPENSSL_die(47709,83252,0);
  // unreachable;
 }
 $11 = ($8|0)==($9|0);
 $or$cond36 = $7 & $11;
 do {
  if ($or$cond36) {
   $12 = ($8>>>0)>(2147482623);
   if ($12) {
    $$1 = 0;
    return ($$1|0);
   }
   $13 = (($8) + 1024)|0;
   HEAP32[$3>>2] = $13;
   $14 = HEAP32[$1>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $22 = (_CRYPTO_realloc($14,$13,83252,0)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     $$1 = 0;
     return ($$1|0);
    } else {
     HEAP32[$1>>2] = $22;
     break;
    }
   }
   $16 = (_CRYPTO_malloc($13,83252,0)|0);
   HEAP32[$1>>2] = $16;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $$1 = 0;
    return ($$1|0);
   }
   $18 = HEAP32[$2>>2]|0;
   $19 = ($18|0)==(0);
   do {
    if (!($19)) {
     $20 = HEAP32[$0>>2]|0;
     $21 = ($20|0)==(0|0);
     if ($21) {
      _OPENSSL_die(47747,83252,0);
      // unreachable;
     } else {
      _memcpy(($16|0),($20|0),($18|0))|0;
      break;
     }
    }
   } while(0);
   HEAP32[$0>>2] = 0;
  }
 } while(0);
 $24 = HEAP32[$2>>2]|0;
 $25 = HEAP32[$3>>2]|0;
 $26 = ($24>>>0)<($25>>>0);
 if (!($26)) {
  $$1 = 1;
  return ($$1|0);
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = ($27|0)==(0|0);
 $29 = $4&255;
 $30 = (($24) + 1)|0;
 HEAP32[$2>>2] = $30;
 if ($28) {
  $31 = HEAP32[$1>>2]|0;
  $$pn = $31;
 } else {
  $$pn = $27;
 }
 $$sink = (($$pn) + ($24)|0);
 HEAP8[$$sink>>0] = $29;
 $$1 = 1;
 return ($$1|0);
}
function _fmtint($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$ = 0, $$$$109 = 0, $$$109 = 0, $$0105 = 0, $$0106 = 0, $$093 = 0, $$097 = 0, $$097$ = 0, $$1 = 0, $$108$ = 0, $$109 = 0, $$111 = 0, $$195 = 0, $$195$ = 0, $$2 = 0, $$2104125 = 0, $$296$lcssa = 0, $$296127 = 0, $$299 = 0, $$3122 = 0;
 var $$neg112 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $10 = sp;
 $11 = ($8|0)>(0);
 $$ = $11 ? $8 : 0;
 $12 = $9 & 64;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $14 = ($5|0)<(0);
   if ($14) {
    $15 = (_i64Subtract(0,0,($4|0),($5|0))|0);
    $16 = tempRet0;
    $$0105 = 45;$96 = $15;$97 = $16;
    break;
   } else {
    $17 = $9 & 2;
    $18 = ($17|0)==(0);
    $19 = $9 << 3;
    $20 = $19 & 32;
    $$108$ = $18 ? $20 : 43;
    $$0105 = $$108$;$96 = $4;$97 = $5;
    break;
   }
  } else {
   $$0105 = 0;$96 = $4;$97 = $5;
  }
 } while(0);
 $21 = $9 & 8;
 $22 = ($6|0)==(8);
 $$109 = $22 ? 48040 : 83252;
 $23 = ($6|0)==(16);
 $$$109 = $23 ? 47619 : $$109;
 $24 = $9 & 32;
 $25 = ($24|0)!=(0);
 $26 = $25 ? 47622 : 47639;
 $$097 = 0;$27 = $96;$28 = $97;
 while(1) {
  $29 = (___uremdi3(($27|0),($28|0),($6|0),0)|0);
  $30 = tempRet0;
  $31 = (($26) + ($29)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = (($$097) + 1)|0;
  $34 = (($10) + ($$097)|0);
  HEAP8[$34>>0] = $32;
  $35 = (___udivdi3(($27|0),($28|0),($6|0),0)|0);
  $36 = tempRet0;
  $37 = (0)<($28>>>0);
  $38 = ($6>>>0)<=($27>>>0);
  $39 = (0)==($28|0);
  $40 = $39 & $38;
  $41 = $37 | $40;
  $42 = ($33|0)<(26);
  $43 = $41 & $42;
  if ($43) {
   $$097 = $33;$27 = $35;$28 = $36;
  } else {
   break;
  }
 }
 $44 = ($21|0)==(0);
 $$$$109 = $44 ? 83252 : $$$109;
 $45 = ($33|0)==(26);
 $$097$ = $45 ? $$097 : $33;
 $46 = (($10) + ($$097$)|0);
 HEAP8[$46>>0] = 0;
 $47 = (($$) - ($$097$))|0;
 $48 = ($$|0)>=($$097$|0);
 $49 = $48 ? $$ : $$097$;
 $50 = ($$0105|0)!=(0);
 $$neg112 = $50 << 31 >> 31;
 $51 = (_strlen($$$$109)|0);
 $52 = (($$neg112) + ($7))|0;
 $53 = (($52) - ($49))|0;
 $54 = (($53) - ($51))|0;
 $55 = ($47|0)>(0);
 $$093 = $55 ? $47 : 0;
 $56 = ($54|0)>(0);
 $$111 = $56 ? $54 : 0;
 $57 = $9 & 16;
 $58 = ($57|0)==(0);
 $59 = ($$093|0)>=($$111|0);
 $$195 = $58 ? $$111 : 0;
 $60 = $58 | $59;
 $$1 = $60 ? $$093 : $$111;
 $61 = $9 & 1;
 $62 = ($61|0)==(0);
 $63 = (0 - ($$195))|0;
 $$195$ = $62 ? $$195 : $63;
 $64 = ($$195$|0)>(0);
 L10: do {
  if ($64) {
   $$296127 = $$195$;
   while(1) {
    $65 = (_doapr_outch($0,$1,$2,$3,32)|0);
    $66 = ($65|0)==(0);
    if ($66) {
     $$0106 = 0;
     break;
    }
    $67 = (($$296127) + -1)|0;
    $68 = ($$296127|0)>(1);
    if ($68) {
     $$296127 = $67;
    } else {
     $$296$lcssa = $67;
     break L10;
    }
   }
   STACKTOP = sp;return ($$0106|0);
  } else {
   $$296$lcssa = $$195$;
  }
 } while(0);
 if ($50) {
  $69 = (_doapr_outch($0,$1,$2,$3,$$0105)|0);
  $70 = ($69|0)==(0);
  if ($70) {
   $$0106 = 0;
   STACKTOP = sp;return ($$0106|0);
  }
 }
 $71 = HEAP8[$$$$109>>0]|0;
 $72 = ($71<<24>>24)==(0);
 L20: do {
  if (!($72)) {
   $$2104125 = $$$$109;$77 = $71;
   while(1) {
    $76 = $77 << 24 >> 24;
    $78 = (_doapr_outch($0,$1,$2,$3,$76)|0);
    $79 = ($78|0)==(0);
    $74 = ((($$2104125)) + 1|0);
    if ($79) {
     $$0106 = 0;
     break;
    }
    $73 = HEAP8[$74>>0]|0;
    $75 = ($73<<24>>24)==(0);
    if ($75) {
     break L20;
    } else {
     $$2104125 = $74;$77 = $73;
    }
   }
   STACKTOP = sp;return ($$0106|0);
  }
 } while(0);
 $80 = ($$1|0)==(0);
 L26: do {
  if ($80) {
   $$299 = $$097$;
  } else {
   $$2 = $$1;
   while(1) {
    $81 = (_doapr_outch($0,$1,$2,$3,48)|0);
    $82 = ($81|0)==(0);
    if ($82) {
     $$0106 = 0;
     break;
    }
    $83 = (($$2) + -1)|0;
    $$old1 = ($$2|0)>(1);
    if ($$old1) {
     $$2 = $83;
    } else {
     $$299 = $$097$;
     break L26;
    }
   }
   STACKTOP = sp;return ($$0106|0);
  }
 } while(0);
 while(1) {
  $84 = ($$299|0)>(0);
  if (!($84)) {
   break;
  }
  $86 = (($$299) + -1)|0;
  $87 = (($10) + ($86)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88 << 24 >> 24;
  $90 = (_doapr_outch($0,$1,$2,$3,$89)|0);
  $91 = ($90|0)==(0);
  if ($91) {
   $$0106 = 0;
   label = 23;
   break;
  } else {
   $$299 = $86;
  }
 }
 if ((label|0) == 23) {
  STACKTOP = sp;return ($$0106|0);
 }
 $85 = ($$296$lcssa|0)<(0);
 if ($85) {
  $$3122 = $$296$lcssa;
 } else {
  $$0106 = 1;
  STACKTOP = sp;return ($$0106|0);
 }
 while(1) {
  $94 = (_doapr_outch($0,$1,$2,$3,32)|0);
  $95 = ($94|0)==(0);
  if ($95) {
   $$0106 = 0;
   label = 23;
   break;
  }
  $92 = (($$3122) + 1)|0;
  $93 = ($$3122|0)<(-1);
  if ($93) {
   $$3122 = $92;
  } else {
   $$0106 = 1;
   label = 23;
   break;
  }
 }
 if ((label|0) == 23) {
  STACKTOP = sp;return ($$0106|0);
 }
 return (0)|0;
}
function _fmtfp($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$$0215 = 0, $$$0224 = 0, $$$3213 = 0, $$$3240 = 0, $$0$i = +0, $$0$i258 = 0, $$0$i258270 = 0, $$0$i265 = 0, $$0$i265$ = 0, $$0$lcssa$i262 = +0, $$0202 = 0, $$0204 = 0, $$0204266 = 0, $$0204267 = 0, $$0209 = 0, $$0210$lcssa = 0, $$0210325 = 0, $$0214303 = 0, $$0215 = 0, $$0219 = 0;
 var $$0224$ph$lcssa = 0, $$0224$ph$us = 0, $$0224$ph395 = 0, $$0227 = 0, $$0227$ = 0, $$0230$lcssa = +0, $$0230324 = +0, $$0233 = +0, $$0234 = 0, $$034$i = 0, $$034$i254 = 0, $$034$i260 = 0, $$05$i = +0, $$05$i253 = +0, $$05$i259 = +0, $$1208$ph$us = 0, $$1208$ph396 = 0, $$1208$us$us = 0, $$1211320 = 0, $$1231319 = +0;
 var $$2212 = 0, $$2217 = 0, $$2226 = 0, $$2229 = 0, $$2232 = +0, $$2232$ = +0, $$2239 = 0, $$243 = 0, $$243$op = 0, $$244$ = 0, $$273 = 0, $$3 = 0, $$3213 = 0, $$3218309 = 0, $$3222 = 0, $$3240 = 0, $$4$lcssa = 0, $$4$lcssa352 = 0, $$4223 = 0, $$4305 = 0;
 var $$5242$ph$us = 0, $$5242$us$us = 0, $$5300 = 0, $$6 = 0, $$neg = 0, $$neg274 = 0, $$neg275 = 0, $$neg276 = 0, $$not = 0, $$op = 0, $$sink$us = 0, $$sink246$us = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = +0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = +0, $33 = 0, $34 = 0, $35 = +0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = +0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = +0, $50 = 0, $51 = 0, $52 = 0, $53 = +0, $54 = +0, $55 = 0, $56 = +0, $57 = 0, $58 = 0, $59 = +0, $60 = +0, $61 = +0, $62 = 0, $63 = +0, $64 = +0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $not$$i = 0, $not$$i264 = 0, $or$cond = 0, $or$cond248 = 0, $or$cond6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $9 = sp + 40|0;
 $10 = sp + 20|0;
 $11 = sp;
 $12 = ($6|0)<(0);
 $$243 = $12 ? 6 : $6;
 $13 = $4 < +0;
 if ($13) {
  $$0234 = 45;
 } else {
  $14 = $7 & 2;
  $15 = ($14|0)==(0);
  $16 = $7 << 3;
  $17 = $16 & 32;
  $$244$ = $15 ? $17 : 43;
  $$0234 = $$244$;
 }
 $18 = ($8|0)==(2);
 do {
  if ($18) {
   $19 = $4 == +0;
   if ($19) {
    $$0204266 = 0;
    label = 12;
   } else {
    $20 = $4 < +1.0E-4;
    if ($20) {
     $$0204266 = 1;
     label = 12;
    } else {
     $21 = ($$243|0)==(0);
     $22 = $4 >= +10;
     $or$cond = $22 & $21;
     if ($or$cond) {
      $$0204266 = 1;
      label = 12;
     } else {
      $23 = ($$243|0)>(0);
      if ($23) {
       $$034$i = $$243;$$05$i = +1;
       while(1) {
        $24 = $$05$i * +10;
        $25 = (($$034$i) + -1)|0;
        $26 = ($25|0)==(0);
        if ($26) {
         break;
        } else {
         $$034$i = $25;$$05$i = $24;
        }
       }
       $27 = !($24 <= $4);
       if (!($27)) {
        $$0204 = 1;
        label = 11;
        break;
       }
      }
      $$0204 = 0;
      label = 11;
     }
    }
   }
  } else {
   $$0204 = $8;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $28 = ($8|0)==(0);
  if ($28) {
   $$0204267 = $$0204;$$0233 = $4;$$3213 = 0;$$3240 = $$243;
  } else {
   $$0204266 = $$0204;
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $29 = $4 != +0;
  if ($29) {
   $30 = $4 < +1;
   if ($30) {
    $$0210325 = 0;$$0230324 = $4;
    while(1) {
     $32 = $$0230324 * +10;
     $33 = (($$0210325) + -1)|0;
     $34 = $32 < +1;
     if ($34) {
      $$0210325 = $33;$$0230324 = $32;
     } else {
      $$0210$lcssa = $33;$$0230$lcssa = $32;
      break;
     }
    }
   } else {
    $$0210$lcssa = 0;$$0230$lcssa = $4;
   }
   $31 = $$0230$lcssa > +10;
   if ($31) {
    $$1211320 = $$0210$lcssa;$$1231319 = $$0230$lcssa;
    while(1) {
     $35 = $$1231319 / +10;
     $36 = (($$1211320) + 1)|0;
     $37 = $35 > +10;
     if ($37) {
      $$1211320 = $36;$$1231319 = $35;
     } else {
      $$2212 = $36;$$2232 = $35;
      break;
     }
    }
   } else {
    $$2212 = $$0210$lcssa;$$2232 = $$0230$lcssa;
   }
  } else {
   $$2212 = 0;$$2232 = $4;
  }
  if ($18) {
   $38 = ($$243|0)==(0);
   $39 = ($$0204266|0)==(0);
   $$243$op = (($$243) + -1)|0;
   $$neg = $38 ? 0 : $$243$op;
   if ($39) {
    $40 = (($$neg) - ($$2212))|0;
    $41 = ($40|0)<(0);
    if ($41) {
     $$3 = 0;
     STACKTOP = sp;return ($$3|0);
    } else {
     $$2239 = $40;
    }
   } else {
    $$2239 = $$neg;
   }
  } else {
   $$2239 = $$243;
  }
  $42 = ($$0204266|0)==(1);
  $$2232$ = $42 ? $$2232 : $4;
  $$0204267 = $$0204266;$$0233 = $$2232$;$$3213 = $$2212;$$3240 = $$2239;
 }
 $43 = $$0233 < +0;
 $44 = -$$0233;
 $$0$i = $43 ? $44 : $$0233;
 $45 = $$0$i > +4294967295;
 if ($45) {
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $46 = (~~(($$0$i))>>>0);
 $47 = ($$3240|0)<(9);
 $$$3240 = $47 ? $$3240 : 9;
 $48 = ($$$3240|0)==(0);
 if ($48) {
  $$0$i258270 = 1;$$0$lcssa$i262 = +1;
 } else {
  $$034$i254 = $$$3240;$$05$i253 = +1;
  while(1) {
   $49 = $$05$i253 * +10;
   $50 = (($$034$i254) + -1)|0;
   $51 = ($50|0)==(0);
   if ($51) {
    break;
   } else {
    $$034$i254 = $50;$$05$i253 = $49;
   }
  }
  $52 = (~~(($49)));
  $53 = (+($52|0));
  $54 = $49 - $53;
  $not$$i = $54 >= +0.5;
  $55 = $not$$i&1;
  $$0$i258 = (($55) + ($52))|0;
  $$034$i260 = $$$3240;$$05$i259 = +1;
  while(1) {
   $56 = $$05$i259 * +10;
   $57 = (($$034$i260) + -1)|0;
   $58 = ($57|0)==(0);
   if ($58) {
    $$0$i258270 = $$0$i258;$$0$lcssa$i262 = $56;
    break;
   } else {
    $$034$i260 = $57;$$05$i259 = $56;
   }
  }
 }
 $59 = (+($46>>>0));
 $60 = $$0$i - $59;
 $61 = $60 * $$0$lcssa$i262;
 $62 = (~~(($61)));
 $63 = (+($62|0));
 $64 = $61 - $63;
 $not$$i264 = $64 >= +0.5;
 $65 = $not$$i264&1;
 $$0$i265 = (($65) + ($62))|0;
 $66 = ($$0$i265>>>0)<($$0$i258270>>>0);
 $not$ = $66 ^ 1;
 $67 = $not$&1;
 $$273 = (($67) + ($46))|0;
 $68 = $66 ? 0 : $$0$i258270;
 $$0209 = $$273;$$0227 = 0;
 while(1) {
  $69 = (($$0209>>>0) % 10)&-1;
  $70 = (47608 + ($69)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = (($$0227) + 1)|0;
  $73 = (($9) + ($$0227)|0);
  HEAP8[$73>>0] = $71;
  $74 = (($$0209>>>0) / 10)&-1;
  $75 = ($$0209>>>0)>(9);
  $76 = ($72|0)<(20);
  $77 = $75 & $76;
  if ($77) {
   $$0209 = $74;$$0227 = $72;
  } else {
   break;
  }
 }
 $$0$i265$ = (($$0$i265) - ($68))|0;
 $78 = ($72|0)==(20);
 $$0227$ = $78 ? $$0227 : $72;
 $79 = (($9) + ($$0227$)|0);
 L46: do {
  if ($18) {
   $$0224$ph$us = 0;$$1208$ph$us = $$0$i265$;$$5242$ph$us = $$$3240;$$sink$us = 0;$$sink246$us = $79;
   while(1) {
    HEAP8[$$sink246$us>>0] = $$sink$us;
    $$1208$us$us = $$1208$ph$us;$$5242$us$us = $$5242$ph$us;
    while(1) {
     $81 = ($$0224$ph$us|0)<($$5242$us$us|0);
     if (!($81)) {
      $$0224$ph$lcssa = $$0224$ph$us;$$6 = $$5242$us$us;
      break L46;
     }
     $82 = (($$1208$us$us>>>0) % 10)&-1;
     $83 = (($$1208$us$us>>>0) / 10)&-1;
     $84 = $82 | $$0224$ph$us;
     $85 = ($84|0)==(0);
     if (!($85)) {
      break;
     }
     $86 = (($$5242$us$us) + -1)|0;
     $87 = ($$0224$ph$us|0)<($86|0);
     if ($87) {
      $$1208$us$us = $83;$$5242$us$us = $86;
     } else {
      $$0224$ph$lcssa = $$0224$ph$us;$$6 = $86;
      break L46;
     }
    }
    $88 = (47608 + ($82)|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = (($$0224$ph$us) + 1)|0;
    $91 = (($10) + ($$0224$ph$us)|0);
    $$0224$ph$us = $90;$$1208$ph$us = $83;$$5242$ph$us = $$5242$us$us;$$sink$us = $89;$$sink246$us = $91;
   }
  } else {
   HEAP8[$79>>0] = 0;
   $80 = ($$3240|0)>(0);
   if ($80) {
    $$0224$ph395 = 0;$$1208$ph396 = $$0$i265$;
    while(1) {
     $92 = (($$1208$ph396>>>0) % 10)&-1;
     $93 = (($$1208$ph396>>>0) / 10)&-1;
     $94 = (47608 + ($92)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = (($$0224$ph395) + 1)|0;
     $97 = (($10) + ($$0224$ph395)|0);
     HEAP8[$97>>0] = $95;
     $98 = ($96|0)<($$$3240|0);
     if ($98) {
      $$0224$ph395 = $96;$$1208$ph396 = $93;
     } else {
      $$0224$ph$lcssa = $96;$$6 = $$$3240;
      break;
     }
    }
   } else {
    $$0224$ph$lcssa = 0;$$6 = $$$3240;
   }
  }
 } while(0);
 $99 = ($$0224$ph$lcssa|0)==(20);
 $100 = $99 << 31 >> 31;
 $$$0224 = (($100) + ($$0224$ph$lcssa))|0;
 $101 = (($10) + ($$$0224)|0);
 HEAP8[$101>>0] = 0;
 $102 = ($$0204267|0)==(1);
 if ($102) {
  $103 = ($$3213|0)<(0);
  $104 = (0 - ($$3213))|0;
  $$$3213 = $103 ? $104 : $$3213;
  $$0202 = $$$3213;$$0219 = 0;
  while(1) {
   $105 = (($$0202|0) % 10)&-1;
   $106 = (47608 + ($105)|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = (($$0219) + 1)|0;
   $109 = (($11) + ($$0219)|0);
   HEAP8[$109>>0] = $107;
   $110 = (($$0202|0) / 10)&-1;
   $111 = ($$0202|0)>(9);
   $112 = ($108|0)<(20);
   $113 = $111 & $112;
   if ($113) {
    $$0202 = $110;$$0219 = $108;
   } else {
    break;
   }
  }
  if ($111) {
   $$3 = 0;
   STACKTOP = sp;return ($$3|0);
  }
  $114 = ($$0219|0)==(0);
  if ($114) {
   $115 = (($11) + ($108)|0);
   HEAP8[$115>>0] = 48;
   $$3222 = 2;
  } else {
   $$3222 = $108;
  }
 } else {
  $$3222 = 0;
 }
 $116 = ($$6|0)>(0);
 $$neg274 = $116 << 31 >> 31;
 $117 = ($$0234|0)!=(0);
 $$neg275 = $117 << 31 >> 31;
 $$op = (-2 - ($$3222))|0;
 $$neg276 = $102 ? $$op : 0;
 $118 = (($$neg275) + ($5))|0;
 $119 = (($118) - ($$0227$))|0;
 $120 = (($119) - ($$6))|0;
 $121 = (($120) + ($$neg274))|0;
 $$0215 = (($121) + ($$neg276))|0;
 $122 = (($$6) - ($$$0224))|0;
 $123 = ($122|0)>(0);
 $124 = ($$0215|0)>(0);
 $$$0215 = $124 ? $$0215 : 0;
 $125 = $7 & 1;
 $126 = ($125|0)==(0);
 $127 = (0 - ($$$0215))|0;
 $$2217 = $126 ? $$$0215 : $127;
 $128 = $7 & 16;
 $129 = ($128|0)!=(0);
 $130 = ($$2217|0)>(0);
 $or$cond6 = $129 & $130;
 L68: do {
  if ($or$cond6) {
   do {
    if ($117) {
     $132 = (_doapr_outch($0,$1,$2,$3,$$0234)|0);
     $133 = ($132|0)==(0);
     if ($133) {
      $$3 = 0;
      STACKTOP = sp;return ($$3|0);
     } else {
      $134 = (($$2217) + -1)|0;
      $135 = ($$2217|0)>(1);
      if ($135) {
       $$3218309 = $134;
       break;
      } else {
       $$4$lcssa352 = 0;
       break L68;
      }
     }
    } else {
     $$3218309 = $$2217;
    }
   } while(0);
   while(1) {
    $138 = (_doapr_outch($0,$1,$2,$3,48)|0);
    $139 = ($138|0)==(0);
    if ($139) {
     $$3 = 0;
     break;
    }
    $136 = (($$3218309) + -1)|0;
    $137 = ($$3218309|0)>(1);
    if ($137) {
     $$3218309 = $136;
    } else {
     $$4$lcssa352 = 0;
     break L68;
    }
   }
   STACKTOP = sp;return ($$3|0);
  } else {
   $131 = ($$2217|0)>(0);
   L80: do {
    if ($131) {
     $$4305 = $$2217;
     while(1) {
      $140 = (_doapr_outch($0,$1,$2,$3,32)|0);
      $141 = ($140|0)==(0);
      if ($141) {
       $$3 = 0;
       break;
      }
      $142 = (($$4305) + -1)|0;
      $143 = ($$4305|0)>(1);
      if ($143) {
       $$4305 = $142;
      } else {
       $$4$lcssa = $142;
       break L80;
      }
     }
     STACKTOP = sp;return ($$3|0);
    } else {
     $$4$lcssa = $$2217;
    }
   } while(0);
   $144 = ($$0234|0)==(0);
   if ($144) {
    $$4$lcssa352 = $$4$lcssa;
   } else {
    $145 = (_doapr_outch($0,$1,$2,$3,$$0234)|0);
    $146 = ($145|0)==(0);
    if ($146) {
     $$3 = 0;
     STACKTOP = sp;return ($$3|0);
    } else {
     $$4$lcssa352 = $$4$lcssa;
    }
   }
  }
 } while(0);
 $$2229 = $$0227$;
 while(1) {
  $147 = ($$2229|0)>(0);
  if (!($147)) {
   break;
  }
  $148 = (($$2229) + -1)|0;
  $149 = (($9) + ($148)|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = $150 << 24 >> 24;
  $152 = (_doapr_outch($0,$1,$2,$3,$151)|0);
  $153 = ($152|0)==(0);
  if ($153) {
   $$3 = 0;
   label = 73;
   break;
  } else {
   $$2229 = $148;
  }
 }
 if ((label|0) == 73) {
  STACKTOP = sp;return ($$3|0);
 }
 $$not = $116 ^ 1;
 $154 = $7 & 8;
 $155 = ($154|0)==(0);
 $or$cond248 = $155 & $$not;
 L95: do {
  if (!($or$cond248)) {
   $156 = (_doapr_outch($0,$1,$2,$3,46)|0);
   $157 = ($156|0)==(0);
   if ($157) {
    $$3 = 0;
    STACKTOP = sp;return ($$3|0);
   } else {
    $$2226 = $$$0224;
   }
   while(1) {
    $158 = ($$2226|0)>(0);
    if (!($158)) {
     break L95;
    }
    $159 = (($$2226) + -1)|0;
    $160 = (($10) + ($159)|0);
    $161 = HEAP8[$160>>0]|0;
    $162 = $161 << 24 >> 24;
    $163 = (_doapr_outch($0,$1,$2,$3,$162)|0);
    $164 = ($163|0)==(0);
    if ($164) {
     $$3 = 0;
     break;
    } else {
     $$2226 = $159;
    }
   }
   STACKTOP = sp;return ($$3|0);
  }
 } while(0);
 L104: do {
  if ($123) {
   $$0214303 = $122;
   while(1) {
    $167 = (_doapr_outch($0,$1,$2,$3,48)|0);
    $168 = ($167|0)==(0);
    if ($168) {
     $$3 = 0;
     break;
    }
    $165 = (($$0214303) + -1)|0;
    $166 = ($$0214303|0)>(1);
    if ($166) {
     $$0214303 = $165;
    } else {
     break L104;
    }
   }
   STACKTOP = sp;return ($$3|0);
  }
 } while(0);
 L110: do {
  if ($102) {
   $169 = $7 & 32;
   $170 = $169 ^ 101;
   $171 = (_doapr_outch($0,$1,$2,$3,$170)|0);
   $172 = ($171|0)==(0);
   if ($172) {
    $$3 = 0;
    STACKTOP = sp;return ($$3|0);
   }
   $173 = ($$3213|0)<(0);
   if ($173) {
    $174 = (_doapr_outch($0,$1,$2,$3,45)|0);
    $175 = ($174|0)==(0);
    if ($175) {
     $$3 = 0;
     STACKTOP = sp;return ($$3|0);
    } else {
     $$4223 = $$3222;
    }
   } else {
    $176 = (_doapr_outch($0,$1,$2,$3,43)|0);
    $177 = ($176|0)==(0);
    if ($177) {
     $$3 = 0;
     STACKTOP = sp;return ($$3|0);
    } else {
     $$4223 = $$3222;
    }
   }
   while(1) {
    $178 = ($$4223|0)>(0);
    if (!($178)) {
     break L110;
    }
    $180 = (($$4223) + -1)|0;
    $181 = (($11) + ($180)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182 << 24 >> 24;
    $184 = (_doapr_outch($0,$1,$2,$3,$183)|0);
    $185 = ($184|0)==(0);
    if ($185) {
     $$3 = 0;
     break;
    } else {
     $$4223 = $180;
    }
   }
   STACKTOP = sp;return ($$3|0);
  }
 } while(0);
 $179 = ($$4$lcssa352|0)<(0);
 if ($179) {
  $$5300 = $$4$lcssa352;
 } else {
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 while(1) {
  $188 = (_doapr_outch($0,$1,$2,$3,32)|0);
  $189 = ($188|0)==(0);
  if ($189) {
   $$3 = 0;
   label = 73;
   break;
  }
  $186 = (($$5300) + 1)|0;
  $187 = ($$5300|0)<(-1);
  if ($187) {
   $$5300 = $186;
  } else {
   $$3 = 1;
   label = 73;
   break;
  }
 }
 if ((label|0) == 73) {
  STACKTOP = sp;return ($$3|0);
 }
 return (0)|0;
}
function _BIO_snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp;
 HEAP32[$7>>2] = $varargs;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $8 = (__dopr($3,0,$4,$5,$6,$2,$7)|0);
 $9 = ($8|0)!=(0);
 $10 = HEAP32[$6>>2]|0;
 $11 = ($10|0)==(0);
 $or$cond$i = $9 & $11;
 if (!($or$cond$i)) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $12 = HEAP32[$5>>2]|0;
 $13 = ($12|0)>(-1);
 $14 = $13 ? $12 : -1;
 $$0$i = $14;
 STACKTOP = sp;return ($$0$i|0);
}
function _BIO_free($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($0)) + 44|0);
 $4 = ((($0)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_CRYPTO_atomic_add($3,-1,$1,$5)|0);
 $7 = ($6|0)<(1);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = (FUNCTION_TABLE_iiiiiii[$11 & 31]($0,1,0,0,0,1)|0);
  HEAP32[$1>>2] = $13;
  $14 = ($13|0)<(1);
  if ($14) {
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = ((($15)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   (FUNCTION_TABLE_ii[$18 & 63]($0)|0);
  }
 }
 $20 = ((($0)) + 64|0);
 _CRYPTO_free_ex_data(12,$0,$20);
 $21 = HEAP32[$4>>2]|0;
 _CRYPTO_THREAD_lock_free($21);
 _CRYPTO_free($0,83252,0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _BIO_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($6)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $11 = ($5|0)!=(0|0);
   if ($11) {
    $12 = (FUNCTION_TABLE_iiiiiii[$5 & 31]($0,3,$1,$2,0,1)|0);
    $13 = ($12|0)<(1);
    if ($13) {
     $$0 = $12;
     return ($$0|0);
    }
   }
   $14 = ((($0)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    _ERR_put_error(32,113,120,0,0);
    $$0 = -2;
    return ($$0|0);
   }
   $17 = HEAP32[$0>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiii[$19 & 63]($0,$1,$2)|0);
   $21 = ($20|0)>(0);
   $22 = ((($0)) + 56|0);
   if ($21) {
    $23 = ($20|0)<(0);
    $24 = $23 << 31 >> 31;
    $25 = $22;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = (($25) + 4)|0;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (_i64Add(($27|0),($30|0),($20|0),($24|0))|0);
    $32 = tempRet0;
    $33 = $22;
    $34 = $33;
    HEAP32[$34>>2] = $31;
    $35 = (($33) + 4)|0;
    $36 = $35;
    HEAP32[$36>>2] = $32;
   }
   if (!($11)) {
    $$0 = $20;
    return ($$0|0);
   }
   $37 = (FUNCTION_TABLE_iiiiiii[$5 & 31]($0,131,$1,$2,0,$20)|0);
   $$0 = $37;
   return ($$0|0);
  }
 }
 _ERR_put_error(32,113,121,0,0);
 $$0 = -2;
 return ($$0|0);
}
function _BIO_puts($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = ((($0)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)!=(0|0);
    if ($10) {
     $11 = (FUNCTION_TABLE_iiiiiii[$9 & 31]($0,4,$1,0,0,1)|0);
     $12 = ($11|0)<(1);
     if ($12) {
      $$0 = $11;
      return ($$0|0);
     }
    }
    $13 = ((($0)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if ($15) {
     _ERR_put_error(32,110,120,0,0);
     $$0 = -2;
     return ($$0|0);
    }
    $16 = HEAP32[$0>>2]|0;
    $17 = ((($16)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iii[$18 & 63]($0,$1)|0);
    $20 = ($19|0)>(0);
    $21 = ((($0)) + 56|0);
    if ($20) {
     $22 = ($19|0)<(0);
     $23 = $22 << 31 >> 31;
     $24 = $21;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $27 = (($24) + 4)|0;
     $28 = $27;
     $29 = HEAP32[$28>>2]|0;
     $30 = (_i64Add(($26|0),($29|0),($19|0),($23|0))|0);
     $31 = tempRet0;
     $32 = $21;
     $33 = $32;
     HEAP32[$33>>2] = $30;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = $31;
    }
    if (!($10)) {
     $$0 = $19;
     return ($$0|0);
    }
    $36 = (FUNCTION_TABLE_iiiiiii[$9 & 31]($0,132,$1,0,0,$19)|0);
    $$0 = $36;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(32,110,121,0,0);
 $$0 = -2;
 return ($$0|0);
}
function _BIO_gets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = ((($0)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)!=(0|0);
    if ($11) {
     $12 = (FUNCTION_TABLE_iiiiiii[$10 & 31]($0,5,$1,$2,0,1)|0);
     $13 = ($12|0)<(1);
     if ($13) {
      $$0 = $12;
      return ($$0|0);
     }
    }
    $14 = ((($0)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     _ERR_put_error(32,104,120,0,0);
     $$0 = -2;
     return ($$0|0);
    }
    $17 = HEAP32[$0>>2]|0;
    $18 = ((($17)) + 20|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiii[$19 & 63]($0,$1,$2)|0);
    if (!($11)) {
     $$0 = $20;
     return ($$0|0);
    }
    $21 = (FUNCTION_TABLE_iiiiiii[$10 & 31]($0,133,$1,$2,0,$20)|0);
    $$0 = $21;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(32,104,121,0,0);
 $$0 = -2;
 return ($$0|0);
}
function _BIO_indent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$ = 0, $$0 = 0, $$1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)>(0);
 $$ = $3 ? $1 : 0;
 $4 = ($$|0)>($2|0);
 $$$ = $4 ? $2 : $$;
 $$1 = $$$;
 while(1) {
  $5 = ($$1|0)==(0);
  if ($5) {
   $$0 = 1;
   label = 4;
   break;
  }
  $6 = (($$1) + -1)|0;
  $7 = (_BIO_puts($0,47782)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $$1 = $6;
  } else {
   $$0 = 0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _bio_cleanup() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20326]|0;
 _CRYPTO_THREAD_lock_free($0);
 HEAP32[20326] = 0;
 return;
}
function _BIO_new_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function _BN_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$059$lcssa$i = 0, $$05967$i = 0, $$060$lcssa$i = 0, $$06066$i = 0, $$06165$i = 0, $$06264$i = 0, $$31 = 0, $$63$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if (!($7)) {
  $8 = ($4|0)==(0);
  $$ = $8 ? $2 : $1;
  $$31 = $8 ? $1 : $2;
  $9 = (_BN_ucmp($$31,$$)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $11 = (_BN_usub($0,$$,$$31)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$sink = 1;
   }
  } else {
   $13 = (_BN_usub($0,$$31,$$)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$sink = 0;
   }
  }
  $15 = ((($0)) + 12|0);
  HEAP32[$15>>2] = $$sink;
  $$0 = 1;
  return ($$0|0);
 }
 $16 = ((($1)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)<($19|0);
 $$$i = $20 ? $1 : $2;
 $$63$i = $20 ? $2 : $1;
 $21 = ((($$63$i)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($$$i)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 1)|0;
 $26 = (_bn_wexpand($0,$25)|0);
 $27 = ($26|0)==(0|0);
 if ($27) {
  $$pre = ((($0)) + 12|0);
  $$0$i = 0;$$pre$phiZ2D = $$pre;
 } else {
  $28 = (($22) - ($24))|0;
  $29 = ((($0)) + 4|0);
  HEAP32[$29>>2] = $22;
  $30 = HEAP32[$$63$i>>2]|0;
  $31 = HEAP32[$$$i>>2]|0;
  $32 = HEAP32[$0>>2]|0;
  $33 = (_bn_add_words($32,$30,$31,$24)|0);
  $34 = (($32) + ($24<<2)|0);
  $35 = ($28|0)==(0);
  if ($35) {
   $$059$lcssa$i = $33;$$060$lcssa$i = $34;
  } else {
   $36 = (($30) + ($24<<2)|0);
   $$05967$i = $33;$$06066$i = $34;$$06165$i = $28;$$06264$i = $36;
   while(1) {
    $37 = (($$06165$i) + -1)|0;
    $38 = ((($$06264$i)) + 4|0);
    $39 = HEAP32[$$06264$i>>2]|0;
    $40 = (($39) + ($$05967$i))|0;
    $41 = ((($$06066$i)) + 4|0);
    HEAP32[$$06066$i>>2] = $40;
    $42 = ($40|0)==(0);
    $43 = $42&1;
    $44 = $43 & $$05967$i;
    $45 = ($37|0)==(0);
    if ($45) {
     break;
    } else {
     $$05967$i = $44;$$06066$i = $41;$$06165$i = $37;$$06264$i = $38;
    }
   }
   $scevgep$i = (($32) + ($22<<2)|0);
   $$059$lcssa$i = $44;$$060$lcssa$i = $scevgep$i;
  }
  HEAP32[$$060$lcssa$i>>2] = $$059$lcssa$i;
  $46 = HEAP32[$29>>2]|0;
  $47 = (($46) + ($$059$lcssa$i))|0;
  HEAP32[$29>>2] = $47;
  $48 = ((($0)) + 12|0);
  HEAP32[$48>>2] = 0;
  $$0$i = 1;$$pre$phiZ2D = $48;
 }
 HEAP32[$$pre$phiZ2D>>2] = $4;
 $$0 = $$0$i;
 return ($$0|0);
}
function _BN_usub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04855 = 0, $$04954 = 0, $$05053 = 0, $$05152 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7|0)<(0);
 if ($8) {
  _ERR_put_error(3,115,100,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (_bn_wexpand($0,$4)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (_bn_sub_words($13,$11,$12,$6)|0);
 $15 = ($7|0)==(0);
 if (!($15)) {
  $16 = (($13) + ($6<<2)|0);
  $17 = (($11) + ($6<<2)|0);
  $$04855 = $17;$$04954 = $16;$$05053 = $14;$$05152 = $7;
  while(1) {
   $18 = (($$05152) + -1)|0;
   $19 = ((($$04855)) + 4|0);
   $20 = HEAP32[$$04855>>2]|0;
   $21 = (($20) - ($$05053))|0;
   $22 = ((($$04954)) + 4|0);
   HEAP32[$$04954>>2] = $21;
   $23 = ($20|0)==(0);
   $24 = $23&1;
   $25 = $24 & $$05053;
   $26 = ($18|0)==(0);
   if ($26) {
    break;
   } else {
    $$04855 = $19;$$04954 = $22;$$05053 = $25;$$05152 = $18;
   }
  }
 }
 $27 = ((($0)) + 4|0);
 HEAP32[$27>>2] = $4;
 $28 = ((($0)) + 12|0);
 HEAP32[$28>>2] = 0;
 _bn_correct_top($0);
 $$0 = 1;
 return ($$0|0);
}
function _BN_uadd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$059$lcssa = 0, $$05967 = 0, $$060$lcssa = 0, $$06066 = 0, $$06165 = 0, $$06264 = 0, $$63 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 $$ = $7 ? $1 : $2;
 $$63 = $7 ? $2 : $1;
 $8 = ((($$63)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($$)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 1)|0;
 $13 = (_bn_wexpand($0,$12)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$0 = 0;
  return ($$0|0);
 }
 $15 = (($9) - ($11))|0;
 $16 = ((($0)) + 4|0);
 HEAP32[$16>>2] = $9;
 $17 = HEAP32[$$63>>2]|0;
 $18 = HEAP32[$$>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (_bn_add_words($19,$17,$18,$11)|0);
 $21 = (($19) + ($11<<2)|0);
 $22 = ($15|0)==(0);
 if ($22) {
  $$059$lcssa = $20;$$060$lcssa = $21;
 } else {
  $23 = (($17) + ($11<<2)|0);
  $$05967 = $20;$$06066 = $21;$$06165 = $15;$$06264 = $23;
  while(1) {
   $24 = (($$06165) + -1)|0;
   $25 = ((($$06264)) + 4|0);
   $26 = HEAP32[$$06264>>2]|0;
   $27 = (($26) + ($$05967))|0;
   $28 = ((($$06066)) + 4|0);
   HEAP32[$$06066>>2] = $27;
   $29 = ($27|0)==(0);
   $30 = $29&1;
   $31 = $30 & $$05967;
   $32 = ($24|0)==(0);
   if ($32) {
    break;
   } else {
    $$05967 = $31;$$06066 = $28;$$06165 = $24;$$06264 = $25;
   }
  }
  $scevgep = (($19) + ($9<<2)|0);
  $$059$lcssa = $31;$$060$lcssa = $scevgep;
 }
 HEAP32[$$060$lcssa>>2] = $$059$lcssa;
 $33 = HEAP32[$16>>2]|0;
 $34 = (($33) + ($$059$lcssa))|0;
 HEAP32[$16>>2] = $34;
 $35 = ((($0)) + 12|0);
 HEAP32[$35>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _BN_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0 = 0, $$03648 = 0, $$03846 = 0, $$03944 = 0, $$059$lcssa$i = 0, $$05967$i = 0, $$060$lcssa$i = 0, $$06066$i = 0, $$06165$i = 0, $$06264$i = 0, $$42 = 0, $$63$i = 0, $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$49 = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = ((($2)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($5) {
  if ($8) {
   $$03648 = 0;
   label = 4;
  } else {
   $$03846 = $1;$$03944 = $2;
  }
 } else {
  $not$49 = $8 ^ 1;
  $$42 = $not$49&1;
  if ($8) {
   $$03846 = $2;$$03944 = $1;
  } else {
   $$03648 = $$42;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $9 = ((($1)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($2)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)<($12|0);
  $$$i = $13 ? $1 : $2;
  $$63$i = $13 ? $2 : $1;
  $14 = ((($$63$i)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($$$i)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 1)|0;
  $19 = (_bn_wexpand($0,$18)|0);
  $20 = ($19|0)==(0|0);
  if ($20) {
   $$0 = 0;
   return ($$0|0);
  }
  $21 = (($15) - ($17))|0;
  $22 = ((($0)) + 4|0);
  HEAP32[$22>>2] = $15;
  $23 = HEAP32[$$63$i>>2]|0;
  $24 = HEAP32[$$$i>>2]|0;
  $25 = HEAP32[$0>>2]|0;
  $26 = (_bn_add_words($25,$23,$24,$17)|0);
  $27 = (($25) + ($17<<2)|0);
  $28 = ($21|0)==(0);
  if ($28) {
   $$059$lcssa$i = $26;$$060$lcssa$i = $27;
  } else {
   $29 = (($23) + ($17<<2)|0);
   $$05967$i = $26;$$06066$i = $27;$$06165$i = $21;$$06264$i = $29;
   while(1) {
    $30 = (($$06165$i) + -1)|0;
    $31 = ((($$06264$i)) + 4|0);
    $32 = HEAP32[$$06264$i>>2]|0;
    $33 = (($32) + ($$05967$i))|0;
    $34 = ((($$06066$i)) + 4|0);
    HEAP32[$$06066$i>>2] = $33;
    $35 = ($33|0)==(0);
    $36 = $35&1;
    $37 = $36 & $$05967$i;
    $38 = ($30|0)==(0);
    if ($38) {
     break;
    } else {
     $$05967$i = $37;$$06066$i = $34;$$06165$i = $30;$$06264$i = $31;
    }
   }
   $scevgep$i = (($25) + ($15<<2)|0);
   $$059$lcssa$i = $37;$$060$lcssa$i = $scevgep$i;
  }
  HEAP32[$$060$lcssa$i>>2] = $$059$lcssa$i;
  $39 = HEAP32[$22>>2]|0;
  $40 = (($39) + ($$059$lcssa$i))|0;
  HEAP32[$22>>2] = $40;
  $41 = ((($0)) + 12|0);
  HEAP32[$41>>2] = $$03648;
  $$0 = 1;
  return ($$0|0);
 }
 $42 = ((($$03846)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($$03944)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($43|0)>($45|0);
 $$sink1 = $46 ? $$03846 : $$03944;
 $47 = ((($$sink1)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (_bn_wexpand($0,$48)|0);
 $50 = ($49|0)==(0|0);
 if ($50) {
  $$0 = 0;
  return ($$0|0);
 }
 $51 = (_BN_ucmp($$03846,$$03944)|0);
 $52 = ($51|0)<(0);
 if ($52) {
  $53 = (_BN_usub($0,$$03944,$$03846)|0);
  $54 = ($53|0)==(0);
  if ($54) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$sink = 1;
  }
 } else {
  $55 = (_BN_usub($0,$$03846,$$03944)|0);
  $56 = ($55|0)==(0);
  if ($56) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$sink = 0;
  }
 }
 $57 = ((($0)) + 12|0);
 HEAP32[$57>>2] = $$sink;
 $$0 = 1;
 return ($$0|0);
}
function _bn_mul_add_words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$057$lcssa86 = 0, $$05772 = 0, $$058$lcssa85 = 0, $$05871 = 0, $$060$lcssa84 = 0, $$06070 = 0, $$062$lcssa83 = 0, $$06269 = 0, $$15967 = 0, $$16166 = 0, $$16365 = 0, $$168 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep82 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)<(1);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($2>>>0)>(3);
 if ($5) {
  $6 = (($2) + -4)|0;
  $7 = $6 & -4;
  $8 = (($7) + 4)|0;
  $scevgep82 = (($0) + ($8<<2)|0);
  $$05772 = $0;$$05871 = $1;$$06070 = $2;$$06269 = 0;
  while(1) {
   $11 = HEAP32[$$05871>>2]|0;
   $12 = (___muldi3(($11|0),0,($3|0),0)|0);
   $13 = tempRet0;
   $14 = HEAP32[$$05772>>2]|0;
   $15 = (_i64Add(($14|0),0,($$06269|0),0)|0);
   $16 = tempRet0;
   $17 = (_i64Add(($15|0),($16|0),($12|0),($13|0))|0);
   $18 = tempRet0;
   HEAP32[$$05772>>2] = $17;
   $19 = ((($$05871)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (___muldi3(($20|0),0,($3|0),0)|0);
   $22 = tempRet0;
   $23 = ((($$05772)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_i64Add(($21|0),($22|0),($24|0),0)|0);
   $26 = tempRet0;
   $27 = (_i64Add(($25|0),($26|0),($18|0),0)|0);
   $28 = tempRet0;
   HEAP32[$23>>2] = $27;
   $29 = ((($$05871)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (___muldi3(($30|0),0,($3|0),0)|0);
   $32 = tempRet0;
   $33 = ((($$05772)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_i64Add(($31|0),($32|0),($34|0),0)|0);
   $36 = tempRet0;
   $37 = (_i64Add(($35|0),($36|0),($28|0),0)|0);
   $38 = tempRet0;
   HEAP32[$33>>2] = $37;
   $39 = ((($$05871)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (___muldi3(($40|0),0,($3|0),0)|0);
   $42 = tempRet0;
   $43 = ((($$05772)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_i64Add(($41|0),($42|0),($44|0),0)|0);
   $46 = tempRet0;
   $47 = (_i64Add(($45|0),($46|0),($38|0),0)|0);
   $48 = tempRet0;
   HEAP32[$43>>2] = $47;
   $49 = ((($$05871)) + 16|0);
   $50 = ((($$05772)) + 16|0);
   $51 = (($$06070) + -4)|0;
   $52 = ($51>>>0)>(3);
   if ($52) {
    $$05772 = $50;$$05871 = $49;$$06070 = $51;$$06269 = $48;
   } else {
    break;
   }
  }
  $scevgep = (($1) + ($8<<2)|0);
  $9 = (($6) - ($7))|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = $48;
   return ($$0|0);
  } else {
   $$057$lcssa86 = $scevgep82;$$058$lcssa85 = $scevgep;$$060$lcssa84 = $9;$$062$lcssa83 = $48;
  }
 } else {
  $$057$lcssa86 = $0;$$058$lcssa85 = $1;$$060$lcssa84 = $2;$$062$lcssa83 = 0;
 }
 $$15967 = $$058$lcssa85;$$16166 = $$060$lcssa84;$$16365 = $$062$lcssa83;$$168 = $$057$lcssa86;
 while(1) {
  $53 = HEAP32[$$15967>>2]|0;
  $54 = (___muldi3(($53|0),0,($3|0),0)|0);
  $55 = tempRet0;
  $56 = HEAP32[$$168>>2]|0;
  $57 = (_i64Add(($56|0),0,($$16365|0),0)|0);
  $58 = tempRet0;
  $59 = (_i64Add(($57|0),($58|0),($54|0),($55|0))|0);
  $60 = tempRet0;
  HEAP32[$$168>>2] = $59;
  $61 = ((($$15967)) + 4|0);
  $62 = ((($$168)) + 4|0);
  $63 = (($$16166) + -1)|0;
  $64 = ($63|0)==(0);
  if ($64) {
   $$0 = $60;
   break;
  } else {
   $$15967 = $61;$$16166 = $63;$$16365 = $60;$$168 = $62;
  }
 }
 return ($$0|0);
}
function _bn_mul_words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$052$lcssa81 = 0, $$05267 = 0, $$053$lcssa80 = 0, $$05366 = 0, $$055$lcssa79 = 0, $$05565 = 0, $$057$lcssa78 = 0, $$05764 = 0, $$15462 = 0, $$15661 = 0, $$15860 = 0, $$163 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0;
 var $scevgep77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)<(1);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($2>>>0)>(3);
 if ($5) {
  $6 = (($2) + -4)|0;
  $7 = $6 & -4;
  $8 = (($7) + 4)|0;
  $scevgep77 = (($0) + ($8<<2)|0);
  $$05267 = $0;$$05366 = $1;$$05565 = $2;$$05764 = 0;
  while(1) {
   $11 = HEAP32[$$05366>>2]|0;
   $12 = (___muldi3(($11|0),0,($3|0),0)|0);
   $13 = tempRet0;
   $14 = (_i64Add(($12|0),($13|0),($$05764|0),0)|0);
   $15 = tempRet0;
   HEAP32[$$05267>>2] = $14;
   $16 = ((($$05366)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (___muldi3(($17|0),0,($3|0),0)|0);
   $19 = tempRet0;
   $20 = (_i64Add(($18|0),($19|0),($15|0),0)|0);
   $21 = tempRet0;
   $22 = ((($$05267)) + 4|0);
   HEAP32[$22>>2] = $20;
   $23 = ((($$05366)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (___muldi3(($24|0),0,($3|0),0)|0);
   $26 = tempRet0;
   $27 = (_i64Add(($25|0),($26|0),($21|0),0)|0);
   $28 = tempRet0;
   $29 = ((($$05267)) + 8|0);
   HEAP32[$29>>2] = $27;
   $30 = ((($$05366)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (___muldi3(($31|0),0,($3|0),0)|0);
   $33 = tempRet0;
   $34 = (_i64Add(($32|0),($33|0),($28|0),0)|0);
   $35 = tempRet0;
   $36 = ((($$05267)) + 12|0);
   HEAP32[$36>>2] = $34;
   $37 = ((($$05366)) + 16|0);
   $38 = ((($$05267)) + 16|0);
   $39 = (($$05565) + -4)|0;
   $40 = ($39>>>0)>(3);
   if ($40) {
    $$05267 = $38;$$05366 = $37;$$05565 = $39;$$05764 = $35;
   } else {
    break;
   }
  }
  $scevgep = (($1) + ($8<<2)|0);
  $9 = (($6) - ($7))|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = $35;
   return ($$0|0);
  } else {
   $$052$lcssa81 = $scevgep77;$$053$lcssa80 = $scevgep;$$055$lcssa79 = $9;$$057$lcssa78 = $35;
  }
 } else {
  $$052$lcssa81 = $0;$$053$lcssa80 = $1;$$055$lcssa79 = $2;$$057$lcssa78 = 0;
 }
 $$15462 = $$053$lcssa80;$$15661 = $$055$lcssa79;$$15860 = $$057$lcssa78;$$163 = $$052$lcssa81;
 while(1) {
  $41 = HEAP32[$$15462>>2]|0;
  $42 = (___muldi3(($41|0),0,($3|0),0)|0);
  $43 = tempRet0;
  $44 = (_i64Add(($42|0),($43|0),($$15860|0),0)|0);
  $45 = tempRet0;
  HEAP32[$$163>>2] = $44;
  $46 = ((($$15462)) + 4|0);
  $47 = ((($$163)) + 4|0);
  $48 = (($$15661) + -1)|0;
  $49 = ($48|0)==(0);
  if ($49) {
   $$0 = $45;
   break;
  } else {
   $$15462 = $46;$$15661 = $48;$$15860 = $45;$$163 = $47;
  }
 }
 return ($$0|0);
}
function _bn_sqr_words($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$04756 = 0, $$04955 = 0, $$057 = 0, $$14853 = 0, $$15052 = 0, $$154 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)<(1);
 if ($3) {
  return;
 }
 $4 = ($2>>>0)>(3);
 if ($4) {
  $5 = (($2) + -4)|0;
  $6 = $5 >>> 2;
  $7 = $6 << 2;
  $8 = (($7) + 4)|0;
  $9 = $6 << 3;
  $10 = (($9) + 8)|0;
  $$04756 = $1;$$04955 = $2;$$057 = $0;
  while(1) {
   $13 = HEAP32[$$04756>>2]|0;
   $14 = (___muldi3(($13|0),0,($13|0),0)|0);
   $15 = tempRet0;
   HEAP32[$$057>>2] = $14;
   $16 = ((($$057)) + 4|0);
   HEAP32[$16>>2] = $15;
   $17 = ((($$04756)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (___muldi3(($18|0),0,($18|0),0)|0);
   $20 = tempRet0;
   $21 = ((($$057)) + 8|0);
   HEAP32[$21>>2] = $19;
   $22 = ((($$057)) + 12|0);
   HEAP32[$22>>2] = $20;
   $23 = ((($$04756)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (___muldi3(($24|0),0,($24|0),0)|0);
   $26 = tempRet0;
   $27 = ((($$057)) + 16|0);
   HEAP32[$27>>2] = $25;
   $28 = ((($$057)) + 20|0);
   HEAP32[$28>>2] = $26;
   $29 = ((($$04756)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (___muldi3(($30|0),0,($30|0),0)|0);
   $32 = tempRet0;
   $33 = ((($$057)) + 24|0);
   HEAP32[$33>>2] = $31;
   $34 = ((($$057)) + 28|0);
   HEAP32[$34>>2] = $32;
   $35 = ((($$04756)) + 16|0);
   $36 = ((($$057)) + 32|0);
   $37 = (($$04955) + -4)|0;
   $38 = ($37>>>0)>(3);
   if ($38) {
    $$04756 = $35;$$04955 = $37;$$057 = $36;
   } else {
    break;
   }
  }
  $scevgep = (($1) + ($8<<2)|0);
  $scevgep63 = (($0) + ($10<<2)|0);
  $11 = (($5) - ($7))|0;
  $12 = ($11|0)==(0);
  if ($12) {
   return;
  } else {
   $$14853 = $scevgep;$$15052 = $11;$$154 = $scevgep63;
  }
 } else {
  $$14853 = $1;$$15052 = $2;$$154 = $0;
 }
 while(1) {
  $39 = HEAP32[$$14853>>2]|0;
  $40 = (___muldi3(($39|0),0,($39|0),0)|0);
  $41 = tempRet0;
  HEAP32[$$154>>2] = $40;
  $42 = ((($$154)) + 4|0);
  HEAP32[$42>>2] = $41;
  $43 = ((($$14853)) + 4|0);
  $44 = ((($$154)) + 8|0);
  $45 = (($$15052) + -1)|0;
  $46 = ($45|0)==(0);
  if ($46) {
   break;
  } else {
   $$14853 = $43;$$15052 = $45;$$154 = $44;
  }
 }
 return;
}
function _bn_div_words($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$ = 0, $$0 = 0, $$078$lcssa = 0, $$07895 = 0, $$079$lcssa = 0, $$07994 = 0, $$080 = 0, $$081 = 0, $$083 = 0, $$182$lcssa = 0, $$18293 = 0, $$189 = 0, $$2 = 0, $$286 = 0, $$3 = 0, $$90 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$083 = -1;
  return ($$083|0);
 }
 $4 = (_BN_num_bits_word($2)|0);
 $5 = (32 - ($4))|0;
 $6 = ($0>>>0)<($2>>>0);
 $7 = $6 ? 0 : $2;
 $$ = (($0) - ($7))|0;
 $8 = ($5|0)==(0);
 $9 = $2 << $5;
 $10 = $$ << $5;
 $11 = $1 >>> $4;
 $12 = $10 | $11;
 $13 = $1 << $5;
 $$$ = $8 ? $$ : $12;
 $14 = $9 >>> 16;
 $15 = $9 & 65535;
 $$0 = 2;$$080 = 0;$$189 = $13;$$286 = $$$;
 while(1) {
  $16 = $$286 >>> 16;
  $17 = ($16|0)==($14|0);
  if ($17) {
   $$081 = 65535;
  } else {
   $18 = (($$286>>>0) / ($14>>>0))&-1;
   $$081 = $18;
  }
  $19 = Math_imul($$081, $14)|0;
  $20 = Math_imul($$081, $15)|0;
  $21 = (($$286) - ($19))|0;
  $22 = ($21>>>0)>(65535);
  L9: do {
   if ($22) {
    $$078$lcssa = $20;$$079$lcssa = $19;$$182$lcssa = $$081;
   } else {
    $23 = $$189 >>> 16;
    $$07895 = $20;$$07994 = $19;$$18293 = $$081;$25 = $21;
    while(1) {
     $24 = $25 << 16;
     $26 = $24 | $23;
     $27 = ($$07895>>>0)>($26>>>0);
     if (!($27)) {
      $$078$lcssa = $$07895;$$079$lcssa = $$07994;$$182$lcssa = $$18293;
      break L9;
     }
     $28 = (($$18293) + -1)|0;
     $29 = (($$07994) - ($14))|0;
     $30 = (($$07895) - ($15))|0;
     $31 = (($$286) - ($29))|0;
     $32 = ($31>>>0)>(65535);
     if ($32) {
      $$078$lcssa = $30;$$079$lcssa = $29;$$182$lcssa = $28;
      break;
     } else {
      $$07895 = $30;$$07994 = $29;$$18293 = $28;$25 = $31;
     }
    }
   }
  } while(0);
  $33 = $$078$lcssa >>> 16;
  $34 = $$078$lcssa << 16;
  $35 = (($33) + ($$079$lcssa))|0;
  $36 = ($$189>>>0)<($34>>>0);
  $37 = $36&1;
  $$90 = (($35) + ($37))|0;
  $38 = (($$189) - ($34))|0;
  $39 = ($$286>>>0)<($$90>>>0);
  $40 = $39 << 31 >> 31;
  $$2 = (($40) + ($$182$lcssa))|0;
  $41 = (($$0) + -1)|0;
  $42 = ($41|0)==(0);
  if ($42) {
   break;
  }
  $43 = $39 ? $9 : 0;
  $$3 = (($$286) - ($$90))|0;
  $44 = (($$3) + ($43))|0;
  $45 = $$2 << 16;
  $46 = $44 << 16;
  $47 = $38 >>> 16;
  $48 = $46 | $47;
  $49 = $38 << 16;
  $$0 = $41;$$080 = $45;$$189 = $49;$$286 = $48;
 }
 $50 = $$2 | $$080;
 $$083 = $50;
 return ($$083|0);
}
function _bn_add_words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04361 = 0, $$04560 = 0, $$04759 = 0, $$04958 = 0, $$051 = 0, $$14456 = 0, $$14655 = 0, $$14854 = 0, $$15053 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep74 = 0, $scevgep75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)<(1);
 if ($4) {
  $$051 = 0;
  return ($$051|0);
 }
 $5 = ($3>>>0)>(3);
 if ($5) {
  $6 = (($3) + -4)|0;
  $7 = $6 & -4;
  $8 = (($7) + 4)|0;
  $scevgep74 = (($2) + ($8<<2)|0);
  $$04361 = $3;$$04560 = $2;$$04759 = $1;$$04958 = $0;$13 = 0;$14 = 0;
  while(1) {
   $11 = HEAP32[$$04759>>2]|0;
   $12 = HEAP32[$$04560>>2]|0;
   $15 = (_i64Add(($11|0),0,($13|0),($14|0))|0);
   $16 = tempRet0;
   $17 = (_i64Add(($15|0),($16|0),($12|0),0)|0);
   $18 = tempRet0;
   HEAP32[$$04958>>2] = $17;
   $19 = ((($$04759)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($$04560)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_i64Add(($22|0),0,($20|0),0)|0);
   $24 = tempRet0;
   $25 = (_i64Add(($23|0),($24|0),($18|0),0)|0);
   $26 = tempRet0;
   $27 = ((($$04958)) + 4|0);
   HEAP32[$27>>2] = $25;
   $28 = ((($$04759)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($$04560)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_i64Add(($31|0),0,($29|0),0)|0);
   $33 = tempRet0;
   $34 = (_i64Add(($32|0),($33|0),($26|0),0)|0);
   $35 = tempRet0;
   $36 = ((($$04958)) + 8|0);
   HEAP32[$36>>2] = $34;
   $37 = ((($$04759)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($$04560)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_i64Add(($40|0),0,($38|0),0)|0);
   $42 = tempRet0;
   $43 = (_i64Add(($41|0),($42|0),($35|0),0)|0);
   $44 = tempRet0;
   $45 = ((($$04958)) + 12|0);
   HEAP32[$45>>2] = $43;
   $46 = ((($$04759)) + 16|0);
   $47 = ((($$04560)) + 16|0);
   $48 = ((($$04958)) + 16|0);
   $49 = (($$04361) + -4)|0;
   $50 = ($49>>>0)>(3);
   if ($50) {
    $$04361 = $49;$$04560 = $47;$$04759 = $46;$$04958 = $48;$13 = $44;$14 = 0;
   } else {
    break;
   }
  }
  $scevgep = (($1) + ($8<<2)|0);
  $scevgep75 = (($0) + ($8<<2)|0);
  $9 = (($6) - ($7))|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $$051 = $44;
   return ($$051|0);
  } else {
   $$14456 = $9;$$14655 = $scevgep74;$$14854 = $scevgep;$$15053 = $scevgep75;$53 = $44;$54 = 0;
  }
 } else {
  $$14456 = $3;$$14655 = $2;$$14854 = $1;$$15053 = $0;$53 = 0;$54 = 0;
 }
 while(1) {
  $51 = HEAP32[$$14854>>2]|0;
  $52 = HEAP32[$$14655>>2]|0;
  $55 = (_i64Add(($51|0),0,($53|0),($54|0))|0);
  $56 = tempRet0;
  $57 = (_i64Add(($55|0),($56|0),($52|0),0)|0);
  $58 = tempRet0;
  HEAP32[$$15053>>2] = $57;
  $59 = ((($$14854)) + 4|0);
  $60 = ((($$14655)) + 4|0);
  $61 = ((($$15053)) + 4|0);
  $62 = (($$14456) + -1)|0;
  $63 = ($62|0)==(0);
  if ($63) {
   break;
  } else {
   $$14456 = $62;$$14655 = $60;$$14854 = $59;$$15053 = $61;$53 = $58;$54 = 0;
  }
 }
 $$051 = $58;
 return ($$051|0);
}
function _bn_sub_words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$06789 = 0, $$06988 = 0, $$07187 = 0, $$07386 = 0, $$075 = 0, $$090 = 0, $$1 = 0, $$16884 = 0, $$17083 = 0, $$17282 = 0, $$17481 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$585 = 0, $$6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep100 = 0, $scevgep101 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)<(1);
 if ($4) {
  $$075 = 0;
  return ($$075|0);
 }
 $5 = ($3>>>0)>(3);
 if ($5) {
  $6 = (($3) + -4)|0;
  $7 = $6 & -4;
  $8 = (($7) + 4)|0;
  $scevgep100 = (($2) + ($8<<2)|0);
  $$06789 = $3;$$06988 = $2;$$07187 = $1;$$07386 = $0;$$090 = 0;
  while(1) {
   $11 = HEAP32[$$07187>>2]|0;
   $12 = HEAP32[$$06988>>2]|0;
   $13 = (($11) - ($$090))|0;
   $14 = (($13) - ($12))|0;
   HEAP32[$$07386>>2] = $14;
   $15 = ($11|0)==($12|0);
   $16 = ($11>>>0)<($12>>>0);
   $17 = $16&1;
   $$1 = $15 ? $$090 : $17;
   $18 = ((($$07187)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($$06988)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) - ($21))|0;
   $23 = (($22) - ($$1))|0;
   $24 = ((($$07386)) + 4|0);
   HEAP32[$24>>2] = $23;
   $25 = ($19|0)==($21|0);
   $26 = ($19>>>0)<($21>>>0);
   $27 = $26&1;
   $$2 = $25 ? $$1 : $27;
   $28 = ((($$07187)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($$06988)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($29) - ($31))|0;
   $33 = (($32) - ($$2))|0;
   $34 = ((($$07386)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = ($29|0)==($31|0);
   $36 = ($29>>>0)<($31>>>0);
   $37 = $36&1;
   $$3 = $35 ? $$2 : $37;
   $38 = ((($$07187)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($$06988)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) - ($41))|0;
   $43 = (($42) - ($$3))|0;
   $44 = ((($$07386)) + 12|0);
   HEAP32[$44>>2] = $43;
   $45 = ($39|0)==($41|0);
   $46 = ($39>>>0)<($41>>>0);
   $47 = $46&1;
   $$4 = $45 ? $$3 : $47;
   $48 = ((($$07187)) + 16|0);
   $49 = ((($$06988)) + 16|0);
   $50 = ((($$07386)) + 16|0);
   $51 = (($$06789) + -4)|0;
   $52 = ($51>>>0)>(3);
   if ($52) {
    $$06789 = $51;$$06988 = $49;$$07187 = $48;$$07386 = $50;$$090 = $$4;
   } else {
    break;
   }
  }
  $scevgep = (($1) + ($8<<2)|0);
  $scevgep101 = (($0) + ($8<<2)|0);
  $9 = (($6) - ($7))|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $$075 = $$4;
   return ($$075|0);
  } else {
   $$16884 = $9;$$17083 = $scevgep100;$$17282 = $scevgep;$$17481 = $scevgep101;$$585 = $$4;
  }
 } else {
  $$16884 = $3;$$17083 = $2;$$17282 = $1;$$17481 = $0;$$585 = 0;
 }
 while(1) {
  $53 = HEAP32[$$17282>>2]|0;
  $54 = HEAP32[$$17083>>2]|0;
  $55 = (($53) - ($$585))|0;
  $56 = (($55) - ($54))|0;
  HEAP32[$$17481>>2] = $56;
  $57 = ($53|0)==($54|0);
  $58 = ($53>>>0)<($54>>>0);
  $59 = $58&1;
  $$6 = $57 ? $$585 : $59;
  $60 = ((($$17282)) + 4|0);
  $61 = ((($$17083)) + 4|0);
  $62 = ((($$17481)) + 4|0);
  $63 = (($$16884) + -1)|0;
  $64 = ($63|0)==(0);
  if ($64) {
   $$075 = $$6;
   break;
  } else {
   $$16884 = $63;$$17083 = $61;$$17282 = $60;$$17481 = $62;$$585 = $$6;
  }
 }
 return ($$075|0);
}
function _bn_mul_comba8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$101026 = 0, $$$11 = 0, $$$11017 = 0, $$$111007 = 0, $$$13 = 0, $$$131009 = 0, $$$131029 = 0, $$$151031 = 0, $$$16 = 0, $$$161012 = 0, $$$18 = 0, $$$181014 = 0, $$$181034 = 0, $$$1997 = 0, $$$2 = 0, $$$31019 = 0, $$$4 = 0, $$$41000 = 0, $$$61002 = 0;
 var $$$61022 = 0, $$$7 = 0, $$$81024 = 0, $$$9 = 0, $$$91005 = 0, $$1 = 0, $$101026 = 0, $$1072 = 0, $$1073 = 0, $$1074 = 0, $$1075 = 0, $$1076 = 0, $$11 = 0, $$11017 = 0, $$111007 = 0, $$13 = 0, $$131009 = 0, $$131029 = 0, $$151011 = 0, $$151031 = 0;
 var $$16 = 0, $$161012 = 0, $$171033 = 0, $$18 = 0, $$181014 = 0, $$181034 = 0, $$1997 = 0, $$2 = 0, $$201036 = 0, $$21 = 0, $$31019 = 0, $$4 = 0, $$41000 = 0, $$6 = 0, $$61002 = 0, $$61022 = 0, $$7 = 0, $$81004 = 0, $$81024 = 0, $$9 = 0;
 var $$91005 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (___muldi3(($4|0),0,($3|0),0)|0);
 $6 = tempRet0;
 HEAP32[$0>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (___muldi3(($9|0),0,($7|0),0)|0);
 $11 = tempRet0;
 $12 = (_i64Add(($10|0),($11|0),($6|0),0)|0);
 $13 = tempRet0;
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$2>>2]|0;
 $17 = (___muldi3(($16|0),0,($15|0),0)|0);
 $18 = tempRet0;
 $19 = (_i64Add(($17|0),($18|0),($12|0),0)|0);
 $20 = tempRet0;
 $21 = (($20) + ($13))|0;
 $22 = ($21>>>0)<($20>>>0);
 $$1 = $22&1;
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $19;
 $24 = ((($1)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$2>>2]|0;
 $27 = (___muldi3(($26|0),0,($25|0),0)|0);
 $28 = tempRet0;
 $29 = (_i64Add(($21|0),0,($27|0),($28|0))|0);
 $30 = tempRet0;
 $31 = (($30) + ($$1))|0;
 $32 = ($31>>>0)<($30>>>0);
 $$ = $32&1;
 $33 = HEAP32[$14>>2]|0;
 $34 = HEAP32[$8>>2]|0;
 $35 = (___muldi3(($34|0),0,($33|0),0)|0);
 $36 = tempRet0;
 (_i64Add(($29|0),0,($35|0),($36|0))|0);
 $37 = tempRet0;
 $38 = (($37) + ($31))|0;
 $39 = ($38>>>0)<($37>>>0);
 $40 = $32 ? 2 : 1;
 $$1997 = $39 ? $40 : $$;
 $41 = HEAP32[$1>>2]|0;
 $42 = ((($2)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (___muldi3(($43|0),0,($41|0),0)|0);
 $45 = tempRet0;
 $46 = (_i64Add(($29|0),($30|0),($35|0),($36|0))|0);
 $47 = tempRet0;
 $48 = (_i64Add(($46|0),0,($44|0),($45|0))|0);
 $49 = tempRet0;
 $50 = (($38) + ($49))|0;
 $51 = ($50>>>0)<($49>>>0);
 $52 = $51&1;
 $$$1997 = (($52) + ($$1997))|0;
 $53 = ((($0)) + 8|0);
 HEAP32[$53>>2] = $48;
 $54 = HEAP32[$1>>2]|0;
 $55 = ((($2)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (___muldi3(($56|0),0,($54|0),0)|0);
 $58 = tempRet0;
 $59 = (_i64Add(($50|0),0,($57|0),($58|0))|0);
 $60 = tempRet0;
 $61 = (($$$1997) + ($60))|0;
 $62 = ($61>>>0)<($60>>>0);
 $$11017 = $62&1;
 $63 = HEAP32[$14>>2]|0;
 $64 = HEAP32[$42>>2]|0;
 $65 = (___muldi3(($64|0),0,($63|0),0)|0);
 $66 = tempRet0;
 (_i64Add(($59|0),0,($65|0),($66|0))|0);
 $67 = tempRet0;
 $68 = (($67) + ($61))|0;
 $69 = ($68>>>0)<($67>>>0);
 $70 = $62 ? 2 : 1;
 $$$11017 = $69 ? $70 : $$11017;
 $71 = HEAP32[$24>>2]|0;
 $72 = HEAP32[$8>>2]|0;
 $73 = (___muldi3(($72|0),0,($71|0),0)|0);
 $74 = tempRet0;
 $75 = (_i64Add(($59|0),($60|0),($65|0),($66|0))|0);
 $76 = tempRet0;
 (_i64Add(($75|0),0,($73|0),($74|0))|0);
 $77 = tempRet0;
 $78 = (($68) + ($77))|0;
 $79 = ($78>>>0)<($77>>>0);
 $80 = $79&1;
 $$31019 = (($80) + ($$$11017))|0;
 $81 = ((($1)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = HEAP32[$2>>2]|0;
 $84 = (___muldi3(($83|0),0,($82|0),0)|0);
 $85 = tempRet0;
 $86 = (_i64Add(($75|0),($76|0),($73|0),($74|0))|0);
 $87 = tempRet0;
 $88 = (_i64Add(($86|0),0,($84|0),($85|0))|0);
 $89 = tempRet0;
 $90 = (($78) + ($89))|0;
 $91 = ($90>>>0)<($89>>>0);
 $92 = $91&1;
 $$$31019 = (($$31019) + ($92))|0;
 $93 = ((($0)) + 12|0);
 HEAP32[$93>>2] = $88;
 $94 = ((($1)) + 16|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = HEAP32[$2>>2]|0;
 $97 = (___muldi3(($96|0),0,($95|0),0)|0);
 $98 = tempRet0;
 $99 = (_i64Add(($90|0),0,($97|0),($98|0))|0);
 $100 = tempRet0;
 $101 = (($$$31019) + ($100))|0;
 $102 = ($101>>>0)<($100>>>0);
 $$2 = $102&1;
 $103 = HEAP32[$81>>2]|0;
 $104 = HEAP32[$8>>2]|0;
 $105 = (___muldi3(($104|0),0,($103|0),0)|0);
 $106 = tempRet0;
 (_i64Add(($99|0),0,($105|0),($106|0))|0);
 $107 = tempRet0;
 $108 = (($107) + ($101))|0;
 $109 = ($108>>>0)<($107>>>0);
 $110 = $102 ? 2 : 1;
 $$$2 = $109 ? $110 : $$2;
 $111 = HEAP32[$24>>2]|0;
 $112 = HEAP32[$42>>2]|0;
 $113 = (___muldi3(($112|0),0,($111|0),0)|0);
 $114 = tempRet0;
 $115 = (_i64Add(($99|0),($100|0),($105|0),($106|0))|0);
 $116 = tempRet0;
 (_i64Add(($115|0),0,($113|0),($114|0))|0);
 $117 = tempRet0;
 $118 = (($108) + ($117))|0;
 $119 = ($118>>>0)<($117>>>0);
 $120 = $119&1;
 $$4 = (($120) + ($$$2))|0;
 $121 = HEAP32[$14>>2]|0;
 $122 = HEAP32[$55>>2]|0;
 $123 = (___muldi3(($122|0),0,($121|0),0)|0);
 $124 = tempRet0;
 $125 = (_i64Add(($115|0),($116|0),($113|0),($114|0))|0);
 $126 = tempRet0;
 (_i64Add(($125|0),0,($123|0),($124|0))|0);
 $127 = tempRet0;
 $128 = (($118) + ($127))|0;
 $129 = ($128>>>0)<($127>>>0);
 $130 = $129&1;
 $$$4 = (($$4) + ($130))|0;
 $131 = HEAP32[$1>>2]|0;
 $132 = ((($2)) + 16|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (___muldi3(($133|0),0,($131|0),0)|0);
 $135 = tempRet0;
 $136 = (_i64Add(($125|0),($126|0),($123|0),($124|0))|0);
 $137 = tempRet0;
 $138 = (_i64Add(($134|0),($135|0),($136|0),0)|0);
 $139 = tempRet0;
 $140 = (($128) + ($139))|0;
 $141 = ($140>>>0)<($139>>>0);
 $142 = $141&1;
 $$6 = (($$$4) + ($142))|0;
 $143 = ((($0)) + 16|0);
 HEAP32[$143>>2] = $138;
 $144 = HEAP32[$1>>2]|0;
 $145 = ((($2)) + 20|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (___muldi3(($146|0),0,($144|0),0)|0);
 $148 = tempRet0;
 $149 = (_i64Add(($140|0),0,($147|0),($148|0))|0);
 $150 = tempRet0;
 $151 = (($$6) + ($150))|0;
 $152 = ($151>>>0)<($150>>>0);
 $$1072 = $152&1;
 $153 = HEAP32[$14>>2]|0;
 $154 = HEAP32[$132>>2]|0;
 $155 = (___muldi3(($154|0),0,($153|0),0)|0);
 $156 = tempRet0;
 (_i64Add(($149|0),0,($155|0),($156|0))|0);
 $157 = tempRet0;
 $158 = (($157) + ($151))|0;
 $159 = ($158>>>0)<($157>>>0);
 $160 = $152 ? 2 : 1;
 $$41000 = $159 ? $160 : $$1072;
 $161 = HEAP32[$24>>2]|0;
 $162 = HEAP32[$55>>2]|0;
 $163 = (___muldi3(($162|0),0,($161|0),0)|0);
 $164 = tempRet0;
 $165 = (_i64Add(($149|0),($150|0),($155|0),($156|0))|0);
 $166 = tempRet0;
 (_i64Add(($165|0),0,($163|0),($164|0))|0);
 $167 = tempRet0;
 $168 = (($158) + ($167))|0;
 $169 = ($168>>>0)<($167>>>0);
 $170 = $169&1;
 $$$41000 = (($170) + ($$41000))|0;
 $171 = HEAP32[$81>>2]|0;
 $172 = HEAP32[$42>>2]|0;
 $173 = (___muldi3(($172|0),0,($171|0),0)|0);
 $174 = tempRet0;
 $175 = (_i64Add(($165|0),($166|0),($163|0),($164|0))|0);
 $176 = tempRet0;
 (_i64Add(($173|0),($174|0),($175|0),0)|0);
 $177 = tempRet0;
 $178 = (($168) + ($177))|0;
 $179 = ($178>>>0)<($177>>>0);
 $180 = $179&1;
 $$61002 = (($$$41000) + ($180))|0;
 $181 = HEAP32[$94>>2]|0;
 $182 = HEAP32[$8>>2]|0;
 $183 = (___muldi3(($182|0),0,($181|0),0)|0);
 $184 = tempRet0;
 $185 = (_i64Add(($173|0),($174|0),($175|0),($176|0))|0);
 $186 = tempRet0;
 (_i64Add(($183|0),($184|0),($185|0),0)|0);
 $187 = tempRet0;
 $188 = (($187) + ($178))|0;
 $189 = ($188>>>0)<($187>>>0);
 $190 = $189&1;
 $$$61002 = (($$61002) + ($190))|0;
 $191 = ((($1)) + 20|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = HEAP32[$2>>2]|0;
 $194 = (___muldi3(($193|0),0,($192|0),0)|0);
 $195 = tempRet0;
 $196 = (_i64Add(($183|0),($184|0),($185|0),($186|0))|0);
 $197 = tempRet0;
 $198 = (_i64Add(($194|0),($195|0),($196|0),0)|0);
 $199 = tempRet0;
 $200 = (($199) + ($188))|0;
 $201 = ($200>>>0)<($199>>>0);
 $202 = $201&1;
 $$81004 = (($$$61002) + ($202))|0;
 $203 = ((($0)) + 20|0);
 HEAP32[$203>>2] = $198;
 $204 = ((($1)) + 24|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = HEAP32[$2>>2]|0;
 $207 = (___muldi3(($206|0),0,($205|0),0)|0);
 $208 = tempRet0;
 $209 = (_i64Add(($200|0),0,($207|0),($208|0))|0);
 $210 = tempRet0;
 $211 = (($$81004) + ($210))|0;
 $212 = ($211>>>0)<($210>>>0);
 $$1073 = $212&1;
 $213 = HEAP32[$191>>2]|0;
 $214 = HEAP32[$8>>2]|0;
 $215 = (___muldi3(($214|0),0,($213|0),0)|0);
 $216 = tempRet0;
 (_i64Add(($209|0),0,($215|0),($216|0))|0);
 $217 = tempRet0;
 $218 = (($217) + ($211))|0;
 $219 = ($218>>>0)<($217>>>0);
 $220 = $212 ? 2 : 1;
 $$61022 = $219 ? $220 : $$1073;
 $221 = HEAP32[$94>>2]|0;
 $222 = HEAP32[$42>>2]|0;
 $223 = (___muldi3(($222|0),0,($221|0),0)|0);
 $224 = tempRet0;
 $225 = (_i64Add(($209|0),($210|0),($215|0),($216|0))|0);
 $226 = tempRet0;
 (_i64Add(($225|0),0,($223|0),($224|0))|0);
 $227 = tempRet0;
 $228 = (($218) + ($227))|0;
 $229 = ($228>>>0)<($227>>>0);
 $230 = $229&1;
 $$$61022 = (($230) + ($$61022))|0;
 $231 = HEAP32[$81>>2]|0;
 $232 = HEAP32[$55>>2]|0;
 $233 = (___muldi3(($232|0),0,($231|0),0)|0);
 $234 = tempRet0;
 $235 = (_i64Add(($225|0),($226|0),($223|0),($224|0))|0);
 $236 = tempRet0;
 (_i64Add(($233|0),($234|0),($235|0),0)|0);
 $237 = tempRet0;
 $238 = (($228) + ($237))|0;
 $239 = ($238>>>0)<($237>>>0);
 $240 = $239&1;
 $$81024 = (($$$61022) + ($240))|0;
 $241 = HEAP32[$24>>2]|0;
 $242 = HEAP32[$132>>2]|0;
 $243 = (___muldi3(($242|0),0,($241|0),0)|0);
 $244 = tempRet0;
 $245 = (_i64Add(($233|0),($234|0),($235|0),($236|0))|0);
 $246 = tempRet0;
 (_i64Add(($243|0),($244|0),($245|0),0)|0);
 $247 = tempRet0;
 $248 = (($247) + ($238))|0;
 $249 = ($248>>>0)<($247>>>0);
 $250 = $249&1;
 $$$81024 = (($$81024) + ($250))|0;
 $251 = HEAP32[$14>>2]|0;
 $252 = HEAP32[$145>>2]|0;
 $253 = (___muldi3(($252|0),0,($251|0),0)|0);
 $254 = tempRet0;
 $255 = (_i64Add(($243|0),($244|0),($245|0),($246|0))|0);
 $256 = tempRet0;
 (_i64Add(($253|0),($254|0),($255|0),0)|0);
 $257 = tempRet0;
 $258 = (($257) + ($248))|0;
 $259 = ($258>>>0)<($257>>>0);
 $260 = $259&1;
 $$101026 = (($$$81024) + ($260))|0;
 $261 = HEAP32[$1>>2]|0;
 $262 = ((($2)) + 24|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = (___muldi3(($263|0),0,($261|0),0)|0);
 $265 = tempRet0;
 $266 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
 $267 = tempRet0;
 $268 = (_i64Add(($264|0),($265|0),($266|0),0)|0);
 $269 = tempRet0;
 $270 = (($269) + ($258))|0;
 $271 = ($270>>>0)<($269>>>0);
 $272 = $271&1;
 $$$101026 = (($$101026) + ($272))|0;
 $273 = ((($0)) + 24|0);
 HEAP32[$273>>2] = $268;
 $274 = HEAP32[$1>>2]|0;
 $275 = ((($2)) + 28|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = (___muldi3(($276|0),0,($274|0),0)|0);
 $278 = tempRet0;
 $279 = (_i64Add(($270|0),0,($277|0),($278|0))|0);
 $280 = tempRet0;
 $281 = (($$$101026) + ($280))|0;
 $282 = ($281>>>0)<($280>>>0);
 $$7 = $282&1;
 $283 = HEAP32[$14>>2]|0;
 $284 = HEAP32[$262>>2]|0;
 $285 = (___muldi3(($284|0),0,($283|0),0)|0);
 $286 = tempRet0;
 (_i64Add(($279|0),0,($285|0),($286|0))|0);
 $287 = tempRet0;
 $288 = (($287) + ($281))|0;
 $289 = ($288>>>0)<($287>>>0);
 $290 = $282 ? 2 : 1;
 $$$7 = $289 ? $290 : $$7;
 $291 = HEAP32[$24>>2]|0;
 $292 = HEAP32[$145>>2]|0;
 $293 = (___muldi3(($292|0),0,($291|0),0)|0);
 $294 = tempRet0;
 $295 = (_i64Add(($279|0),($280|0),($285|0),($286|0))|0);
 $296 = tempRet0;
 (_i64Add(($295|0),0,($293|0),($294|0))|0);
 $297 = tempRet0;
 $298 = (($288) + ($297))|0;
 $299 = ($298>>>0)<($297>>>0);
 $300 = $299&1;
 $$9 = (($300) + ($$$7))|0;
 $301 = HEAP32[$81>>2]|0;
 $302 = HEAP32[$132>>2]|0;
 $303 = (___muldi3(($302|0),0,($301|0),0)|0);
 $304 = tempRet0;
 $305 = (_i64Add(($295|0),($296|0),($293|0),($294|0))|0);
 $306 = tempRet0;
 (_i64Add(($303|0),($304|0),($305|0),0)|0);
 $307 = tempRet0;
 $308 = (($298) + ($307))|0;
 $309 = ($308>>>0)<($307>>>0);
 $310 = $309&1;
 $$$9 = (($$9) + ($310))|0;
 $311 = HEAP32[$94>>2]|0;
 $312 = HEAP32[$55>>2]|0;
 $313 = (___muldi3(($312|0),0,($311|0),0)|0);
 $314 = tempRet0;
 $315 = (_i64Add(($303|0),($304|0),($305|0),($306|0))|0);
 $316 = tempRet0;
 (_i64Add(($313|0),($314|0),($315|0),0)|0);
 $317 = tempRet0;
 $318 = (($317) + ($308))|0;
 $319 = ($318>>>0)<($317>>>0);
 $320 = $319&1;
 $$11 = (($$$9) + ($320))|0;
 $321 = HEAP32[$191>>2]|0;
 $322 = HEAP32[$42>>2]|0;
 $323 = (___muldi3(($322|0),0,($321|0),0)|0);
 $324 = tempRet0;
 $325 = (_i64Add(($313|0),($314|0),($315|0),($316|0))|0);
 $326 = tempRet0;
 (_i64Add(($323|0),($324|0),($325|0),0)|0);
 $327 = tempRet0;
 $328 = (($327) + ($318))|0;
 $329 = ($328>>>0)<($327>>>0);
 $330 = $329&1;
 $$$11 = (($$11) + ($330))|0;
 $331 = HEAP32[$204>>2]|0;
 $332 = HEAP32[$8>>2]|0;
 $333 = (___muldi3(($332|0),0,($331|0),0)|0);
 $334 = tempRet0;
 $335 = (_i64Add(($323|0),($324|0),($325|0),($326|0))|0);
 $336 = tempRet0;
 (_i64Add(($333|0),($334|0),($335|0),0)|0);
 $337 = tempRet0;
 $338 = (($337) + ($328))|0;
 $339 = ($338>>>0)<($337>>>0);
 $340 = $339&1;
 $$13 = (($$$11) + ($340))|0;
 $341 = ((($1)) + 28|0);
 $342 = HEAP32[$341>>2]|0;
 $343 = HEAP32[$2>>2]|0;
 $344 = (___muldi3(($343|0),0,($342|0),0)|0);
 $345 = tempRet0;
 $346 = (_i64Add(($333|0),($334|0),($335|0),($336|0))|0);
 $347 = tempRet0;
 $348 = (_i64Add(($344|0),($345|0),($346|0),0)|0);
 $349 = tempRet0;
 $350 = (($349) + ($338))|0;
 $351 = ($350>>>0)<($349>>>0);
 $352 = $351&1;
 $$$13 = (($$13) + ($352))|0;
 $353 = ((($0)) + 28|0);
 HEAP32[$353>>2] = $348;
 $354 = HEAP32[$341>>2]|0;
 $355 = HEAP32[$8>>2]|0;
 $356 = (___muldi3(($355|0),0,($354|0),0)|0);
 $357 = tempRet0;
 $358 = (_i64Add(($350|0),0,($356|0),($357|0))|0);
 $359 = tempRet0;
 $360 = (($$$13) + ($359))|0;
 $361 = ($360>>>0)<($359>>>0);
 $$91005 = $361&1;
 $362 = HEAP32[$204>>2]|0;
 $363 = HEAP32[$42>>2]|0;
 $364 = (___muldi3(($363|0),0,($362|0),0)|0);
 $365 = tempRet0;
 (_i64Add(($358|0),0,($364|0),($365|0))|0);
 $366 = tempRet0;
 $367 = (($366) + ($360))|0;
 $368 = ($367>>>0)<($366>>>0);
 $369 = $361 ? 2 : 1;
 $$$91005 = $368 ? $369 : $$91005;
 $370 = HEAP32[$191>>2]|0;
 $371 = HEAP32[$55>>2]|0;
 $372 = (___muldi3(($371|0),0,($370|0),0)|0);
 $373 = tempRet0;
 $374 = (_i64Add(($358|0),($359|0),($364|0),($365|0))|0);
 $375 = tempRet0;
 (_i64Add(($374|0),0,($372|0),($373|0))|0);
 $376 = tempRet0;
 $377 = (($367) + ($376))|0;
 $378 = ($377>>>0)<($376>>>0);
 $379 = $378&1;
 $$111007 = (($379) + ($$$91005))|0;
 $380 = HEAP32[$94>>2]|0;
 $381 = HEAP32[$132>>2]|0;
 $382 = (___muldi3(($381|0),0,($380|0),0)|0);
 $383 = tempRet0;
 $384 = (_i64Add(($374|0),($375|0),($372|0),($373|0))|0);
 $385 = tempRet0;
 (_i64Add(($382|0),($383|0),($384|0),0)|0);
 $386 = tempRet0;
 $387 = (($377) + ($386))|0;
 $388 = ($387>>>0)<($386>>>0);
 $389 = $388&1;
 $$$111007 = (($$111007) + ($389))|0;
 $390 = HEAP32[$81>>2]|0;
 $391 = HEAP32[$145>>2]|0;
 $392 = (___muldi3(($391|0),0,($390|0),0)|0);
 $393 = tempRet0;
 $394 = (_i64Add(($382|0),($383|0),($384|0),($385|0))|0);
 $395 = tempRet0;
 (_i64Add(($392|0),($393|0),($394|0),0)|0);
 $396 = tempRet0;
 $397 = (($396) + ($387))|0;
 $398 = ($397>>>0)<($396>>>0);
 $399 = $398&1;
 $$131009 = (($$$111007) + ($399))|0;
 $400 = HEAP32[$24>>2]|0;
 $401 = HEAP32[$262>>2]|0;
 $402 = (___muldi3(($401|0),0,($400|0),0)|0);
 $403 = tempRet0;
 $404 = (_i64Add(($392|0),($393|0),($394|0),($395|0))|0);
 $405 = tempRet0;
 (_i64Add(($402|0),($403|0),($404|0),0)|0);
 $406 = tempRet0;
 $407 = (($406) + ($397))|0;
 $408 = ($407>>>0)<($406>>>0);
 $409 = $408&1;
 $$$131009 = (($$131009) + ($409))|0;
 $410 = HEAP32[$14>>2]|0;
 $411 = HEAP32[$275>>2]|0;
 $412 = (___muldi3(($411|0),0,($410|0),0)|0);
 $413 = tempRet0;
 $414 = (_i64Add(($402|0),($403|0),($404|0),($405|0))|0);
 $415 = tempRet0;
 $416 = (_i64Add(($412|0),($413|0),($414|0),0)|0);
 $417 = tempRet0;
 $418 = (($417) + ($407))|0;
 $419 = ($418>>>0)<($417>>>0);
 $420 = $419&1;
 $$151011 = (($$$131009) + ($420))|0;
 $421 = ((($0)) + 32|0);
 HEAP32[$421>>2] = $416;
 $422 = HEAP32[$24>>2]|0;
 $423 = HEAP32[$275>>2]|0;
 $424 = (___muldi3(($423|0),0,($422|0),0)|0);
 $425 = tempRet0;
 $426 = (_i64Add(($418|0),0,($424|0),($425|0))|0);
 $427 = tempRet0;
 $428 = (($$151011) + ($427))|0;
 $429 = ($428>>>0)<($427>>>0);
 $$1074 = $429&1;
 $430 = HEAP32[$81>>2]|0;
 $431 = HEAP32[$262>>2]|0;
 $432 = (___muldi3(($431|0),0,($430|0),0)|0);
 $433 = tempRet0;
 (_i64Add(($426|0),0,($432|0),($433|0))|0);
 $434 = tempRet0;
 $435 = (($434) + ($428))|0;
 $436 = ($435>>>0)<($434>>>0);
 $437 = $429 ? 2 : 1;
 $$131029 = $436 ? $437 : $$1074;
 $438 = HEAP32[$94>>2]|0;
 $439 = HEAP32[$145>>2]|0;
 $440 = (___muldi3(($439|0),0,($438|0),0)|0);
 $441 = tempRet0;
 $442 = (_i64Add(($426|0),($427|0),($432|0),($433|0))|0);
 $443 = tempRet0;
 (_i64Add(($442|0),0,($440|0),($441|0))|0);
 $444 = tempRet0;
 $445 = (($435) + ($444))|0;
 $446 = ($445>>>0)<($444>>>0);
 $447 = $446&1;
 $$$131029 = (($447) + ($$131029))|0;
 $448 = HEAP32[$191>>2]|0;
 $449 = HEAP32[$132>>2]|0;
 $450 = (___muldi3(($449|0),0,($448|0),0)|0);
 $451 = tempRet0;
 $452 = (_i64Add(($442|0),($443|0),($440|0),($441|0))|0);
 $453 = tempRet0;
 (_i64Add(($450|0),($451|0),($452|0),0)|0);
 $454 = tempRet0;
 $455 = (($445) + ($454))|0;
 $456 = ($455>>>0)<($454>>>0);
 $457 = $456&1;
 $$151031 = (($$$131029) + ($457))|0;
 $458 = HEAP32[$204>>2]|0;
 $459 = HEAP32[$55>>2]|0;
 $460 = (___muldi3(($459|0),0,($458|0),0)|0);
 $461 = tempRet0;
 $462 = (_i64Add(($450|0),($451|0),($452|0),($453|0))|0);
 $463 = tempRet0;
 (_i64Add(($460|0),($461|0),($462|0),0)|0);
 $464 = tempRet0;
 $465 = (($464) + ($455))|0;
 $466 = ($465>>>0)<($464>>>0);
 $467 = $466&1;
 $$$151031 = (($$151031) + ($467))|0;
 $468 = HEAP32[$341>>2]|0;
 $469 = HEAP32[$42>>2]|0;
 $470 = (___muldi3(($469|0),0,($468|0),0)|0);
 $471 = tempRet0;
 $472 = (_i64Add(($460|0),($461|0),($462|0),($463|0))|0);
 $473 = tempRet0;
 $474 = (_i64Add(($470|0),($471|0),($472|0),0)|0);
 $475 = tempRet0;
 $476 = (($475) + ($465))|0;
 $477 = ($476>>>0)<($475>>>0);
 $478 = $477&1;
 $$171033 = (($$$151031) + ($478))|0;
 $479 = ((($0)) + 36|0);
 HEAP32[$479>>2] = $474;
 $480 = HEAP32[$341>>2]|0;
 $481 = HEAP32[$55>>2]|0;
 $482 = (___muldi3(($481|0),0,($480|0),0)|0);
 $483 = tempRet0;
 $484 = (_i64Add(($476|0),0,($482|0),($483|0))|0);
 $485 = tempRet0;
 $486 = (($$171033) + ($485))|0;
 $487 = ($486>>>0)<($485>>>0);
 $$1075 = $487&1;
 $488 = HEAP32[$204>>2]|0;
 $489 = HEAP32[$132>>2]|0;
 $490 = (___muldi3(($489|0),0,($488|0),0)|0);
 $491 = tempRet0;
 (_i64Add(($484|0),0,($490|0),($491|0))|0);
 $492 = tempRet0;
 $493 = (($492) + ($486))|0;
 $494 = ($493>>>0)<($492>>>0);
 $495 = $487 ? 2 : 1;
 $$16 = $494 ? $495 : $$1075;
 $496 = HEAP32[$191>>2]|0;
 $497 = HEAP32[$145>>2]|0;
 $498 = (___muldi3(($497|0),0,($496|0),0)|0);
 $499 = tempRet0;
 $500 = (_i64Add(($484|0),($485|0),($490|0),($491|0))|0);
 $501 = tempRet0;
 (_i64Add(($500|0),0,($498|0),($499|0))|0);
 $502 = tempRet0;
 $503 = (($493) + ($502))|0;
 $504 = ($503>>>0)<($502>>>0);
 $505 = $504&1;
 $$$16 = (($505) + ($$16))|0;
 $506 = HEAP32[$94>>2]|0;
 $507 = HEAP32[$262>>2]|0;
 $508 = (___muldi3(($507|0),0,($506|0),0)|0);
 $509 = tempRet0;
 $510 = (_i64Add(($500|0),($501|0),($498|0),($499|0))|0);
 $511 = tempRet0;
 (_i64Add(($508|0),($509|0),($510|0),0)|0);
 $512 = tempRet0;
 $513 = (($503) + ($512))|0;
 $514 = ($513>>>0)<($512>>>0);
 $515 = $514&1;
 $$18 = (($$$16) + ($515))|0;
 $516 = HEAP32[$81>>2]|0;
 $517 = HEAP32[$275>>2]|0;
 $518 = (___muldi3(($517|0),0,($516|0),0)|0);
 $519 = tempRet0;
 $520 = (_i64Add(($508|0),($509|0),($510|0),($511|0))|0);
 $521 = tempRet0;
 $522 = (_i64Add(($518|0),($519|0),($520|0),0)|0);
 $523 = tempRet0;
 $524 = (($523) + ($513))|0;
 $525 = ($524>>>0)<($523>>>0);
 $526 = $525&1;
 $$$18 = (($$18) + ($526))|0;
 $527 = ((($0)) + 40|0);
 HEAP32[$527>>2] = $522;
 $528 = HEAP32[$94>>2]|0;
 $529 = HEAP32[$275>>2]|0;
 $530 = (___muldi3(($529|0),0,($528|0),0)|0);
 $531 = tempRet0;
 $532 = (_i64Add(($524|0),0,($530|0),($531|0))|0);
 $533 = tempRet0;
 $534 = (($$$18) + ($533))|0;
 $535 = ($534>>>0)<($533>>>0);
 $$161012 = $535&1;
 $536 = HEAP32[$191>>2]|0;
 $537 = HEAP32[$262>>2]|0;
 $538 = (___muldi3(($537|0),0,($536|0),0)|0);
 $539 = tempRet0;
 (_i64Add(($532|0),0,($538|0),($539|0))|0);
 $540 = tempRet0;
 $541 = (($540) + ($534))|0;
 $542 = ($541>>>0)<($540>>>0);
 $543 = $535 ? 2 : 1;
 $$$161012 = $542 ? $543 : $$161012;
 $544 = HEAP32[$204>>2]|0;
 $545 = HEAP32[$145>>2]|0;
 $546 = (___muldi3(($545|0),0,($544|0),0)|0);
 $547 = tempRet0;
 $548 = (_i64Add(($532|0),($533|0),($538|0),($539|0))|0);
 $549 = tempRet0;
 (_i64Add(($548|0),0,($546|0),($547|0))|0);
 $550 = tempRet0;
 $551 = (($541) + ($550))|0;
 $552 = ($551>>>0)<($550>>>0);
 $553 = $552&1;
 $$181014 = (($553) + ($$$161012))|0;
 $554 = HEAP32[$341>>2]|0;
 $555 = HEAP32[$132>>2]|0;
 $556 = (___muldi3(($555|0),0,($554|0),0)|0);
 $557 = tempRet0;
 $558 = (_i64Add(($548|0),($549|0),($546|0),($547|0))|0);
 $559 = tempRet0;
 $560 = (_i64Add(($556|0),($557|0),($558|0),0)|0);
 $561 = tempRet0;
 $562 = (($551) + ($561))|0;
 $563 = ($562>>>0)<($561>>>0);
 $564 = $563&1;
 $$$181014 = (($$181014) + ($564))|0;
 $565 = ((($0)) + 44|0);
 HEAP32[$565>>2] = $560;
 $566 = HEAP32[$341>>2]|0;
 $567 = HEAP32[$145>>2]|0;
 $568 = (___muldi3(($567|0),0,($566|0),0)|0);
 $569 = tempRet0;
 $570 = (_i64Add(($562|0),0,($568|0),($569|0))|0);
 $571 = tempRet0;
 $572 = (($$$181014) + ($571))|0;
 $573 = ($572>>>0)<($571>>>0);
 $$181034 = $573&1;
 $574 = HEAP32[$204>>2]|0;
 $575 = HEAP32[$262>>2]|0;
 $576 = (___muldi3(($575|0),0,($574|0),0)|0);
 $577 = tempRet0;
 (_i64Add(($570|0),0,($576|0),($577|0))|0);
 $578 = tempRet0;
 $579 = (($578) + ($572))|0;
 $580 = ($579>>>0)<($578>>>0);
 $581 = $573 ? 2 : 1;
 $$$181034 = $580 ? $581 : $$181034;
 $582 = HEAP32[$191>>2]|0;
 $583 = HEAP32[$275>>2]|0;
 $584 = (___muldi3(($583|0),0,($582|0),0)|0);
 $585 = tempRet0;
 $586 = (_i64Add(($570|0),($571|0),($576|0),($577|0))|0);
 $587 = tempRet0;
 $588 = (_i64Add(($586|0),0,($584|0),($585|0))|0);
 $589 = tempRet0;
 $590 = (($579) + ($589))|0;
 $591 = ($590>>>0)<($589>>>0);
 $592 = $591&1;
 $$201036 = (($592) + ($$$181034))|0;
 $593 = ((($0)) + 48|0);
 HEAP32[$593>>2] = $588;
 $594 = HEAP32[$204>>2]|0;
 $595 = HEAP32[$275>>2]|0;
 $596 = (___muldi3(($595|0),0,($594|0),0)|0);
 $597 = tempRet0;
 $598 = (_i64Add(($590|0),0,($596|0),($597|0))|0);
 $599 = tempRet0;
 $600 = (($$201036) + ($599))|0;
 $601 = ($600>>>0)<($599>>>0);
 $$1076 = $601&1;
 $602 = HEAP32[$341>>2]|0;
 $603 = HEAP32[$262>>2]|0;
 $604 = (___muldi3(($603|0),0,($602|0),0)|0);
 $605 = tempRet0;
 $606 = (_i64Add(($598|0),0,($604|0),($605|0))|0);
 $607 = tempRet0;
 $608 = (($607) + ($600))|0;
 $609 = ($608>>>0)<($607>>>0);
 $610 = $601 ? 2 : 1;
 $$21 = $609 ? $610 : $$1076;
 $611 = ((($0)) + 52|0);
 HEAP32[$611>>2] = $606;
 $612 = HEAP32[$341>>2]|0;
 $613 = HEAP32[$275>>2]|0;
 $614 = (___muldi3(($613|0),0,($612|0),0)|0);
 $615 = tempRet0;
 $616 = (_i64Add(($608|0),0,($614|0),($615|0))|0);
 $617 = tempRet0;
 $618 = (($617) + ($$21))|0;
 $619 = ((($0)) + 56|0);
 HEAP32[$619>>2] = $616;
 $620 = ((($0)) + 60|0);
 HEAP32[$620>>2] = $618;
 return;
}
function _bn_mul_comba4($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$1261 = 0, $$$1266 = 0, $$$2 = 0, $$$3268 = 0, $$1 = 0, $$1261 = 0, $$1266 = 0, $$2 = 0, $$273 = 0, $$3268 = 0, $$4 = 0, $$4264 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (___muldi3(($4|0),0,($3|0),0)|0);
 $6 = tempRet0;
 HEAP32[$0>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (___muldi3(($9|0),0,($7|0),0)|0);
 $11 = tempRet0;
 $12 = (_i64Add(($10|0),($11|0),($6|0),0)|0);
 $13 = tempRet0;
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$2>>2]|0;
 $17 = (___muldi3(($16|0),0,($15|0),0)|0);
 $18 = tempRet0;
 $19 = (_i64Add(($17|0),($18|0),($12|0),0)|0);
 $20 = tempRet0;
 $21 = (($20) + ($13))|0;
 $22 = ($21>>>0)<($20>>>0);
 $$1 = $22&1;
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $19;
 $24 = ((($1)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$2>>2]|0;
 $27 = (___muldi3(($26|0),0,($25|0),0)|0);
 $28 = tempRet0;
 $29 = (_i64Add(($21|0),0,($27|0),($28|0))|0);
 $30 = tempRet0;
 $31 = (($30) + ($$1))|0;
 $32 = ($31>>>0)<($30>>>0);
 $$ = $32&1;
 $33 = HEAP32[$14>>2]|0;
 $34 = HEAP32[$8>>2]|0;
 $35 = (___muldi3(($34|0),0,($33|0),0)|0);
 $36 = tempRet0;
 (_i64Add(($29|0),0,($35|0),($36|0))|0);
 $37 = tempRet0;
 $38 = (($37) + ($31))|0;
 $39 = ($38>>>0)<($37>>>0);
 $40 = $32 ? 2 : 1;
 $$1261 = $39 ? $40 : $$;
 $41 = HEAP32[$1>>2]|0;
 $42 = ((($2)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (___muldi3(($43|0),0,($41|0),0)|0);
 $45 = tempRet0;
 $46 = (_i64Add(($29|0),($30|0),($35|0),($36|0))|0);
 $47 = tempRet0;
 $48 = (_i64Add(($46|0),0,($44|0),($45|0))|0);
 $49 = tempRet0;
 $50 = (($38) + ($49))|0;
 $51 = ($50>>>0)<($49>>>0);
 $52 = $51&1;
 $$$1261 = (($52) + ($$1261))|0;
 $53 = ((($0)) + 8|0);
 HEAP32[$53>>2] = $48;
 $54 = HEAP32[$1>>2]|0;
 $55 = ((($2)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (___muldi3(($56|0),0,($54|0),0)|0);
 $58 = tempRet0;
 $59 = (_i64Add(($50|0),0,($57|0),($58|0))|0);
 $60 = tempRet0;
 $61 = (($$$1261) + ($60))|0;
 $62 = ($61>>>0)<($60>>>0);
 $$1266 = $62&1;
 $63 = HEAP32[$14>>2]|0;
 $64 = HEAP32[$42>>2]|0;
 $65 = (___muldi3(($64|0),0,($63|0),0)|0);
 $66 = tempRet0;
 (_i64Add(($59|0),0,($65|0),($66|0))|0);
 $67 = tempRet0;
 $68 = (($67) + ($61))|0;
 $69 = ($68>>>0)<($67>>>0);
 $70 = $62 ? 2 : 1;
 $$$1266 = $69 ? $70 : $$1266;
 $71 = HEAP32[$24>>2]|0;
 $72 = HEAP32[$8>>2]|0;
 $73 = (___muldi3(($72|0),0,($71|0),0)|0);
 $74 = tempRet0;
 $75 = (_i64Add(($59|0),($60|0),($65|0),($66|0))|0);
 $76 = tempRet0;
 (_i64Add(($75|0),0,($73|0),($74|0))|0);
 $77 = tempRet0;
 $78 = (($68) + ($77))|0;
 $79 = ($78>>>0)<($77>>>0);
 $80 = $79&1;
 $$3268 = (($80) + ($$$1266))|0;
 $81 = ((($1)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = HEAP32[$2>>2]|0;
 $84 = (___muldi3(($83|0),0,($82|0),0)|0);
 $85 = tempRet0;
 $86 = (_i64Add(($75|0),($76|0),($73|0),($74|0))|0);
 $87 = tempRet0;
 $88 = (_i64Add(($86|0),0,($84|0),($85|0))|0);
 $89 = tempRet0;
 $90 = (($78) + ($89))|0;
 $91 = ($90>>>0)<($89>>>0);
 $92 = $91&1;
 $$$3268 = (($$3268) + ($92))|0;
 $93 = ((($0)) + 12|0);
 HEAP32[$93>>2] = $88;
 $94 = HEAP32[$81>>2]|0;
 $95 = HEAP32[$8>>2]|0;
 $96 = (___muldi3(($95|0),0,($94|0),0)|0);
 $97 = tempRet0;
 $98 = (_i64Add(($90|0),0,($96|0),($97|0))|0);
 $99 = tempRet0;
 $100 = (($$$3268) + ($99))|0;
 $101 = ($100>>>0)<($99>>>0);
 $$2 = $101&1;
 $102 = HEAP32[$24>>2]|0;
 $103 = HEAP32[$42>>2]|0;
 $104 = (___muldi3(($103|0),0,($102|0),0)|0);
 $105 = tempRet0;
 (_i64Add(($98|0),0,($104|0),($105|0))|0);
 $106 = tempRet0;
 $107 = (($106) + ($100))|0;
 $108 = ($107>>>0)<($106>>>0);
 $109 = $101 ? 2 : 1;
 $$$2 = $108 ? $109 : $$2;
 $110 = HEAP32[$14>>2]|0;
 $111 = HEAP32[$55>>2]|0;
 $112 = (___muldi3(($111|0),0,($110|0),0)|0);
 $113 = tempRet0;
 $114 = (_i64Add(($98|0),($99|0),($104|0),($105|0))|0);
 $115 = tempRet0;
 $116 = (_i64Add(($114|0),0,($112|0),($113|0))|0);
 $117 = tempRet0;
 $118 = (($107) + ($117))|0;
 $119 = ($118>>>0)<($117>>>0);
 $120 = $119&1;
 $$4 = (($120) + ($$$2))|0;
 $121 = ((($0)) + 16|0);
 HEAP32[$121>>2] = $116;
 $122 = HEAP32[$24>>2]|0;
 $123 = HEAP32[$55>>2]|0;
 $124 = (___muldi3(($123|0),0,($122|0),0)|0);
 $125 = tempRet0;
 $126 = (_i64Add(($118|0),0,($124|0),($125|0))|0);
 $127 = tempRet0;
 $128 = (($$4) + ($127))|0;
 $129 = ($128>>>0)<($127>>>0);
 $$273 = $129&1;
 $130 = HEAP32[$81>>2]|0;
 $131 = HEAP32[$42>>2]|0;
 $132 = (___muldi3(($131|0),0,($130|0),0)|0);
 $133 = tempRet0;
 $134 = (_i64Add(($126|0),0,($132|0),($133|0))|0);
 $135 = tempRet0;
 $136 = (($135) + ($128))|0;
 $137 = ($136>>>0)<($135>>>0);
 $138 = $129 ? 2 : 1;
 $$4264 = $137 ? $138 : $$273;
 $139 = ((($0)) + 20|0);
 HEAP32[$139>>2] = $134;
 $140 = HEAP32[$81>>2]|0;
 $141 = HEAP32[$55>>2]|0;
 $142 = (___muldi3(($141|0),0,($140|0),0)|0);
 $143 = tempRet0;
 $144 = (_i64Add(($136|0),0,($142|0),($143|0))|0);
 $145 = tempRet0;
 $146 = (($145) + ($$4264))|0;
 $147 = ((($0)) + 24|0);
 HEAP32[$147>>2] = $144;
 $148 = ((($0)) + 28|0);
 HEAP32[$148>>2] = $146;
 return;
}
function _bn_sqr_comba8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$10914 = 0, $$$11 = 0, $$$11895 = 0, $$$13 = 0, $$$13897 = 0, $$$13917 = 0, $$$15919 = 0, $$$16 = 0, $$$16900 = 0, $$$18 = 0, $$$1885 = 0, $$$18902 = 0, $$$18922 = 0, $$$1905 = 0, $$$2 = 0, $$$3907 = 0, $$$4 = 0, $$$4888 = 0, $$$6890 = 0;
 var $$$6910 = 0, $$$7 = 0, $$$8912 = 0, $$$9 = 0, $$$9893 = 0, $$1 = 0, $$10914 = 0, $$11 = 0, $$11895 = 0, $$13 = 0, $$13897 = 0, $$13917 = 0, $$15899 = 0, $$15919 = 0, $$16 = 0, $$16900 = 0, $$17921 = 0, $$18 = 0, $$1885 = 0, $$18902 = 0;
 var $$18922 = 0, $$1905 = 0, $$2 = 0, $$20924 = 0, $$21 = 0, $$3907 = 0, $$4 = 0, $$4888 = 0, $$6 = 0, $$6890 = 0, $$6910 = 0, $$7 = 0, $$8892 = 0, $$8912 = 0, $$9 = 0, $$960 = 0, $$961 = 0, $$962 = 0, $$963 = 0, $$964 = 0;
 var $$9893 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (___muldi3(($2|0),0,($2|0),0)|0);
 $4 = tempRet0;
 HEAP32[$0>>2] = $3;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (___muldi3(($7|0),0,($6|0),0)|0);
 $9 = tempRet0;
 $10 = (_i64Add(($8|0),($9|0),($4|0),0)|0);
 $11 = tempRet0;
 $12 = (_i64Add(($10|0),0,($8|0),($9|0))|0);
 $13 = tempRet0;
 $14 = (($13) + ($11))|0;
 $15 = ($14>>>0)<($13>>>0);
 $$1 = $15&1;
 $16 = ((($0)) + 4|0);
 HEAP32[$16>>2] = $12;
 $17 = HEAP32[$5>>2]|0;
 $18 = (___muldi3(($17|0),0,($17|0),0)|0);
 $19 = tempRet0;
 $20 = (_i64Add(($14|0),0,($18|0),($19|0))|0);
 $21 = tempRet0;
 $22 = (($21) + ($$1))|0;
 $23 = ($22>>>0)<($21>>>0);
 $$ = $23&1;
 $24 = ((($1)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$1>>2]|0;
 $27 = (___muldi3(($26|0),0,($25|0),0)|0);
 $28 = tempRet0;
 (_i64Add(($20|0),0,($27|0),($28|0))|0);
 $29 = tempRet0;
 $30 = (($29) + ($22))|0;
 $31 = ($30>>>0)<($29>>>0);
 $32 = $23 ? 2 : 1;
 $$1885 = $31 ? $32 : $$;
 $33 = (_i64Add(($20|0),($21|0),($27|0),($28|0))|0);
 $34 = tempRet0;
 $35 = (_i64Add(($33|0),0,($27|0),($28|0))|0);
 $36 = tempRet0;
 $37 = (($30) + ($36))|0;
 $38 = ($37>>>0)<($36>>>0);
 $39 = $38&1;
 $$$1885 = (($39) + ($$1885))|0;
 $40 = ((($0)) + 8|0);
 HEAP32[$40>>2] = $35;
 $41 = ((($1)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$1>>2]|0;
 $44 = (___muldi3(($43|0),0,($42|0),0)|0);
 $45 = tempRet0;
 $46 = (_i64Add(($37|0),0,($44|0),($45|0))|0);
 $47 = tempRet0;
 $48 = (($$$1885) + ($47))|0;
 $49 = ($48>>>0)<($47>>>0);
 $$1905 = $49&1;
 (_i64Add(($46|0),0,($44|0),($45|0))|0);
 $50 = tempRet0;
 $51 = (($50) + ($48))|0;
 $52 = ($51>>>0)<($50>>>0);
 $53 = $49 ? 2 : 1;
 $$$1905 = $52 ? $53 : $$1905;
 $54 = HEAP32[$24>>2]|0;
 $55 = HEAP32[$5>>2]|0;
 $56 = (___muldi3(($55|0),0,($54|0),0)|0);
 $57 = tempRet0;
 $58 = (_i64Add(($46|0),($47|0),($44|0),($45|0))|0);
 $59 = tempRet0;
 (_i64Add(($58|0),0,($56|0),($57|0))|0);
 $60 = tempRet0;
 $61 = (($51) + ($60))|0;
 $62 = ($61>>>0)<($60>>>0);
 $63 = $62&1;
 $$3907 = (($63) + ($$$1905))|0;
 $64 = (_i64Add(($58|0),($59|0),($56|0),($57|0))|0);
 $65 = tempRet0;
 $66 = (_i64Add(($64|0),0,($56|0),($57|0))|0);
 $67 = tempRet0;
 $68 = (($61) + ($67))|0;
 $69 = ($68>>>0)<($67>>>0);
 $70 = $69&1;
 $$$3907 = (($$3907) + ($70))|0;
 $71 = ((($0)) + 12|0);
 HEAP32[$71>>2] = $66;
 $72 = HEAP32[$24>>2]|0;
 $73 = (___muldi3(($72|0),0,($72|0),0)|0);
 $74 = tempRet0;
 $75 = (_i64Add(($68|0),0,($73|0),($74|0))|0);
 $76 = tempRet0;
 $77 = (($$$3907) + ($76))|0;
 $78 = ($77>>>0)<($76>>>0);
 $$2 = $78&1;
 $79 = HEAP32[$41>>2]|0;
 $80 = HEAP32[$5>>2]|0;
 $81 = (___muldi3(($80|0),0,($79|0),0)|0);
 $82 = tempRet0;
 (_i64Add(($75|0),0,($81|0),($82|0))|0);
 $83 = tempRet0;
 $84 = (($83) + ($77))|0;
 $85 = ($84>>>0)<($83>>>0);
 $86 = $78 ? 2 : 1;
 $$$2 = $85 ? $86 : $$2;
 $87 = (_i64Add(($75|0),($76|0),($81|0),($82|0))|0);
 $88 = tempRet0;
 (_i64Add(($87|0),0,($81|0),($82|0))|0);
 $89 = tempRet0;
 $90 = (($84) + ($89))|0;
 $91 = ($90>>>0)<($89>>>0);
 $92 = $91&1;
 $$4 = (($92) + ($$$2))|0;
 $93 = ((($1)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[$1>>2]|0;
 $96 = (___muldi3(($95|0),0,($94|0),0)|0);
 $97 = tempRet0;
 $98 = (_i64Add(($87|0),($88|0),($81|0),($82|0))|0);
 $99 = tempRet0;
 (_i64Add(($98|0),0,($96|0),($97|0))|0);
 $100 = tempRet0;
 $101 = (($90) + ($100))|0;
 $102 = ($101>>>0)<($100>>>0);
 $103 = $102&1;
 $$$4 = (($$4) + ($103))|0;
 $104 = (_i64Add(($98|0),($99|0),($96|0),($97|0))|0);
 $105 = tempRet0;
 $106 = (_i64Add(($104|0),0,($96|0),($97|0))|0);
 $107 = tempRet0;
 $108 = (($101) + ($107))|0;
 $109 = ($108>>>0)<($107>>>0);
 $110 = $109&1;
 $$6 = (($$$4) + ($110))|0;
 $111 = ((($0)) + 16|0);
 HEAP32[$111>>2] = $106;
 $112 = ((($1)) + 20|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[$1>>2]|0;
 $115 = (___muldi3(($114|0),0,($113|0),0)|0);
 $116 = tempRet0;
 $117 = (_i64Add(($108|0),0,($115|0),($116|0))|0);
 $118 = tempRet0;
 $119 = (($$6) + ($118))|0;
 $120 = ($119>>>0)<($118>>>0);
 $$960 = $120&1;
 (_i64Add(($117|0),0,($115|0),($116|0))|0);
 $121 = tempRet0;
 $122 = (($121) + ($119))|0;
 $123 = ($122>>>0)<($121>>>0);
 $124 = $120 ? 2 : 1;
 $$4888 = $123 ? $124 : $$960;
 $125 = HEAP32[$93>>2]|0;
 $126 = HEAP32[$5>>2]|0;
 $127 = (___muldi3(($126|0),0,($125|0),0)|0);
 $128 = tempRet0;
 $129 = (_i64Add(($117|0),($118|0),($115|0),($116|0))|0);
 $130 = tempRet0;
 (_i64Add(($129|0),0,($127|0),($128|0))|0);
 $131 = tempRet0;
 $132 = (($122) + ($131))|0;
 $133 = ($132>>>0)<($131>>>0);
 $134 = $133&1;
 $$$4888 = (($134) + ($$4888))|0;
 $135 = (_i64Add(($129|0),($130|0),($127|0),($128|0))|0);
 $136 = tempRet0;
 (_i64Add(($135|0),0,($127|0),($128|0))|0);
 $137 = tempRet0;
 $138 = (($132) + ($137))|0;
 $139 = ($138>>>0)<($137>>>0);
 $140 = $139&1;
 $$6890 = (($$$4888) + ($140))|0;
 $141 = HEAP32[$41>>2]|0;
 $142 = HEAP32[$24>>2]|0;
 $143 = (___muldi3(($142|0),0,($141|0),0)|0);
 $144 = tempRet0;
 $145 = (_i64Add(($135|0),($136|0),($127|0),($128|0))|0);
 $146 = tempRet0;
 (_i64Add(($145|0),0,($143|0),($144|0))|0);
 $147 = tempRet0;
 $148 = (($138) + ($147))|0;
 $149 = ($148>>>0)<($147>>>0);
 $150 = $149&1;
 $$$6890 = (($$6890) + ($150))|0;
 $151 = (_i64Add(($145|0),($146|0),($143|0),($144|0))|0);
 $152 = tempRet0;
 $153 = (_i64Add(($151|0),0,($143|0),($144|0))|0);
 $154 = tempRet0;
 $155 = (($148) + ($154))|0;
 $156 = ($155>>>0)<($154>>>0);
 $157 = $156&1;
 $$8892 = (($$$6890) + ($157))|0;
 $158 = ((($0)) + 20|0);
 HEAP32[$158>>2] = $153;
 $159 = HEAP32[$41>>2]|0;
 $160 = (___muldi3(($159|0),0,($159|0),0)|0);
 $161 = tempRet0;
 $162 = (_i64Add(($155|0),0,($160|0),($161|0))|0);
 $163 = tempRet0;
 $164 = (($$8892) + ($163))|0;
 $165 = ($164>>>0)<($163>>>0);
 $$961 = $165&1;
 $166 = HEAP32[$93>>2]|0;
 $167 = HEAP32[$24>>2]|0;
 $168 = (___muldi3(($167|0),0,($166|0),0)|0);
 $169 = tempRet0;
 (_i64Add(($162|0),0,($168|0),($169|0))|0);
 $170 = tempRet0;
 $171 = (($170) + ($164))|0;
 $172 = ($171>>>0)<($170>>>0);
 $173 = $165 ? 2 : 1;
 $$6910 = $172 ? $173 : $$961;
 $174 = (_i64Add(($162|0),($163|0),($168|0),($169|0))|0);
 $175 = tempRet0;
 (_i64Add(($174|0),0,($168|0),($169|0))|0);
 $176 = tempRet0;
 $177 = (($171) + ($176))|0;
 $178 = ($177>>>0)<($176>>>0);
 $179 = $178&1;
 $$$6910 = (($179) + ($$6910))|0;
 $180 = HEAP32[$112>>2]|0;
 $181 = HEAP32[$5>>2]|0;
 $182 = (___muldi3(($181|0),0,($180|0),0)|0);
 $183 = tempRet0;
 $184 = (_i64Add(($174|0),($175|0),($168|0),($169|0))|0);
 $185 = tempRet0;
 (_i64Add(($184|0),0,($182|0),($183|0))|0);
 $186 = tempRet0;
 $187 = (($177) + ($186))|0;
 $188 = ($187>>>0)<($186>>>0);
 $189 = $188&1;
 $$8912 = (($$$6910) + ($189))|0;
 $190 = (_i64Add(($184|0),($185|0),($182|0),($183|0))|0);
 $191 = tempRet0;
 (_i64Add(($190|0),0,($182|0),($183|0))|0);
 $192 = tempRet0;
 $193 = (($187) + ($192))|0;
 $194 = ($193>>>0)<($192>>>0);
 $195 = $194&1;
 $$$8912 = (($$8912) + ($195))|0;
 $196 = ((($1)) + 24|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = HEAP32[$1>>2]|0;
 $199 = (___muldi3(($198|0),0,($197|0),0)|0);
 $200 = tempRet0;
 $201 = (_i64Add(($190|0),($191|0),($182|0),($183|0))|0);
 $202 = tempRet0;
 (_i64Add(($201|0),0,($199|0),($200|0))|0);
 $203 = tempRet0;
 $204 = (($193) + ($203))|0;
 $205 = ($204>>>0)<($203>>>0);
 $206 = $205&1;
 $$10914 = (($$$8912) + ($206))|0;
 $207 = (_i64Add(($201|0),($202|0),($199|0),($200|0))|0);
 $208 = tempRet0;
 $209 = (_i64Add(($207|0),0,($199|0),($200|0))|0);
 $210 = tempRet0;
 $211 = (($204) + ($210))|0;
 $212 = ($211>>>0)<($210>>>0);
 $213 = $212&1;
 $$$10914 = (($$10914) + ($213))|0;
 $214 = ((($0)) + 24|0);
 HEAP32[$214>>2] = $209;
 $215 = ((($1)) + 28|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = HEAP32[$1>>2]|0;
 $218 = (___muldi3(($217|0),0,($216|0),0)|0);
 $219 = tempRet0;
 $220 = (_i64Add(($211|0),0,($218|0),($219|0))|0);
 $221 = tempRet0;
 $222 = (($$$10914) + ($221))|0;
 $223 = ($222>>>0)<($221>>>0);
 $$7 = $223&1;
 (_i64Add(($220|0),0,($218|0),($219|0))|0);
 $224 = tempRet0;
 $225 = (($224) + ($222))|0;
 $226 = ($225>>>0)<($224>>>0);
 $227 = $223 ? 2 : 1;
 $$$7 = $226 ? $227 : $$7;
 $228 = HEAP32[$196>>2]|0;
 $229 = HEAP32[$5>>2]|0;
 $230 = (___muldi3(($229|0),0,($228|0),0)|0);
 $231 = tempRet0;
 $232 = (_i64Add(($220|0),($221|0),($218|0),($219|0))|0);
 $233 = tempRet0;
 (_i64Add(($232|0),0,($230|0),($231|0))|0);
 $234 = tempRet0;
 $235 = (($225) + ($234))|0;
 $236 = ($235>>>0)<($234>>>0);
 $237 = $236&1;
 $$9 = (($237) + ($$$7))|0;
 $238 = (_i64Add(($232|0),($233|0),($230|0),($231|0))|0);
 $239 = tempRet0;
 (_i64Add(($238|0),0,($230|0),($231|0))|0);
 $240 = tempRet0;
 $241 = (($235) + ($240))|0;
 $242 = ($241>>>0)<($240>>>0);
 $243 = $242&1;
 $$$9 = (($$9) + ($243))|0;
 $244 = HEAP32[$112>>2]|0;
 $245 = HEAP32[$24>>2]|0;
 $246 = (___muldi3(($245|0),0,($244|0),0)|0);
 $247 = tempRet0;
 $248 = (_i64Add(($238|0),($239|0),($230|0),($231|0))|0);
 $249 = tempRet0;
 (_i64Add(($248|0),0,($246|0),($247|0))|0);
 $250 = tempRet0;
 $251 = (($241) + ($250))|0;
 $252 = ($251>>>0)<($250>>>0);
 $253 = $252&1;
 $$11 = (($$$9) + ($253))|0;
 $254 = (_i64Add(($248|0),($249|0),($246|0),($247|0))|0);
 $255 = tempRet0;
 (_i64Add(($254|0),0,($246|0),($247|0))|0);
 $256 = tempRet0;
 $257 = (($251) + ($256))|0;
 $258 = ($257>>>0)<($256>>>0);
 $259 = $258&1;
 $$$11 = (($$11) + ($259))|0;
 $260 = HEAP32[$93>>2]|0;
 $261 = HEAP32[$41>>2]|0;
 $262 = (___muldi3(($261|0),0,($260|0),0)|0);
 $263 = tempRet0;
 $264 = (_i64Add(($254|0),($255|0),($246|0),($247|0))|0);
 $265 = tempRet0;
 (_i64Add(($264|0),0,($262|0),($263|0))|0);
 $266 = tempRet0;
 $267 = (($257) + ($266))|0;
 $268 = ($267>>>0)<($266>>>0);
 $269 = $268&1;
 $$13 = (($$$11) + ($269))|0;
 $270 = (_i64Add(($264|0),($265|0),($262|0),($263|0))|0);
 $271 = tempRet0;
 $272 = (_i64Add(($270|0),0,($262|0),($263|0))|0);
 $273 = tempRet0;
 $274 = (($267) + ($273))|0;
 $275 = ($274>>>0)<($273>>>0);
 $276 = $275&1;
 $$$13 = (($$13) + ($276))|0;
 $277 = ((($0)) + 28|0);
 HEAP32[$277>>2] = $272;
 $278 = HEAP32[$93>>2]|0;
 $279 = (___muldi3(($278|0),0,($278|0),0)|0);
 $280 = tempRet0;
 $281 = (_i64Add(($274|0),0,($279|0),($280|0))|0);
 $282 = tempRet0;
 $283 = (($$$13) + ($282))|0;
 $284 = ($283>>>0)<($282>>>0);
 $$9893 = $284&1;
 $285 = HEAP32[$112>>2]|0;
 $286 = HEAP32[$41>>2]|0;
 $287 = (___muldi3(($286|0),0,($285|0),0)|0);
 $288 = tempRet0;
 (_i64Add(($281|0),0,($287|0),($288|0))|0);
 $289 = tempRet0;
 $290 = (($289) + ($283))|0;
 $291 = ($290>>>0)<($289>>>0);
 $292 = $284 ? 2 : 1;
 $$$9893 = $291 ? $292 : $$9893;
 $293 = (_i64Add(($281|0),($282|0),($287|0),($288|0))|0);
 $294 = tempRet0;
 (_i64Add(($293|0),0,($287|0),($288|0))|0);
 $295 = tempRet0;
 $296 = (($290) + ($295))|0;
 $297 = ($296>>>0)<($295>>>0);
 $298 = $297&1;
 $$11895 = (($298) + ($$$9893))|0;
 $299 = HEAP32[$196>>2]|0;
 $300 = HEAP32[$24>>2]|0;
 $301 = (___muldi3(($300|0),0,($299|0),0)|0);
 $302 = tempRet0;
 $303 = (_i64Add(($293|0),($294|0),($287|0),($288|0))|0);
 $304 = tempRet0;
 (_i64Add(($303|0),0,($301|0),($302|0))|0);
 $305 = tempRet0;
 $306 = (($296) + ($305))|0;
 $307 = ($306>>>0)<($305>>>0);
 $308 = $307&1;
 $$$11895 = (($$11895) + ($308))|0;
 $309 = (_i64Add(($303|0),($304|0),($301|0),($302|0))|0);
 $310 = tempRet0;
 (_i64Add(($309|0),0,($301|0),($302|0))|0);
 $311 = tempRet0;
 $312 = (($306) + ($311))|0;
 $313 = ($312>>>0)<($311>>>0);
 $314 = $313&1;
 $$13897 = (($$$11895) + ($314))|0;
 $315 = HEAP32[$215>>2]|0;
 $316 = HEAP32[$5>>2]|0;
 $317 = (___muldi3(($316|0),0,($315|0),0)|0);
 $318 = tempRet0;
 $319 = (_i64Add(($309|0),($310|0),($301|0),($302|0))|0);
 $320 = tempRet0;
 (_i64Add(($319|0),0,($317|0),($318|0))|0);
 $321 = tempRet0;
 $322 = (($312) + ($321))|0;
 $323 = ($322>>>0)<($321>>>0);
 $324 = $323&1;
 $$$13897 = (($$13897) + ($324))|0;
 $325 = (_i64Add(($319|0),($320|0),($317|0),($318|0))|0);
 $326 = tempRet0;
 $327 = (_i64Add(($325|0),0,($317|0),($318|0))|0);
 $328 = tempRet0;
 $329 = (($322) + ($328))|0;
 $330 = ($329>>>0)<($328>>>0);
 $331 = $330&1;
 $$15899 = (($$$13897) + ($331))|0;
 $332 = ((($0)) + 32|0);
 HEAP32[$332>>2] = $327;
 $333 = HEAP32[$215>>2]|0;
 $334 = HEAP32[$24>>2]|0;
 $335 = (___muldi3(($334|0),0,($333|0),0)|0);
 $336 = tempRet0;
 $337 = (_i64Add(($329|0),0,($335|0),($336|0))|0);
 $338 = tempRet0;
 $339 = (($$15899) + ($338))|0;
 $340 = ($339>>>0)<($338>>>0);
 $$962 = $340&1;
 (_i64Add(($337|0),0,($335|0),($336|0))|0);
 $341 = tempRet0;
 $342 = (($341) + ($339))|0;
 $343 = ($342>>>0)<($341>>>0);
 $344 = $340 ? 2 : 1;
 $$13917 = $343 ? $344 : $$962;
 $345 = HEAP32[$196>>2]|0;
 $346 = HEAP32[$41>>2]|0;
 $347 = (___muldi3(($346|0),0,($345|0),0)|0);
 $348 = tempRet0;
 $349 = (_i64Add(($337|0),($338|0),($335|0),($336|0))|0);
 $350 = tempRet0;
 (_i64Add(($349|0),0,($347|0),($348|0))|0);
 $351 = tempRet0;
 $352 = (($342) + ($351))|0;
 $353 = ($352>>>0)<($351>>>0);
 $354 = $353&1;
 $$$13917 = (($354) + ($$13917))|0;
 $355 = (_i64Add(($349|0),($350|0),($347|0),($348|0))|0);
 $356 = tempRet0;
 (_i64Add(($355|0),0,($347|0),($348|0))|0);
 $357 = tempRet0;
 $358 = (($352) + ($357))|0;
 $359 = ($358>>>0)<($357>>>0);
 $360 = $359&1;
 $$15919 = (($$$13917) + ($360))|0;
 $361 = HEAP32[$112>>2]|0;
 $362 = HEAP32[$93>>2]|0;
 $363 = (___muldi3(($362|0),0,($361|0),0)|0);
 $364 = tempRet0;
 $365 = (_i64Add(($355|0),($356|0),($347|0),($348|0))|0);
 $366 = tempRet0;
 (_i64Add(($365|0),0,($363|0),($364|0))|0);
 $367 = tempRet0;
 $368 = (($358) + ($367))|0;
 $369 = ($368>>>0)<($367>>>0);
 $370 = $369&1;
 $$$15919 = (($$15919) + ($370))|0;
 $371 = (_i64Add(($365|0),($366|0),($363|0),($364|0))|0);
 $372 = tempRet0;
 $373 = (_i64Add(($371|0),0,($363|0),($364|0))|0);
 $374 = tempRet0;
 $375 = (($368) + ($374))|0;
 $376 = ($375>>>0)<($374>>>0);
 $377 = $376&1;
 $$17921 = (($$$15919) + ($377))|0;
 $378 = ((($0)) + 36|0);
 HEAP32[$378>>2] = $373;
 $379 = HEAP32[$112>>2]|0;
 $380 = (___muldi3(($379|0),0,($379|0),0)|0);
 $381 = tempRet0;
 $382 = (_i64Add(($375|0),0,($380|0),($381|0))|0);
 $383 = tempRet0;
 $384 = (($$17921) + ($383))|0;
 $385 = ($384>>>0)<($383>>>0);
 $$963 = $385&1;
 $386 = HEAP32[$196>>2]|0;
 $387 = HEAP32[$93>>2]|0;
 $388 = (___muldi3(($387|0),0,($386|0),0)|0);
 $389 = tempRet0;
 (_i64Add(($382|0),0,($388|0),($389|0))|0);
 $390 = tempRet0;
 $391 = (($390) + ($384))|0;
 $392 = ($391>>>0)<($390>>>0);
 $393 = $385 ? 2 : 1;
 $$16 = $392 ? $393 : $$963;
 $394 = (_i64Add(($382|0),($383|0),($388|0),($389|0))|0);
 $395 = tempRet0;
 (_i64Add(($394|0),0,($388|0),($389|0))|0);
 $396 = tempRet0;
 $397 = (($391) + ($396))|0;
 $398 = ($397>>>0)<($396>>>0);
 $399 = $398&1;
 $$$16 = (($399) + ($$16))|0;
 $400 = HEAP32[$215>>2]|0;
 $401 = HEAP32[$41>>2]|0;
 $402 = (___muldi3(($401|0),0,($400|0),0)|0);
 $403 = tempRet0;
 $404 = (_i64Add(($394|0),($395|0),($388|0),($389|0))|0);
 $405 = tempRet0;
 (_i64Add(($404|0),0,($402|0),($403|0))|0);
 $406 = tempRet0;
 $407 = (($397) + ($406))|0;
 $408 = ($407>>>0)<($406>>>0);
 $409 = $408&1;
 $$18 = (($$$16) + ($409))|0;
 $410 = (_i64Add(($404|0),($405|0),($402|0),($403|0))|0);
 $411 = tempRet0;
 $412 = (_i64Add(($410|0),0,($402|0),($403|0))|0);
 $413 = tempRet0;
 $414 = (($407) + ($413))|0;
 $415 = ($414>>>0)<($413>>>0);
 $416 = $415&1;
 $$$18 = (($$18) + ($416))|0;
 $417 = ((($0)) + 40|0);
 HEAP32[$417>>2] = $412;
 $418 = HEAP32[$215>>2]|0;
 $419 = HEAP32[$93>>2]|0;
 $420 = (___muldi3(($419|0),0,($418|0),0)|0);
 $421 = tempRet0;
 $422 = (_i64Add(($414|0),0,($420|0),($421|0))|0);
 $423 = tempRet0;
 $424 = (($$$18) + ($423))|0;
 $425 = ($424>>>0)<($423>>>0);
 $$16900 = $425&1;
 (_i64Add(($422|0),0,($420|0),($421|0))|0);
 $426 = tempRet0;
 $427 = (($426) + ($424))|0;
 $428 = ($427>>>0)<($426>>>0);
 $429 = $425 ? 2 : 1;
 $$$16900 = $428 ? $429 : $$16900;
 $430 = HEAP32[$196>>2]|0;
 $431 = HEAP32[$112>>2]|0;
 $432 = (___muldi3(($431|0),0,($430|0),0)|0);
 $433 = tempRet0;
 $434 = (_i64Add(($422|0),($423|0),($420|0),($421|0))|0);
 $435 = tempRet0;
 (_i64Add(($434|0),0,($432|0),($433|0))|0);
 $436 = tempRet0;
 $437 = (($427) + ($436))|0;
 $438 = ($437>>>0)<($436>>>0);
 $439 = $438&1;
 $$18902 = (($439) + ($$$16900))|0;
 $440 = (_i64Add(($434|0),($435|0),($432|0),($433|0))|0);
 $441 = tempRet0;
 $442 = (_i64Add(($440|0),0,($432|0),($433|0))|0);
 $443 = tempRet0;
 $444 = (($437) + ($443))|0;
 $445 = ($444>>>0)<($443>>>0);
 $446 = $445&1;
 $$$18902 = (($$18902) + ($446))|0;
 $447 = ((($0)) + 44|0);
 HEAP32[$447>>2] = $442;
 $448 = HEAP32[$196>>2]|0;
 $449 = (___muldi3(($448|0),0,($448|0),0)|0);
 $450 = tempRet0;
 $451 = (_i64Add(($444|0),0,($449|0),($450|0))|0);
 $452 = tempRet0;
 $453 = (($$$18902) + ($452))|0;
 $454 = ($453>>>0)<($452>>>0);
 $$18922 = $454&1;
 $455 = HEAP32[$215>>2]|0;
 $456 = HEAP32[$112>>2]|0;
 $457 = (___muldi3(($456|0),0,($455|0),0)|0);
 $458 = tempRet0;
 (_i64Add(($451|0),0,($457|0),($458|0))|0);
 $459 = tempRet0;
 $460 = (($459) + ($453))|0;
 $461 = ($460>>>0)<($459>>>0);
 $462 = $454 ? 2 : 1;
 $$$18922 = $461 ? $462 : $$18922;
 $463 = (_i64Add(($451|0),($452|0),($457|0),($458|0))|0);
 $464 = tempRet0;
 $465 = (_i64Add(($463|0),0,($457|0),($458|0))|0);
 $466 = tempRet0;
 $467 = (($460) + ($466))|0;
 $468 = ($467>>>0)<($466>>>0);
 $469 = $468&1;
 $$20924 = (($469) + ($$$18922))|0;
 $470 = ((($0)) + 48|0);
 HEAP32[$470>>2] = $465;
 $471 = HEAP32[$215>>2]|0;
 $472 = HEAP32[$196>>2]|0;
 $473 = (___muldi3(($472|0),0,($471|0),0)|0);
 $474 = tempRet0;
 $475 = (_i64Add(($467|0),0,($473|0),($474|0))|0);
 $476 = tempRet0;
 $477 = (($$20924) + ($476))|0;
 $478 = ($477>>>0)<($476>>>0);
 $$964 = $478&1;
 $479 = (_i64Add(($475|0),0,($473|0),($474|0))|0);
 $480 = tempRet0;
 $481 = (($480) + ($477))|0;
 $482 = ($481>>>0)<($480>>>0);
 $483 = $478 ? 2 : 1;
 $$21 = $482 ? $483 : $$964;
 $484 = ((($0)) + 52|0);
 HEAP32[$484>>2] = $479;
 $485 = HEAP32[$215>>2]|0;
 $486 = (___muldi3(($485|0),0,($485|0),0)|0);
 $487 = tempRet0;
 $488 = (_i64Add(($481|0),0,($486|0),($487|0))|0);
 $489 = tempRet0;
 $490 = (($489) + ($$21))|0;
 $491 = ((($0)) + 56|0);
 HEAP32[$491>>2] = $488;
 $492 = ((($0)) + 60|0);
 HEAP32[$492>>2] = $490;
 return;
}
function _bn_sqr_comba4($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$1237 = 0, $$$1242 = 0, $$$2 = 0, $$$3244 = 0, $$1 = 0, $$1237 = 0, $$1242 = 0, $$2 = 0, $$249 = 0, $$3244 = 0, $$4 = 0, $$4240 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (___muldi3(($2|0),0,($2|0),0)|0);
 $4 = tempRet0;
 HEAP32[$0>>2] = $3;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (___muldi3(($7|0),0,($6|0),0)|0);
 $9 = tempRet0;
 $10 = (_i64Add(($8|0),($9|0),($4|0),0)|0);
 $11 = tempRet0;
 $12 = (_i64Add(($10|0),0,($8|0),($9|0))|0);
 $13 = tempRet0;
 $14 = (($13) + ($11))|0;
 $15 = ($14>>>0)<($13>>>0);
 $$1 = $15&1;
 $16 = ((($0)) + 4|0);
 HEAP32[$16>>2] = $12;
 $17 = HEAP32[$5>>2]|0;
 $18 = (___muldi3(($17|0),0,($17|0),0)|0);
 $19 = tempRet0;
 $20 = (_i64Add(($14|0),0,($18|0),($19|0))|0);
 $21 = tempRet0;
 $22 = (($21) + ($$1))|0;
 $23 = ($22>>>0)<($21>>>0);
 $$ = $23&1;
 $24 = ((($1)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$1>>2]|0;
 $27 = (___muldi3(($26|0),0,($25|0),0)|0);
 $28 = tempRet0;
 (_i64Add(($20|0),0,($27|0),($28|0))|0);
 $29 = tempRet0;
 $30 = (($29) + ($22))|0;
 $31 = ($30>>>0)<($29>>>0);
 $32 = $23 ? 2 : 1;
 $$1237 = $31 ? $32 : $$;
 $33 = (_i64Add(($20|0),($21|0),($27|0),($28|0))|0);
 $34 = tempRet0;
 $35 = (_i64Add(($33|0),0,($27|0),($28|0))|0);
 $36 = tempRet0;
 $37 = (($30) + ($36))|0;
 $38 = ($37>>>0)<($36>>>0);
 $39 = $38&1;
 $$$1237 = (($39) + ($$1237))|0;
 $40 = ((($0)) + 8|0);
 HEAP32[$40>>2] = $35;
 $41 = ((($1)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$1>>2]|0;
 $44 = (___muldi3(($43|0),0,($42|0),0)|0);
 $45 = tempRet0;
 $46 = (_i64Add(($37|0),0,($44|0),($45|0))|0);
 $47 = tempRet0;
 $48 = (($$$1237) + ($47))|0;
 $49 = ($48>>>0)<($47>>>0);
 $$1242 = $49&1;
 (_i64Add(($46|0),0,($44|0),($45|0))|0);
 $50 = tempRet0;
 $51 = (($50) + ($48))|0;
 $52 = ($51>>>0)<($50>>>0);
 $53 = $49 ? 2 : 1;
 $$$1242 = $52 ? $53 : $$1242;
 $54 = HEAP32[$24>>2]|0;
 $55 = HEAP32[$5>>2]|0;
 $56 = (___muldi3(($55|0),0,($54|0),0)|0);
 $57 = tempRet0;
 $58 = (_i64Add(($46|0),($47|0),($44|0),($45|0))|0);
 $59 = tempRet0;
 (_i64Add(($58|0),0,($56|0),($57|0))|0);
 $60 = tempRet0;
 $61 = (($51) + ($60))|0;
 $62 = ($61>>>0)<($60>>>0);
 $63 = $62&1;
 $$3244 = (($63) + ($$$1242))|0;
 $64 = (_i64Add(($58|0),($59|0),($56|0),($57|0))|0);
 $65 = tempRet0;
 $66 = (_i64Add(($64|0),0,($56|0),($57|0))|0);
 $67 = tempRet0;
 $68 = (($61) + ($67))|0;
 $69 = ($68>>>0)<($67>>>0);
 $70 = $69&1;
 $$$3244 = (($$3244) + ($70))|0;
 $71 = ((($0)) + 12|0);
 HEAP32[$71>>2] = $66;
 $72 = HEAP32[$24>>2]|0;
 $73 = (___muldi3(($72|0),0,($72|0),0)|0);
 $74 = tempRet0;
 $75 = (_i64Add(($68|0),0,($73|0),($74|0))|0);
 $76 = tempRet0;
 $77 = (($$$3244) + ($76))|0;
 $78 = ($77>>>0)<($76>>>0);
 $$2 = $78&1;
 $79 = HEAP32[$41>>2]|0;
 $80 = HEAP32[$5>>2]|0;
 $81 = (___muldi3(($80|0),0,($79|0),0)|0);
 $82 = tempRet0;
 (_i64Add(($75|0),0,($81|0),($82|0))|0);
 $83 = tempRet0;
 $84 = (($83) + ($77))|0;
 $85 = ($84>>>0)<($83>>>0);
 $86 = $78 ? 2 : 1;
 $$$2 = $85 ? $86 : $$2;
 $87 = (_i64Add(($75|0),($76|0),($81|0),($82|0))|0);
 $88 = tempRet0;
 $89 = (_i64Add(($87|0),0,($81|0),($82|0))|0);
 $90 = tempRet0;
 $91 = (($84) + ($90))|0;
 $92 = ($91>>>0)<($90>>>0);
 $93 = $92&1;
 $$4 = (($93) + ($$$2))|0;
 $94 = ((($0)) + 16|0);
 HEAP32[$94>>2] = $89;
 $95 = HEAP32[$41>>2]|0;
 $96 = HEAP32[$24>>2]|0;
 $97 = (___muldi3(($96|0),0,($95|0),0)|0);
 $98 = tempRet0;
 $99 = (_i64Add(($91|0),0,($97|0),($98|0))|0);
 $100 = tempRet0;
 $101 = (($$4) + ($100))|0;
 $102 = ($101>>>0)<($100>>>0);
 $$249 = $102&1;
 $103 = (_i64Add(($99|0),0,($97|0),($98|0))|0);
 $104 = tempRet0;
 $105 = (($104) + ($101))|0;
 $106 = ($105>>>0)<($104>>>0);
 $107 = $102 ? 2 : 1;
 $$4240 = $106 ? $107 : $$249;
 $108 = ((($0)) + 20|0);
 HEAP32[$108>>2] = $103;
 $109 = HEAP32[$41>>2]|0;
 $110 = (___muldi3(($109|0),0,($109|0),0)|0);
 $111 = tempRet0;
 $112 = (_i64Add(($105|0),0,($110|0),($111|0))|0);
 $113 = tempRet0;
 $114 = (($113) + ($$4240))|0;
 $115 = ((($0)) + 24|0);
 HEAP32[$115>>2] = $112;
 $116 = ((($0)) + 28|0);
 HEAP32[$116>>2] = $114;
 return;
}
function _BN_BLINDING_new($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_CRYPTO_zalloc(40,83252,0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _ERR_put_error(3,102,65,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_CRYPTO_THREAD_lock_new()|0);
 $6 = ((($3)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _ERR_put_error(3,102,65,0,0);
  _CRYPTO_free($3,83252,0);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_CRYPTO_THREAD_get_current_id()|0);
 $9 = ((($3)) + 16|0);
 HEAP32[$9>>2] = $8;
 $10 = ($0|0)==(0|0);
 if ($10) {
  label = 7;
 } else {
  $11 = (_BN_dup($0)|0);
  HEAP32[$3>>2] = $11;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   label = 7;
  }
 }
 do {
  if ((label|0) == 7) {
   $13 = ($1|0)==(0|0);
   if (!($13)) {
    $14 = (_BN_dup($1)|0);
    $15 = ((($3)) + 4|0);
    HEAP32[$15>>2] = $14;
    $16 = ($14|0)==(0|0);
    if ($16) {
     break;
    }
   }
   $17 = (_BN_dup($2)|0);
   $18 = ((($3)) + 12|0);
   HEAP32[$18>>2] = $17;
   $19 = ($17|0)==(0|0);
   if (!($19)) {
    $20 = (_BN_get_flags($2,4)|0);
    $21 = ($20|0)==(0);
    if (!($21)) {
     $22 = HEAP32[$18>>2]|0;
     _BN_set_flags($22,4);
    }
    $23 = ((($3)) + 20|0);
    HEAP32[$23>>2] = -1;
    $$0 = $3;
    return ($$0|0);
   }
  }
 } while(0);
 $24 = HEAP32[$3>>2]|0;
 _BN_free($24);
 $25 = ((($3)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 _BN_free($26);
 $27 = ((($3)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 _BN_free($28);
 $29 = ((($3)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 _BN_free($30);
 $31 = HEAP32[$6>>2]|0;
 _CRYPTO_THREAD_lock_free($31);
 _CRYPTO_free($3,83252,0);
 $$0 = 0;
 return ($$0|0);
}
function _BN_BLINDING_set_current_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_THREAD_get_current_id()|0);
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _BN_BLINDING_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 _BN_free($2);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _BN_free($4);
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _BN_free($6);
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 _BN_free($8);
 $9 = ((($0)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 _CRYPTO_THREAD_lock_free($10);
 _CRYPTO_free($0,83252,0);
 return;
}
function _BN_BLINDING_update($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   label = 3;
  } else {
   $4 = ((($0)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    label = 3;
   } else {
    $7 = ((($0)) + 20|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(-1);
    if ($9) {
     HEAP32[$7>>2] = 1;
     label = 10;
    } else {
     $10 = (($8) + 1)|0;
     HEAP32[$7>>2] = $10;
     $11 = ($10|0)==(32);
     if ($11) {
      $12 = ((($0)) + 8|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($13|0)==(0|0);
      if ($14) {
       label = 10;
      } else {
       $15 = ((($0)) + 24|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = $16 & 2;
       $18 = ($17|0)==(0);
       if ($18) {
        $19 = (_BN_BLINDING_create_param($0,0,0,$1,0,0)|0);
        $20 = ($19|0)==(0|0);
        if ($20) {
         $$0 = 0;$$pre$phiZ2D = $7;
         break;
        }
       } else {
        label = 10;
       }
      }
     } else {
      label = 10;
     }
    }
    if ((label|0) == 10) {
     $21 = ((($0)) + 24|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = $22 & 1;
     $24 = ($23|0)==(0);
     if ($24) {
      $25 = ((($0)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (_BN_mod_mul($2,$2,$2,$26,$1)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       $$0 = 0;$$pre$phiZ2D = $7;
       break;
      }
      $29 = HEAP32[$4>>2]|0;
      $30 = HEAP32[$25>>2]|0;
      $31 = (_BN_mod_mul($29,$29,$29,$30,$1)|0);
      $32 = ($31|0)==(0);
      if ($32) {
       $$0 = 0;$$pre$phiZ2D = $7;
       break;
      }
     }
    }
    $$0 = 1;$$pre$phiZ2D = $7;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  _ERR_put_error(3,103,107,0,0);
  $$pre = ((($0)) + 20|0);
  $$0 = 0;$$pre$phiZ2D = $$pre;
 }
 $33 = HEAP32[$$pre$phiZ2D>>2]|0;
 $34 = ($33|0)==(32);
 if (!($34)) {
  return ($$0|0);
 }
 HEAP32[$$pre$phiZ2D>>2] = 0;
 return ($$0|0);
}
function _BN_BLINDING_create_param($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$04856 = 0, $$04974 = 0, $$051 = 0, $$not = 0, $$not52 = 0, $$not53 = 0, $$not54 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi79Z2D = 0, $$pre$phi81Z2D = 0, $$pre$phi83Z2D = 0, $$pre78 = 0, $$pre80 = 0, $$pre82 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $brmerge55 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp;
 $7 = ($0|0)==(0|0);
 if ($7) {
  $8 = (_BN_BLINDING_new(0,0,$2)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$051 = 0;
   STACKTOP = sp;return ($$051|0);
  } else {
   $$04856 = $8;
  }
 } else {
  $$04856 = $0;
 }
 $10 = HEAP32[$$04856>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = (_BN_new()|0);
  HEAP32[$$04856>>2] = $12;
  $13 = ($12|0)==(0|0);
  if ($13) {
   label = 25;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 L7: do {
  if ((label|0) == 5) {
   $14 = ((($$04856)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $17 = (_BN_new()|0);
    HEAP32[$14>>2] = $17;
    $18 = ($17|0)==(0|0);
    if ($18) {
     label = 25;
     break;
    }
   }
   $19 = ($1|0)==(0|0);
   $$phi$trans$insert = ((($$04856)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($19) {
    $21 = $$pre;
   } else {
    _BN_free($$pre);
    $20 = (_BN_dup($1)|0);
    HEAP32[$$phi$trans$insert>>2] = $20;
    $21 = $20;
   }
   $22 = ($21|0)==(0|0);
   if ($22) {
    label = 25;
   } else {
    $23 = ($4|0)==(0|0);
    if (!($23)) {
     $24 = ((($$04856)) + 32|0);
     HEAP32[$24>>2] = $4;
    }
    $25 = ($5|0)==(0|0);
    if (!($25)) {
     $26 = ((($$04856)) + 28|0);
     HEAP32[$26>>2] = $5;
    }
    $27 = HEAP32[$$04856>>2]|0;
    $28 = ((($$04856)) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (_BN_rand_range($27,$29)|0);
    $31 = ($30|0)==(0);
    L22: do {
     if (!($31)) {
      $$04974 = 32;
      while(1) {
       $32 = HEAP32[$14>>2]|0;
       $33 = HEAP32[$$04856>>2]|0;
       $34 = HEAP32[$28>>2]|0;
       $35 = (_int_bn_mod_inverse($32,$33,$34,$3,$6)|0);
       $36 = ($35|0)==(0|0);
       if (!($36)) {
        break;
       }
       $37 = HEAP32[$6>>2]|0;
       $38 = ($37|0)==(0);
       if ($38) {
        break L22;
       }
       $39 = ($$04974|0)==(0);
       if ($39) {
        label = 19;
        break;
       }
       $40 = (($$04974) + -1)|0;
       $41 = HEAP32[$$04856>>2]|0;
       $42 = HEAP32[$28>>2]|0;
       $43 = (_BN_rand_range($41,$42)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        break L22;
       } else {
        $$04974 = $40;
       }
      }
      if ((label|0) == 19) {
       _ERR_put_error(3,128,113,0,0);
       break;
      }
      $45 = ((($$04856)) + 32|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(0|0);
      $48 = HEAP32[$$phi$trans$insert>>2]|0;
      $49 = HEAP32[$28>>2]|0;
      $50 = HEAP32[$$04856>>2]|0;
      if (!($47)) {
       $51 = ((($$04856)) + 28|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(0|0);
       if (!($53)) {
        $54 = (FUNCTION_TABLE_iiiiiii[$46 & 31]($50,$50,$48,$49,$3,$52)|0);
        $$not = ($54|0)!=(0);
        $$not52 = $7 ^ 1;
        $brmerge = $$not | $$not52;
        if ($brmerge) {
         $$051 = $$04856;
        } else {
         $$pre$phi79Z2D = $14;$$pre$phi81Z2D = $$phi$trans$insert;$$pre$phi83Z2D = $28;
         break L7;
        }
        STACKTOP = sp;return ($$051|0);
       }
      }
      $55 = (_BN_mod_exp($50,$50,$48,$49,$3)|0);
      $$not53 = ($55|0)!=(0);
      $$not54 = $7 ^ 1;
      $brmerge55 = $$not53 | $$not54;
      if ($brmerge55) {
       $$051 = $$04856;
      } else {
       $$pre$phi79Z2D = $14;$$pre$phi81Z2D = $$phi$trans$insert;$$pre$phi83Z2D = $28;
       break L7;
      }
      STACKTOP = sp;return ($$051|0);
     }
    } while(0);
    label = 25;
   }
  }
 } while(0);
 do {
  if ((label|0) == 25) {
   if ($7) {
    $$pre78 = ((($$04856)) + 4|0);
    $$pre80 = ((($$04856)) + 8|0);
    $$pre82 = ((($$04856)) + 12|0);
    $$pre$phi79Z2D = $$pre78;$$pre$phi81Z2D = $$pre80;$$pre$phi83Z2D = $$pre82;
    break;
   } else {
    $$051 = $$04856;
    STACKTOP = sp;return ($$051|0);
   }
  }
 } while(0);
 $56 = HEAP32[$$04856>>2]|0;
 _BN_free($56);
 $57 = HEAP32[$$pre$phi79Z2D>>2]|0;
 _BN_free($57);
 $58 = HEAP32[$$pre$phi81Z2D>>2]|0;
 _BN_free($58);
 $59 = HEAP32[$$pre$phi83Z2D>>2]|0;
 _BN_free($59);
 $60 = ((($$04856)) + 36|0);
 $61 = HEAP32[$60>>2]|0;
 _CRYPTO_THREAD_lock_free($61);
 _CRYPTO_free($$04856,83252,0);
 $$051 = 0;
 STACKTOP = sp;return ($$051|0);
}
function _BN_BLINDING_convert_ex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($2)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(-1);
   if ($11) {
    HEAP32[$9>>2] = 0;
   } else {
    $12 = (_BN_BLINDING_update($2,$3)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$015 = 0;
     return ($$015|0);
    }
   }
   $14 = ($1|0)==(0|0);
   if ($14) {
    $$0 = 1;
   } else {
    $15 = HEAP32[$6>>2]|0;
    $16 = (_BN_copy($1,$15)|0);
    $not$ = ($16|0)!=(0|0);
    $$ = $not$&1;
    $$0 = $$;
   }
   $17 = HEAP32[$2>>2]|0;
   $18 = ((($2)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_BN_mod_mul($0,$0,$17,$19,$3)|0);
   $21 = ($20|0)==(0);
   $$$0 = $21 ? 0 : $$0;
   $$015 = $$$0;
   return ($$015|0);
  }
 }
 _ERR_put_error(3,100,107,0,0);
 $$015 = 0;
 return ($$015|0);
}
function _BN_BLINDING_invert_ex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$014 = 0, $$sink = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)==(0|0);
 if ($4) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   _ERR_put_error(3,101,107,0,0);
   $$014 = 0;
   return ($$014|0);
  } else {
   $$sink = $6;
  }
 } else {
  $$sink = $1;
 }
 $8 = ((($2)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_BN_mod_mul($0,$0,$$sink,$9,$3)|0);
 $$014 = $10;
 return ($$014|0);
}
function _BN_BLINDING_is_current_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_THREAD_get_current_id()|0);
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_CRYPTO_THREAD_compare_id($1,$3)|0);
 return ($4|0);
}
function _BN_BLINDING_lock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_CRYPTO_THREAD_write_lock($2)|0);
 return ($3|0);
}
function _BN_BLINDING_unlock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_CRYPTO_THREAD_unlock($2)|0);
 return ($3|0);
}
function _BN_CTX_new() {
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(48,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(3,106,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;HEAP32[$0+24>>2]=0|0;HEAP32[$0+28>>2]=0|0;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_CTX_free($0) {
 $0 = $0|0;
 var $$cast$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 _CRYPTO_free($3,83252,0);
 HEAP32[$2>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($0)) + 4|0);
  $8 = $4;
  while(1) {
   $7 = HEAP32[$8>>2]|0;
   $9 = ($7|0)==(0|0);
   if (!($9)) {
    _BN_clear_free($8);
   }
   $10 = ((($8)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    _BN_clear_free($10);
   }
   $13 = ((($8)) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    _BN_clear_free($13);
   }
   $16 = ((($8)) + 60|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    _BN_clear_free($16);
   }
   $19 = ((($8)) + 80|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    _BN_clear_free($19);
   }
   $22 = ((($8)) + 100|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    _BN_clear_free($22);
   }
   $25 = ((($8)) + 120|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if (!($27)) {
    _BN_clear_free($25);
   }
   $28 = ((($8)) + 140|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    _BN_clear_free($28);
   }
   $31 = ((($8)) + 160|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    _BN_clear_free($31);
   }
   $34 = ((($8)) + 180|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if (!($36)) {
    _BN_clear_free($34);
   }
   $37 = ((($8)) + 200|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    _BN_clear_free($37);
   }
   $40 = ((($8)) + 220|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if (!($42)) {
    _BN_clear_free($40);
   }
   $43 = ((($8)) + 240|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if (!($45)) {
    _BN_clear_free($43);
   }
   $46 = ((($8)) + 260|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if (!($48)) {
    _BN_clear_free($46);
   }
   $49 = ((($8)) + 280|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   if (!($51)) {
    _BN_clear_free($49);
   }
   $52 = ((($8)) + 300|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if (!($54)) {
    _BN_clear_free($52);
   }
   $55 = HEAP32[$0>>2]|0;
   $56 = ((($55)) + 324|0);
   $57 = HEAP32[$56>>2]|0;
   HEAP32[$6>>2] = $57;
   _CRYPTO_free($55,83252,0);
   $58 = HEAP32[$6>>2]|0;
   HEAP32[$0>>2] = $58;
   $$cast$i = $58;
   $59 = ($58|0)==(0);
   if ($59) {
    break;
   } else {
    $8 = $$cast$i;
   }
  }
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _BN_CTX_start($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre$i = 0, $$pre$phi26$iZ2D = 0, $$pre23$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = ((($0)) + 40|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = ((($0)) + 20|0);
    $8 = ((($0)) + 32|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($0)) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $15 = ($11|0)==(0);
     $16 = ($11*3)|0;
     $17 = $16 >>> 1;
     $18 = $15 ? 32 : $17;
     $19 = $18 << 2;
     $20 = (_CRYPTO_malloc($19,83252,0)|0);
     $21 = ($20|0)==(0|0);
     if ($21) {
      _ERR_put_error(3,129,109,0,0);
      $$pre = HEAP32[$1>>2]|0;
      $32 = $$pre;
      break;
     }
     $22 = HEAP32[$10>>2]|0;
     $23 = ($22|0)==(0);
     if ($23) {
      $$pre$phi26$iZ2D = $7;
     } else {
      $24 = $22 << 2;
      $25 = HEAP32[$7>>2]|0;
      _memcpy(($20|0),($25|0),($24|0))|0;
      $$pre$phi26$iZ2D = $7;
     }
     $26 = HEAP32[$$pre$phi26$iZ2D>>2]|0;
     _CRYPTO_free($26,83252,0);
     HEAP32[$$pre$phi26$iZ2D>>2] = $20;
     HEAP32[$12>>2] = $18;
     $$pre23$i = HEAP32[$10>>2]|0;
     $28 = $$pre23$i;$30 = $20;
    } else {
     $$pre$i = HEAP32[$7>>2]|0;
     $28 = $11;$30 = $$pre$i;
    }
    $27 = (($28) + 1)|0;
    HEAP32[$10>>2] = $27;
    $29 = (($30) + ($28<<2)|0);
    HEAP32[$29>>2] = $9;
    return;
   } else {
    $32 = 0;
   }
  } else {
   $32 = $2;
  }
 } while(0);
 $31 = (($32) + 1)|0;
 HEAP32[$1>>2] = $31;
 return;
}
function _BN_CTX_end($0) {
 $0 = $0|0;
 var $$0$be$i = 0, $$09$i = 0, $$in$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (($2) + -1)|0;
  HEAP32[$1>>2] = $4;
  return;
 }
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 HEAP32[$7>>2] = $9;
 $10 = (($6) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)>($11>>>0);
 if ($14) {
  $15 = (($13) - ($11))|0;
  $16 = ((($0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) - ($15))|0;
  HEAP32[$16>>2] = $18;
  $19 = ($15|0)==(0);
  if (!($19)) {
   $20 = (($17) + 15)|0;
   $21 = $20 & 15;
   $22 = ((($0)) + 4|0);
   $$09$i = $21;$$in$i = $15;
   while(1) {
    $23 = (($$in$i) + -1)|0;
    $24 = ($$09$i|0)==(0);
    if ($24) {
     $25 = HEAP32[$22>>2]|0;
     $26 = ((($25)) + 320|0);
     $27 = HEAP32[$26>>2]|0;
     HEAP32[$22>>2] = $27;
     $$0$be$i = 15;
    } else {
     $28 = (($$09$i) + -1)|0;
     $$0$be$i = $28;
    }
    $29 = ($23|0)==(0);
    if ($29) {
     break;
    } else {
     $$09$i = $$0$be$i;$$in$i = $23;
    }
   }
  }
 }
 HEAP32[$12>>2] = $11;
 $30 = ((($0)) + 40|0);
 HEAP32[$30>>2] = 0;
 return;
}
function _BN_CTX_get($0) {
 $0 = $0|0;
 var $$0 = 0, $$1$i11 = 0, $$pre$phi$iZ2D = 0, $$pre$phi46$iZ2D = 0, $$pre43$i = 0, $$sink$i = 0, $$sink$in$i = 0, $$sink40$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)==($12|0);
 if ($13) {
  $14 = (_CRYPTO_malloc(328,83252,0)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   label = 18;
  } else {
   $16 = $8 & 8;
   $17 = ($16|0)==(0);
   _bn_init($14);
   if ($17) {
    $33 = ((($14)) + 20|0);
    _bn_init($33);
    $34 = ((($14)) + 40|0);
    _bn_init($34);
    $35 = ((($14)) + 60|0);
    _bn_init($35);
    $36 = ((($14)) + 80|0);
    _bn_init($36);
    $37 = ((($14)) + 100|0);
    _bn_init($37);
    $38 = ((($14)) + 120|0);
    _bn_init($38);
    $39 = ((($14)) + 140|0);
    _bn_init($39);
    $40 = ((($14)) + 160|0);
    _bn_init($40);
    $41 = ((($14)) + 180|0);
    _bn_init($41);
    $42 = ((($14)) + 200|0);
    _bn_init($42);
    $43 = ((($14)) + 220|0);
    _bn_init($43);
    $44 = ((($14)) + 240|0);
    _bn_init($44);
    $45 = ((($14)) + 260|0);
    _bn_init($45);
    $46 = ((($14)) + 280|0);
    _bn_init($46);
    $47 = ((($14)) + 300|0);
    _bn_init($47);
   } else {
    _BN_set_flags($14,8);
    $18 = ((($14)) + 20|0);
    _bn_init($18);
    _BN_set_flags($18,8);
    $19 = ((($14)) + 40|0);
    _bn_init($19);
    _BN_set_flags($19,8);
    $20 = ((($14)) + 60|0);
    _bn_init($20);
    _BN_set_flags($20,8);
    $21 = ((($14)) + 80|0);
    _bn_init($21);
    _BN_set_flags($21,8);
    $22 = ((($14)) + 100|0);
    _bn_init($22);
    _BN_set_flags($22,8);
    $23 = ((($14)) + 120|0);
    _bn_init($23);
    _BN_set_flags($23,8);
    $24 = ((($14)) + 140|0);
    _bn_init($24);
    _BN_set_flags($24,8);
    $25 = ((($14)) + 160|0);
    _bn_init($25);
    _BN_set_flags($25,8);
    $26 = ((($14)) + 180|0);
    _bn_init($26);
    _BN_set_flags($26,8);
    $27 = ((($14)) + 200|0);
    _bn_init($27);
    _BN_set_flags($27,8);
    $28 = ((($14)) + 220|0);
    _bn_init($28);
    _BN_set_flags($28,8);
    $29 = ((($14)) + 240|0);
    _bn_init($29);
    _BN_set_flags($29,8);
    $30 = ((($14)) + 260|0);
    _bn_init($30);
    _BN_set_flags($30,8);
    $31 = ((($14)) + 280|0);
    _bn_init($31);
    _BN_set_flags($31,8);
    $32 = ((($14)) + 300|0);
    _bn_init($32);
    _BN_set_flags($32,8);
   }
   $48 = ((($0)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($14)) + 320|0);
   HEAP32[$50>>2] = $49;
   $51 = ((($14)) + 324|0);
   HEAP32[$51>>2] = 0;
   $52 = HEAP32[$0>>2]|0;
   $53 = ($52|0)==(0|0);
   if ($53) {
    HEAP32[$48>>2] = $14;
    $54 = ((($0)) + 4|0);
    HEAP32[$54>>2] = $14;
    $$sink$i = $0;
   } else {
    $55 = ((($49)) + 324|0);
    HEAP32[$55>>2] = $14;
    HEAP32[$48>>2] = $14;
    $56 = ((($0)) + 4|0);
    $$sink$i = $56;
   }
   HEAP32[$$sink$i>>2] = $14;
   $57 = HEAP32[$11>>2]|0;
   $58 = (($57) + 16)|0;
   HEAP32[$11>>2] = $58;
   $59 = HEAP32[$9>>2]|0;
   $60 = (($59) + 1)|0;
   HEAP32[$9>>2] = $60;
   $$1$i11 = $14;
   label = 19;
  }
 } else {
  $61 = ($10|0)==(0);
  if ($61) {
   $$pre43$i = ((($0)) + 4|0);
   $$pre$phi$iZ2D = $$pre43$i;$$sink$in$i = $0;
   label = 16;
  } else {
   $62 = $10 & 15;
   $63 = ($62|0)==(0);
   $64 = ((($0)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   if ($63) {
    $66 = ((($65)) + 324|0);
    $$pre$phi$iZ2D = $64;$$sink$in$i = $66;
    label = 16;
   } else {
    $$pre$phi46$iZ2D = $62;$70 = $65;
   }
  }
  if ((label|0) == 16) {
   $$sink40$i = HEAP32[$$sink$in$i>>2]|0;
   HEAP32[$$pre$phi$iZ2D>>2] = $$sink40$i;
   $67 = $$sink40$i;
   $$pre$phi46$iZ2D = 0;$70 = $67;
  }
  $68 = (($10) + 1)|0;
  HEAP32[$9>>2] = $68;
  $69 = (($70) + (($$pre$phi46$iZ2D*20)|0)|0);
  $71 = ($69|0)==(0|0);
  if ($71) {
   label = 18;
  } else {
   $$1$i11 = $69;
   label = 19;
  }
 }
 if ((label|0) == 18) {
  HEAP32[$4>>2] = 1;
  _ERR_put_error(3,116,109,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 19) {
  _BN_zero_ex($$1$i11);
  $72 = ((($0)) + 32|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 1)|0;
  HEAP32[$72>>2] = $74;
  $$0 = $$1$i11;
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_div($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0195205 = 0, $$0196213 = 0, $$0197 = 0, $$0198204 = 0, $$0200 = 0, $$0203209 = 0, $$1202$ph = 0, $$1202210 = 0, $$1211 = 0, $$2 = 0, $$3 = 0, $$pr = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($7) + -1)|0;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if (!($13)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $14 = ((($3)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)>(0);
   if ($16) {
    $17 = HEAP32[$3>>2]|0;
    $18 = (($15) + -1)|0;
    $19 = (($17) + ($18<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0);
    if ($21) {
     break;
    }
   }
   $22 = (_BN_get_flags($2,4)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = (_BN_get_flags($3,4)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     $$0200 = 0;
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
   if ((label|0) == 8) {
    $$0200 = 1;
   }
   $26 = (_BN_is_zero($3)|0);
   $27 = ($26|0)==(0);
   if (!($27)) {
    _ERR_put_error(3,107,103,0,0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $28 = ($$0200|0)!=(0);
   if (!($28)) {
    $29 = (_BN_ucmp($2,$3)|0);
    $30 = ($29|0)<(0);
    if ($30) {
     $31 = ($1|0)==(0|0);
     if (!($31)) {
      $32 = (_BN_copy($1,$2)|0);
      $33 = ($32|0)==(0|0);
      if ($33) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $34 = ($0|0)==(0|0);
     if ($34) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
     _BN_zero_ex($0);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
   _BN_CTX_start($4);
   $35 = (_BN_CTX_get($4)|0);
   $36 = (_BN_CTX_get($4)|0);
   $37 = (_BN_CTX_get($4)|0);
   $38 = ($0|0)==(0|0);
   if ($38) {
    $39 = (_BN_CTX_get($4)|0);
    $$0197 = $39;
   } else {
    $$0197 = $0;
   }
   $40 = ($37|0)==(0|0);
   $41 = ($$0197|0)==(0|0);
   $or$cond = $40 | $41;
   $42 = ($35|0)==(0|0);
   $or$cond3 = $42 | $or$cond;
   $43 = ($36|0)==(0|0);
   $or$cond5 = $43 | $or$cond3;
   do {
    if (!($or$cond5)) {
     $44 = (_BN_num_bits($3)|0);
     $45 = (($44|0) % 32)&-1;
     $46 = (32 - ($45))|0;
     $47 = (_BN_lshift($37,$3,$46)|0);
     $48 = ($47|0)==(0);
     if (!($48)) {
      $49 = ((($37)) + 12|0);
      HEAP32[$49>>2] = 0;
      $50 = (($46) + 32)|0;
      $51 = (_BN_lshift($36,$2,$50)|0);
      $52 = ($51|0)==(0);
      if (!($52)) {
       $53 = ((($36)) + 12|0);
       HEAP32[$53>>2] = 0;
       $54 = ((($36)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ((($37)) + 4|0);
       if ($28) {
        $57 = HEAP32[$56>>2]|0;
        $58 = (($57) + 1)|0;
        $59 = ($55|0)>($58|0);
        if ($59) {
         $73 = (($55) + 1)|0;
         $74 = (_bn_wexpand($36,$73)|0);
         $75 = ($74|0)==(0|0);
         if ($75) {
          break;
         }
         $76 = HEAP32[$36>>2]|0;
         $77 = HEAP32[$54>>2]|0;
         $78 = (($76) + ($77<<2)|0);
         HEAP32[$78>>2] = 0;
         $79 = HEAP32[$54>>2]|0;
         $80 = (($79) + 1)|0;
         $$sink = $80;
        } else {
         $60 = (($57) + 2)|0;
         $61 = (_bn_wexpand($36,$60)|0);
         $62 = ($61|0)==(0|0);
         if ($62) {
          break;
         }
         $63 = HEAP32[$54>>2]|0;
         $64 = HEAP32[$56>>2]|0;
         $65 = (($64) + 2)|0;
         $66 = ($63|0)<($65|0);
         if ($66) {
          $67 = HEAP32[$36>>2]|0;
          $$0196213 = $63;
          while(1) {
           $68 = (($67) + ($$0196213<<2)|0);
           HEAP32[$68>>2] = 0;
           $69 = (($$0196213) + 1)|0;
           $70 = HEAP32[$56>>2]|0;
           $71 = (($70) + 2)|0;
           $72 = ($69|0)<($71|0);
           if ($72) {
            $$0196213 = $69;
           } else {
            $$sink = $71;
            break;
           }
          }
         } else {
          $$sink = $65;
         }
        }
        HEAP32[$54>>2] = $$sink;
        $83 = $$sink;
       } else {
        $83 = $55;
       }
       $81 = HEAP32[$56>>2]|0;
       $82 = (($83) - ($81))|0;
       $84 = ((($5)) + 12|0);
       HEAP32[$84>>2] = 0;
       $85 = HEAP32[$36>>2]|0;
       $86 = (($85) + ($82<<2)|0);
       HEAP32[$5>>2] = $86;
       $87 = ((($5)) + 4|0);
       HEAP32[$87>>2] = $81;
       $88 = ((($36)) + 8|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (($89) - ($82))|0;
       $91 = ((($5)) + 8|0);
       HEAP32[$91>>2] = $90;
       $92 = HEAP32[$37>>2]|0;
       $93 = (($81) + -1)|0;
       $94 = (($92) + ($93<<2)|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ($81|0)==(1);
       if ($96) {
        $138 = 0;$139 = 0;
       } else {
        $97 = (($81) + -2)|0;
        $98 = (($92) + ($97<<2)|0);
        $99 = HEAP32[$98>>2]|0;
        $138 = $99;$139 = 0;
       }
       $100 = HEAP32[$36>>2]|0;
       $101 = (($83) + -1)|0;
       $102 = (($100) + ($101<<2)|0);
       $103 = (($82) + 1)|0;
       $104 = (_bn_wexpand($$0197,$103)|0);
       $105 = ($104|0)==(0|0);
       if (!($105)) {
        $106 = ((($2)) + 12|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = ((($3)) + 12|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = $109 ^ $107;
        $111 = ((($$0197)) + 12|0);
        HEAP32[$111>>2] = $110;
        $112 = (($82) - ($$0200))|0;
        $113 = ((($$0197)) + 4|0);
        HEAP32[$113>>2] = $112;
        $114 = HEAP32[$$0197>>2]|0;
        $115 = (($82) + -1)|0;
        $116 = (($114) + ($115<<2)|0);
        $117 = (($81) + 1)|0;
        $118 = (_bn_wexpand($35,$117)|0);
        $119 = ($118|0)==(0|0);
        if (!($119)) {
         do {
          if ($28) {
           label = 39;
          } else {
           $120 = (_BN_ucmp($5,$37)|0);
           $121 = ($120|0)>(-1);
           if ($121) {
            $122 = HEAP32[$5>>2]|0;
            $123 = HEAP32[$37>>2]|0;
            (_bn_sub_words($122,$122,$123,$81)|0);
            HEAP32[$116>>2] = 1;
            label = 39;
            break;
           } else {
            $124 = HEAP32[$113>>2]|0;
            $125 = (($124) + -1)|0;
            HEAP32[$113>>2] = $125;
            $127 = $125;
            break;
           }
          }
         } while(0);
         if ((label|0) == 39) {
          $$pr = HEAP32[$113>>2]|0;
          $127 = $$pr;
         }
         $126 = ((($116)) + 4|0);
         $128 = ($127|0)==(0);
         if ($128) {
          HEAP32[$111>>2] = 0;
          $$1202$ph = $126;
         } else {
          $129 = ((($126)) + -4|0);
          $$1202$ph = $129;
         }
         $130 = ($82|0)>(1);
         if ($130) {
          $$0203209 = $102;$$1202210 = $$1202$ph;$$1211 = 0;
          while(1) {
           $131 = HEAP32[$$0203209>>2]|0;
           $132 = ((($$0203209)) + -4|0);
           $133 = HEAP32[$132>>2]|0;
           $134 = ($131|0)==($95|0);
           L69: do {
            if ($134) {
             $$2 = -1;
            } else {
             $135 = (_bn_div_words($131,$133,$95)|0);
             $136 = Math_imul($135, $95)|0;
             $137 = (($133) - ($136))|0;
             $140 = (___muldi3(($135|0),0,($138|0),($139|0))|0);
             $141 = tempRet0;
             $142 = ((($$0203209)) + -8|0);
             $143 = HEAP32[$142>>2]|0;
             $144 = ($141>>>0)>($137>>>0);
             $145 = ($140>>>0)>($143>>>0);
             $146 = ($141|0)==($137|0);
             $147 = $146 & $145;
             $148 = $144 | $147;
             if ($148) {
              $$0195205 = $137;$$0198204 = $135;$159 = $140;$160 = $141;
             } else {
              $$2 = $135;
              break;
             }
             while(1) {
              $157 = (($$0198204) + -1)|0;
              $151 = (($$0195205) + ($95))|0;
              $158 = ($151>>>0)<($95>>>0);
              $152 = (_i64Subtract(($159|0),($160|0),($138|0),($139|0))|0);
              $149 = tempRet0;
              if ($158) {
               $$2 = $157;
               break L69;
              }
              $150 = ($149>>>0)>($151>>>0);
              $153 = ($152>>>0)>($143>>>0);
              $154 = ($149|0)==($151|0);
              $155 = $154 & $153;
              $156 = $150 | $155;
              if ($156) {
               $$0195205 = $151;$$0198204 = $157;$159 = $152;$160 = $149;
              } else {
               $$2 = $157;
               break;
              }
             }
            }
           } while(0);
           $161 = HEAP32[$35>>2]|0;
           $162 = HEAP32[$37>>2]|0;
           $163 = (_bn_mul_words($161,$162,$81,$$2)|0);
           $164 = HEAP32[$35>>2]|0;
           $165 = (($164) + ($81<<2)|0);
           HEAP32[$165>>2] = $163;
           $166 = HEAP32[$5>>2]|0;
           $167 = ((($166)) + -4|0);
           HEAP32[$5>>2] = $167;
           $168 = HEAP32[$35>>2]|0;
           $169 = (_bn_sub_words($167,$167,$168,$117)|0);
           $170 = ($169|0)==(0);
           do {
            if ($170) {
             $$3 = $$2;
            } else {
             $171 = (($$2) + -1)|0;
             $172 = HEAP32[$5>>2]|0;
             $173 = HEAP32[$37>>2]|0;
             $174 = (_bn_add_words($172,$172,$173,$81)|0);
             $175 = ($174|0)==(0);
             if ($175) {
              $$3 = $171;
              break;
             }
             $176 = HEAP32[$$0203209>>2]|0;
             $177 = (($176) + 1)|0;
             HEAP32[$$0203209>>2] = $177;
             $$3 = $171;
            }
           } while(0);
           $178 = ((($$1202210)) + -4|0);
           HEAP32[$178>>2] = $$3;
           $179 = (($$1211) + 1)|0;
           $180 = ($179|0)<($115|0);
           if ($180) {
            $$0203209 = $132;$$1202210 = $178;$$1211 = $179;
           } else {
            break;
           }
          }
         }
         _bn_correct_top($36);
         $181 = ($1|0)==(0|0);
         do {
          if (!($181)) {
           $182 = HEAP32[$106>>2]|0;
           (_BN_rshift($1,$36,$50)|0);
           $183 = (_BN_is_zero($1)|0);
           $184 = ($183|0)==(0);
           if (!($184)) {
            break;
           }
           $185 = ((($1)) + 12|0);
           HEAP32[$185>>2] = $182;
          }
         } while(0);
         if ($28) {
          _bn_correct_top($$0197);
         }
         _BN_CTX_end($4);
         $$0 = 1;
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
     }
    }
   } while(0);
   _BN_CTX_end($4);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _ERR_put_error(3,107,107,0,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _BN_mod_exp($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_BN_is_odd($3)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $19 = (_BN_mod_exp_recp($0,$1,$2,$3,$4)|0);
  $$0 = $19;
  return ($$0|0);
 }
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(1);
 if ($9) {
  $10 = ((($1)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (_BN_get_flags($2,4)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = HEAP32[$1>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = (_BN_mod_exp_mont_word($0,$16,$2,$3,$4,0)|0);
    $$0 = $17;
    return ($$0|0);
   }
  }
 }
 $18 = (_BN_mod_exp_mont($0,$1,$2,$3,$4,0)|0);
 $$0 = $18;
 return ($$0|0);
}
function _BN_mod_exp_mont_word($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$lcssa = 0, $$0126$lcssa = 0, $$0126173 = 0, $$0132 = 0, $$0133152 = 0, $$0133153 = 0, $$0135$lcssa = 0, $$0135172 = 0, $$0137$lcssa = 0, $$0137171 = 0, $$0146 = 0, $$0147170 = 0, $$0148 = 0, $$0174 = 0, $$1136 = 0, $$1145 = 0, $$1145164 = 0, $$1145165 = 0, $$1149 = 0, $$1149163 = 0;
 var $$2128154 = 0, $$2128155 = 0, $$2139151 = 0, $$2156 = 0, $$2157 = 0, $$5 = 0, $$5131 = 0, $$5142 = 0, $$6160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (_BN_get_flags($2,4)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  _ERR_put_error(3,117,66,0,0);
  $$0132 = 0;
  return ($$0132|0);
 }
 $8 = (_BN_is_odd($3)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  _ERR_put_error(3,117,102,0,0);
  $$0132 = 0;
  return ($$0132|0);
 }
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(1);
 if ($12) {
  $13 = HEAP32[$3>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($1>>>0) % ($14>>>0))&-1;
  $$0146 = $15;
 } else {
  $$0146 = $1;
 }
 $16 = (_BN_num_bits($2)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = (_BN_is_one($3)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = (_BN_set_word($0,1)|0);
   $$0132 = $20;
   return ($$0132|0);
  } else {
   _BN_zero_ex($0);
   $$0132 = 1;
   return ($$0132|0);
  }
 }
 $21 = ($$0146|0)==(0);
 if ($21) {
  _BN_zero_ex($0);
  $$0132 = 1;
  return ($$0132|0);
 }
 _BN_CTX_start($4);
 $22 = (_BN_CTX_get($4)|0);
 $23 = (_BN_CTX_get($4)|0);
 $24 = (_BN_CTX_get($4)|0);
 $25 = ($22|0)==(0|0);
 $26 = ($23|0)==(0|0);
 $or$cond = $25 | $26;
 $27 = ($24|0)==(0|0);
 $or$cond3 = $or$cond | $27;
 L24: do {
  if ($or$cond3) {
   $$1145 = 0;$$1149 = 0;
   label = 44;
  } else {
   $28 = ($5|0)==(0|0);
   if ($28) {
    $29 = (_BN_MONT_CTX_new()|0);
    $30 = ($29|0)==(0|0);
    if ($30) {
     $$1145165 = 0;$$1149163 = 0;
     label = 45;
     break;
    }
    $31 = (_BN_MONT_CTX_set($29,$3,$4)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $$1145165 = 0;$$1149163 = $29;
     label = 45;
     break;
    } else {
     $$0148 = $29;
    }
   } else {
    $$0148 = $5;
   }
   $33 = (($16) + -2)|0;
   $34 = ($33|0)>(-1);
   if ($34) {
    $$0126173 = $23;$$0135172 = $$0146;$$0137171 = 1;$$0147170 = $33;$$0174 = $24;
    while(1) {
     $35 = Math_imul($$0135172, $$0135172)|0;
     $36 = (($35>>>0) / ($$0135172>>>0))&-1;
     $37 = ($36|0)==($$0135172|0);
     $38 = ($$0137171|0)==(0);
     do {
      if ($37) {
       if ($38) {
        $$0133152 = $35;$$2128154 = $$0126173;$$2156 = $$0174;
        label = 25;
       } else {
        $$0133153 = $35;$$2128155 = $$0126173;$$2139151 = $$0137171;$$2157 = $$0174;$79 = 1;
       }
      } else {
       if ($38) {
        $43 = (_BN_mul_word($$0126173,$$0135172)|0);
        $44 = ($43|0)==(0);
        if ($44) {
         $$1145 = 0;$$1149 = $$0148;
         label = 44;
         break L24;
        }
        $45 = (_BN_div(0,$$0174,$$0126173,$3,$4)|0);
        $46 = ($45|0)==(0);
        if ($46) {
         $$1145 = 0;$$1149 = $$0148;
         label = 44;
         break L24;
        } else {
         $$0133152 = 1;$$2128154 = $$0174;$$2156 = $$0126173;
         label = 25;
         break;
        }
       } else {
        $39 = (_BN_set_word($$0126173,$$0135172)|0);
        $40 = ($39|0)==(0);
        if ($40) {
         $$1145 = 0;$$1149 = $$0148;
         label = 44;
         break L24;
        }
        $41 = (_BN_to_montgomery($$0126173,$$0126173,$$0148,$4)|0);
        $42 = ($41|0)==(0);
        if ($42) {
         $$1145 = 0;$$1149 = $$0148;
         label = 44;
         break L24;
        } else {
         $$0133152 = 1;$$2128154 = $$0126173;$$2156 = $$0174;
         label = 25;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 25) {
      label = 0;
      $47 = (_BN_mod_mul_montgomery($$2128154,$$2128154,$$2128154,$$0148,$4)|0);
      $48 = ($47|0)==(0);
      if ($48) {
       $$1145 = 0;$$1149 = $$0148;
       label = 44;
       break L24;
      } else {
       $$0133153 = $$0133152;$$2128155 = $$2128154;$$2139151 = 0;$$2157 = $$2156;$79 = 0;
      }
     }
     $49 = (_BN_is_bit_set($2,$$0147170)|0);
     $50 = ($49|0)==(0);
     do {
      if ($50) {
       $$1136 = $$0133153;$$5 = $$2157;$$5131 = $$2128155;$$5142 = $$2139151;
      } else {
       $51 = Math_imul($$0133153, $$0146)|0;
       $52 = (($51>>>0) / ($$0146>>>0))&-1;
       $53 = ($52|0)==($$0133153|0);
       if ($53) {
        $$1136 = $51;$$5 = $$2157;$$5131 = $$2128155;$$5142 = $$2139151;
       } else {
        if ($79) {
         $54 = (_BN_set_word($$2128155,$$0133153)|0);
         $55 = ($54|0)==(0);
         if ($55) {
          $$1145 = 0;$$1149 = $$0148;
          label = 44;
          break L24;
         }
         $56 = (_BN_to_montgomery($$2128155,$$2128155,$$0148,$4)|0);
         $57 = ($56|0)==(0);
         if ($57) {
          $$1145 = 0;$$1149 = $$0148;
          label = 44;
          break L24;
         } else {
          $$1136 = $$0146;$$5 = $$2157;$$5131 = $$2128155;$$5142 = 0;
          break;
         }
        } else {
         $58 = (_BN_mul_word($$2128155,$$0133153)|0);
         $59 = ($58|0)==(0);
         if ($59) {
          $$1145 = 0;$$1149 = $$0148;
          label = 44;
          break L24;
         }
         $60 = (_BN_div(0,$$2157,$$2128155,$3,$4)|0);
         $61 = ($60|0)==(0);
         if ($61) {
          $$1145 = 0;$$1149 = $$0148;
          label = 44;
          break L24;
         } else {
          $$1136 = $$0146;$$5 = $$2128155;$$5131 = $$2157;$$5142 = $$2139151;
          break;
         }
        }
       }
      }
     } while(0);
     $62 = (($$0147170) + -1)|0;
     $63 = ($$0147170|0)>(0);
     if ($63) {
      $$0126173 = $$5131;$$0135172 = $$1136;$$0137171 = $$5142;$$0147170 = $62;$$0174 = $$5;
     } else {
      $$0$lcssa = $$5;$$0126$lcssa = $$5131;$$0135$lcssa = $$1136;$$0137$lcssa = $$5142;
      break;
     }
    }
   } else {
    $$0$lcssa = $24;$$0126$lcssa = $23;$$0135$lcssa = $$0146;$$0137$lcssa = 1;
   }
   $64 = ($$0135$lcssa|0)==(1);
   $65 = ($$0137$lcssa|0)==(0);
   do {
    if ($64) {
     if ($65) {
      $$6160 = $$0126$lcssa;
      label = 42;
     } else {
      $74 = (_BN_set_word($0,1)|0);
      $75 = ($74|0)==(0);
      if ($75) {
       $$1145 = 0;$$1149 = $$0148;
       label = 44;
       break L24;
      }
     }
    } else {
     if ($65) {
      $70 = (_BN_mul_word($$0126$lcssa,$$0135$lcssa)|0);
      $71 = ($70|0)==(0);
      if ($71) {
       $$1145 = 0;$$1149 = $$0148;
       label = 44;
       break L24;
      }
      $72 = (_BN_div(0,$$0$lcssa,$$0126$lcssa,$3,$4)|0);
      $73 = ($72|0)==(0);
      if ($73) {
       $$1145 = 0;$$1149 = $$0148;
       label = 44;
       break L24;
      } else {
       $$6160 = $$0$lcssa;
       label = 42;
       break;
      }
     } else {
      $66 = (_BN_set_word($$0126$lcssa,$$0135$lcssa)|0);
      $67 = ($66|0)==(0);
      if ($67) {
       $$1145 = 0;$$1149 = $$0148;
       label = 44;
       break L24;
      }
      $68 = (_BN_to_montgomery($$0126$lcssa,$$0126$lcssa,$$0148,$4)|0);
      $69 = ($68|0)==(0);
      if ($69) {
       $$1145 = 0;$$1149 = $$0148;
       label = 44;
       break L24;
      } else {
       $$6160 = $$0126$lcssa;
       label = 42;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 42) {
    $76 = (_BN_from_montgomery($0,$$6160,$$0148,$4)|0);
    $77 = ($76|0)==(0);
    if ($77) {
     $$1145 = 0;$$1149 = $$0148;
     label = 44;
     break;
    }
   }
   $$1145 = 1;$$1149 = $$0148;
   label = 44;
  }
 } while(0);
 if ((label|0) == 44) {
  $78 = ($5|0)==(0|0);
  if ($78) {
   $$1145165 = $$1145;$$1149163 = $$1149;
   label = 45;
  } else {
   $$1145164 = $$1145;
  }
 }
 if ((label|0) == 45) {
  _BN_MONT_CTX_free($$1149163);
  $$1145164 = $$1145165;
 }
 _BN_CTX_end($4);
 $$0132 = $$1145164;
 return ($$0132|0);
}
function _BN_mod_exp_mont($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0152 = 0, $$0153 = 0, $$0154201 = 0, $$0156$ph = 0, $$0156$ph$us = 0, $$0157$$us = 0, $$0157$lcssa$us = 0, $$0157183$us = 0, $$0159$$2$us = 0, $$0159$lcssa$us = 0, $$0159182$us = 0, $$0161$lcssa = 0, $$0161$lcssa$us = 0, $$0161$ph = 0, $$0161$ph$us = 0, $$0161181 = 0, $$0161181$us = 0, $$0161181$us$us = 0;
 var $$0161181$us193 = 0, $$1 = 0, $$1155197 = 0, $$1163 = 0, $$1163167 = 0, $$1163168 = 0, $$1169 = 0, $$2184$us = 0, $$3191$us = 0, $$neg$us = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$not = 0, $or$cond164 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $6 = sp;
 $7 = (_BN_get_flags($2,4)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (_BN_mod_exp_mont_consttime($0,$1,$2,$3,$4,$5)|0);
  $$0153 = $9;
  STACKTOP = sp;return ($$0153|0);
 }
 $10 = (_BN_is_odd($3)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  _ERR_put_error(3,109,102,0,0);
  $$0153 = 0;
  STACKTOP = sp;return ($$0153|0);
 }
 $12 = (_BN_num_bits($2)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = (_BN_is_one($3)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = (_BN_set_word($0,1)|0);
   $$0153 = $16;
   STACKTOP = sp;return ($$0153|0);
  } else {
   _BN_zero_ex($0);
   $$0153 = 1;
   STACKTOP = sp;return ($$0153|0);
  }
 }
 _BN_CTX_start($4);
 $17 = (_BN_CTX_get($4)|0);
 $18 = (_BN_CTX_get($4)|0);
 $19 = (_BN_CTX_get($4)|0);
 HEAP32[$6>>2] = $19;
 $notlhs = ($17|0)==(0|0);
 $notrhs = ($18|0)==(0|0);
 $or$cond$not = $notlhs | $notrhs;
 $20 = ($19|0)==(0|0);
 $or$cond164 = $or$cond$not | $20;
 L17: do {
  if ($or$cond164) {
   $$1 = 0;$$1163 = 0;
   label = 63;
  } else {
   $21 = ($5|0)==(0|0);
   if ($21) {
    $22 = (_BN_MONT_CTX_new()|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     $$1163168 = 0;$$1169 = 0;
     label = 64;
     break;
    }
    $24 = (_BN_MONT_CTX_set($22,$3,$4)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     $$1163168 = 0;$$1169 = $22;
     label = 64;
     break;
    } else {
     $$0 = $22;
    }
   } else {
    $$0 = $5;
   }
   $26 = ((($1)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   if ($28) {
    $29 = (_BN_ucmp($1,$3)|0);
    $30 = ($29|0)>(-1);
    if ($30) {
     label = 15;
    } else {
     $$0152 = $1;
    }
   } else {
    label = 15;
   }
   if ((label|0) == 15) {
    $31 = (_BN_nnmod($19,$1,$3,$4)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $$1 = $$0;$$1163 = 0;
     label = 63;
     break;
    } else {
     $$0152 = $19;
    }
   }
   $33 = (_BN_is_zero($$0152)|0);
   $34 = ($33|0)==(0);
   if (!($34)) {
    _BN_zero_ex($0);
    $$1 = $$0;$$1163 = 1;
    label = 63;
    break;
   }
   $35 = (_BN_to_montgomery($19,$$0152,$$0,$4)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    $$1 = $$0;$$1163 = 0;
    label = 63;
   } else {
    $37 = ($12|0)>(671);
    if ($37) {
     $44 = 6;
     label = 23;
    } else {
     $38 = ($12|0)>(239);
     if ($38) {
      $44 = 5;
      label = 23;
     } else {
      $39 = ($12|0)>(79);
      if ($39) {
       $44 = 4;
       label = 23;
      } else {
       $40 = ($12|0)>(23);
       if ($40) {
        $44 = 3;
        label = 23;
       } else {
        $81 = 1;
       }
      }
     }
    }
    if ((label|0) == 23) {
     $41 = (_BN_mod_mul_montgomery($17,$19,$19,$$0,$4)|0);
     $42 = ($41|0)==(0);
     if ($42) {
      $$1 = $$0;$$1163 = 0;
      label = 63;
      break;
     }
     $43 = (($44) + -1)|0;
     $45 = 1 << $43;
     $46 = ($45|0)>(1);
     if ($46) {
      $$0154201 = 1;
      while(1) {
       $49 = (_BN_CTX_get($4)|0);
       $50 = (($6) + ($$0154201<<2)|0);
       HEAP32[$50>>2] = $49;
       $51 = ($49|0)==(0|0);
       if ($51) {
        $$1 = $$0;$$1163 = 0;
        label = 63;
        break L17;
       }
       $52 = (($$0154201) + -1)|0;
       $53 = (($6) + ($52<<2)|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (_BN_mod_mul_montgomery($49,$54,$17,$$0,$4)|0);
       $56 = ($55|0)==(0);
       $47 = (($$0154201) + 1)|0;
       if ($56) {
        $$1 = $$0;$$1163 = 0;
        label = 63;
        break L17;
       }
       $48 = ($47|0)<($45|0);
       if ($48) {
        $$0154201 = $47;
       } else {
        $81 = $44;
        break;
       }
      }
     } else {
      $81 = $44;
     }
    }
    $57 = (($12) + -1)|0;
    $58 = ((($3)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = HEAP32[$3>>2]|0;
    $61 = (($59) + -1)|0;
    $62 = (($60) + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)<(0);
    if ($64) {
     $65 = (_bn_wexpand($18,$59)|0);
     $66 = ($65|0)==(0|0);
     if ($66) {
      $$1 = $$0;$$1163 = 0;
      label = 63;
      break;
     }
     $67 = HEAP32[$3>>2]|0;
     $68 = HEAP32[$67>>2]|0;
     $69 = (0 - ($68))|0;
     $70 = HEAP32[$18>>2]|0;
     HEAP32[$70>>2] = $69;
     $71 = ($59|0)>(1);
     if ($71) {
      $$1155197 = 1;
      while(1) {
       $72 = (($67) + ($$1155197<<2)|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = $73 ^ -1;
       $75 = (($70) + ($$1155197<<2)|0);
       HEAP32[$75>>2] = $74;
       $76 = (($$1155197) + 1)|0;
       $exitcond = ($76|0)==($59|0);
       if ($exitcond) {
        break;
       } else {
        $$1155197 = $76;
       }
      }
     }
     $77 = ((($18)) + 4|0);
     HEAP32[$77>>2] = $59;
     _bn_correct_top($18);
    } else {
     $78 = (_BN_value_one()|0);
     $79 = (_BN_to_montgomery($18,$78,$$0,$4)|0);
     $80 = ($79|0)==(0);
     if ($80) {
      $$1 = $$0;$$1163 = 0;
      label = 63;
      break;
     }
    }
    $82 = ($81|0)>(1);
    L53: do {
     if ($82) {
      $$0156$ph$us = 1;$$0161$ph$us = $57;
      while(1) {
       $84 = (_BN_is_bit_set($2,$$0161$ph$us)|0);
       $85 = ($84|0)==(0);
       L56: do {
        if ($85) {
         $112 = ($$0156$ph$us|0)==(0);
         if ($112) {
          $$0161181$us$us = $$0161$ph$us;
         } else {
          $$0161181$us193 = $$0161$ph$us;
          while(1) {
           $108 = ($$0161181$us193|0)==(0);
           if ($108) {
            break L53;
           }
           $109 = (($$0161181$us193) + -1)|0;
           $110 = (_BN_is_bit_set($2,$109)|0);
           $111 = ($110|0)==(0);
           if ($111) {
            $$0161181$us193 = $109;
           } else {
            $$0161$lcssa$us = $109;
            break L56;
           }
          }
         }
         while(1) {
          $113 = (_BN_mod_mul_montgomery($18,$18,$18,$$0,$4)|0);
          $114 = ($113|0)==(0);
          if ($114) {
           $$1 = $$0;$$1163 = 0;
           label = 63;
           break L17;
          }
          $115 = ($$0161181$us$us|0)==(0);
          if ($115) {
           break L53;
          }
          $116 = (($$0161181$us$us) + -1)|0;
          $117 = (_BN_is_bit_set($2,$116)|0);
          $118 = ($117|0)==(0);
          if ($118) {
           $$0161181$us$us = $116;
          } else {
           $$0161$lcssa$us = $116;
           break;
          }
         }
        } else {
         $$0161$lcssa$us = $$0161$ph$us;
        }
       } while(0);
       $$0157183$us = 1;$$0159182$us = 0;$$2184$us = 1;
       while(1) {
        $86 = (($$0161$lcssa$us) - ($$2184$us))|0;
        $87 = ($86|0)<(0);
        if ($87) {
         $$0157$lcssa$us = $$0157183$us;$$0159$lcssa$us = $$0159182$us;
         break;
        }
        $88 = (_BN_is_bit_set($2,$86)|0);
        $89 = ($88|0)==(0);
        $90 = (($$2184$us) - ($$0159182$us))|0;
        $91 = $$0157183$us << $90;
        $92 = $91 | 1;
        $$0159$$2$us = $89 ? $$0159182$us : $$2184$us;
        $$0157$$us = $89 ? $$0157183$us : $92;
        $93 = (($$2184$us) + 1)|0;
        $94 = ($93|0)<($81|0);
        if ($94) {
         $$0157183$us = $$0157$$us;$$0159182$us = $$0159$$2$us;$$2184$us = $93;
        } else {
         $$0157$lcssa$us = $$0157$$us;$$0159$lcssa$us = $$0159$$2$us;
         break;
        }
       }
       $95 = ($$0156$ph$us|0)!=(0);
       $96 = ($$0159$lcssa$us|0)<(0);
       $or$cond = $95 | $96;
       if (!($or$cond)) {
        $$3191$us = 0;
        while(1) {
         $99 = (_BN_mod_mul_montgomery($18,$18,$18,$$0,$4)|0);
         $100 = ($99|0)==(0);
         if ($100) {
          $$1 = $$0;$$1163 = 0;
          label = 63;
          break L17;
         }
         $97 = (($$3191$us) + 1)|0;
         $98 = ($$3191$us|0)<($$0159$lcssa$us|0);
         if ($98) {
          $$3191$us = $97;
         } else {
          break;
         }
        }
       }
       $101 = $$0157$lcssa$us >> 1;
       $102 = (($6) + ($101<<2)|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (_BN_mod_mul_montgomery($18,$18,$103,$$0,$4)|0);
       $105 = ($104|0)==(0);
       if ($105) {
        $$1 = $$0;$$1163 = 0;
        label = 63;
        break L17;
       }
       $$neg$us = (($$0161$lcssa$us) + -1)|0;
       $106 = (($$neg$us) - ($$0159$lcssa$us))|0;
       $107 = ($106|0)<(0);
       if ($107) {
        break;
       } else {
        $$0156$ph$us = 0;$$0161$ph$us = $106;
       }
      }
     } else {
      $83 = HEAP32[$6>>2]|0;
      $$0156$ph = 1;$$0161$ph = $57;
      while(1) {
       $119 = (_BN_is_bit_set($2,$$0161$ph)|0);
       $120 = ($119|0)==(0);
       L80: do {
        if ($120) {
         $121 = ($$0156$ph|0)==(0);
         if ($121) {
          $$0161181$us = $$0161$ph;
         } else {
          $$0161181 = $$0161$ph;
          while(1) {
           $128 = ($$0161181|0)==(0);
           if ($128) {
            break L53;
           }
           $129 = (($$0161181) + -1)|0;
           $130 = (_BN_is_bit_set($2,$129)|0);
           $131 = ($130|0)==(0);
           if ($131) {
            $$0161181 = $129;
           } else {
            $$0161$lcssa = $129;
            break L80;
           }
          }
         }
         while(1) {
          $122 = (_BN_mod_mul_montgomery($18,$18,$18,$$0,$4)|0);
          $123 = ($122|0)==(0);
          if ($123) {
           $$1 = $$0;$$1163 = 0;
           label = 63;
           break L17;
          }
          $124 = ($$0161181$us|0)==(0);
          if ($124) {
           break L53;
          }
          $125 = (($$0161181$us) + -1)|0;
          $126 = (_BN_is_bit_set($2,$125)|0);
          $127 = ($126|0)==(0);
          if ($127) {
           $$0161181$us = $125;
          } else {
           $$0161$lcssa = $125;
           break;
          }
         }
        } else {
         $$0161$lcssa = $$0161$ph;
        }
       } while(0);
       $132 = ($$0156$ph|0)==(0);
       if ($132) {
        $133 = (_BN_mod_mul_montgomery($18,$18,$18,$$0,$4)|0);
        $134 = ($133|0)==(0);
        if ($134) {
         $$1 = $$0;$$1163 = 0;
         label = 63;
         break L17;
        }
       }
       $135 = (_BN_mod_mul_montgomery($18,$18,$83,$$0,$4)|0);
       $136 = ($135|0)==(0);
       if ($136) {
        $$1 = $$0;$$1163 = 0;
        label = 63;
        break L17;
       }
       $137 = (($$0161$lcssa) + -1)|0;
       $138 = ($137|0)<(0);
       if ($138) {
        break;
       } else {
        $$0156$ph = 0;$$0161$ph = $137;
       }
      }
     }
    } while(0);
    $139 = (_BN_from_montgomery($0,$18,$$0,$4)|0);
    $not$ = ($139|0)!=(0);
    $$ = $not$&1;
    $$1 = $$0;$$1163 = $$;
    label = 63;
   }
  }
 } while(0);
 if ((label|0) == 63) {
  $140 = ($5|0)==(0|0);
  if ($140) {
   $$1163168 = $$1163;$$1169 = $$1;
   label = 64;
  } else {
   $$1163167 = $$1163;
  }
 }
 if ((label|0) == 64) {
  _BN_MONT_CTX_free($$1169);
  $$1163167 = $$1163168;
 }
 _BN_CTX_end($4);
 $$0153 = $$1163167;
 STACKTOP = sp;return ($$0153|0);
}
function _BN_mod_exp_recp($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0102$ph = 0, $$0102$ph$us = 0, $$0103$$us = 0, $$0103$lcssa$us = 0, $$0103123$us = 0, $$0104136 = 0, $$0106$$1105$us = 0, $$0106$lcssa$us = 0, $$0106121$us = 0, $$0108$lcssa = 0, $$0108$lcssa$us = 0, $$0108$ph = 0, $$0108$ph$us = 0, $$0108120 = 0, $$0108120$us = 0, $$0108120$us$us = 0, $$0108120$us132 = 0, $$1105122$us = 0, $$1110 = 0;
 var $$2130$us = 0, $$neg$us = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond139 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $5 = sp + 56|0;
 $6 = sp;
 $7 = (_BN_get_flags($2,4)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  _ERR_put_error(3,125,66,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (_BN_num_bits($2)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (_BN_is_one($3)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (_BN_set_word($0,1)|0);
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  } else {
   _BN_zero_ex($0);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _BN_CTX_start($4);
 $14 = (_BN_CTX_get($4)|0);
 $15 = (_BN_CTX_get($4)|0);
 HEAP32[$5>>2] = $15;
 $16 = ($14|0)==(0|0);
 $17 = ($15|0)==(0|0);
 $or$cond = $16 | $17;
 L13: do {
  if ($or$cond) {
   $$1110 = 0;
  } else {
   _BN_RECP_CTX_init($6);
   $18 = ((($3)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   if ($20) {
    $26 = (_BN_RECP_CTX_set($6,$3,$4)|0);
    $27 = ($26|0)<(1);
    if ($27) {
     $$1110 = 0;
     break;
    }
   } else {
    $21 = (_BN_copy($14,$3)|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$1110 = 0;
     break;
    }
    $23 = ((($14)) + 12|0);
    HEAP32[$23>>2] = 0;
    $24 = (_BN_RECP_CTX_set($6,$14,$4)|0);
    $25 = ($24|0)<(1);
    if ($25) {
     $$1110 = 0;
     break;
    }
   }
   $28 = (_BN_nnmod($15,$1,$3,$4)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $$1110 = 0;
   } else {
    $30 = (_BN_is_zero($15)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     _BN_zero_ex($0);
     $$1110 = 1;
     break;
    }
    $32 = ($9|0)>(671);
    if ($32) {
     $39 = 6;
     label = 19;
    } else {
     $33 = ($9|0)>(239);
     if ($33) {
      $39 = 5;
      label = 19;
     } else {
      $34 = ($9|0)>(79);
      if ($34) {
       $39 = 4;
       label = 19;
      } else {
       $35 = ($9|0)>(23);
       if ($35) {
        $39 = 3;
        label = 19;
       } else {
        $55 = 1;
       }
      }
     }
    }
    if ((label|0) == 19) {
     $36 = (_BN_mod_mul_reciprocal($14,$15,$15,$6,$4)|0);
     $37 = ($36|0)==(0);
     if ($37) {
      $$1110 = 0;
      break;
     }
     $38 = (($39) + -1)|0;
     $40 = 1 << $38;
     $41 = ($40|0)>(1);
     if ($41) {
      $$0104136 = 1;
      while(1) {
       $44 = (_BN_CTX_get($4)|0);
       $45 = (($5) + ($$0104136<<2)|0);
       HEAP32[$45>>2] = $44;
       $46 = ($44|0)==(0|0);
       if ($46) {
        $$1110 = 0;
        break L13;
       }
       $47 = (($$0104136) + -1)|0;
       $48 = (($5) + ($47<<2)|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (_BN_mod_mul_reciprocal($44,$49,$14,$6,$4)|0);
       $51 = ($50|0)==(0);
       $42 = (($$0104136) + 1)|0;
       if ($51) {
        $$1110 = 0;
        break L13;
       }
       $43 = ($42|0)<($40|0);
       if ($43) {
        $$0104136 = $42;
       } else {
        $55 = $39;
        break;
       }
      }
     } else {
      $55 = $39;
     }
    }
    $52 = (($9) + -1)|0;
    $53 = (_BN_set_word($0,1)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     $$1110 = 0;
    } else {
     $56 = ($55|0)>(1);
     if ($56) {
      $$0102$ph$us = 1;$$0108$ph$us = $52;
     } else {
      $57 = HEAP32[$5>>2]|0;
      $$0102$ph = 1;$$0108$ph = $52;
      while(1) {
       $93 = (_BN_is_bit_set($2,$$0108$ph)|0);
       $94 = ($93|0)==(0);
       L41: do {
        if ($94) {
         $95 = ($$0102$ph|0)==(0);
         if ($95) {
          $$0108120$us = $$0108$ph;
         } else {
          $$0108120 = $$0108$ph;
          while(1) {
           $102 = ($$0108120|0)==(0);
           if ($102) {
            $$1110 = 1;
            break L13;
           }
           $103 = (($$0108120) + -1)|0;
           $104 = (_BN_is_bit_set($2,$103)|0);
           $105 = ($104|0)==(0);
           if ($105) {
            $$0108120 = $103;
           } else {
            $$0108$lcssa = $103;
            break L41;
           }
          }
         }
         while(1) {
          $96 = (_BN_mod_mul_reciprocal($0,$0,$0,$6,$4)|0);
          $97 = ($96|0)==(0);
          if ($97) {
           $$1110 = 0;
           break L13;
          }
          $98 = ($$0108120$us|0)==(0);
          if ($98) {
           $$1110 = 1;
           break L13;
          }
          $99 = (($$0108120$us) + -1)|0;
          $100 = (_BN_is_bit_set($2,$99)|0);
          $101 = ($100|0)==(0);
          if ($101) {
           $$0108120$us = $99;
          } else {
           $$0108$lcssa = $99;
           break;
          }
         }
        } else {
         $$0108$lcssa = $$0108$ph;
        }
       } while(0);
       $106 = ($$0102$ph|0)==(0);
       if ($106) {
        $107 = (_BN_mod_mul_reciprocal($0,$0,$0,$6,$4)|0);
        $108 = ($107|0)==(0);
        if ($108) {
         $$1110 = 0;
         break L13;
        }
       }
       $109 = (_BN_mod_mul_reciprocal($0,$0,$57,$6,$4)|0);
       $110 = ($109|0)==(0);
       if ($110) {
        $$1110 = 0;
        break L13;
       }
       $111 = (($$0108$lcssa) + -1)|0;
       $112 = ($111|0)<(0);
       if ($112) {
        $$1110 = 1;
        break L13;
       } else {
        $$0102$ph = 0;$$0108$ph = $111;
       }
      }
     }
     while(1) {
      $58 = (_BN_is_bit_set($2,$$0108$ph$us)|0);
      $59 = ($58|0)==(0);
      L58: do {
       if ($59) {
        $86 = ($$0102$ph$us|0)==(0);
        if ($86) {
         $$0108120$us$us = $$0108$ph$us;
        } else {
         $$0108120$us132 = $$0108$ph$us;
         while(1) {
          $82 = ($$0108120$us132|0)==(0);
          if ($82) {
           $$1110 = 1;
           break L13;
          }
          $83 = (($$0108120$us132) + -1)|0;
          $84 = (_BN_is_bit_set($2,$83)|0);
          $85 = ($84|0)==(0);
          if ($85) {
           $$0108120$us132 = $83;
          } else {
           $$0108$lcssa$us = $83;
           break L58;
          }
         }
        }
        while(1) {
         $87 = (_BN_mod_mul_reciprocal($0,$0,$0,$6,$4)|0);
         $88 = ($87|0)==(0);
         if ($88) {
          $$1110 = 0;
          break L13;
         }
         $89 = ($$0108120$us$us|0)==(0);
         if ($89) {
          $$1110 = 1;
          break L13;
         }
         $90 = (($$0108120$us$us) + -1)|0;
         $91 = (_BN_is_bit_set($2,$90)|0);
         $92 = ($91|0)==(0);
         if ($92) {
          $$0108120$us$us = $90;
         } else {
          $$0108$lcssa$us = $90;
          break;
         }
        }
       } else {
        $$0108$lcssa$us = $$0108$ph$us;
       }
      } while(0);
      $$0103123$us = 1;$$0106121$us = 0;$$1105122$us = 1;
      while(1) {
       $60 = (($$0108$lcssa$us) - ($$1105122$us))|0;
       $61 = ($60|0)<(0);
       if ($61) {
        $$0103$lcssa$us = $$0103123$us;$$0106$lcssa$us = $$0106121$us;
        break;
       }
       $62 = (_BN_is_bit_set($2,$60)|0);
       $63 = ($62|0)==(0);
       $64 = (($$1105122$us) - ($$0106121$us))|0;
       $65 = $$0103123$us << $64;
       $66 = $65 | 1;
       $$0106$$1105$us = $63 ? $$0106121$us : $$1105122$us;
       $$0103$$us = $63 ? $$0103123$us : $66;
       $67 = (($$1105122$us) + 1)|0;
       $68 = ($67|0)<($55|0);
       if ($68) {
        $$0103123$us = $$0103$$us;$$0106121$us = $$0106$$1105$us;$$1105122$us = $67;
       } else {
        $$0103$lcssa$us = $$0103$$us;$$0106$lcssa$us = $$0106$$1105$us;
        break;
       }
      }
      $69 = ($$0102$ph$us|0)!=(0);
      $70 = ($$0106$lcssa$us|0)<(0);
      $or$cond139 = $69 | $70;
      if (!($or$cond139)) {
       $$2130$us = 0;
       while(1) {
        $73 = (_BN_mod_mul_reciprocal($0,$0,$0,$6,$4)|0);
        $74 = ($73|0)==(0);
        if ($74) {
         $$1110 = 0;
         break L13;
        }
        $71 = (($$2130$us) + 1)|0;
        $72 = ($$2130$us|0)<($$0106$lcssa$us|0);
        if ($72) {
         $$2130$us = $71;
        } else {
         break;
        }
       }
      }
      $75 = $$0103$lcssa$us >> 1;
      $76 = (($5) + ($75<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (_BN_mod_mul_reciprocal($0,$0,$77,$6,$4)|0);
      $79 = ($78|0)==(0);
      if ($79) {
       $$1110 = 0;
       break L13;
      }
      $$neg$us = (($$0108$lcssa$us) + -1)|0;
      $80 = (($$neg$us) - ($$0106$lcssa$us))|0;
      $81 = ($80|0)<(0);
      if ($81) {
       $$1110 = 1;
       break;
      } else {
       $$0102$ph$us = 0;$$0108$ph$us = $80;
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($4);
 _BN_RECP_CTX_free($6);
 $$0 = $$1110;
 STACKTOP = sp;return ($$0|0);
}
function _BN_mod_exp_mont_consttime($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0144 = 0, $$$i = 0, $$$i165 = 0, $$$i170 = 0, $$$i175 = 0, $$0 = 0, $$0143185 = 0, $$0143186 = 0, $$0144 = 0, $$0145 = 0, $$0146 = 0, $$0148205 = 0, $$0151$lcssa = 0, $$0151200 = 0, $$0153$lcssa = 0, $$0153199 = 0, $$0187 = 0, $$0188 = 0, $$0212$i = 0;
 var $$0212$i166 = 0, $$0212$i171 = 0, $$0212$i176 = 0, $$0221$i = 0, $$0221$i167 = 0, $$0221$i172 = 0, $$0221$i177 = 0, $$1147182 = 0, $$1149203 = 0, $$1152197 = 0, $$1154 = 0, $$1157 = 0, $$1157180 = 0, $$1157181 = 0, $$189 = 0, $$2 = 0, $$2150201 = 0, $$2155196 = 0, $$2183 = 0, $$2184 = 0;
 var $$3198 = 0, $$alloca_mul = 0, $$idx$val = 0, $$idx158$val = 0, $$idx159$val = 0, $$idx160$val = 0, $$idx161$val = 0, $$idx162$val = 0, $$idx163$val = 0, $$idx164$val = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $6 = sp + 20|0;
 $7 = sp;
 $8 = (_BN_is_odd($3)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  _ERR_put_error(3,124,102,0,0);
  $$0145 = 0;
  STACKTOP = sp;return ($$0145|0);
 }
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_BN_num_bits($2)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = (_BN_is_one($3)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = (_BN_set_word($0,1)|0);
   $$0145 = $16;
   STACKTOP = sp;return ($$0145|0);
  } else {
   _BN_zero_ex($0);
   $$0145 = 1;
   STACKTOP = sp;return ($$0145|0);
  }
 }
 _BN_CTX_start($4);
 $17 = ($5|0)==(0|0);
 if ($17) {
  $18 = (_BN_MONT_CTX_new()|0);
  $19 = ($18|0)==(0|0);
  if ($19) {
   $$0143186 = 0;$$0188 = 0;$$1147182 = 0;$$1157181 = 0;$$2184 = 0;
   label = 49;
  } else {
   $20 = (_BN_MONT_CTX_set($18,$3,$4)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $$0143186 = 0;$$0188 = 0;$$1147182 = $18;$$1157181 = 0;$$2184 = 0;
    label = 49;
   } else {
    $$0146 = $18;
    label = 10;
   }
  }
 } else {
  $$0146 = $5;
  label = 10;
 }
 if ((label|0) == 10) {
  $22 = ($12|0)>(937);
  if ($22) {
   $28 = 6;
  } else {
   $23 = ($12|0)>(306);
   if ($23) {
    $28 = 5;
   } else {
    $24 = ($12|0)>(89);
    $25 = ($12|0)>(22);
    $26 = $25 ? 3 : 1;
    $$189 = $24 ? 4 : $26;
    $28 = $$189;
   }
  }
  $27 = 1 << $28;
  $29 = $11 << $28;
  $30 = $11 << 1;
  $31 = ($30|0)>($27|0);
  $32 = $31 ? $30 : $27;
  $33 = (($32) + ($29))|0;
  $34 = $33 << 2;
  $35 = ($34|0)<(3072);
  $36 = (($34) + 64)|0;
  if ($35) {
   $$alloca_mul = $36;
   $37 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
   $$0144 = $37;
   label = 16;
  } else {
   $38 = (_CRYPTO_malloc($36,83252,0)|0);
   $39 = ($38|0)==(0|0);
   if ($39) {
    $$0 = 0;$$1157 = 0;$$2 = 0;
   } else {
    $$0144 = $38;
    label = 16;
   }
  }
  L25: do {
   if ((label|0) == 16) {
    $40 = $$0144;
    $41 = $40 & 63;
    $42 = (64 - ($41))|0;
    $43 = (($$0144) + ($42)|0);
    _memset(($43|0),0,($34|0))|0;
    $$$0144 = $35 ? 0 : $$0144;
    $44 = $11 << 2;
    $45 = $44 << $28;
    $46 = (($43) + ($45)|0);
    HEAP32[$6>>2] = $46;
    $47 = (($46) + ($11<<2)|0);
    HEAP32[$7>>2] = $47;
    $48 = ((($7)) + 4|0);
    HEAP32[$48>>2] = 0;
    $49 = ((($6)) + 4|0);
    HEAP32[$49>>2] = 0;
    $50 = ((($7)) + 8|0);
    HEAP32[$50>>2] = $11;
    $51 = ((($6)) + 8|0);
    HEAP32[$51>>2] = $11;
    $52 = ((($7)) + 12|0);
    HEAP32[$52>>2] = 0;
    $53 = ((($6)) + 12|0);
    HEAP32[$53>>2] = 0;
    $54 = ((($7)) + 16|0);
    HEAP32[$54>>2] = 2;
    $55 = ((($6)) + 16|0);
    HEAP32[$55>>2] = 2;
    $56 = HEAP32[$3>>2]|0;
    $57 = (($11) + -1)|0;
    $58 = (($56) + ($57<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)<(0);
    if ($60) {
     $61 = HEAP32[$56>>2]|0;
     $62 = (0 - ($61))|0;
     HEAP32[$46>>2] = $62;
     $63 = ($11|0)>(1);
     if ($63) {
      $$0148205 = 1;
      while(1) {
       $64 = (($56) + ($$0148205<<2)|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $65 ^ -1;
       $67 = (($46) + ($$0148205<<2)|0);
       HEAP32[$67>>2] = $66;
       $68 = (($$0148205) + 1)|0;
       $exitcond = ($68|0)==($11|0);
       if ($exitcond) {
        break;
       } else {
        $$0148205 = $68;
       }
      }
     }
     HEAP32[$49>>2] = $11;
    } else {
     $69 = (_BN_value_one()|0);
     $70 = (_BN_to_montgomery($6,$69,$$0146,$4)|0);
     $71 = ($70|0)==(0);
     if ($71) {
      $$0 = $43;$$1157 = 0;$$2 = $$$0144;
      break;
     }
    }
    $72 = ((($1)) + 12|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0);
    if ($74) {
     $75 = (_BN_ucmp($1,$3)|0);
     $76 = ($75|0)>(-1);
     if ($76) {
      label = 23;
     } else {
      $81 = (_BN_to_montgomery($7,$1,$$0146,$4)|0);
      $82 = ($81|0)==(0);
      if ($82) {
       $$0 = $43;$$1157 = 0;$$2 = $$$0144;
       break;
      }
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     $77 = (_BN_div(0,$7,$1,$3,$4)|0);
     $78 = ($77|0)==(0);
     if ($78) {
      $$0 = $43;$$1157 = 0;$$2 = $$$0144;
      break;
     }
     $79 = (_BN_to_montgomery($7,$7,$$0146,$4)|0);
     $80 = ($79|0)==(0);
     if ($80) {
      $$0 = $43;$$1157 = 0;$$2 = $$$0144;
      break;
     }
    }
    $$idx$val = HEAP32[$6>>2]|0;
    $$idx158$val = HEAP32[$49>>2]|0;
    $83 = ($$idx158$val|0)<($11|0);
    $$$i = $83 ? $$idx158$val : $11;
    $84 = ($$$i|0)>(0);
    if ($84) {
     $$0212$i = 0;$$0221$i = 0;
     while(1) {
      $85 = (($$idx$val) + ($$0212$i<<2)|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (($43) + ($$0221$i<<2)|0);
      HEAP32[$87>>2] = $86;
      $88 = (($$0212$i) + 1)|0;
      $89 = (($$0221$i) + ($27))|0;
      $90 = ($88|0)<($$$i|0);
      if ($90) {
       $$0212$i = $88;$$0221$i = $89;
      } else {
       break;
      }
     }
    }
    $$idx159$val = HEAP32[$7>>2]|0;
    $$idx160$val = HEAP32[$48>>2]|0;
    $91 = ($$idx160$val|0)<($11|0);
    $$$i165 = $91 ? $$idx160$val : $11;
    $92 = ($$$i165|0)>(0);
    if ($92) {
     $$0212$i166 = 0;$$0221$i167 = 1;
     while(1) {
      $93 = (($$idx159$val) + ($$0212$i166<<2)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (($43) + ($$0221$i167<<2)|0);
      HEAP32[$95>>2] = $94;
      $96 = (($$0212$i166) + 1)|0;
      $97 = (($$0221$i167) + ($27))|0;
      $98 = ($96|0)<($$$i165|0);
      if ($98) {
       $$0212$i166 = $96;$$0221$i167 = $97;
      } else {
       break;
      }
     }
    }
    $99 = ($28>>>0)>(1);
    if ($99) {
     $100 = (_BN_mod_mul_montgomery($6,$7,$7,$$0146,$4)|0);
     $101 = ($100|0)==(0);
     if ($101) {
      $$0 = $43;$$1157 = 0;$$2 = $$$0144;
      break;
     }
     $$idx161$val = HEAP32[$6>>2]|0;
     $$idx162$val = HEAP32[$49>>2]|0;
     $102 = ($$idx162$val|0)<($11|0);
     $$$i170 = $102 ? $$idx162$val : $11;
     $103 = ($$$i170|0)>(0);
     if ($103) {
      $$0212$i171 = 0;$$0221$i172 = 2;
      while(1) {
       $104 = (($$idx161$val) + ($$0212$i171<<2)|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($43) + ($$0221$i172<<2)|0);
       HEAP32[$106>>2] = $105;
       $107 = (($$0212$i171) + 1)|0;
       $108 = (($$0221$i172) + ($27))|0;
       $109 = ($107|0)<($$$i170|0);
       if ($109) {
        $$0212$i171 = $107;$$0221$i172 = $108;
       } else {
        break;
       }
      }
     }
     $110 = ($27|0)>(3);
     if ($110) {
      $$1149203 = 3;
      while(1) {
       $111 = (_BN_mod_mul_montgomery($6,$7,$6,$$0146,$4)|0);
       $112 = ($111|0)==(0);
       if ($112) {
        $$0 = $43;$$1157 = 0;$$2 = $$$0144;
        break L25;
       }
       $$idx163$val = HEAP32[$6>>2]|0;
       $$idx164$val = HEAP32[$49>>2]|0;
       $113 = ($$idx164$val|0)<($11|0);
       $$$i175 = $113 ? $$idx164$val : $11;
       $114 = ($$$i175|0)>(0);
       if ($114) {
        $$0212$i176 = 0;$$0221$i177 = $$1149203;
        while(1) {
         $115 = (($$idx163$val) + ($$0212$i176<<2)|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($43) + ($$0221$i177<<2)|0);
         HEAP32[$117>>2] = $116;
         $118 = (($$0212$i176) + 1)|0;
         $119 = (($$0221$i177) + ($27))|0;
         $120 = ($118|0)<($$$i175|0);
         if ($120) {
          $$0212$i176 = $118;$$0221$i177 = $119;
         } else {
          break;
         }
        }
       }
       $121 = (($$1149203) + 1)|0;
       $122 = ($121|0)<($27|0);
       if ($122) {
        $$1149203 = $121;
       } else {
        break;
       }
      }
     }
    }
    $123 = (($12) + -1)|0;
    $124 = (($123|0) % ($28|0))&-1;
    $125 = ($124|0)>(-1);
    if ($125) {
     $$0151200 = 0;$$0153199 = $123;$$2150201 = $124;
     while(1) {
      $126 = $$0151200 << 1;
      $127 = (_BN_is_bit_set($2,$$0153199)|0);
      $128 = (($127) + ($126))|0;
      $129 = (($$2150201) + -1)|0;
      $130 = (($$0153199) + -1)|0;
      $131 = ($$2150201|0)>(0);
      if ($131) {
       $$0151200 = $128;$$0153199 = $130;$$2150201 = $129;
      } else {
       $$0151$lcssa = $128;$$0153$lcssa = $130;
       break;
      }
     }
    } else {
     $$0151$lcssa = 0;$$0153$lcssa = $123;
    }
    $132 = (_MOD_EXP_CTIME_COPY_FROM_PREBUF($6,$11,$43,$$0151$lcssa,$28)|0);
    $133 = ($132|0)==(0);
    if ($133) {
     $$0 = $43;$$1157 = 0;$$2 = $$$0144;
    } else {
     $$1154 = $$0153$lcssa;
     while(1) {
      $134 = ($$1154|0)>(-1);
      if ($134) {
       $$1152197 = 0;$$2155196 = $$1154;$$3198 = 0;
      } else {
       break;
      }
      while(1) {
       $135 = (_BN_mod_mul_montgomery($6,$6,$6,$$0146,$4)|0);
       $136 = ($135|0)==(0);
       if ($136) {
        $$0 = $43;$$1157 = 0;$$2 = $$$0144;
        break L25;
       }
       $137 = $$1152197 << 1;
       $138 = (_BN_is_bit_set($2,$$2155196)|0);
       $139 = (($138) + ($137))|0;
       $140 = (($$3198) + 1)|0;
       $141 = (($$2155196) + -1)|0;
       $142 = ($140|0)<($28|0);
       if ($142) {
        $$1152197 = $139;$$2155196 = $141;$$3198 = $140;
       } else {
        break;
       }
      }
      $143 = (_MOD_EXP_CTIME_COPY_FROM_PREBUF($7,$11,$43,$139,$28)|0);
      $144 = ($143|0)==(0);
      if ($144) {
       $$0 = $43;$$1157 = 0;$$2 = $$$0144;
       break L25;
      }
      $145 = (_BN_mod_mul_montgomery($6,$6,$7,$$0146,$4)|0);
      $146 = ($145|0)==(0);
      if ($146) {
       $$0 = $43;$$1157 = 0;$$2 = $$$0144;
       break L25;
      } else {
       $$1154 = $141;
      }
     }
     $147 = (_BN_from_montgomery($0,$6,$$0146,$4)|0);
     $not$ = ($147|0)!=(0);
     $$ = $not$&1;
     $$0 = $43;$$1157 = $$;$$2 = $$$0144;
    }
   }
  } while(0);
  if ($17) {
   $$0143186 = $34;$$0188 = $$0;$$1147182 = $$0146;$$1157181 = $$1157;$$2184 = $$2;
   label = 49;
  } else {
   $$0143185 = $34;$$0187 = $$0;$$1157180 = $$1157;$$2183 = $$2;
  }
 }
 if ((label|0) == 49) {
  _BN_MONT_CTX_free($$1147182);
  $$0143185 = $$0143186;$$0187 = $$0188;$$1157180 = $$1157181;$$2183 = $$2184;
 }
 $148 = ($$0187|0)==(0|0);
 if (!($148)) {
  _OPENSSL_cleanse($$0187,$$0143185);
  _CRYPTO_free($$2183,83252,0);
 }
 _BN_CTX_end($4);
 $$0145 = $$1157180;
 STACKTOP = sp;return ($$0145|0);
}
function _MOD_EXP_CTIME_COPY_FROM_PREBUF($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$084 = 0, $$08597$us = 0, $$08695$us = 0, $$08896$us = 0, $$09094$us = 0, $$099$us = 0, $$1104 = 0, $$1104$us = 0, $$18798$us = 0, $$189103$us = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $exitcond109 = 0, $exitcond110 = 0, $exitcond111 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = 1 << $4;
 $6 = (_bn_wexpand($0,$1)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$084 = 0;
  return ($$084|0);
 }
 $8 = ($4|0)<(4);
 L4: do {
  if ($8) {
   $9 = ($1|0)>(0);
   if ($9) {
    $$08597$us = 0;$$08896$us = $2;
    while(1) {
     $$08695$us = 0;$$09094$us = 0;
     while(1) {
      $10 = (($$08896$us) + ($$08695$us<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = $$08695$us ^ $3;
      $13 = $12 ^ -2147483648;
      $14 = (($12) + -1)|0;
      $15 = $14 & $13;
      $16 = $15 >> 31;
      $17 = $11 & $16;
      $18 = $17 | $$09094$us;
      $19 = (($$08695$us) + 1)|0;
      $20 = ($19|0)<($5|0);
      if ($20) {
       $$08695$us = $19;$$09094$us = $18;
      } else {
       break;
      }
     }
     $21 = HEAP32[$0>>2]|0;
     $22 = (($21) + ($$08597$us<<2)|0);
     HEAP32[$22>>2] = $18;
     $23 = (($$08597$us) + 1)|0;
     $24 = (($$08896$us) + ($5<<2)|0);
     $exitcond109 = ($23|0)==($1|0);
     if ($exitcond109) {
      break;
     } else {
      $$08597$us = $23;$$08896$us = $24;
     }
    }
   }
  } else {
   $25 = (($4) + -2)|0;
   $26 = 1 << $25;
   $27 = $3 >> $25;
   $28 = (($26) + -1)|0;
   $29 = $28 & $3;
   $30 = $27 ^ -2147483648;
   $31 = (($27) + -1)|0;
   $32 = $31 & $30;
   $33 = $32 >> 31;
   $34 = $27 ^ 1;
   $35 = (($34) + -1)|0;
   $36 = $35 & $30;
   $37 = $36 >> 31;
   $38 = $27 ^ 2;
   $39 = (($38) + -1)|0;
   $40 = $39 & $30;
   $41 = $40 >> 31;
   $42 = $27 ^ 3;
   $43 = (($42) + -1)|0;
   $44 = $43 & $30;
   $45 = $44 >> 31;
   $46 = ($1|0)>(0);
   if ($46) {
    $47 = ($25|0)==(31);
    $48 = $26 << 1;
    $49 = 3 << $25;
    if ($47) {
     $$pre = HEAP32[$0>>2]|0;
     $$1104 = 0;
     while(1) {
      $81 = (($$pre) + ($$1104<<2)|0);
      HEAP32[$81>>2] = 0;
      $82 = (($$1104) + 1)|0;
      $exitcond110 = ($82|0)==($1|0);
      if ($exitcond110) {
       break L4;
      } else {
       $$1104 = $82;
      }
     }
    } else {
     $$1104$us = 0;$$189103$us = $2;
    }
    while(1) {
     $$099$us = 0;$$18798$us = 0;
     while(1) {
      $50 = (($$189103$us) + ($$18798$us<<2)|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = $51 & $33;
      $53 = (($$18798$us) + ($26))|0;
      $54 = (($$189103$us) + ($53<<2)|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = $55 & $37;
      $57 = $56 | $52;
      $58 = (($$18798$us) + ($48))|0;
      $59 = (($$189103$us) + ($58<<2)|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = $60 & $41;
      $62 = $57 | $61;
      $63 = (($$18798$us) + ($49))|0;
      $64 = (($$189103$us) + ($63<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $65 & $45;
      $67 = $62 | $66;
      $68 = $$18798$us ^ $29;
      $69 = $68 ^ -2147483648;
      $70 = (($68) + -1)|0;
      $71 = $70 & $69;
      $72 = $71 >> 31;
      $73 = $67 & $72;
      $74 = $73 | $$099$us;
      $75 = (($$18798$us) + 1)|0;
      $76 = ($75|0)<($26|0);
      if ($76) {
       $$099$us = $74;$$18798$us = $75;
      } else {
       break;
      }
     }
     $77 = HEAP32[$0>>2]|0;
     $78 = (($77) + ($$1104$us<<2)|0);
     HEAP32[$78>>2] = $74;
     $79 = (($$1104$us) + 1)|0;
     $80 = (($$189103$us) + ($5<<2)|0);
     $exitcond111 = ($79|0)==($1|0);
     if ($exitcond111) {
      break;
     } else {
      $$1104$us = $79;$$189103$us = $80;
     }
    }
   }
  }
 } while(0);
 $83 = ((($0)) + 4|0);
 HEAP32[$83>>2] = $1;
 _bn_correct_top($0);
 $$084 = 1;
 return ($$084|0);
}
function _BN_gcd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$ph62$i = 0, $$038$$039$i = 0, $$038$ph61$i = 0, $$039$$038$i = 0, $$039$ph$lcssa55$i = 0, $$039$ph60$i = 0, $$040$i35 = 0, $$056$i = 0, $$32 = 0, $$33 = 0, $$old = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, $or$cond36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($3);
 $4 = (_BN_CTX_get($3)|0);
 $5 = (_BN_CTX_get($3)|0);
 $6 = ($4|0)==(0|0);
 $7 = ($5|0)==(0|0);
 $or$cond = $6 | $7;
 L1: do {
  if ($or$cond) {
   $$0 = 0;
  } else {
   $8 = (_BN_copy($4,$1)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0 = 0;
   } else {
    $10 = (_BN_copy($5,$2)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = 0;
    } else {
     $12 = ((($4)) + 12|0);
     HEAP32[$12>>2] = 0;
     $13 = ((($5)) + 12|0);
     HEAP32[$13>>2] = 0;
     $14 = (_BN_cmp($4,$5)|0);
     $15 = ($14|0)<(0);
     $$ = $15 ? $5 : $4;
     $$32 = $15 ? $4 : $5;
     $16 = (_BN_is_zero($$32)|0);
     $17 = ($16|0)==(0);
     do {
      if ($17) {
       $$0$ph62$i = 0;$$038$ph61$i = $$32;$$039$ph60$i = $$;
       L6: while(1) {
        $$056$i = $$0$ph62$i;
        while(1) {
         $18 = (_BN_is_odd($$039$ph60$i)|0);
         $19 = ($18|0)==(0);
         $20 = (_BN_is_odd($$038$ph61$i)|0);
         $21 = ($20|0)!=(0);
         if (!($19)) {
          label = 7;
          break;
         }
         $32 = (_BN_rshift1($$039$ph60$i,$$039$ph60$i)|0);
         $33 = ($32|0)!=(0);
         if ($21) {
          label = 13;
          break;
         }
         if (!($33)) {
          $$0 = 0;
          break L1;
         }
         $34 = (_BN_rshift1($$038$ph61$i,$$038$ph61$i)|0);
         $35 = ($34|0)==(0);
         if ($35) {
          $$0 = 0;
          break L1;
         }
         $36 = (($$056$i) + 1)|0;
         $37 = (_BN_is_zero($$038$ph61$i)|0);
         $38 = ($37|0)==(0);
         if ($38) {
          $$056$i = $36;
         } else {
          $$0$lcssa$i = $36;$$039$ph$lcssa55$i = $$039$ph60$i;
          break L6;
         }
        }
        do {
         if ((label|0) == 7) {
          label = 0;
          if (!($21)) {
           $30 = (_BN_rshift1($$038$ph61$i,$$038$ph61$i)|0);
           $31 = ($30|0)==(0);
           if ($31) {
            $$0 = 0;
            break L1;
           } else {
            break;
           }
          }
          $22 = (_BN_sub($$039$ph60$i,$$039$ph60$i,$$038$ph61$i)|0);
          $23 = ($22|0)==(0);
          if ($23) {
           $$0 = 0;
           break L1;
          }
          $24 = (_BN_rshift1($$039$ph60$i,$$039$ph60$i)|0);
          $25 = ($24|0)==(0);
          if ($25) {
           $$0 = 0;
           break L1;
          }
         }
         else if ((label|0) == 13) {
          label = 0;
          if (!($33)) {
           $$0 = 0;
           break L1;
          }
         }
        } while(0);
        $26 = (_BN_cmp($$039$ph60$i,$$038$ph61$i)|0);
        $27 = ($26|0)<(0);
        $$038$$039$i = $27 ? $$038$ph61$i : $$039$ph60$i;
        $$039$$038$i = $27 ? $$039$ph60$i : $$038$ph61$i;
        $28 = (_BN_is_zero($$039$$038$i)|0);
        $29 = ($28|0)==(0);
        if ($29) {
         $$0$ph62$i = $$056$i;$$038$ph61$i = $$039$$038$i;$$039$ph60$i = $$038$$039$i;
        } else {
         $$0$lcssa$i = $$056$i;$$039$ph$lcssa55$i = $$038$$039$i;
         break;
        }
       }
       $39 = ($$0$lcssa$i|0)==(0);
       if ($39) {
        $$old = ($$039$ph$lcssa55$i|0)==(0|0);
        if ($$old) {
         $$0 = 0;
         break L1;
        } else {
         $$040$i35 = $$039$ph$lcssa55$i;
         break;
        }
       } else {
        $40 = (_BN_lshift($$039$ph$lcssa55$i,$$039$ph$lcssa55$i,$$0$lcssa$i)|0);
        $41 = ($40|0)==(0);
        $42 = ($$039$ph$lcssa55$i|0)==(0|0);
        $or$cond36 = $42 | $41;
        if ($or$cond36) {
         $$0 = 0;
         break L1;
        } else {
         $$040$i35 = $$039$ph$lcssa55$i;
         break;
        }
       }
      } else {
       $$040$i35 = $$;
      }
     } while(0);
     $43 = (_BN_copy($0,$$040$i35)|0);
     $not$ = ($43|0)!=(0|0);
     $$33 = $not$&1;
     $$0 = $$33;
    }
   }
  }
 } while(0);
 _BN_CTX_end($3);
 return ($$0|0);
}
function _BN_mod_inverse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = (_int_bn_mod_inverse($0,$1,$2,$3,$4)|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return ($5|0);
 }
 _ERR_put_error(3,110,108,0,0);
 STACKTOP = sp;return ($5|0);
}
function _int_bn_mod_inverse($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0101$i = 0, $$0101$i$phi = 0, $$0103$i = 0, $$0103$i$phi = 0, $$0105$i = 0, $$0105$i$phi = 0, $$0185 = 0, $$0188241 = 0, $$0190 = 0, $$0191207 = 0, $$0193240 = 0, $$0193240$phi = 0, $$0196239 = 0, $$0196239$phi = 0, $$0198238 = 0, $$0198238$phi = 0, $$0200237 = 0, $$0200237$phi = 0, $$0203236 = 0;
 var $$0203236$phi = 0, $$092$i = 0, $$094$i = 0, $$095108$i = 0, $$097$i = 0, $$097$i$phi = 0, $$099$i = 0, $$099$i$phi = 0, $$1 = 0, $$1192 = 0, $$196$i = 0, $$2195220 = 0, $$2195221 = 0, $$2202218 = 0, $$2202219 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$$i = 0, $or$cond = 0, $or$cond$i = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $5 = sp + 20|0;
 $6 = sp;
 $7 = ($4|0)!=(0|0);
 if ($7) {
  HEAP32[$4>>2] = 0;
 }
 $8 = (_BN_get_flags($1,4)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = (_BN_get_flags($2,4)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   _BN_CTX_start($3);
   $59 = (_BN_CTX_get($3)|0);
   $60 = (_BN_CTX_get($3)|0);
   $61 = (_BN_CTX_get($3)|0);
   $62 = (_BN_CTX_get($3)|0);
   $63 = (_BN_CTX_get($3)|0);
   $64 = (_BN_CTX_get($3)|0);
   $65 = (_BN_CTX_get($3)|0);
   $66 = ($65|0)==(0|0);
   L7: do {
    if ($66) {
     $$0190 = 0;$$1192 = 0;
    } else {
     $67 = ($0|0)==(0|0);
     if ($67) {
      $68 = (_BN_new()|0);
      $69 = ($68|0)==(0|0);
      if ($69) {
       $$0190 = 0;$$1192 = 0;
       break;
      } else {
       $$0191207 = $68;
      }
     } else {
      $$0191207 = $0;
     }
     (_BN_set_word($61,1)|0);
     _BN_zero_ex($64);
     $70 = (_BN_copy($60,$1)|0);
     $71 = ($70|0)==(0|0);
     if ($71) {
      $$0190 = 0;$$1192 = $$0191207;
     } else {
      $72 = (_BN_copy($59,$2)|0);
      $73 = ($72|0)==(0|0);
      if ($73) {
       $$0190 = 0;$$1192 = $$0191207;
      } else {
       $74 = ((($59)) + 12|0);
       HEAP32[$74>>2] = 0;
       $75 = ((($60)) + 12|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)==(0);
       if ($77) {
        $78 = (_BN_ucmp($60,$59)|0);
        $79 = ($78|0)>(-1);
        if ($79) {
         label = 37;
        }
       } else {
        label = 37;
       }
       if ((label|0) == 37) {
        $80 = (_BN_nnmod($60,$60,$59,$3)|0);
        $81 = ($80|0)==(0);
        if ($81) {
         $$0190 = 0;$$1192 = $$0191207;
         break;
        }
       }
       $82 = (_BN_is_odd($2)|0);
       $83 = ($82|0)==(0);
       if ($83) {
        label = 39;
       } else {
        $87 = (_BN_num_bits($2)|0);
        $88 = ($87|0)<(2049);
        if ($88) {
         $89 = (_BN_is_zero($60)|0);
         $90 = ($89|0)==(0);
         if ($90) {
          while(1) {
           $$0185 = 0;
           while(1) {
            $91 = (_BN_is_bit_set($60,$$0185)|0);
            $92 = ($91|0)==(0);
            if (!($92)) {
             break;
            }
            $93 = (($$0185) + 1)|0;
            $94 = (_BN_is_odd($61)|0);
            $95 = ($94|0)==(0);
            if (!($95)) {
             $96 = (_BN_uadd($61,$61,$2)|0);
             $97 = ($96|0)==(0);
             if ($97) {
              $$0190 = 0;$$1192 = $$0191207;
              break L7;
             }
            }
            $98 = (_BN_rshift1($61,$61)|0);
            $99 = ($98|0)==(0);
            if ($99) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            } else {
             $$0185 = $93;
            }
           }
           $100 = ($$0185|0)>(0);
           if ($100) {
            $101 = (_BN_rshift($60,$60,$$0185)|0);
            $102 = ($101|0)==(0);
            if ($102) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            } else {
             $$1 = 0;
            }
           } else {
            $$1 = 0;
           }
           while(1) {
            $103 = (_BN_is_bit_set($59,$$1)|0);
            $104 = ($103|0)==(0);
            if (!($104)) {
             break;
            }
            $105 = (($$1) + 1)|0;
            $106 = (_BN_is_odd($64)|0);
            $107 = ($106|0)==(0);
            if (!($107)) {
             $108 = (_BN_uadd($64,$64,$2)|0);
             $109 = ($108|0)==(0);
             if ($109) {
              $$0190 = 0;$$1192 = $$0191207;
              break L7;
             }
            }
            $110 = (_BN_rshift1($64,$64)|0);
            $111 = ($110|0)==(0);
            if ($111) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            } else {
             $$1 = $105;
            }
           }
           $112 = ($$1|0)>(0);
           if ($112) {
            $113 = (_BN_rshift($59,$59,$$1)|0);
            $114 = ($113|0)==(0);
            if ($114) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
           }
           $115 = (_BN_ucmp($60,$59)|0);
           $116 = ($115|0)>(-1);
           if ($116) {
            $117 = (_BN_uadd($61,$61,$64)|0);
            $118 = ($117|0)==(0);
            if ($118) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
            $119 = (_BN_usub($60,$60,$59)|0);
            $120 = ($119|0)==(0);
            if ($120) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
           } else {
            $121 = (_BN_uadd($64,$64,$61)|0);
            $122 = ($121|0)==(0);
            if ($122) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
            $123 = (_BN_usub($59,$59,$60)|0);
            $124 = ($123|0)==(0);
            if ($124) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
           }
           $125 = (_BN_is_zero($60)|0);
           $126 = ($125|0)==(0);
           if (!($126)) {
            $$2195221 = $59;$$2202218 = $64;
            label = 90;
            break;
           }
          }
         } else {
          $$2195221 = $59;$$2202218 = $64;
          label = 90;
         }
        } else {
         label = 39;
        }
       }
       if ((label|0) == 39) {
        $84 = (_BN_is_zero($60)|0);
        $85 = ($84|0)==(0);
        if ($85) {
         $86 = ((($62)) + 4|0);
         $$0188241 = -1;$$0193240 = $59;$$0196239 = $60;$$0198238 = $63;$$0200237 = $64;$$0203236 = $61;
         while(1) {
          $127 = (_BN_num_bits($$0193240)|0);
          $128 = (_BN_num_bits($$0196239)|0);
          $129 = ($127|0)==($128|0);
          do {
           if ($129) {
            $130 = (_BN_set_word($62,1)|0);
            $131 = ($130|0)==(0);
            if ($131) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
            $132 = (_BN_sub($$0198238,$$0193240,$$0196239)|0);
            $133 = ($132|0)==(0);
            if ($133) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
           } else {
            $134 = (_BN_num_bits($$0193240)|0);
            $135 = (_BN_num_bits($$0196239)|0);
            $136 = (($135) + 1)|0;
            $137 = ($134|0)==($136|0);
            if (!($137)) {
             $158 = (_BN_div($62,$$0198238,$$0193240,$$0196239,$3)|0);
             $159 = ($158|0)==(0);
             if ($159) {
              $$0190 = 0;$$1192 = $$0191207;
              break L7;
             } else {
              break;
             }
            }
            $138 = (_BN_lshift1($65,$$0196239)|0);
            $139 = ($138|0)==(0);
            if ($139) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
            $140 = (_BN_ucmp($$0193240,$65)|0);
            $141 = ($140|0)<(0);
            if ($141) {
             $142 = (_BN_set_word($62,1)|0);
             $143 = ($142|0)==(0);
             if ($143) {
              $$0190 = 0;$$1192 = $$0191207;
              break L7;
             }
             $144 = (_BN_sub($$0198238,$$0193240,$$0196239)|0);
             $145 = ($144|0)==(0);
             if ($145) {
              $$0190 = 0;$$1192 = $$0191207;
              break L7;
             } else {
              break;
             }
            }
            $146 = (_BN_sub($$0198238,$$0193240,$65)|0);
            $147 = ($146|0)==(0);
            if ($147) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
            $148 = (_BN_add($62,$65,$$0196239)|0);
            $149 = ($148|0)==(0);
            if ($149) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
            $150 = (_BN_ucmp($$0193240,$62)|0);
            $151 = ($150|0)<(0);
            if ($151) {
             $152 = (_BN_set_word($62,2)|0);
             $153 = ($152|0)==(0);
             if ($153) {
              $$0190 = 0;$$1192 = $$0191207;
              break L7;
             } else {
              break;
             }
            }
            $154 = (_BN_set_word($62,3)|0);
            $155 = ($154|0)==(0);
            if ($155) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
            $156 = (_BN_sub($$0198238,$$0198238,$$0196239)|0);
            $157 = ($156|0)==(0);
            if ($157) {
             $$0190 = 0;$$1192 = $$0191207;
             break L7;
            }
           }
          } while(0);
          $160 = (_BN_is_one($62)|0);
          $161 = ($160|0)==(0);
          if ($161) {
           $164 = (_BN_is_word($62,2)|0);
           $165 = ($164|0)==(0);
           do {
            if ($165) {
             $168 = (_BN_is_word($62,4)|0);
             $169 = ($168|0)==(0);
             if (!($169)) {
              $170 = (_BN_lshift($$0193240,$$0203236,2)|0);
              $171 = ($170|0)==(0);
              if ($171) {
               $$0190 = 0;$$1192 = $$0191207;
               break L7;
              } else {
               break;
              }
             }
             $172 = HEAP32[$86>>2]|0;
             $173 = ($172|0)==(1);
             if (!($173)) {
              $180 = (_BN_mul($$0193240,$62,$$0203236,$3)|0);
              $181 = ($180|0)==(0);
              if ($181) {
               $$0190 = 0;$$1192 = $$0191207;
               break L7;
              } else {
               break;
              }
             }
             $174 = (_BN_copy($$0193240,$$0203236)|0);
             $175 = ($174|0)==(0|0);
             if ($175) {
              $$0190 = 0;$$1192 = $$0191207;
              break L7;
             }
             $176 = HEAP32[$62>>2]|0;
             $177 = HEAP32[$176>>2]|0;
             $178 = (_BN_mul_word($$0193240,$177)|0);
             $179 = ($178|0)==(0);
             if ($179) {
              $$0190 = 0;$$1192 = $$0191207;
              break L7;
             }
            } else {
             $166 = (_BN_lshift1($$0193240,$$0203236)|0);
             $167 = ($166|0)==(0);
             if ($167) {
              $$0190 = 0;$$1192 = $$0191207;
              break L7;
             }
            }
           } while(0);
           $182 = (_BN_add($$0193240,$$0193240,$$0200237)|0);
           $183 = ($182|0)==(0);
           if ($183) {
            $$0190 = 0;$$1192 = $$0191207;
            break L7;
           }
          } else {
           $162 = (_BN_add($$0193240,$$0203236,$$0200237)|0);
           $163 = ($162|0)==(0);
           if ($163) {
            $$0190 = 0;$$1192 = $$0191207;
            break L7;
           }
          }
          $184 = (0 - ($$0188241))|0;
          $185 = (_BN_is_zero($$0198238)|0);
          $186 = ($185|0)==(0);
          if ($186) {
           $$0203236$phi = $$0193240;$$0200237$phi = $$0203236;$$0198238$phi = $$0200237;$$0196239$phi = $$0198238;$$0193240$phi = $$0196239;$$0188241 = $184;$$0203236 = $$0203236$phi;$$0200237 = $$0200237$phi;$$0198238 = $$0198238$phi;$$0196239 = $$0196239$phi;$$0193240 = $$0193240$phi;
          } else {
           break;
          }
         }
         $phitmp = ($$0188241|0)>(0);
         if ($phitmp) {
          $$2195221 = $$0196239;$$2202218 = $$0203236;
          label = 90;
         } else {
          $$2195220 = $$0196239;$$2202219 = $$0203236;
         }
        } else {
         $$2195221 = $59;$$2202218 = $64;
         label = 90;
        }
       }
       if ((label|0) == 90) {
        $187 = (_BN_sub($$2202218,$2,$$2202218)|0);
        $188 = ($187|0)==(0);
        if ($188) {
         $$0190 = 0;$$1192 = $$0191207;
         break;
        } else {
         $$2195220 = $$2195221;$$2202219 = $$2202218;
        }
       }
       $189 = (_BN_is_one($$2195220)|0);
       $190 = ($189|0)==(0);
       if ($190) {
        if (!($7)) {
         $$0190 = 0;$$1192 = $$0191207;
         break;
        }
        HEAP32[$4>>2] = 1;
        $$0190 = 0;$$1192 = $$0191207;
        break;
       }
       $191 = ((($$2202219)) + 12|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = ($192|0)==(0);
       if ($193) {
        $194 = (_BN_ucmp($$2202219,$2)|0);
        $195 = ($194|0)<(0);
        if ($195) {
         $196 = (_BN_copy($$0191207,$$2202219)|0);
         $197 = ($196|0)==(0|0);
         if ($197) {
          $$0190 = 0;$$1192 = $$0191207;
          break;
         }
        } else {
         label = 95;
        }
       } else {
        label = 95;
       }
       if ((label|0) == 95) {
        $198 = (_BN_nnmod($$0191207,$$2202219,$2,$3)|0);
        $199 = ($198|0)==(0);
        if ($199) {
         $$0190 = 0;$$1192 = $$0191207;
         break;
        }
       }
       $$0190 = $$0191207;$$1192 = $$0191207;
      }
     }
    }
   } while(0);
   $200 = ($$0190|0)==(0|0);
   $201 = ($0|0)==(0|0);
   $or$cond = $201 & $200;
   if ($or$cond) {
    _BN_free($$1192);
   }
   _BN_CTX_end($3);
   $$0 = $$0190;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _BN_CTX_start($3);
 $12 = (_BN_CTX_get($3)|0);
 $13 = (_BN_CTX_get($3)|0);
 $14 = (_BN_CTX_get($3)|0);
 $15 = (_BN_CTX_get($3)|0);
 $16 = (_BN_CTX_get($3)|0);
 $17 = (_BN_CTX_get($3)|0);
 $18 = (_BN_CTX_get($3)|0);
 $19 = ($18|0)==(0|0);
 L108: do {
  if ($19) {
   $$094$i = 0;$$196$i = 0;
  } else {
   $20 = ($0|0)==(0|0);
   if ($20) {
    $21 = (_BN_new()|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$094$i = 0;$$196$i = 0;
     break;
    } else {
     $$095108$i = $21;
    }
   } else {
    $$095108$i = $0;
   }
   (_BN_set_word($14,1)|0);
   _BN_zero_ex($17);
   $23 = (_BN_copy($13,$1)|0);
   $24 = ($23|0)==(0|0);
   if ($24) {
    $$094$i = 0;$$196$i = $$095108$i;
   } else {
    $25 = (_BN_copy($12,$2)|0);
    $26 = ($25|0)==(0|0);
    if ($26) {
     $$094$i = 0;$$196$i = $$095108$i;
    } else {
     $27 = ((($12)) + 12|0);
     HEAP32[$27>>2] = 0;
     $28 = ((($13)) + 12|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0);
     if ($30) {
      $31 = (_BN_ucmp($13,$12)|0);
      $32 = ($31|0)>(-1);
      if ($32) {
       label = 12;
      }
     } else {
      label = 12;
     }
     if ((label|0) == 12) {
      _bn_init($5);
      _BN_with_flags($5,$13,4);
      $33 = (_BN_nnmod($13,$5,$12,$3)|0);
      $34 = ($33|0)==(0);
      if ($34) {
       $$094$i = 0;$$196$i = $$095108$i;
       break;
      }
     }
     $$0101$i = $16;$$0103$i = $17;$$0105$i = $14;$$092$i = -1;$$097$i = $12;$$099$i = $13;
     while(1) {
      $35 = (_BN_is_zero($$099$i)|0);
      $36 = ($35|0)==(0);
      if (!($36)) {
       break;
      }
      _bn_init($6);
      _BN_with_flags($6,$$097$i,4);
      $37 = (_BN_div($15,$$0101$i,$6,$$099$i,$3)|0);
      $not$$i = ($37|0)==(0);
      if ($not$$i) {
       $$094$i = 0;$$196$i = $$095108$i;
       break L108;
      }
      $38 = (_BN_mul($$097$i,$15,$$0105$i,$3)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       $$094$i = 0;$$196$i = $$095108$i;
       break L108;
      }
      $40 = (_BN_add($$097$i,$$097$i,$$0103$i)|0);
      $41 = ($40|0)==(0);
      $42 = (0 - ($$092$i))|0;
      if ($41) {
       $$094$i = 0;$$196$i = $$095108$i;
       break L108;
      } else {
       $$099$i$phi = $$0101$i;$$097$i$phi = $$099$i;$$0105$i$phi = $$097$i;$$0103$i$phi = $$0105$i;$$0101$i$phi = $$0103$i;$$092$i = $42;$$099$i = $$099$i$phi;$$097$i = $$097$i$phi;$$0105$i = $$0105$i$phi;$$0103$i = $$0103$i$phi;$$0101$i = $$0101$i$phi;
      }
     }
     $43 = ($$092$i|0)<(0);
     if ($43) {
      $44 = (_BN_sub($$0103$i,$2,$$0103$i)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       $$094$i = 0;$$196$i = $$095108$i;
       break;
      }
     }
     $46 = (_BN_is_one($$097$i)|0);
     $47 = ($46|0)==(0);
     if ($47) {
      _ERR_put_error(3,139,108,0,0);
      $$094$i = 0;$$196$i = $$095108$i;
      break;
     }
     $48 = ((($$0103$i)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(0);
     if ($50) {
      $51 = (_BN_ucmp($$0103$i,$2)|0);
      $52 = ($51|0)<(0);
      if ($52) {
       $53 = (_BN_copy($$095108$i,$$0103$i)|0);
       $54 = ($53|0)==(0|0);
       if ($54) {
        $$094$i = 0;$$196$i = $$095108$i;
        break;
       }
      } else {
       label = 24;
      }
     } else {
      label = 24;
     }
     if ((label|0) == 24) {
      $55 = (_BN_nnmod($$095108$i,$$0103$i,$2,$3)|0);
      $56 = ($55|0)==(0);
      if ($56) {
       $$094$i = 0;$$196$i = $$095108$i;
       break;
      }
     }
     $$094$i = $$095108$i;$$196$i = $$095108$i;
    }
   }
  }
 } while(0);
 $57 = ($$094$i|0)==(0|0);
 $58 = ($0|0)==(0|0);
 $or$cond$i = $58 & $57;
 if ($or$cond$i) {
  _BN_free($$196$i);
 }
 _BN_CTX_end($3);
 $$0 = $$094$i;
 STACKTOP = sp;return ($$0|0);
}
function _bn_get_dmax($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _bn_get_words($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _BN_value_one() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1672|0);
}
function _BN_num_bits_word($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(65535);
 if ($1) {
  $2 = ($0>>>0)>(16777215);
  if ($2) {
   $3 = $0 >>> 24;
   $4 = (47784 + ($3)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5&255;
   $7 = (($6) + 24)|0;
   $$0 = $7;
   return ($$0|0);
  } else {
   $8 = $0 >>> 16;
   $9 = (47784 + ($8)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = (($11) + 16)|0;
   $$0 = $12;
   return ($$0|0);
  }
 } else {
  $13 = $0 & 65280;
  $14 = ($13|0)==(0);
  if ($14) {
   $20 = (47784 + ($0)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $$0 = $22;
   return ($$0|0);
  } else {
   $15 = $0 >>> 8;
   $16 = (47784 + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = (($18) + 8)|0;
   $$0 = $19;
   return ($$0|0);
  }
 }
 return (0)|0;
}
function _BN_num_bits($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = ($2|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = $3 << 5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($3<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)>(65535);
 do {
  if ($9) {
   $10 = ($8>>>0)>(16777215);
   if ($10) {
    $11 = $8 >>> 24;
    $12 = (47784 + ($11)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&255;
    $15 = (($14) + 24)|0;
    $$0$i = $15;
    break;
   } else {
    $16 = $8 >>> 16;
    $17 = (47784 + ($16)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = (($19) + 16)|0;
    $$0$i = $20;
    break;
   }
  } else {
   $21 = $8 & 65280;
   $22 = ($21|0)==(0);
   if ($22) {
    $28 = (47784 + ($8)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $$0$i = $30;
    break;
   } else {
    $23 = $8 >>> 8;
    $24 = (47784 + ($23)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = (($26) + 8)|0;
    $$0$i = $27;
    break;
   }
  }
 } while(0);
 $31 = (($$0$i) + ($5))|0;
 $$0 = $31;
 return ($$0|0);
}
function _BN_is_zero($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = $3&1;
 return ($4|0);
}
function _BN_clear_free($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $$pre = ((($0)) + 16|0);
   $$pre$phiZ2D = $$pre;
  } else {
   $4 = ((($0)) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5 << 2;
   _OPENSSL_cleanse($2,$6);
   $7 = ((($0)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & 2;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = $8 & 8;
    $12 = ($11|0)==(0);
    $13 = HEAP32[$0>>2]|0;
    if ($12) {
     _CRYPTO_free($13,83252,0);
     $$pre$phiZ2D = $7;
     break;
    } else {
     _CRYPTO_secure_free($13,83252,0);
     $$pre$phiZ2D = $7;
     break;
    }
   } else {
    $$pre$phiZ2D = $7;
   }
  }
 } while(0);
 $14 = HEAP32[$$pre$phiZ2D>>2]|0;
 $15 = $14 & 1;
 _OPENSSL_cleanse($0,20);
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _BN_get_flags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & $1;
 return ($4|0);
}
function _BN_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = $3 & 8;
   $7 = ($6|0)==(0);
   $8 = HEAP32[$0>>2]|0;
   if ($7) {
    _CRYPTO_free($8,83252,0);
    break;
   } else {
    _CRYPTO_secure_free($8,83252,0);
    break;
   }
  }
 } while(0);
 $9 = HEAP32[$2>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  HEAP32[$0>>2] = 0;
  return;
 } else {
  _CRYPTO_free($0,83252,0);
  return;
 }
}
function _bn_init($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 return;
}
function _BN_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(20,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(3,113,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = ((($0)) + 16|0);
  HEAP32[$2>>2] = 1;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_secure_new() {
 var $$0$i4 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(20,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(3,113,65,0,0);
  $$0$i4 = 0;
  return ($$0$i4|0);
 } else {
  $2 = ((($0)) + 16|0);
  HEAP32[$2>>2] = 9;
  $$0$i4 = $0;
  return ($$0$i4|0);
 }
 return (0)|0;
}
function _bn_expand2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$049$lcssa$i = 0, $$04952$i = 0, $$05051$i = 0, $$1 = 0, $$1$lcssa$i = 0, $$153$i = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $$sink$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep57$i = 0, $smax$i = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<($1|0);
 if (!($4)) {
  $$1 = $0;
  return ($$1|0);
 }
 $5 = ($1|0)>(16777215);
 if ($5) {
  _ERR_put_error(3,120,114,0,0);
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 if (!($9)) {
  _ERR_put_error(3,120,105,0,0);
  $$1 = 0;
  return ($$1|0);
 }
 $10 = $7 & 8;
 $11 = ($10|0)==(0);
 $12 = $1 << 2;
 if ($11) {
  $14 = (_CRYPTO_zalloc($12,83252,0)|0);
  $$sink$i = $14;
 } else {
  $13 = (_CRYPTO_secure_zalloc($12,83252,0)|0);
  $$sink$i = $13;
 }
 $15 = ($$sink$i|0)==(0|0);
 if ($15) {
  _ERR_put_error(3,120,65,0,0);
  $$1 = 0;
  return ($$1|0);
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = ($16|0)==(0|0);
 do {
  if ($17) {
   label = 22;
  } else {
   $18 = ((($0)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 >> 2;
   $21 = ($20|0)>(0);
   if ($21) {
    $22 = $20 ^ -1;
    $23 = ($22|0)>(-2);
    $smax$i = $23 ? $22 : -2;
    $24 = (($smax$i) + ($20))|0;
    $25 = $24 << 2;
    $$04952$i = $16;$$05051$i = $20;$$153$i = $$sink$i;
    while(1) {
     $26 = HEAP32[$$04952$i>>2]|0;
     $27 = ((($$04952$i)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($$04952$i)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($$04952$i)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     HEAP32[$$153$i>>2] = $26;
     $33 = ((($$153$i)) + 4|0);
     HEAP32[$33>>2] = $28;
     $34 = ((($$153$i)) + 8|0);
     HEAP32[$34>>2] = $30;
     $35 = ((($$153$i)) + 12|0);
     HEAP32[$35>>2] = $32;
     $36 = (($$05051$i) + -1)|0;
     $37 = ((($$153$i)) + 16|0);
     $38 = ((($$04952$i)) + 16|0);
     $39 = ($$05051$i|0)>(1);
     if ($39) {
      $$04952$i = $38;$$05051$i = $36;$$153$i = $37;
     } else {
      break;
     }
    }
    $40 = (($25) + 8)|0;
    $scevgep57$i = (($16) + ($40<<2)|0);
    $$pre$i = HEAP32[$18>>2]|0;
    $$049$lcssa$i = $scevgep57$i;$$1$lcssa$i = $37;$41 = $$pre$i;
   } else {
    $$049$lcssa$i = $16;$$1$lcssa$i = $$sink$i;$41 = $19;
   }
   $trunc$i = $41&255;
   $trunc$i$clear = $trunc$i & 3;
   switch ($trunc$i$clear<<24>>24) {
   case 3:  {
    $42 = ((($$049$lcssa$i)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($$1$lcssa$i)) + 8|0);
    HEAP32[$44>>2] = $43;
    label = 18;
    break;
   }
   case 2:  {
    label = 18;
    break;
   }
   case 1:  {
    label = 19;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    // unreachable;
   }
   }
   if ((label|0) == 18) {
    $45 = ((($$049$lcssa$i)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($$1$lcssa$i)) + 4|0);
    HEAP32[$47>>2] = $46;
    label = 19;
   }
   if ((label|0) == 19) {
    $48 = HEAP32[$$049$lcssa$i>>2]|0;
    HEAP32[$$1$lcssa$i>>2] = $48;
   }
   if ($17) {
    label = 22;
   } else {
    $49 = HEAP32[$2>>2]|0;
    $50 = $49 << 2;
    _OPENSSL_cleanse($16,$50);
    $51 = HEAP32[$6>>2]|0;
    $52 = $51 & 8;
    $53 = ($52|0)==(0);
    $54 = HEAP32[$0>>2]|0;
    if ($53) {
     _CRYPTO_free($54,83252,0);
     $$pre$phiZ2D = $0;
     break;
    } else {
     _CRYPTO_secure_free($54,83252,0);
     $$pre$phiZ2D = $0;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $$pre$phiZ2D = $0;
 }
 HEAP32[$$pre$phiZ2D>>2] = $$sink$i;
 HEAP32[$2>>2] = $1;
 $$1 = $0;
 return ($$1|0);
}
function _BN_dup($0) {
 $0 = $0|0;
 var $$0 = 0, $$04853$i = 0, $$049$lcssa$i = 0, $$04952$i = 0, $$050$lcssa$i = 0, $$05051$i = 0, $$pre$i = 0, $$pre57$i = 0, $$pre58$i = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 $6 = (_CRYPTO_zalloc(20,83252,0)|0);
 $7 = ($6|0)==(0|0);
 if ($5) {
  if ($7) {
   _ERR_put_error(3,113,65,0,0);
   $$0 = 0;
   return ($$0|0);
  } else {
   $$sink = 1;
  }
 } else {
  if ($7) {
   _ERR_put_error(3,113,65,0,0);
   $$0 = 0;
   return ($$0|0);
  } else {
   $$sink = 9;
  }
 }
 $8 = ((($6)) + 16|0);
 HEAP32[$8>>2] = $$sink;
 $9 = ($6|0)==($0|0);
 if ($9) {
  $$0 = $0;
  return ($$0|0);
 }
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($6)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($11|0);
 do {
  if ($14) {
   $15 = (_bn_expand2($6,$11)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $$pre$i = HEAP32[$10>>2]|0;
    $20 = $$pre$i;
    break;
   }
   $49 = HEAP32[$8>>2]|0;
   $50 = $49 & 2;
   $51 = ($50|0)==(0);
   do {
    if ($51) {
     $52 = $49 & 8;
     $53 = ($52|0)==(0);
     $54 = HEAP32[$6>>2]|0;
     if ($53) {
      _CRYPTO_free($54,83252,0);
      break;
     } else {
      _CRYPTO_secure_free($54,83252,0);
      break;
     }
    }
   } while(0);
   $55 = HEAP32[$8>>2]|0;
   $56 = $55 & 1;
   $57 = ($56|0)==(0);
   if ($57) {
    HEAP32[$6>>2] = 0;
    $$0 = 0;
    return ($$0|0);
   } else {
    _CRYPTO_free($6,83252,0);
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $20 = $11;
  }
 } while(0);
 $17 = HEAP32[$6>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = $20 >> 2;
 $21 = ($19|0)>(0);
 if ($21) {
  $$04853$i = $19;$$04952$i = $17;$$05051$i = $18;
  while(1) {
   $22 = HEAP32[$$05051$i>>2]|0;
   $23 = ((($$05051$i)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($$05051$i)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($$05051$i)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$$04952$i>>2] = $22;
   $29 = ((($$04952$i)) + 4|0);
   HEAP32[$29>>2] = $24;
   $30 = ((($$04952$i)) + 8|0);
   HEAP32[$30>>2] = $26;
   $31 = ((($$04952$i)) + 12|0);
   HEAP32[$31>>2] = $28;
   $32 = (($$04853$i) + -1)|0;
   $33 = ((($$04952$i)) + 16|0);
   $34 = ((($$05051$i)) + 16|0);
   $35 = ($$04853$i|0)>(1);
   if ($35) {
    $$04853$i = $32;$$04952$i = $33;$$05051$i = $34;
   } else {
    break;
   }
  }
  $$pre57$i = HEAP32[$10>>2]|0;
  $$049$lcssa$i = $33;$$050$lcssa$i = $34;$36 = $$pre57$i;
 } else {
  $$049$lcssa$i = $17;$$050$lcssa$i = $18;$36 = $20;
 }
 $trunc$i = $36&255;
 $trunc$i$clear = $trunc$i & 3;
 switch ($trunc$i$clear<<24>>24) {
 case 3:  {
  $37 = ((($$050$lcssa$i)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($$049$lcssa$i)) + 8|0);
  HEAP32[$39>>2] = $38;
  label = 16;
  break;
 }
 case 2:  {
  label = 16;
  break;
 }
 case 1:  {
  label = 17;
  break;
 }
 case 0:  {
  $45 = $36;
  break;
 }
 default: {
  // unreachable;
 }
 }
 if ((label|0) == 16) {
  $40 = ((($$050$lcssa$i)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($$049$lcssa$i)) + 4|0);
  HEAP32[$42>>2] = $41;
  label = 17;
 }
 if ((label|0) == 17) {
  $43 = HEAP32[$$050$lcssa$i>>2]|0;
  HEAP32[$$049$lcssa$i>>2] = $43;
  $$pre58$i = HEAP32[$10>>2]|0;
  $45 = $$pre58$i;
 }
 $44 = ((($6)) + 4|0);
 HEAP32[$44>>2] = $45;
 $46 = ((($0)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($6)) + 12|0);
 HEAP32[$48>>2] = $47;
 $$0 = $6;
 return ($$0|0);
}
function _BN_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04853 = 0, $$049$lcssa = 0, $$04952 = 0, $$050$lcssa = 0, $$05051 = 0, $$pre = 0, $$pre57 = 0, $$pre58 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if ($2) {
  $$0 = $0;
  return ($$0|0);
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<($4|0);
 do {
  if ($7) {
   $8 = (_bn_expand2($0,$4)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$pre = HEAP32[$3>>2]|0;
    $13 = $$pre;
    break;
   }
  } else {
   $13 = $4;
  }
 } while(0);
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = $13 >> 2;
 $14 = ($12|0)>(0);
 if ($14) {
  $$04853 = $12;$$04952 = $10;$$05051 = $11;
  while(1) {
   $15 = HEAP32[$$05051>>2]|0;
   $16 = ((($$05051)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$05051)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($$05051)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$$04952>>2] = $15;
   $22 = ((($$04952)) + 4|0);
   HEAP32[$22>>2] = $17;
   $23 = ((($$04952)) + 8|0);
   HEAP32[$23>>2] = $19;
   $24 = ((($$04952)) + 12|0);
   HEAP32[$24>>2] = $21;
   $25 = (($$04853) + -1)|0;
   $26 = ((($$04952)) + 16|0);
   $27 = ((($$05051)) + 16|0);
   $28 = ($$04853|0)>(1);
   if ($28) {
    $$04853 = $25;$$04952 = $26;$$05051 = $27;
   } else {
    break;
   }
  }
  $$pre57 = HEAP32[$3>>2]|0;
  $$049$lcssa = $26;$$050$lcssa = $27;$29 = $$pre57;
 } else {
  $$049$lcssa = $10;$$050$lcssa = $11;$29 = $13;
 }
 $trunc = $29&255;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $30 = ((($$050$lcssa)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($$049$lcssa)) + 8|0);
  HEAP32[$32>>2] = $31;
  label = 10;
  break;
 }
 case 2:  {
  label = 10;
  break;
 }
 case 1:  {
  label = 11;
  break;
 }
 case 0:  {
  $38 = $29;
  break;
 }
 default: {
  // unreachable;
 }
 }
 if ((label|0) == 10) {
  $33 = ((($$050$lcssa)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($$049$lcssa)) + 4|0);
  HEAP32[$35>>2] = $34;
  label = 11;
 }
 if ((label|0) == 11) {
  $36 = HEAP32[$$050$lcssa>>2]|0;
  HEAP32[$$049$lcssa>>2] = $36;
  $$pre58 = HEAP32[$3>>2]|0;
  $38 = $$pre58;
 }
 $37 = ((($0)) + 4|0);
 HEAP32[$37>>2] = $38;
 $39 = ((($1)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 12|0);
 HEAP32[$41>>2] = $40;
 $$0 = $0;
 return ($$0|0);
}
function _bn_wexpand($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<($1|0);
 if (!($4)) {
  $6 = $0;
  return ($6|0);
 }
 $5 = (_bn_expand2($0,$1)|0);
 $6 = $5;
 return ($6|0);
}
function _BN_get_word($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(1);
 if ($3) {
  $$0 = -1;
 } else {
  $4 = ($2|0)==(1);
  if ($4) {
   $5 = HEAP32[$0>>2]|0;
   $6 = HEAP32[$5>>2]|0;
   $$0 = $6;
  } else {
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _BN_set_word($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = ($1|0)!=(0);
  $6 = $5&1;
  $14 = $6;
 } else {
  $7 = (_bn_expand2($0,1)|0);
  $8 = ($7|0)==(0|0);
  $9 = ($1|0)!=(0);
  $10 = $9&1;
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $14 = $10;
  }
 }
 $11 = ((($0)) + 12|0);
 $12 = ((($0)) + 4|0);
 HEAP32[$11>>2] = 0;
 $13 = HEAP32[$0>>2]|0;
 HEAP32[$13>>2] = $1;
 HEAP32[$12>>2] = $14;
 $$0 = 1;
 return ($$0|0);
}
function _BN_bin2bn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa$i = 0, $$01415$i = 0, $$016$i = 0, $$036 = 0, $$037 = 0, $$037$ph = 0, $$038 = 0, $$038$ph = 0, $$039$ph = 0, $$04045$ph = 0, $$041$lcssa = 0, $$04152 = 0, $$04156 = 0, $$042$lcssa = 0, $$04254 = 0, $$04255 = 0, $$043 = 0, $$046$ph = 0, $$1 = 0, $$1$ph = 0;
 var $$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $4 = (_CRYPTO_zalloc(20,83252,0)|0);
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ((($4)) + 16|0);
    HEAP32[$6>>2] = 1;
    $$04045$ph = $4;$$046$ph = $4;$$ph = $4;
    break;
   }
   _ERR_put_error(3,113,65,0,0);
   $$043 = 0;
   return ($$043|0);
  } else {
   $$04045$ph = $2;$$046$ph = 0;$$ph = 0;
  }
 } while(0);
 $7 = ($1|0)>(0);
 L8: do {
  if ($7) {
   $$04156 = $1;$$04255 = $0;
   while(1) {
    $8 = HEAP8[$$04255>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if (!($9)) {
     $$04152 = $$04156;$$04254 = $$04255;
     break L8;
    }
    $10 = ((($$04255)) + 1|0);
    $11 = (($$04156) + -1)|0;
    $12 = ($$04156|0)>(1);
    if ($12) {
     $$04156 = $11;$$04255 = $10;
    } else {
     $$041$lcssa = $11;$$042$lcssa = $10;
     label = 8;
     break;
    }
   }
  } else {
   $$041$lcssa = $1;$$042$lcssa = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $13 = ($$041$lcssa|0)==(0);
  if ($13) {
   $14 = ((($$04045$ph)) + 4|0);
   HEAP32[$14>>2] = 0;
   $$043 = $$04045$ph;
   return ($$043|0);
  } else {
   $$04152 = $$041$lcssa;$$04254 = $$042$lcssa;
  }
 }
 $15 = (($$04152) + -1)|0;
 $16 = $15 >>> 2;
 $17 = (($16) + 1)|0;
 $18 = ((($$04045$ph)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>($16|0);
 if (!($20)) {
  $21 = (_bn_expand2($$04045$ph,$17)|0);
  $22 = ($21|0)==(0|0);
  if ($22) {
   $23 = ($$046$ph|0)==(0|0);
   if ($23) {
    $$043 = 0;
    return ($$043|0);
   }
   $24 = ((($$046$ph)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 & 2;
   $27 = ($26|0)==(0);
   do {
    if ($27) {
     $28 = $25 & 8;
     $29 = ($28|0)==(0);
     $30 = HEAP32[$$046$ph>>2]|0;
     if ($29) {
      _CRYPTO_free($30,83252,0);
      break;
     } else {
      _CRYPTO_secure_free($30,83252,0);
      break;
     }
    }
   } while(0);
   $31 = HEAP32[$24>>2]|0;
   $32 = $31 & 1;
   $33 = ($32|0)==(0);
   if ($33) {
    HEAP32[$$046$ph>>2] = 0;
    $$043 = 0;
    return ($$043|0);
   } else {
    _CRYPTO_free($$ph,83252,0);
    $$043 = 0;
    return ($$043|0);
   }
  }
 }
 $34 = $15 & 3;
 $35 = ((($$04045$ph)) + 4|0);
 HEAP32[$35>>2] = $17;
 $36 = ((($$04045$ph)) + 12|0);
 HEAP32[$36>>2] = 0;
 $$037$ph = $$04152;$$038$ph = $34;$$039$ph = $17;$$1$ph = $$04254;
 L35: while(1) {
  $$036 = 0;$$037 = $$037$ph;$$038 = $$038$ph;$$1 = $$1$ph;
  while(1) {
   $37 = (($$037) + -1)|0;
   $38 = ($$037|0)==(0);
   if ($38) {
    break L35;
   }
   $39 = $$036 << 8;
   $40 = ((($$1)) + 1|0);
   $41 = HEAP8[$$1>>0]|0;
   $42 = $41&255;
   $43 = $42 | $39;
   $44 = (($$038) + -1)|0;
   $45 = ($$038|0)==(0);
   if ($45) {
    break;
   } else {
    $$036 = $43;$$037 = $37;$$038 = $44;$$1 = $40;
   }
  }
  $46 = (($$039$ph) + -1)|0;
  $47 = HEAP32[$$04045$ph>>2]|0;
  $48 = (($47) + ($46<<2)|0);
  HEAP32[$48>>2] = $43;
  $$037$ph = $37;$$038$ph = 3;$$039$ph = $46;$$1$ph = $40;
 }
 $49 = HEAP32[$35>>2]|0;
 $50 = ($49|0)>(0);
 if ($50) {
  $51 = HEAP32[$$04045$ph>>2]|0;
  $52 = (($51) + ($49<<2)|0);
  $$01415$i = $52;$$016$i = $49;
  while(1) {
   $53 = ((($$01415$i)) + -4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(0);
   if (!($55)) {
    $$0$lcssa$i = $$016$i;
    break;
   }
   $56 = (($$016$i) + -1)|0;
   $57 = ($$016$i|0)>(1);
   if ($57) {
    $$01415$i = $53;$$016$i = $56;
   } else {
    $$0$lcssa$i = $56;
    break;
   }
  }
  HEAP32[$35>>2] = $$0$lcssa$i;
  $58 = $$0$lcssa$i;
 } else {
  $58 = $49;
 }
 $59 = ($58|0)==(0);
 if (!($59)) {
  $$043 = $$04045$ph;
  return ($$043|0);
 }
 HEAP32[$36>>2] = 0;
 $$043 = $$04045$ph;
 return ($$043|0);
}
function _bn_correct_top($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$01415 = 0, $$016 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + ($2<<2)|0);
  $$01415 = $5;$$016 = $2;
  while(1) {
   $6 = ((($$01415)) + -4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $$0$lcssa = $$016;
    break;
   }
   $9 = (($$016) + -1)|0;
   $10 = ($$016|0)>(1);
   if ($10) {
    $$01415 = $6;$$016 = $9;
   } else {
    $$0$lcssa = $9;
    break;
   }
  }
  HEAP32[$1>>2] = $$0$lcssa;
  $11 = $$0$lcssa;
 } else {
  $11 = $2;
 }
 $12 = ($11|0)==(0);
 if (!($12)) {
  return;
 }
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = 0;
 return;
}
function _BN_bn2bin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i = 0, $$0$i$i2 = 0, $$02528$i = 0, $$in$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp$i$off = 0, $phitmp27$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = ($3|0)==(0);
 if ($5) {
  $$0$i$i2 = 0;
  return ($$0$i$i2|0);
 }
 $6 = $4 << 5;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + ($4<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(65535);
 do {
  if ($10) {
   $11 = ($9>>>0)>(16777215);
   if ($11) {
    $12 = $9 >>> 24;
    $13 = (47784 + ($12)|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $16 = (($15) + 24)|0;
    $$0$i$i$i = $16;
    break;
   } else {
    $17 = $9 >>> 16;
    $18 = (47784 + ($17)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = (($20) + 16)|0;
    $$0$i$i$i = $21;
    break;
   }
  } else {
   $22 = $9 & 65280;
   $23 = ($22|0)==(0);
   if ($23) {
    $29 = (47784 + ($9)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $$0$i$i$i = $31;
    break;
   } else {
    $24 = $9 >>> 8;
    $25 = (47784 + ($24)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = (($27) + 8)|0;
    $$0$i$i$i = $28;
    break;
   }
  }
 } while(0);
 $32 = $6 | 7;
 $phitmp$i = (($$0$i$i$i) + ($32))|0;
 $phitmp27$i = (($phitmp$i|0) / 8)&-1;
 $phitmp$i$off = (($phitmp$i) + 7)|0;
 $33 = ($phitmp$i$off>>>0)<(15);
 if ($33) {
  $$0$i$i2 = 0;
  return ($$0$i$i2|0);
 } else {
  $$02528$i = $1;$$in$i = $phitmp27$i;$37 = $7;
 }
 while(1) {
  $34 = (($$in$i) + -1)|0;
  $35 = (($34|0) / 4)&-1;
  $36 = (($37) + ($35<<2)|0);
  $38 = HEAP32[$36>>2]|0;
  $39 = (($34|0) % 4)&-1;
  $40 = $39 << 3;
  $41 = $38 >>> $40;
  $42 = $41&255;
  HEAP8[$$02528$i>>0] = $42;
  $43 = ($34|0)==(0);
  if ($43) {
   $$0$i$i2 = $phitmp27$i;
   break;
  }
  $44 = ((($$02528$i)) + 1|0);
  $$pre = HEAP32[$0>>2]|0;
  $$02528$i = $44;$$in$i = $34;$37 = $$pre;
 }
 return ($$0$i$i2|0);
}
function _BN_ucmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$026 = 0, $$026$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $$026$in = $3;
 while(1) {
  $$026 = (($$026$in) + -1)|0;
  $10 = ($$026$in|0)>(0);
  if (!($10)) {
   $$0 = 0;
   label = 6;
   break;
  }
  $11 = (($8) + ($$026<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($9) + ($$026<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)==($14|0);
  if ($15) {
   $$026$in = $$026;
  } else {
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 $16 = ($12>>>0)>($14>>>0);
 $17 = $16 ? 1 : -1;
 $$0 = $17;
 return ($$0|0);
}
function _BN_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0, $$035 = 0, $$035$in = 0, $$39 = 0, $$40 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $not$ = $3 ^ 1;
  $$ = $not$&1;
  $$$ = $2 ? $$ : -1;
  return ($$$|0);
 }
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 $9 = ($5|0)==(0);
 $$39 = $9 ? 1 : -1;
 if (!($8)) {
  $$0 = $$39;
  return ($$0|0);
 }
 $$40 = $9 ? -1 : 1;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)>($13|0);
 if ($14) {
  $$0 = $$39;
  return ($$0|0);
 }
 $15 = ($11|0)<($13|0);
 if ($15) {
  $$0 = $$40;
  return ($$0|0);
 }
 $$035$in = $11;
 while(1) {
  $$035 = (($$035$in) + -1)|0;
  $16 = ($$035$in|0)>(0);
  if (!($16)) {
   $$0 = 0;
   label = 10;
   break;
  }
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + ($$035<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  $21 = (($20) + ($$035<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19>>>0)>($22>>>0);
  if ($23) {
   $$0 = $$39;
   label = 10;
   break;
  }
  $24 = ($19>>>0)<($22>>>0);
  if ($24) {
   $$0 = $$40;
   label = 10;
   break;
  } else {
   $$035$in = $$035;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_set_bit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$023 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(0);
 if ($2) {
  $$023 = 0;
  return ($$023|0);
 }
 $3 = $1 >>> 5;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>($3|0);
 if (!($6)) {
  $7 = (($3) + 1)|0;
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>($3|0);
  do {
   if ($10) {
    $13 = $5;
   } else {
    $11 = (_bn_expand2($0,$7)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$023 = 0;
     return ($$023|0);
    } else {
     $$pre = HEAP32[$4>>2]|0;
     $13 = $$pre;
     break;
    }
   }
  } while(0);
  $14 = ($13|0)>($3|0);
  if (!($14)) {
   $15 = HEAP32[$0>>2]|0;
   $scevgep = (($15) + ($13<<2)|0);
   $16 = (($7) - ($13))|0;
   $17 = $16 << 2;
   _memset(($scevgep|0),0,($17|0))|0;
  }
  HEAP32[$4>>2] = $7;
 }
 $18 = $1 & 31;
 $19 = 1 << $18;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + ($3<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 | $19;
 HEAP32[$21>>2] = $23;
 $$023 = 1;
 return ($$023|0);
}
function _BN_is_bit_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = $1 >>> 5;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>($3|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + ($3<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1 & 31;
 $11 = $9 >>> $10;
 $12 = $11 & 1;
 $$0 = $12;
 return ($$0|0);
}
function _BN_set_negative($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $$sink = 1;
  }
 }
 if ((label|0) == 3) {
  $$sink = 0;
 }
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = $$sink;
 return;
}
function _bn_cmp_words($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$024 = 0, $$026 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($2) + -1)|0;
 $4 = (($0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $9 = ($5>>>0)>($7>>>0);
  $10 = $9 ? 1 : -1;
  $$024 = $10;
  return ($$024|0);
 }
 $11 = (($2) + -2)|0;
 $12 = ($11|0)>(-1);
 if ($12) {
  $$026 = $11;
 } else {
  $$024 = 0;
  return ($$024|0);
 }
 while(1) {
  $15 = (($0) + ($$026<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($1) + ($$026<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)==($18|0);
  if (!($19)) {
   break;
  }
  $13 = (($$026) + -1)|0;
  $14 = ($$026|0)>(0);
  if ($14) {
   $$026 = $13;
  } else {
   $$024 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$024|0);
 }
 $20 = ($16>>>0)>($18>>>0);
 $21 = $20 ? 1 : -1;
 $$024 = $21;
 return ($$024|0);
}
function _bn_cmp_part_words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$021 = 0, $$026$i = 0, $$030 = 0, $$129 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($2) + -1)|0;
 $5 = ($3|0)<(0);
 L1: do {
  if ($5) {
   $$030 = $3;
   while(1) {
    $8 = (($4) - ($$030))|0;
    $9 = (($1) + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if (!($11)) {
     $$021 = -1;
     break;
    }
    $6 = (($$030) + 1)|0;
    $7 = ($$030|0)<(-1);
    if ($7) {
     $$030 = $6;
    } else {
     break L1;
    }
   }
   return ($$021|0);
  }
 } while(0);
 $12 = ($3|0)>(0);
 L7: do {
  if ($12) {
   $$129 = $3;
   while(1) {
    $15 = (($$129) + ($4))|0;
    $16 = (($0) + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0);
    if (!($18)) {
     $$021 = 1;
     break;
    }
    $13 = (($$129) + -1)|0;
    $14 = ($$129|0)>(1);
    if ($14) {
     $$129 = $13;
    } else {
     break L7;
    }
   }
   return ($$021|0);
  }
 } while(0);
 $19 = (($0) + ($4<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($1) + ($4<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($20|0)==($22|0);
 if (!($23)) {
  $24 = ($20>>>0)>($22>>>0);
  $25 = $24 ? 1 : -1;
  $$021 = $25;
  return ($$021|0);
 }
 $26 = (($2) + -2)|0;
 $27 = ($26|0)>(-1);
 if ($27) {
  $$026$i = $26;
 } else {
  $$021 = 0;
  return ($$021|0);
 }
 while(1) {
  $30 = (($0) + ($$026$i<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($1) + ($$026$i<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($31|0)==($33|0);
  if (!($34)) {
   break;
  }
  $28 = (($$026$i) + -1)|0;
  $29 = ($$026$i|0)>(0);
  if ($29) {
   $$026$i = $28;
  } else {
   $$021 = 0;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($$021|0);
 }
 $35 = ($31>>>0)>($33>>>0);
 $36 = $35 ? 1 : -1;
 $$021 = $36;
 return ($$021|0);
}
function _BN_security_bits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$017 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)>(15359);
 if ($2) {
  $$017 = 256;
 } else {
  $3 = ($0|0)>(7689);
  if ($3) {
   $$017 = 192;
  } else {
   $4 = ($0|0)>(3071);
   if ($4) {
    $$017 = 128;
   } else {
    $5 = ($0|0)>(2047);
    if ($5) {
     $$017 = 112;
    } else {
     $6 = ($0|0)>(1023);
     if ($6) {
      $$017 = 80;
     } else {
      $$0 = 0;
      return ($$0|0);
     }
    }
   }
  }
 }
 $7 = ($1|0)==(-1);
 if ($7) {
  $$0 = $$017;
  return ($$0|0);
 } else {
  $8 = (($1|0) / 2)&-1;
  $9 = ($1|0)<(160);
  $10 = ($8|0)>=($$017|0);
  $11 = $10 ? $$017 : $8;
  $$ = $9 ? 0 : $11;
  return ($$|0);
 }
 return (0)|0;
}
function _BN_zero_ex($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _BN_is_one($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(1);
  if ($6) {
   $7 = ((($0)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   $11 = $9;
  } else {
   $11 = 0;
  }
 } else {
  $11 = 0;
 }
 $10 = $11&1;
 return ($10|0);
}
function _BN_is_word($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old = 0, $$old3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==($1|0);
  if ($7) {
   label = 4;
  } else {
   $13 = 0;
  }
 } else {
  $$old = $3 | $1;
  $$old3 = ($$old|0)==(0);
  if ($$old3) {
   label = 4;
  } else {
   $13 = 0;
  }
 }
 if ((label|0) == 4) {
  $8 = ($1|0)==(0);
  if ($8) {
   $13 = 1;
  } else {
   $9 = ((($0)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   $13 = $11;
  }
 }
 $12 = $13&1;
 return ($12|0);
}
function _BN_is_odd($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $9 = 0;
  $8 = $9&1;
  return ($8|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 $9 = $7;
 $8 = $9&1;
 return ($8|0);
}
function _BN_is_negative($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 return ($4|0);
}
function _BN_to_montgomery($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 4|0);
 $5 = (_BN_mod_mul_montgomery($0,$1,$4,$2,$3)|0);
 return ($5|0);
}
function _BN_with_flags($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $3;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($1)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ((($1)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -4;
 $19 = $15 | $2;
 $20 = $19 | $18;
 $21 = $20 | 2;
 HEAP32[$13>>2] = $21;
 return;
}
function _BN_GENCB_new() {
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(12,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(3,143,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_GENCB_free($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _BN_set_flags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | $1;
 HEAP32[$2>>2] = $4;
 return;
}
function _BN_GENCB_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 2;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $1;
 return;
}
function _BN_GENCB_get_arg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _BN_nnmod($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_BN_div(0,$0,$1,$2,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 1;
  return ($$0|0);
 }
 $9 = ((($2)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 $12 = $11 ? 35 : 34;
 $13 = (FUNCTION_TABLE_iiii[$12 & 63]($0,$0,$2)|0);
 $$0 = $13;
 return ($$0|0);
}
function _BN_mod_mul($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($4);
 $5 = (_BN_CTX_get($4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  _BN_CTX_end($4);
  return ($$0|0);
 }
 $7 = ($1|0)==($2|0);
 if ($7) {
  $8 = (_BN_sqr($5,$1,$4)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   _BN_CTX_end($4);
   return ($$0|0);
  }
 } else {
  $10 = (_BN_mul($5,$1,$2,$4)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = 0;
   _BN_CTX_end($4);
   return ($$0|0);
  }
 }
 $12 = (_BN_div(0,$0,$5,$3,$4)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0$i = 0;
 } else {
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $$0$i = 1;
  } else {
   $17 = ((($3)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(0);
   $20 = $19 ? 35 : 34;
   $21 = (FUNCTION_TABLE_iiii[$20 & 63]($0,$0,$3)|0);
   $phitmp17 = ($21|0)!=(0);
   $$0$i = $phitmp17;
  }
 }
 $$ = $$0$i&1;
 $$0 = $$;
 _BN_CTX_end($4);
 return ($$0|0);
}
function _BN_mod_mul_montgomery($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($4);
 $5 = (_BN_CTX_get($4)|0);
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $$0 = 0;
  } else {
   $7 = ($1|0)==($2|0);
   if ($7) {
    $8 = (_BN_sqr($5,$1,$4)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $$0 = 0;
     break;
    }
   } else {
    $10 = (_BN_mul($5,$1,$2,$4)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$0 = 0;
     break;
    }
   }
   $12 = (_BN_from_montgomery_word($0,$5,$3)|0);
   $not$ = ($12|0)!=(0);
   $$ = $not$&1;
   $$0 = $$;
  }
 } while(0);
 _BN_CTX_end($4);
 return ($$0|0);
}
function _BN_from_montgomery_word($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0138147 = 0, $$0139$lcssa = 0, $$0139146 = 0, $$0140145 = 0, $$1$lcssa = 0, $$1142 = 0, $$2141 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $exitcond = 0, $exitcond155 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($0)) + 4|0);
  HEAP32[$6>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 $7 = $4 << 1;
 $8 = (_bn_wexpand($1,$7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($2)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 ^ $11;
 HEAP32[$12>>2] = $14;
 $15 = ((($2)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($1)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($7) - ($19))|0;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = $20 << 2;
  $23 = (($17) + ($19<<2)|0);
  _memset(($23|0),0,($22|0))|0;
 }
 HEAP32[$18>>2] = $7;
 $24 = ((($2)) + 64|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($4|0)>(0);
 if ($26) {
  $$0138147 = $17;$$0139146 = 0;$$0140145 = 0;
  while(1) {
   $27 = HEAP32[$$0138147>>2]|0;
   $28 = Math_imul($27, $25)|0;
   $29 = (_bn_mul_add_words($$0138147,$16,$4,$28)|0);
   $30 = (($29) + ($$0139146))|0;
   $31 = (($$0138147) + ($4<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + ($32))|0;
   $34 = ($30|0)!=(0);
   $35 = $34&1;
   $36 = $35 | $$0139146;
   $37 = ($33>>>0)<=($32>>>0);
   $38 = $37&1;
   $39 = $36 & $38;
   HEAP32[$31>>2] = $33;
   $40 = (($$0140145) + 1)|0;
   $41 = ((($$0138147)) + 4|0);
   $exitcond155 = ($40|0)==($4|0);
   if ($exitcond155) {
    $$0139$lcssa = $39;
    break;
   } else {
    $$0138147 = $41;$$0139146 = $39;$$0140145 = $40;
   }
  }
 } else {
  $$0139$lcssa = 0;
 }
 $42 = (_bn_wexpand($0,$4)|0);
 $43 = ($42|0)==(0|0);
 if ($43) {
  $$0 = 0;
  return ($$0|0);
 }
 $44 = ((($0)) + 4|0);
 HEAP32[$44>>2] = $4;
 $45 = HEAP32[$12>>2]|0;
 $46 = ((($0)) + 12|0);
 HEAP32[$46>>2] = $45;
 $47 = HEAP32[$0>>2]|0;
 $48 = HEAP32[$1>>2]|0;
 $49 = (($48) + ($4<<2)|0);
 $50 = (_bn_sub_words($47,$49,$16,$4)|0);
 $51 = (($$0139$lcssa) - ($50))|0;
 $52 = $47;
 $53 = $51 ^ -1;
 $54 = $52 & $53;
 $55 = $49;
 $56 = $55 & $51;
 $57 = $54 | $56;
 $58 = $57;
 $59 = (($4) + -4)|0;
 $60 = ($4|0)>(4);
 if ($60) {
  $$1142 = 0;
  while(1) {
   $64 = (($58) + ($$1142<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $$1142 | 1;
   $67 = (($58) + ($66<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $$1142 | 2;
   $70 = (($58) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($49) + ($$1142<<2)|0);
   HEAP32[$72>>2] = 0;
   $73 = $$1142 | 3;
   $74 = (($58) + ($73<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($49) + ($66<<2)|0);
   HEAP32[$76>>2] = 0;
   $77 = (($47) + ($$1142<<2)|0);
   HEAP32[$77>>2] = $65;
   $78 = (($49) + ($69<<2)|0);
   HEAP32[$78>>2] = 0;
   $79 = (($47) + ($66<<2)|0);
   HEAP32[$79>>2] = $68;
   $80 = (($49) + ($73<<2)|0);
   HEAP32[$80>>2] = 0;
   $81 = (($47) + ($69<<2)|0);
   HEAP32[$81>>2] = $71;
   $82 = (($47) + ($73<<2)|0);
   HEAP32[$82>>2] = $75;
   $83 = (($$1142) + 4)|0;
   $84 = ($83|0)<($59|0);
   if ($84) {
    $$1142 = $83;
   } else {
    break;
   }
  }
  $61 = (($4) + -1)|0;
  $62 = $61 & -4;
  $$1$lcssa = $62;
 } else {
  $$1$lcssa = 0;
 }
 $63 = ($$1$lcssa|0)<($4|0);
 if ($63) {
  $$2141 = $$1$lcssa;
  while(1) {
   $85 = (($58) + ($$2141<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($47) + ($$2141<<2)|0);
   HEAP32[$87>>2] = $86;
   $88 = (($49) + ($$2141<<2)|0);
   HEAP32[$88>>2] = 0;
   $89 = (($$2141) + 1)|0;
   $exitcond = ($89|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $$2141 = $89;
   }
  }
 }
 _bn_correct_top($1);
 _bn_correct_top($0);
 $$0 = 1;
 return ($$0|0);
}
function _BN_from_montgomery($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($3);
 $4 = (_BN_CTX_get($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
 } else {
  $6 = (_BN_copy($4,$1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 0;
  } else {
   $8 = (_BN_from_montgomery_word($0,$4,$2)|0);
   $$0 = $8;
  }
 }
 _BN_CTX_end($3);
 return ($$0|0);
}
function _BN_MONT_CTX_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_malloc(76,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 _bn_init($2);
 $3 = ((($0)) + 24|0);
 _bn_init($3);
 $4 = ((($0)) + 44|0);
 _bn_init($4);
 $5 = ((($0)) + 68|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 64|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 72|0);
 HEAP32[$7>>2] = 1;
 $$0 = $0;
 return ($$0|0);
}
function _BN_MONT_CTX_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 4|0);
 _BN_clear_free($2);
 $3 = ((($0)) + 24|0);
 _BN_clear_free($3);
 $4 = ((($0)) + 44|0);
 _BN_clear_free($4);
 $5 = ((($0)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  return;
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _BN_MONT_CTX_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$041 = 0, $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = (_BN_is_zero($1)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$041 = 0;
  STACKTOP = sp;return ($$041|0);
 }
 _BN_CTX_start($2);
 $7 = (_BN_CTX_get($2)|0);
 $8 = ($7|0)==(0|0);
 L4: do {
  if ($8) {
   $$042 = 0;
  } else {
   $9 = ((($0)) + 4|0);
   $10 = ((($0)) + 24|0);
   $11 = (_BN_copy($10,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$042 = 0;
   } else {
    $13 = ((($0)) + 36|0);
    HEAP32[$13>>2] = 0;
    _bn_init($3);
    HEAP32[$3>>2] = $4;
    $14 = ((($3)) + 8|0);
    HEAP32[$14>>2] = 2;
    $15 = ((($3)) + 12|0);
    HEAP32[$15>>2] = 0;
    $16 = (_BN_num_bits($1)|0);
    $17 = (($16) + 31)|0;
    $18 = (($17|0) / 32)&-1;
    $19 = $18 << 5;
    HEAP32[$0>>2] = $19;
    _BN_zero_ex($9);
    $20 = (_BN_set_bit($9,32)|0);
    $21 = ($20|0)==(0);
    do {
     if (!($21)) {
      $22 = HEAP32[$1>>2]|0;
      $23 = HEAP32[$22>>2]|0;
      HEAP32[$4>>2] = $23;
      $24 = ((($4)) + 4|0);
      HEAP32[$24>>2] = 0;
      $25 = ($23|0)!=(0);
      $26 = $25&1;
      $27 = ((($3)) + 4|0);
      HEAP32[$27>>2] = $26;
      $28 = (_BN_mod_inverse($7,$9,$3,$2)|0);
      $29 = ($28|0)==(0|0);
      if (!($29)) {
       $30 = (_BN_lshift($7,$7,32)|0);
       $31 = ($30|0)==(0);
       if (!($31)) {
        $32 = (_BN_is_zero($7)|0);
        $33 = ($32|0)==(0);
        if ($33) {
         $34 = (_BN_sub_word($7,1)|0);
         $35 = ($34|0)==(0);
         if ($35) {
          break;
         }
        } else {
         $36 = (_BN_set_word($7,-1)|0);
         $37 = ($36|0)==(0);
         if ($37) {
          break;
         }
        }
        $38 = (_BN_div($7,0,$7,$3,$2)|0);
        $39 = ($38|0)==(0);
        if (!($39)) {
         $40 = ((($7)) + 4|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = ($41|0)>(0);
         if ($42) {
          $43 = HEAP32[$7>>2]|0;
          $44 = HEAP32[$43>>2]|0;
          $46 = $44;
         } else {
          $46 = 0;
         }
         $45 = ((($0)) + 64|0);
         HEAP32[$45>>2] = $46;
         $47 = ((($0)) + 68|0);
         HEAP32[$47>>2] = 0;
         _BN_zero_ex($9);
         $48 = HEAP32[$0>>2]|0;
         $49 = $48 << 1;
         $50 = (_BN_set_bit($9,$49)|0);
         $51 = ($50|0)==(0);
         if ($51) {
          $$042 = 0;
          break L4;
         }
         $52 = (_BN_div(0,$9,$9,$10,$2)|0);
         $not$ = ($52|0)!=(0);
         $$ = $not$&1;
         $$042 = $$;
         break L4;
        }
       }
      }
     }
    } while(0);
    $$042 = 0;
   }
  }
 } while(0);
 _BN_CTX_end($2);
 $$041 = $$042;
 STACKTOP = sp;return ($$041|0);
}
function _BN_MONT_CTX_set_locked($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_CRYPTO_THREAD_read_lock($1)|0);
 $4 = HEAP32[$0>>2]|0;
 (_CRYPTO_THREAD_unlock($1)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$019 = $4;
  return ($$019|0);
 }
 $6 = (_CRYPTO_malloc(76,83252,0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$019 = 0;
  return ($$019|0);
 }
 HEAP32[$6>>2] = 0;
 $8 = ((($6)) + 4|0);
 _bn_init($8);
 $9 = ((($6)) + 24|0);
 _bn_init($9);
 $10 = ((($6)) + 44|0);
 _bn_init($10);
 $11 = ((($6)) + 68|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($6)) + 64|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($6)) + 72|0);
 HEAP32[$13>>2] = 1;
 $14 = (_BN_MONT_CTX_set($6,$2,$3)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  _BN_clear_free($8);
  _BN_clear_free($9);
  _BN_clear_free($10);
  $16 = HEAP32[$13>>2]|0;
  $17 = $16 & 1;
  $18 = ($17|0)==(0);
  if ($18) {
   $$019 = 0;
   return ($$019|0);
  }
  _CRYPTO_free($6,83252,0);
  $$019 = 0;
  return ($$019|0);
 }
 (_CRYPTO_THREAD_write_lock($1)|0);
 $19 = HEAP32[$0>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  HEAP32[$0>>2] = $6;
  $$0 = $6;
 } else {
  _BN_clear_free($8);
  _BN_clear_free($9);
  _BN_clear_free($10);
  $21 = HEAP32[$13>>2]|0;
  $22 = $21 & 1;
  $23 = ($22|0)==(0);
  if (!($23)) {
   _CRYPTO_free($6,83252,0);
  }
  $24 = HEAP32[$0>>2]|0;
  $$0 = $24;
 }
 (_CRYPTO_THREAD_unlock($1)|0);
 $$019 = $$0;
 return ($$019|0);
}
function _bn_sub_part_words($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0105$ = 0, $$0105$$ = 0, $$0105$$$ = 0, $$0105$$$$ = 0, $$0105$138 = 0, $$0105$142 = 0, $$0106141 = 0, $$0114 = 0, $$0115140 = 0, $$0116157 = 0, $$0119139 = 0, $$1107158 = 0, $$1117197 = 0, $$1120156 = 0, $$2118150 = 0, $$2121196 = 0, $$3122149 = 0, $$5$ = 0, $$5$$ = 0, $$5$$$ = 0;
 var $$5$$$$ = 0, $$5159 = 0, $$6112198 = 0, $$7113151 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $sum = 0, $sum172 = 0, $sum173 = 0, $sum174 = 0, $sum175 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_bn_sub_words($0,$1,$2,$3)|0);
 $6 = ($4|0)==(0);
 if ($6) {
  $$0114 = $5;
  return ($$0114|0);
 }
 $7 = (($0) + ($3<<2)|0);
 $8 = (($2) + ($3<<2)|0);
 $9 = ($4|0)<(0);
 if ($9) {
  $10 = HEAP32[$8>>2]|0;
  $sum = (($10) + ($5))|0;
  $11 = (0 - ($sum))|0;
  HEAP32[$7>>2] = $11;
  $12 = ($10|0)==(0);
  $$0105$138 = $12 ? $5 : 1;
  $13 = ($4|0)==(-1);
  if ($13) {
   $$0114 = $$0105$138;
   return ($$0114|0);
  } else {
   $$0105$142 = $$0105$138;$$0106141 = $4;$$0115140 = $8;$$0119139 = $7;
  }
  while(1) {
   $14 = ((($$0115140)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $sum172 = (($15) + ($$0105$142))|0;
   $16 = (0 - ($sum172))|0;
   $17 = ((($$0119139)) + 4|0);
   HEAP32[$17>>2] = $16;
   $18 = ($15|0)==(0);
   $$0105$$ = $18 ? $$0105$142 : 1;
   $19 = (($$0106141) + 2)|0;
   $20 = ($19|0)>(-1);
   if ($20) {
    $$0114 = $$0105$$;
    label = 19;
    break;
   }
   $21 = ((($$0115140)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $sum173 = (($22) + ($$0105$$))|0;
   $23 = (0 - ($sum173))|0;
   $24 = ((($$0119139)) + 8|0);
   HEAP32[$24>>2] = $23;
   $25 = ($22|0)==(0);
   $$0105$$$ = $25 ? $$0105$$ : 1;
   $26 = (($$0106141) + 3)|0;
   $27 = ($26|0)>(-1);
   if ($27) {
    $$0114 = $$0105$$$;
    label = 19;
    break;
   }
   $28 = ((($$0115140)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $sum174 = (($29) + ($$0105$$$))|0;
   $30 = (0 - ($sum174))|0;
   $31 = ((($$0119139)) + 12|0);
   HEAP32[$31>>2] = $30;
   $32 = ($29|0)==(0);
   $$0105$$$$ = $32 ? $$0105$$$ : 1;
   $33 = (($$0106141) + 4)|0;
   $34 = ($33|0)>(-1);
   if ($34) {
    $$0114 = $$0105$$$$;
    label = 19;
    break;
   }
   $35 = ((($$0115140)) + 16|0);
   $36 = ((($$0119139)) + 16|0);
   $37 = HEAP32[$35>>2]|0;
   $sum175 = (($37) + ($$0105$$$$))|0;
   $38 = (0 - ($sum175))|0;
   HEAP32[$36>>2] = $38;
   $39 = ($37|0)==(0);
   $$0105$ = $39 ? $$0105$$$$ : 1;
   $40 = ($33|0)==(-1);
   if ($40) {
    $$0114 = $$0105$;
    label = 19;
    break;
   } else {
    $$0105$142 = $$0105$;$$0106141 = $33;$$0115140 = $35;$$0119139 = $36;
   }
  }
  if ((label|0) == 19) {
   return ($$0114|0);
  }
 }
 $41 = (($1) + ($3<<2)|0);
 $42 = ($5|0)==(0);
 L19: do {
  if ($42) {
   $$1117197 = $41;$$2121196 = $7;$$6112198 = $4;
  } else {
   $$0116157 = $41;$$1107158 = $4;$$1120156 = $7;$$5159 = $5;
   while(1) {
    $43 = HEAP32[$$0116157>>2]|0;
    $44 = (($43) - ($$5159))|0;
    HEAP32[$$1120156>>2] = $44;
    $45 = ($43|0)==(0);
    $$5$ = $45 ? $$5159 : 0;
    $46 = ($$1107158|0)<(2);
    if ($46) {
     $$0114 = $$5$;
     label = 19;
     break;
    }
    $47 = ((($$0116157)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) - ($$5$))|0;
    $50 = ((($$1120156)) + 4|0);
    HEAP32[$50>>2] = $49;
    $51 = ($48|0)==(0);
    $$5$$ = $51 ? $$5$ : 0;
    $52 = (($$1107158) + -2)|0;
    $53 = ($52|0)<(1);
    if ($53) {
     $$0114 = $$5$$;
     label = 19;
     break;
    }
    $54 = ((($$0116157)) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) - ($$5$$))|0;
    $57 = ((($$1120156)) + 8|0);
    HEAP32[$57>>2] = $56;
    $58 = ($55|0)==(0);
    $$5$$$ = $58 ? $$5$$ : 0;
    $59 = (($$1107158) + -3)|0;
    $60 = ($59|0)<(1);
    if ($60) {
     $$0114 = $$5$$$;
     label = 19;
     break;
    }
    $61 = ((($$0116157)) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) - ($$5$$$))|0;
    $64 = ((($$1120156)) + 12|0);
    HEAP32[$64>>2] = $63;
    $65 = ($62|0)==(0);
    $$5$$$$ = $65 ? $$5$$$ : 0;
    $66 = (($$1107158) + -4)|0;
    $67 = ($66|0)<(1);
    if ($67) {
     $$0114 = $$5$$$$;
     label = 19;
     break;
    }
    $68 = ((($$0116157)) + 16|0);
    $69 = ((($$1120156)) + 16|0);
    $70 = ($$5$$$$|0)==(0);
    if ($70) {
     $$1117197 = $68;$$2121196 = $69;$$6112198 = $66;
     break L19;
    } else {
     $$0116157 = $68;$$1107158 = $66;$$1120156 = $69;$$5159 = $$5$$$;
    }
   }
   if ((label|0) == 19) {
    return ($$0114|0);
   }
  }
 } while(0);
 $71 = HEAP32[$$1117197>>2]|0;
 HEAP32[$$2121196>>2] = $71;
 $72 = ($$6112198|0)==(1);
 if ($72) {
  $$0114 = 0;
  return ($$0114|0);
 } else {
  $$2118150 = $$1117197;$$3122149 = $$2121196;$$7113151 = $$6112198;
 }
 while(1) {
  $73 = ((($$2118150)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($$3122149)) + 4|0);
  HEAP32[$75>>2] = $74;
  $76 = (($$7113151) + -2)|0;
  $77 = ($76|0)<(1);
  if ($77) {
   $$0114 = 0;
   label = 19;
   break;
  }
  $78 = ((($$2118150)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($$3122149)) + 8|0);
  HEAP32[$80>>2] = $79;
  $81 = (($$7113151) + -3)|0;
  $82 = ($81|0)<(1);
  if ($82) {
   $$0114 = 0;
   label = 19;
   break;
  }
  $83 = ((($$2118150)) + 12|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($$3122149)) + 12|0);
  HEAP32[$85>>2] = $84;
  $86 = (($$7113151) + -4)|0;
  $87 = ($86|0)<(1);
  if ($87) {
   $$0114 = 0;
   label = 19;
   break;
  }
  $88 = ((($$2118150)) + 16|0);
  $89 = ((($$3122149)) + 16|0);
  $90 = HEAP32[$88>>2]|0;
  HEAP32[$89>>2] = $90;
  $91 = ($86|0)==(1);
  if ($91) {
   $$0114 = 0;
   label = 19;
   break;
  } else {
   $$2118150 = $88;$$3122149 = $89;$$7113151 = $86;
  }
 }
 if ((label|0) == 19) {
  return ($$0114|0);
 }
 return (0)|0;
}
function _bn_mul_recursive($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0234 = 0, $$0235 = 0, $$0236 = 0, $$pre$phi237Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $7 = (($3|0) / 2)&-1;
 $8 = (($7) + ($4))|0;
 $9 = (($7) + ($5))|0;
 $10 = ($3|0)==(8);
 $11 = $5 | $4;
 $12 = ($11|0)==(0);
 $13 = $10 & $12;
 if ($13) {
  _bn_mul_comba8($0,$1,$2);
  return;
 }
 $14 = ($3|0)<(16);
 if ($14) {
  $15 = (($4) + ($3))|0;
  $16 = (($5) + ($3))|0;
  _bn_mul_normal($0,$1,$15,$2,$16);
  $17 = (($5) + ($4))|0;
  $18 = ($17|0)<(0);
  if (!($18)) {
   return;
  }
  $19 = (0 - ($17))|0;
  $20 = $19 << 2;
  $21 = $3 << 1;
  $22 = (($21) + ($4))|0;
  $23 = (($22) + ($5))|0;
  $24 = (($0) + ($23<<2)|0);
  _memset(($24|0),0,($20|0))|0;
  return;
 }
 $25 = (($1) + ($7<<2)|0);
 $26 = (0 - ($4))|0;
 $27 = (_bn_cmp_part_words($1,$25,$8,$26)|0);
 $28 = (($2) + ($7<<2)|0);
 $29 = (_bn_cmp_part_words($28,$2,$9,$5)|0);
 $30 = ($27*3)|0;
 $31 = (($30) + ($29))|0;
 switch ($31|0) {
 case -4:  {
  (_bn_sub_part_words($6,$25,$1,$8,$4)|0);
  $32 = (($6) + ($7<<2)|0);
  $33 = (0 - ($5))|0;
  (_bn_sub_part_words($32,$2,$28,$9,$33)|0);
  $$0234 = 0;$$0235 = 0;
  break;
 }
 case -3:  {
  $$0234 = 1;$$0235 = 0;
  break;
 }
 case -2:  {
  (_bn_sub_part_words($6,$25,$1,$8,$4)|0);
  $34 = (($6) + ($7<<2)|0);
  (_bn_sub_part_words($34,$28,$2,$9,$5)|0);
  $$0234 = 0;$$0235 = 1;
  break;
 }
 case 1: case 0: case -1:  {
  $$0234 = 1;$$0235 = 0;
  break;
 }
 case 2:  {
  (_bn_sub_part_words($6,$1,$25,$8,$26)|0);
  $35 = (($6) + ($7<<2)|0);
  $36 = (0 - ($5))|0;
  (_bn_sub_part_words($35,$2,$28,$9,$36)|0);
  $$0234 = 0;$$0235 = 1;
  break;
 }
 case 3:  {
  $$0234 = 1;$$0235 = 0;
  break;
 }
 case 4:  {
  (_bn_sub_part_words($6,$1,$25,$8,$26)|0);
  $37 = (($6) + ($7<<2)|0);
  (_bn_sub_part_words($37,$28,$2,$9,$5)|0);
  $$0234 = 0;$$0235 = 0;
  break;
 }
 default: {
  $$0234 = 0;$$0235 = 0;
 }
 }
 $38 = $3 & -2;
 $39 = ($38|0)==(8);
 $40 = $39 & $12;
 do {
  if ($40) {
   $41 = (($6) + ($3<<2)|0);
   if ($$0234) {
    ;HEAP32[$41>>2]=0|0;HEAP32[$41+4>>2]=0|0;HEAP32[$41+8>>2]=0|0;HEAP32[$41+12>>2]=0|0;HEAP32[$41+16>>2]=0|0;HEAP32[$41+20>>2]=0|0;HEAP32[$41+24>>2]=0|0;HEAP32[$41+28>>2]=0|0;
   } else {
    $42 = (($6) + ($7<<2)|0);
    _bn_mul_comba4($41,$6,$42);
   }
   _bn_mul_comba4($0,$1,$2);
   $43 = (($0) + ($3<<2)|0);
   _bn_mul_comba4($43,$25,$28);
   $$pre$phi237Z2D = $41;$$pre$phiZ2D = $43;
  } else {
   $44 = ($38|0)==(16);
   $45 = $44 & $12;
   if ($45) {
    $46 = (($6) + ($3<<2)|0);
    if ($$0234) {
     dest=$46; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    } else {
     $47 = (($6) + ($7<<2)|0);
     _bn_mul_comba8($46,$6,$47);
    }
    _bn_mul_comba8($0,$1,$2);
    $48 = (($0) + ($3<<2)|0);
    _bn_mul_comba8($48,$25,$28);
    $$pre$phi237Z2D = $46;$$pre$phiZ2D = $48;
    break;
   } else {
    $49 = $3 << 1;
    $50 = (($6) + ($49<<2)|0);
    $51 = (($6) + ($3<<2)|0);
    if ($$0234) {
     $53 = $3 << 2;
     _memset(($51|0),0,($53|0))|0;
    } else {
     $52 = (($6) + ($7<<2)|0);
     _bn_mul_recursive($51,$6,$52,$7,0,0,$50);
    }
    _bn_mul_recursive($0,$1,$2,$7,0,0,$50);
    $54 = (($0) + ($3<<2)|0);
    _bn_mul_recursive($54,$25,$28,$7,$4,$5,$50);
    $$pre$phi237Z2D = $51;$$pre$phiZ2D = $54;
    break;
   }
  }
 } while(0);
 $55 = (_bn_add_words($6,$0,$$pre$phiZ2D,$3)|0);
 $56 = ($$0235|0)==(0);
 if ($56) {
  $59 = (_bn_add_words($$pre$phi237Z2D,$$pre$phi237Z2D,$6,$3)|0);
  $60 = (($59) + ($55))|0;
  $$0236 = $60;
 } else {
  $57 = (_bn_sub_words($$pre$phi237Z2D,$6,$$pre$phi237Z2D,$3)|0);
  $58 = (($55) - ($57))|0;
  $$0236 = $58;
 }
 $61 = (($0) + ($7<<2)|0);
 $62 = (_bn_add_words($61,$61,$$pre$phi237Z2D,$3)|0);
 $63 = (($62) + ($$0236))|0;
 $64 = ($63|0)==(0);
 if ($64) {
  return;
 }
 $65 = (($7) + ($3))|0;
 $66 = (($0) + ($65<<2)|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + ($63))|0;
 HEAP32[$66>>2] = $68;
 $69 = ($68>>>0)<($63>>>0);
 if ($69) {
  $$0 = $66;
 } else {
  return;
 }
 while(1) {
  $70 = ((($$0)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
  $73 = ($72|0)==(0);
  if ($73) {
   $$0 = $70;
  } else {
   break;
  }
 }
 return;
}
function _bn_mul_normal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04858 = 0, $$059 = 0, $$15156 = 0, $$157 = 0, $$53 = 0, $$54 = 0, $$55 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)<($4|0);
 $$ = $5 ? $4 : $2;
 $$53 = $5 ? $1 : $3;
 $$54 = $5 ? $2 : $4;
 $$55 = $5 ? $3 : $1;
 $6 = (($0) + ($$<<2)|0);
 $7 = ($$54|0)<(1);
 if ($7) {
  (_bn_mul_words($0,$$55,$$,0)|0);
  return;
 }
 $8 = HEAP32[$$53>>2]|0;
 $9 = (_bn_mul_words($0,$$55,$$,$8)|0);
 HEAP32[$6>>2] = $9;
 $10 = ($$54|0)==(1);
 if ($10) {
  return;
 } else {
  $$04858 = $6;$$059 = $0;$$15156 = $$53;$$157 = $$54;
 }
 while(1) {
  $11 = ((($$059)) + 4|0);
  $12 = ((($$15156)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_bn_mul_add_words($11,$$55,$$,$13)|0);
  $15 = ((($$04858)) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = (($$157) + -2)|0;
  $17 = ($16|0)<(1);
  if ($17) {
   label = 8;
   break;
  }
  $18 = ((($$059)) + 8|0);
  $19 = ((($$15156)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_bn_mul_add_words($18,$$55,$$,$20)|0);
  $22 = ((($$04858)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($$157) + -3)|0;
  $24 = ($23|0)<(1);
  if ($24) {
   label = 8;
   break;
  }
  $25 = ((($$059)) + 12|0);
  $26 = ((($$15156)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_bn_mul_add_words($25,$$55,$$,$27)|0);
  $29 = ((($$04858)) + 12|0);
  HEAP32[$29>>2] = $28;
  $30 = (($$157) + -4)|0;
  $31 = ($30|0)<(1);
  if ($31) {
   label = 8;
   break;
  }
  $32 = ((($$059)) + 16|0);
  $33 = ((($$15156)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_bn_mul_add_words($32,$$55,$$,$34)|0);
  $36 = ((($$04858)) + 16|0);
  HEAP32[$36>>2] = $35;
  $37 = ($30|0)==(1);
  if ($37) {
   label = 8;
   break;
  } else {
   $$04858 = $36;$$059 = $32;$$15156 = $33;$$157 = $30;
  }
 }
 if ((label|0) == 8) {
  return;
 }
}
function _bn_mul_part_recursive($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$0 = 0, $$0267 = 0, $$0268 = 0, $$0269 = 0, $$0270 = 0, $$pre$phi277Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond = 0, $or$cond271 = 0, $or$cond272 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = $3 << 1;
 $8 = ($3|0)<(8);
 if ($8) {
  $9 = (($4) + ($3))|0;
  $10 = (($5) + ($3))|0;
  _bn_mul_normal($0,$1,$9,$2,$10);
  return;
 }
 $11 = (($1) + ($3<<2)|0);
 $12 = (($3) - ($4))|0;
 $13 = (_bn_cmp_part_words($1,$11,$4,$12)|0);
 $14 = (($2) + ($3<<2)|0);
 $15 = (($5) - ($3))|0;
 $16 = (_bn_cmp_part_words($14,$2,$5,$15)|0);
 $17 = ($13*3)|0;
 $18 = (($17) + ($16))|0;
 switch ($18|0) {
 case -4:  {
  $19 = (($4) - ($3))|0;
  (_bn_sub_part_words($6,$11,$1,$4,$19)|0);
  $20 = (($6) + ($3<<2)|0);
  $21 = (($3) - ($5))|0;
  (_bn_sub_part_words($20,$2,$14,$5,$21)|0);
  $$0267 = 0;
  break;
 }
 case -2: case -3:  {
  $22 = (($4) - ($3))|0;
  (_bn_sub_part_words($6,$11,$1,$4,$22)|0);
  $23 = (($6) + ($3<<2)|0);
  (_bn_sub_part_words($23,$14,$2,$5,$15)|0);
  $$0267 = 1;
  break;
 }
 case 2: case 1: case 0: case -1:  {
  (_bn_sub_part_words($6,$1,$11,$4,$12)|0);
  $24 = (($6) + ($3<<2)|0);
  $25 = (($3) - ($5))|0;
  (_bn_sub_part_words($24,$2,$14,$5,$25)|0);
  $$0267 = 1;
  break;
 }
 case 4: case 3:  {
  (_bn_sub_part_words($6,$1,$11,$4,$12)|0);
  $26 = (($6) + ($3<<2)|0);
  (_bn_sub_part_words($26,$14,$2,$5,$15)|0);
  $$0267 = 0;
  break;
 }
 default: {
  $$0267 = 0;
 }
 }
 $27 = ($3|0)==(8);
 do {
  if ($27) {
   $28 = (($6) + ($7<<2)|0);
   $29 = ((($6)) + 32|0);
   _bn_mul_comba8($28,$6,$29);
   _bn_mul_comba8($0,$1,$2);
   $30 = (($0) + ($7<<2)|0);
   _bn_mul_normal($30,$11,$4,$14,$5);
   $31 = (($7) + ($4))|0;
   $32 = (($31) + ($5))|0;
   $33 = (($0) + ($32<<2)|0);
   $34 = (($7) - ($4))|0;
   $35 = (($34) - ($5))|0;
   $36 = $35 << 2;
   _memset(($33|0),0,($36|0))|0;
   $$pre$phi277Z2D = $28;$$pre$phiZ2D = $30;
  } else {
   $37 = $3 << 2;
   $38 = (($6) + ($37<<2)|0);
   $39 = (($6) + ($7<<2)|0);
   $40 = (($6) + ($3<<2)|0);
   _bn_mul_recursive($39,$6,$40,$3,0,0,$38);
   _bn_mul_recursive($0,$1,$2,$3,0,0,$38);
   $41 = $3 >>> 1;
   $42 = ($4|0)>($5|0);
   $$ = $42 ? $4 : $5;
   $$0270 = (($$) - ($41))|0;
   $43 = ($$0270|0)==(0);
   if ($43) {
    $44 = (($0) + ($7<<2)|0);
    $45 = (($4) - ($41))|0;
    $46 = (($5) - ($41))|0;
    _bn_mul_recursive($44,$11,$14,$41,$45,$46,$38);
    $47 = $41 << 1;
    $48 = (($47) + ($7))|0;
    $49 = (($0) + ($48<<2)|0);
    $50 = (($7) - ($47))|0;
    $51 = $50 << 2;
    _memset(($49|0),0,($51|0))|0;
    $$pre$phi277Z2D = $39;$$pre$phiZ2D = $44;
    break;
   }
   $52 = ($$0270|0)>(0);
   $53 = (($0) + ($7<<2)|0);
   if ($52) {
    $54 = (($4) - ($41))|0;
    $55 = (($5) - ($41))|0;
    _bn_mul_part_recursive($53,$11,$14,$41,$54,$55,$38);
    $56 = (($7) + ($4))|0;
    $57 = (($56) + ($5))|0;
    $58 = (($0) + ($57<<2)|0);
    $59 = (($7) - ($4))|0;
    $60 = (($59) - ($5))|0;
    $61 = $60 << 2;
    _memset(($58|0),0,($61|0))|0;
    $$pre$phi277Z2D = $39;$$pre$phiZ2D = $53;
    break;
   }
   $62 = $3 << 3;
   _memset(($53|0),0,($62|0))|0;
   $63 = ($4|0)<(16);
   $64 = ($5|0)<(16);
   $or$cond = $63 & $64;
   if ($or$cond) {
    _bn_mul_normal($53,$11,$4,$14,$5);
    $$pre$phi277Z2D = $39;$$pre$phiZ2D = $53;
    break;
   } else {
    $$0268 = $41;
   }
   while(1) {
    $65 = (($$0268|0) / 2)&-1;
    $66 = ($65|0)<($4|0);
    $67 = ($65|0)<($5|0);
    $or$cond271 = $66 | $67;
    if ($or$cond271) {
     label = 17;
     break;
    }
    $70 = ($65|0)==($4|0);
    $71 = ($65|0)==($5|0);
    $or$cond272 = $70 | $71;
    if ($or$cond272) {
     label = 19;
     break;
    } else {
     $$0268 = $65;
    }
   }
   if ((label|0) == 17) {
    $68 = (($4) - ($65))|0;
    $69 = (($5) - ($65))|0;
    _bn_mul_part_recursive($53,$11,$14,$65,$68,$69,$38);
    $$pre$phi277Z2D = $39;$$pre$phiZ2D = $53;
    break;
   }
   else if ((label|0) == 19) {
    $72 = (($4) - ($65))|0;
    $73 = (($5) - ($65))|0;
    _bn_mul_recursive($53,$11,$14,$65,$72,$73,$38);
    $$pre$phi277Z2D = $39;$$pre$phiZ2D = $53;
    break;
   }
  }
 } while(0);
 $74 = (_bn_add_words($6,$0,$$pre$phiZ2D,$7)|0);
 $75 = ($$0267|0)==(0);
 if ($75) {
  $78 = (_bn_add_words($$pre$phi277Z2D,$$pre$phi277Z2D,$6,$7)|0);
  $79 = (($78) + ($74))|0;
  $$0269 = $79;
 } else {
  $76 = (_bn_sub_words($$pre$phi277Z2D,$6,$$pre$phi277Z2D,$7)|0);
  $77 = (($74) - ($76))|0;
  $$0269 = $77;
 }
 $80 = (($0) + ($3<<2)|0);
 $81 = (_bn_add_words($80,$80,$$pre$phi277Z2D,$7)|0);
 $82 = (($81) + ($$0269))|0;
 $83 = ($82|0)==(0);
 if ($83) {
  return;
 }
 $84 = ($3*3)|0;
 $85 = (($0) + ($84<<2)|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + ($82))|0;
 HEAP32[$85>>2] = $87;
 $88 = ($87>>>0)<($82>>>0);
 if ($88) {
  $$0 = $85;
 } else {
  return;
 }
 while(1) {
  $89 = ((($$0)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + 1)|0;
  HEAP32[$89>>2] = $91;
  $92 = ($91|0)==(0);
  if ($92) {
   $$0 = $89;
  } else {
   break;
  }
 }
 return;
}
function _BN_mul($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0112 = 0, $$0113 = 0, $$off = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond114 = 0, $or$cond116 = 0, $or$cond117 = 0, $or$cond3 = 0, $or$cond7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==(0);
 $9 = ($7|0)==(0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  _BN_zero_ex($0);
  $$0 = 1;
  return ($$0|0);
 }
 $10 = (($7) + ($5))|0;
 _BN_CTX_start($3);
 $11 = ($0|0)==($1|0);
 $12 = ($0|0)==($2|0);
 $or$cond114 = $11 | $12;
 if ($or$cond114) {
  $13 = (_BN_CTX_get($3)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0112 = 0;
  } else {
   $$0113 = $13;
   label = 5;
  }
 } else {
  $$0113 = $0;
  label = 5;
 }
 L7: do {
  if ((label|0) == 5) {
   $15 = (($5) - ($7))|0;
   $16 = ($15|0)==(0);
   $17 = ($5|0)==(8);
   $or$cond7 = $17 & $16;
   do {
    if ($or$cond7) {
     $18 = (_bn_wexpand($$0113,16)|0);
     $19 = ($18|0)==(0|0);
     if ($19) {
      $$0112 = 0;
      break L7;
     }
     $20 = ((($$0113)) + 4|0);
     HEAP32[$20>>2] = 16;
     $21 = HEAP32[$$0113>>2]|0;
     $22 = HEAP32[$1>>2]|0;
     $23 = HEAP32[$2>>2]|0;
     _bn_mul_comba8($21,$22,$23);
    } else {
     $24 = ($5|0)>(15);
     $25 = ($7|0)>(15);
     $or$cond3 = $24 & $25;
     $$off = (($15) + 1)|0;
     $26 = ($$off>>>0)<(3);
     $or$cond116 = $or$cond3 & $26;
     if (!($or$cond116)) {
      $58 = (_bn_wexpand($$0113,$10)|0);
      $59 = ($58|0)==(0|0);
      if ($59) {
       $$0112 = 0;
       break L7;
      }
      $60 = ((($$0113)) + 4|0);
      HEAP32[$60>>2] = $10;
      $61 = HEAP32[$$0113>>2]|0;
      $62 = HEAP32[$1>>2]|0;
      $63 = HEAP32[$2>>2]|0;
      _bn_mul_normal($61,$62,$5,$63,$7);
      break;
     }
     $27 = ($15|0)>(-1);
     $$sink = $27 ? $5 : $7;
     $28 = (_BN_num_bits_word($$sink)|0);
     $29 = (($28) + -1)|0;
     $30 = 1 << $29;
     $31 = (_BN_CTX_get($3)|0);
     $32 = ($31|0)==(0|0);
     if ($32) {
      $$0112 = 0;
      break L7;
     }
     $33 = ($5|0)>($30|0);
     $34 = ($7|0)>($30|0);
     $or$cond117 = $33 | $34;
     if ($or$cond117) {
      $35 = $30 << 3;
      $36 = (_bn_wexpand($31,$35)|0);
      $37 = ($36|0)==(0|0);
      if ($37) {
       $$0112 = 0;
       break L7;
      }
      $38 = (_bn_wexpand($$0113,$35)|0);
      $39 = ($38|0)==(0|0);
      if ($39) {
       $$0112 = 0;
       break L7;
      }
      $40 = HEAP32[$$0113>>2]|0;
      $41 = HEAP32[$1>>2]|0;
      $42 = HEAP32[$2>>2]|0;
      $43 = (($5) - ($30))|0;
      $44 = (($7) - ($30))|0;
      $45 = HEAP32[$31>>2]|0;
      _bn_mul_part_recursive($40,$41,$42,$30,$43,$44,$45);
     } else {
      $46 = $30 << 2;
      $47 = (_bn_wexpand($31,$46)|0);
      $48 = ($47|0)==(0|0);
      if ($48) {
       $$0112 = 0;
       break L7;
      }
      $49 = (_bn_wexpand($$0113,$46)|0);
      $50 = ($49|0)==(0|0);
      if ($50) {
       $$0112 = 0;
       break L7;
      }
      $51 = HEAP32[$$0113>>2]|0;
      $52 = HEAP32[$1>>2]|0;
      $53 = HEAP32[$2>>2]|0;
      $54 = (($5) - ($30))|0;
      $55 = (($7) - ($30))|0;
      $56 = HEAP32[$31>>2]|0;
      _bn_mul_recursive($51,$52,$53,$30,$54,$55,$56);
     }
     $57 = ((($$0113)) + 4|0);
     HEAP32[$57>>2] = $10;
    }
   } while(0);
   $64 = ((($1)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($2)) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 ^ $65;
   $69 = ((($$0113)) + 12|0);
   HEAP32[$69>>2] = $68;
   _bn_correct_top($$0113);
   $70 = ($$0113|0)==($0|0);
   if (!($70)) {
    $71 = (_BN_copy($0,$$0113)|0);
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$0112 = 0;
     break;
    }
   }
   $$0112 = 1;
  }
 } while(0);
 _BN_CTX_end($3);
 $$0 = $$0112;
 return ($$0|0);
}
function _BN_GENCB_call($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 L1: do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = HEAP32[$0>>2]|0;
   switch ($4|0) {
   case 1:  {
    break;
   }
   case 2:  {
    $10 = ((($0)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (FUNCTION_TABLE_iiii[$11 & 63]($1,$2,$0)|0);
    $$0 = $12;
    break L1;
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $5 = ((($0)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 1;
   } else {
    $8 = ((($0)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    FUNCTION_TABLE_viii[$6 & 31]($1,$2,$9);
    $$0 = 1;
   }
  }
 } while(0);
 return ($$0|0);
}
function _BN_generate_prime_ex($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$058$$067$i$us = 0, $$058$i$us = 0, $$05979$i = 0, $$05979$i$us = 0, $$06367$i = 0, $$064$i = 0, $$064$us$i$us = 0, $$06782$i$us = 0, $$07690 = 0, $$077 = 0, $$078106 = 0, $$078106$us = 0, $$079 = 0, $$07989 = 0, $$07992 = 0, $$16081$us$i$us = 0, $$26180$i = 0, $$ph = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($1|0)>(1299);
 if ($6) {
  $$ph = 2;
  label = 11;
 } else {
  $7 = ($1|0)>(849);
  if ($7) {
   $$ph = 3;
   label = 11;
  } else {
   $8 = ($1|0)>(649);
   if ($8) {
    $$ph = 4;
    label = 11;
   } else {
    $9 = ($1|0)>(549);
    if ($9) {
     $$ph = 5;
     label = 11;
    } else {
     $10 = ($1|0)>(449);
     if ($10) {
      $$ph = 6;
      label = 11;
     } else {
      $11 = ($1|0)>(399);
      if ($11) {
       $$ph = 7;
       label = 11;
      } else {
       $12 = ($1|0)>(349);
       if ($12) {
        $$ph = 8;
        label = 11;
       } else {
        $13 = ($1|0)>(299);
        if ($13) {
         $$ph = 9;
         label = 11;
        } else {
         $14 = ($1|0)>(249);
         if ($14) {
          $$ph = 12;
          label = 11;
         } else {
          $15 = ($1|0)>(199);
          $16 = ($1|0)>(149);
          $17 = $16 ? 18 : 27;
          if ($15) {
           $$ph = 15;
           label = 11;
          } else {
           $19 = ($1|0)<(2);
           if ($19) {
            _ERR_put_error(3,141,118,0,0);
            $$0 = 0;
            return ($$0|0);
           }
           $20 = ($1|0)==(2);
           $21 = ($2|0)!=(0);
           $or$cond = $20 & $21;
           if ($or$cond) {
            _ERR_put_error(3,141,118,0,0);
            $$0 = 0;
            return ($$0|0);
           } else {
            $150 = $17;$169 = $21;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 11) {
  $18 = ($2|0)!=(0);
  $150 = $$ph;$169 = $18;
 }
 $22 = (_CRYPTO_zalloc(4096,83252,0)|0);
 $23 = ($22|0)==(0|0);
 if ($23) {
  label = 86;
 } else {
  $24 = (_BN_CTX_new()|0);
  $25 = ($24|0)==(0|0);
  if ($25) {
   label = 86;
  } else {
   _BN_CTX_start($24);
   $26 = (_BN_CTX_get($24)|0);
   $27 = ($26|0)==(0|0);
   if ($27) {
    _CRYPTO_free($22,83252,0);
    $$07992 = 0;
   } else {
    $28 = ($3|0)==(0|0);
    $29 = ($1|0)<(33);
    $30 = ($1|0)==(32);
    $31 = 1 << $1;
    $32 = (($31) + -1)|0;
    $33 = ($5|0)==(0|0);
    $34 = ((($5)) + 8|0);
    $35 = ((($5)) + 4|0);
    $36 = ((($5)) + 8|0);
    $37 = (($1) + -1)|0;
    $38 = ($4|0)==(0|0);
    $$077 = 0;
    L27: while(1) {
     L29: do {
      if ($28) {
       $39 = (_BN_rand($0,$1,1,1)|0);
       $40 = ($39|0)==(0);
       if ($40) {
        label = 87;
        break L27;
       }
       if ($29) {
        $$06782$i$us = -17864;
       } else {
        while(1) {
         $$05979$i = 1;
         while(1) {
          $75 = (41536 + ($$05979$i<<1)|0);
          $76 = HEAP16[$75>>1]|0;
          $77 = $76&65535;
          $78 = (_BN_mod_word($0,$77)|0);
          $79 = ($78|0)==(-1);
          if ($79) {
           $$079 = 0;
           break L27;
          }
          $80 = $78&65535;
          $81 = (($22) + ($$05979$i<<1)|0);
          HEAP16[$81>>1] = $80;
          $82 = (($$05979$i) + 1)|0;
          $83 = ($82|0)<(2048);
          if ($83) {
           $$05979$i = $82;
          } else {
           $$064$i = 0;
           break;
          }
         }
         L38: while(1) {
          $$26180$i = 1;
          while(1) {
           $86 = (($22) + ($$26180$i<<1)|0);
           $87 = HEAP16[$86>>1]|0;
           $88 = $87&65535;
           $89 = (($88) + ($$064$i))|0;
           $90 = (41536 + ($$26180$i<<1)|0);
           $91 = HEAP16[$90>>1]|0;
           $92 = $91&65535;
           $93 = (($89>>>0) % ($92>>>0))&-1;
           $94 = ($93>>>0)<(2);
           $84 = (($$26180$i) + 1)|0;
           if ($94) {
            break;
           }
           $85 = ($84|0)<(2048);
           if ($85) {
            $$26180$i = $84;
           } else {
            label = 43;
            break L38;
           }
          }
          $95 = (($$064$i) + 2)|0;
          $96 = ($95>>>0)>(4294949432);
          if ($96) {
           break;
          } else {
           $$064$i = $95;
          }
         }
         if ((label|0) == 43) {
          label = 0;
          $97 = (_BN_add_word($0,$$064$i)|0);
          $98 = ($97|0)==(0);
          if ($98) {
           $$079 = 0;
           break L27;
          }
          $99 = (_BN_num_bits($0)|0);
          $100 = ($99|0)==($1|0);
          if ($100) {
           break L29;
          }
         }
         $101 = (_BN_rand($0,$1,1,1)|0);
         $102 = ($101|0)==(0);
         if ($102) {
          $$079 = 0;
          break L27;
         }
        }
       }
       while(1) {
        $$05979$i$us = 1;
        while(1) {
         $41 = (41536 + ($$05979$i$us<<1)|0);
         $42 = HEAP16[$41>>1]|0;
         $43 = $42&65535;
         $44 = (_BN_mod_word($0,$43)|0);
         $45 = ($44|0)==(-1);
         if ($45) {
          $$079 = 0;
          break L27;
         }
         $46 = $44&65535;
         $47 = (($22) + ($$05979$i$us<<1)|0);
         HEAP16[$47>>1] = $46;
         $48 = (($$05979$i$us) + 1)|0;
         $49 = ($48|0)<(2048);
         if ($49) {
          $$05979$i$us = $48;
         } else {
          break;
         }
        }
        $50 = (_BN_get_word($0)|0);
        $51 = $50 ^ -1;
        $52 = (($32) - ($50))|0;
        $$058$i$us = $30 ? $51 : $52;
        $53 = ($$058$i$us>>>0)<($$06782$i$us>>>0);
        $$058$$067$i$us = $53 ? $$058$i$us : $$06782$i$us;
        $$064$us$i$us = 0;
        L54: while(1) {
         $54 = (_BN_get_word($0)|0);
         $$16081$us$i$us = 1;
         while(1) {
          $55 = (41536 + ($$16081$us$i$us<<1)|0);
          $56 = HEAP16[$55>>1]|0;
          $57 = $56&65535;
          $58 = ($57>>>0)<($54>>>0);
          if (!($58)) {
           label = 35;
           break L54;
          }
          $59 = (($22) + ($$16081$us$i$us<<1)|0);
          $60 = HEAP16[$59>>1]|0;
          $61 = $60&65535;
          $62 = (($61) + ($$064$us$i$us))|0;
          $63 = (($62>>>0) % ($57>>>0))&-1;
          $64 = ($63|0)==(0);
          $65 = (($$16081$us$i$us) + 1)|0;
          if ($64) {
           break;
          }
          $66 = ($65|0)<(2048);
          if ($66) {
           $$16081$us$i$us = $65;
          } else {
           label = 35;
           break L54;
          }
         }
         $69 = (($$064$us$i$us) + 2)|0;
         $70 = ($69>>>0)>($$058$$067$i$us>>>0);
         if ($70) {
          break;
         } else {
          $$064$us$i$us = $69;
         }
        }
        if ((label|0) == 35) {
         label = 0;
         $73 = (_BN_add_word($0,$$064$us$i$us)|0);
         $74 = ($73|0)==(0);
         if ($74) {
          $$079 = 0;
          break L27;
         }
         $67 = (_BN_num_bits($0)|0);
         $68 = ($67|0)==($1|0);
         if ($68) {
          break L29;
         }
        }
        $71 = (_BN_rand($0,$1,1,1)|0);
        $72 = ($71|0)==(0);
        if ($72) {
         $$079 = 0;
         break L27;
        } else {
         $$06782$i$us = $$058$$067$i$us;
        }
       }
      } else {
       if (!($169)) {
        $140 = (_bn_probable_prime_dh($0,$1,$3,$4,$24)|0);
        $141 = ($140|0)==(0);
        if ($141) {
         label = 87;
         break L27;
        } else {
         break;
        }
       }
       _BN_CTX_start($24);
       $103 = (_BN_CTX_get($24)|0);
       $104 = (_BN_CTX_get($24)|0);
       $105 = (_BN_CTX_get($24)|0);
       $106 = ($105|0)==(0|0);
       if ($106) {
        label = 64;
        break L27;
       }
       $107 = (_BN_rshift1($105,$3)|0);
       $108 = ($107|0)==(0);
       if ($108) {
        label = 64;
        break L27;
       }
       $109 = (_BN_rand($104,$37,0,1)|0);
       $110 = ($109|0)==(0);
       if ($110) {
        label = 64;
        break L27;
       }
       $111 = (_BN_div(0,$103,$104,$105,$24)|0);
       $112 = ($111|0)==(0);
       if ($112) {
        label = 64;
        break L27;
       }
       $113 = (_BN_sub($104,$104,$103)|0);
       $114 = ($113|0)==(0);
       if ($114) {
        label = 64;
        break L27;
       }
       if ($38) {
        $115 = (_BN_add_word($104,1)|0);
        $116 = ($115|0)==(0);
        if ($116) {
         label = 64;
         break L27;
        }
       } else {
        $117 = (_BN_rshift1($103,$4)|0);
        $118 = ($117|0)==(0);
        if ($118) {
         label = 64;
         break L27;
        }
        $119 = (_BN_add($104,$104,$103)|0);
        $120 = ($119|0)==(0);
        if ($120) {
         label = 64;
         break L27;
        }
       }
       $121 = (_BN_lshift1($0,$104)|0);
       $122 = ($121|0)==(0);
       if ($122) {
        label = 64;
        break L27;
       }
       $123 = (_BN_add_word($0,1)|0);
       $124 = ($123|0)==(0);
       if ($124) {
        label = 64;
        break L27;
       }
       L80: while(1) {
        $$06367$i = 1;
        while(1) {
         $127 = (41536 + ($$06367$i<<1)|0);
         $128 = HEAP16[$127>>1]|0;
         $129 = $128&65535;
         $130 = (_BN_mod_word($0,$129)|0);
         $131 = (_BN_mod_word($104,$129)|0);
         $132 = ($130|0)==(-1);
         $133 = ($131|0)==(-1);
         $or$cond$i = $132 | $133;
         if ($or$cond$i) {
          label = 64;
          break L27;
         }
         $134 = ($130|0)==(0);
         $135 = ($131|0)==(0);
         $or$cond3$i = $134 | $135;
         $125 = (($$06367$i) + 1)|0;
         if ($or$cond3$i) {
          break;
         }
         $126 = ($125|0)<(2048);
         if ($126) {
          $$06367$i = $125;
         } else {
          break L80;
         }
        }
        $136 = (_BN_add($0,$0,$3)|0);
        $137 = ($136|0)==(0);
        if ($137) {
         label = 64;
         break L27;
        }
        $138 = (_BN_add($104,$104,$105)|0);
        $139 = ($138|0)==(0);
        if ($139) {
         label = 64;
         break L27;
        }
       }
       _BN_CTX_end($24);
      }
     } while(0);
     $142 = (($$077) + 1)|0;
     L90: do {
      if (!($33)) {
       $143 = HEAP32[$5>>2]|0;
       switch ($143|0) {
       case 1:  {
        break;
       }
       case 2:  {
        $147 = HEAP32[$36>>2]|0;
        $148 = (FUNCTION_TABLE_iiii[$147 & 63](0,$$077,$5)|0);
        $149 = ($148|0)==(0);
        if ($149) {
         label = 87;
         break L27;
        } else {
         break L90;
        }
        break;
       }
       default: {
        label = 87;
        break L27;
       }
       }
       $144 = HEAP32[$34>>2]|0;
       $145 = ($144|0)==(0|0);
       if (!($145)) {
        $146 = HEAP32[$35>>2]|0;
        FUNCTION_TABLE_viii[$144 & 31](0,$$077,$146);
       }
      }
     } while(0);
     if (!($169)) {
      $151 = (_BN_is_prime_fasttest_ex($0,$150,$24,0,$5)|0);
      switch ($151|0) {
      case 0:  {
       $$077 = $142;
       continue L27;
       break;
      }
      case -1:  {
       label = 87;
       break L27;
       break;
      }
      default: {
       $$079 = 1;
       break L27;
      }
      }
     }
     $152 = (_BN_rshift1($26,$0)|0);
     $153 = ($152|0)==(0);
     if ($153) {
      label = 87;
      break;
     }
     if ($33) {
      $$078106$us = 0;
      while(1) {
       $154 = (_BN_is_prime_fasttest_ex($0,1,$24,0,0)|0);
       switch ($154|0) {
       case 0:  {
        $$077 = $142;
        continue L27;
        break;
       }
       case -1:  {
        $$079 = 0;
        break L27;
        break;
       }
       default: {
       }
       }
       $155 = (_BN_is_prime_fasttest_ex($26,1,$24,0,0)|0);
       switch ($155|0) {
       case 0:  {
        $$077 = $142;
        continue L27;
        break;
       }
       case -1:  {
        $$079 = 0;
        break L27;
        break;
       }
       default: {
       }
       }
       $156 = (($$078106$us) + 1)|0;
       $157 = ($156|0)<($150|0);
       if ($157) {
        $$078106$us = $156;
       } else {
        $$079 = 1;
        break L27;
       }
      }
     } else {
      $$078106 = 0;
     }
     while(1) {
      $158 = (_BN_is_prime_fasttest_ex($0,1,$24,0,$5)|0);
      switch ($158|0) {
      case 0:  {
       $$077 = $142;
       continue L27;
       break;
      }
      case -1:  {
       $$079 = 0;
       break L27;
       break;
      }
      default: {
      }
      }
      $159 = (_BN_is_prime_fasttest_ex($26,1,$24,0,$5)|0);
      switch ($159|0) {
      case 0:  {
       $$077 = $142;
       continue L27;
       break;
      }
      case -1:  {
       $$079 = 0;
       break L27;
       break;
      }
      default: {
      }
      }
      $160 = HEAP32[$5>>2]|0;
      switch ($160|0) {
      case 1:  {
       $161 = HEAP32[$34>>2]|0;
       $162 = ($161|0)==(0|0);
       if (!($162)) {
        $163 = HEAP32[$35>>2]|0;
        FUNCTION_TABLE_viii[$161 & 31](2,$$077,$163);
       }
       break;
      }
      case 2:  {
       $164 = HEAP32[$36>>2]|0;
       $165 = (FUNCTION_TABLE_iiii[$164 & 63](2,$$077,$5)|0);
       $166 = ($165|0)==(0);
       if ($166) {
        $$079 = 0;
        break L27;
       }
       break;
      }
      default: {
       $$079 = 0;
       break L27;
      }
      }
      $167 = (($$078106) + 1)|0;
      $168 = ($167|0)<($150|0);
      if ($168) {
       $$078106 = $167;
      } else {
       $$079 = 1;
       break L27;
      }
     }
    }
    if ((label|0) == 64) {
     _BN_CTX_end($24);
     $$079 = 0;
    }
    else if ((label|0) == 87) {
     $$079 = 0;
    }
    _CRYPTO_free($22,83252,0);
    $$07992 = $$079;
   }
   _BN_CTX_end($24);
   $$07690 = $24;$$07989 = $$07992;
  }
 }
 if ((label|0) == 86) {
  _CRYPTO_free($22,83252,0);
  $$07690 = 0;$$07989 = 0;
 }
 _BN_CTX_free($$07690);
 $$0 = $$07989;
 return ($$0|0);
}
function _bn_probable_prime_dh($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$03539 = 0, $$036 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($4);
 $5 = (_BN_CTX_get($4)|0);
 $6 = ($5|0)==(0|0);
 L1: do {
  if ($6) {
   $$036 = 0;
  } else {
   $7 = (_BN_rand($0,$1,0,1)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$036 = 0;
   } else {
    $9 = (_BN_div(0,$5,$0,$2,$4)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $$036 = 0;
    } else {
     $11 = (_BN_sub($0,$0,$5)|0);
     $12 = ($11|0)==(0);
     if ($12) {
      $$036 = 0;
     } else {
      $13 = ($3|0)==(0|0);
      if ($13) {
       $14 = (_BN_add_word($0,1)|0);
       $15 = ($14|0)==(0);
       if ($15) {
        $$036 = 0;
        break;
       }
      } else {
       $16 = (_BN_add($0,$0,$3)|0);
       $17 = ($16|0)==(0);
       if ($17) {
        $$036 = 0;
        break;
       }
      }
      while(1) {
       $$03539 = 1;
       while(1) {
        $20 = (41536 + ($$03539<<1)|0);
        $21 = HEAP16[$20>>1]|0;
        $22 = $21&65535;
        $23 = (_BN_mod_word($0,$22)|0);
        $24 = ($23|0)==(-1);
        if ($24) {
         $$036 = 0;
         break L1;
        }
        $25 = ($23>>>0)<(2);
        $18 = (($$03539) + 1)|0;
        if ($25) {
         break;
        }
        $19 = ($18|0)<(2048);
        if ($19) {
         $$03539 = $18;
        } else {
         $$036 = 1;
         break L1;
        }
       }
       $26 = (_BN_add($0,$0,$2)|0);
       $27 = ($26|0)==(0);
       if ($27) {
        $$036 = 0;
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($4);
 return ($$036|0);
}
function _BN_is_prime_fasttest_ex($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$018$i = 0, $$018$i$us = 0, $$088 = 0, $$088106 = 0, $$088111 = 0, $$089 = 0, $$090127 = 0, $$092 = 0, $$092105 = 0, $$092110 = 0, $$093 = 0, $$095 = 0, $$191117 = 0, $$191117$us = 0, $$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch$select = 0, $switch$select97 = 0;
 var $switch$select97$clear = 0, $switch$selectcmp = 0, $switch$selectcmp96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_BN_value_one()|0);
 $6 = (_BN_cmp($0,$5)|0);
 $7 = ($6|0)<(1);
 if ($7) {
  $$2 = 0;
  return ($$2|0);
 }
 $8 = ($1|0)==(0);
 if ($8) {
  $9 = (_BN_num_bits($0)|0);
  $10 = ($9|0)>(1299);
  if ($10) {
   $$089 = 2;
  } else {
   $11 = (_BN_num_bits($0)|0);
   $12 = ($11|0)>(849);
   if ($12) {
    $$089 = 3;
   } else {
    $13 = (_BN_num_bits($0)|0);
    $14 = ($13|0)>(649);
    if ($14) {
     $$089 = 4;
    } else {
     $15 = (_BN_num_bits($0)|0);
     $16 = ($15|0)>(549);
     if ($16) {
      $$089 = 5;
     } else {
      $17 = (_BN_num_bits($0)|0);
      $18 = ($17|0)>(449);
      if ($18) {
       $$089 = 6;
      } else {
       $19 = (_BN_num_bits($0)|0);
       $20 = ($19|0)>(399);
       if ($20) {
        $$089 = 7;
       } else {
        $21 = (_BN_num_bits($0)|0);
        $22 = ($21|0)>(349);
        if ($22) {
         $$089 = 8;
        } else {
         $23 = (_BN_num_bits($0)|0);
         $24 = ($23|0)>(299);
         if ($24) {
          $$089 = 9;
         } else {
          $25 = (_BN_num_bits($0)|0);
          $26 = ($25|0)>(249);
          if ($26) {
           $$089 = 12;
          } else {
           $27 = (_BN_num_bits($0)|0);
           $28 = ($27|0)>(199);
           if ($28) {
            $$089 = 15;
           } else {
            $29 = (_BN_num_bits($0)|0);
            $30 = ($29|0)>(149);
            $31 = $30 ? 18 : 27;
            $$089 = $31;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } else {
  $$089 = $1;
 }
 $32 = (_BN_is_odd($0)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = (_BN_is_word($0,2)|0);
  $$2 = $34;
  return ($$2|0);
 }
 $35 = ($3|0)==(0);
 L21: do {
  if ($35) {
   label = 24;
  } else {
   $$090127 = 1;
   L22: while(1) {
    $36 = (41536 + ($$090127<<1)|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37&65535;
    $39 = (_BN_mod_word($0,$38)|0);
    $switch$selectcmp = ($39|0)==(0);
    $switch$select = $switch$selectcmp&1;
    $switch$selectcmp96 = ($39|0)==(-1);
    $switch$select97 = $switch$selectcmp96 ? 5 : $switch$select;
    $switch$select97$clear = $switch$select97 & 7;
    switch ($switch$select97$clear<<24>>24) {
    case 5:  {
     $$088106 = 0;$$092105 = -1;
     break L21;
     break;
    }
    case 0:  {
     break;
    }
    default: {
     $$2 = 0;
     label = 64;
     break L22;
    }
    }
    $40 = (($$090127) + 1)|0;
    $41 = ($40|0)<(2048);
    if ($41) {
     $$090127 = $40;
    } else {
     break;
    }
   }
   if ((label|0) == 64) {
    return ($$2|0);
   }
   $42 = ($4|0)==(0|0);
   if ($42) {
    label = 24;
   } else {
    $43 = HEAP32[$4>>2]|0;
    switch ($43|0) {
    case 1:  {
     break;
    }
    case 2:  {
     $49 = ((($4)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (FUNCTION_TABLE_iiii[$50 & 63](1,-1,$4)|0);
     $52 = ($51|0)==(0);
     if ($52) {
      $$088106 = 0;$$092105 = -1;
      break L21;
     } else {
      label = 24;
      break L21;
     }
     break;
    }
    default: {
     $$088106 = 0;$$092105 = -1;
     break L21;
    }
    }
    $44 = ((($4)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(0|0);
    if ($46) {
     label = 24;
    } else {
     $47 = ((($4)) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     FUNCTION_TABLE_viii[$45 & 31](1,-1,$48);
     label = 24;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 24) {
   $53 = ($2|0)==(0|0);
   if ($53) {
    $54 = (_BN_CTX_new()|0);
    $55 = ($54|0)==(0|0);
    if ($55) {
     $$088106 = 0;$$092105 = -1;
     break;
    } else {
     $$093 = $54;
    }
   } else {
    $$093 = $2;
   }
   _BN_CTX_start($$093);
   $56 = (_BN_CTX_get($$093)|0);
   $57 = (_BN_CTX_get($$093)|0);
   $58 = (_BN_CTX_get($$093)|0);
   $59 = ($58|0)==(0|0);
   if ($59) {
    $$088111 = 0;$$092110 = -1;
   } else {
    $60 = (_BN_copy($56,$0)|0);
    $61 = ($60|0)==(0|0);
    if ($61) {
     $$088111 = 0;$$092110 = -1;
    } else {
     $62 = (_BN_sub_word($56,1)|0);
     $63 = ($62|0)==(0);
     if ($63) {
      $$088111 = 0;$$092110 = -1;
     } else {
      $64 = (_BN_is_zero($56)|0);
      $65 = ($64|0)==(0);
      if ($65) {
       $$095 = 1;
       while(1) {
        $66 = (_BN_is_bit_set($56,$$095)|0);
        $67 = ($66|0)==(0);
        $68 = (($$095) + 1)|0;
        if ($67) {
         $$095 = $68;
        } else {
         break;
        }
       }
       $69 = (_BN_rshift($57,$56,$$095)|0);
       $70 = ($69|0)==(0);
       L45: do {
        if ($70) {
         $$088 = 0;$$092 = -1;
        } else {
         $71 = (_BN_MONT_CTX_new()|0);
         $72 = ($71|0)==(0|0);
         if ($72) {
          $$088 = 0;$$092 = -1;
         } else {
          $73 = (_BN_MONT_CTX_set($71,$0,$$093)|0);
          $74 = ($73|0)==(0);
          if ($74) {
           $$088 = $71;$$092 = -1;
          } else {
           $75 = ($$089|0)>(0);
           if ($75) {
            $76 = ($4|0)==(0|0);
            $77 = ((($4)) + 8|0);
            $78 = ((($4)) + 4|0);
            $79 = ((($4)) + 8|0);
            if ($76) {
             $$191117$us = 0;
             while(1) {
              $80 = (_BN_pseudo_rand_range($58,$56)|0);
              $81 = ($80|0)==(0);
              if ($81) {
               $$088 = $71;$$092 = -1;
               break L45;
              }
              $82 = (_BN_add_word($58,1)|0);
              $83 = ($82|0)==(0);
              if ($83) {
               $$088 = $71;$$092 = -1;
               break L45;
              }
              $84 = (_BN_mod_exp_mont($58,$58,$57,$0,$$093,$71)|0);
              $85 = ($84|0)==(0);
              if ($85) {
               $$088 = $71;$$092 = -1;
               break L45;
              }
              $86 = (_BN_is_one($58)|0);
              $87 = ($86|0)==(0);
              do {
               if ($87) {
                $88 = (_BN_cmp($58,$56)|0);
                $89 = ($88|0)==(0);
                if ($89) {
                 break;
                } else {
                 $$018$i$us = $$095;
                }
                while(1) {
                 $90 = (($$018$i$us) + -1)|0;
                 $91 = ($90|0)==(0);
                 if ($91) {
                  $$088 = $71;$$092 = 0;
                  break L45;
                 }
                 $92 = (_BN_mod_mul($58,$58,$58,$0,$$093)|0);
                 $93 = ($92|0)==(0);
                 if ($93) {
                  $$088 = $71;$$092 = -1;
                  break L45;
                 }
                 $94 = (_BN_is_one($58)|0);
                 $95 = ($94|0)==(0);
                 if (!($95)) {
                  $$088 = $71;$$092 = 0;
                  break L45;
                 }
                 $96 = (_BN_cmp($58,$56)|0);
                 $97 = ($96|0)==(0);
                 if ($97) {
                  break;
                 } else {
                  $$018$i$us = $90;
                 }
                }
               }
              } while(0);
              $98 = (($$191117$us) + 1)|0;
              $99 = ($98|0)<($$089|0);
              if ($99) {
               $$191117$us = $98;
              } else {
               $$088 = $71;$$092 = 1;
               break L45;
              }
             }
            } else {
             $$191117 = 0;
            }
            while(1) {
             $100 = (_BN_pseudo_rand_range($58,$56)|0);
             $101 = ($100|0)==(0);
             if ($101) {
              $$088 = $71;$$092 = -1;
              break L45;
             }
             $102 = (_BN_add_word($58,1)|0);
             $103 = ($102|0)==(0);
             if ($103) {
              $$088 = $71;$$092 = -1;
              break L45;
             }
             $104 = (_BN_mod_exp_mont($58,$58,$57,$0,$$093,$71)|0);
             $105 = ($104|0)==(0);
             if ($105) {
              $$088 = $71;$$092 = -1;
              break L45;
             }
             $106 = (_BN_is_one($58)|0);
             $107 = ($106|0)==(0);
             do {
              if ($107) {
               $108 = (_BN_cmp($58,$56)|0);
               $109 = ($108|0)==(0);
               if ($109) {
                break;
               } else {
                $$018$i = $$095;
               }
               while(1) {
                $110 = (($$018$i) + -1)|0;
                $111 = ($110|0)==(0);
                if ($111) {
                 $$088 = $71;$$092 = 0;
                 break L45;
                }
                $112 = (_BN_mod_mul($58,$58,$58,$0,$$093)|0);
                $113 = ($112|0)==(0);
                if ($113) {
                 $$088 = $71;$$092 = -1;
                 break L45;
                }
                $114 = (_BN_is_one($58)|0);
                $115 = ($114|0)==(0);
                if (!($115)) {
                 $$088 = $71;$$092 = 0;
                 break L45;
                }
                $116 = (_BN_cmp($58,$56)|0);
                $117 = ($116|0)==(0);
                if ($117) {
                 break;
                } else {
                 $$018$i = $110;
                }
               }
              }
             } while(0);
             $118 = HEAP32[$4>>2]|0;
             L77: do {
              switch ($118|0) {
              case 1:  {
               $119 = HEAP32[$77>>2]|0;
               $120 = ($119|0)==(0|0);
               if ($120) {
                break L77;
               }
               $121 = HEAP32[$78>>2]|0;
               FUNCTION_TABLE_viii[$119 & 31](1,$$191117,$121);
               break;
              }
              case 2:  {
               $122 = HEAP32[$79>>2]|0;
               $123 = (FUNCTION_TABLE_iiii[$122 & 63](1,$$191117,$4)|0);
               $124 = ($123|0)==(0);
               if ($124) {
                $$088 = $71;$$092 = -1;
                break L45;
               }
               break;
              }
              default: {
               $$088 = $71;$$092 = -1;
               break L45;
              }
              }
             } while(0);
             $125 = (($$191117) + 1)|0;
             $126 = ($125|0)<($$089|0);
             if ($126) {
              $$191117 = $125;
             } else {
              $$088 = $71;$$092 = 1;
              break L45;
             }
            }
           } else {
            $$088 = $71;$$092 = 1;
           }
          }
         }
        }
       } while(0);
       $127 = ($$093|0)==(0|0);
       if ($127) {
        $$088106 = $$088;$$092105 = $$092;
        break;
       } else {
        $$088111 = $$088;$$092110 = $$092;
       }
      } else {
       $$088111 = 0;$$092110 = 0;
      }
     }
    }
   }
   _BN_CTX_end($$093);
   if ($53) {
    _BN_CTX_free($$093);
    $$088106 = $$088111;$$092105 = $$092110;
   } else {
    $$088106 = $$088111;$$092105 = $$092110;
   }
  }
 } while(0);
 _BN_MONT_CTX_free($$088106);
 $$2 = $$092105;
 return ($$2|0);
}
function _BN_bn2dec($0) {
 $0 = $0|0;
 var $$0 = 0, $$063$lcssa = 0, $$06378 = 0, $$065$ph = 0, $$166 = 0, $$177 = 0, $$276 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_BN_num_bits($0)|0);
 $2 = ($1*3)|0;
 $3 = (($2|0) / 10)&-1;
 $4 = (($2|0) / 1000)&-1;
 $5 = (($3) + ($4))|0;
 $6 = (($5) + 2)|0;
 $7 = (($6|0) / 9)&-1;
 $8 = $7 << 2;
 $9 = (($8) + 4)|0;
 $10 = (_CRYPTO_malloc($9,83252,0)|0);
 $11 = (($5) + 5)|0;
 $12 = (_CRYPTO_malloc($11,83252,0)|0);
 $13 = ($12|0)==(0|0);
 $14 = ($10|0)==(0|0);
 $or$cond = $14 | $13;
 L1: do {
  if ($or$cond) {
   _ERR_put_error(3,104,65,0,0);
   _CRYPTO_free($10,83252,0);
   _BN_free(0);
  } else {
   $15 = (_BN_dup($0)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    _CRYPTO_free($10,83252,0);
    _BN_free(0);
    break;
   }
   $17 = (_BN_is_zero($15)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $20 = (_BN_is_negative($15)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $$065$ph = $12;
    } else {
     $22 = ((($12)) + 1|0);
     HEAP8[$12>>0] = 45;
     $$065$ph = $22;
    }
    $23 = (_BN_is_zero($15)|0);
    $24 = ($23|0)==(0);
    L12: do {
     if ($24) {
      $25 = $10;
      $$06378 = $10;
      while(1) {
       $26 = $$06378;
       $27 = (($26) - ($25))|0;
       $28 = $27 >> 2;
       $29 = ($28|0)>($7|0);
       if ($29) {
        label = 21;
        break;
       }
       $30 = (_BN_div_word($15,1000000000)|0);
       HEAP32[$$06378>>2] = $30;
       $31 = ($30|0)==(-1);
       if ($31) {
        label = 22;
        break;
       }
       $32 = ((($$06378)) + 4|0);
       $33 = (_BN_is_zero($15)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        $$06378 = $32;
       } else {
        $$063$lcssa = $32;
        break L12;
       }
      }
      if ((label|0) == 21) {
       _CRYPTO_free($10,83252,0);
       _BN_free($15);
       break L1;
      }
      else if ((label|0) == 22) {
       _CRYPTO_free($10,83252,0);
       _BN_free($15);
       break L1;
      }
     } else {
      $$063$lcssa = $10;
     }
    } while(0);
    $35 = ((($$063$lcssa)) + -4|0);
    $36 = $$065$ph;
    $37 = $12;
    $38 = (($11) + ($37))|0;
    $39 = (($38) - ($36))|0;
    $40 = HEAP32[$35>>2]|0;
    HEAP32[$vararg_buffer>>2] = $40;
    (_BIO_snprintf($$065$ph,$39,48042,$vararg_buffer)|0);
    $$166 = $$065$ph;
    while(1) {
     $41 = HEAP8[$$166>>0]|0;
     $42 = ($41<<24>>24)==(0);
     $43 = ((($$166)) + 1|0);
     if ($42) {
      break;
     } else {
      $$166 = $43;
     }
    }
    $44 = ($35|0)==($10|0);
    if (!($44)) {
     $$177 = $35;$$276 = $$166;
     while(1) {
      $45 = ((($$177)) + -4|0);
      $47 = $$276;
      $48 = (($38) - ($47))|0;
      $49 = HEAP32[$45>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $49;
      (_BIO_snprintf($$276,$48,48045,$vararg_buffer1)|0);
      $$3 = $$276;
      while(1) {
       $50 = HEAP8[$$3>>0]|0;
       $51 = ($50<<24>>24)==(0);
       $52 = ((($$3)) + 1|0);
       if ($51) {
        break;
       } else {
        $$3 = $52;
       }
      }
      $46 = ($45|0)==($10|0);
      if ($46) {
       break;
      } else {
       $$177 = $45;$$276 = $$3;
      }
     }
    }
   } else {
    $19 = ((($12)) + 1|0);
    HEAP8[$12>>0] = 48;
    HEAP8[$19>>0] = 0;
   }
   _CRYPTO_free($10,83252,0);
   _BN_free($15);
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _CRYPTO_free($12,83252,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _BN_hex2bn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$066 = 0, $$067 = 0, $$06878 = 0, $$06878$ = 0, $$06979 = 0, $$070 = 0, $$071$lcssa = 0, $$07177 = 0, $$072 = 0, $$073 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP8[$1>>0]|0;
 switch ($3<<24>>24) {
 case 45:  {
  $4 = ((($1)) + 1|0);
  $$066 = $4;$$072 = 1;
  break;
 }
 case 0:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$066 = $1;$$072 = 0;
 }
 }
 $$06979 = 0;
 while(1) {
  $5 = (($$066) + ($$06979)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (_isxdigit($7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   label = 7;
   break;
  }
  $10 = (($$06979) + 1)|0;
  $11 = ($10|0)<(536870912);
  if ($11) {
   $$06979 = $10;
  } else {
   $$1 = 0;
   break;
  }
 }
 do {
  if ((label|0) == 7) {
   $12 = ($$06979|0)==(0);
   if ($12) {
    $$1 = 0;
   } else {
    $13 = (($$06979) + ($$072))|0;
    $14 = ($0|0)==(0|0);
    if ($14) {
     $$0 = $13;
     return ($$0|0);
    }
    $15 = HEAP32[$0>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $17 = (_BN_new()|0);
     $18 = ($17|0)==(0|0);
     if ($18) {
      $$0 = 0;
      return ($$0|0);
     } else {
      $$067 = $17;
     }
    } else {
     _BN_zero_ex($15);
     $$067 = $15;
    }
    $19 = $$06979 << 2;
    $20 = ($19|0)>(2147483616);
    if ($20) {
     $$1 = $$067;
    } else {
     $21 = (($19) + 31)|0;
     $22 = (($21|0) / 32)&-1;
     $23 = ((($$067)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($22|0)>($24|0);
     if ($25) {
      $26 = (_bn_expand2($$067,$22)|0);
      $27 = ($26|0)==(0|0);
      if ($27) {
       $$1 = $$067;
       break;
      }
     }
     $28 = ($$06979|0)>(0);
     if ($28) {
      $29 = $$06979 ^ -1;
      $30 = ($29|0)>(-9);
      $smax = $30 ? $29 : -9;
      $31 = (($$06979) + ($smax))|0;
      $32 = (($31) + 8)|0;
      $33 = $32 >>> 3;
      $34 = (($33) + 1)|0;
      $$06878 = $$06979;$$07177 = 0;
      while(1) {
       $35 = ($$06878|0)<(8);
       $$06878$ = $35 ? $$06878 : 8;
       $$070 = $$06878$;$$073 = 0;
       while(1) {
        $36 = (($$06878) - ($$070))|0;
        $37 = (($$066) + ($36)|0);
        $38 = HEAP8[$37>>0]|0;
        $39 = (_OPENSSL_hexchar2int($38)|0);
        $40 = ($39|0)>(0);
        $$ = $40 ? $39 : 0;
        $41 = $$073 << 4;
        $42 = $$ | $41;
        $43 = (($$070) + -1)|0;
        $44 = ($$070|0)<(2);
        if ($44) {
         break;
        } else {
         $$070 = $43;$$073 = $42;
        }
       }
       $45 = HEAP32[$$067>>2]|0;
       $46 = (($$07177) + 1)|0;
       $47 = (($45) + ($$07177<<2)|0);
       HEAP32[$47>>2] = $42;
       $48 = (($$06878) + -8)|0;
       $exitcond = ($46|0)==($34|0);
       if ($exitcond) {
        $$071$lcssa = $34;
        break;
       } else {
        $$06878 = $48;$$07177 = $46;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $49 = ((($$067)) + 4|0);
     HEAP32[$49>>2] = $$071$lcssa;
     _bn_correct_top($$067);
     HEAP32[$0>>2] = $$067;
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==(0);
     if ($51) {
      $$0 = $13;
      return ($$0|0);
     }
     $52 = ((($$067)) + 12|0);
     HEAP32[$52>>2] = $$072;
     $$0 = $13;
     return ($$0|0);
    }
   }
  }
 } while(0);
 $53 = HEAP32[$0>>2]|0;
 $54 = ($53|0)==(0|0);
 if (!($54)) {
  $$0 = 0;
  return ($$0|0);
 }
 _BN_free($$1);
 $$0 = 0;
 return ($$0|0);
}
function _BN_dec2bn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$051$be = 0, $$05165 = 0, $$05266 = 0, $$053 = 0, $$054$be = 0, $$05464 = 0, $$055 = 0, $$057 = 0, $$156 = 0, $$15863 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP8[$1>>0]|0;
 switch ($3<<24>>24) {
 case 45:  {
  $4 = ((($1)) + 1|0);
  $$053 = 1;$$057 = $4;
  break;
 }
 case 0:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$053 = 0;$$057 = $1;
 }
 }
 $$05266 = 0;
 while(1) {
  $5 = (($$057) + ($$05266)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $isdigittmp = (($7) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if (!($isdigit)) {
   label = 7;
   break;
  }
  $8 = (($$05266) + 1)|0;
  $9 = ($8|0)<(536870912);
  if ($9) {
   $$05266 = $8;
  } else {
   $$156 = 0;
   break;
  }
 }
 L11: do {
  if ((label|0) == 7) {
   $10 = ($$05266|0)==(0);
   if ($10) {
    $$156 = 0;
   } else {
    $11 = (($$05266) + ($$053))|0;
    $12 = ($0|0)==(0|0);
    if ($12) {
     $$0 = $11;
     return ($$0|0);
    }
    $13 = HEAP32[$0>>2]|0;
    $14 = ($13|0)==(0|0);
    if ($14) {
     $15 = (_BN_new()|0);
     $16 = ($15|0)==(0|0);
     if ($16) {
      $$0 = 0;
      return ($$0|0);
     } else {
      $$055 = $15;
     }
    } else {
     _BN_zero_ex($13);
     $$055 = $13;
    }
    $17 = $$05266 << 2;
    $18 = ($17|0)>(2147483616);
    if ($18) {
     $$156 = $$055;
    } else {
     $19 = (($17) + 31)|0;
     $20 = (($19|0) / 32)&-1;
     $21 = ((($$055)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($20|0)>($22|0);
     if ($23) {
      $24 = (_bn_expand2($$055,$20)|0);
      $25 = ($24|0)==(0|0);
      if ($25) {
       $$156 = $$055;
       break;
      }
     }
     $26 = (($$05266|0) % 9)&-1;
     $27 = ($$05266|0)>(0);
     if ($27) {
      $28 = ($26|0)==(0);
      $29 = (9 - ($26))|0;
      $$ = $28 ? 0 : $29;
      $$05165 = $$;$$05464 = 0;$$15863 = $$057;$$in = $$05266;
      while(1) {
       $30 = (($$in) + -1)|0;
       $31 = ($$05464*10)|0;
       $32 = HEAP8[$$15863>>0]|0;
       $33 = $32 << 24 >> 24;
       $34 = (($31) + -48)|0;
       $35 = (($34) + ($33))|0;
       $36 = ((($$15863)) + 1|0);
       $37 = (($$05165) + 1)|0;
       $38 = ($37|0)==(9);
       if ($38) {
        $40 = (_BN_mul_word($$055,1000000000)|0);
        $41 = ($40|0)==(0);
        if ($41) {
         $$156 = $$055;
         break L11;
        }
        $42 = (_BN_add_word($$055,$35)|0);
        $43 = ($42|0)==(0);
        if ($43) {
         $$156 = $$055;
         break L11;
        } else {
         $$051$be = 0;$$054$be = 0;
        }
       } else {
        $$051$be = $37;$$054$be = $35;
       }
       $39 = ($$in|0)>(1);
       if ($39) {
        $$05165 = $$051$be;$$05464 = $$054$be;$$15863 = $36;$$in = $30;
       } else {
        break;
       }
      }
     }
     _bn_correct_top($$055);
     HEAP32[$0>>2] = $$055;
     $44 = ((($$055)) + 4|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)==(0);
     if ($46) {
      $$0 = $11;
      return ($$0|0);
     }
     $47 = ((($$055)) + 12|0);
     HEAP32[$47>>2] = $$053;
     $$0 = $11;
     return ($$0|0);
    }
   }
  }
 } while(0);
 $48 = HEAP32[$0>>2]|0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  $$0 = 0;
  return ($$0|0);
 }
 _BN_free($$156);
 $$0 = 0;
 return ($$0|0);
}
function _BN_asc2bn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$014 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(45);
 $4 = ((($1)) + 1|0);
 $$ = $3 ? $4 : $1;
 $5 = HEAP8[$$>>0]|0;
 $6 = ($5<<24>>24)==(48);
 L1: do {
  if ($6) {
   $7 = ((($$)) + 1|0);
   $8 = HEAP8[$7>>0]|0;
   switch ($8<<24>>24) {
   case 120: case 88:  {
    break;
   }
   default: {
    label = 4;
    break L1;
   }
   }
   $9 = ((($$)) + 2|0);
   $10 = (_BN_hex2bn($0,$9)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$014 = 0;
    return ($$014|0);
   }
  } else {
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  $12 = (_BN_dec2bn($0,$$)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $$014 = 0;
   return ($$014|0);
  }
 }
 $14 = HEAP8[$1>>0]|0;
 $15 = ($14<<24>>24)==(45);
 if (!($15)) {
  $$014 = 1;
  return ($$014|0);
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $$014 = 1;
  return ($$014|0);
 }
 $20 = ((($16)) + 12|0);
 HEAP32[$20>>2] = 1;
 $$014 = 1;
 return ($$014|0);
}
function _BN_print($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$02635 = 0, $$02736 = 0, $$02736$in = 0, $$2 = 0, $$2$1 = 0, $$2$2 = 0, $$2$3 = 0, $$2$4 = 0, $$2$5 = 0, $$2$6 = 0, $$2$7 = 0, $$phi$trans$insert = 0, $$phi$trans$insert42 = 0, $$phi$trans$insert46 = 0, $$phi$trans$insert50 = 0, $$phi$trans$insert54 = 0, $$phi$trans$insert58 = 0, $$phi$trans$insert62 = 0, $$pre = 0;
 var $$pre39 = 0, $$pre41 = 0, $$pre43 = 0, $$pre45 = 0, $$pre47 = 0, $$pre49 = 0, $$pre51 = 0, $$pre53 = 0, $$pre55 = 0, $$pre57 = 0, $$pre59 = 0, $$pre61 = 0, $$pre63 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (_BIO_write($0,48050,1)|0);
  $6 = ($5|0)==(1);
  if (!($6)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $7 = (_BN_is_zero($1)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (_BIO_write($0,48040,1)|0);
  $10 = ($9|0)==(1);
  if (!($10)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(0);
 if (!($13)) {
  $$0 = 1;
  return ($$0|0);
 }
 $$02635 = 0;$$02736$in = $12;
 while(1) {
  $$02736 = (($$02736$in) + -1)|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + ($$02736<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 >>> 28;
  $18 = $17 | $$02635;
  $19 = ($18|0)==(0);
  if ($19) {
   $$2 = $$02635;$24 = $16;
  } else {
   $20 = (47622 + ($17)|0);
   $21 = (_BIO_write($0,$20,1)|0);
   $22 = ($21|0)==(1);
   if (!($22)) {
    $$0 = 0;
    label = 11;
    break;
   }
   $$pre = HEAP32[$1>>2]|0;
   $$phi$trans$insert = (($$pre) + ($$02736<<2)|0);
   $$pre39 = HEAP32[$$phi$trans$insert>>2]|0;
   $$2 = 1;$24 = $$pre39;
  }
  $23 = $24 >>> 24;
  $25 = $23 & 15;
  $26 = $25 | $$2;
  $27 = ($26|0)==(0);
  if ($27) {
   $$2$1 = $$2;$32 = $24;
  } else {
   $28 = (47622 + ($25)|0);
   $29 = (_BIO_write($0,$28,1)|0);
   $30 = ($29|0)==(1);
   if (!($30)) {
    $$0 = 0;
    label = 11;
    break;
   }
   $$pre41 = HEAP32[$1>>2]|0;
   $$phi$trans$insert42 = (($$pre41) + ($$02736<<2)|0);
   $$pre43 = HEAP32[$$phi$trans$insert42>>2]|0;
   $$2$1 = 1;$32 = $$pre43;
  }
  $31 = $32 >>> 20;
  $33 = $31 & 15;
  $34 = $33 | $$2$1;
  $35 = ($34|0)==(0);
  if ($35) {
   $$2$2 = $$2$1;$40 = $32;
  } else {
   $36 = (47622 + ($33)|0);
   $37 = (_BIO_write($0,$36,1)|0);
   $38 = ($37|0)==(1);
   if (!($38)) {
    $$0 = 0;
    label = 11;
    break;
   }
   $$pre45 = HEAP32[$1>>2]|0;
   $$phi$trans$insert46 = (($$pre45) + ($$02736<<2)|0);
   $$pre47 = HEAP32[$$phi$trans$insert46>>2]|0;
   $$2$2 = 1;$40 = $$pre47;
  }
  $39 = $40 >>> 16;
  $41 = $39 & 15;
  $42 = $41 | $$2$2;
  $43 = ($42|0)==(0);
  if ($43) {
   $$2$3 = $$2$2;$48 = $40;
  } else {
   $44 = (47622 + ($41)|0);
   $45 = (_BIO_write($0,$44,1)|0);
   $46 = ($45|0)==(1);
   if (!($46)) {
    $$0 = 0;
    label = 11;
    break;
   }
   $$pre49 = HEAP32[$1>>2]|0;
   $$phi$trans$insert50 = (($$pre49) + ($$02736<<2)|0);
   $$pre51 = HEAP32[$$phi$trans$insert50>>2]|0;
   $$2$3 = 1;$48 = $$pre51;
  }
  $47 = $48 >>> 12;
  $49 = $47 & 15;
  $50 = $49 | $$2$3;
  $51 = ($50|0)==(0);
  if ($51) {
   $$2$4 = $$2$3;$56 = $48;
  } else {
   $52 = (47622 + ($49)|0);
   $53 = (_BIO_write($0,$52,1)|0);
   $54 = ($53|0)==(1);
   if (!($54)) {
    $$0 = 0;
    label = 11;
    break;
   }
   $$pre53 = HEAP32[$1>>2]|0;
   $$phi$trans$insert54 = (($$pre53) + ($$02736<<2)|0);
   $$pre55 = HEAP32[$$phi$trans$insert54>>2]|0;
   $$2$4 = 1;$56 = $$pre55;
  }
  $55 = $56 >>> 8;
  $57 = $55 & 15;
  $58 = $57 | $$2$4;
  $59 = ($58|0)==(0);
  if ($59) {
   $$2$5 = $$2$4;$64 = $56;
  } else {
   $60 = (47622 + ($57)|0);
   $61 = (_BIO_write($0,$60,1)|0);
   $62 = ($61|0)==(1);
   if (!($62)) {
    $$0 = 0;
    label = 11;
    break;
   }
   $$pre57 = HEAP32[$1>>2]|0;
   $$phi$trans$insert58 = (($$pre57) + ($$02736<<2)|0);
   $$pre59 = HEAP32[$$phi$trans$insert58>>2]|0;
   $$2$5 = 1;$64 = $$pre59;
  }
  $63 = $64 >>> 4;
  $65 = $63 & 15;
  $66 = $65 | $$2$5;
  $67 = ($66|0)==(0);
  if ($67) {
   $$2$6 = $$2$5;$72 = $64;
  } else {
   $68 = (47622 + ($65)|0);
   $69 = (_BIO_write($0,$68,1)|0);
   $70 = ($69|0)==(1);
   if (!($70)) {
    $$0 = 0;
    label = 11;
    break;
   }
   $$pre61 = HEAP32[$1>>2]|0;
   $$phi$trans$insert62 = (($$pre61) + ($$02736<<2)|0);
   $$pre63 = HEAP32[$$phi$trans$insert62>>2]|0;
   $$2$6 = 1;$72 = $$pre63;
  }
  $71 = $72 & 15;
  $73 = $71 | $$2$6;
  $74 = ($73|0)==(0);
  if ($74) {
   $$2$7 = $$2$6;
  } else {
   $75 = (47622 + ($71)|0);
   $76 = (_BIO_write($0,$75,1)|0);
   $77 = ($76|0)==(1);
   if ($77) {
    $$2$7 = 1;
   } else {
    $$0 = 0;
    label = 11;
    break;
   }
  }
  $78 = ($$02736$in|0)>(1);
  if ($78) {
   $$02635 = $$2$7;$$02736$in = $$02736;
  } else {
   $$0 = 1;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($$0|0);
 }
 return (0)|0;
}
function _BN_rand($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_bnrand(0,$0,$1,$2,$3)|0);
 return ($4|0);
}
function _bnrand($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$077 = 0, $$078 = 0, $$079 = 0, $$sink14 = 0, $$sink16 = 0, $$sink17 = 0, $$sink18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = sp + 4|0;
 $7 = ($2|0)==(0);
 if ($7) {
  $8 = ($3|0)!=(-1);
  $9 = ($4|0)!=(0);
  $or$cond = $8 | $9;
  if (!($or$cond)) {
   _BN_zero_ex($1);
   $$077 = 1;
   STACKTOP = sp;return ($$077|0);
  }
 } else {
  $10 = ($2|0)<(0);
  if (!($10)) {
   $11 = ($2|0)==(1);
   $12 = ($3|0)>(0);
   $or$cond3 = $11 & $12;
   if (!($or$cond3)) {
    $13 = (($2) + 7)|0;
    $14 = (($13|0) / 8)&-1;
    $15 = (($2) + -1)|0;
    $16 = (($15|0) % 8)&-1;
    $17 = (($16) + 1)|0;
    $18 = 255 << $17;
    $19 = (_CRYPTO_malloc($14,83252,0)|0);
    $20 = ($19|0)==(0|0);
    L8: do {
     if ($20) {
      _ERR_put_error(3,127,65,0,0);
      $$078 = 0;
     } else {
      (_time(($5|0))|0);
      _RAND_add($5,4,+0);
      $21 = (_RAND_bytes($19,$14)|0);
      $22 = ($21|0)<(1);
      if ($22) {
       $$078 = 0;
      } else {
       $23 = ($0|0)==(2);
       do {
        if ($23) {
         $$079 = 0;
         while(1) {
          $24 = (_RAND_bytes($6,1)|0);
          $25 = ($24|0)<(1);
          if ($25) {
           label = 19;
           break;
          }
          $26 = HEAP8[$6>>0]|0;
          $27 = ($26<<24>>24)<(0);
          $28 = ($$079|0)>(0);
          $or$cond5 = $28 & $27;
          if ($or$cond5) {
           $29 = (($$079) + -1)|0;
           $30 = (($19) + ($29)|0);
           $31 = HEAP8[$30>>0]|0;
           $$sink17 = $31;
           label = 17;
          } else {
           $32 = ($26&255)<(42);
           if ($32) {
            $$sink17 = 0;
            label = 17;
           } else {
            $33 = ($26&255)<(84);
            if ($33) {
             $$sink17 = -1;
             label = 17;
            }
           }
          }
          if ((label|0) == 17) {
           label = 0;
           $$sink18 = (($19) + ($$079)|0);
           HEAP8[$$sink18>>0] = $$sink17;
          }
          $34 = (($$079) + 1)|0;
          $35 = ($34|0)<($14|0);
          if ($35) {
           $$079 = $34;
          } else {
           label = 11;
           break;
          }
         }
         if ((label|0) == 11) {
          break;
         }
         else if ((label|0) == 19) {
          $$078 = 0;
          break L8;
         }
        }
       } while(0);
       $36 = ($3|0)>(-1);
       if ($36) {
        $37 = ($3|0)==(0);
        do {
         if ($37) {
          $42 = 1 << $16;
          $$sink14 = $42;$$sink16 = $19;
         } else {
          $38 = ($16|0)==(0);
          if ($38) {
           HEAP8[$19>>0] = 1;
           $39 = ((($19)) + 1|0);
           $$sink14 = 128;$$sink16 = $39;
           break;
          } else {
           $40 = (($16) + -1)|0;
           $41 = 3 << $40;
           $$sink14 = $41;$$sink16 = $19;
           break;
          }
         }
        } while(0);
        $43 = HEAP8[$$sink16>>0]|0;
        $44 = $43&255;
        $45 = $44 | $$sink14;
        $46 = $45&255;
        HEAP8[$$sink16>>0] = $46;
       }
       $47 = $18 ^ 255;
       $48 = HEAP8[$19>>0]|0;
       $49 = $48&255;
       $50 = $49 & $47;
       $51 = $50&255;
       HEAP8[$19>>0] = $51;
       $52 = ($4|0)==(0);
       $53 = (($14) + -1)|0;
       $54 = (($19) + ($53)|0);
       if (!($52)) {
        $55 = HEAP8[$54>>0]|0;
        $56 = $55 | 1;
        HEAP8[$54>>0] = $56;
       }
       $57 = (_BN_bin2bn($19,$14,$1)|0);
       $not$ = ($57|0)!=(0|0);
       $$ = $not$&1;
       $$078 = $$;
      }
     }
    } while(0);
    _CRYPTO_clear_free($19,$14,83252,0);
    $$077 = $$078;
    STACKTOP = sp;return ($$077|0);
   }
  }
 }
 _ERR_put_error(3,127,118,0,0);
 $$077 = 0;
 STACKTOP = sp;return ($$077|0);
}
function _BN_pseudo_rand($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_bnrand(1,$0,$1,$2,$3)|0);
 return ($4|0);
}
function _BN_rand_range($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_bn_rand_range(0,$0,$1)|0);
 return ($2|0);
}
function _bn_rand_range($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$037 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)!=(0);
 $4 = $3 ? 35 : 34;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (_BN_is_zero($2)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (_BN_num_bits($2)|0);
   $11 = ($10|0)==(1);
   if ($11) {
    _BN_zero_ex($1);
    $$037 = 1;
    return ($$037|0);
   }
   $12 = (($10) + -2)|0;
   $13 = (_BN_is_bit_set($2,$12)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (($10) + -3)|0;
    $16 = (_BN_is_bit_set($2,$15)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = (($10) + 1)|0;
     $$0 = 100;
     while(1) {
      $19 = (FUNCTION_TABLE_iiiii[$4 & 63]($1,$18,-1,0)|0);
      $20 = ($19|0)==(0);
      if ($20) {
       $$037 = 0;
       label = 21;
       break;
      }
      $21 = (_BN_cmp($1,$2)|0);
      $22 = ($21|0)>(-1);
      if ($22) {
       $23 = (_BN_sub($1,$1,$2)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $$037 = 0;
        label = 21;
        break;
       }
       $25 = (_BN_cmp($1,$2)|0);
       $26 = ($25|0)>(-1);
       if ($26) {
        $27 = (_BN_sub($1,$1,$2)|0);
        $28 = ($27|0)==(0);
        if ($28) {
         $$037 = 0;
         label = 21;
         break;
        }
       }
      }
      $29 = (($$0) + -1)|0;
      $30 = ($29|0)==(0);
      if ($30) {
       label = 15;
       break;
      }
      $31 = (_BN_cmp($1,$2)|0);
      $32 = ($31|0)>(-1);
      if ($32) {
       $$0 = $29;
      } else {
       $$037 = 1;
       label = 21;
       break;
      }
     }
     if ((label|0) == 15) {
      _ERR_put_error(3,122,113,0,0);
      $$037 = 0;
      return ($$037|0);
     }
     else if ((label|0) == 21) {
      return ($$037|0);
     }
    } else {
     $$1 = 100;
    }
   } else {
    $$1 = 100;
   }
   while(1) {
    $33 = (FUNCTION_TABLE_iiiii[$4 & 63]($1,$10,-1,0)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     $$037 = 0;
     label = 21;
     break;
    }
    $35 = (($$1) + -1)|0;
    $36 = ($35|0)==(0);
    if ($36) {
     label = 19;
     break;
    }
    $37 = (_BN_cmp($1,$2)|0);
    $38 = ($37|0)>(-1);
    if ($38) {
     $$1 = $35;
    } else {
     $$037 = 1;
     label = 21;
     break;
    }
   }
   if ((label|0) == 19) {
    _ERR_put_error(3,122,113,0,0);
    $$037 = 0;
    return ($$037|0);
   }
   else if ((label|0) == 21) {
    return ($$037|0);
   }
  }
 }
 _ERR_put_error(3,122,115,0,0);
 $$037 = 0;
 return ($$037|0);
}
function _BN_pseudo_rand_range($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_bn_rand_range(1,$0,$1)|0);
 return ($2|0);
}
function _BN_RECP_CTX_init($0) {
 $0 = $0|0;
 var $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _bn_init($0);
 $1 = ((($0)) + 20|0);
 _bn_init($1);
 return;
}
function _BN_RECP_CTX_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 _BN_free($0);
 $2 = ((($0)) + 20|0);
 _BN_free($2);
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _BN_RECP_CTX_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_BN_copy($0,$1)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($0)) + 20|0);
 _BN_zero_ex($5);
 $6 = (_BN_num_bits($1)|0);
 $7 = ((($0)) + 40|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _BN_mod_mul_reciprocal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($4);
 $5 = (_BN_CTX_get($4)|0);
 $6 = ($5|0)==(0|0);
 L1: do {
  if ($6) {
   $$021 = 0;
  } else {
   $7 = ($2|0)==(0|0);
   do {
    if ($7) {
     $$0 = $1;
    } else {
     $8 = ($1|0)==($2|0);
     if ($8) {
      $9 = (_BN_sqr($5,$2,$4)|0);
      $10 = ($9|0)==(0);
      if ($10) {
       $$021 = 0;
       break L1;
      } else {
       $$0 = $5;
       break;
      }
     } else {
      $11 = (_BN_mul($5,$1,$2,$4)|0);
      $12 = ($11|0)==(0);
      if ($12) {
       $$021 = 0;
       break L1;
      } else {
       $$0 = $5;
       break;
      }
     }
    }
   } while(0);
   $13 = (_BN_div_recp(0,$0,$$0,$3,$4)|0);
   $$021 = $13;
  }
 } while(0);
 _BN_CTX_end($4);
 return ($$021|0);
}
function _BN_div_recp($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$085 = 0, $$086 = 0, $$088 = 0, $$089 = 0, $$90 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($4);
 $5 = (_BN_CTX_get($4)|0);
 $6 = (_BN_CTX_get($4)|0);
 $7 = ($0|0)==(0|0);
 if ($7) {
  $8 = (_BN_CTX_get($4)|0);
  $$085 = $8;
 } else {
  $$085 = $0;
 }
 $9 = ($1|0)==(0|0);
 if ($9) {
  $10 = (_BN_CTX_get($4)|0);
  $$0 = $10;
 } else {
  $$0 = $1;
 }
 $11 = ($5|0)==(0|0);
 $12 = ($6|0)==(0|0);
 $or$cond = $11 | $12;
 $13 = ($$085|0)==(0|0);
 $or$cond3 = $or$cond | $13;
 $14 = ($$0|0)==(0|0);
 $or$cond5 = $or$cond3 | $14;
 L7: do {
  if ($or$cond5) {
   $$088 = 0;
  } else {
   $15 = (_BN_ucmp($2,$3)|0);
   $16 = ($15|0)<(0);
   if ($16) {
    _BN_zero_ex($$085);
    $17 = (_BN_copy($$0,$2)|0);
    _BN_CTX_end($4);
    $not$ = ($17|0)!=(0|0);
    $$ = $not$&1;
    $$086 = $$;
    return ($$086|0);
   }
   $18 = (_BN_num_bits($2)|0);
   $19 = ((($3)) + 40|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 << 1;
   $22 = ($21|0)>($18|0);
   $$90 = $22 ? $21 : $18;
   $23 = ((($3)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($$90|0)==($24|0);
   if ($25) {
    $33 = $$90;
   } else {
    $26 = ((($3)) + 20|0);
    _BN_CTX_start($4);
    $27 = (_BN_CTX_get($4)|0);
    $28 = ($27|0)==(0|0);
    if ($28) {
     $$0$i = -1;
    } else {
     $29 = (_BN_set_bit($27,$$90)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      $$0$i = -1;
     } else {
      $31 = (_BN_div($26,0,$27,$3,$4)|0);
      $32 = ($31|0)==(0);
      $$$i = $32 ? -1 : $$90;
      $$0$i = $$$i;
     }
    }
    _BN_CTX_end($4);
    HEAP32[$23>>2] = $$0$i;
    $33 = $$0$i;
   }
   $34 = ($33|0)==(-1);
   if ($34) {
    $$088 = 0;
   } else {
    $35 = HEAP32[$19>>2]|0;
    $36 = (_BN_rshift($5,$2,$35)|0);
    $37 = ($36|0)==(0);
    if ($37) {
     $$088 = 0;
    } else {
     $38 = ((($3)) + 20|0);
     $39 = (_BN_mul($6,$5,$38,$4)|0);
     $40 = ($39|0)==(0);
     if ($40) {
      $$088 = 0;
     } else {
      $41 = HEAP32[$19>>2]|0;
      $42 = (($$90) - ($41))|0;
      $43 = (_BN_rshift($$085,$6,$42)|0);
      $44 = ($43|0)==(0);
      if ($44) {
       $$088 = 0;
      } else {
       $45 = ((($$085)) + 12|0);
       HEAP32[$45>>2] = 0;
       $46 = (_BN_mul($6,$3,$$085,$4)|0);
       $47 = ($46|0)==(0);
       if ($47) {
        $$088 = 0;
       } else {
        $48 = (_BN_usub($$0,$2,$6)|0);
        $49 = ($48|0)==(0);
        if ($49) {
         $$088 = 0;
        } else {
         $50 = ((($$0)) + 12|0);
         HEAP32[$50>>2] = 0;
         $$089 = 0;
         while(1) {
          $51 = (_BN_ucmp($$0,$3)|0);
          $52 = ($51|0)>(-1);
          if (!($52)) {
           break;
          }
          $53 = (($$089) + 1)|0;
          $54 = ($$089|0)>(2);
          if ($54) {
           label = 22;
           break;
          }
          $55 = (_BN_usub($$0,$$0,$3)|0);
          $56 = ($55|0)==(0);
          if ($56) {
           $$088 = 0;
           break L7;
          }
          $57 = (_BN_add_word($$085,1)|0);
          $58 = ($57|0)==(0);
          if ($58) {
           $$088 = 0;
           break L7;
          } else {
           $$089 = $53;
          }
         }
         if ((label|0) == 22) {
          _ERR_put_error(3,130,101,0,0);
          $$088 = 0;
          break;
         }
         $59 = (_BN_is_zero($$0)|0);
         $60 = ($59|0)==(0);
         $61 = ((($2)) + 12|0);
         if ($60) {
          $62 = HEAP32[$61>>2]|0;
          $63 = $62;
         } else {
          $63 = 0;
         }
         HEAP32[$50>>2] = $63;
         $64 = HEAP32[$61>>2]|0;
         $65 = ((($3)) + 12|0);
         $66 = HEAP32[$65>>2]|0;
         $67 = $66 ^ $64;
         HEAP32[$45>>2] = $67;
         $$088 = 1;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($4);
 $$086 = $$088;
 return ($$086|0);
}
function _BN_lshift1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03238 = 0, $$033 = 0, $$03437 = 0, $$03536 = 0, $$039 = 0, $$lobit = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 do {
  if ($2) {
   $13 = ((($0)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   $16 = (_bn_wexpand($0,$15)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    $$033 = 0;
    return ($$033|0);
   } else {
    $$pre = ((($1)) + 4|0);
    $$pre$phiZ2D = $$pre;
    break;
   }
  } else {
   $3 = ((($1)) + 12|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($0)) + 12|0);
   HEAP32[$5>>2] = $4;
   $6 = ((($1)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + 1)|0;
   $9 = (_bn_wexpand($0,$8)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$033 = 0;
    return ($$033|0);
   } else {
    $11 = HEAP32[$6>>2]|0;
    $12 = ((($0)) + 4|0);
    HEAP32[$12>>2] = $11;
    $$pre$phiZ2D = $6;
    break;
   }
  }
 } while(0);
 $18 = HEAP32[$$pre$phiZ2D>>2]|0;
 $19 = ($18|0)>(0);
 if (!($19)) {
  $$033 = 1;
  return ($$033|0);
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = HEAP32[$1>>2]|0;
 $$03238 = 0;$$03437 = $20;$$03536 = $21;$$039 = 0;
 while(1) {
  $22 = ((($$03536)) + 4|0);
  $23 = HEAP32[$$03536>>2]|0;
  $24 = $23 << 1;
  $25 = $24 | $$03238;
  $26 = ((($$03437)) + 4|0);
  HEAP32[$$03437>>2] = $25;
  $$lobit = $23 >>> 31;
  $27 = (($$039) + 1)|0;
  $28 = HEAP32[$$pre$phiZ2D>>2]|0;
  $29 = ($27|0)<($28|0);
  if ($29) {
   $$03238 = $$lobit;$$03437 = $26;$$03536 = $22;$$039 = $27;
  } else {
   break;
  }
 }
 $phitmp = ($$lobit|0)==(0);
 if ($phitmp) {
  $$033 = 1;
  return ($$033|0);
 }
 HEAP32[$26>>2] = 1;
 $30 = ((($0)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $$033 = 1;
 return ($$033|0);
}
function _BN_rshift1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04447 = 0, $$04546 = 0, $$04546$in = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_BN_is_zero($1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  _BN_zero_ex($0);
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) + -1)|0;
 $8 = (($6) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 $11 = $10&1;
 $12 = (($5) - ($11))|0;
 $13 = ($1|0)==($0|0);
 do {
  if ($13) {
   $21 = $9;
  } else {
   $14 = (_bn_wexpand($0,$12)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $16 = ((($1)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($0)) + 12|0);
    HEAP32[$18>>2] = $17;
    $$pre = HEAP32[$8>>2]|0;
    $21 = $$pre;
    break;
   }
  }
 } while(0);
 $19 = HEAP32[$0>>2]|0;
 $20 = $21 >>> 1;
 $22 = ($20|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($7<<2)|0);
  HEAP32[$23>>2] = $20;
 }
 $24 = ($5|0)>(1);
 if ($24) {
  $$04447 = $7;$$04546$in = $21;
  while(1) {
   $$04546 = $$04546$in << 31;
   $25 = (($$04447) + -1)|0;
   $26 = (($6) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 >>> 1;
   $29 = $28 | $$04546;
   $30 = (($19) + ($25<<2)|0);
   HEAP32[$30>>2] = $29;
   $31 = ($$04447|0)>(1);
   if ($31) {
    $$04447 = $25;$$04546$in = $27;
   } else {
    break;
   }
  }
 }
 $32 = ((($0)) + 4|0);
 HEAP32[$32>>2] = $12;
 $33 = ($12|0)==(0);
 if (!($33)) {
  $$0 = 1;
  return ($$0|0);
 }
 $34 = ((($0)) + 12|0);
 HEAP32[$34>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _BN_lshift($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$05659 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)<(0);
 if ($3) {
  _ERR_put_error(3,145,119,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $2 >>> 5;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 1)|0;
 $8 = (($7) + ($6))|0;
 $9 = (_bn_wexpand($0,$8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ((($1)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 $14 = $2 & 31;
 $15 = (32 - ($14))|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = HEAP32[$5>>2]|0;
 $19 = (($18) + ($4))|0;
 $20 = (($17) + ($19<<2)|0);
 HEAP32[$20>>2] = 0;
 $21 = ($14|0)==(0);
 $22 = HEAP32[$5>>2]|0;
 $23 = (($22) + -1)|0;
 $24 = ($22|0)>(0);
 if ($21) {
  if ($24) {
   $$05659 = $23;
   while(1) {
    $25 = (($16) + ($$05659<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($$05659) + ($4))|0;
    $28 = (($17) + ($27<<2)|0);
    HEAP32[$28>>2] = $26;
    $29 = (($$05659) + -1)|0;
    $30 = ($$05659|0)>(0);
    if ($30) {
     $$05659 = $29;
    } else {
     break;
    }
   }
  }
 } else {
  if ($24) {
   $$160 = $23;
   while(1) {
    $31 = (($16) + ($$160<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 >>> $15;
    $34 = (($$160) + ($4))|0;
    $35 = (($34) + 1)|0;
    $36 = (($17) + ($35<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37 | $33;
    HEAP32[$36>>2] = $38;
    $39 = $32 << $14;
    $40 = (($17) + ($34<<2)|0);
    HEAP32[$40>>2] = $39;
    $41 = (($$160) + -1)|0;
    $42 = ($$160|0)>(0);
    if ($42) {
     $$160 = $41;
    } else {
     break;
    }
   }
  }
 }
 $43 = $4 << 2;
 _memset(($17|0),0,($43|0))|0;
 $44 = HEAP32[$5>>2]|0;
 $45 = (($7) + ($44))|0;
 $46 = ((($0)) + 4|0);
 HEAP32[$46>>2] = $45;
 _bn_correct_top($0);
 $$0 = 1;
 return ($$0|0);
}
function _BN_rshift($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06370 = 0, $$06469 = 0, $$06668 = 0, $$165$lcssa = 0, $$16573 = 0, $$167 = 0, $$16772 = 0, $$16775 = 0, $$174 = 0, $$174$pn = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $scevgep = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)<(0);
 if ($3) {
  _ERR_put_error(3,146,119,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $2 >>> 5;
 $5 = $2 & 31;
 $6 = (32 - ($5))|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($4|0)>=($8|0);
 $10 = ($8|0)==(0);
 $or$cond = $9 | $10;
 if ($or$cond) {
  _BN_zero_ex($0);
  $$0 = 1;
  return ($$0|0);
 }
 $11 = (_BN_num_bits($1)|0);
 $12 = (31 - ($2))|0;
 $13 = (($12) + ($11))|0;
 $14 = (($13|0) / 32)&-1;
 $15 = ($0|0)==($1|0);
 do {
  if ($15) {
   $21 = ($2|0)==(0);
   if ($21) {
    $$0 = 1;
    return ($$0|0);
   }
  } else {
   $16 = (_bn_wexpand($0,$14)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $18 = ((($1)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($0)) + 12|0);
    HEAP32[$20>>2] = $19;
    break;
   }
  }
 } while(0);
 $22 = HEAP32[$1>>2]|0;
 $23 = (($22) + ($4<<2)|0);
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[$7>>2]|0;
 $26 = (($25) - ($4))|0;
 $27 = ((($0)) + 4|0);
 HEAP32[$27>>2] = $14;
 $28 = ($5|0)==(0);
 if ($28) {
  $29 = ($26|0)==(0);
  if (!($29)) {
   $$06370 = $23;$$06469 = $24;$$06668 = $26;
   while(1) {
    $30 = ((($$06370)) + 4|0);
    $31 = HEAP32[$$06370>>2]|0;
    $32 = ((($$06469)) + 4|0);
    HEAP32[$$06469>>2] = $31;
    $33 = (($$06668) + -1)|0;
    $34 = ($33|0)==(0);
    if ($34) {
     break;
    } else {
     $$06370 = $30;$$06469 = $32;$$06668 = $33;
    }
   }
  }
 } else {
  $35 = HEAP32[$23>>2]|0;
  $$16772 = (($26) + -1)|0;
  $36 = ($$16772|0)==(0);
  $37 = $35 >>> $5;
  if ($36) {
   $$165$lcssa = $24;$$lcssa = $37;
  } else {
   $$16573 = $24;$$16775 = $$16772;$$174$pn = $23;$41 = $37;
   while(1) {
    $$174 = ((($$174$pn)) + 4|0);
    $38 = HEAP32[$$174>>2]|0;
    $39 = $38 << $6;
    $40 = $39 | $41;
    $42 = ((($$16573)) + 4|0);
    HEAP32[$$16573>>2] = $40;
    $$167 = (($$16775) + -1)|0;
    $43 = ($$167|0)==(0);
    $44 = $38 >>> $5;
    if ($43) {
     break;
    } else {
     $$16573 = $42;$$16775 = $$167;$$174$pn = $$174;$41 = $44;
    }
   }
   $scevgep = (($24) + ($$16772<<2)|0);
   $$165$lcssa = $scevgep;$$lcssa = $44;
  }
  $45 = ($$lcssa|0)==(0);
  if (!($45)) {
   HEAP32[$$165$lcssa>>2] = $$lcssa;
  }
 }
 $46 = HEAP32[$27>>2]|0;
 $47 = ($46|0)==(0);
 if (!($47)) {
  $$0 = 1;
  return ($$0|0);
 }
 $48 = ((($0)) + 12|0);
 HEAP32[$48>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _BN_sqr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$073 = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $3 = sp;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(1);
 if ($6) {
  $7 = ((($0)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($0)) + 12|0);
  HEAP32[$8>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _BN_CTX_start($2);
 $9 = ($1|0)==($0|0);
 if ($9) {
  $10 = (_BN_CTX_get($2)|0);
  $12 = $10;
 } else {
  $12 = $0;
 }
 $11 = (_BN_CTX_get($2)|0);
 $13 = ($12|0)!=(0|0);
 $14 = ($11|0)!=(0|0);
 $or$cond = $13 & $14;
 L8: do {
  if ($or$cond) {
   $15 = $5 << 1;
   $16 = (_bn_wexpand($12,$15)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    $$073 = 0;
   } else {
    L11: do {
     switch ($5|0) {
     case 4:  {
      $18 = HEAP32[$12>>2]|0;
      $19 = HEAP32[$1>>2]|0;
      _bn_sqr_comba4($18,$19);
      $$pre$phiZ2D = $1;
      break;
     }
     case 8:  {
      $20 = HEAP32[$12>>2]|0;
      $21 = HEAP32[$1>>2]|0;
      _bn_sqr_comba8($20,$21);
      $$pre$phiZ2D = $1;
      break;
     }
     default: {
      $22 = ($5|0)<(16);
      if ($22) {
       $23 = HEAP32[$12>>2]|0;
       $24 = HEAP32[$1>>2]|0;
       _bn_sqr_normal($23,$24,$5,$3);
       $$pre$phiZ2D = $1;
       break L11;
      }
      $25 = (_BN_num_bits_word($5)|0);
      $26 = (($25) + -1)|0;
      $27 = 1 << $26;
      $28 = ($5|0)==($27|0);
      if ($28) {
       $29 = $5 << 2;
       $30 = (_bn_wexpand($11,$29)|0);
       $31 = ($30|0)==(0|0);
       if ($31) {
        $$073 = 0;
        break L8;
       }
       $32 = HEAP32[$12>>2]|0;
       $33 = HEAP32[$1>>2]|0;
       $34 = HEAP32[$11>>2]|0;
       _bn_sqr_recursive($32,$33,$5,$34);
       $$pre$phiZ2D = $1;
       break L11;
      } else {
       $35 = (_bn_wexpand($11,$15)|0);
       $36 = ($35|0)==(0|0);
       if ($36) {
        $$073 = 0;
        break L8;
       }
       $37 = HEAP32[$12>>2]|0;
       $38 = HEAP32[$1>>2]|0;
       $39 = HEAP32[$11>>2]|0;
       _bn_sqr_normal($37,$38,$5,$39);
       $$pre$phiZ2D = $1;
       break L11;
      }
     }
     }
    } while(0);
    $40 = ((($12)) + 12|0);
    HEAP32[$40>>2] = 0;
    $41 = HEAP32[$$pre$phiZ2D>>2]|0;
    $42 = (($5) + -1)|0;
    $43 = (($41) + ($42<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44 & 65535;
    $46 = ($44|0)==($45|0);
    $47 = $46 << 31 >> 31;
    $$sink = (($47) + ($15))|0;
    $48 = ((($12)) + 4|0);
    HEAP32[$48>>2] = $$sink;
    $49 = ($12|0)==($0|0);
    if (!($49)) {
     $50 = (_BN_copy($0,$12)|0);
     $51 = ($50|0)==(0|0);
     if ($51) {
      $$073 = 0;
      break;
     }
    }
    $$073 = 1;
   }
  } else {
   $$073 = 0;
  }
 } while(0);
 _BN_CTX_end($2);
 $$0 = $$073;
 STACKTOP = sp;return ($$0|0);
}
function _bn_sqr_normal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05053 = 0, $$05152 = 0, $$14954 = 0, $$155 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2 << 1;
 $5 = (($4) + -1)|0;
 $6 = (($0) + ($5<<2)|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$0>>2] = 0;
 $7 = ((($0)) + 4|0);
 $8 = (($2) + -1)|0;
 $9 = ($2|0)>(1);
 $10 = ((($1)) + 4|0);
 if ($9) {
  $11 = (($7) + ($8<<2)|0);
  $12 = HEAP32[$1>>2]|0;
  $13 = (_bn_mul_words($7,$10,$8,$12)|0);
  HEAP32[$11>>2] = $13;
  $14 = ($2|0)==(2);
  if (!($14)) {
   $15 = ((($0)) + 12|0);
   $16 = (($2) + -2)|0;
   $$05053 = $16;$$05152 = $8;$$14954 = $10;$$155 = $15;
   while(1) {
    $17 = (($$05152) + -1)|0;
    $18 = ((($$14954)) + 4|0);
    $19 = HEAP32[$$14954>>2]|0;
    $20 = (_bn_mul_add_words($$155,$18,$17,$19)|0);
    $21 = (($$155) + ($17<<2)|0);
    HEAP32[$21>>2] = $20;
    $22 = ((($$155)) + 8|0);
    $23 = (($$05053) + -1)|0;
    $24 = ($$05053|0)>(1);
    if ($24) {
     $$05053 = $23;$$05152 = $17;$$14954 = $18;$$155 = $22;
    } else {
     break;
    }
   }
  }
 }
 (_bn_add_words($0,$0,$0,$4)|0);
 _bn_sqr_words($3,$1,$2);
 (_bn_add_words($0,$0,$3,$4)|0);
 return;
}
function _bn_sqr_recursive($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($2|0) / 2)&-1;
 switch ($2|0) {
 case 4:  {
  _bn_sqr_comba4($0,$1);
  return;
  break;
 }
 case 8:  {
  _bn_sqr_comba8($0,$1);
  return;
  break;
 }
 default: {
  $5 = ($2|0)<(16);
  if ($5) {
   _bn_sqr_normal($0,$1,$2,$3);
   return;
  }
  $6 = (($1) + ($4<<2)|0);
  $7 = (_bn_cmp_words($1,$6,$4)|0);
  $8 = ($7|0)>(0);
  do {
   if ($8) {
    (_bn_sub_words($3,$1,$6,$4)|0);
    label = 10;
   } else {
    $9 = ($7|0)<(0);
    if ($9) {
     (_bn_sub_words($3,$6,$1,$4)|0);
     label = 10;
     break;
    } else {
     $13 = $2 << 1;
     $14 = (($3) + ($13<<2)|0);
     $15 = (($3) + ($2<<2)|0);
     $16 = $2 << 2;
     _memset(($15|0),0,($16|0))|0;
     $17 = $14;$20 = $15;
     break;
    }
   }
  } while(0);
  if ((label|0) == 10) {
   $10 = $2 << 1;
   $11 = (($3) + ($10<<2)|0);
   $12 = (($3) + ($2<<2)|0);
   _bn_sqr_recursive($12,$3,$4,$11);
   $17 = $11;$20 = $12;
  }
  _bn_sqr_recursive($0,$1,$4,$17);
  $18 = (($0) + ($2<<2)|0);
  _bn_sqr_recursive($18,$6,$4,$17);
  $19 = (_bn_add_words($3,$0,$18,$2)|0);
  $21 = (_bn_sub_words($20,$3,$20,$2)|0);
  $22 = (($19) - ($21))|0;
  $23 = (($0) + ($4<<2)|0);
  $24 = (_bn_add_words($23,$23,$20,$2)|0);
  $25 = (($22) + ($24))|0;
  $26 = ($25|0)==(0);
  if ($26) {
   return;
  }
  $27 = (($4) + ($2))|0;
  $28 = (($0) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($25))|0;
  HEAP32[$28>>2] = $30;
  $31 = ($30>>>0)<($25>>>0);
  if ($31) {
   $$0 = $28;
  } else {
   return;
  }
  while(1) {
   $32 = ((($$0)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 1)|0;
   HEAP32[$32>>2] = $34;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $32;
   } else {
    break;
   }
  }
  return;
 }
 }
}
function _BN_mod_word($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$013 = 0, $$016 = 0, $$016$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$013 = -1;
  return ($$013|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  $$013 = 0;
  return ($$013|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $$016$in = $4;$13 = 0;$9 = 0;
 while(1) {
  $$016 = (($$016$in) + -1)|0;
  $7 = (($6) + ($$016<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = (___uremdi3(($8|0),($9|0),($1|0),0)|0);
  $11 = tempRet0;
  $12 = ($$016$in|0)>(1);
  if ($12) {
   $$016$in = $$016;$13 = $11;$9 = $10;
  } else {
   break;
  }
 }
 $$013 = $10;
 return ($$013|0);
}
function _BN_div_word($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$041$lcssa47 = 0, $$04144 = 0, $$04245 = 0, $$04245$in = 0, $$pre = 0, $$pre46 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_BN_num_bits_word($1)|0);
 $7 = (32 - ($6))|0;
 $8 = $1 << $7;
 $9 = (_BN_lshift($0,$0,$7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = -1;
  return ($$0|0);
 }
 $11 = HEAP32[$3>>2]|0;
 $12 = ($11|0)>(0);
 do {
  if ($12) {
   $$pre = HEAP32[$0>>2]|0;
   $$04144 = 0;$$04245$in = $11;$14 = $$pre;
   while(1) {
    $$04245 = (($$04245$in) + -1)|0;
    $13 = (($14) + ($$04245<<2)|0);
    $15 = HEAP32[$13>>2]|0;
    $16 = (_bn_div_words($$04144,$15,$8)|0);
    $17 = Math_imul($16, $8)|0;
    $18 = (($15) - ($17))|0;
    $19 = HEAP32[$0>>2]|0;
    $20 = (($19) + ($$04245<<2)|0);
    HEAP32[$20>>2] = $16;
    $21 = ($$04245$in|0)>(1);
    if ($21) {
     $$04144 = $18;$$04245$in = $$04245;$14 = $19;
    } else {
     break;
    }
   }
   $$pre46 = HEAP32[$3>>2]|0;
   $22 = ($$pre46|0)>(0);
   if ($22) {
    $23 = HEAP32[$0>>2]|0;
    $24 = (($$pre46) + -1)|0;
    $25 = (($23) + ($24<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0);
    if ($27) {
     HEAP32[$3>>2] = $24;
     $$041$lcssa47 = $18;$30 = $24;
     break;
    }
    $28 = $18 >>> $7;
    $$0 = $28;
    return ($$0|0);
   } else {
    $$041$lcssa47 = $18;$30 = $$pre46;
   }
  } else {
   $$041$lcssa47 = 0;$30 = $11;
  }
 } while(0);
 $29 = $$041$lcssa47 >>> $7;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $$0 = $29;
  return ($$0|0);
 }
 $32 = ((($0)) + 12|0);
 HEAP32[$32>>2] = 0;
 $$0 = $29;
 return ($$0|0);
}
function _BN_add_word($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$035 = 0, $$03641 = 0, $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$035 = 1;
  return ($$035|0);
 }
 $3 = (_BN_is_zero($0)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (_BN_set_word($0,$1)|0);
  $$035 = $5;
  return ($$035|0);
 }
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  HEAP32[$6>>2] = 0;
  $10 = (_BN_sub_word($0,$1)|0);
  $11 = (_BN_is_zero($0)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $$035 = $10;
   return ($$035|0);
  }
  $13 = HEAP32[$6>>2]|0;
  $14 = ($13|0)==(0);
  $15 = $14&1;
  HEAP32[$6>>2] = $15;
  $$035 = $10;
  return ($$035|0);
 }
 $9 = ((($0)) + 4|0);
 $$03641 = $1;$$042 = 0;
 while(1) {
  $16 = HEAP32[$9>>2]|0;
  $17 = ($$042|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + ($$042<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($$03641))|0;
  HEAP32[$19>>2] = $21;
  $22 = ($$03641>>>0)>($21>>>0);
  $23 = $22&1;
  $24 = (($$042) + 1)|0;
  if ($22) {
   $$03641 = $23;$$042 = $24;
  } else {
   $$035 = 1;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($$035|0);
 }
 $25 = ($$042|0)==($16|0);
 if (!($25)) {
  $$035 = 1;
  return ($$035|0);
 }
 $26 = (($$042) + 1)|0;
 $27 = (_bn_wexpand($0,$26)|0);
 $28 = ($27|0)==(0|0);
 if ($28) {
  $$035 = 0;
  return ($$035|0);
 }
 $29 = HEAP32[$9>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[$9>>2] = $30;
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + ($$042<<2)|0);
 HEAP32[$32>>2] = $$03641;
 $$035 = 1;
 return ($$035|0);
}
function _BN_sub_word($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$037 = 0, $$038 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$038 = 1;
  return ($$038|0);
 }
 $3 = (_BN_is_zero($0)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (_BN_set_word($0,$1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$038 = 0;
   return ($$038|0);
  }
  _BN_set_negative($0,1);
  $$038 = $5;
  return ($$038|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  HEAP32[$7>>2] = 0;
  $10 = (_BN_add_word($0,$1)|0);
  HEAP32[$7>>2] = 1;
  $$038 = $10;
  return ($$038|0);
 }
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 $14 = HEAP32[$0>>2]|0;
 if ($13) {
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15>>>0)<($1>>>0);
  if ($16) {
   $17 = (($1) - ($15))|0;
   HEAP32[$14>>2] = $17;
   HEAP32[$7>>2] = 1;
   $$038 = 1;
   return ($$038|0);
  } else {
   $$0 = 0;$$037 = $1;
  }
 } else {
  $$0 = 0;$$037 = $1;
 }
 while(1) {
  $18 = (($14) + ($$0<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19>>>0)<($$037>>>0);
  $21 = (($19) - ($$037))|0;
  HEAP32[$18>>2] = $21;
  $22 = (($$0) + 1)|0;
  if ($20) {
   $$0 = $22;$$037 = 1;
  } else {
   break;
  }
 }
 $23 = ($21|0)==(0);
 if (!($23)) {
  $$038 = 1;
  return ($$038|0);
 }
 $24 = HEAP32[$11>>2]|0;
 $25 = (($24) + -1)|0;
 $26 = ($$0|0)==($25|0);
 if (!($26)) {
  $$038 = 1;
  return ($$038|0);
 }
 HEAP32[$11>>2] = $$0;
 $$038 = 1;
 return ($$038|0);
}
function _BN_mul_word($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ($1|0)==(0);
 if ($5) {
  _BN_zero_ex($0);
  $$0 = 1;
  return ($$0|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (_bn_mul_words($6,$6,$3,$1)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 1;
  return ($$0|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = (_bn_wexpand($0,$10)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$2>>2] = $15;
 $16 = (($13) + ($14<<2)|0);
 HEAP32[$16>>2] = $7;
 $$0 = 1;
 return ($$0|0);
}
function _BUF_MEM_new() {
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(16,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(7,101,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _BUF_MEM_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($0)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 & 1;
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = ((($0)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    _CRYPTO_clear_free($3,$10,83252,0);
    break;
   } else {
    _CRYPTO_secure_free($3,83252,0);
    break;
   }
  }
 } while(0);
 _CRYPTO_free($0,83252,0);
 return;
}
function _BUF_MEM_grow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$036 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)<($1>>>0);
 if (!($3)) {
  HEAP32[$0>>2] = $1;
  $$0 = $1;
  return ($$0|0);
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<($1>>>0);
 if (!($6)) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = (($1) - ($2))|0;
   $11 = (($8) + ($2)|0);
   _memset(($11|0),0,($10|0))|0;
  }
  HEAP32[$0>>2] = $1;
  $$0 = $1;
  return ($$0|0);
 }
 $12 = ($1>>>0)>(1610612732);
 if ($12) {
  _ERR_put_error(7,100,65,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $13 = (($1) + 3)|0;
 $14 = (($13>>>0) / 3)&-1;
 $15 = $14 << 2;
 $16 = ((($0)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  $27 = ((($0)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_CRYPTO_realloc($28,$15,83252,0)|0);
  $$036 = $29;
 } else {
  $20 = (_CRYPTO_secure_malloc($15,83252,0)|0);
  $21 = ((($0)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   $$036 = $20;
  } else {
   $24 = ($20|0)==(0|0);
   if ($24) {
    $26 = $22;
   } else {
    $25 = HEAP32[$0>>2]|0;
    _memcpy(($20|0),($22|0),($25|0))|0;
    $$pre$i = HEAP32[$21>>2]|0;
    $26 = $$pre$i;
   }
   _CRYPTO_secure_free($26,83252,0);
   $$036 = $20;
  }
 }
 $30 = ($$036|0)==(0|0);
 if ($30) {
  _ERR_put_error(7,100,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $31 = ((($0)) + 4|0);
  HEAP32[$31>>2] = $$036;
  HEAP32[$4>>2] = $15;
  $32 = HEAP32[$0>>2]|0;
  $33 = (($$036) + ($32)|0);
  $34 = (($1) - ($32))|0;
  _memset(($33|0),0,($34|0))|0;
  HEAP32[$0>>2] = $1;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _BUF_MEM_grow_clean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$040 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)<($1>>>0);
 if (!($3)) {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = (($2) - ($1))|0;
   $8 = (($5) + ($1)|0);
   _memset(($8|0),0,($7|0))|0;
  }
  HEAP32[$0>>2] = $1;
  $$0 = $1;
  return ($$0|0);
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10>>>0)<($1>>>0);
 if (!($11)) {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($2)|0);
  $15 = (($1) - ($2))|0;
  _memset(($14|0),0,($15|0))|0;
  HEAP32[$0>>2] = $1;
  $$0 = $1;
  return ($$0|0);
 }
 $16 = ($1>>>0)>(1610612732);
 if ($16) {
  _ERR_put_error(7,105,65,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $17 = (($1) + 3)|0;
 $18 = (($17>>>0) / 3)&-1;
 $19 = $18 << 2;
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 1;
 $23 = ($22|0)==(0);
 if ($23) {
  $31 = ((($0)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_CRYPTO_clear_realloc($32,$10,$19,83252,0)|0);
  $$040 = $33;
 } else {
  $24 = (_CRYPTO_secure_malloc($19,83252,0)|0);
  $25 = ((($0)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $$040 = $24;
  } else {
   $28 = ($24|0)==(0|0);
   if ($28) {
    $30 = $26;
   } else {
    $29 = HEAP32[$0>>2]|0;
    _memcpy(($24|0),($26|0),($29|0))|0;
    $$pre$i = HEAP32[$25>>2]|0;
    $30 = $$pre$i;
   }
   _CRYPTO_secure_free($30,83252,0);
   $$040 = $24;
  }
 }
 $34 = ($$040|0)==(0|0);
 if ($34) {
  _ERR_put_error(7,105,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $35 = ((($0)) + 4|0);
  HEAP32[$35>>2] = $$040;
  HEAP32[$9>>2] = $19;
  $36 = HEAP32[$0>>2]|0;
  $37 = (($$040) + ($36)|0);
  $38 = (($1) - ($36))|0;
  _memset(($37|0),0,($38|0))|0;
  HEAP32[$0>>2] = $1;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function __CONF_get_section($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($2)) + 4|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$2>>2] = $1;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_OPENSSL_LH_retrieve($7,$2)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __CONF_get_section_values($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)==(0|0);
 $or$cond$i = $3 | $4;
 if ($or$cond$i) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($2)) + 4|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$2>>2] = $1;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_OPENSSL_LH_retrieve($7,$2)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($8)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function __CONF_add_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = (_OPENSSL_sk_push($4,$2)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_OPENSSL_LH_insert($9,$2)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 1;
  return ($$0|0);
 }
 (_OPENSSL_sk_delete_ptr($4,$10)|0);
 $12 = ((($10)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 _CRYPTO_free($13,83252,0);
 $14 = ((($10)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 _CRYPTO_free($15,83252,0);
 _CRYPTO_free($10,83252,0);
 $$0 = 1;
 return ($$0|0);
}
function __CONF_get_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre$phi22Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($2|0)==(0|0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($0|0)==(0|0);
   if ($5) {
    $23 = (_getenv(($2|0))|0);
    $$0 = $23;
    break;
   }
   $6 = ($1|0)==(0|0);
   if ($6) {
    $$pre21 = ((($3)) + 4|0);
    $$pre23 = ((($0)) + 8|0);
    $$pre$phi22Z2D = $$pre21;$$pre$phi26Z2D = $$pre23;$$pre$phiZ2D = $3;
   } else {
    $7 = ((($3)) + 4|0);
    HEAP32[$7>>2] = $2;
    HEAP32[$3>>2] = $1;
    $8 = ((($0)) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (_OPENSSL_LH_retrieve($9,$3)|0);
    $11 = ($10|0)==(0|0);
    if (!($11)) {
     $12 = ((($10)) + 8|0);
     $13 = HEAP32[$12>>2]|0;
     $$0 = $13;
     break;
    }
    $14 = (_strcmp($1,48052)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = (_getenv(($2|0))|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      $$pre$phi22Z2D = $7;$$pre$phi26Z2D = $8;$$pre$phiZ2D = $3;
     } else {
      $$0 = $16;
      break;
     }
    } else {
     $$pre$phi22Z2D = $7;$$pre$phi26Z2D = $8;$$pre$phiZ2D = $3;
    }
   }
   HEAP32[$$pre$phiZ2D>>2] = 48124;
   HEAP32[$$pre$phi22Z2D>>2] = $2;
   $18 = HEAP32[$$pre$phi26Z2D>>2]|0;
   $19 = (_OPENSSL_LH_retrieve($18,$3)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    $$0 = 0;
   } else {
    $21 = ((($19)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $$0 = $22;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __CONF_new_data($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_OPENSSL_LH_new(34,45)|0);
  HEAP32[$2>>2] = $5;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = 1;
 return ($$0|0);
}
function _conf_value_hash($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_OPENSSL_LH_strhash($1)|0);
 $3 = $2 << 2;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_OPENSSL_LH_strhash($5)|0);
 $7 = $6 ^ $3;
 return ($7|0);
}
function _conf_value_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $5 = (_strcmp($2,$3)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = $5;
   return ($$0|0);
  }
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 $or$cond = $9 | $12;
 if ($or$cond) {
  $14 = ($8|0)==($11|0);
  $15 = $9 ? -1 : 1;
  $$ = $14 ? 0 : $15;
  return ($$|0);
 }
 $13 = (_strcmp($8,$11)|0);
 $$0 = $13;
 return ($$0|0);
}
function __CONF_free_data($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 _OPENSSL_LH_set_down_load($3,0);
 $5 = HEAP32[$2>>2]|0;
 _OPENSSL_LH_doall_arg($5,20,$5);
 $6 = HEAP32[$2>>2]|0;
 _OPENSSL_LH_doall($6,28);
 $7 = HEAP32[$2>>2]|0;
 _OPENSSL_LH_free($7);
 return;
}
function _value_free_hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 (_OPENSSL_LH_delete($1,$0)|0);
 return;
}
function _value_free_stack_doall($0) {
 $0 = $0|0;
 var $$017 = 0, $$017$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  return;
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_OPENSSL_sk_num($5)|0);
 $7 = ($6|0)>(0);
 if ($7) {
  $$017$in = $6;
  while(1) {
   $$017 = (($$017$in) + -1)|0;
   $8 = (_OPENSSL_sk_value($5,$$017)|0);
   $9 = ((($8)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   _CRYPTO_free($10,83252,0);
   $11 = ((($8)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   _CRYPTO_free($12,83252,0);
   _CRYPTO_free($8,83252,0);
   $13 = ($$017$in|0)>(1);
   if ($13) {
    $$017$in = $$017;
   } else {
    break;
   }
  }
 }
 _OPENSSL_sk_free($5);
 $14 = HEAP32[$0>>2]|0;
 _CRYPTO_free($14,83252,0);
 _CRYPTO_free($0,83252,0);
 return;
}
function __CONF_new_section($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_OPENSSL_sk_new_null()|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $16 = 0;
 } else {
  $4 = (_CRYPTO_malloc(12,83252,0)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $16 = 0;
  } else {
   $6 = (_strlen($1)|0);
   $7 = (($6) + 1)|0;
   $8 = (_CRYPTO_malloc($7,83252,0)|0);
   HEAP32[$4>>2] = $8;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $16 = $4;
   } else {
    _memcpy(($8|0),($1|0),($7|0))|0;
    $10 = ((($4)) + 4|0);
    HEAP32[$10>>2] = 0;
    $11 = ((($4)) + 8|0);
    HEAP32[$11>>2] = $2;
    $12 = ((($0)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_OPENSSL_LH_insert($13,$4)|0);
    $15 = ($14|0)==(0|0);
    if ($15) {
     $$0 = $4;
     return ($$0|0);
    } else {
     _OPENSSL_die(48056,83252,0);
     // unreachable;
    }
   }
  }
 }
 _OPENSSL_sk_free($2);
 _CRYPTO_free($16,83252,0);
 $$0 = 0;
 return ($$0|0);
}
function _NCONF_default() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1696|0);
}
function _def_create($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_malloc(12,83252,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = $1;
  return ($$0|0);
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $1;
  return ($$0|0);
 }
 _CRYPTO_free($1,83252,0);
 $$0 = 0;
 return ($$0|0);
}
function _def_init_default($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1696;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 45632;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _def_destroy($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 __CONF_free_data($0);
 _CRYPTO_free($0,83252,0);
 $$0 = 1;
 return ($$0|0);
}
function _def_destroy_data($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  __CONF_free_data($0);
  $$0 = 1;
 }
 return ($$0|0);
}
function _def_load_bio($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0169 = 0, $$$018$i$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i188 = 0, $$0$i192 = 0, $$0$i193 = 0, $$0$i197 = 0, $$0$i199 = 0, $$0$i201 = 0, $$0$lcssa$i$i = 0, $$014$i$i = 0, $$016$i$i = 0, $$0166 = 0, $$0167 = 0, $$0168 = 0, $$0169 = 0, $$0170$be = 0, $$0170288 = 0, $$0172$ph$be = 0;
 var $$0172$ph294 = 0, $$0178$lcssa = 0, $$0178$ph293 = 0, $$0178287 = 0, $$018$i$i = 0, $$018$lcssa$i$i = 0, $$0181$be = 0, $$0181286 = 0, $$01823$i$i = 0, $$01826$i$i = 0, $$0184 = 0, $$0185 = 0, $$0185$pn = 0, $$0187$lcssa = 0, $$0187283 = 0, $$036$i = 0, $$1$be$i = 0, $$1175 = 0, $$1177 = 0, $$1179 = 0;
 var $$1182 = 0, $$1186 = 0, $$135$i = 0, $$2180 = 0, $$lcssa$i$i = 0, $$lcssa19$i$i = 0, $$lcssa440 = 0, $$lcssa441 = 0, $$phi$trans$insert = 0, $$phi$trans$insert357 = 0, $$pn$be$i$i = 0, $$pn$be$i23$i = 0, $$pn$lcssa$i$i = 0, $$pn$lcssa$i25$i = 0, $$pn15$i$i = 0, $$pn15$lcssa$pn$i$i = 0, $$pn25$i$i = 0, $$pre = 0, $$pre356 = 0, $$pre358 = 0;
 var $$pre360 = 0, $$pre361 = 0, $$sink$i = 0, $$sink$i194 = 0, $$sink$i202 = 0, $$sink1$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i$i = 0, $or$cond24$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_BUF_MEM_new()|0);
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   _ERR_put_error(14,121,7,0,0);
   $$1177 = 0;$$2180 = 0;$321 = 0;
  } else {
   $9 = (_CRYPTO_strdup(48124,83252,0)|0);
   HEAP32[$4>>2] = $9;
   $10 = ($9|0)==(0|0);
   if ($10) {
    _ERR_put_error(14,121,65,0,0);
    $$1177 = 0;$$2180 = 0;$321 = 0;
    break;
   }
   $11 = (__CONF_new_data($0)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    _ERR_put_error(14,121,65,0,0);
    $$1177 = 0;$$2180 = 0;$321 = 0;
    break;
   }
   $13 = (__CONF_new_section($0,$9)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    _ERR_put_error(14,121,103,0,0);
    $$1177 = 0;$$2180 = 0;$321 = 0;
    break;
   }
   $15 = (_BUF_MEM_grow($7,512)|0);
   $16 = ($15|0)==(0);
   L13: do {
    if ($16) {
     $$0178$lcssa = 0;
    } else {
     $17 = ((($7)) + 4|0);
     $18 = ((($0)) + 4|0);
     $$0172$ph294 = $13;$$0178$ph293 = 0;
     L15: while(1) {
      $$0170288 = 0;$$0178287 = $$0178$ph293;$$0181286 = 0;
      while(1) {
       $19 = HEAP32[$17>>2]|0;
       $20 = (($19) + ($$0170288)|0);
       HEAP8[$20>>0] = 0;
       (_BIO_gets($1,$20,511)|0);
       $21 = ((($20)) + 511|0);
       HEAP8[$21>>0] = 0;
       $22 = (_strlen($20)|0);
       $23 = ($22|0)!=(0);
       $24 = $22 | $$0181286;
       $25 = ($24|0)==(0);
       if ($25) {
        label = 98;
        break L15;
       }
       $26 = ($22|0)>(0);
       L20: do {
        if ($26) {
         $$0187283 = $22;
         while(1) {
          $27 = (($$0187283) + -1)|0;
          $28 = (($20) + ($27)|0);
          $29 = HEAP8[$28>>0]|0;
          switch ($29<<24>>24) {
          case 10: case 13:  {
           break;
          }
          default: {
           $$0187$lcssa = $$0187283;
           break L20;
          }
          }
          $30 = ($$0187283|0)>(1);
          if ($30) {
           $$0187283 = $27;
          } else {
           $$0187$lcssa = $27;
           break L20;
          }
         }
        } else {
         $$0187$lcssa = $22;
        }
       } while(0);
       $31 = ($$0187$lcssa|0)==($22|0);
       $or$cond = $23 & $31;
       if ($or$cond) {
        $$1179 = $$0178287;$$1182 = 1;
       } else {
        $32 = (($$0178287) + 1)|0;
        $33 = (($20) + ($$0187$lcssa)|0);
        HEAP8[$33>>0] = 0;
        $$1179 = $32;$$1182 = 0;
       }
       $34 = (($$0187$lcssa) + ($$0170288))|0;
       $35 = ($34|0)>(0);
       if ($35) {
        $36 = HEAP32[$17>>2]|0;
        $37 = (($34) + -1)|0;
        $38 = (($36) + ($37)|0);
        $39 = HEAP32[$18>>2]|0;
        $40 = HEAP8[$38>>0]|0;
        $41 = $40&255;
        $42 = (($39) + ($41<<1)|0);
        $43 = HEAP16[$42>>1]|0;
        $44 = $43 & 32;
        $45 = ($44<<16>>16)==(0);
        if ($45) {
         label = 22;
        } else {
         $46 = ($34|0)<(2);
         if ($46) {
          $$0170$be = $37;$$0181$be = 1;
         } else {
          $47 = ((($38)) + -1|0);
          $48 = HEAP8[$47>>0]|0;
          $49 = $48&255;
          $50 = (($39) + ($49<<1)|0);
          $51 = HEAP16[$50>>1]|0;
          $52 = $51 & 32;
          $53 = ($52<<16>>16)==(0);
          if ($53) {
           $$0170$be = $37;$$0181$be = 1;
          } else {
           label = 22;
          }
         }
        }
       } else {
        label = 22;
       }
       if ((label|0) == 22) {
        label = 0;
        $54 = ($$1182|0)==(0);
        if ($54) {
         $58 = HEAP32[$17>>2]|0;
         $59 = HEAP32[$18>>2]|0;
         $60 = HEAP8[$58>>0]|0;
         $61 = $60&255;
         $62 = (($59) + ($61<<1)|0);
         $63 = HEAP16[$62>>1]|0;
         $64 = $63&65535;
         $65 = $64 & 2048;
         $66 = ($65|0)==(0);
         L35: do {
          if ($66) {
           $$036$i = $58;$322 = $60;$68 = $64;$71 = $63;
           while(1) {
            $67 = $68 & 16;
            $69 = ($67|0)==(0);
            if ($69) {
             break;
            }
            $74 = ((($$036$i)) + 1|0);
            $75 = HEAP8[$74>>0]|0;
            $76 = $75&255;
            $77 = (($59) + ($76<<1)|0);
            $78 = HEAP16[$77>>1]|0;
            $79 = $78&65535;
            $80 = $79 & 2048;
            $81 = ($80|0)==(0);
            if ($81) {
             $$036$i = $74;$322 = $75;$68 = $79;$71 = $78;
            } else {
             $$sink1$i = $74;
             label = 46;
             break L35;
            }
           }
           $70 = $71&65535;
           $72 = $70 & 128;
           $73 = ($72|0)==(0);
           if ($73) {
            $$135$i = $$036$i;$83 = $70;$92 = $322;
            while(1) {
             $82 = $83 & 1024;
             $84 = ($82|0)==(0);
             L42: do {
              if ($84) {
               $104 = $83 & 64;
               $105 = ($104|0)==(0);
               if ($105) {
                $133 = $83 & 32;
                $134 = ($133|0)==(0);
                if (!($134)) {
                 $135 = ((($$135$i)) + 1|0);
                 $136 = HEAP8[$135>>0]|0;
                 $137 = $136&255;
                 $138 = (($59) + ($137<<1)|0);
                 $139 = HEAP16[$138>>1]|0;
                 $140 = $139 & 8;
                 $141 = $140&65535;
                 $142 = $141 >>> 3;
                 $143 = (2 - ($142))|0;
                 $144 = (($$135$i) + ($143)|0);
                 $$1$be$i = $144;
                 break;
                }
                $152 = $83 & 8;
                $153 = ($152|0)==(0);
                if (!($153)) {
                 $158 = $59;
                 break L35;
                }
                $154 = ((($$135$i)) + 1|0);
                $$1$be$i = $154;
                break;
               }
               $$01823$i$i = ((($$135$i)) + 1|0);
               $106 = HEAP8[$$01823$i$i>>0]|0;
               $107 = $106&255;
               $108 = (($59) + ($107<<1)|0);
               $109 = HEAP16[$108>>1]|0;
               $110 = $109&65535;
               $111 = $110 & 8;
               $112 = ($111|0)!=(0);
               $113 = ($106<<24>>24)==($92<<24>>24);
               $or$cond24$i$i = $113 | $112;
               if ($or$cond24$i$i) {
                $$018$lcssa$i$i = $$01823$i$i;$$lcssa19$i$i = $113;$$pn$lcssa$i25$i = $$135$i;
               } else {
                $$01826$i$i = $$01823$i$i;$$pn25$i$i = $$135$i;$115 = $110;
                while(1) {
                 $114 = $115 & 32;
                 $116 = ($114|0)==(0);
                 if ($116) {
                  $$pn$be$i23$i = $$01826$i$i;
                 } else {
                  $117 = ((($$pn25$i$i)) + 2|0);
                  $118 = HEAP8[$117>>0]|0;
                  $119 = $118&255;
                  $120 = (($59) + ($119<<1)|0);
                  $121 = HEAP16[$120>>1]|0;
                  $122 = $121 & 8;
                  $123 = ($122<<16>>16)==(0);
                  if ($123) {
                   $$pn$be$i23$i = $117;
                  } else {
                   $$1$be$i = $117;
                   break L42;
                  }
                 }
                 $$018$i$i = ((($$pn$be$i23$i)) + 1|0);
                 $124 = HEAP8[$$018$i$i>>0]|0;
                 $125 = $124&255;
                 $126 = (($59) + ($125<<1)|0);
                 $127 = HEAP16[$126>>1]|0;
                 $128 = $127&65535;
                 $129 = $128 & 8;
                 $130 = ($129|0)!=(0);
                 $131 = ($124<<24>>24)==($92<<24>>24);
                 $or$cond$i$i = $131 | $130;
                 if ($or$cond$i$i) {
                  $$018$lcssa$i$i = $$018$i$i;$$lcssa19$i$i = $131;$$pn$lcssa$i25$i = $$pn$be$i23$i;
                  break;
                 } else {
                  $$01826$i$i = $$018$i$i;$$pn25$i$i = $$pn$be$i23$i;$115 = $128;
                 }
                }
               }
               $132 = ((($$pn$lcssa$i25$i)) + 2|0);
               $$$018$i$i = $$lcssa19$i$i ? $132 : $$018$lcssa$i$i;
               $$1$be$i = $$$018$i$i;
              } else {
               $$014$i$i = ((($$135$i)) + 1|0);
               $85 = HEAP8[$$014$i$i>>0]|0;
               $86 = $85&255;
               $87 = (($59) + ($86<<1)|0);
               $88 = HEAP16[$87>>1]|0;
               $89 = $88 & 8;
               $90 = ($89<<16>>16)==(0);
               $91 = ($85<<24>>24)==($92<<24>>24);
               L59: do {
                if ($90) {
                 $$016$i$i = $$014$i$i;$$pn15$i$i = $$135$i;$323 = $91;
                 while(1) {
                  if ($323) {
                   $93 = ((($$pn15$i$i)) + 2|0);
                   $94 = HEAP8[$93>>0]|0;
                   $95 = ($94<<24>>24)==($92<<24>>24);
                   if ($95) {
                    $$pn$be$i$i = $93;
                   } else {
                    $$pn15$lcssa$pn$i$i = $$pn15$i$i;
                    break L59;
                   }
                  } else {
                   $$pn$be$i$i = $$016$i$i;
                  }
                  $$0$i$i = ((($$pn$be$i$i)) + 1|0);
                  $96 = HEAP8[$$0$i$i>>0]|0;
                  $97 = $96&255;
                  $98 = (($59) + ($97<<1)|0);
                  $99 = HEAP16[$98>>1]|0;
                  $100 = $99 & 8;
                  $101 = ($100<<16>>16)==(0);
                  $102 = ($96<<24>>24)==($92<<24>>24);
                  if ($101) {
                   $$016$i$i = $$0$i$i;$$pn15$i$i = $$pn$be$i$i;$323 = $102;
                  } else {
                   $$0$lcssa$i$i = $$0$i$i;$$lcssa$i$i = $102;$$pn$lcssa$i$i = $$pn$be$i$i;
                   label = 33;
                   break;
                  }
                 }
                } else {
                 $$0$lcssa$i$i = $$014$i$i;$$lcssa$i$i = $91;$$pn$lcssa$i$i = $$135$i;
                 label = 33;
                }
               } while(0);
               if ((label|0) == 33) {
                label = 0;
                if ($$lcssa$i$i) {
                 $$pn15$lcssa$pn$i$i = $$pn$lcssa$i$i;
                } else {
                 $$1$be$i = $$0$lcssa$i$i;
                 break;
                }
               }
               $103 = ((($$pn15$lcssa$pn$i$i)) + 2|0);
               $$1$be$i = $103;
              }
             } while(0);
             $145 = HEAP8[$$1$be$i>>0]|0;
             $146 = $145&255;
             $147 = (($59) + ($146<<1)|0);
             $148 = HEAP16[$147>>1]|0;
             $149 = $148&65535;
             $150 = $149 & 128;
             $151 = ($150|0)==(0);
             if ($151) {
              $$135$i = $$1$be$i;$83 = $149;$92 = $145;
             } else {
              $$sink1$i = $$1$be$i;
              label = 46;
              break;
             }
            }
           } else {
            $$sink1$i = $$036$i;
            label = 46;
           }
          } else {
           $$sink1$i = $58;
           label = 46;
          }
         } while(0);
         if ((label|0) == 46) {
          label = 0;
          HEAP8[$$sink1$i>>0] = 0;
          $$pre = HEAP32[$18>>2]|0;
          $158 = $$pre;
         }
         $$0$i = $58;
         while(1) {
          $155 = HEAP8[$$0$i>>0]|0;
          $156 = $155&255;
          $157 = (($158) + ($156<<1)|0);
          $159 = HEAP16[$157>>1]|0;
          $160 = $159 & 24;
          $161 = ($160<<16>>16)==(16);
          $162 = ((($$0$i)) + 1|0);
          if ($161) {
           $$0$i = $162;
          } else {
           break;
          }
         }
         $163 = $159 & 8;
         $164 = ($163<<16>>16)==(0);
         if ($164) {
          $165 = ($155<<24>>24)==(91);
          if ($165) {
           $$0$i197 = $162;
           break;
          } else {
           $$0$i193 = $$0$i;$210 = $159;$225 = $155;
          }
          while(1) {
           $209 = $210&65535;
           $211 = $209 & 32;
           $212 = ($211|0)==(0);
           if ($212) {
            $223 = $209 & 775;
            $224 = ($223|0)==(0);
            if ($224) {
             break;
            } else {
             $$sink$i194 = 1;
            }
           } else {
            $213 = ((($$0$i193)) + 1|0);
            $214 = HEAP8[$213>>0]|0;
            $215 = $214&255;
            $216 = (($158) + ($215<<1)|0);
            $217 = HEAP16[$216>>1]|0;
            $218 = $217 & 8;
            $219 = $218&65535;
            $220 = $219 >>> 3;
            $221 = (2 - ($220))|0;
            $$sink$i194 = $221;
           }
           $222 = (($$0$i193) + ($$sink$i194)|0);
           $$pre356 = HEAP8[$222>>0]|0;
           $$phi$trans$insert = $$pre356&255;
           $$phi$trans$insert357 = (($158) + ($$phi$trans$insert<<1)|0);
           $$pre358 = HEAP16[$$phi$trans$insert357>>1]|0;
           $$0$i193 = $222;$210 = $$pre358;$225 = $$pre356;
          }
          $226 = ($225<<24>>24)==(58);
          L83: do {
           if ($226) {
            $227 = ((($$0$i193)) + 1|0);
            $228 = HEAP8[$227>>0]|0;
            $229 = ($228<<24>>24)==(58);
            if (!($229)) {
             $$0168 = $$0$i;$$0169 = 0;$$0184 = $$0$i193;$252 = 58;$254 = $158;
             break;
            }
            HEAP8[$$0$i193>>0] = 0;
            $230 = ((($$0$i193)) + 2|0);
            $231 = HEAP32[$18>>2]|0;
            $$0$i192 = $230;
            while(1) {
             $232 = HEAP8[$$0$i192>>0]|0;
             $233 = $232&255;
             $234 = (($231) + ($233<<1)|0);
             $235 = HEAP16[$234>>1]|0;
             $236 = $235&65535;
             $237 = $236 & 32;
             $238 = ($237|0)==(0);
             if ($238) {
              $249 = $236 & 775;
              $250 = ($249|0)==(0);
              if ($250) {
               $$0168 = $230;$$0169 = $$0$i;$$0184 = $$0$i192;$252 = $232;$254 = $231;
               break L83;
              } else {
               $$sink$i = 1;
              }
             } else {
              $239 = ((($$0$i192)) + 1|0);
              $240 = HEAP8[$239>>0]|0;
              $241 = $240&255;
              $242 = (($231) + ($241<<1)|0);
              $243 = HEAP16[$242>>1]|0;
              $244 = $243 & 8;
              $245 = $244&65535;
              $246 = $245 >>> 3;
              $247 = (2 - ($246))|0;
              $$sink$i = $247;
             }
             $248 = (($$0$i192) + ($$sink$i)|0);
             $$0$i192 = $248;
            }
           } else {
            $$0168 = $$0$i;$$0169 = 0;$$0184 = $$0$i193;$252 = $225;$254 = $158;
           }
          } while(0);
          $251 = $252&255;
          $253 = (($254) + ($251<<1)|0);
          $255 = HEAP16[$253>>1]|0;
          $256 = $255 & 24;
          $257 = ($256<<16>>16)==(16);
          $258 = ((($$0184)) + 1|0);
          if ($257) {
           $259 = $258;
           while(1) {
            $$pre360 = HEAP8[$259>>0]|0;
            $260 = $$pre360&255;
            $261 = (($254) + ($260<<1)|0);
            $262 = HEAP16[$261>>1]|0;
            $263 = $262 & 24;
            $264 = ($263<<16>>16)==(16);
            $265 = ((($259)) + 1|0);
            if ($264) {
             $259 = $265;
            } else {
             $$lcssa440 = $265;$$lcssa441 = $$pre360;
             break;
            }
           }
          } else {
           $$lcssa440 = $258;$$lcssa441 = $252;
          }
          $266 = ($$lcssa441<<24>>24)==(61);
          if (!($266)) {
           label = 81;
           break L15;
          }
          HEAP8[$$0184>>0] = 0;
          $267 = HEAP32[$18>>2]|0;
          $$0$i188 = $$lcssa440;
          while(1) {
           $268 = HEAP8[$$0$i188>>0]|0;
           $269 = $268&255;
           $270 = (($267) + ($269<<1)|0);
           $271 = HEAP16[$270>>1]|0;
           $272 = $271 & 24;
           $273 = ($272<<16>>16)==(16);
           $274 = ((($$0$i188)) + 1|0);
           if ($273) {
            $$0$i188 = $274;
           } else {
            $$0185 = $$lcssa440;
            break;
           }
          }
          while(1) {
           $275 = HEAP8[$$0185>>0]|0;
           $276 = $275&255;
           $277 = (($267) + ($276<<1)|0);
           $278 = HEAP16[$277>>1]|0;
           $279 = $278 & 8;
           $280 = ($279<<16>>16)==(0);
           $281 = ((($$0185)) + 1|0);
           if ($280) {
            $$0185 = $281;
           } else {
            $$0185$pn = $$0185;
            break;
           }
          }
          while(1) {
           $$1186 = ((($$0185$pn)) + -1|0);
           $282 = ($$1186|0)==($$0$i188|0);
           if ($282) {
            break;
           }
           $283 = HEAP8[$$1186>>0]|0;
           $284 = $283&255;
           $285 = (($267) + ($284<<1)|0);
           $286 = HEAP16[$285>>1]|0;
           $287 = $286 & 16;
           $288 = ($287<<16>>16)==(0);
           if ($288) {
            break;
           } else {
            $$0185$pn = $$1186;
           }
          }
          HEAP8[$$0185$pn>>0] = 0;
          $289 = (_CRYPTO_malloc(12,83252,0)|0);
          $290 = ($289|0)==(0|0);
          if ($290) {
           label = 88;
           break L15;
          }
          $291 = ($$0169|0)==(0|0);
          $292 = HEAP32[$4>>2]|0;
          $$$0169 = $291 ? $292 : $$0169;
          $293 = (_strlen($$0168)|0);
          $294 = (($293) + 1)|0;
          $295 = (_CRYPTO_malloc($294,83252,0)|0);
          $296 = ((($289)) + 4|0);
          HEAP32[$296>>2] = $295;
          $297 = ((($289)) + 8|0);
          HEAP32[$297>>2] = 0;
          $298 = ($295|0)==(0|0);
          if ($298) {
           label = 90;
           break L15;
          }
          $299 = (_strlen($$0168)|0);
          $300 = (($299) + 1)|0;
          (_OPENSSL_strlcpy($295,$$0168,$300)|0);
          $301 = (_str_copy($0,$$$0169,$297,$$0$i188)|0);
          $302 = ($301|0)==(0);
          if ($302) {
           $$1177 = $289;$$2180 = $$1179;$321 = $289;
           break L1;
          }
          $303 = (_strcmp($$$0169,$292)|0);
          $304 = ($303|0)==(0);
          do {
           if ($304) {
            $$1175 = $$0172$ph294;
           } else {
            $305 = (__CONF_get_section($0,$$$0169)|0);
            $306 = ($305|0)==(0|0);
            if (!($306)) {
             $$1175 = $305;
             break;
            }
            $307 = (__CONF_new_section($0,$$$0169)|0);
            $308 = ($307|0)==(0|0);
            if ($308) {
             label = 95;
             break L15;
            } else {
             $$1175 = $307;
            }
           }
          } while(0);
          $309 = (__CONF_add_string($0,$$1175,$289)|0);
          $310 = ($309|0)==(0);
          if ($310) {
           label = 97;
           break L15;
          } else {
           $$0170$be = 0;$$0181$be = 0;
          }
         } else {
          $$0170$be = 0;$$0181$be = 0;
         }
        } else {
         $$0170$be = $34;$$0181$be = 1;
        }
       }
       $55 = (($$0170$be) + 512)|0;
       $56 = (_BUF_MEM_grow($7,$55)|0);
       $57 = ($56|0)==(0);
       if ($57) {
        $$0178$lcssa = $$1179;
        break L13;
       } else {
        $$0170288 = $$0170$be;$$0178287 = $$1179;$$0181286 = $$0181$be;
       }
      }
      while(1) {
       $166 = HEAP8[$$0$i197>>0]|0;
       $167 = $166&255;
       $168 = (($158) + ($167<<1)|0);
       $169 = HEAP16[$168>>1]|0;
       $170 = $169 & 24;
       $171 = ($170<<16>>16)==(16);
       $172 = ((($$0$i197)) + 1|0);
       if ($171) {
        $$0$i197 = $172;
       } else {
        $$0166 = $$0$i197;$324 = $166;
        break;
       }
      }
      L116: while(1) {
       $$0$i201 = $$0166;$174 = $324;
       while(1) {
        $173 = $174&255;
        $175 = (($158) + ($173<<1)|0);
        $176 = HEAP16[$175>>1]|0;
        $177 = $176&65535;
        $178 = $177 & 32;
        $179 = ($178|0)==(0);
        if ($179) {
         $190 = $177 & 775;
         $191 = ($190|0)==(0);
         if ($191) {
          $$0$i199 = $$0$i201;
          break;
         } else {
          $$sink$i202 = 1;
         }
        } else {
         $180 = ((($$0$i201)) + 1|0);
         $181 = HEAP8[$180>>0]|0;
         $182 = $181&255;
         $183 = (($158) + ($182<<1)|0);
         $184 = HEAP16[$183>>1]|0;
         $185 = $184 & 8;
         $186 = $185&65535;
         $187 = $186 >>> 3;
         $188 = (2 - ($187))|0;
         $$sink$i202 = $188;
        }
        $189 = (($$0$i201) + ($$sink$i202)|0);
        $$pre361 = HEAP8[$189>>0]|0;
        $$0$i201 = $189;$174 = $$pre361;
       }
       while(1) {
        $192 = HEAP8[$$0$i199>>0]|0;
        $193 = $192&255;
        $194 = (($158) + ($193<<1)|0);
        $195 = HEAP16[$194>>1]|0;
        $196 = $195 & 24;
        $197 = ($196<<16>>16)==(16);
        $198 = ((($$0$i199)) + 1|0);
        if ($197) {
         $$0$i199 = $198;
        } else {
         break;
        }
       }
       switch ($192<<24>>24) {
       case 0:  {
        label = 60;
        break L15;
        break;
       }
       case 93:  {
        break L116;
        break;
       }
       default: {
       }
       }
       $199 = ($$0166|0)==($$0$i199|0);
       if ($199) {
        label = 60;
        break L15;
       } else {
        $$0166 = $$0$i199;$324 = $192;
       }
      }
      HEAP8[$$0$i201>>0] = 0;
      $200 = (_str_copy($0,0,$4,$$0$i197)|0);
      $201 = ($200|0)==(0);
      if ($201) {
       $$1177 = 0;$$2180 = $$1179;$321 = 0;
       break L1;
      }
      $202 = HEAP32[$4>>2]|0;
      $203 = (__CONF_get_section($0,$202)|0);
      $204 = ($203|0)==(0|0);
      if ($204) {
       $205 = (__CONF_new_section($0,$202)|0);
       $206 = ($205|0)==(0|0);
       if ($206) {
        label = 66;
        break;
       } else {
        $$0172$ph$be = $205;
       }
      } else {
       $$0172$ph$be = $203;
      }
      $207 = (_BUF_MEM_grow($7,512)|0);
      $208 = ($207|0)==(0);
      if ($208) {
       $$0178$lcssa = $$1179;
       break L13;
      } else {
       $$0172$ph294 = $$0172$ph$be;$$0178$ph293 = $$1179;
      }
     }
     if ((label|0) == 60) {
      _ERR_put_error(14,121,100,0,0);
      $$1177 = 0;$$2180 = $$1179;$321 = 0;
      break L1;
     }
     else if ((label|0) == 66) {
      _ERR_put_error(14,121,103,0,0);
      $$1177 = 0;$$2180 = $$1179;$321 = 0;
      break L1;
     }
     else if ((label|0) == 81) {
      _ERR_put_error(14,121,101,0,0);
      $$1177 = 0;$$2180 = $$1179;$321 = 0;
      break L1;
     }
     else if ((label|0) == 88) {
      _ERR_put_error(14,121,65,0,0);
      $$1177 = $289;$$2180 = $$1179;$321 = 0;
      break L1;
     }
     else if ((label|0) == 90) {
      _ERR_put_error(14,121,65,0,0);
      $$1177 = $289;$$2180 = $$1179;$321 = $289;
      break L1;
     }
     else if ((label|0) == 95) {
      _ERR_put_error(14,121,103,0,0);
      $$1177 = $289;$$2180 = $$1179;$321 = $289;
      break L1;
     }
     else if ((label|0) == 97) {
      _ERR_put_error(14,121,65,0,0);
      $$1177 = $289;$$2180 = $$1179;$321 = $289;
      break L1;
     }
     else if ((label|0) == 98) {
      _BUF_MEM_free($7);
      $311 = HEAP32[$4>>2]|0;
      _CRYPTO_free($311,83252,0);
      $$0167 = 1;
      STACKTOP = sp;return ($$0167|0);
     }
    }
   } while(0);
   _ERR_put_error(14,121,7,0,0);
   $$1177 = 0;$$2180 = $$0178$lcssa;$321 = 0;
  }
 } while(0);
 _BUF_MEM_free($7);
 $312 = HEAP32[$4>>2]|0;
 _CRYPTO_free($312,83252,0);
 $313 = ($2|0)==(0|0);
 if (!($313)) {
  HEAP32[$2>>2] = $$2180;
 }
 HEAP32[$vararg_buffer>>2] = $$2180;
 (_BIO_snprintf($3,13,48132,$vararg_buffer)|0);
 HEAP32[$vararg_buffer1>>2] = 48136;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $3;
 _ERR_add_error_data(2,$vararg_buffer1);
 $314 = HEAP32[$5>>2]|0;
 $315 = ($6|0)==($314|0);
 if (!($315)) {
  _CONF_free($314);
  HEAP32[$5>>2] = 0;
 }
 $316 = ($$1177|0)==(0|0);
 if ($316) {
  $$0167 = 0;
  STACKTOP = sp;return ($$0167|0);
 }
 $317 = ((($$1177)) + 4|0);
 $318 = HEAP32[$317>>2]|0;
 _CRYPTO_free($318,83252,0);
 $319 = ((($$1177)) + 8|0);
 $320 = HEAP32[$319>>2]|0;
 _CRYPTO_free($320,83252,0);
 _CRYPTO_free($321,83252,0);
 $$0167 = 0;
 STACKTOP = sp;return ($$0167|0);
}
function _def_dump($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _OPENSSL_LH_doall_arg($3,21,$1);
 return 1;
}
function _def_is_number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1&255;
 $5 = (($3) + ($4<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & 1;
 $8 = $7&65535;
 return ($8|0);
}
function _def_to_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + -48)|0;
 return ($3|0);
}
function _def_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_BIO_new_file($1,48101)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $8 = (_def_load_bio($0,$3,$2)|0);
  (_BIO_free($3)|0);
  $$0 = $8;
  return ($$0|0);
 }
 $5 = (_ERR_peek_last_error()|0);
 $6 = $5 & 4095;
 $7 = ($6|0)==(128);
 if ($7) {
  _ERR_put_error(14,120,114,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  _ERR_put_error(14,120,2,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _dump_value_doall_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = HEAP32[$0>>2]|0;
 if ($4) {
  HEAP32[$vararg_buffer3>>2] = $5;
  (_BIO_printf($1,48116,$vararg_buffer3)|0);
  STACKTOP = sp;return;
 } else {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $7;
  (_BIO_printf($1,48104,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _str_copy($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$3 = 0, $$0 = 0, $$0147 = 0, $$0147$ph = 0, $$0147$pn$lcssa = 0, $$0147$pn168185 = 0, $$0147$pn193 = 0, $$0147$pn193$lcssa$pn = 0, $$0148 = 0, $$0149 = 0, $$0150 = 0, $$0151 = 0, $$0152206 = 0, $$0154 = 0, $$0161 = 0, $$0161$ph = 0, $$0166$ph = 0, $$1 = 0, $$1155 = 0;
 var $$1162$lcssa = 0, $$1162184 = 0, $$1167 = 0, $$1182 = 0, $$1186 = 0, $$2 = 0, $$2156 = 0, $$2163$lcssa = 0, $$2163$lcssa217 = 0, $$2163192 = 0, $$3 = 0, $$3157 = 0, $$3164$lcssa = 0, $$3164205 = 0, $$4 = 0, $$4$lcssa = 0, $$4191 = 0, $$4194 = 0, $$5 = 0, $$lcssa = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond183 = 0, $switch$select = 0;
 var $switch$select170 = 0, $switch$selectcmp = 0, $switch$selectcmp169 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_BUF_MEM_new()|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_strlen($3)|0);
 $7 = (($6) + 1)|0;
 $8 = (_BUF_MEM_grow($4,$7)|0);
 $9 = ($8|0)==(0);
 do {
  if (!($9)) {
   $10 = ((($0)) + 4|0);
   $11 = ((($4)) + 4|0);
   $$0147$ph = $3;$$0161$ph = 0;$$0166$ph = 0;
   L6: while(1) {
    $$0147 = $$0147$ph;$$0161 = $$0161$ph;
    while(1) {
     $12 = HEAP32[$10>>2]|0;
     $13 = HEAP8[$$0147>>0]|0;
     $14 = $13&255;
     $15 = (($12) + ($14<<1)|0);
     $16 = HEAP16[$15>>1]|0;
     $17 = $16&65535;
     $18 = $17 & 64;
     $19 = ($18|0)==(0);
     if (!($19)) {
      $$1182 = ((($$0147)) + 1|0);
      $20 = HEAP8[$$1182>>0]|0;
      $21 = $20&255;
      $22 = (($12) + ($21<<1)|0);
      $23 = HEAP16[$22>>1]|0;
      $24 = $23&65535;
      $25 = $24 & 8;
      $26 = ($25|0)!=(0);
      $27 = ($20<<24>>24)==($13<<24>>24);
      $or$cond183 = $27 | $26;
      L12: do {
       if ($or$cond183) {
        $$1162$lcssa = $$0161;$$3 = $$1182;$52 = $20;
       } else {
        $$0147$pn168185 = $$0147;$$1162184 = $$0161;$$1186 = $$1182;$158 = $20;$29 = $24;$35 = $12;
        while(1) {
         $28 = $29 & 32;
         $30 = ($28|0)==(0);
         if ($30) {
          $$2 = $$1186;$42 = $158;
         } else {
          $31 = ((($$0147$pn168185)) + 2|0);
          $32 = HEAP8[$31>>0]|0;
          $33 = $32&255;
          $34 = (($35) + ($33<<1)|0);
          $36 = HEAP16[$34>>1]|0;
          $37 = $36 & 8;
          $38 = ($37<<16>>16)==(0);
          if ($38) {
           $$2 = $31;$42 = $32;
          } else {
           $$1162$lcssa = $$1162184;$$3 = $31;$52 = $32;
           break L12;
          }
         }
         $39 = HEAP32[$11>>2]|0;
         $40 = (($$1162184) + 1)|0;
         $41 = (($39) + ($$1162184)|0);
         HEAP8[$41>>0] = $42;
         $$1 = ((($$2)) + 1|0);
         $43 = HEAP32[$10>>2]|0;
         $44 = HEAP8[$$1>>0]|0;
         $45 = $44&255;
         $46 = (($43) + ($45<<1)|0);
         $47 = HEAP16[$46>>1]|0;
         $48 = $47&65535;
         $49 = $48 & 8;
         $50 = ($49|0)!=(0);
         $51 = ($44<<24>>24)==($13<<24>>24);
         $or$cond = $51 | $50;
         if ($or$cond) {
          $$1162$lcssa = $40;$$3 = $$1;$52 = $44;
          break;
         } else {
          $$0147$pn168185 = $$2;$$1162184 = $40;$$1186 = $$1;$158 = $44;$29 = $48;$35 = $43;
         }
        }
       }
      } while(0);
      $53 = ($52<<24>>24)==($13<<24>>24);
      $54 = ((($$3)) + 1|0);
      $$$3 = $53 ? $54 : $$3;
      $$0147 = $$$3;$$0161 = $$1162$lcssa;
      continue;
     }
     $55 = $17 & 1024;
     $56 = ($55|0)==(0);
     if (!($56)) {
      $$4191 = ((($$0147)) + 1|0);
      $57 = HEAP8[$$4191>>0]|0;
      $58 = $57&255;
      $59 = (($12) + ($58<<1)|0);
      $60 = HEAP16[$59>>1]|0;
      $61 = $60 & 8;
      $62 = ($61<<16>>16)==(0);
      $63 = ($57<<24>>24)==($13<<24>>24);
      L22: do {
       if ($62) {
        $$0147$pn193 = $$0147;$$2163192 = $$0161;$$4194 = $$4191;$159 = $57;$160 = $63;
        while(1) {
         if ($160) {
          $64 = ((($$0147$pn193)) + 2|0);
          $65 = HEAP8[$64>>0]|0;
          $66 = ($65<<24>>24)==($13<<24>>24);
          if ($66) {
           $$5 = $64;$70 = $13;
          } else {
           $$0147$pn193$lcssa$pn = $$0147$pn193;$$2163$lcssa217 = $$2163192;
           break L22;
          }
         } else {
          $$5 = $$4194;$70 = $159;
         }
         $67 = HEAP32[$11>>2]|0;
         $68 = (($$2163192) + 1)|0;
         $69 = (($67) + ($$2163192)|0);
         HEAP8[$69>>0] = $70;
         $$4 = ((($$5)) + 1|0);
         $71 = HEAP32[$10>>2]|0;
         $72 = HEAP8[$$4>>0]|0;
         $73 = $72&255;
         $74 = (($71) + ($73<<1)|0);
         $75 = HEAP16[$74>>1]|0;
         $76 = $75 & 8;
         $77 = ($76<<16>>16)==(0);
         $78 = ($72<<24>>24)==($13<<24>>24);
         if ($77) {
          $$0147$pn193 = $$5;$$2163192 = $68;$$4194 = $$4;$159 = $72;$160 = $78;
         } else {
          $$0147$pn$lcssa = $$5;$$2163$lcssa = $68;$$4$lcssa = $$4;$$lcssa = $78;
          label = 16;
          break;
         }
        }
       } else {
        $$0147$pn$lcssa = $$0147;$$2163$lcssa = $$0161;$$4$lcssa = $$4191;$$lcssa = $63;
        label = 16;
       }
      } while(0);
      if ((label|0) == 16) {
       label = 0;
       if ($$lcssa) {
        $$0147$pn193$lcssa$pn = $$0147$pn$lcssa;$$2163$lcssa217 = $$2163$lcssa;
       } else {
        $$0147 = $$4$lcssa;$$0161 = $$2163$lcssa;
        continue;
       }
      }
      $79 = ((($$0147$pn193$lcssa$pn)) + 2|0);
      $$0147 = $79;$$0161 = $$2163$lcssa217;
      continue;
     }
     $80 = $17 & 32;
     $81 = ($80|0)==(0);
     if ($81) {
      $97 = $17 & 8;
      $98 = ($97|0)==(0);
      if (!($98)) {
       label = 50;
       break L6;
      }
      $99 = ($13<<24>>24)==(36);
      $100 = ((($$0147)) + 1|0);
      if ($99) {
       break;
      }
      $151 = HEAP32[$11>>2]|0;
      $152 = (($$0161) + 1)|0;
      $153 = (($151) + ($$0161)|0);
      HEAP8[$153>>0] = $13;
      $$0147 = $100;$$0161 = $152;
      continue;
     }
     $82 = ((($$0147)) + 1|0);
     $83 = ((($$0147)) + 2|0);
     $84 = HEAP8[$82>>0]|0;
     $85 = $84&255;
     $86 = (($12) + ($85<<1)|0);
     $87 = HEAP16[$86>>1]|0;
     $88 = $87 & 8;
     $89 = ($88<<16>>16)==(0);
     if (!($89)) {
      label = 50;
      break L6;
     }
     $90 = (($84) + -98)<<24>>24;
     $91 = ($90&255) >>> 1;
     $92 = ($90 << 7)&255;
     $93 = $91 | $92;
     switch ($93<<24>>24) {
     case 8:  {
      $$0148 = 13;
      break;
     }
     case 6:  {
      $$0148 = 10;
      break;
     }
     case 0:  {
      $$0148 = 8;
      break;
     }
     case 9:  {
      $$0148 = 9;
      break;
     }
     default: {
      $$0148 = $84;
     }
     }
     $94 = HEAP32[$11>>2]|0;
     $95 = (($$0161) + 1)|0;
     $96 = (($94) + ($$0161)|0);
     HEAP8[$96>>0] = $$0148;
     $$0147 = $83;$$0161 = $95;
    }
    $101 = HEAP8[$100>>0]|0;
    $switch$selectcmp = ($101<<24>>24)==(40);
    $switch$select = $switch$selectcmp ? 41 : 0;
    $switch$selectcmp169 = ($101<<24>>24)==(123);
    $switch$select170 = $switch$selectcmp169 ? 125 : $switch$select;
    $102 = ($switch$select170|0)!=(0);
    $103 = ((($$0147)) + 2|0);
    $$ = $102 ? $103 : $100;
    $$0154 = $$;
    while(1) {
     $104 = HEAP8[$$0154>>0]|0;
     $105 = $104 << 24 >> 24;
     $106 = $105 & 255;
     $107 = (($12) + ($106<<1)|0);
     $108 = HEAP16[$107>>1]|0;
     $109 = $108 & 263;
     $110 = ($109<<16>>16)==(0);
     $111 = ((($$0154)) + 1|0);
     if ($110) {
      break;
     } else {
      $$0154 = $111;
     }
    }
    $112 = ($104<<24>>24)==(58);
    if ($112) {
     $113 = HEAP8[$111>>0]|0;
     $114 = ($113<<24>>24)==(58);
     if ($114) {
      HEAP8[$$0154>>0] = 0;
      $115 = ((($$0154)) + 2|0);
      $116 = HEAP32[$10>>2]|0;
      $$1155 = $115;
      while(1) {
       $117 = HEAP8[$$1155>>0]|0;
       $118 = $117&255;
       $119 = (($116) + ($118<<1)|0);
       $120 = HEAP16[$119>>1]|0;
       $121 = $120 & 263;
       $122 = ($121<<16>>16)==(0);
       $123 = ((($$1155)) + 1|0);
       if ($122) {
        $$0149 = $$;$$0150 = $115;$$0151 = $$0154;$$1167 = $105;$$2156 = $$1155;$125 = $117;
        break;
       } else {
        $$1155 = $123;
       }
      }
     } else {
      $$0149 = $1;$$0150 = $$;$$0151 = 0;$$1167 = $$0166$ph;$$2156 = $$0154;$125 = 58;
     }
    } else {
     $$0149 = $1;$$0150 = $$;$$0151 = 0;$$1167 = $$0166$ph;$$2156 = $$0154;$125 = $104;
    }
    HEAP8[$$2156>>0] = 0;
    if ($102) {
     $124 = $125 << 24 >> 24;
     $126 = ($124|0)==($switch$select170|0);
     if (!($126)) {
      label = 36;
      break;
     }
     $127 = ((($$2156)) + 1|0);
     $$3157 = $127;
    } else {
     $$3157 = $$2156;
    }
    $128 = (__CONF_get_string($0,$$0149,$$0150)|0);
    $129 = ($$0151|0)==(0|0);
    if (!($129)) {
     $130 = $$1167&255;
     HEAP8[$$0151>>0] = $130;
    }
    HEAP8[$$2156>>0] = $125;
    $131 = ($128|0)==(0|0);
    if ($131) {
     label = 41;
     break;
    }
    $132 = (_strlen($128)|0);
    $133 = HEAP32[$4>>2]|0;
    $134 = $$3157;
    $135 = $$0147;
    $136 = (($135) - ($134))|0;
    $137 = (($132) + ($136))|0;
    $138 = (($137) + ($133))|0;
    $139 = ($138>>>0)>(65536);
    if ($139) {
     label = 43;
     break;
    }
    $140 = (_BUF_MEM_grow_clean($4,$138)|0);
    $141 = ($140|0)==(0);
    if ($141) {
     label = 46;
     break;
    }
    $142 = HEAP8[$128>>0]|0;
    $143 = ($142<<24>>24)==(0);
    if ($143) {
     $$3164$lcssa = $$0161;
    } else {
     $$0152206 = $128;$$3164205 = $$0161;$148 = $142;
     while(1) {
      $144 = ((($$0152206)) + 1|0);
      $145 = HEAP32[$11>>2]|0;
      $146 = (($$3164205) + 1)|0;
      $147 = (($145) + ($$3164205)|0);
      HEAP8[$147>>0] = $148;
      $149 = HEAP8[$144>>0]|0;
      $150 = ($149<<24>>24)==(0);
      if ($150) {
       $$3164$lcssa = $146;
       break;
      } else {
       $$0152206 = $144;$$3164205 = $146;$148 = $149;
      }
     }
    }
    HEAP8[$$2156>>0] = $125;
    $$0147$ph = $$3157;$$0161$ph = $$3164$lcssa;$$0166$ph = $$1167;
   }
   if ((label|0) == 36) {
    _ERR_put_error(14,101,102,0,0);
    break;
   }
   else if ((label|0) == 41) {
    _ERR_put_error(14,101,104,0,0);
    break;
   }
   else if ((label|0) == 43) {
    _ERR_put_error(14,101,116,0,0);
    break;
   }
   else if ((label|0) == 46) {
    _ERR_put_error(14,101,65,0,0);
    break;
   }
   else if ((label|0) == 50) {
    $154 = HEAP32[$11>>2]|0;
    $155 = (($154) + ($$0161)|0);
    HEAP8[$155>>0] = 0;
    $156 = HEAP32[$2>>2]|0;
    _CRYPTO_free($156,83252,0);
    $157 = HEAP32[$11>>2]|0;
    HEAP32[$2>>2] = $157;
    _CRYPTO_free($4,83252,0);
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 _BUF_MEM_free($4);
 $$0 = 0;
 return ($$0|0);
}
function _NCONF_get_section($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  _ERR_put_error(14,108,105,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($1|0)==(0|0);
 if ($3) {
  _ERR_put_error(14,108,107,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $4 = (__CONF_get_section_values($0,$1)|0);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _NCONF_get_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = (__CONF_get_string($0,$1,$2)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ($0|0)==(0|0);
 if ($5) {
  _ERR_put_error(14,109,106,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  _ERR_put_error(14,109,108,0,0);
  HEAP32[$vararg_buffer>>2] = 48142;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 48149;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $2;
  _ERR_add_error_data(4,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _CONF_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = HEAP32[20327]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_NCONF_default()|0);
  HEAP32[20327] = $4;
  $6 = $4;
 } else {
  $6 = $2;
 }
 $5 = ((($6)) + 8|0);
 $7 = HEAP32[$5>>2]|0;
 (FUNCTION_TABLE_ii[$7 & 63]($1)|0);
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = $0;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 (FUNCTION_TABLE_ii[$11 & 63]($1)|0);
 STACKTOP = sp;return;
}
function _NCONF_new($0) {
 $0 = $0|0;
 var $$0 = 0, $$07 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_NCONF_default()|0);
  $$07 = $2;
 } else {
  $$07 = $0;
 }
 $3 = ((($$07)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($$07)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $$0 = $5;
  return ($$0|0);
 }
 _ERR_put_error(14,111,65,0,0);
 $$0 = 0;
 return ($$0|0);
}
function _NCONF_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 63]($0)|0);
 return;
}
function _NCONF_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  _ERR_put_error(14,113,105,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($0,$1,$2)|0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _OPENSSL_load_builtin_modules() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_add_oid_module();
 _ASN1_add_stable_module();
 _EVP_add_alg_module();
 return;
}
function _CONF_modules_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i27$i = 0, $$019$i$i = 0, $$02021$i$i = 0, $$02230$i = 0, $$030$i$i = 0, $$031$i$i = 0, $$033 = 0, $$041 = 0, $$1 = 0, $$1$i$i = 0, $$pre$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 56|0;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$033 = 1;
  STACKTOP = sp;return ($$033|0);
 }
 $5 = ($1|0)==(0|0);
 if ($5) {
  label = 4;
 } else {
  $6 = (_NCONF_get_string($0,0,$1)|0);
  $7 = ($6|0)!=(0|0);
  $8 = $2 & 32;
  $9 = ($8|0)==(0);
  $or$cond = $9 | $7;
  if ($or$cond) {
   $$1 = $6;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $10 = (_NCONF_get_string($0,0,48156)|0);
  $$1 = $10;
 }
 $11 = ($$1|0)==(0|0);
 if ($11) {
  _ERR_clear_error();
  $$033 = 1;
  STACKTOP = sp;return ($$033|0);
 }
 $12 = (_NCONF_get_section($0,$$1)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$033 = 0;
  STACKTOP = sp;return ($$033|0);
 }
 $14 = (_OPENSSL_sk_num($12)|0);
 $15 = ($14|0)>(0);
 if (!($15)) {
  $$033 = 1;
  STACKTOP = sp;return ($$033|0);
 }
 $16 = $2 & 8;
 $17 = ($16|0)==(0);
 $18 = $2 & 4;
 $19 = ($18|0)==(0);
 $20 = $2 & 1;
 $21 = ($20|0)==(0);
 $$041 = 0;
 while(1) {
  $22 = (_OPENSSL_sk_value($12,$$041)|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($22)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_strrchr($24,46)|0);
  $28 = ($27|0)==(0|0);
  if ($28) {
   $32 = (_strlen($24)|0);
   $$019$i$i = $32;
  } else {
   $29 = $27;
   $30 = $24;
   $31 = (($29) - ($30))|0;
   $$019$i$i = $31;
  }
  $33 = HEAP32[20328]|0;
  $34 = (_OPENSSL_sk_num($33)|0);
  $35 = ($34|0)>(0);
  L25: do {
   if ($35) {
    $$02021$i$i = 0;
    while(1) {
     $40 = HEAP32[20328]|0;
     $41 = (_OPENSSL_sk_value($40,$$02021$i$i)|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (_strncmp($43,$24,$$019$i$i)|0);
     $45 = ($44|0)==(0);
     $38 = (($$02021$i$i) + 1)|0;
     if ($45) {
      break;
     }
     $36 = HEAP32[20328]|0;
     $37 = (_OPENSSL_sk_num($36)|0);
     $39 = ($38|0)<($37|0);
     if ($39) {
      $$02021$i$i = $38;
     } else {
      $$0$i$i = 0;
      break L25;
     }
    }
    $$0$i$i = $41;
   } else {
    $$0$i$i = 0;
   }
  } while(0);
  $46 = ($$0$i$i|0)==(0|0);
  $or$cond$i = $17 & $46;
  do {
   if ($or$cond$i) {
    $47 = (_NCONF_get_string($0,$26,64655)|0);
    $48 = ($47|0)==(0|0);
    if ($48) {
     _ERR_clear_error();
     $$031$i$i = $24;
    } else {
     $$031$i$i = $47;
    }
    $49 = (_DSO_load(0,$$031$i$i,0,0)|0);
    $50 = ($49|0)==(0|0);
    if ($50) {
     $$030$i$i = 110;
    } else {
     $51 = (_DSO_bind_func($49,48169)|0);
     $52 = ($51|0)==(0|0);
     if ($52) {
      $$030$i$i = 112;
     } else {
      $53 = (_DSO_bind_func($49,48182)|0);
      $54 = (_module_add($49,$24,$51,$53)|0);
      $55 = ($54|0)==(0|0);
      if ($55) {
       $$030$i$i = 0;
      } else {
       $$02230$i = $54;
       label = 27;
       break;
      }
     }
    }
    (_DSO_free($49)|0);
    _ERR_put_error(14,117,$$030$i$i,0,0);
    HEAP32[$vararg_buffer>>2] = 48197;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 48205;
    $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $$031$i$i;
    _ERR_add_error_data(4,$vararg_buffer);
    label = 25;
   } else {
    if ($46) {
     label = 25;
    } else {
     $$02230$i = $$0$i$i;
     label = 27;
    }
   }
  } while(0);
  L41: do {
   if ((label|0) == 25) {
    label = 0;
    if ($19) {
     _ERR_put_error(14,118,113,0,0);
     HEAP32[$vararg_buffer4>>2] = 48197;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $24;
     _ERR_add_error_data(2,$vararg_buffer4);
     label = 44;
    } else {
     label = 44;
    }
   }
   else if ((label|0) == 27) {
    label = 0;
    $56 = (_CRYPTO_malloc(20,83252,0)|0);
    $57 = ($56|0)==(0|0);
    if (!($57)) {
     HEAP32[$56>>2] = $$02230$i;
     $58 = (_CRYPTO_strdup($24,83252,0)|0);
     $59 = ((($56)) + 4|0);
     HEAP32[$59>>2] = $58;
     $60 = (_CRYPTO_strdup($26,83252,0)|0);
     $61 = ((($56)) + 8|0);
     HEAP32[$61>>2] = $60;
     $62 = ((($56)) + 16|0);
     HEAP32[$62>>2] = 0;
     $63 = HEAP32[$59>>2]|0;
     $64 = ($63|0)==(0|0);
     if ($64) {
      $85 = 0;
     } else {
      $65 = ($60|0)==(0|0);
      if ($65) {
       $85 = $63;
      } else {
       $66 = ((($$02230$i)) + 8|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $$0$i27$i = 0;
        label = 32;
       } else {
        $69 = (FUNCTION_TABLE_iii[$67 & 63]($56,$0)|0);
        $70 = ($69|0)<(1);
        if ($70) {
         $$1$i$i = 1;
        } else {
         $$0$i27$i = 1;
         label = 32;
        }
       }
       do {
        if ((label|0) == 32) {
         label = 0;
         $71 = HEAP32[20329]|0;
         $72 = ($71|0)==(0|0);
         if ($72) {
          $73 = (_OPENSSL_sk_new_null()|0);
          HEAP32[20329] = $73;
          $74 = ($73|0)==(0|0);
          if ($74) {
           _ERR_put_error(14,115,65,0,0);
           $$1$i$i = $$0$i27$i;
           break;
          } else {
           $75 = $73;
          }
         } else {
          $75 = $71;
         }
         $76 = (_OPENSSL_sk_push($75,$56)|0);
         $77 = ($76|0)==(0);
         if ($77) {
          _ERR_put_error(14,115,65,0,0);
          $$1$i$i = $$0$i27$i;
          break;
         } else {
          $78 = ((($$02230$i)) + 16|0);
          $79 = HEAP32[$78>>2]|0;
          $80 = (($79) + 1)|0;
          HEAP32[$78>>2] = $80;
          break L41;
         }
        }
       } while(0);
       $81 = ((($$02230$i)) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($82|0)!=(0|0);
       $84 = ($$1$i$i|0)!=(0);
       $or$cond$i$i = $84 & $83;
       if ($or$cond$i$i) {
        FUNCTION_TABLE_vi[$82 & 63]($56);
       }
       $$pre$i$i = HEAP32[$59>>2]|0;
       $85 = $$pre$i$i;
      }
     }
     _CRYPTO_free($85,83252,0);
     $86 = HEAP32[$61>>2]|0;
     _CRYPTO_free($86,83252,0);
     _CRYPTO_free($56,83252,0);
    }
    if ($19) {
     _ERR_put_error(14,118,109,0,0);
     HEAP32[$vararg_buffer8>>2] = -1;
     (_BIO_snprintf($3,13,48213,$vararg_buffer8)|0);
     HEAP32[$vararg_buffer11>>2] = 48197;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = $24;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = 48369;
     $vararg_ptr16 = ((($vararg_buffer11)) + 12|0);
     HEAP32[$vararg_ptr16>>2] = $26;
     $vararg_ptr17 = ((($vararg_buffer11)) + 16|0);
     HEAP32[$vararg_ptr17>>2] = 48218;
     $vararg_ptr18 = ((($vararg_buffer11)) + 20|0);
     HEAP32[$vararg_ptr18>>2] = $3;
     _ERR_add_error_data(6,$vararg_buffer11);
     label = 44;
    } else {
     label = 44;
    }
   }
  } while(0);
  if ((label|0) == 44) {
   label = 0;
   if ($21) {
    $$033 = -1;
    label = 46;
    break;
   }
  }
  $87 = (($$041) + 1)|0;
  $88 = (_OPENSSL_sk_num($12)|0);
  $89 = ($87|0)<($88|0);
  if ($89) {
   $$041 = $87;
  } else {
   $$033 = 1;
   label = 46;
   break;
  }
 }
 if ((label|0) == 46) {
  STACKTOP = sp;return ($$033|0);
 }
 return (0)|0;
}
function _module_add($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[20328]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (_OPENSSL_sk_new_null()|0);
  HEAP32[20328] = $6;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $8 = (_CRYPTO_zalloc(24,83252,0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$8>>2] = $0;
 $10 = (_CRYPTO_strdup($1,83252,0)|0);
 $11 = ((($8)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($8)) + 8|0);
 HEAP32[$12>>2] = $2;
 $13 = ((($8)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ($10|0)==(0|0);
 if ($14) {
  _CRYPTO_free($8,83252,0);
  $$0 = 0;
  return ($$0|0);
 }
 $15 = HEAP32[20328]|0;
 $16 = (_OPENSSL_sk_push($15,$8)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = $8;
  return ($$0|0);
 }
 $18 = HEAP32[$11>>2]|0;
 _CRYPTO_free($18,83252,0);
 _CRYPTO_free($8,83252,0);
 $$0 = 0;
 return ($$0|0);
}
function _CONF_modules_load_file($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$018 = 0, $$020 = 0, $$021 = 0, $$1 = 0, $$119 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_NCONF_new(0)|0);
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $$0 = 0;$$1 = 0;
   label = 9;
  } else {
   $5 = ($0|0)==(0|0);
   if ($5) {
    $6 = (_CONF_get1_default_config_file()|0);
    $7 = ($6|0)==(0|0);
    if ($7) {
     $$021 = 0;$$119 = 0;
     break;
    } else {
     $$018 = $6;
    }
   } else {
    $$018 = $0;
   }
   $8 = (_NCONF_load($3,$$018,0)|0);
   $9 = ($8|0)<(1);
   if (!($9)) {
    $15 = (_CONF_modules_load($3,$1,$2)|0);
    $$0 = $15;$$1 = $$018;
    label = 9;
    break;
   }
   $10 = $2 & 16;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = 0;$$1 = $$018;
    label = 9;
   } else {
    $12 = (_ERR_peek_last_error()|0);
    $13 = $12 & 4095;
    $14 = ($13|0)==(114);
    if ($14) {
     _ERR_clear_error();
     $$0 = 1;$$1 = $$018;
     label = 9;
    } else {
     $$0 = 0;$$1 = $$018;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $16 = ($0|0)==(0|0);
  if ($16) {
   $$021 = $$0;$$119 = $$1;
  } else {
   $$020 = $$0;
   _NCONF_free($3);
   return ($$020|0);
  }
 }
 _CRYPTO_free($$119,83252,0);
 $$020 = $$021;
 _NCONF_free($3);
 return ($$020|0);
}
function _CONF_get1_default_config_file() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getenv((48229|0))|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (_CRYPTO_strdup($0,83252,0)|0);
  $$0 = $2;
  return ($$0|0);
 }
 $3 = (_X509_get_default_cert_area()|0);
 $4 = (_strlen($3)|0);
 $5 = (($4) + 13)|0;
 $6 = (_CRYPTO_malloc($5,83252,0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_X509_get_default_cert_area()|0);
 (_OPENSSL_strlcpy($6,$8,$5)|0);
 (_OPENSSL_strlcat($6,48242,$5)|0);
 (_OPENSSL_strlcat($6,48244,$5)|0);
 $$0 = $6;
 return ($$0|0);
}
function _CONF_modules_unload($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$us = 0, $$012 = 0, $$013 = 0, $$013$us = 0, $$lcssa = 0, $$old1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CONF_modules_finish();
 $1 = HEAP32[20328]|0;
 $2 = (_OPENSSL_sk_num($1)|0);
 $$012 = (($2) + -1)|0;
 $3 = ($2|0)>(0);
 $4 = HEAP32[20328]|0;
 L1: do {
  if ($3) {
   $$old1 = ($0|0)==(0);
   if ($$old1) {
    $$013 = $$012;$13 = $4;
   } else {
    $$013$us = $$012;$5 = $4;
    while(1) {
     $6 = (_OPENSSL_sk_value($5,$$013$us)|0);
     $7 = HEAP32[20328]|0;
     (_OPENSSL_sk_delete($7,$$013$us)|0);
     $8 = HEAP32[$6>>2]|0;
     (_DSO_free($8)|0);
     $9 = ((($6)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     _CRYPTO_free($10,83252,0);
     _CRYPTO_free($6,83252,0);
     $$0$us = (($$013$us) + -1)|0;
     $11 = ($$013$us|0)>(0);
     $12 = HEAP32[20328]|0;
     if ($11) {
      $$013$us = $$0$us;$5 = $12;
     } else {
      $$lcssa = $12;
      break L1;
     }
    }
   }
   while(1) {
    $14 = (_OPENSSL_sk_value($13,$$013)|0);
    $15 = ((($14)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)>(0);
    if (!($17)) {
     $18 = HEAP32[$14>>2]|0;
     $19 = ($18|0)==(0|0);
     if (!($19)) {
      $22 = HEAP32[20328]|0;
      (_OPENSSL_sk_delete($22,$$013)|0);
      $23 = HEAP32[$14>>2]|0;
      (_DSO_free($23)|0);
      $24 = ((($14)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      _CRYPTO_free($25,83252,0);
      _CRYPTO_free($14,83252,0);
     }
    }
    $$0 = (($$013) + -1)|0;
    $20 = ($$013|0)>(0);
    $21 = HEAP32[20328]|0;
    if ($20) {
     $$013 = $$0;$13 = $21;
    } else {
     $$lcssa = $21;
     break;
    }
   }
  } else {
   $$lcssa = $4;
  }
 } while(0);
 $26 = (_OPENSSL_sk_num($$lcssa)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  return;
 }
 $28 = HEAP32[20328]|0;
 _OPENSSL_sk_free($28);
 HEAP32[20328] = 0;
 return;
}
function _CONF_modules_finish() {
 var $$lcssa = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20329]|0;
 $1 = (_OPENSSL_sk_num($0)|0);
 $2 = ($1|0)>(0);
 $3 = HEAP32[20329]|0;
 if ($2) {
  $4 = $3;
 } else {
  $$lcssa = $3;
  _OPENSSL_sk_free($$lcssa);
  HEAP32[20329] = 0;
  return;
 }
 while(1) {
  $5 = (_OPENSSL_sk_pop($4)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $11;
   } else {
    FUNCTION_TABLE_vi[$13 & 63]($5);
    $$pre$i = HEAP32[$5>>2]|0;
    $16 = $$pre$i;
   }
   $15 = ((($16)) + 16|0);
   $17 = HEAP32[$15>>2]|0;
   $18 = (($17) + -1)|0;
   HEAP32[$15>>2] = $18;
   $19 = ((($5)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   _CRYPTO_free($20,83252,0);
   $21 = ((($5)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   _CRYPTO_free($22,83252,0);
   _CRYPTO_free($5,83252,0);
  }
  $7 = HEAP32[20329]|0;
  $8 = (_OPENSSL_sk_num($7)|0);
  $9 = ($8|0)>(0);
  $10 = HEAP32[20329]|0;
  if ($9) {
   $4 = $10;
  } else {
   $$lcssa = $10;
   break;
  }
 }
 _OPENSSL_sk_free($$lcssa);
 HEAP32[20329] = 0;
 return;
}
function _CONF_module_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_module_add(0,$0,$1,$2)|0);
 $not$ = ($3|0)!=(0|0);
 $$ = $not$&1;
 return ($$|0);
}
function _conf_modules_free_int() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _CONF_modules_finish();
 _CONF_modules_unload(1);
 return;
}
function _CONF_imodule_get_value($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _CONF_parse_list($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$036 = 0, $$037 = 0, $$037$us = 0, $$040 = 0, $$040$us = 0, $$1$us = 0, $$1$us$pn = 0, $$138$lcssa$us = 0, $$13844$us = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 if ($5) {
  _ERR_put_error(14,119,115,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($2|0)==(0);
 if ($6) {
  $$037 = $0;
  while(1) {
   $36 = (_strchr($$037,$1)|0);
   $37 = ($36|0)==($$037|0);
   if ($37) {
    label = 17;
   } else {
    $38 = HEAP8[$$037>>0]|0;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     label = 17;
    } else {
     $41 = ($36|0)==(0|0);
     if ($41) {
      $42 = (_strlen($$037)|0);
      $43 = (($$037) + ($42)|0);
      $$pn = $43;
     } else {
      $$pn = $36;
     }
     $$036 = ((($$pn)) + -1|0);
     $44 = $$036;
     $45 = $$037;
     $46 = (1 - ($45))|0;
     $47 = (($46) + ($44))|0;
     $48 = (FUNCTION_TABLE_iiii[$3 & 63]($$037,$47,$4)|0);
     $$040 = $48;
    }
   }
   if ((label|0) == 17) {
    label = 0;
    $40 = (FUNCTION_TABLE_iiii[$3 & 63](0,0,$4)|0);
    $$040 = $40;
   }
   $49 = ($$040|0)<(1);
   if ($49) {
    $$0 = $$040;
    label = 23;
    break;
   }
   $50 = ($36|0)==(0|0);
   $51 = ((($36)) + 1|0);
   if ($50) {
    $$0 = 1;
    label = 23;
    break;
   } else {
    $$037 = $51;
   }
  }
  if ((label|0) == 23) {
   return ($$0|0);
  }
 } else {
  $$037$us = $0;
 }
 while(1) {
  $7 = HEAP8[$$037$us>>0]|0;
  $8 = ($7<<24>>24)==(0);
  L23: do {
   if ($8) {
    $$138$lcssa$us = $$037$us;$34 = 0;
   } else {
    $$13844$us = $$037$us;$10 = $7;
    while(1) {
     $9 = $10&255;
     $11 = (_isspace($9)|0);
     $12 = ($11|0)==(0);
     if ($12) {
      $$138$lcssa$us = $$13844$us;$34 = $10;
      break L23;
     }
     $13 = ((($$13844$us)) + 1|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if ($15) {
      $$138$lcssa$us = $13;$34 = 0;
      break;
     } else {
      $$13844$us = $13;$10 = $14;
     }
    }
   }
  } while(0);
  $16 = (_strchr($$138$lcssa$us,$1)|0);
  $33 = ($16|0)==($$138$lcssa$us|0);
  $35 = ($34<<24>>24)==(0);
  $or$cond = $33 | $35;
  if ($or$cond) {
   $24 = (FUNCTION_TABLE_iiii[$3 & 63](0,0,$4)|0);
   $$040$us = $24;
  } else {
   $17 = ($16|0)==(0|0);
   if ($17) {
    $18 = (_strlen($$138$lcssa$us)|0);
    $19 = (($$138$lcssa$us) + ($18)|0);
    $$1$us$pn = $19;
   } else {
    $$1$us$pn = $16;
   }
   while(1) {
    $$1$us = ((($$1$us$pn)) + -1|0);
    $20 = HEAP8[$$1$us>>0]|0;
    $21 = $20&255;
    $22 = (_isspace($21)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     break;
    } else {
     $$1$us$pn = $$1$us;
    }
   }
   $28 = $$1$us;
   $29 = $$138$lcssa$us;
   $30 = (1 - ($29))|0;
   $31 = (($30) + ($28))|0;
   $32 = (FUNCTION_TABLE_iiii[$3 & 63]($$138$lcssa$us,$31,$4)|0);
   $$040$us = $32;
  }
  $25 = ($$040$us|0)<(1);
  if ($25) {
   $$0 = $$040$us;
   label = 23;
   break;
  }
  $26 = ($16|0)==(0|0);
  $27 = ((($16)) + 1|0);
  if ($26) {
   $$0 = 1;
   label = 23;
   break;
  } else {
   $$037$us = $27;
  }
 }
 if ((label|0) == 23) {
  return ($$0|0);
 }
 return (0)|0;
}
function _openssl_config_int($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[20330]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  return;
 }
 _OPENSSL_load_builtin_modules();
 _ERR_clear_error();
 (_CONF_modules_load_file(0,$0,48)|0);
 HEAP32[20330] = 1;
 return;
}
function _openssl_no_config_int() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[20330] = 1;
 return;
}
function _OPENSSL_cpuid_setup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _OPENSSL_die($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _CRYPTO_memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$$0$13 = 0, $$0$$0$14 = 0, $$01516 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = $0;
 $4 = $1;
 $$0$$0$14 = $3;
 $$0$$0$13 = $4;
 $5 = ($2|0)==(0);
 if ($5) {
  $$lcssa = 0;
  STACKTOP = sp;return ($$lcssa|0);
 } else {
  $$01516 = 0;$13 = 0;
 }
 while(1) {
  $6 = (($$0$$0$14) + ($$01516)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = (($$0$$0$13) + ($$01516)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 ^ $7;
  $11 = $10&255;
  $12 = $11 | $13;
  $14 = (($$01516) + 1)|0;
  $exitcond = ($14|0)==($2|0);
  if ($exitcond) {
   $$lcssa = $12;
   break;
  } else {
   $$01516 = $14;$13 = $12;
  }
 }
 STACKTOP = sp;return ($$lcssa|0);
}
function _DSO_new_method() {
 var $$017 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20331]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_DSO_METHOD_openssl()|0);
  HEAP32[20331] = $2;
 }
 $3 = (_CRYPTO_zalloc(40,83252,0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _ERR_put_error(37,113,65,0,0);
  $$017 = 0;
  return ($$017|0);
 }
 $5 = (_OPENSSL_sk_new_null()|0);
 $6 = ((($3)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _ERR_put_error(37,113,65,0,0);
  _CRYPTO_free($3,83252,0);
  $$017 = 0;
  return ($$017|0);
 }
 $8 = HEAP32[20331]|0;
 HEAP32[$3>>2] = $8;
 $9 = ((($3)) + 8|0);
 HEAP32[$9>>2] = 1;
 $10 = (_CRYPTO_THREAD_lock_new()|0);
 $11 = ((($3)) + 36|0);
 HEAP32[$11>>2] = $10;
 $12 = ($10|0)==(0|0);
 if ($12) {
  _ERR_put_error(37,113,65,0,0);
  $13 = HEAP32[$6>>2]|0;
  _OPENSSL_sk_free($13);
  _CRYPTO_free($3,83252,0);
  $$017 = 0;
  return ($$017|0);
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$017 = $3;
  return ($$017|0);
 }
 $18 = (FUNCTION_TABLE_ii[$16 & 63]($3)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$017 = $3;
  return ($$017|0);
 }
 (_DSO_free($3)|0);
 $$017 = 0;
 return ($$017|0);
}
function _DSO_free($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_CRYPTO_atomic_add($3,-1,$1,$5)|0);
 $7 = ($6|0)<(1);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $18 = (FUNCTION_TABLE_ii[$16 & 63]($0)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    _ERR_put_error(37,111,107,0,0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ((($20)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = (FUNCTION_TABLE_ii[$22 & 63]($0)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   _ERR_put_error(37,111,102,0,0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $26 = ((($0)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 _OPENSSL_sk_free($27);
 $28 = ((($0)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 _CRYPTO_free($29,83252,0);
 $30 = ((($0)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 _CRYPTO_free($31,83252,0);
 $32 = HEAP32[$4>>2]|0;
 _CRYPTO_THREAD_lock_free($32);
 _CRYPTO_free($0,83252,0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _DSO_load($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$021 = 0, $$023 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 do {
  if ($4) {
   $5 = (_DSO_new_method()|0);
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    $7 = ((($5)) + 12|0);
    HEAP32[$7>>2] = $3;
    $$0 = 1;$$021 = $5;
    break;
   }
   _ERR_put_error(37,112,65,0,0);
   $$023 = 0;
   return ($$023|0);
  } else {
   $$0 = 0;$$021 = $0;
  }
 } while(0);
 $8 = ((($$021)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 do {
  if ($10) {
   $11 = ($1|0)==(0|0);
   if (!($11)) {
    $12 = (_DSO_set_filename($$021,$1)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     _ERR_put_error(37,112,112,0,0);
     break;
    }
    $$pre = HEAP32[$8>>2]|0;
    $phitmp = ($$pre|0)==(0|0);
    if (!($phitmp)) {
     $14 = HEAP32[$$021>>2]|0;
     $15 = ((($14)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      _ERR_put_error(37,112,108,0,0);
      break;
     }
     $18 = (FUNCTION_TABLE_ii[$16 & 63]($$021)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      _ERR_put_error(37,112,103,0,0);
      break;
     } else {
      $$023 = $$021;
      return ($$023|0);
     }
    }
   }
   _ERR_put_error(37,112,111,0,0);
  } else {
   _ERR_put_error(37,112,110,0,0);
  }
 } while(0);
 $20 = ($$0|0)==(0);
 if ($20) {
  $$023 = 0;
  return ($$023|0);
 }
 (_DSO_free($$021)|0);
 $$023 = 0;
 return ($$023|0);
}
function _DSO_set_filename($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  _ERR_put_error(37,129,67,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _ERR_put_error(37,129,110,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (_CRYPTO_strdup($1,83252,0)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  _ERR_put_error(37,129,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = ((($0)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  _CRYPTO_free($10,83252,0);
  HEAP32[$9>>2] = $7;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _DSO_bind_func($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  _ERR_put_error(37,108,67,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _ERR_put_error(37,108,108,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (FUNCTION_TABLE_iii[$6 & 63]($0,$1)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 _ERR_put_error(37,108,106,0,0);
 $$0 = 0;
 return ($$0|0);
}
function _DSO_dsobyaddr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$0$i18 = 0, $$017 = 0, $$07$i19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[20331]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_DSO_METHOD_openssl()|0);
  $$0$i = $4;
 } else {
  $$0$i = $2;
 }
 $5 = ((($$0$i)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _ERR_put_error(37,105,108,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (FUNCTION_TABLE_iiii[$6 & 63]($0,0,0)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (_CRYPTO_malloc($8,83252,0)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$017 = 0;
 } else {
  $12 = HEAP32[20331]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $14 = (_DSO_METHOD_openssl()|0);
   $$0$i18 = $14;
  } else {
   $$0$i18 = $12;
  }
  $15 = ((($$0$i18)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   _ERR_put_error(37,105,108,0,0);
   $$07$i19 = -1;
  } else {
   $18 = (FUNCTION_TABLE_iiii[$16 & 63]($0,$10,$8)|0);
   $$07$i19 = $18;
  }
  $19 = ($$07$i19|0)==($8|0);
  if ($19) {
   $20 = (_DSO_load(0,$10,0,$1)|0);
   $$017 = $20;
  } else {
   $$017 = 0;
  }
 }
 _CRYPTO_free($10,83252,0);
 $$0 = $$017;
 return ($$0|0);
}
function _DSO_METHOD_openssl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1736|0);
}
function _err_cleanup() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_CRYPTO_THREAD_cleanup_local(81328)|0);
 $0 = HEAP32[20333]|0;
 _CRYPTO_THREAD_lock_free($0);
 HEAP32[20333] = 0;
 return;
}
function _ERR_put_error($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_ERR_get_state()|0);
 $6 = ((($5)) + 384|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = (($8|0) % 16)&-1;
 HEAP32[$6>>2] = $9;
 $10 = ((($5)) + 388|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if ($12) {
  $13 = (($9) + 1)|0;
  $14 = (($13|0) % 16)&-1;
  HEAP32[$10>>2] = $14;
 }
 $15 = (($5) + ($9<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = $0 << 24;
 $17 = $1 << 12;
 $18 = $17 & 16773120;
 $19 = $18 | $16;
 $20 = $2 & 4095;
 $21 = $19 | $20;
 $22 = HEAP32[$6>>2]|0;
 $23 = (((($5)) + 64|0) + ($22<<2)|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP32[$6>>2]|0;
 $25 = (((($5)) + 256|0) + ($24<<2)|0);
 HEAP32[$25>>2] = $3;
 $26 = HEAP32[$6>>2]|0;
 $27 = (((($5)) + 320|0) + ($26<<2)|0);
 HEAP32[$27>>2] = $4;
 $28 = HEAP32[$6>>2]|0;
 $29 = (((($5)) + 192|0) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 1;
 $32 = ($31|0)==(0);
 if ($32) {
  $38 = $28;
  $37 = (((($5)) + 192|0) + ($38<<2)|0);
  HEAP32[$37>>2] = 0;
  return;
 }
 $33 = (((($5)) + 128|0) + ($28<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 _CRYPTO_free($34,83252,0);
 $35 = HEAP32[$6>>2]|0;
 $36 = (((($5)) + 128|0) + ($35<<2)|0);
 HEAP32[$36>>2] = 0;
 $$pre = HEAP32[$6>>2]|0;
 $38 = $$pre;
 $37 = (((($5)) + 192|0) + ($38<<2)|0);
 HEAP32[$37>>2] = 0;
 return;
}
function _ERR_get_state() {
 var $$011$i = 0, $$08 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_THREAD_run_once(81336,18)|0);
 $1 = ($0|0)!=(0);
 $2 = HEAP32[20335]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $$08 = 0;
  return ($$08|0);
 }
 $4 = (_CRYPTO_THREAD_get_local(81328)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$08 = $4;
  return ($$08|0);
 }
 $6 = (_CRYPTO_zalloc(392,83252,0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$08 = 0;
  return ($$08|0);
 }
 $8 = (_CRYPTO_THREAD_set_local(81328,$6)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$011$i = 0;
 } else {
  (_OPENSSL_init_crypto(2,0,0)|0);
  (_ossl_init_thread_start(2,0)|0);
  $$08 = $6;
  return ($$08|0);
 }
 while(1) {
  $10 = (((($6)) + 192|0) + ($$011$i<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 1;
  $13 = ($12|0)==(0);
  $14 = (((($6)) + 128|0) + ($$011$i<<2)|0);
  if (!($13)) {
   $15 = HEAP32[$14>>2]|0;
   _CRYPTO_free($15,83252,0);
   HEAP32[$14>>2] = 0;
  }
  HEAP32[$10>>2] = 0;
  $16 = (($$011$i) + 1)|0;
  $exitcond$i = ($16|0)==(16);
  if ($exitcond$i) {
   break;
  } else {
   $$011$i = $16;
  }
 }
 _CRYPTO_free($6,83252,0);
 $$08 = 0;
 return ($$08|0);
}
function _err_do_init_ossl_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_THREAD_init_local(81328,0)|0);
 HEAP32[20335] = $0;
 return;
}
function _ERR_clear_error() {
 var $$021 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $$021 = 0;
 while(1) {
  $1 = (($0) + ($$021<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (((($0)) + 64|0) + ($$021<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (((($0)) + 192|0) + ($$021<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 1;
  $6 = ($5|0)==(0);
  $7 = (((($0)) + 128|0) + ($$021<<2)|0);
  if (!($6)) {
   $8 = HEAP32[$7>>2]|0;
   _CRYPTO_free($8,83252,0);
   HEAP32[$7>>2] = 0;
  }
  HEAP32[$3>>2] = 0;
  $9 = (((($0)) + 256|0) + ($$021<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = (((($0)) + 320|0) + ($$021<<2)|0);
  HEAP32[$10>>2] = -1;
  $11 = (($$021) + 1)|0;
  $exitcond = ($11|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $$021 = $11;
  }
 }
 $12 = ((($0)) + 388|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 384|0);
 HEAP32[$13>>2] = 0;
 return;
}
function _ERR_peek_last_error() {
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $1 = ((($0)) + 388|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 384|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $6 = (((($0)) + 64|0) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $$0$i = $7;
 return ($$0$i|0);
}
function _err_delete_thread_state() {
 var $$011$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 (_CRYPTO_THREAD_set_local(81328,0)|0);
 $$011$i = 0;
 while(1) {
  $2 = (((($0)) + 192|0) + ($$011$i<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 1;
  $5 = ($4|0)==(0);
  $6 = (((($0)) + 128|0) + ($$011$i<<2)|0);
  if (!($5)) {
   $7 = HEAP32[$6>>2]|0;
   _CRYPTO_free($7,83252,0);
   HEAP32[$6>>2] = 0;
  }
  HEAP32[$2>>2] = 0;
  $8 = (($$011$i) + 1)|0;
  $exitcond$i = ($8|0)==(16);
  if ($exitcond$i) {
   break;
  } else {
   $$011$i = $8;
  }
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _ERR_add_error_data($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 _ERR_add_error_vdata($0,$1);
 STACKTOP = sp;return;
}
function _ERR_add_error_vdata($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$03342 = 0, $$03441 = 0, $$036$lcssa = 0, $$03640 = 0, $$043 = 0, $$1 = 0, $$135 = 0, $$137 = 0, $$2 = 0, $$238 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_CRYPTO_malloc(81,83252,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 HEAP8[$2>>0] = 0;
 $4 = ($0|0)>(0);
 L4: do {
  if ($4) {
   $$03342 = 0;$$03441 = 80;$$03640 = $2;$$043 = 0;
   while(1) {
    $arglist_current = HEAP32[$1>>2]|0;
    $5 = $arglist_current;
    $6 = ((0) + 4|0);
    $expanded1 = $6;
    $expanded = (($expanded1) - 1)|0;
    $7 = (($5) + ($expanded))|0;
    $8 = ((0) + 4|0);
    $expanded5 = $8;
    $expanded4 = (($expanded5) - 1)|0;
    $expanded3 = $expanded4 ^ -1;
    $9 = $7 & $expanded3;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $arglist_next = ((($10)) + 4|0);
    HEAP32[$1>>2] = $arglist_next;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$1 = $$03342;$$2 = $$03441;$$238 = $$03640;
    } else {
     $13 = (_strlen($11)|0);
     $14 = (($13) + ($$03342))|0;
     $15 = ($14|0)>($$03441|0);
     if ($15) {
      $16 = (($14) + 21)|0;
      $17 = (_CRYPTO_realloc($$03640,$16,83252,0)|0);
      $18 = ($17|0)==(0|0);
      if ($18) {
       break;
      }
      $19 = (($14) + 20)|0;
      $$135 = $19;$$137 = $17;
     } else {
      $$135 = $$03441;$$137 = $$03640;
     }
     $20 = (($$135) + 1)|0;
     (_OPENSSL_strlcat($$137,$11,$20)|0);
     $$1 = $14;$$2 = $$135;$$238 = $$137;
    }
    $21 = (($$043) + 1)|0;
    $22 = ($21|0)<($0|0);
    if ($22) {
     $$03342 = $$1;$$03441 = $$2;$$03640 = $$238;$$043 = $21;
    } else {
     $$036$lcssa = $$238;
     break L4;
    }
   }
   _CRYPTO_free($$03640,83252,0);
   return;
  } else {
   $$036$lcssa = $2;
  }
 } while(0);
 $23 = (_ERR_get_state()|0);
 $24 = ((($23)) + 384|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 $$$i = $26 ? 15 : $25;
 $27 = (((($23)) + 192|0) + ($$$i<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 1;
 $30 = ($29|0)==(0);
 $31 = (((($23)) + 128|0) + ($$$i<<2)|0);
 if (!($30)) {
  $32 = HEAP32[$31>>2]|0;
  _CRYPTO_free($32,83252,0);
  HEAP32[$31>>2] = 0;
 }
 HEAP32[$31>>2] = $$036$lcssa;
 HEAP32[$27>>2] = 3;
 return;
}
function _ERR_set_mark() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $1 = ((($0)) + 388|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 384|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 $6 = (($0) + ($4<<2)|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 $$0 = 1;
 return ($$0|0);
}
function _ERR_pop_to_mark() {
 var $$ = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ERR_get_state()|0);
 $1 = ((($0)) + 388|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 384|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $33 = $2;$7 = $4;
 }
 while(1) {
  $6 = (($0) + ($7<<2)|0);
  $8 = HEAP32[$6>>2]|0;
  $9 = $8 & 1;
  $10 = ($9|0)==(0);
  if (!($10)) {
   break;
  }
  HEAP32[$6>>2] = 0;
  $11 = HEAP32[$3>>2]|0;
  $12 = (((($0)) + 64|0) + ($11<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = HEAP32[$3>>2]|0;
  $14 = (((($0)) + 192|0) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 1;
  $17 = ($16|0)==(0);
  if ($17) {
   $23 = $13;
  } else {
   $18 = (((($0)) + 128|0) + ($13<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   _CRYPTO_free($19,83252,0);
   $20 = HEAP32[$3>>2]|0;
   $21 = (((($0)) + 128|0) + ($20<<2)|0);
   HEAP32[$21>>2] = 0;
   $$pre = HEAP32[$3>>2]|0;
   $23 = $$pre;
  }
  $22 = (((($0)) + 192|0) + ($23<<2)|0);
  HEAP32[$22>>2] = 0;
  $24 = HEAP32[$3>>2]|0;
  $25 = (((($0)) + 256|0) + ($24<<2)|0);
  HEAP32[$25>>2] = 0;
  $26 = HEAP32[$3>>2]|0;
  $27 = (((($0)) + 320|0) + ($26<<2)|0);
  HEAP32[$27>>2] = -1;
  $28 = HEAP32[$3>>2]|0;
  $29 = (($28) + -1)|0;
  $30 = ($28|0)==(0);
  $$ = $30 ? 15 : $29;
  HEAP32[$3>>2] = $$;
  $31 = HEAP32[$1>>2]|0;
  $32 = ($31|0)==($$|0);
  if ($32) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $33 = $31;$7 = $$;
  }
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 $34 = ($33|0)==($7|0);
 $35 = (($0) + ($7<<2)|0);
 if ($34) {
  $$0 = 0;
  return ($$0|0);
 }
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & -2;
 HEAP32[$35>>2] = $37;
 $$0 = 1;
 return ($$0|0);
}
function _EVP_MD_CTX_reset($0) {
 $0 = $0|0;
 var $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return 1;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = (_EVP_MD_CTX_test_flags($0,2)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = HEAP32[$0>>2]|0;
    $10 = ((($9)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    (FUNCTION_TABLE_ii[$11 & 63]($0)|0);
   }
  }
  $$pr = HEAP32[$0>>2]|0;
  $12 = ($$pr|0)==(0|0);
  if (!($12)) {
   $13 = ((($$pr)) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if (!($15)) {
    $16 = ((($0)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0|0);
    if (!($18)) {
     $19 = (_EVP_MD_CTX_test_flags($0,4)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $21 = HEAP32[$16>>2]|0;
      $22 = HEAP32[$0>>2]|0;
      $23 = ((($22)) + 40|0);
      $24 = HEAP32[$23>>2]|0;
      _CRYPTO_clear_free($21,$24,83252,0);
     }
    }
   }
  }
 }
 $25 = ((($0)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 _EVP_PKEY_CTX_free($26);
 _OPENSSL_cleanse($0,24);
 return 1;
}
function _EVP_MD_CTX_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(24,83252,0)|0);
 return ($0|0);
}
function _EVP_MD_CTX_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_EVP_MD_CTX_reset($0)|0);
 _CRYPTO_free($0,83252,0);
 return;
}
function _EVP_DigestInit_ex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$or$cond = 0, $notlhs = 0, $notrhs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _EVP_MD_CTX_clear_flags($0,2);
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $5 = ($3|0)==(0|0);
  if (!($5)) {
   $6 = ((($3)) + 40|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = ((($0)) + 12|0);
    $10 = HEAP32[$9>>2]|0;
    _CRYPTO_clear_free($10,$7,83252,0);
    HEAP32[$9>>2] = 0;
   }
  }
  HEAP32[$0>>2] = $1;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 256;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = ((($1)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if (!($17)) {
    $18 = ((($1)) + 20|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($0)) + 20|0);
    HEAP32[$20>>2] = $19;
    $21 = (_CRYPTO_zalloc($16,83252,0)|0);
    $22 = ((($0)) + 12|0);
    HEAP32[$22>>2] = $21;
    $23 = ($21|0)==(0|0);
    if ($23) {
     _ERR_put_error(6,128,65,0,0);
     $$1 = 0;
     return ($$1|0);
    }
   }
  }
 }
 $24 = ((($0)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  $27 = (_EVP_PKEY_CTX_ctrl($25,-1,248,7,0,$0)|0);
  $notlhs = ($27|0)>(0);
  $notrhs = ($27|0)==(-2);
  $not$or$cond = $notrhs | $notlhs;
  if (!($not$or$cond)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $28 = ((($0)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & 256;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $$1 = 1;
  return ($$1|0);
 }
 $32 = HEAP32[$0>>2]|0;
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (FUNCTION_TABLE_ii[$34 & 63]($0)|0);
 $$1 = $35;
 return ($$1|0);
}
function _EVP_DigestUpdate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$4 & 63]($0,$1,$2)|0);
 return ($5|0);
}
function _EVP_DigestFinal_ex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(65);
 if (!($6)) {
  _OPENSSL_die(48283,83252,0);
  // unreachable;
 }
 $7 = ((($3)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 63]($0,$1)|0);
 $10 = ($2|0)==(0|0);
 $11 = HEAP32[$0>>2]|0;
 if (!($10)) {
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$2>>2] = $13;
 }
 $14 = ((($11)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $20 = $11;
 } else {
  (FUNCTION_TABLE_ii[$15 & 63]($0)|0);
  _EVP_MD_CTX_set_flags($0,2);
  $$pre = HEAP32[$0>>2]|0;
  $20 = $$pre;
 }
 $17 = ((($0)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($20)) + 40|0);
 $21 = HEAP32[$19>>2]|0;
 _OPENSSL_cleanse($18,$21);
 return ($9|0);
}
function _EVP_MD_CTX_copy_ex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$034 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre35 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = HEAP32[$0>>2]|0;
   $6 = ($5|0)==($3|0);
   $7 = ((($0)) + 12|0);
   if ($6) {
    $8 = HEAP32[$7>>2]|0;
    _EVP_MD_CTX_set_flags($0,4);
    $$0 = $8;
   } else {
    $$0 = 0;
   }
   (_EVP_MD_CTX_reset($0)|0);
   ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$1+20>>2]|0;
   HEAP32[$7>>2] = 0;
   $9 = ((($0)) + 16|0);
   HEAP32[$9>>2] = 0;
   $10 = ((($1)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP32[$0>>2]|0;
    $14 = ((($13)) + 40|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = ($$0|0)==(0|0);
     do {
      if ($17) {
       $18 = (_CRYPTO_malloc($15,83252,0)|0);
       HEAP32[$7>>2] = $18;
       $19 = ($18|0)==(0|0);
       if (!($19)) {
        $$pre = HEAP32[$0>>2]|0;
        $$phi$trans$insert = ((($$pre)) + 40|0);
        $$pre35 = HEAP32[$$phi$trans$insert>>2]|0;
        $21 = $18;$22 = $$pre35;
        break;
       }
       _ERR_put_error(6,110,65,0,0);
       $$034 = 0;
       return ($$034|0);
      } else {
       HEAP32[$7>>2] = $$0;
       $21 = $$0;$22 = $15;
      }
     } while(0);
     $20 = HEAP32[$10>>2]|0;
     _memcpy(($21|0),($20|0),($22|0))|0;
    }
   }
   $23 = ((($1)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($0)) + 20|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($1)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if (!($28)) {
    $29 = (_EVP_PKEY_CTX_dup($27)|0);
    HEAP32[$9>>2] = $29;
    $30 = ($29|0)==(0|0);
    if ($30) {
     (_EVP_MD_CTX_reset($0)|0);
     $$034 = 0;
     return ($$034|0);
    }
   }
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0|0);
   if ($34) {
    $$034 = 1;
    return ($$034|0);
   }
   $35 = (FUNCTION_TABLE_iii[$33 & 63]($0,$1)|0);
   $$034 = $35;
   return ($$034|0);
  }
 }
 _ERR_put_error(6,110,111,0,0);
 $$034 = 0;
 return ($$034|0);
}
function _EVP_Digest($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (_CRYPTO_zalloc(24,83252,0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 _EVP_MD_CTX_set_flags($6,1);
 $8 = (_EVP_DigestInit_ex($6,$4,0)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $35 = 0;
 } else {
  $10 = ((($6)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_iiii[$11 & 63]($6,$0,$1)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $35 = 0;
  } else {
   $14 = HEAP32[$6>>2]|0;
   $15 = ((($14)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)<(65);
   if (!($17)) {
    _OPENSSL_die(48283,83252,0);
    // unreachable;
   }
   $18 = ((($14)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iii[$19 & 63]($6,$2)|0);
   $21 = ($3|0)==(0|0);
   $22 = HEAP32[$6>>2]|0;
   if (!($21)) {
    $23 = ((($22)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$3>>2] = $24;
   }
   $25 = ((($22)) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $31 = $22;
   } else {
    (FUNCTION_TABLE_ii[$26 & 63]($6)|0);
    _EVP_MD_CTX_set_flags($6,2);
    $$pre$i = HEAP32[$6>>2]|0;
    $31 = $$pre$i;
   }
   $28 = ((($6)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($31)) + 40|0);
   $32 = HEAP32[$30>>2]|0;
   _OPENSSL_cleanse($29,$32);
   $33 = ($20|0)!=(0);
   $35 = $33;
  }
 }
 $34 = $35&1;
 (_EVP_MD_CTX_reset($6)|0);
 _CRYPTO_free($6,83252,0);
 $$0 = $34;
 return ($$0|0);
}
function _EVP_add_alg_module() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_CONF_module_add(48341,46,0)|0);
 return;
}
function _alg_module_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02124 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 $3 = (_CONF_imodule_get_value($0)|0);
 $4 = (_NCONF_get_section($1,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _ERR_put_error(6,177,165,0,0);
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $6 = (_OPENSSL_sk_num($4)|0);
 $7 = ($6|0)>(0);
 if (!($7)) {
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 $$02124 = 0;
 while(1) {
  $8 = (_OPENSSL_sk_value($4,$$02124)|0);
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_strcmp($10,48353)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (_X509V3_get_value_bool($8,$2)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    label = 7;
    break;
   }
   $15 = HEAP32[$2>>2]|0;
   $16 = ($15|0)>(0);
   if ($16) {
    label = 9;
    break;
   }
  } else {
   _ERR_put_error(6,177,169,0,0);
   $17 = HEAP32[$9>>2]|0;
   $18 = ((($8)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$vararg_buffer>>2] = 48363;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $17;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 48369;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $19;
   _ERR_add_error_data(4,$vararg_buffer);
  }
  $20 = (($$02124) + 1)|0;
  $21 = (_OPENSSL_sk_num($4)|0);
  $22 = ($20|0)<($21|0);
  if ($22) {
   $$02124 = $20;
  } else {
   $$3 = 1;
   label = 13;
   break;
  }
 }
 if ((label|0) == 7) {
  _ERR_put_error(6,177,168,0,0);
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 else if ((label|0) == 9) {
  _ERR_put_error(6,177,167,0,0);
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return ($$3|0);
 }
 return (0)|0;
}
function _EVP_MD_block_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _EVP_MD_type($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _EVP_MD_size($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(6,162,159,0,0);
  $$0 = -1;
  return ($$0|0);
 } else {
  $2 = ((($0)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _EVP_MD_CTX_md($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _EVP_MD_CTX_pkey_ctx($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _EVP_MD_CTX_md_data($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _EVP_MD_CTX_set_update_fn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _EVP_MD_CTX_set_flags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | $1;
 HEAP32[$2>>2] = $4;
 return;
}
function _EVP_MD_CTX_clear_flags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 ^ -1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & $2;
 HEAP32[$3>>2] = $5;
 return;
}
function _EVP_MD_CTX_test_flags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & $1;
 return ($4|0);
}
function _EVP_PBE_cleanup() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20336]|0;
 _OPENSSL_sk_pop_free($0,29);
 HEAP32[20336] = 0;
 return;
}
function _free_evp_pbe_ctl($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_free($0,83252,0);
 return;
}
function _EVP_md5() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1780|0);
}
function _init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_EVP_MD_CTX_md_data($0)|0);
 $2 = (_MD5_Init($1)|0);
 return ($2|0);
}
function _update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_EVP_MD_CTX_md_data($0)|0);
 $4 = (_MD5_Update($3,$1,$2)|0);
 return ($4|0);
}
function _final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_EVP_MD_CTX_md_data($0)|0);
 $3 = (_MD5_Final($1,$2)|0);
 return ($3|0);
}
function _EVP_sha1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1828|0);
}
function _init_1115($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_EVP_MD_CTX_md_data($0)|0);
 $2 = (_SHA1_Init($1)|0);
 return ($2|0);
}
function _update_1116($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_EVP_MD_CTX_md_data($0)|0);
 $4 = (_SHA1_Update($3,$1,$2)|0);
 return ($4|0);
}
function _final_1117($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_EVP_MD_CTX_md_data($0)|0);
 $3 = (_SHA1_Final($1,$2)|0);
 return ($3|0);
}
function _ctrl_1118($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp + 24|0;
 $5 = sp;
 $6 = ($1|0)==(29);
 if ($6) {
  $7 = ($0|0)==(0|0);
  if ($7) {
   $$0 = 0;
  } else {
   $8 = (_EVP_MD_CTX_md_data($0)|0);
   $9 = ($2|0)==(48);
   if ($9) {
    $10 = (_SHA1_Update($8,$3,48)|0);
    $11 = ($10|0)<(1);
    if ($11) {
     $$0 = 0;
    } else {
     dest=$4; stop=dest+40|0; do { HEAP8[dest>>0]=54|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
     $12 = (_SHA1_Update($8,$4,40)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $$0 = 0;
     } else {
      $14 = (_SHA1_Final($5,$8)|0);
      $15 = ($14|0)==(0);
      if ($15) {
       $$0 = 0;
      } else {
       $16 = (_SHA1_Init($8)|0);
       $17 = ($16|0)==(0);
       if ($17) {
        $$0 = 0;
       } else {
        $18 = (_SHA1_Update($8,$3,48)|0);
        $19 = ($18|0)<(1);
        if ($19) {
         $$0 = 0;
        } else {
         dest=$4; stop=dest+40|0; do { HEAP8[dest>>0]=92|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
         $20 = (_SHA1_Update($8,$4,40)|0);
         $21 = ($20|0)==(0);
         if ($21) {
          $$0 = 0;
         } else {
          $22 = (_SHA1_Update($8,$5,20)|0);
          $23 = ($22|0)==(0);
          if ($23) {
           $$0 = 0;
          } else {
           _OPENSSL_cleanse($5,20);
           $$0 = 1;
          }
         }
        }
       }
      }
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } else {
  $$0 = -2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _EVP_DigestSignInit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_do_sigver_init($0,$1,$2,$3,$4,0)|0);
 return ($5|0);
}
function _do_sigver_init($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (_EVP_PKEY_CTX_new($4,$3)|0);
  HEAP32[$7>>2] = $10;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $13 = $10;
  }
 } else {
  $13 = $8;
 }
 $12 = HEAP32[$13>>2]|0;
 $14 = ((($12)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 $18 = ($2|0)==(0|0);
 $or$cond = $18 & $17;
 do {
  if ($or$cond) {
   $19 = (_EVP_PKEY_get_default_digest_nid($4,$6)|0);
   $20 = ($19|0)>(0);
   if ($20) {
    $21 = HEAP32[$6>>2]|0;
    $22 = (_OBJ_nid2sn($21)|0);
    $23 = (_EVP_get_digestbyname($22)|0);
    $24 = ($23|0)==(0|0);
    if (!($24)) {
     $$pre = HEAP32[$7>>2]|0;
     $$pre31 = HEAP32[$$pre>>2]|0;
     $$2 = $23;$27 = $$pre31;$30 = $$pre;
     break;
    }
   } else {
   }
   _ERR_put_error(6,161,158,0,0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$2 = $2;$27 = $12;$30 = $13;
  }
 } while(0);
 $25 = ($5|0)==(0);
 do {
  if ($25) {
   $37 = ((($27)) + 60|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if ($39) {
    $44 = (_EVP_PKEY_sign_init($30)|0);
    $45 = ($44|0)<(1);
    if ($45) {
     $$0 = 0;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   $40 = (FUNCTION_TABLE_iii[$38 & 63]($30,$0)|0);
   $41 = ($40|0)<(1);
   if ($41) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $42 = HEAP32[$7>>2]|0;
    $43 = ((($42)) + 16|0);
    HEAP32[$43>>2] = 64;
    break;
   }
  } else {
   $26 = ((($27)) + 68|0);
   $28 = HEAP32[$26>>2]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $35 = (_EVP_PKEY_verify_init($30)|0);
    $36 = ($35|0)<(1);
    if ($36) {
     $$0 = 0;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   $31 = (FUNCTION_TABLE_iii[$28 & 63]($30,$0)|0);
   $32 = ($31|0)<(1);
   if ($32) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $33 = HEAP32[$7>>2]|0;
    $34 = ((($33)) + 16|0);
    HEAP32[$34>>2] = 128;
    break;
   }
  }
 } while(0);
 $46 = HEAP32[$7>>2]|0;
 $47 = (_EVP_PKEY_CTX_ctrl($46,-1,248,1,0,$$2)|0);
 $48 = ($47|0)<(1);
 if ($48) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = ($1|0)==(0|0);
 if (!($49)) {
  $50 = HEAP32[$7>>2]|0;
  HEAP32[$1>>2] = $50;
 }
 $51 = HEAP32[$7>>2]|0;
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 & 4;
 $56 = ($55|0)==(0);
 if (!($56)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $57 = (_EVP_DigestInit_ex($0,$$2,$3)|0);
 $not$ = ($57|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _EVP_DigestVerifyInit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_do_sigver_init($0,$1,$2,$3,$4,1)|0);
 return ($5|0);
}
function _EVP_DigestSignFinal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$282 = 0, $$3$ph = 0, $$484 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = ($1|0)==(0|0);
  if ($12) {
   $13 = ((($7)) + 64|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (FUNCTION_TABLE_iiiii[$14 & 63]($6,0,$2,$0)|0);
   $$5 = $15;
   STACKTOP = sp;return ($$5|0);
  }
  $16 = ((($0)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 512;
  $19 = ($18|0)==(0);
  if (!($19)) {
   $20 = ((($7)) + 64|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iiiii[$21 & 63]($6,$1,$2,$0)|0);
   $$5 = $22;
   STACKTOP = sp;return ($$5|0);
  }
  $23 = (_EVP_PKEY_CTX_dup($6)|0);
  $24 = ($23|0)==(0|0);
  if ($24) {
   $$5 = 0;
   STACKTOP = sp;return ($$5|0);
  }
  $25 = HEAP32[$23>>2]|0;
  $26 = ((($25)) + 64|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_iiiii[$27 & 63]($23,$1,$2,$0)|0);
  _EVP_PKEY_CTX_free($23);
  $$5 = $28;
  STACKTOP = sp;return ($$5|0);
 }
 $29 = ((($7)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 $32 = ($1|0)==(0|0);
 do {
  if ($32) {
   if (!($31)) {
    $55 = (FUNCTION_TABLE_iiiii[$30 & 63]($6,0,$2,$0)|0);
    $56 = ($55|0)<(1);
    if ($56) {
     $$5 = 0;
    } else {
     break;
    }
    STACKTOP = sp;return ($$5|0);
   }
   $57 = HEAP32[$0>>2]|0;
   $58 = (_EVP_MD_size($57)|0);
   $59 = ($58|0)<(0);
   if ($59) {
    $$5 = 0;
    STACKTOP = sp;return ($$5|0);
   }
   $60 = (_EVP_PKEY_sign($6,0,$2,0,$58)|0);
   $61 = ($60|0)<(1);
   if ($61) {
    $$5 = 0;
    STACKTOP = sp;return ($$5|0);
   }
  } else {
   HEAP32[$4>>2] = 0;
   $33 = ((($0)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 & 512;
   $36 = ($35|0)==(0);
   do {
    if ($36) {
     $39 = (_EVP_MD_CTX_new()|0);
     $40 = ($39|0)==(0|0);
     if ($40) {
      $$3$ph = 0;
     } else {
      $41 = (_EVP_MD_CTX_copy_ex($39,$0)|0);
      $42 = ($41|0)==(0);
      if ($42) {
       $$3$ph = 0;
      } else {
       if ($31) {
        $49 = (_EVP_DigestFinal_ex($39,$3,$4)|0);
        $$282 = $49;
       } else {
        $43 = ((($39)) + 16|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = HEAP32[$44>>2]|0;
        $46 = ((($45)) + 64|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = (FUNCTION_TABLE_iiiii[$47 & 63]($44,$1,$2,$39)|0);
        $$282 = $48;
       }
       _EVP_MD_CTX_free($39);
       $$484 = $$282;
       label = 19;
      }
     }
    } else {
     if ($31) {
      $38 = (_EVP_DigestFinal_ex($0,$3,$4)|0);
      $$484 = $38;
      label = 19;
      break;
     } else {
      $37 = (FUNCTION_TABLE_iiiii[$30 & 63]($6,$1,$2,$0)|0);
      $$3$ph = $37;
      break;
     }
    }
   } while(0);
   if ((label|0) == 19) {
    $50 = ($$484|0)!=(0);
    $or$cond = $31 & $50;
    if ($or$cond) {
     $51 = HEAP32[$5>>2]|0;
     $52 = HEAP32[$4>>2]|0;
     $53 = (_EVP_PKEY_sign($51,$1,$2,$3,$52)|0);
     $54 = ($53|0)<(1);
     if ($54) {
      $$3$ph = 0;
     } else {
      break;
     }
    } else {
     $$3$ph = $$484;
    }
   }
   $$5 = $$3$ph;
   STACKTOP = sp;return ($$5|0);
  }
 } while(0);
 $$5 = 1;
 STACKTOP = sp;return ($$5|0);
}
function _EVP_get_digestbyname($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_OPENSSL_init_crypto(8,0,0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_OBJ_NAME_get($0,1)|0);
 $$0 = $3;
 return ($$0|0);
}
function _evp_cleanup_int() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _OBJ_NAME_cleanup(2);
 _OBJ_NAME_cleanup(1);
 _OBJ_NAME_cleanup(-1);
 _EVP_PBE_cleanup();
 _OBJ_sigid_free();
 return;
}
function _EVP_PKEY_bits($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($0)) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($3)) + 52|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = (FUNCTION_TABLE_ii[$6 & 63]($0)|0);
    $$0 = $8;
   }
  }
 }
 return ($$0|0);
}
function _EVP_PKEY_size($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($0)) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($3)) + 48|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = (FUNCTION_TABLE_ii[$6 & 63]($0)|0);
    $$0 = $8;
   }
  }
 }
 return ($$0|0);
}
function _EVP_PKEY_set_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$020$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = ($0|0)!=(0|0);
 if ($3) {
  $4 = ((($0)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = ((($0)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    $10 = ((($8)) + 88|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     FUNCTION_TABLE_vi[$11 & 63]($0);
     HEAP32[$4>>2] = 0;
    }
   }
  }
  $13 = ((($0)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ((($0)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $$020$i = 1;
    STACKTOP = sp;return ($$020$i|0);
   }
  }
 }
 $19 = (_EVP_PKEY_asn1_find($2,$1)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  _ERR_put_error(6,158,156,0,0);
  $$020$i = 0;
  STACKTOP = sp;return ($$020$i|0);
 }
 if (!($3)) {
  $$020$i = 1;
  STACKTOP = sp;return ($$020$i|0);
 }
 $21 = ((($0)) + 12|0);
 HEAP32[$21>>2] = $19;
 $22 = HEAP32[$2>>2]|0;
 $23 = ((($0)) + 16|0);
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[$19>>2]|0;
 HEAP32[$0>>2] = $24;
 $25 = ((($0)) + 4|0);
 HEAP32[$25>>2] = $1;
 $$020$i = 1;
 STACKTOP = sp;return ($$020$i|0);
}
function _EVP_PKEY_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(36,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _ERR_put_error(6,106,65,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($0)) + 24|0);
 HEAP32[$4>>2] = 1;
 $5 = (_CRYPTO_THREAD_lock_new()|0);
 $6 = ((($0)) + 32|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if (!($7)) {
  $$0 = $0;
  return ($$0|0);
 }
 _ERR_put_error(6,106,65,0,0);
 _CRYPTO_free($0,83252,0);
 $$0 = 0;
 return ($$0|0);
}
function _EVP_PKEY_up_ref($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $narrow = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_CRYPTO_atomic_add($2,1,$1,$4)|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)>(1);
 $not$ = ($5|0)>(0);
 $narrow = $not$ & $7;
 $$0 = $narrow&1;
 STACKTOP = sp;return ($$0|0);
}
function _EVP_PKEY_assign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$3>>2] = 0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $11 = ((($9)) + 88|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    FUNCTION_TABLE_vi[$12 & 63]($0);
    HEAP32[$5>>2] = 0;
   }
  }
 }
 $14 = ((($0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==($1|0);
 if ($16) {
  $17 = ((($0)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $20 = (_EVP_PKEY_asn1_find($3,$1)|0);
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    $22 = ((($0)) + 12|0);
    HEAP32[$22>>2] = $20;
    $23 = HEAP32[$3>>2]|0;
    $24 = ((($0)) + 16|0);
    HEAP32[$24>>2] = $23;
    $25 = HEAP32[$20>>2]|0;
    HEAP32[$0>>2] = $25;
    HEAP32[$14>>2] = $1;
    break;
   }
   _ERR_put_error(6,158,156,0,0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $26 = ($2|0)!=(0|0);
 $27 = $26&1;
 HEAP32[$5>>2] = $2;
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _EVP_PKEY_get0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _EVP_PKEY_set1_RSA($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0$i5 = 0;
  STACKTOP = sp;return ($$0$i5|0);
 }
 HEAP32[$2>>2] = 0;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = ((($8)) + 88|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    FUNCTION_TABLE_vi[$11 & 63]($0);
    HEAP32[$4>>2] = 0;
   }
  }
 }
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(6);
 if ($15) {
  $16 = ((($0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $19 = (_EVP_PKEY_asn1_find($2,6)|0);
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = ((($0)) + 12|0);
    HEAP32[$21>>2] = $19;
    $22 = HEAP32[$2>>2]|0;
    $23 = ((($0)) + 16|0);
    HEAP32[$23>>2] = $22;
    $24 = HEAP32[$19>>2]|0;
    HEAP32[$0>>2] = $24;
    HEAP32[$13>>2] = 6;
    break;
   }
   _ERR_put_error(6,158,156,0,0);
   $$0$i5 = 0;
   STACKTOP = sp;return ($$0$i5|0);
  }
 } while(0);
 $25 = ($1|0)==(0|0);
 HEAP32[$4>>2] = $1;
 if ($25) {
  $$0$i5 = 0;
  STACKTOP = sp;return ($$0$i5|0);
 }
 (_RSA_up_ref($1)|0);
 $$0$i5 = 1;
 STACKTOP = sp;return ($$0$i5|0);
}
function _EVP_PKEY_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 (_CRYPTO_atomic_add($3,-1,$1,$5)|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 88|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   FUNCTION_TABLE_vi[$12 & 63]($0);
   $14 = ((($0)) + 20|0);
   HEAP32[$14>>2] = 0;
  }
 }
 $15 = HEAP32[$4>>2]|0;
 _CRYPTO_THREAD_lock_free($15);
 $16 = ((($0)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 _OPENSSL_sk_pop_free($17,30);
 _CRYPTO_free($0,83252,0);
 STACKTOP = sp;return;
}
function _EVP_PKEY_get_default_digest_nid($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0$i = -2;
  return ($$0$i|0);
 }
 $5 = ((($3)) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0$i = -2;
  return ($$0$i|0);
 }
 $8 = (FUNCTION_TABLE_iiiii[$6 & 63]($0,3,0,$1)|0);
 $$0$i = $8;
 return ($$0$i|0);
}
function _EVP_PKEY_sign_init($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 40|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    $7 = ((($0)) + 16|0);
    HEAP32[$7>>2] = 8;
    $8 = ((($2)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     $$0 = 1;
     return ($$0|0);
    }
    $11 = (FUNCTION_TABLE_ii[$9 & 63]($0)|0);
    $12 = ($11|0)<(1);
    if (!($12)) {
     $$0 = $11;
     return ($$0|0);
    }
    HEAP32[$7>>2] = 0;
    $$0 = $11;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(6,141,150,0,0);
 $$0 = -2;
 return ($$0|0);
}
function _EVP_PKEY_sign($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre21 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = ((($6)) + 40|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = ((($0)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(8);
    if (!($13)) {
     _ERR_put_error(6,140,151,0,0);
     $$1 = -1;
     return ($$1|0);
    }
    $14 = ((($6)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & 2;
    $17 = ($16|0)==(0);
    do {
     if ($17) {
      $25 = $9;
     } else {
      $18 = ((($0)) + 8|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (_EVP_PKEY_size($19)|0);
      $21 = ($20|0)==(0);
      if ($21) {
       _ERR_put_error(6,140,163,0,0);
       $$1 = 0;
       return ($$1|0);
      }
      $22 = ($1|0)==(0|0);
      if ($22) {
       HEAP32[$2>>2] = $20;
       $$1 = 1;
       return ($$1|0);
      }
      $23 = HEAP32[$2>>2]|0;
      $24 = ($23>>>0)<($20>>>0);
      if (!($24)) {
       $$pre = HEAP32[$0>>2]|0;
       $$phi$trans$insert = ((($$pre)) + 40|0);
       $$pre21 = HEAP32[$$phi$trans$insert>>2]|0;
       $25 = $$pre21;
       break;
      }
      _ERR_put_error(6,140,155,0,0);
      $$1 = 0;
      return ($$1|0);
     }
    } while(0);
    $26 = (FUNCTION_TABLE_iiiiii[$25 & 31]($0,$1,$2,$3,$4)|0);
    $$1 = $26;
    return ($$1|0);
   }
  }
 }
 _ERR_put_error(6,140,150,0,0);
 $$1 = -2;
 return ($$1|0);
}
function _EVP_PKEY_verify_init($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    $7 = ((($0)) + 16|0);
    HEAP32[$7>>2] = 16;
    $8 = ((($2)) + 44|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     $$0 = 1;
     return ($$0|0);
    }
    $11 = (FUNCTION_TABLE_ii[$9 & 63]($0)|0);
    $12 = ($11|0)<(1);
    if (!($12)) {
     $$0 = $11;
     return ($$0|0);
    }
    HEAP32[$7>>2] = 0;
    $$0 = $11;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(6,143,150,0,0);
 $$0 = -2;
 return ($$0|0);
}
function _evp_pkey_set_cb_translate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _BN_GENCB_set($0,36,$1);
 return;
}
function _trans_cb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_BN_GENCB_get_arg($2)|0);
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$5>>2] = $0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($3)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 63]($3)|0);
 return ($9|0);
}
function _EVP_PKEY_new_mac_key($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$2 = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre16$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_EVP_PKEY_CTX_new_id($0,$1)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   label = 4;
  } else {
   $8 = ((($6)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    label = 4;
   } else {
    $11 = ((($4)) + 16|0);
    HEAP32[$11>>2] = 4;
    $12 = ((($6)) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $15 = (FUNCTION_TABLE_ii[$13 & 63]($4)|0);
     $16 = ($15|0)<(1);
     if ($16) {
      HEAP32[$11>>2] = 0;
      $$2 = 0;
      break;
     }
    }
    $17 = (_EVP_PKEY_CTX_ctrl($4,-1,4,6,$3,$2)|0);
    $18 = ($17|0)<(1);
    if ($18) {
     $$2 = 0;
    } else {
     $19 = HEAP32[$4>>2]|0;
     $20 = ($19|0)==(0|0);
     if (!($20)) {
      $21 = ((($19)) + 32|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(0|0);
      if (!($23)) {
       $24 = HEAP32[$11>>2]|0;
       $25 = ($24|0)==(4);
       if (!($25)) {
        _ERR_put_error(6,146,151,0,0);
        $$2 = 0;
        break;
       }
       $26 = (_EVP_PKEY_new()|0);
       $27 = ($26|0)==(0|0);
       if ($27) {
        $$2 = 0;
        break;
       }
       $$pre$i = HEAP32[$4>>2]|0;
       $$phi$trans$insert$i = ((($$pre$i)) + 32|0);
       $$pre16$i = HEAP32[$$phi$trans$insert$i>>2]|0;
       $28 = (FUNCTION_TABLE_iii[$$pre16$i & 63]($4,$26)|0);
       $29 = ($28|0)<(1);
       if (!($29)) {
        $$2 = $26;
        break;
       }
       _EVP_PKEY_free($26);
       $$2 = 0;
       break;
      }
     }
     _ERR_put_error(6,146,150,0,0);
     $$2 = 0;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  _ERR_put_error(6,147,150,0,0);
  $$2 = 0;
 }
 _EVP_PKEY_CTX_free($4);
 $$0 = $$2;
 return ($$0|0);
}
function _pmeth_cmp_BSEARCH_CMP_FN($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 return ($6|0);
}
function _EVP_PKEY_CTX_new($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_int_ctx_new($0,$1,-1)|0);
 return ($2|0);
}
function _int_ctx_new($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$025 = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ($2|0)==(-1);
 do {
  if ($5) {
   $6 = ($0|0)==(0|0);
   if ($6) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ((($0)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $10 = HEAP32[$8>>2]|0;
    $$025 = $10;
    break;
   }
  } else {
   $$025 = $2;
  }
 } while(0);
 HEAP32[$4>>2] = $3;
 HEAP32[$3>>2] = $$025;
 $11 = HEAP32[20337]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  label = 8;
 } else {
  $13 = (_OPENSSL_sk_find($11,$3)|0);
  $14 = ($13|0)>(-1);
  if ($14) {
   $15 = HEAP32[20337]|0;
   $16 = (_OPENSSL_sk_value($15,$13)|0);
   $$1$i = $16;
   label = 11;
  } else {
   label = 8;
  }
 }
 do {
  if ((label|0) == 8) {
   $17 = (_OBJ_bsearch_($4,1876,4,4,47)|0);
   $18 = ($17|0)==(0|0);
   if ($18) {
    break;
   } else {
    $19 = HEAP32[$17>>2]|0;
    $$1$i = $19;
    label = 11;
    break;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $20 = ($$1$i|0)==(0|0);
  if (!($20)) {
   $21 = (_CRYPTO_zalloc(40,83252,0)|0);
   $22 = ($21|0)==(0|0);
   if ($22) {
    _ERR_put_error(6,157,65,0,0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $23 = ((($21)) + 4|0);
   HEAP32[$23>>2] = $1;
   HEAP32[$21>>2] = $$1$i;
   $24 = ((($21)) + 16|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($21)) + 8|0);
   HEAP32[$25>>2] = $0;
   $26 = ($0|0)==(0|0);
   if (!($26)) {
    (_EVP_PKEY_up_ref($0)|0);
   }
   $27 = ((($$1$i)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $$0 = $21;
    STACKTOP = sp;return ($$0|0);
   }
   $30 = (FUNCTION_TABLE_ii[$28 & 63]($21)|0);
   $31 = ($30|0)<(1);
   if (!($31)) {
    $$0 = $21;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$21>>2] = 0;
   $32 = HEAP32[$25>>2]|0;
   _EVP_PKEY_free($32);
   $33 = ((($21)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   _EVP_PKEY_free($34);
   _CRYPTO_free($21,83252,0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _ERR_put_error(6,157,156,0,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EVP_PKEY_CTX_new_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_int_ctx_new(0,$1,$0)|0);
 return ($2|0);
}
function _EVP_PKEY_CTX_dup($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0, $$pre25 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_CRYPTO_malloc(40,83252,0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $10;
  $14 = $12;
 } else {
  (_EVP_PKEY_up_ref($10)|0);
  $$pre = HEAP32[$9>>2]|0;
  $14 = $$pre;
 }
 $13 = ((($6)) + 8|0);
 HEAP32[$13>>2] = $14;
 $15 = ((($0)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $16;
  $20 = $18;
 } else {
  (_EVP_PKEY_up_ref($16)|0);
  $$pre25 = HEAP32[$15>>2]|0;
  $20 = $$pre25;
 }
 $19 = ((($6)) + 12|0);
 HEAP32[$19>>2] = $20;
 $21 = ((($6)) + 20|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($6)) + 24|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($0)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($6)) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP32[$0>>2]|0;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_iii[$28 & 63]($6,$0)|0);
 $30 = ($29|0)>(0);
 if ($30) {
  $$0 = $6;
  return ($$0|0);
 }
 HEAP32[$6>>2] = 0;
 $31 = HEAP32[$13>>2]|0;
 _EVP_PKEY_free($31);
 $32 = HEAP32[$19>>2]|0;
 _EVP_PKEY_free($32);
 _CRYPTO_free($6,83252,0);
 $$0 = 0;
 return ($$0|0);
}
function _EVP_PKEY_CTX_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   FUNCTION_TABLE_vi[$5 & 63]($0);
  }
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _EVP_PKEY_free($8);
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 _EVP_PKEY_free($10);
 _CRYPTO_free($0,83252,0);
 return;
}
function _EVP_PKEY_CTX_ctrl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $6 = ($0|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = ((($7)) + 100|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $12 = ($1|0)==(-1);
    if (!($12)) {
     $13 = HEAP32[$7>>2]|0;
     $14 = ($13|0)==($1|0);
     if (!($14)) {
      $$0 = -1;
      return ($$0|0);
     }
    }
    $15 = ((($0)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0);
    if ($17) {
     _ERR_put_error(6,137,149,0,0);
     $$0 = -1;
     return ($$0|0);
    }
    $18 = ($2|0)!=(-1);
    $19 = $16 & $2;
    $20 = ($19|0)==(0);
    $or$cond = $18 & $20;
    if ($or$cond) {
     _ERR_put_error(6,137,148,0,0);
     $$0 = -1;
     return ($$0|0);
    }
    $21 = (FUNCTION_TABLE_iiiii[$10 & 63]($0,$3,$4,$5)|0);
    $22 = ($21|0)==(-2);
    if (!($22)) {
     $$0 = $21;
     return ($$0|0);
    }
    _ERR_put_error(6,137,147,0,0);
    $$0 = -2;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(6,137,147,0,0);
 $$0 = -2;
 return ($$0|0);
}
function _EVP_PKEY_CTX_str2ctrl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strlen($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 100|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiiii[$7 & 63]($0,$1,$3,$2)|0);
 $$0 = $8;
 return ($$0|0);
}
function _EVP_PKEY_CTX_hex2ctrl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$011 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = (_OPENSSL_hexstr2buf($2,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$011 = 0;
  STACKTOP = sp;return ($$011|0);
 }
 $6 = HEAP32[$3>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiiii[$9 & 63]($0,$1,$6,$4)|0);
 _CRYPTO_free($4,83252,0);
 $$011 = $10;
 STACKTOP = sp;return ($$011|0);
}
function _EVP_PKEY_CTX_set_data($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _EVP_PKEY_CTX_get_data($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _EVP_PKEY_CTX_get0_pkey($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _crypto_cleanup_all_ex_data_int() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20338]|0;
 _OPENSSL_sk_pop_free($0,31);
 HEAP32[20338] = 0;
 $1 = HEAP32[(81356)>>2]|0;
 _OPENSSL_sk_pop_free($1,31);
 HEAP32[(81356)>>2] = 0;
 $2 = HEAP32[(81360)>>2]|0;
 _OPENSSL_sk_pop_free($2,31);
 HEAP32[(81360)>>2] = 0;
 $3 = HEAP32[(81364)>>2]|0;
 _OPENSSL_sk_pop_free($3,31);
 HEAP32[(81364)>>2] = 0;
 $4 = HEAP32[(81368)>>2]|0;
 _OPENSSL_sk_pop_free($4,31);
 HEAP32[(81368)>>2] = 0;
 $5 = HEAP32[(81372)>>2]|0;
 _OPENSSL_sk_pop_free($5,31);
 HEAP32[(81372)>>2] = 0;
 $6 = HEAP32[(81376)>>2]|0;
 _OPENSSL_sk_pop_free($6,31);
 HEAP32[(81376)>>2] = 0;
 $7 = HEAP32[(81380)>>2]|0;
 _OPENSSL_sk_pop_free($7,31);
 HEAP32[(81380)>>2] = 0;
 $8 = HEAP32[(81384)>>2]|0;
 _OPENSSL_sk_pop_free($8,31);
 HEAP32[(81384)>>2] = 0;
 $9 = HEAP32[(81388)>>2]|0;
 _OPENSSL_sk_pop_free($9,31);
 HEAP32[(81388)>>2] = 0;
 $10 = HEAP32[(81392)>>2]|0;
 _OPENSSL_sk_pop_free($10,31);
 HEAP32[(81392)>>2] = 0;
 $11 = HEAP32[(81396)>>2]|0;
 _OPENSSL_sk_pop_free($11,31);
 HEAP32[(81396)>>2] = 0;
 $12 = HEAP32[(81400)>>2]|0;
 _OPENSSL_sk_pop_free($12,31);
 HEAP32[(81400)>>2] = 0;
 $13 = HEAP32[(81404)>>2]|0;
 _OPENSSL_sk_pop_free($13,31);
 HEAP32[(81404)>>2] = 0;
 $14 = HEAP32[20352]|0;
 _CRYPTO_THREAD_lock_free($14);
 HEAP32[20352] = 0;
 return;
}
function _cleanup_cb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_free($0,83252,0);
 return;
}
function _do_ex_data_init_ossl_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_OPENSSL_init_crypto(0,0,0)|0);
 $0 = (_CRYPTO_THREAD_lock_new()|0);
 HEAP32[20352] = $0;
 $1 = ($0|0)!=(0|0);
 $2 = $1&1;
 HEAP32[20354] = $2;
 return;
}
function _CRYPTO_new_ex_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i50 = 0, $$04751$ph = 0, $$04854 = 0, $$1 = 0, $$14953 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond56 = 0, $or$cond = 0, $or$cond3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp;
 $4 = ($0>>>0)>(13);
 if ($4) {
  _ERR_put_error(15,113,7,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_CRYPTO_THREAD_run_once(81412,19)|0);
 $6 = ($5|0)!=(0);
 $7 = HEAP32[20354]|0;
 $8 = ($7|0)!=(0);
 $or$cond3$i = $6 & $8;
 if (!($or$cond3$i)) {
  _ERR_put_error(15,113,65,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[20352]|0;
 $10 = ($9|0)==(0|0);
 $11 = (81352 + ($0<<2)|0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_CRYPTO_THREAD_write_lock($9)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$2>>2] = 0;
 $13 = HEAP32[$11>>2]|0;
 $14 = (_OPENSSL_sk_num($13)|0);
 $15 = ($14|0)>(0);
 do {
  if ($15) {
   $16 = ($14|0)<(10);
   if ($16) {
    $$04751$ph = $3;
   } else {
    $17 = $14 << 2;
    $18 = (_CRYPTO_malloc($17,83252,0)|0);
    $19 = ($18|0)==(0|0);
    if ($19) {
     $$1 = 0;
     break;
    } else {
     $$04751$ph = $18;
    }
   }
   $$04854 = 0;
   while(1) {
    $20 = HEAP32[$11>>2]|0;
    $21 = (_OPENSSL_sk_value($20,$$04854)|0);
    $22 = (($$04751$ph) + ($$04854<<2)|0);
    HEAP32[$22>>2] = $21;
    $23 = (($$04854) + 1)|0;
    $exitcond56 = ($23|0)==($14|0);
    if ($exitcond56) {
     $$1 = $$04751$ph;
     break;
    } else {
     $$04854 = $23;
    }
   }
  } else {
   $$1 = 0;
  }
 } while(0);
 $24 = HEAP32[20352]|0;
 (_CRYPTO_THREAD_unlock($24)|0);
 $25 = ($$1|0)==(0|0);
 $or$cond = $15 & $25;
 if ($or$cond) {
  _ERR_put_error(15,112,65,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if ($15) {
  $$14953 = 0;
  while(1) {
   $26 = (($$1) + ($$14953<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if (!($28)) {
    $29 = ((($27)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0|0);
    if (!($31)) {
     $32 = HEAP32[$2>>2]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      $$0$i50 = 0;
     } else {
      $34 = (_OPENSSL_sk_num($32)|0);
      $35 = ($34|0)>($$14953|0);
      if ($35) {
       $36 = HEAP32[$2>>2]|0;
       $37 = (_OPENSSL_sk_value($36,$$14953)|0);
       $$0$i50 = $37;
      } else {
       $$0$i50 = 0;
      }
     }
     $38 = HEAP32[$26>>2]|0;
     $39 = ((($38)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = HEAP32[$38>>2]|0;
     $42 = ((($38)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     FUNCTION_TABLE_viiiiii[$40 & 31]($1,$$0$i50,$2,$$14953,$41,$43);
    }
   }
   $44 = (($$14953) + 1)|0;
   $exitcond = ($44|0)==($14|0);
   if ($exitcond) {
    break;
   } else {
    $$14953 = $44;
   }
  }
 }
 $45 = ($$1|0)==($3|0);
 if ($45) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _CRYPTO_free($$1,83252,0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _CRYPTO_free_ex_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i48 = 0, $$0$i48$us = 0, $$04651 = 0, $$049$ph = 0, $$14750 = 0, $$14750$us = 0, $$15760 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond54 = 0, $exitcond55 = 0, $or$cond3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp;
 $4 = ($0>>>0)>(13);
 if ($4) {
  _ERR_put_error(15,113,7,0,0);
  $64 = HEAP32[$2>>2]|0;
  _OPENSSL_sk_free($64);
  HEAP32[$2>>2] = 0;
  STACKTOP = sp;return;
 }
 $5 = (_CRYPTO_THREAD_run_once(81412,19)|0);
 $6 = ($5|0)!=(0);
 $7 = HEAP32[20354]|0;
 $8 = ($7|0)!=(0);
 $or$cond3$i = $6 & $8;
 if (!($or$cond3$i)) {
  _ERR_put_error(15,113,65,0,0);
  $64 = HEAP32[$2>>2]|0;
  _OPENSSL_sk_free($64);
  HEAP32[$2>>2] = 0;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[20352]|0;
 $10 = ($9|0)==(0|0);
 $11 = (81352 + ($0<<2)|0);
 if ($10) {
  $64 = HEAP32[$2>>2]|0;
  _OPENSSL_sk_free($64);
  HEAP32[$2>>2] = 0;
  STACKTOP = sp;return;
 }
 (_CRYPTO_THREAD_write_lock($9)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $64 = HEAP32[$2>>2]|0;
  _OPENSSL_sk_free($64);
  HEAP32[$2>>2] = 0;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$11>>2]|0;
 $14 = (_OPENSSL_sk_num($13)|0);
 $15 = ($14|0)>(0);
 L15: do {
  if ($15) {
   $17 = ($14|0)<(10);
   if ($17) {
    $$049$ph = $3;
   } else {
    $18 = $14 << 2;
    $19 = (_CRYPTO_malloc($18,83252,0)|0);
    $20 = ($19|0)==(0|0);
    if ($20) {
     $26 = HEAP32[20352]|0;
     (_CRYPTO_THREAD_unlock($26)|0);
     $$14750$us = 0;
     while(1) {
      $27 = HEAP32[20352]|0;
      (_CRYPTO_THREAD_write_lock($27)|0);
      $28 = HEAP32[$11>>2]|0;
      $29 = (_OPENSSL_sk_value($28,$$14750$us)|0);
      $30 = HEAP32[20352]|0;
      (_CRYPTO_THREAD_unlock($30)|0);
      $31 = ($29|0)==(0|0);
      if (!($31)) {
       $32 = ((($29)) + 12|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(0|0);
       if (!($34)) {
        $35 = HEAP32[$2>>2]|0;
        $36 = ($35|0)==(0|0);
        if ($36) {
         $$0$i48$us = 0;
        } else {
         $37 = (_OPENSSL_sk_num($35)|0);
         $38 = ($37|0)>($$14750$us|0);
         if ($38) {
          $39 = HEAP32[$2>>2]|0;
          $40 = (_OPENSSL_sk_value($39,$$14750$us)|0);
          $$0$i48$us = $40;
         } else {
          $$0$i48$us = 0;
         }
        }
        $41 = HEAP32[$32>>2]|0;
        $42 = HEAP32[$29>>2]|0;
        $43 = ((($29)) + 4|0);
        $44 = HEAP32[$43>>2]|0;
        FUNCTION_TABLE_viiiiii[$41 & 31]($1,$$0$i48$us,$2,$$14750$us,$42,$44);
       }
      }
      $45 = (($$14750$us) + 1)|0;
      $exitcond = ($45|0)==($14|0);
      if ($exitcond) {
       $$15760 = 0;
       break L15;
      } else {
       $$14750$us = $45;
      }
     }
    } else {
     $$049$ph = $19;
    }
   }
   $$04651 = 0;
   while(1) {
    $21 = HEAP32[$11>>2]|0;
    $22 = (_OPENSSL_sk_value($21,$$04651)|0);
    $23 = (($$049$ph) + ($$04651<<2)|0);
    HEAP32[$23>>2] = $22;
    $24 = (($$04651) + 1)|0;
    $exitcond55 = ($24|0)==($14|0);
    if ($exitcond55) {
     break;
    } else {
     $$04651 = $24;
    }
   }
   $25 = HEAP32[20352]|0;
   (_CRYPTO_THREAD_unlock($25)|0);
   if ($15) {
    $$14750 = 0;
    while(1) {
     $46 = (($$049$ph) + ($$14750<<2)|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(0|0);
     if (!($48)) {
      $49 = ((($47)) + 12|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$2>>2]|0;
       $53 = ($52|0)==(0|0);
       if ($53) {
        $$0$i48 = 0;
       } else {
        $54 = (_OPENSSL_sk_num($52)|0);
        $55 = ($54|0)>($$14750|0);
        if ($55) {
         $56 = HEAP32[$2>>2]|0;
         $57 = (_OPENSSL_sk_value($56,$$14750)|0);
         $$0$i48 = $57;
        } else {
         $$0$i48 = 0;
        }
       }
       $58 = HEAP32[$49>>2]|0;
       $59 = HEAP32[$47>>2]|0;
       $60 = ((($47)) + 4|0);
       $61 = HEAP32[$60>>2]|0;
       FUNCTION_TABLE_viiiiii[$58 & 31]($1,$$0$i48,$2,$$14750,$59,$61);
      }
     }
     $62 = (($$14750) + 1)|0;
     $exitcond54 = ($62|0)==($14|0);
     if ($exitcond54) {
      break;
     } else {
      $$14750 = $62;
     }
    }
   }
   $63 = ($$049$ph|0)==($3|0);
   if ($63) {
    $64 = HEAP32[$2>>2]|0;
    _OPENSSL_sk_free($64);
    HEAP32[$2>>2] = 0;
    STACKTOP = sp;return;
   } else {
    $$15760 = $$049$ph;
   }
  } else {
   $16 = HEAP32[20352]|0;
   (_CRYPTO_THREAD_unlock($16)|0);
   $$15760 = 0;
  }
 } while(0);
 _CRYPTO_free($$15760,83252,0);
 $64 = HEAP32[$2>>2]|0;
 _OPENSSL_sk_free($64);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _hmac_pkey_public_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_EVP_PKEY_get0($0)|0);
 $3 = (_EVP_PKEY_get0($1)|0);
 $4 = (_ASN1_OCTET_STRING_cmp($2,$3)|0);
 return ($4|0);
}
function _hmac_size($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 64;
}
function _hmac_key_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_EVP_PKEY_get0($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$1>>2]|0;
  _OPENSSL_cleanse($4,$6);
 }
 _ASN1_OCTET_STRING_free($1);
 return;
}
function _hmac_pkey_ctrl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cond = ($1|0)==(3);
 if ($cond) {
  HEAP32[$3>>2] = 672;
  $$0 = 1;
 } else {
  $$0 = -2;
 }
 return ($$0|0);
}
function _old_hmac_decode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_ASN1_OCTET_STRING_new()|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (_ASN1_OCTET_STRING_set($3,$5,$2)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = (_EVP_PKEY_assign($0,855,$3)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $$0 = 1;
    return ($$0|0);
   }
  }
 }
 _ASN1_OCTET_STRING_free($3);
 $$0 = 0;
 return ($$0|0);
}
function _old_hmac_encode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = (_EVP_PKEY_get0($0)|0);
 $3 = ($1|0)==(0|0);
 do {
  if ($3) {
   $$pre$phiZ2D = $2;
  } else {
   $4 = HEAP32[$1>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $12 = ((($2)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP32[$2>>2]|0;
    _memcpy(($4|0),($13|0),($14|0))|0;
    $15 = HEAP32[$2>>2]|0;
    $16 = HEAP32[$1>>2]|0;
    $17 = (($16) + ($15)|0);
    HEAP32[$1>>2] = $17;
    $$pre$phiZ2D = $2;
    break;
   }
   $6 = HEAP32[$2>>2]|0;
   $7 = (_CRYPTO_malloc($6,83252,0)|0);
   HEAP32[$1>>2] = $7;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = -1;
    return ($$0|0);
   } else {
    $9 = ((($2)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$2>>2]|0;
    _memcpy(($7|0),($10|0),($11|0))|0;
    $$pre$phiZ2D = $2;
    break;
   }
  }
 } while(0);
 $18 = HEAP32[$$pre$phiZ2D>>2]|0;
 $$0 = $18;
 return ($$0|0);
}
function _pkey_hmac_init($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_zalloc(24,83252,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 4;
 $4 = (_HMAC_CTX_new()|0);
 $5 = ((($1)) + 20|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  _CRYPTO_free($1,83252,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $7 = ((($0)) + 20|0);
  HEAP32[$7>>2] = $1;
  $8 = ((($0)) + 36|0);
  HEAP32[$8>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _pkey_hmac_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_CRYPTO_zalloc(24,83252,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 4;
 $5 = (_HMAC_CTX_new()|0);
 $6 = ((($2)) + 20|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _CRYPTO_free($2,83252,0);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($0)) + 20|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 36|0);
 HEAP32[$9>>2] = 0;
 $10 = (_EVP_PKEY_CTX_get_data($1)|0);
 $11 = (_EVP_PKEY_CTX_get_data($0)|0);
 $12 = HEAP32[$10>>2]|0;
 HEAP32[$11>>2] = $12;
 $13 = ((($11)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($10)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_HMAC_CTX_copy($14,$16)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $19 = ((($10)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   $$0 = 1;
   return ($$0|0);
  }
  $22 = ((($10)) + 4|0);
  $23 = ((($11)) + 4|0);
  $24 = HEAP32[$22>>2]|0;
  $25 = (_ASN1_OCTET_STRING_set($23,$20,$24)|0);
  $26 = ($25|0)==(0);
  if (!($26)) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $27 = (_EVP_PKEY_CTX_get_data($0)|0);
 $28 = ($27|0)==(0|0);
 if ($28) {
  $$0 = 0;
  return ($$0|0);
 }
 $29 = ((($27)) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 _HMAC_CTX_free($30);
 $31 = ((($27)) + 4|0);
 $32 = ((($27)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$31>>2]|0;
 _CRYPTO_clear_free($33,$34,83252,0);
 _CRYPTO_free($27,83252,0);
 _EVP_PKEY_CTX_set_data($0,0);
 $$0 = 0;
 return ($$0|0);
}
function _pkey_hmac_cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_EVP_PKEY_CTX_get_data($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 _HMAC_CTX_free($4);
 $5 = ((($1)) + 4|0);
 $6 = ((($1)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 _CRYPTO_clear_free($7,$8,83252,0);
 _CRYPTO_free($1,83252,0);
 _EVP_PKEY_CTX_set_data($0,0);
 return;
}
function _pkey_hmac_keygen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($3)) + 4|0);
 $8 = (_ASN1_OCTET_STRING_dup($7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 (_EVP_PKEY_assign($1,855,$8)|0);
 $$0 = 1;
 return ($$0|0);
}
function _hmac_signctx_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_EVP_MD_CTX_test_flags($1,-257)|0);
 _HMAC_CTX_set_flags($5,$6);
 _EVP_MD_CTX_set_flags($1,256);
 _EVP_MD_CTX_set_update_fn($1,37);
 return 1;
}
function _hmac_signctx($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_EVP_MD_CTX_md($3)|0);
 $8 = (_EVP_MD_size($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $8;
  $10 = ($1|0)==(0|0);
  if ($10) {
   $$0 = 1;
  } else {
   $11 = ((($6)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_HMAC_Final($12,$1,$4)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 0;
   } else {
    $15 = HEAP32[$4>>2]|0;
    HEAP32[$2>>2] = $15;
    $$0 = 1;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _pkey_hmac_ctrl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($1|0) {
 case 6:  {
  $6 = ($3|0)==(0|0);
  $7 = ($2|0)>(0);
  $or$cond = $7 & $6;
  $8 = ($2|0)<(-1);
  $or$cond3 = $8 | $or$cond;
  if ($or$cond3) {
   $$0 = 0;
   return ($$0|0);
  }
  $9 = ((($5)) + 4|0);
  $10 = (_ASN1_OCTET_STRING_set($9,$3,$2)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 1:  {
  HEAP32[$5>>2] = $3;
  break;
 }
 case 7:  {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($5)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($15)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$15>>2]|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = ((($0)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_HMAC_Init_ex($17,$19,$20,$21,$23)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $$0 = 1;
 return ($$0|0);
}
function _pkey_hmac_ctrl_str($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = (_strcmp($1,48456)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (_EVP_PKEY_CTX_str2ctrl($0,6,$2)|0);
    $$0 = $6;
    break;
   }
   $7 = (_strcmp($1,48460)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = (_EVP_PKEY_CTX_hex2ctrl($0,6,$2)|0);
    $$0 = $9;
   } else {
    $$0 = -2;
   }
  }
 } while(0);
 return ($$0|0);
}
function _int_update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_EVP_MD_CTX_pkey_ctx($0)|0);
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_HMAC_Update($7,$1,$2)|0);
 $not$ = ($8|0)!=(0);
 $$ = $not$&1;
 return ($$|0);
}
function _HMAC_Init_ex($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$064 = 0, $$06569 = 0, $$067 = 0, $$16668 = 0, $$pre = 0, $$pre$phi73Z2D = 0, $$pre72 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond70 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $5 = sp;
 $6 = ($3|0)==(0|0);
 $7 = HEAP32[$0>>2]|0;
 if ($6) {
  $11 = ($7|0)==(0|0);
  if ($11) {
   $$064 = 0;
   STACKTOP = sp;return ($$064|0);
  } else {
   $$0 = 0;$$067 = $7;
  }
 } else {
  $8 = ($7|0)==($3|0);
  if (!($8)) {
   $9 = ($1|0)==(0|0);
   $10 = ($2|0)<(0);
   $or$cond = $9 | $10;
   if ($or$cond) {
    $$064 = 0;
    STACKTOP = sp;return ($$064|0);
   }
  }
  HEAP32[$0>>2] = $3;
  $$0 = 1;$$067 = $3;
 }
 $12 = ($1|0)==(0|0);
 L10: do {
  if ($12) {
   $35 = ($$0|0)==(0);
   if ($35) {
    $$pre72 = ((($0)) + 8|0);
    $$pre$phi73Z2D = $$pre72;
    label = 26;
   } else {
    $$06569 = 0;
    label = 20;
   }
  } else {
   $13 = (_EVP_MD_block_size($$067)|0);
   $14 = ($13|0)<(129);
   if (!($14)) {
    _OPENSSL_die(48398,83252,0);
    // unreachable;
   }
   $15 = ($13|0)<($2|0);
   do {
    if ($15) {
     $16 = ((($0)) + 4|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (_EVP_DigestInit_ex($17,$$067,$4)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      break L10;
     }
     $20 = HEAP32[$16>>2]|0;
     $21 = (_EVP_DigestUpdate($20,$1,$2)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      break L10;
     }
     $23 = HEAP32[$16>>2]|0;
     $24 = ((($0)) + 20|0);
     $25 = ((($0)) + 16|0);
     $26 = (_EVP_DigestFinal_ex($23,$24,$25)|0);
     $27 = ($26|0)==(0);
     if ($27) {
      break L10;
     }
     $$pre = HEAP32[$25>>2]|0;
     $31 = $$pre;
    } else {
     $28 = ($2>>>0)>(128);
     if ($28) {
      $$064 = 0;
      STACKTOP = sp;return ($$064|0);
     } else {
      $29 = ((($0)) + 20|0);
      _memcpy(($29|0),($1|0),($2|0))|0;
      $30 = ((($0)) + 16|0);
      HEAP32[$30>>2] = $2;
      $31 = $2;
      break;
     }
    }
   } while(0);
   $32 = ($31|0)==(128);
   if ($32) {
    $$06569 = 0;
    label = 20;
   } else {
    $33 = (128 - ($31))|0;
    $34 = (((($0)) + 20|0) + ($31)|0);
    _memset(($34|0),0,($33|0))|0;
    $$06569 = 0;
    label = 20;
   }
  }
 } while(0);
 if ((label|0) == 20) {
  while(1) {
   label = 0;
   $36 = (((($0)) + 20|0) + ($$06569)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 ^ 54;
   $39 = (($5) + ($$06569)|0);
   HEAP8[$39>>0] = $38;
   $40 = (($$06569) + 1)|0;
   $exitcond70 = ($40|0)==(128);
   if ($exitcond70) {
    break;
   } else {
    $$06569 = $40;
    label = 20;
   }
  }
  $41 = ((($0)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_EVP_DigestInit_ex($42,$$067,$4)|0);
  $44 = ($43|0)==(0);
  if (!($44)) {
   $45 = HEAP32[$41>>2]|0;
   $46 = (_EVP_MD_block_size($$067)|0);
   $47 = (_EVP_DigestUpdate($45,$5,$46)|0);
   $48 = ($47|0)==(0);
   if (!($48)) {
    $$16668 = 0;
    while(1) {
     $49 = (((($0)) + 20|0) + ($$16668)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = $50 ^ 92;
     $52 = (($5) + ($$16668)|0);
     HEAP8[$52>>0] = $51;
     $53 = (($$16668) + 1)|0;
     $exitcond = ($53|0)==(128);
     if ($exitcond) {
      break;
     } else {
      $$16668 = $53;
     }
    }
    $54 = ((($0)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (_EVP_DigestInit_ex($55,$$067,$4)|0);
    $57 = ($56|0)==(0);
    if (!($57)) {
     $58 = HEAP32[$54>>2]|0;
     $59 = (_EVP_MD_block_size($$067)|0);
     $60 = (_EVP_DigestUpdate($58,$5,$59)|0);
     $61 = ($60|0)==(0);
     if (!($61)) {
      $$pre$phi73Z2D = $41;
      label = 26;
     }
    }
   }
  }
 }
 if ((label|0) == 26) {
  $62 = ((($0)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$$pre$phi73Z2D>>2]|0;
  $65 = (_EVP_MD_CTX_copy_ex($63,$64)|0);
  $66 = ($65|0)==(0);
  if (!($66)) {
   $$064 = 1;
   STACKTOP = sp;return ($$064|0);
  }
 }
 $$064 = 0;
 STACKTOP = sp;return ($$064|0);
}
function _HMAC_Update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_EVP_DigestUpdate($6,$1,$2)|0);
 $$0 = $7;
 return ($$0|0);
}
function _HMAC_Final($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $3 = sp;
 $4 = sp + 8|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_EVP_DigestFinal_ex($8,$4,$3)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = HEAP32[$7>>2]|0;
   $12 = ((($0)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_EVP_MD_CTX_copy_ex($11,$13)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    $16 = HEAP32[$7>>2]|0;
    $17 = HEAP32[$3>>2]|0;
    $18 = (_EVP_DigestUpdate($16,$4,$17)|0);
    $19 = ($18|0)==(0);
    if (!($19)) {
     $20 = HEAP32[$7>>2]|0;
     $21 = (_EVP_DigestFinal_ex($20,$1,$2)|0);
     $22 = ($21|0)==(0);
     if (!($22)) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _HMAC_CTX_new() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(148,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = $0;
 } else {
  $2 = (_HMAC_CTX_reset($0)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   _HMAC_CTX_free($0);
   $$0 = 0;
  } else {
   $$0 = $0;
  }
 }
 return ($$0|0);
}
function _HMAC_CTX_reset($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 (_EVP_MD_CTX_reset($2)|0);
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 (_EVP_MD_CTX_reset($4)|0);
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 (_EVP_MD_CTX_reset($6)|0);
 HEAP32[$0>>2] = 0;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 20|0);
 _OPENSSL_cleanse($8,128);
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (_EVP_MD_CTX_new()|0);
  HEAP32[$1>>2] = $11;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $13 = HEAP32[$3>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = (_EVP_MD_CTX_new()|0);
    HEAP32[$3>>2] = $15;
    $16 = ($15|0)==(0|0);
    if ($16) {
     break;
    }
   }
   $17 = HEAP32[$5>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $19 = (_EVP_MD_CTX_new()|0);
    HEAP32[$5>>2] = $19;
    $20 = ($19|0)==(0|0);
    if ($20) {
     break;
    }
   }
   HEAP32[$0>>2] = 0;
   $$0 = 1;
   return ($$0|0);
  }
 } while(0);
 $21 = HEAP32[$1>>2]|0;
 (_EVP_MD_CTX_reset($21)|0);
 $22 = HEAP32[$3>>2]|0;
 (_EVP_MD_CTX_reset($22)|0);
 $23 = HEAP32[$5>>2]|0;
 (_EVP_MD_CTX_reset($23)|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$7>>2] = 0;
 _OPENSSL_cleanse($8,128);
 $$0 = 0;
 return ($$0|0);
}
function _HMAC_CTX_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 (_EVP_MD_CTX_reset($3)|0);
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 (_EVP_MD_CTX_reset($5)|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 (_EVP_MD_CTX_reset($7)|0);
 HEAP32[$0>>2] = 0;
 $8 = ((($0)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 20|0);
 _OPENSSL_cleanse($9,128);
 $10 = HEAP32[$2>>2]|0;
 _EVP_MD_CTX_free($10);
 $11 = HEAP32[$4>>2]|0;
 _EVP_MD_CTX_free($11);
 $12 = HEAP32[$6>>2]|0;
 _EVP_MD_CTX_free($12);
 _CRYPTO_free($0,83252,0);
 return;
}
function _HMAC_CTX_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = (_HMAC_CTX_reset($0)|0);
 $3 = ($2|0)==(0);
 $$pre = ((($0)) + 8|0);
 if (!($3)) {
  $4 = HEAP32[$$pre>>2]|0;
  $5 = ((($1)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_EVP_MD_CTX_copy_ex($4,$6)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = ((($0)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($1)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_EVP_MD_CTX_copy_ex($10,$12)|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = ((($0)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($1)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (_EVP_MD_CTX_copy_ex($16,$18)|0);
    $20 = ($19|0)==(0);
    if (!($20)) {
     $21 = ((($0)) + 20|0);
     $22 = ((($1)) + 20|0);
     dest=$21; src=$22; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $23 = ((($1)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($0)) + 16|0);
     HEAP32[$25>>2] = $24;
     $26 = HEAP32[$1>>2]|0;
     HEAP32[$0>>2] = $26;
     $$0 = 1;
     return ($$0|0);
    }
   }
  }
 }
 $27 = HEAP32[$$pre>>2]|0;
 (_EVP_MD_CTX_reset($27)|0);
 $28 = ((($0)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 (_EVP_MD_CTX_reset($29)|0);
 $30 = ((($0)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 (_EVP_MD_CTX_reset($31)|0);
 HEAP32[$0>>2] = 0;
 $32 = ((($0)) + 16|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($0)) + 20|0);
 _OPENSSL_cleanse($33,128);
 $$0 = 0;
 return ($$0|0);
}
function _HMAC($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$0 = 0, $$0$i23 = 0, $$20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $7 = sp;
 $8 = sp + 8|0;
 $9 = ($5|0)==(0|0);
 $$ = $9 ? 83180 : $5;
 $10 = (_CRYPTO_zalloc(148,83252,0)|0);
 $cond = ($10|0)==(0|0);
 do {
  if ($cond) {
   $$0$i23 = 0;
  } else {
   $11 = (_HMAC_CTX_reset($10)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    _HMAC_CTX_free($10);
    $$0$i23 = 0;
    break;
   }
   $13 = ($1|0)==(0|0);
   $14 = ($2|0)==(0);
   $or$cond = $13 & $14;
   $$20 = $or$cond ? 83252 : $1;
   $15 = (_HMAC_Init_ex($10,$$20,$2,$0,0)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$i23 = $10;
   } else {
    $17 = HEAP32[$10>>2]|0;
    $18 = ($17|0)==(0|0);
    if ($18) {
     $$0$i23 = $10;
    } else {
     $19 = ((($10)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_EVP_DigestUpdate($20,$3,$4)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      $$0$i23 = $10;
     } else {
      $23 = HEAP32[$10>>2]|0;
      $24 = ($23|0)==(0|0);
      if (!($24)) {
       $25 = HEAP32[$19>>2]|0;
       $26 = (_EVP_DigestFinal_ex($25,$8,$7)|0);
       $27 = ($26|0)==(0);
       if (!($27)) {
        $28 = HEAP32[$19>>2]|0;
        $29 = ((($10)) + 12|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = (_EVP_MD_CTX_copy_ex($28,$30)|0);
        $32 = ($31|0)==(0);
        if (!($32)) {
         $33 = HEAP32[$19>>2]|0;
         $34 = HEAP32[$7>>2]|0;
         $35 = (_EVP_DigestUpdate($33,$8,$34)|0);
         $36 = ($35|0)==(0);
         if (!($36)) {
          $37 = HEAP32[$19>>2]|0;
          $38 = (_EVP_DigestFinal_ex($37,$$,$6)|0);
          $39 = ($38|0)==(0);
          if (!($39)) {
           $40 = ((($10)) + 8|0);
           $41 = HEAP32[$40>>2]|0;
           (_EVP_MD_CTX_reset($41)|0);
           $42 = HEAP32[$29>>2]|0;
           (_EVP_MD_CTX_reset($42)|0);
           $43 = HEAP32[$19>>2]|0;
           (_EVP_MD_CTX_reset($43)|0);
           HEAP32[$10>>2] = 0;
           $44 = ((($10)) + 16|0);
           HEAP32[$44>>2] = 0;
           $45 = ((($10)) + 20|0);
           _OPENSSL_cleanse($45,128);
           $46 = HEAP32[$40>>2]|0;
           _EVP_MD_CTX_free($46);
           $47 = HEAP32[$29>>2]|0;
           _EVP_MD_CTX_free($47);
           $48 = HEAP32[$19>>2]|0;
           _EVP_MD_CTX_free($48);
           _CRYPTO_free($10,83252,0);
           $$0 = $$;
           STACKTOP = sp;return ($$0|0);
          }
         }
        }
       }
      }
      $$0$i23 = $10;
     }
    }
   }
  }
 } while(0);
 _HMAC_CTX_free($$0$i23);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _HMAC_CTX_set_flags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _EVP_MD_CTX_set_flags($3,$1);
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 _EVP_MD_CTX_set_flags($5,$1);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _EVP_MD_CTX_set_flags($7,$1);
 return;
}
function _ossl_init_thread_start($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in$i6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_CRYPTO_THREAD_get_local(81420)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_CRYPTO_zalloc(8,83252,0)|0);
  (_CRYPTO_THREAD_set_local(81420,$4)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$0$in$i6 = $4;
  }
 } else {
  $$0$in$i6 = $2;
 }
 $6 = $0 & 1;
 $7 = ($6|0)==(0);
 $8 = (0)==(0);
 $9 = $7 & $8;
 if (!($9)) {
  HEAP32[$$0$in$i6>>2] = 1;
 }
 $10 = $0 & 2;
 $11 = ($10|0)==(0);
 $12 = (0)==(0);
 $13 = $11 & $12;
 if ($13) {
  $$0 = 1;
  return ($$0|0);
 }
 $14 = ((($$0$in$i6)) + 4|0);
 HEAP32[$14>>2] = 1;
 $$0 = 1;
 return ($$0|0);
}
function _OPENSSL_cleanup() {
 var $$in910 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20356]|0;
 $1 = ($0|0)!=(0);
 $2 = HEAP32[20357]|0;
 $3 = ($2|0)==(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  return;
 }
 HEAP32[20357] = 1;
 $4 = (_CRYPTO_THREAD_get_local(81420)|0);
 (_CRYPTO_THREAD_set_local(81420,0)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$4>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   _ASYNC_cleanup_thread();
  }
  $8 = ((($4)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   _err_delete_thread_state();
  }
  _CRYPTO_free($4,83252,0);
 }
 $11 = HEAP32[20358]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $$in910 = $11;
  while(1) {
   $13 = HEAP32[$$in910>>2]|0;
   FUNCTION_TABLE_v[$13 & 31]();
   $14 = ((($$in910)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   _CRYPTO_free($$in910,83252,0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    break;
   } else {
    $$in910 = $15;
   }
  }
 }
 HEAP32[20358] = 0;
 $17 = HEAP32[20359]|0;
 _CRYPTO_THREAD_lock_free($17);
 $18 = HEAP32[20360]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  _async_deinit();
 }
 (_CRYPTO_THREAD_cleanup_local(81420)|0);
 _rand_cleanup_int();
 _conf_modules_free_int();
 _crypto_cleanup_all_ex_data_int();
 _bio_cleanup();
 _evp_cleanup_int();
 _obj_cleanup_int();
 _err_cleanup();
 HEAP32[20356] = 0;
 return;
}
function _OPENSSL_init_crypto($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[20357]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[20361]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$1 = 0;
   return ($$1|0);
  }
  HEAP32[20361] = 1;
  _ERR_put_error(15,116,70,0,0);
  $$1 = 0;
  return ($$1|0);
 }
 $7 = HEAP32[20356]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (_CRYPTO_THREAD_run_once(81448,20)|0);
  $10 = ($9|0)!=(0);
  $11 = HEAP32[20363]|0;
  $12 = ($11|0)!=(0);
  $or$cond = $10 & $12;
  if (!($or$cond)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $13 = $0 & 1;
 $14 = ($13|0)==(0);
 $15 = (0)==(0);
 $16 = $14 & $15;
 if (!($16)) {
  $17 = (_CRYPTO_THREAD_run_once(81456,21)|0);
  $18 = ($17|0)!=(0);
  $19 = HEAP32[20365]|0;
  $20 = ($19|0)!=(0);
  $or$cond3 = $18 & $20;
  if (!($or$cond3)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $21 = $0 & 2;
 $22 = ($21|0)==(0);
 $23 = (0)==(0);
 $24 = $22 & $23;
 if (!($24)) {
  $25 = (_CRYPTO_THREAD_run_once(81456,22)|0);
  $26 = ($25|0)!=(0);
  $27 = HEAP32[20366]|0;
  $28 = ($27|0)!=(0);
  $or$cond5 = $26 & $28;
  if (!($or$cond5)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $29 = $0 & 16;
 $30 = ($29|0)==(0);
 $31 = (0)==(0);
 $32 = $30 & $31;
 if (!($32)) {
  $33 = (_CRYPTO_THREAD_run_once(81468,23)|0);
  $34 = ($33|0)!=(0);
  $35 = HEAP32[20368]|0;
  $36 = ($35|0)!=(0);
  $or$cond7 = $34 & $36;
  if (!($or$cond7)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $37 = $0 & 4;
 $38 = ($37|0)==(0);
 $39 = (0)==(0);
 $40 = $38 & $39;
 if (!($40)) {
  $41 = (_CRYPTO_THREAD_run_once(81468,24)|0);
  $42 = ($41|0)!=(0);
  $43 = HEAP32[20369]|0;
  $44 = ($43|0)!=(0);
  $or$cond9 = $42 & $44;
  if (!($or$cond9)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $45 = $0 & 32;
 $46 = ($45|0)==(0);
 $47 = (0)==(0);
 $48 = $46 & $47;
 if (!($48)) {
  $49 = (_CRYPTO_THREAD_run_once(81480,23)|0);
  $50 = ($49|0)!=(0);
  $51 = HEAP32[20368]|0;
  $52 = ($51|0)!=(0);
  $or$cond11 = $50 & $52;
  if (!($or$cond11)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $53 = $0 & 8;
 $54 = ($53|0)==(0);
 $55 = (0)==(0);
 $56 = $54 & $55;
 if (!($56)) {
  $57 = (_CRYPTO_THREAD_run_once(81480,25)|0);
  $58 = ($57|0)!=(0);
  $59 = HEAP32[20371]|0;
  $60 = ($59|0)!=(0);
  $or$cond13 = $58 & $60;
  if (!($or$cond13)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $61 = $0 & 128;
 $62 = ($61|0)==(0);
 $63 = (0)==(0);
 $64 = $62 & $63;
 if (!($64)) {
  $65 = (_CRYPTO_THREAD_run_once(81488,26)|0);
  $66 = ($65|0)!=(0);
  $67 = HEAP32[20373]|0;
  $68 = ($67|0)!=(0);
  $or$cond15 = $66 & $68;
  if (!($or$cond15)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $69 = $0 & 64;
 $70 = ($69|0)==(0);
 $71 = (0)==(0);
 $72 = $70 & $71;
 if (!($72)) {
  $73 = HEAP32[20359]|0;
  (_CRYPTO_THREAD_write_lock($73)|0);
  $74 = ($2|0)==(0|0);
  if ($74) {
   $76 = 0;
  } else {
   $75 = HEAP32[$2>>2]|0;
   $76 = $75;
  }
  HEAP32[20374] = $76;
  $77 = (_CRYPTO_THREAD_run_once(81488,27)|0);
  $78 = ($77|0)!=(0);
  $79 = HEAP32[20375]|0;
  $80 = HEAP32[20359]|0;
  (_CRYPTO_THREAD_unlock($80)|0);
  $81 = ($79|0)!=(0);
  $82 = $78 & $81;
  if (!($82)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $83 = $0 & 256;
 $84 = ($83|0)==(0);
 $85 = (0)==(0);
 $86 = $84 & $85;
 if (!($86)) {
  $87 = (_CRYPTO_THREAD_run_once(81504,28)|0);
  $88 = ($87|0)!=(0);
  $89 = HEAP32[20377]|0;
  $90 = ($89|0)!=(0);
  $or$cond17 = $88 & $90;
  if (!($or$cond17)) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $$1 = 1;
 return ($$1|0);
}
function _ossl_init_base_ossl_() {
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_CRYPTO_THREAD_init_local(81420,32)|0);
 (_atexit((29|0))|0);
 $0 = (_CRYPTO_THREAD_lock_new()|0);
 HEAP32[20359] = $0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0$i = 0;
  HEAP32[20363] = $$0$i;
  return;
 }
 HEAP32[20356] = 1;
 (_ERR_set_mark()|0);
 $2 = (_DSO_dsobyaddr(81424,4)|0);
 (_DSO_free($2)|0);
 (_ERR_pop_to_mark()|0);
 $$0$i = 1;
 HEAP32[20363] = $$0$i;
 return;
}
function _ossl_init_no_load_crypto_strings_ossl_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[20365] = 1;
 return;
}
function _ossl_init_load_crypto_strings_ossl_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[20366] = 1;
 return;
}
function _ossl_init_no_add_algs_ossl_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[20368] = 1;
 return;
}
function _ossl_init_add_all_ciphers_ossl_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[20369] = 1;
 return;
}
function _ossl_init_add_all_digests_ossl_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[20371] = 1;
 return;
}
function _ossl_init_no_config_ossl_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _openssl_no_config_int();
 HEAP32[20373] = 1;
 return;
}
function _ossl_init_config_ossl_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20374]|0;
 _openssl_config_int($0);
 HEAP32[20375] = 1;
 return;
}
function _ossl_init_async_ossl_() {
 var $$0$i = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_async_init()|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0$i = 0;
 } else {
  HEAP32[20360] = 1;
  $$0$i = 1;
 }
 HEAP32[20377] = $$0$i;
 return;
}
function _ossl_init_thread_stop_wrap($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _ASYNC_cleanup_thread();
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  _err_delete_thread_state();
 }
 _CRYPTO_free($0,83252,0);
 return;
}
function _pkey_hkdf_init($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_zalloc(1048,83252,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_hkdf_cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _CRYPTO_clear_free($4,$6,83252,0);
 $7 = ((($2)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 _CRYPTO_clear_free($8,$10,83252,0);
 $11 = ((($2)) + 20|0);
 $12 = ((($2)) + 1044|0);
 $13 = HEAP32[$12>>2]|0;
 _OPENSSL_cleanse($11,$13);
 _CRYPTO_free($2,83252,0);
 return;
}
function _pkey_hkdf_derive($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i$i = 0, $$0 = 0, $$0$i = 0, $$0$i10$i = 0, $$05256$i$i = 0, $$05355$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $not$ = 0, $not$$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $3 = sp + 80|0;
 $4 = sp + 72|0;
 $5 = sp;
 $6 = sp + 8|0;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($8)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ((($8)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($8)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($8)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($8)) + 20|0);
 $21 = ((($8)) + 1044|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$2>>2]|0;
 $24 = (_HMAC($9,$15,$17,$12,$19,$6,$5)|0);
 $25 = ($24|0)==(0|0);
 if ($25) {
  $$0$i = 0;
 } else {
  $26 = HEAP32[$5>>2]|0;
  $27 = (_EVP_MD_size($9)|0);
  $28 = (($23>>>0) / ($27>>>0))&-1;
  $29 = (($23>>>0) % ($27>>>0))&-1;
  $not$$i$i = ($29|0)!=(0);
  $30 = $not$$i$i&1;
  $$$i$i = (($30) + ($28))|0;
  $31 = ($$$i$i>>>0)>(255);
  L10: do {
   if ($31) {
    $$0$i10$i = 0;
   } else {
    $32 = (_HMAC_CTX_new()|0);
    $33 = ($32|0)==(0|0);
    if ($33) {
     $$0$i10$i = 0;
    } else {
     $34 = (_HMAC_Init_ex($32,$6,$26,$9,0)|0);
     $35 = ($34|0)==(0);
     L13: do {
      if (!($35)) {
       $36 = ($$$i$i|0)==(0);
       L15: do {
        if (!($36)) {
         $$05256$i$i = 1;$$05355$i$i = 0;
         while(1) {
          $37 = $$05256$i$i&255;
          HEAP8[$4>>0] = $37;
          $38 = ($$05256$i$i>>>0)>(1);
          if ($38) {
           $39 = (_HMAC_Init_ex($32,0,0,0,0)|0);
           $40 = ($39|0)==(0);
           if ($40) {
            break;
           }
           $41 = (_HMAC_Update($32,$3,$27)|0);
           $42 = ($41|0)==(0);
           if ($42) {
            break;
           }
          }
          $43 = (_HMAC_Update($32,$20,$22)|0);
          $44 = ($43|0)==(0);
          if ($44) {
           break;
          }
          $45 = (_HMAC_Update($32,$4,1)|0);
          $46 = ($45|0)==(0);
          if ($46) {
           break;
          }
          $47 = (_HMAC_Final($32,$3,0)|0);
          $48 = ($47|0)==(0);
          $49 = (($$05355$i$i) + ($27))|0;
          $50 = ($49>>>0)>($23>>>0);
          $51 = (($23) - ($$05355$i$i))|0;
          $52 = $50 ? $51 : $27;
          if ($48) {
           break;
          }
          $53 = (($52) + ($$05355$i$i))|0;
          $54 = (($1) + ($$05355$i$i)|0);
          _memcpy(($54|0),($3|0),($52|0))|0;
          $55 = (($$05256$i$i) + 1)|0;
          $56 = ($55>>>0)>($$$i$i>>>0);
          if ($56) {
           break L15;
          } else {
           $$05256$i$i = $55;$$05355$i$i = $53;
          }
         }
         break L13;
        }
       } while(0);
       _HMAC_CTX_free($32);
       $$0$i10$i = $1;
       break L10;
      }
     } while(0);
     _HMAC_CTX_free($32);
     $$0$i10$i = 0;
    }
   }
  } while(0);
  $$0$i = $$0$i10$i;
 }
 $not$ = ($$0$i|0)!=(0|0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _pkey_hkdf_ctrl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($1|0) {
 case 4099:  {
  $6 = ($3|0)==(0|0);
  if ($6) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$5>>2] = $3;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 4100:  {
  $7 = ($2|0)==(0);
  $8 = ($3|0)==(0|0);
  $or$cond = $7 | $8;
  if ($or$cond) {
   $$0 = 1;
   return ($$0|0);
  }
  $9 = ($2|0)<(0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
  $10 = ((($5)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($5)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   _CRYPTO_clear_free($11,$14,83252,0);
  }
  $15 = (_CRYPTO_memdup($3,$2,83252,0)|0);
  HEAP32[$10>>2] = $15;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$0 = 0;
   return ($$0|0);
  }
  $17 = ((($5)) + 8|0);
  HEAP32[$17>>2] = $2;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 4101:  {
  $18 = ($2|0)<(0);
  if ($18) {
   $$0 = 0;
   return ($$0|0);
  }
  $19 = ((($5)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   $22 = ((($5)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   _CRYPTO_clear_free($20,$23,83252,0);
  }
  $24 = (_CRYPTO_memdup($3,$2,83252,0)|0);
  HEAP32[$19>>2] = $24;
  $25 = ($24|0)==(0|0);
  if ($25) {
   $$0 = 0;
   return ($$0|0);
  }
  $26 = ((($5)) + 16|0);
  HEAP32[$26>>2] = $2;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 4102:  {
  $27 = ($2|0)==(0);
  $28 = ($3|0)==(0|0);
  $or$cond3 = $27 | $28;
  if ($or$cond3) {
   $$0 = 1;
   return ($$0|0);
  }
  $29 = ($2|0)<(0);
  if ($29) {
   $$0 = 0;
   return ($$0|0);
  }
  $30 = ((($5)) + 1044|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (1024 - ($31))|0;
  $33 = ($32|0)<($2|0);
  if ($33) {
   $$0 = 0;
   return ($$0|0);
  }
  $34 = (((($5)) + 20|0) + ($31)|0);
  _memcpy(($34|0),($3|0),($2|0))|0;
  $35 = HEAP32[$30>>2]|0;
  $36 = (($35) + ($2))|0;
  HEAP32[$30>>2] = $36;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _pkey_hkdf_ctrl_str($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strcmp($1,48475)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_EVP_get_digestbyname($2)|0);
  $6 = (_EVP_PKEY_CTX_ctrl($0,-1,1024,4099,0,$5)|0);
  $$0 = $6;
  return ($$0|0);
 }
 $7 = (_strcmp($1,48443)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (_EVP_PKEY_CTX_str2ctrl($0,4100,$2)|0);
  $$0 = $9;
  return ($$0|0);
 }
 $10 = (_strcmp($1,48448)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (_EVP_PKEY_CTX_hex2ctrl($0,4100,$2)|0);
  $$0 = $12;
  return ($$0|0);
 }
 $13 = (_strcmp($1,48456)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = (_EVP_PKEY_CTX_str2ctrl($0,4101,$2)|0);
  $$0 = $15;
  return ($$0|0);
 }
 $16 = (_strcmp($1,48460)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = (_EVP_PKEY_CTX_hex2ctrl($0,4101,$2)|0);
  $$0 = $18;
  return ($$0|0);
 }
 $19 = (_strcmp($1,66298)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = (_EVP_PKEY_CTX_str2ctrl($0,4102,$2)|0);
  $$0 = $21;
  return ($$0|0);
 }
 $22 = (_strcmp($1,48467)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  $$0 = -2;
  return ($$0|0);
 }
 $24 = (_EVP_PKEY_CTX_hex2ctrl($0,4102,$2)|0);
 $$0 = $24;
 return ($$0|0);
}
function _pkey_tls1_prf_init($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_zalloc(1040,83252,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_tls1_prf_cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _CRYPTO_clear_free($4,$6,83252,0);
 $7 = ((($2)) + 12|0);
 $8 = ((($2)) + 1036|0);
 $9 = HEAP32[$8>>2]|0;
 _OPENSSL_cleanse($7,$9);
 _CRYPTO_free($2,83252,0);
 return;
}
function _pkey_tls1_prf_derive($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0 = 0, $$03839$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0;
 var $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($4)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = ((($4)) + 1036|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = ((($4)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($4)) + 12|0);
    $16 = HEAP32[$2>>2]|0;
    $17 = (_EVP_MD_type($5)|0);
    $18 = ($17|0)==(114);
    if (!($18)) {
     $38 = (_tls1_prf_P_hash($5,$8,$14,$15,$11,$1,$16)|0);
     $not$$i = ($38|0)!=(0);
     $$$i = $not$$i&1;
     $$0 = $$$i;
     return ($$0|0);
    }
    $19 = (_EVP_md5()|0);
    $20 = $14 >>> 1;
    $21 = $14 & 1;
    $22 = (($20) + ($21))|0;
    $23 = (_tls1_prf_P_hash($19,$8,$22,$15,$11,$1,$16)|0);
    $24 = ($23|0)==(0);
    if ($24) {
     $$0 = 0;
     return ($$0|0);
    }
    $25 = (_CRYPTO_malloc($16,83252,0)|0);
    $26 = ($25|0)==(0|0);
    if ($26) {
     $$0 = 0;
     return ($$0|0);
    }
    $27 = (_EVP_sha1()|0);
    $28 = (($8) + ($20)|0);
    $29 = (_tls1_prf_P_hash($27,$28,$22,$15,$11,$25,$16)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     _CRYPTO_clear_free($25,$16,83252,0);
     $$0 = 0;
     return ($$0|0);
    }
    $31 = ($16|0)==(0);
    if (!($31)) {
     $$03839$i = 0;
     while(1) {
      $32 = (($25) + ($$03839$i)|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = (($1) + ($$03839$i)|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = $35 ^ $33;
      HEAP8[$34>>0] = $36;
      $37 = (($$03839$i) + 1)|0;
      $exitcond$i = ($37|0)==($16|0);
      if ($exitcond$i) {
       break;
      } else {
       $$03839$i = $37;
      }
     }
    }
    _CRYPTO_clear_free($25,$16,83252,0);
    $$0 = 1;
    return ($$0|0);
   }
  }
 }
 _ERR_put_error(52,101,101,0,0);
 $$0 = 0;
 return ($$0|0);
}
function _pkey_tls1_prf_ctrl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($1|0) {
 case 4096:  {
  HEAP32[$5>>2] = $3;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 4097:  {
  $6 = ($2|0)<(0);
  if ($6) {
   $$0 = 0;
   return ($$0|0);
  }
  $7 = ((($5)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = ((($5)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   _CRYPTO_clear_free($8,$11,83252,0);
  }
  $12 = ((($5)) + 12|0);
  $13 = ((($5)) + 1036|0);
  $14 = HEAP32[$13>>2]|0;
  _OPENSSL_cleanse($12,$14);
  HEAP32[$13>>2] = 0;
  $15 = (_CRYPTO_memdup($3,$2,83252,0)|0);
  HEAP32[$7>>2] = $15;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$0 = 0;
   return ($$0|0);
  }
  $17 = ((($5)) + 8|0);
  HEAP32[$17>>2] = $2;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 4098:  {
  $18 = ($2|0)==(0);
  $19 = ($3|0)==(0|0);
  $or$cond = $18 | $19;
  if ($or$cond) {
   $$0 = 1;
   return ($$0|0);
  }
  $20 = ($2|0)<(0);
  if ($20) {
   $$0 = 0;
   return ($$0|0);
  }
  $21 = ((($5)) + 1036|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (1024 - ($22))|0;
  $24 = ($23|0)<($2|0);
  if ($24) {
   $$0 = 0;
   return ($$0|0);
  }
  $25 = (((($5)) + 12|0) + ($22)|0);
  _memcpy(($25|0),($3|0),($2|0))|0;
  $26 = HEAP32[$21>>2]|0;
  $27 = (($26) + ($2))|0;
  HEAP32[$21>>2] = $27;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _pkey_tls1_prf_ctrl_str($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(52,100,102,0,0);
  $$1 = 0;
  return ($$1|0);
 }
 $4 = (_strcmp($1,48475)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_EVP_get_digestbyname($2)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   _ERR_put_error(52,100,100,0,0);
   $$1 = 0;
   return ($$1|0);
  } else {
   HEAP32[$7>>2] = $8;
   $$1 = 1;
   return ($$1|0);
  }
 }
 $10 = (_strcmp($1,48478)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (_EVP_PKEY_CTX_str2ctrl($0,4097,$2)|0);
  $$1 = $12;
  return ($$1|0);
 }
 $13 = (_strcmp($1,48485)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = (_EVP_PKEY_CTX_hex2ctrl($0,4097,$2)|0);
  $$1 = $15;
  return ($$1|0);
 }
 $16 = (_strcmp($1,48495)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = (_EVP_PKEY_CTX_str2ctrl($0,4098,$2)|0);
  $$1 = $18;
  return ($$1|0);
 }
 $19 = (_strcmp($1,48500)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$1 = -2;
  return ($$1|0);
 }
 $21 = (_EVP_PKEY_CTX_hex2ctrl($0,4098,$2)|0);
 $$1 = $21;
 return ($$1|0);
}
function _tls1_prf_P_hash($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$060 = 0, $$061 = 0, $$063$lcssa67 = 0, $$06372 = 0, $$06372$us = 0, $$064$lcssa69 = 0, $$06471 = 0, $$06471$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = (_EVP_MD_size($0)|0);
 $11 = ($10|0)>(-1);
 if (!($11)) {
  _OPENSSL_die(48508,83252,0);
  // unreachable;
 }
 $12 = (_EVP_MD_CTX_new()|0);
 $13 = (_EVP_MD_CTX_new()|0);
 $14 = (_EVP_MD_CTX_new()|0);
 $15 = ($12|0)==(0|0);
 $16 = ($13|0)==(0|0);
 $or$cond = $15 | $16;
 $17 = ($14|0)==(0|0);
 $or$cond3 = $or$cond | $17;
 L4: do {
  if ($or$cond3) {
   $$060 = 0;$$061 = 0;
  } else {
   _EVP_MD_CTX_set_flags($14,8);
   $18 = (_EVP_PKEY_new_mac_key(855,0,$1,$2)|0);
   $19 = ($18|0)==(0|0);
   if ($19) {
    $$060 = 0;$$061 = 0;
   } else {
    $20 = (_EVP_DigestSignInit($14,0,$0,0,$18)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $$060 = 0;$$061 = $18;
    } else {
     $22 = (_EVP_MD_CTX_copy_ex($12,$14)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$060 = 0;$$061 = $18;
     } else {
      $24 = ($3|0)!=(0|0);
      if ($24) {
       $25 = (_EVP_DigestUpdate($12,$3,$4)|0);
       $26 = ($25|0)==(0);
       if ($26) {
        $$060 = 0;$$061 = $18;
        break;
       }
      }
      $27 = (_EVP_DigestSignFinal($12,$7,$8)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       $$060 = 0;$$061 = $18;
      } else {
       $29 = (_EVP_MD_CTX_copy_ex($12,$14)|0);
       $30 = ($29|0)==(0);
       if ($30) {
        $$060 = 0;$$061 = $18;
       } else {
        L14: do {
         if ($24) {
          $$06372$us = $6;$$06471$us = $5;
          while(1) {
           $31 = HEAP32[$8>>2]|0;
           $32 = (_EVP_DigestUpdate($12,$7,$31)|0);
           $33 = ($32|0)==(0);
           if ($33) {
            $$060 = 0;$$061 = $18;
            break L4;
           }
           $34 = ($$06372$us>>>0)>($10>>>0);
           if ($34) {
            $35 = (_EVP_MD_CTX_copy_ex($13,$12)|0);
            $36 = ($35|0)==(0);
            if ($36) {
             $$060 = 0;$$061 = $18;
             break L4;
            }
           }
           $37 = (_EVP_DigestUpdate($12,$3,$4)|0);
           $38 = ($37|0)==(0);
           if ($38) {
            $$060 = 0;$$061 = $18;
            break L4;
           }
           if (!($34)) {
            $$063$lcssa67 = $$06372$us;$$064$lcssa69 = $$06471$us;
            break L14;
           }
           $39 = (_EVP_DigestSignFinal($12,$$06471$us,$9)|0);
           $40 = ($39|0)==(0);
           if ($40) {
            label = 25;
            break L14;
           }
           $41 = HEAP32[$9>>2]|0;
           $42 = (_EVP_DigestSignFinal($13,$7,$8)|0);
           $43 = ($42|0)==(0);
           if ($43) {
            label = 25;
            break L14;
           }
           $44 = (($$06372$us) - ($41))|0;
           $45 = (($$06471$us) + ($41)|0);
           $46 = (_EVP_MD_CTX_copy_ex($12,$14)|0);
           $47 = ($46|0)==(0);
           if ($47) {
            $$060 = 0;$$061 = $18;
            break L4;
           } else {
            $$06372$us = $44;$$06471$us = $45;
           }
          }
         } else {
          $$06372 = $6;$$06471 = $5;
          while(1) {
           $48 = HEAP32[$8>>2]|0;
           $49 = (_EVP_DigestUpdate($12,$7,$48)|0);
           $50 = ($49|0)==(0);
           if ($50) {
            $$060 = 0;$$061 = $18;
            break L4;
           }
           $51 = ($$06372>>>0)>($10>>>0);
           if (!($51)) {
            $$063$lcssa67 = $$06372;$$064$lcssa69 = $$06471;
            break L14;
           }
           $52 = (_EVP_MD_CTX_copy_ex($13,$12)|0);
           $53 = ($52|0)==(0);
           if ($53) {
            $$060 = 0;$$061 = $18;
            break L4;
           }
           $54 = (_EVP_DigestSignFinal($12,$$06471,$9)|0);
           $55 = ($54|0)==(0);
           if ($55) {
            label = 25;
            break L14;
           }
           $56 = HEAP32[$9>>2]|0;
           $57 = (_EVP_DigestSignFinal($13,$7,$8)|0);
           $58 = ($57|0)==(0);
           if ($58) {
            label = 25;
            break L14;
           }
           $59 = (($$06372) - ($56))|0;
           $60 = (($$06471) + ($56)|0);
           $61 = (_EVP_MD_CTX_copy_ex($12,$14)|0);
           $62 = ($61|0)==(0);
           if ($62) {
            $$060 = 0;$$061 = $18;
            break L4;
           } else {
            $$06372 = $59;$$06471 = $60;
           }
          }
         }
        } while(0);
        if ((label|0) == 25) {
         $$060 = 0;$$061 = $18;
         break;
        }
        $63 = (_EVP_DigestSignFinal($12,$7,$8)|0);
        $64 = ($63|0)==(0);
        if ($64) {
         $$060 = 0;$$061 = $18;
        } else {
         _memcpy(($$064$lcssa69|0),($7|0),($$063$lcssa67|0))|0;
         $$060 = 1;$$061 = $18;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _EVP_PKEY_free($$061);
 _EVP_MD_CTX_free($12);
 _EVP_MD_CTX_free($13);
 _EVP_MD_CTX_free($14);
 _OPENSSL_cleanse($7,64);
 STACKTOP = sp;return ($$060|0);
}
function _OPENSSL_LH_new($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_CRYPTO_zalloc(96,83252,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_CRYPTO_zalloc(64,83252,0)|0);
 HEAP32[$2>>2] = $4;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _CRYPTO_free($2,83252,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $6 = ($1|0)==(0|0);
  $7 = $6 ? 48 : $1;
  $8 = ((($2)) + 4|0);
  HEAP32[$8>>2] = $7;
  $9 = ($0|0)==(0|0);
  $10 = $9 ? 35 : $0;
  $11 = ((($2)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($2)) + 12|0);
  HEAP32[$12>>2] = 8;
  $13 = ((($2)) + 16|0);
  HEAP32[$13>>2] = 16;
  $14 = ((($2)) + 24|0);
  HEAP32[$14>>2] = 8;
  $15 = ((($2)) + 28|0);
  HEAP32[$15>>2] = 512;
  $16 = ((($2)) + 32|0);
  HEAP32[$16>>2] = 256;
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _OPENSSL_LH_strhash($0) {
 $0 = $0|0;
 var $$0 = 0, $$02732 = 0, $$02831 = 0, $$02930 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$02732 = $0;$$02831 = 256;$$02930 = 0;$5 = $2;
 }
 while(1) {
  $4 = $5 << 24 >> 24;
  $6 = $4 | $$02831;
  $7 = (($$02831) + 256)|0;
  $8 = $4 >>> 2;
  $9 = $8 ^ $4;
  $10 = $9 & 15;
  $11 = $$02930 << $10;
  $12 = (32 - ($10))|0;
  $13 = $$02930 >>> $12;
  $14 = $13 | $11;
  $15 = Math_imul($6, $6)|0;
  $16 = $14 ^ $15;
  $17 = ((($$02732)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(0);
  if ($19) {
   break;
  } else {
   $$02732 = $17;$$02831 = $7;$$02930 = $16;$5 = $18;
  }
 }
 $20 = $16 >>> 16;
 $21 = $20 ^ $16;
 $$0 = $21;
 return ($$0|0);
}
function _OPENSSL_LH_free($0) {
 $0 = $0|0;
 var $$018 = 0, $$in1617 = 0, $$lcssa = 0, $$pre = 0, $$pre22 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = HEAP32[$0>>2]|0;
 if ($4) {
  $$lcssa = $5;
 } else {
  $$018 = 0;$16 = $3;$7 = $5;
  while(1) {
   $6 = (($7) + ($$018<<2)|0);
   $8 = HEAP32[$6>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $15 = $16;$17 = $7;
   } else {
    $$in1617 = $8;
    while(1) {
     $10 = ((($$in1617)) + 4|0);
     $11 = HEAP32[$10>>2]|0;
     _CRYPTO_free($$in1617,83252,0);
     $12 = ($11|0)==(0|0);
     if ($12) {
      break;
     } else {
      $$in1617 = $11;
     }
    }
    $$pre = HEAP32[$2>>2]|0;
    $$pre22 = HEAP32[$0>>2]|0;
    $15 = $$pre;$17 = $$pre22;
   }
   $13 = (($$018) + 1)|0;
   $14 = ($13>>>0)<($15>>>0);
   if ($14) {
    $$018 = $13;$16 = $15;$7 = $17;
   } else {
    $$lcssa = $17;
    break;
   }
  }
 }
 _CRYPTO_free($$lcssa,83252,0);
 _CRYPTO_free($0,83252,0);
 return;
}
function _OPENSSL_LH_insert($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$030 = 0, $$030$ph = 0, $$035$i = 0, $$036$i = 0, $$036$in$lcssa$i44 = 0, $$036$in38$i = 0, $$03637$i = 0, $$03639$i = 0, $$063$i = 0, $$063$in$ph71$i = 0, $$06366$i = 0, $$0636670$i = 0, $$0636672$i = 0, $$06367$i = 0, $$1$i = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre41 = 0, $$pre42 = 0;
 var $$sink$sink33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 92|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 << 8;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7>>>0) / ($9>>>0))&-1;
 $11 = ($4>>>0)>($10>>>0);
 if ($11) {
  $$pre41 = ((($0)) + 24|0);
  $$pre42 = ((($0)) + 20|0);
  $$pre$phi43Z2D = $$pre42;$$pre$phiZ2D = $$pre41;
 } else {
  $12 = (($9) + 1)|0;
  HEAP32[$8>>2] = $12;
  $13 = ((($0)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = ((($0)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$16>>2] = $18;
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + ($17<<2)|0);
  $21 = ((($0)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($17))|0;
  $24 = (($19) + ($23<<2)|0);
  HEAP32[$24>>2] = 0;
  $25 = ((($0)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $$0636670$i = HEAP32[$20>>2]|0;
  $27 = ($$0636670$i|0)==(0|0);
  L4: do {
   if (!($27)) {
    $$063$in$ph71$i = $20;$$0636672$i = $$0636670$i;
    while(1) {
     $$06367$i = $$0636672$i;
     while(1) {
      $30 = ((($$06367$i)) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($31>>>0) % ($26>>>0))&-1;
      $33 = ($32|0)==($17|0);
      $28 = ((($$06367$i)) + 4|0);
      if ($33) {
       break;
      }
      $34 = HEAP32[$28>>2]|0;
      HEAP32[$$063$in$ph71$i>>2] = $34;
      $35 = HEAP32[$24>>2]|0;
      HEAP32[$28>>2] = $35;
      HEAP32[$24>>2] = $$06367$i;
      $$063$i = HEAP32[$$063$in$ph71$i>>2]|0;
      $36 = ($$063$i|0)==(0|0);
      if ($36) {
       break L4;
      } else {
       $$06367$i = $$063$i;
      }
     }
     $$06366$i = HEAP32[$28>>2]|0;
     $29 = ($$06366$i|0)==(0|0);
     if ($29) {
      break;
     } else {
      $$063$in$ph71$i = $28;$$0636672$i = $$06366$i;
     }
    }
   }
  } while(0);
  $37 = ($18>>>0)<($22>>>0);
  if ($37) {
   $$pre$phi43Z2D = $16;$$pre$phiZ2D = $21;
  } else {
   $38 = $26 << 1;
   $39 = HEAP32[$0>>2]|0;
   $40 = $26 << 3;
   $41 = (_CRYPTO_realloc($39,$40,83252,0)|0);
   $42 = ($41|0)==(0|0);
   if ($42) {
    $50 = HEAP32[$2>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$2>>2] = $51;
    $52 = HEAP32[$8>>2]|0;
    $53 = (($52) + -1)|0;
    HEAP32[$8>>2] = $53;
    HEAP32[$16>>2] = 0;
    $$030 = 0;
    return ($$030|0);
   }
   $43 = HEAP32[$25>>2]|0;
   $44 = ($43>>>0)<($38>>>0);
   $45 = $43 << 2;
   if ($44) {
    $46 = (($40) - ($45))|0;
    $scevgep$i = (($41) + ($45)|0);
    _memset(($scevgep$i|0),0,($46|0))|0;
   }
   HEAP32[$21>>2] = $43;
   HEAP32[$25>>2] = $38;
   $47 = ((($0)) + 44|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 1)|0;
   HEAP32[$47>>2] = $49;
   HEAP32[$16>>2] = 0;
   HEAP32[$0>>2] = $41;
   $$pre$phi43Z2D = $16;$$pre$phiZ2D = $21;
  }
 }
 $54 = ((($0)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (FUNCTION_TABLE_ii[$55 & 63]($1)|0);
 $57 = ((($0)) + 56|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + 1)|0;
 HEAP32[$57>>2] = $59;
 $60 = HEAP32[$$pre$phiZ2D>>2]|0;
 $61 = (($56>>>0) % ($60>>>0))&-1;
 $62 = HEAP32[$$pre$phi43Z2D>>2]|0;
 $63 = ($61>>>0)<($62>>>0);
 if ($63) {
  $64 = ((($0)) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($56>>>0) % ($65>>>0))&-1;
  $$035$i = $66;
 } else {
  $$035$i = $61;
 }
 $67 = ((($0)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$0>>2]|0;
 $70 = (($69) + ($$035$i<<2)|0);
 $71 = ((($0)) + 60|0);
 $$03637$i = HEAP32[$70>>2]|0;
 $72 = ($$03637$i|0)==(0|0);
 L25: do {
  if ($72) {
   $$036$in$lcssa$i44 = $70;
   label = 23;
  } else {
   $73 = ((($0)) + 88|0);
   $$036$in38$i = $70;$$03639$i = $$03637$i;
   while(1) {
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + 1)|0;
    HEAP32[$73>>2] = $75;
    $76 = ((($$03639$i)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==($56|0);
    if ($78) {
     $79 = HEAP32[$71>>2]|0;
     $80 = (($79) + 1)|0;
     HEAP32[$71>>2] = $80;
     $81 = HEAP32[$$03639$i>>2]|0;
     $82 = (FUNCTION_TABLE_iii[$68 & 63]($81,$1)|0);
     $83 = ($82|0)==(0);
     if ($83) {
      break;
     }
    }
    $$1$i = ((($$03639$i)) + 4|0);
    $$036$i = HEAP32[$$1$i>>2]|0;
    $84 = ($$036$i|0)==(0|0);
    if ($84) {
     $$036$in$lcssa$i44 = $$1$i;
     label = 23;
     break L25;
    } else {
     $$036$in38$i = $$1$i;$$03639$i = $$036$i;
    }
   }
   $$pre$pre = HEAP32[$$036$in38$i>>2]|0;
   $85 = ($$pre$pre|0)==(0|0);
   if ($85) {
    $$036$in$lcssa$i44 = $$036$in38$i;
    label = 23;
   } else {
    $93 = HEAP32[$$pre$pre>>2]|0;
    HEAP32[$$pre$pre>>2] = $1;
    $94 = ((($0)) + 68|0);
    $$030$ph = $93;$$sink$sink33 = $94;
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $86 = (_CRYPTO_malloc(12,83252,0)|0);
  $87 = ($86|0)==(0|0);
  if ($87) {
   $$030$ph = 0;$$sink$sink33 = $2;
  } else {
   HEAP32[$86>>2] = $1;
   $88 = ((($86)) + 4|0);
   HEAP32[$88>>2] = 0;
   $89 = ((($86)) + 8|0);
   HEAP32[$89>>2] = $56;
   HEAP32[$$036$in$lcssa$i44>>2] = $86;
   $90 = ((($0)) + 64|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + 1)|0;
   HEAP32[$90>>2] = $92;
   $$030$ph = 0;$$sink$sink33 = $5;
  }
 }
 $95 = HEAP32[$$sink$sink33>>2]|0;
 $96 = (($95) + 1)|0;
 HEAP32[$$sink$sink33>>2] = $96;
 $$030 = $$030$ph;
 return ($$030|0);
}
function _OPENSSL_LH_delete($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$035$i = 0, $$036$i = 0, $$036$in38$i = 0, $$03637$i = 0, $$03639$i = 0, $$1$i = 0, $$pre$i = 0, $$pre$pre = 0, $$pre25 = 0, $$sink34$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 92|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = ((($0)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($0)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($5>>>0) % ($10>>>0))&-1;
 $12 = ((($0)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)<($13>>>0);
 if ($14) {
  $15 = ((($0)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($5>>>0) % ($16>>>0))&-1;
  $$035$i = $17;
 } else {
  $$035$i = $11;
 }
 $18 = ((($0)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + ($$035$i<<2)|0);
 $22 = ((($0)) + 60|0);
 $$03637$i = HEAP32[$21>>2]|0;
 $23 = ($$03637$i|0)==(0|0);
 L4: do {
  if (!($23)) {
   $24 = ((($0)) + 88|0);
   $$036$in38$i = $21;$$03639$i = $$03637$i;
   while(1) {
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + 1)|0;
    HEAP32[$24>>2] = $26;
    $27 = ((($$03639$i)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==($5|0);
    if ($29) {
     $30 = HEAP32[$22>>2]|0;
     $31 = (($30) + 1)|0;
     HEAP32[$22>>2] = $31;
     $32 = HEAP32[$$03639$i>>2]|0;
     $33 = (FUNCTION_TABLE_iii[$19 & 63]($32,$1)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      break;
     }
    }
    $$1$i = ((($$03639$i)) + 4|0);
    $$036$i = HEAP32[$$1$i>>2]|0;
    $35 = ($$036$i|0)==(0|0);
    if ($35) {
     break L4;
    } else {
     $$036$in38$i = $$1$i;$$03639$i = $$036$i;
    }
   }
   $$pre$pre = HEAP32[$$036$in38$i>>2]|0;
   $36 = ($$pre$pre|0)==(0|0);
   if (!($36)) {
    $40 = ((($$pre$pre)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    HEAP32[$$036$in38$i>>2] = $41;
    $42 = HEAP32[$$pre$pre>>2]|0;
    _CRYPTO_free($$pre$pre,83252,0);
    $43 = ((($0)) + 72|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + 1)|0;
    HEAP32[$43>>2] = $45;
    $46 = ((($0)) + 36|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + -1)|0;
    HEAP32[$46>>2] = $48;
    $49 = ((($0)) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50>>>0)>(16);
    if (!($51)) {
     $$0 = $42;
     return ($$0|0);
    }
    $52 = ((($0)) + 32|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $48 << 8;
    $55 = (($54>>>0) / ($50>>>0))&-1;
    $56 = ($53>>>0)<($55>>>0);
    if ($56) {
     $$0 = $42;
     return ($$0|0);
    }
    $57 = HEAP32[$0>>2]|0;
    $58 = HEAP32[$12>>2]|0;
    $59 = HEAP32[$9>>2]|0;
    $60 = (($58) + -1)|0;
    $61 = (($60) + ($59))|0;
    $62 = (($57) + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP32[$62>>2] = 0;
    $64 = ($58|0)==(0);
    do {
     if ($64) {
      $65 = HEAP32[$0>>2]|0;
      $66 = $59 << 2;
      $67 = (_CRYPTO_realloc($65,$66,83252,0)|0);
      $68 = ($67|0)==(0|0);
      if (!($68)) {
       $71 = ((($0)) + 52|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (($72) + 1)|0;
       HEAP32[$71>>2] = $73;
       $74 = ((($0)) + 16|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = $75 >>> 1;
       HEAP32[$74>>2] = $76;
       $77 = HEAP32[$9>>2]|0;
       $78 = $77 >>> 1;
       HEAP32[$9>>2] = $78;
       $79 = (($78) + -1)|0;
       HEAP32[$12>>2] = $79;
       HEAP32[$0>>2] = $67;
       $$pre25 = HEAP32[$49>>2]|0;
       $81 = $$pre25;$86 = $67;$87 = $79;
       break;
      }
      $69 = HEAP32[$2>>2]|0;
      $70 = (($69) + 1)|0;
      HEAP32[$2>>2] = $70;
      $$0 = $42;
      return ($$0|0);
     } else {
      HEAP32[$12>>2] = $60;
      $$pre$i = HEAP32[$0>>2]|0;
      $81 = $50;$86 = $$pre$i;$87 = $60;
     }
    } while(0);
    $80 = (($81) + -1)|0;
    HEAP32[$49>>2] = $80;
    $82 = ((($0)) + 48|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (($83) + 1)|0;
    HEAP32[$82>>2] = $84;
    $85 = (($86) + ($87<<2)|0);
    $88 = HEAP32[$85>>2]|0;
    $89 = ($88|0)==(0|0);
    if ($89) {
     $$sink34$i = $85;
    } else {
     $$0$i = $88;
     while(1) {
      $90 = ((($$0$i)) + 4|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($91|0)==(0|0);
      if ($92) {
       $$sink34$i = $90;
       break;
      } else {
       $$0$i = $91;
      }
     }
    }
    HEAP32[$$sink34$i>>2] = $63;
    $$0 = $42;
    return ($$0|0);
   }
  }
 } while(0);
 $37 = ((($0)) + 76|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$37>>2] = $39;
 $$0 = 0;
 return ($$0|0);
}
function _OPENSSL_LH_retrieve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$035$i = 0, $$036$i = 0, $$036$in38$i = 0, $$03637$i = 0, $$03639$i = 0, $$1$i = 0, $$pre$pre = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 92|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = ((($0)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($0)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($5>>>0) % ($10>>>0))&-1;
 $12 = ((($0)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)<($13>>>0);
 if ($14) {
  $15 = ((($0)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($5>>>0) % ($16>>>0))&-1;
  $$035$i = $17;
 } else {
  $$035$i = $11;
 }
 $18 = ((($0)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + ($$035$i<<2)|0);
 $22 = ((($0)) + 60|0);
 $$03637$i = HEAP32[$21>>2]|0;
 $23 = ($$03637$i|0)==(0|0);
 L4: do {
  if (!($23)) {
   $24 = ((($0)) + 88|0);
   $$036$in38$i = $21;$$03639$i = $$03637$i;
   while(1) {
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + 1)|0;
    HEAP32[$24>>2] = $26;
    $27 = ((($$03639$i)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==($5|0);
    if ($29) {
     $30 = HEAP32[$22>>2]|0;
     $31 = (($30) + 1)|0;
     HEAP32[$22>>2] = $31;
     $32 = HEAP32[$$03639$i>>2]|0;
     $33 = (FUNCTION_TABLE_iii[$19 & 63]($32,$1)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      break;
     }
    }
    $$1$i = ((($$03639$i)) + 4|0);
    $$036$i = HEAP32[$$1$i>>2]|0;
    $35 = ($$036$i|0)==(0|0);
    if ($35) {
     break L4;
    } else {
     $$036$in38$i = $$1$i;$$03639$i = $$036$i;
    }
   }
   $$pre$pre = HEAP32[$$036$in38$i>>2]|0;
   $36 = ($$pre$pre|0)==(0|0);
   if (!($36)) {
    $38 = HEAP32[$$pre$pre>>2]|0;
    $39 = ((($0)) + 80|0);
    $$0 = $38;$$sink = $39;
    $40 = HEAP32[$$sink>>2]|0;
    $41 = (($40) + 1)|0;
    HEAP32[$$sink>>2] = $41;
    return ($$0|0);
   }
  }
 } while(0);
 $37 = ((($0)) + 84|0);
 $$0 = 0;$$sink = $37;
 $40 = HEAP32[$$sink>>2]|0;
 $41 = (($40) + 1)|0;
 HEAP32[$$sink>>2] = $41;
 return ($$0|0);
}
function _OPENSSL_LH_doall($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$us$i = 0, $$01921$us$us$i = 0, $$022$i = 0, $$023$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $$022$i = (($4) + -1)|0;
 $5 = ($$022$i|0)>(-1);
 if (!($5)) {
  return;
 }
 $$023$us$i = $$022$i;
 while(1) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + ($$023$us$i<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $$01921$us$us$i = $8;
   while(1) {
    $11 = ((($$01921$us$us$i)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$$01921$us$us$i>>2]|0;
    FUNCTION_TABLE_vi[$1 & 63]($13);
    $14 = ($12|0)==(0|0);
    if ($14) {
     break;
    } else {
     $$01921$us$us$i = $12;
    }
   }
  }
  $$0$us$i = (($$023$us$i) + -1)|0;
  $10 = ($$0$us$i|0)>(-1);
  if ($10) {
   $$023$us$i = $$0$us$i;
  } else {
   break;
  }
 }
 return;
}
function _OPENSSL_LH_doall_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$01921$i = 0, $$022$i = 0, $$023$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $$022$i = (($5) + -1)|0;
 $6 = ($$022$i|0)>(-1);
 if (!($6)) {
  return;
 }
 $$023$i = $$022$i;
 while(1) {
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + ($$023$i<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $$01921$i = $10;
   while(1) {
    $12 = ((($$01921$i)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP32[$$01921$i>>2]|0;
    FUNCTION_TABLE_vii[$1 & 31]($14,$2);
    $15 = ($13|0)==(0|0);
    if ($15) {
     break;
    } else {
     $$01921$i = $13;
    }
   }
  }
  $$0$i = (($$023$i) + -1)|0;
  $7 = ($$0$i|0)>(-1);
  if ($7) {
   $$023$i = $$0$i;
  } else {
   break;
  }
 }
 return;
}
function _OPENSSL_LH_get_down_load($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _OPENSSL_LH_set_down_load($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _MD5_Update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$060 = 0, $$061 = 0, $$1 = 0, $$162 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  return 1;
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 << 3;
 $7 = (($5) + ($6))|0;
 $8 = ($7>>>0)<($5>>>0);
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 if ($8) {
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $14 = $11;
 } else {
  $14 = $10;
 }
 $12 = $2 >>> 29;
 $13 = (($14) + ($12))|0;
 HEAP32[$9>>2] = $13;
 HEAP32[$4>>2] = $7;
 $15 = ((($0)) + 88|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 do {
  if ($17) {
   $$060 = $1;$$061 = $2;
  } else {
   $18 = ((($0)) + 24|0);
   $19 = (($16) + ($2))|0;
   $20 = $19 | $2;
   $21 = ($20>>>0)>(63);
   $22 = (($18) + ($16)|0);
   if ($21) {
    $23 = (64 - ($16))|0;
    _memcpy(($22|0),($1|0),($23|0))|0;
    _md5_block_data_order($0,$18,1);
    $24 = (($1) + ($23)|0);
    $25 = (($2) - ($23))|0;
    dest=$18; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$060 = $24;$$061 = $25;
    break;
   }
   _memcpy(($22|0),($1|0),($2|0))|0;
   $26 = HEAP32[$15>>2]|0;
   $27 = (($26) + ($2))|0;
   HEAP32[$15>>2] = $27;
   return 1;
  }
 } while(0);
 $28 = $$061 >>> 6;
 $29 = ($28|0)==(0);
 $30 = $28 << 6;
 if ($29) {
  $$1 = $$060;$$162 = $$061;
 } else {
  $31 = (($$061) - ($30))|0;
  $32 = (($$060) + ($30)|0);
  _md5_block_data_order($0,$$060,$28);
  $$1 = $32;$$162 = $31;
 }
 $33 = ($$162|0)==(0);
 if ($33) {
  return 1;
 }
 $34 = ((($0)) + 24|0);
 HEAP32[$15>>2] = $$162;
 _memcpy(($34|0),($$1|0),($$162|0))|0;
 return 1;
}
function _md5_block_data_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0792801 = 0, $$0793800 = 0, $$0794799 = 0, $$0795798 = 0, $$0796797 = 0, $$0802 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = ((($0)) + 8|0);
 $5 = ((($0)) + 12|0);
 $6 = ($2|0)==(0);
 if ($6) {
  return;
 }
 $7 = HEAP32[$5>>2]|0;
 $8 = HEAP32[$4>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $$0792801 = $1;$$0793800 = $10;$$0794799 = $9;$$0795798 = $8;$$0796797 = $7;$$0802 = $2;
 while(1) {
  $11 = (($$0802) + -1)|0;
  $12 = ((($$0792801)) + 1|0);
  $13 = HEAP8[$$0792801>>0]|0;
  $14 = $13&255;
  $15 = ((($$0792801)) + 2|0);
  $16 = HEAP8[$12>>0]|0;
  $17 = $16&255;
  $18 = $17 << 8;
  $19 = $18 | $14;
  $20 = ((($$0792801)) + 3|0);
  $21 = HEAP8[$15>>0]|0;
  $22 = $21&255;
  $23 = $22 << 16;
  $24 = $19 | $23;
  $25 = ((($$0792801)) + 4|0);
  $26 = HEAP8[$20>>0]|0;
  $27 = $26&255;
  $28 = $27 << 24;
  $29 = $24 | $28;
  $30 = ((($$0792801)) + 5|0);
  $31 = HEAP8[$25>>0]|0;
  $32 = $31&255;
  $33 = ((($$0792801)) + 6|0);
  $34 = HEAP8[$30>>0]|0;
  $35 = $34&255;
  $36 = $35 << 8;
  $37 = $36 | $32;
  $38 = ((($$0792801)) + 7|0);
  $39 = HEAP8[$33>>0]|0;
  $40 = $39&255;
  $41 = $40 << 16;
  $42 = $37 | $41;
  $43 = ((($$0792801)) + 8|0);
  $44 = HEAP8[$38>>0]|0;
  $45 = $44&255;
  $46 = $45 << 24;
  $47 = $42 | $46;
  $48 = $$0795798 ^ $$0796797;
  $49 = $48 & $$0794799;
  $50 = $49 ^ $$0796797;
  $51 = (($$0793800) + -680876936)|0;
  $52 = (($51) + ($50))|0;
  $53 = (($52) + ($29))|0;
  $54 = $53 << 7;
  $55 = $53 >>> 25;
  $56 = $54 | $55;
  $57 = (($56) + ($$0794799))|0;
  $58 = ((($$0792801)) + 9|0);
  $59 = HEAP8[$43>>0]|0;
  $60 = $59&255;
  $61 = ((($$0792801)) + 10|0);
  $62 = HEAP8[$58>>0]|0;
  $63 = $62&255;
  $64 = $63 << 8;
  $65 = $64 | $60;
  $66 = ((($$0792801)) + 11|0);
  $67 = HEAP8[$61>>0]|0;
  $68 = $67&255;
  $69 = $68 << 16;
  $70 = $65 | $69;
  $71 = ((($$0792801)) + 12|0);
  $72 = HEAP8[$66>>0]|0;
  $73 = $72&255;
  $74 = $73 << 24;
  $75 = $70 | $74;
  $76 = $$0794799 ^ $$0795798;
  $77 = $57 & $76;
  $78 = $77 ^ $$0795798;
  $79 = (($$0796797) + -389564586)|0;
  $80 = (($79) + ($47))|0;
  $81 = (($80) + ($78))|0;
  $82 = $81 << 12;
  $83 = $81 >>> 20;
  $84 = $82 | $83;
  $85 = (($84) + ($57))|0;
  $86 = ((($$0792801)) + 13|0);
  $87 = HEAP8[$71>>0]|0;
  $88 = $87&255;
  $89 = ((($$0792801)) + 14|0);
  $90 = HEAP8[$86>>0]|0;
  $91 = $90&255;
  $92 = $91 << 8;
  $93 = $92 | $88;
  $94 = ((($$0792801)) + 15|0);
  $95 = HEAP8[$89>>0]|0;
  $96 = $95&255;
  $97 = $96 << 16;
  $98 = $93 | $97;
  $99 = ((($$0792801)) + 16|0);
  $100 = HEAP8[$94>>0]|0;
  $101 = $100&255;
  $102 = $101 << 24;
  $103 = $98 | $102;
  $104 = $57 ^ $$0794799;
  $105 = $85 & $104;
  $106 = $105 ^ $$0794799;
  $107 = (($$0795798) + 606105819)|0;
  $108 = (($107) + ($75))|0;
  $109 = (($108) + ($106))|0;
  $110 = $109 << 17;
  $111 = $109 >>> 15;
  $112 = $110 | $111;
  $113 = (($112) + ($85))|0;
  $114 = ((($$0792801)) + 17|0);
  $115 = HEAP8[$99>>0]|0;
  $116 = $115&255;
  $117 = ((($$0792801)) + 18|0);
  $118 = HEAP8[$114>>0]|0;
  $119 = $118&255;
  $120 = $119 << 8;
  $121 = $120 | $116;
  $122 = ((($$0792801)) + 19|0);
  $123 = HEAP8[$117>>0]|0;
  $124 = $123&255;
  $125 = $124 << 16;
  $126 = $121 | $125;
  $127 = ((($$0792801)) + 20|0);
  $128 = HEAP8[$122>>0]|0;
  $129 = $128&255;
  $130 = $129 << 24;
  $131 = $126 | $130;
  $132 = $85 ^ $57;
  $133 = $113 & $132;
  $134 = $133 ^ $57;
  $135 = (($$0794799) + -1044525330)|0;
  $136 = (($135) + ($103))|0;
  $137 = (($136) + ($134))|0;
  $138 = $137 << 22;
  $139 = $137 >>> 10;
  $140 = $138 | $139;
  $141 = (($140) + ($113))|0;
  $142 = ((($$0792801)) + 21|0);
  $143 = HEAP8[$127>>0]|0;
  $144 = $143&255;
  $145 = ((($$0792801)) + 22|0);
  $146 = HEAP8[$142>>0]|0;
  $147 = $146&255;
  $148 = $147 << 8;
  $149 = $148 | $144;
  $150 = ((($$0792801)) + 23|0);
  $151 = HEAP8[$145>>0]|0;
  $152 = $151&255;
  $153 = $152 << 16;
  $154 = $149 | $153;
  $155 = ((($$0792801)) + 24|0);
  $156 = HEAP8[$150>>0]|0;
  $157 = $156&255;
  $158 = $157 << 24;
  $159 = $154 | $158;
  $160 = $113 ^ $85;
  $161 = $141 & $160;
  $162 = $161 ^ $85;
  $163 = (($57) + -176418897)|0;
  $164 = (($163) + ($131))|0;
  $165 = (($164) + ($162))|0;
  $166 = $165 << 7;
  $167 = $165 >>> 25;
  $168 = $166 | $167;
  $169 = (($168) + ($141))|0;
  $170 = ((($$0792801)) + 25|0);
  $171 = HEAP8[$155>>0]|0;
  $172 = $171&255;
  $173 = ((($$0792801)) + 26|0);
  $174 = HEAP8[$170>>0]|0;
  $175 = $174&255;
  $176 = $175 << 8;
  $177 = $176 | $172;
  $178 = ((($$0792801)) + 27|0);
  $179 = HEAP8[$173>>0]|0;
  $180 = $179&255;
  $181 = $180 << 16;
  $182 = $177 | $181;
  $183 = ((($$0792801)) + 28|0);
  $184 = HEAP8[$178>>0]|0;
  $185 = $184&255;
  $186 = $185 << 24;
  $187 = $182 | $186;
  $188 = $141 ^ $113;
  $189 = $169 & $188;
  $190 = $189 ^ $113;
  $191 = (($85) + 1200080426)|0;
  $192 = (($191) + ($159))|0;
  $193 = (($192) + ($190))|0;
  $194 = $193 << 12;
  $195 = $193 >>> 20;
  $196 = $194 | $195;
  $197 = (($196) + ($169))|0;
  $198 = ((($$0792801)) + 29|0);
  $199 = HEAP8[$183>>0]|0;
  $200 = $199&255;
  $201 = ((($$0792801)) + 30|0);
  $202 = HEAP8[$198>>0]|0;
  $203 = $202&255;
  $204 = $203 << 8;
  $205 = $204 | $200;
  $206 = ((($$0792801)) + 31|0);
  $207 = HEAP8[$201>>0]|0;
  $208 = $207&255;
  $209 = $208 << 16;
  $210 = $205 | $209;
  $211 = ((($$0792801)) + 32|0);
  $212 = HEAP8[$206>>0]|0;
  $213 = $212&255;
  $214 = $213 << 24;
  $215 = $210 | $214;
  $216 = $169 ^ $141;
  $217 = $197 & $216;
  $218 = $217 ^ $141;
  $219 = (($113) + -1473231341)|0;
  $220 = (($219) + ($187))|0;
  $221 = (($220) + ($218))|0;
  $222 = $221 << 17;
  $223 = $221 >>> 15;
  $224 = $222 | $223;
  $225 = (($224) + ($197))|0;
  $226 = ((($$0792801)) + 33|0);
  $227 = HEAP8[$211>>0]|0;
  $228 = $227&255;
  $229 = ((($$0792801)) + 34|0);
  $230 = HEAP8[$226>>0]|0;
  $231 = $230&255;
  $232 = $231 << 8;
  $233 = $232 | $228;
  $234 = ((($$0792801)) + 35|0);
  $235 = HEAP8[$229>>0]|0;
  $236 = $235&255;
  $237 = $236 << 16;
  $238 = $233 | $237;
  $239 = ((($$0792801)) + 36|0);
  $240 = HEAP8[$234>>0]|0;
  $241 = $240&255;
  $242 = $241 << 24;
  $243 = $238 | $242;
  $244 = $197 ^ $169;
  $245 = $225 & $244;
  $246 = $245 ^ $169;
  $247 = (($141) + -45705983)|0;
  $248 = (($247) + ($215))|0;
  $249 = (($248) + ($246))|0;
  $250 = $249 << 22;
  $251 = $249 >>> 10;
  $252 = $250 | $251;
  $253 = (($252) + ($225))|0;
  $254 = ((($$0792801)) + 37|0);
  $255 = HEAP8[$239>>0]|0;
  $256 = $255&255;
  $257 = ((($$0792801)) + 38|0);
  $258 = HEAP8[$254>>0]|0;
  $259 = $258&255;
  $260 = $259 << 8;
  $261 = $260 | $256;
  $262 = ((($$0792801)) + 39|0);
  $263 = HEAP8[$257>>0]|0;
  $264 = $263&255;
  $265 = $264 << 16;
  $266 = $261 | $265;
  $267 = ((($$0792801)) + 40|0);
  $268 = HEAP8[$262>>0]|0;
  $269 = $268&255;
  $270 = $269 << 24;
  $271 = $266 | $270;
  $272 = (($243) + 1770035416)|0;
  $273 = $225 ^ $197;
  $274 = $253 & $273;
  $275 = $274 ^ $197;
  $276 = (($272) + ($169))|0;
  $277 = (($276) + ($275))|0;
  $278 = $277 << 7;
  $279 = $277 >>> 25;
  $280 = $278 | $279;
  $281 = (($280) + ($253))|0;
  $282 = ((($$0792801)) + 41|0);
  $283 = HEAP8[$267>>0]|0;
  $284 = $283&255;
  $285 = ((($$0792801)) + 42|0);
  $286 = HEAP8[$282>>0]|0;
  $287 = $286&255;
  $288 = $287 << 8;
  $289 = $288 | $284;
  $290 = ((($$0792801)) + 43|0);
  $291 = HEAP8[$285>>0]|0;
  $292 = $291&255;
  $293 = $292 << 16;
  $294 = $289 | $293;
  $295 = ((($$0792801)) + 44|0);
  $296 = HEAP8[$290>>0]|0;
  $297 = $296&255;
  $298 = $297 << 24;
  $299 = $294 | $298;
  $300 = (($271) + -1958414417)|0;
  $301 = $253 ^ $225;
  $302 = $281 & $301;
  $303 = $302 ^ $225;
  $304 = (($300) + ($197))|0;
  $305 = (($304) + ($303))|0;
  $306 = $305 << 12;
  $307 = $305 >>> 20;
  $308 = $306 | $307;
  $309 = (($308) + ($281))|0;
  $310 = ((($$0792801)) + 45|0);
  $311 = HEAP8[$295>>0]|0;
  $312 = $311&255;
  $313 = ((($$0792801)) + 46|0);
  $314 = HEAP8[$310>>0]|0;
  $315 = $314&255;
  $316 = $315 << 8;
  $317 = $316 | $312;
  $318 = ((($$0792801)) + 47|0);
  $319 = HEAP8[$313>>0]|0;
  $320 = $319&255;
  $321 = $320 << 16;
  $322 = $317 | $321;
  $323 = ((($$0792801)) + 48|0);
  $324 = HEAP8[$318>>0]|0;
  $325 = $324&255;
  $326 = $325 << 24;
  $327 = $322 | $326;
  $328 = (($299) + -42063)|0;
  $329 = $281 ^ $253;
  $330 = $309 & $329;
  $331 = $330 ^ $253;
  $332 = (($328) + ($225))|0;
  $333 = (($332) + ($331))|0;
  $334 = $333 << 17;
  $335 = $333 >>> 15;
  $336 = $334 | $335;
  $337 = (($336) + ($309))|0;
  $338 = ((($$0792801)) + 49|0);
  $339 = HEAP8[$323>>0]|0;
  $340 = $339&255;
  $341 = ((($$0792801)) + 50|0);
  $342 = HEAP8[$338>>0]|0;
  $343 = $342&255;
  $344 = $343 << 8;
  $345 = $344 | $340;
  $346 = ((($$0792801)) + 51|0);
  $347 = HEAP8[$341>>0]|0;
  $348 = $347&255;
  $349 = $348 << 16;
  $350 = $345 | $349;
  $351 = ((($$0792801)) + 52|0);
  $352 = HEAP8[$346>>0]|0;
  $353 = $352&255;
  $354 = $353 << 24;
  $355 = $350 | $354;
  $356 = (($327) + -1990404162)|0;
  $357 = $309 ^ $281;
  $358 = $337 & $357;
  $359 = $358 ^ $281;
  $360 = (($356) + ($253))|0;
  $361 = (($360) + ($359))|0;
  $362 = $361 << 22;
  $363 = $361 >>> 10;
  $364 = $362 | $363;
  $365 = (($364) + ($337))|0;
  $366 = ((($$0792801)) + 53|0);
  $367 = HEAP8[$351>>0]|0;
  $368 = $367&255;
  $369 = ((($$0792801)) + 54|0);
  $370 = HEAP8[$366>>0]|0;
  $371 = $370&255;
  $372 = $371 << 8;
  $373 = $372 | $368;
  $374 = ((($$0792801)) + 55|0);
  $375 = HEAP8[$369>>0]|0;
  $376 = $375&255;
  $377 = $376 << 16;
  $378 = $373 | $377;
  $379 = ((($$0792801)) + 56|0);
  $380 = HEAP8[$374>>0]|0;
  $381 = $380&255;
  $382 = $381 << 24;
  $383 = $378 | $382;
  $384 = (($355) + 1804603682)|0;
  $385 = $337 ^ $309;
  $386 = $365 & $385;
  $387 = $386 ^ $309;
  $388 = (($384) + ($281))|0;
  $389 = (($388) + ($387))|0;
  $390 = $389 << 7;
  $391 = $389 >>> 25;
  $392 = $390 | $391;
  $393 = (($392) + ($365))|0;
  $394 = ((($$0792801)) + 57|0);
  $395 = HEAP8[$379>>0]|0;
  $396 = $395&255;
  $397 = ((($$0792801)) + 58|0);
  $398 = HEAP8[$394>>0]|0;
  $399 = $398&255;
  $400 = $399 << 8;
  $401 = $400 | $396;
  $402 = ((($$0792801)) + 59|0);
  $403 = HEAP8[$397>>0]|0;
  $404 = $403&255;
  $405 = $404 << 16;
  $406 = $401 | $405;
  $407 = ((($$0792801)) + 60|0);
  $408 = HEAP8[$402>>0]|0;
  $409 = $408&255;
  $410 = $409 << 24;
  $411 = $406 | $410;
  $412 = (($383) + -40341101)|0;
  $413 = $365 ^ $337;
  $414 = $393 & $413;
  $415 = $414 ^ $337;
  $416 = (($412) + ($309))|0;
  $417 = (($416) + ($415))|0;
  $418 = $417 << 12;
  $419 = $417 >>> 20;
  $420 = $418 | $419;
  $421 = (($420) + ($393))|0;
  $422 = ((($$0792801)) + 61|0);
  $423 = HEAP8[$407>>0]|0;
  $424 = $423&255;
  $425 = ((($$0792801)) + 62|0);
  $426 = HEAP8[$422>>0]|0;
  $427 = $426&255;
  $428 = $427 << 8;
  $429 = $428 | $424;
  $430 = ((($$0792801)) + 63|0);
  $431 = HEAP8[$425>>0]|0;
  $432 = $431&255;
  $433 = $432 << 16;
  $434 = $429 | $433;
  $435 = ((($$0792801)) + 64|0);
  $436 = HEAP8[$430>>0]|0;
  $437 = $436&255;
  $438 = $437 << 24;
  $439 = $434 | $438;
  $440 = (($411) + -1502002290)|0;
  $441 = $393 ^ $365;
  $442 = $421 & $441;
  $443 = $442 ^ $365;
  $444 = (($440) + ($337))|0;
  $445 = (($444) + ($443))|0;
  $446 = $445 << 17;
  $447 = $445 >>> 15;
  $448 = $446 | $447;
  $449 = (($448) + ($421))|0;
  $450 = (($439) + 1236535329)|0;
  $451 = $421 ^ $393;
  $452 = $449 & $451;
  $453 = $452 ^ $393;
  $454 = (($450) + ($365))|0;
  $455 = (($454) + ($453))|0;
  $456 = $455 << 22;
  $457 = $455 >>> 10;
  $458 = $456 | $457;
  $459 = (($458) + ($449))|0;
  $460 = (($47) + -165796510)|0;
  $461 = $459 ^ $449;
  $462 = $461 & $421;
  $463 = $462 ^ $449;
  $464 = (($460) + ($393))|0;
  $465 = (($464) + ($463))|0;
  $466 = $465 << 5;
  $467 = $465 >>> 27;
  $468 = $466 | $467;
  $469 = (($468) + ($459))|0;
  $470 = (($187) + -1069501632)|0;
  $471 = $469 ^ $459;
  $472 = $471 & $449;
  $473 = $472 ^ $459;
  $474 = (($470) + ($421))|0;
  $475 = (($474) + ($473))|0;
  $476 = $475 << 9;
  $477 = $475 >>> 23;
  $478 = $476 | $477;
  $479 = (($478) + ($469))|0;
  $480 = (($327) + 643717713)|0;
  $481 = $479 ^ $469;
  $482 = $481 & $459;
  $483 = $482 ^ $469;
  $484 = (($480) + ($449))|0;
  $485 = (($484) + ($483))|0;
  $486 = $485 << 14;
  $487 = $485 >>> 18;
  $488 = $486 | $487;
  $489 = (($488) + ($479))|0;
  $490 = (($29) + -373897302)|0;
  $491 = $489 ^ $479;
  $492 = $491 & $469;
  $493 = $492 ^ $479;
  $494 = (($490) + ($459))|0;
  $495 = (($494) + ($493))|0;
  $496 = $495 << 20;
  $497 = $495 >>> 12;
  $498 = $496 | $497;
  $499 = (($498) + ($489))|0;
  $500 = (($159) + -701558691)|0;
  $501 = $499 ^ $489;
  $502 = $501 & $479;
  $503 = $502 ^ $489;
  $504 = (($500) + ($469))|0;
  $505 = (($504) + ($503))|0;
  $506 = $505 << 5;
  $507 = $505 >>> 27;
  $508 = $506 | $507;
  $509 = (($508) + ($499))|0;
  $510 = (($299) + 38016083)|0;
  $511 = $509 ^ $499;
  $512 = $511 & $489;
  $513 = $512 ^ $499;
  $514 = (($510) + ($479))|0;
  $515 = (($514) + ($513))|0;
  $516 = $515 << 9;
  $517 = $515 >>> 23;
  $518 = $516 | $517;
  $519 = (($518) + ($509))|0;
  $520 = (($439) + -660478335)|0;
  $521 = $519 ^ $509;
  $522 = $521 & $499;
  $523 = $522 ^ $509;
  $524 = (($520) + ($489))|0;
  $525 = (($524) + ($523))|0;
  $526 = $525 << 14;
  $527 = $525 >>> 18;
  $528 = $526 | $527;
  $529 = (($528) + ($519))|0;
  $530 = (($131) + -405537848)|0;
  $531 = $529 ^ $519;
  $532 = $531 & $509;
  $533 = $532 ^ $519;
  $534 = (($530) + ($499))|0;
  $535 = (($534) + ($533))|0;
  $536 = $535 << 20;
  $537 = $535 >>> 12;
  $538 = $536 | $537;
  $539 = (($538) + ($529))|0;
  $540 = (($271) + 568446438)|0;
  $541 = $539 ^ $529;
  $542 = $541 & $519;
  $543 = $542 ^ $529;
  $544 = (($540) + ($509))|0;
  $545 = (($544) + ($543))|0;
  $546 = $545 << 5;
  $547 = $545 >>> 27;
  $548 = $546 | $547;
  $549 = (($548) + ($539))|0;
  $550 = (($411) + -1019803690)|0;
  $551 = $549 ^ $539;
  $552 = $551 & $529;
  $553 = $552 ^ $539;
  $554 = (($550) + ($519))|0;
  $555 = (($554) + ($553))|0;
  $556 = $555 << 9;
  $557 = $555 >>> 23;
  $558 = $556 | $557;
  $559 = (($558) + ($549))|0;
  $560 = (($103) + -187363961)|0;
  $561 = $559 ^ $549;
  $562 = $561 & $539;
  $563 = $562 ^ $549;
  $564 = (($560) + ($529))|0;
  $565 = (($564) + ($563))|0;
  $566 = $565 << 14;
  $567 = $565 >>> 18;
  $568 = $566 | $567;
  $569 = (($568) + ($559))|0;
  $570 = (($243) + 1163531501)|0;
  $571 = $569 ^ $559;
  $572 = $571 & $549;
  $573 = $572 ^ $559;
  $574 = (($570) + ($539))|0;
  $575 = (($574) + ($573))|0;
  $576 = $575 << 20;
  $577 = $575 >>> 12;
  $578 = $576 | $577;
  $579 = (($578) + ($569))|0;
  $580 = (($383) + -1444681467)|0;
  $581 = $579 ^ $569;
  $582 = $581 & $559;
  $583 = $582 ^ $569;
  $584 = (($580) + ($549))|0;
  $585 = (($584) + ($583))|0;
  $586 = $585 << 5;
  $587 = $585 >>> 27;
  $588 = $586 | $587;
  $589 = (($588) + ($579))|0;
  $590 = (($75) + -51403784)|0;
  $591 = $589 ^ $579;
  $592 = $591 & $569;
  $593 = $592 ^ $579;
  $594 = (($590) + ($559))|0;
  $595 = (($594) + ($593))|0;
  $596 = $595 << 9;
  $597 = $595 >>> 23;
  $598 = $596 | $597;
  $599 = (($598) + ($589))|0;
  $600 = (($215) + 1735328473)|0;
  $601 = $599 ^ $589;
  $602 = $601 & $579;
  $603 = $602 ^ $589;
  $604 = (($600) + ($569))|0;
  $605 = (($604) + ($603))|0;
  $606 = $605 << 14;
  $607 = $605 >>> 18;
  $608 = $606 | $607;
  $609 = (($608) + ($599))|0;
  $610 = (($355) + -1926607734)|0;
  $611 = $609 ^ $599;
  $612 = $611 & $589;
  $613 = $612 ^ $599;
  $614 = (($610) + ($579))|0;
  $615 = (($614) + ($613))|0;
  $616 = $615 << 20;
  $617 = $615 >>> 12;
  $618 = $616 | $617;
  $619 = (($618) + ($609))|0;
  $620 = (($159) + -378558)|0;
  $621 = $611 ^ $619;
  $622 = (($620) + ($589))|0;
  $623 = (($622) + ($621))|0;
  $624 = $623 << 4;
  $625 = $623 >>> 28;
  $626 = $624 | $625;
  $627 = (($626) + ($619))|0;
  $628 = (($243) + -2022574463)|0;
  $629 = $619 ^ $609;
  $630 = $629 ^ $627;
  $631 = (($628) + ($599))|0;
  $632 = (($631) + ($630))|0;
  $633 = $632 << 11;
  $634 = $632 >>> 21;
  $635 = $633 | $634;
  $636 = (($635) + ($627))|0;
  $637 = (($327) + 1839030562)|0;
  $638 = $627 ^ $619;
  $639 = $638 ^ $636;
  $640 = (($637) + ($609))|0;
  $641 = (($640) + ($639))|0;
  $642 = $641 << 16;
  $643 = $641 >>> 16;
  $644 = $642 | $643;
  $645 = (($644) + ($636))|0;
  $646 = (($411) + -35309556)|0;
  $647 = $636 ^ $627;
  $648 = $647 ^ $645;
  $649 = (($646) + ($619))|0;
  $650 = (($649) + ($648))|0;
  $651 = $650 << 23;
  $652 = $650 >>> 9;
  $653 = $651 | $652;
  $654 = (($653) + ($645))|0;
  $655 = (($47) + -1530992060)|0;
  $656 = $645 ^ $636;
  $657 = $656 ^ $654;
  $658 = (($655) + ($627))|0;
  $659 = (($658) + ($657))|0;
  $660 = $659 << 4;
  $661 = $659 >>> 28;
  $662 = $660 | $661;
  $663 = (($662) + ($654))|0;
  $664 = (($131) + 1272893353)|0;
  $665 = $654 ^ $645;
  $666 = $665 ^ $663;
  $667 = (($664) + ($636))|0;
  $668 = (($667) + ($666))|0;
  $669 = $668 << 11;
  $670 = $668 >>> 21;
  $671 = $669 | $670;
  $672 = (($671) + ($663))|0;
  $673 = (($215) + -155497632)|0;
  $674 = $663 ^ $654;
  $675 = $674 ^ $672;
  $676 = (($673) + ($645))|0;
  $677 = (($676) + ($675))|0;
  $678 = $677 << 16;
  $679 = $677 >>> 16;
  $680 = $678 | $679;
  $681 = (($680) + ($672))|0;
  $682 = (($299) + -1094730640)|0;
  $683 = $672 ^ $663;
  $684 = $683 ^ $681;
  $685 = (($682) + ($654))|0;
  $686 = (($685) + ($684))|0;
  $687 = $686 << 23;
  $688 = $686 >>> 9;
  $689 = $687 | $688;
  $690 = (($689) + ($681))|0;
  $691 = (($383) + 681279174)|0;
  $692 = $681 ^ $672;
  $693 = $692 ^ $690;
  $694 = (($691) + ($663))|0;
  $695 = (($694) + ($693))|0;
  $696 = $695 << 4;
  $697 = $695 >>> 28;
  $698 = $696 | $697;
  $699 = (($698) + ($690))|0;
  $700 = (($29) + -358537222)|0;
  $701 = $690 ^ $681;
  $702 = $701 ^ $699;
  $703 = (($700) + ($672))|0;
  $704 = (($703) + ($702))|0;
  $705 = $704 << 11;
  $706 = $704 >>> 21;
  $707 = $705 | $706;
  $708 = (($707) + ($699))|0;
  $709 = (($103) + -722521979)|0;
  $710 = $699 ^ $690;
  $711 = $710 ^ $708;
  $712 = (($709) + ($681))|0;
  $713 = (($712) + ($711))|0;
  $714 = $713 << 16;
  $715 = $713 >>> 16;
  $716 = $714 | $715;
  $717 = (($716) + ($708))|0;
  $718 = (($187) + 76029189)|0;
  $719 = $708 ^ $699;
  $720 = $719 ^ $717;
  $721 = (($718) + ($690))|0;
  $722 = (($721) + ($720))|0;
  $723 = $722 << 23;
  $724 = $722 >>> 9;
  $725 = $723 | $724;
  $726 = (($725) + ($717))|0;
  $727 = (($271) + -640364487)|0;
  $728 = $717 ^ $708;
  $729 = $728 ^ $726;
  $730 = (($727) + ($699))|0;
  $731 = (($730) + ($729))|0;
  $732 = $731 << 4;
  $733 = $731 >>> 28;
  $734 = $732 | $733;
  $735 = (($734) + ($726))|0;
  $736 = (($355) + -421815835)|0;
  $737 = $726 ^ $717;
  $738 = $737 ^ $735;
  $739 = (($736) + ($708))|0;
  $740 = (($739) + ($738))|0;
  $741 = $740 << 11;
  $742 = $740 >>> 21;
  $743 = $741 | $742;
  $744 = (($743) + ($735))|0;
  $745 = (($439) + 530742520)|0;
  $746 = $735 ^ $726;
  $747 = $746 ^ $744;
  $748 = (($745) + ($717))|0;
  $749 = (($748) + ($747))|0;
  $750 = $749 << 16;
  $751 = $749 >>> 16;
  $752 = $750 | $751;
  $753 = (($752) + ($744))|0;
  $754 = (($75) + -995338651)|0;
  $755 = $744 ^ $735;
  $756 = $755 ^ $753;
  $757 = (($754) + ($726))|0;
  $758 = (($757) + ($756))|0;
  $759 = $758 << 23;
  $760 = $758 >>> 9;
  $761 = $759 | $760;
  $762 = (($761) + ($753))|0;
  $763 = (($29) + -198630844)|0;
  $764 = $744 ^ -1;
  $765 = $762 | $764;
  $766 = $765 ^ $753;
  $767 = (($763) + ($735))|0;
  $768 = (($767) + ($766))|0;
  $769 = $768 << 6;
  $770 = $768 >>> 26;
  $771 = $769 | $770;
  $772 = (($771) + ($762))|0;
  $773 = (($215) + 1126891415)|0;
  $774 = $753 ^ -1;
  $775 = $772 | $774;
  $776 = $775 ^ $762;
  $777 = (($773) + ($744))|0;
  $778 = (($777) + ($776))|0;
  $779 = $778 << 10;
  $780 = $778 >>> 22;
  $781 = $779 | $780;
  $782 = (($781) + ($772))|0;
  $783 = (($411) + -1416354905)|0;
  $784 = $762 ^ -1;
  $785 = $782 | $784;
  $786 = $785 ^ $772;
  $787 = (($783) + ($753))|0;
  $788 = (($787) + ($786))|0;
  $789 = $788 << 15;
  $790 = $788 >>> 17;
  $791 = $789 | $790;
  $792 = (($791) + ($782))|0;
  $793 = (($159) + -57434055)|0;
  $794 = $772 ^ -1;
  $795 = $792 | $794;
  $796 = $795 ^ $782;
  $797 = (($793) + ($762))|0;
  $798 = (($797) + ($796))|0;
  $799 = $798 << 21;
  $800 = $798 >>> 11;
  $801 = $799 | $800;
  $802 = (($801) + ($792))|0;
  $803 = (($355) + 1700485571)|0;
  $804 = $782 ^ -1;
  $805 = $802 | $804;
  $806 = $805 ^ $792;
  $807 = (($803) + ($772))|0;
  $808 = (($807) + ($806))|0;
  $809 = $808 << 6;
  $810 = $808 >>> 26;
  $811 = $809 | $810;
  $812 = (($811) + ($802))|0;
  $813 = (($103) + -1894986606)|0;
  $814 = $792 ^ -1;
  $815 = $812 | $814;
  $816 = $815 ^ $802;
  $817 = (($813) + ($782))|0;
  $818 = (($817) + ($816))|0;
  $819 = $818 << 10;
  $820 = $818 >>> 22;
  $821 = $819 | $820;
  $822 = (($821) + ($812))|0;
  $823 = (($299) + -1051523)|0;
  $824 = $802 ^ -1;
  $825 = $822 | $824;
  $826 = $825 ^ $812;
  $827 = (($823) + ($792))|0;
  $828 = (($827) + ($826))|0;
  $829 = $828 << 15;
  $830 = $828 >>> 17;
  $831 = $829 | $830;
  $832 = (($831) + ($822))|0;
  $833 = (($47) + -2054922799)|0;
  $834 = $812 ^ -1;
  $835 = $832 | $834;
  $836 = $835 ^ $822;
  $837 = (($833) + ($802))|0;
  $838 = (($837) + ($836))|0;
  $839 = $838 << 21;
  $840 = $838 >>> 11;
  $841 = $839 | $840;
  $842 = (($841) + ($832))|0;
  $843 = (($243) + 1873313359)|0;
  $844 = $822 ^ -1;
  $845 = $842 | $844;
  $846 = $845 ^ $832;
  $847 = (($843) + ($812))|0;
  $848 = (($847) + ($846))|0;
  $849 = $848 << 6;
  $850 = $848 >>> 26;
  $851 = $849 | $850;
  $852 = (($851) + ($842))|0;
  $853 = (($439) + -30611744)|0;
  $854 = $832 ^ -1;
  $855 = $852 | $854;
  $856 = $855 ^ $842;
  $857 = (($853) + ($822))|0;
  $858 = (($857) + ($856))|0;
  $859 = $858 << 10;
  $860 = $858 >>> 22;
  $861 = $859 | $860;
  $862 = (($861) + ($852))|0;
  $863 = (($187) + -1560198380)|0;
  $864 = $842 ^ -1;
  $865 = $862 | $864;
  $866 = $865 ^ $852;
  $867 = (($863) + ($832))|0;
  $868 = (($867) + ($866))|0;
  $869 = $868 << 15;
  $870 = $868 >>> 17;
  $871 = $869 | $870;
  $872 = (($871) + ($862))|0;
  $873 = (($383) + 1309151649)|0;
  $874 = $852 ^ -1;
  $875 = $872 | $874;
  $876 = $875 ^ $862;
  $877 = (($873) + ($842))|0;
  $878 = (($877) + ($876))|0;
  $879 = $878 << 21;
  $880 = $878 >>> 11;
  $881 = $879 | $880;
  $882 = (($881) + ($872))|0;
  $883 = (($131) + -145523070)|0;
  $884 = $862 ^ -1;
  $885 = $882 | $884;
  $886 = $885 ^ $872;
  $887 = (($883) + ($852))|0;
  $888 = (($887) + ($886))|0;
  $889 = $888 << 6;
  $890 = $888 >>> 26;
  $891 = $889 | $890;
  $892 = (($891) + ($882))|0;
  $893 = (($327) + -1120210379)|0;
  $894 = $872 ^ -1;
  $895 = $892 | $894;
  $896 = $895 ^ $882;
  $897 = (($893) + ($862))|0;
  $898 = (($897) + ($896))|0;
  $899 = $898 << 10;
  $900 = $898 >>> 22;
  $901 = $899 | $900;
  $902 = (($901) + ($892))|0;
  $903 = (($75) + 718787259)|0;
  $904 = $882 ^ -1;
  $905 = $902 | $904;
  $906 = $905 ^ $892;
  $907 = (($903) + ($872))|0;
  $908 = (($907) + ($906))|0;
  $909 = $908 << 15;
  $910 = $908 >>> 17;
  $911 = $909 | $910;
  $912 = (($911) + ($902))|0;
  $913 = (($271) + -343485551)|0;
  $914 = $892 ^ -1;
  $915 = $912 | $914;
  $916 = $915 ^ $902;
  $917 = (($913) + ($882))|0;
  $918 = (($917) + ($916))|0;
  $919 = $918 << 21;
  $920 = $918 >>> 11;
  $921 = $919 | $920;
  $922 = HEAP32[$0>>2]|0;
  $923 = (($892) + ($922))|0;
  HEAP32[$0>>2] = $923;
  $924 = HEAP32[$3>>2]|0;
  $925 = (($912) + ($924))|0;
  $926 = (($925) + ($921))|0;
  HEAP32[$3>>2] = $926;
  $927 = HEAP32[$4>>2]|0;
  $928 = (($912) + ($927))|0;
  HEAP32[$4>>2] = $928;
  $929 = HEAP32[$5>>2]|0;
  $930 = (($902) + ($929))|0;
  HEAP32[$5>>2] = $930;
  $931 = ($11|0)==(0);
  if ($931) {
   break;
  } else {
   $$0792801 = $435;$$0793800 = $923;$$0794799 = $926;$$0795798 = $928;$$0796797 = $930;$$0802 = $11;
  }
 }
 return;
}
function _MD5_Final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = ((($1)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 HEAP8[$5>>0] = -128;
 $6 = (($4) + 1)|0;
 $7 = ($6>>>0)>(56);
 if ($7) {
  $8 = (63 - ($4))|0;
  $9 = (($2) + ($6)|0);
  _memset(($9|0),0,($8|0))|0;
  _md5_block_data_order($1,$2,1);
  $$0 = 0;
 } else {
  $$0 = $6;
 }
 $10 = (($2) + ($$0)|0);
 $11 = (56 - ($$0))|0;
 _memset(($10|0),0,($11|0))|0;
 $12 = ((($1)) + 80|0);
 $13 = ((($1)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14&255;
 $16 = ((($12)) + 1|0);
 HEAP8[$12>>0] = $15;
 $17 = $14 >>> 8;
 $18 = $17&255;
 $19 = ((($12)) + 2|0);
 HEAP8[$16>>0] = $18;
 $20 = $14 >>> 16;
 $21 = $20&255;
 $22 = ((($12)) + 3|0);
 HEAP8[$19>>0] = $21;
 $23 = $14 >>> 24;
 $24 = $23&255;
 $25 = ((($1)) + 84|0);
 HEAP8[$22>>0] = $24;
 $26 = ((($1)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27&255;
 $29 = ((($25)) + 1|0);
 HEAP8[$25>>0] = $28;
 $30 = $27 >>> 8;
 $31 = $30&255;
 $32 = ((($25)) + 2|0);
 HEAP8[$29>>0] = $31;
 $33 = $27 >>> 16;
 $34 = $33&255;
 $35 = ((($25)) + 3|0);
 HEAP8[$32>>0] = $34;
 $36 = $27 >>> 24;
 $37 = $36&255;
 HEAP8[$35>>0] = $37;
 _md5_block_data_order($1,$2,1);
 HEAP32[$3>>2] = 0;
 _OPENSSL_cleanse($2,64);
 $38 = HEAP32[$1>>2]|0;
 $39 = $38&255;
 $40 = ((($0)) + 1|0);
 HEAP8[$0>>0] = $39;
 $41 = $38 >>> 8;
 $42 = $41&255;
 $43 = ((($0)) + 2|0);
 HEAP8[$40>>0] = $42;
 $44 = $38 >>> 16;
 $45 = $44&255;
 $46 = ((($0)) + 3|0);
 HEAP8[$43>>0] = $45;
 $47 = $38 >>> 24;
 $48 = $47&255;
 $49 = ((($0)) + 4|0);
 HEAP8[$46>>0] = $48;
 $50 = ((($1)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51&255;
 $53 = ((($0)) + 5|0);
 HEAP8[$49>>0] = $52;
 $54 = $51 >>> 8;
 $55 = $54&255;
 $56 = ((($0)) + 6|0);
 HEAP8[$53>>0] = $55;
 $57 = $51 >>> 16;
 $58 = $57&255;
 $59 = ((($0)) + 7|0);
 HEAP8[$56>>0] = $58;
 $60 = $51 >>> 24;
 $61 = $60&255;
 $62 = ((($0)) + 8|0);
 HEAP8[$59>>0] = $61;
 $63 = ((($1)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64&255;
 $66 = ((($0)) + 9|0);
 HEAP8[$62>>0] = $65;
 $67 = $64 >>> 8;
 $68 = $67&255;
 $69 = ((($0)) + 10|0);
 HEAP8[$66>>0] = $68;
 $70 = $64 >>> 16;
 $71 = $70&255;
 $72 = ((($0)) + 11|0);
 HEAP8[$69>>0] = $71;
 $73 = $64 >>> 24;
 $74 = $73&255;
 $75 = ((($0)) + 12|0);
 HEAP8[$72>>0] = $74;
 $76 = ((($1)) + 12|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77&255;
 $79 = ((($0)) + 13|0);
 HEAP8[$75>>0] = $78;
 $80 = $77 >>> 8;
 $81 = $80&255;
 $82 = ((($0)) + 14|0);
 HEAP8[$79>>0] = $81;
 $83 = $77 >>> 16;
 $84 = $83&255;
 $85 = ((($0)) + 15|0);
 HEAP8[$82>>0] = $84;
 $86 = $77 >>> 24;
 $87 = $86&255;
 HEAP8[$85>>0] = $87;
 return 1;
}
function _MD5_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 dest=$1; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$0>>2] = 1732584193;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = -271733879;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = -1732584194;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 271733878;
 return 1;
}
function _CRYPTO_free($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[585]|0;
 $4 = ($3|0)!=(0|0);
 $5 = ($3|0)!=(18|0);
 $or$cond = $4 & $5;
 if ($or$cond) {
  FUNCTION_TABLE_viii[$3 & 31]($0,$1,$2);
  return;
 } else {
  _free($0);
  return;
 }
}
function _CRYPTO_realloc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[584]|0;
 $5 = ($4|0)!=(0|0);
 $6 = ($4|0)!=(26|0);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (FUNCTION_TABLE_iiiii[$4 & 63]($0,$1,$2,$3)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $8 = ($0|0)==(0|0);
 if ($8) {
  $9 = HEAP32[583]|0;
  $10 = ($9|0)!=(0|0);
  $11 = ($9|0)!=(28|0);
  $or$cond$i = $10 & $11;
  if ($or$cond$i) {
   $12 = (FUNCTION_TABLE_iiii[$9 & 63]($1,$2,$3)|0);
   $$0 = $12;
   return ($$0|0);
  }
  $13 = ($1|0)==(0);
  if ($13) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[582] = 0;
  $14 = (_malloc($1)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ($1|0)==(0);
 if (!($15)) {
  HEAP32[582] = 0;
  $19 = (_realloc($0,$1)|0);
  $$0 = $19;
  return ($$0|0);
 }
 $16 = HEAP32[585]|0;
 $17 = ($16|0)!=(0|0);
 $18 = ($16|0)!=(18|0);
 $or$cond$i16 = $17 & $18;
 if ($or$cond$i16) {
  FUNCTION_TABLE_viii[$16 & 31]($0,$2,$3);
  $$0 = 0;
  return ($$0|0);
 } else {
  _free($0);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _CRYPTO_malloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[583]|0;
 $4 = ($3|0)!=(0|0);
 $5 = ($3|0)!=(28|0);
 $or$cond = $4 & $5;
 if ($or$cond) {
  $6 = (FUNCTION_TABLE_iiii[$3 & 63]($0,$1,$2)|0);
  $$0 = $6;
  return ($$0|0);
 }
 $7 = ($0|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[582] = 0;
 $8 = (_malloc($0)|0);
 $$0 = $8;
 return ($$0|0);
}
function _CRYPTO_zalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i7 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[583]|0;
 $4 = ($3|0)!=(0|0);
 $5 = ($3|0)!=(28|0);
 $or$cond$i = $4 & $5;
 do {
  if ($or$cond$i) {
   $6 = (FUNCTION_TABLE_iiii[$3 & 63]($0,$1,$2)|0);
   $$0$i = $6;
  } else {
   $7 = ($0|0)==(0);
   if ($7) {
    $$0$i7 = 0;
    return ($$0$i7|0);
   } else {
    HEAP32[582] = 0;
    $8 = (_malloc($0)|0);
    $$0$i = $8;
    break;
   }
  }
 } while(0);
 $9 = ($$0$i|0)==(0|0);
 if ($9) {
  $$0$i7 = 0;
  return ($$0$i7|0);
 }
 _memset(($$0$i|0),0,($0|0))|0;
 $$0$i7 = $$0$i;
 return ($$0$i7|0);
}
function _CRYPTO_clear_realloc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i29 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i31 = 0, $or$cond$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 if ($5) {
  $6 = HEAP32[583]|0;
  $7 = ($6|0)!=(0|0);
  $8 = ($6|0)!=(28|0);
  $or$cond$i = $7 & $8;
  if ($or$cond$i) {
   $9 = (FUNCTION_TABLE_iiii[$6 & 63]($2,$3,$4)|0);
   $$0 = $9;
   return ($$0|0);
  }
  $10 = ($2|0)==(0);
  if ($10) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[582] = 0;
  $11 = (_malloc($2)|0);
  $$0 = $11;
  return ($$0|0);
 }
 $12 = ($2|0)==(0);
 if ($12) {
  $13 = ($1|0)==(0);
  if (!($13)) {
   _OPENSSL_cleanse($0,$1);
  }
  $14 = HEAP32[585]|0;
  $15 = ($14|0)!=(0|0);
  $16 = ($14|0)!=(18|0);
  $or$cond$i$i = $15 & $16;
  if ($or$cond$i$i) {
   FUNCTION_TABLE_viii[$14 & 31]($0,$3,$4);
   $$0 = 0;
   return ($$0|0);
  } else {
   _free($0);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $17 = ($1>>>0)>($2>>>0);
 if ($17) {
  $18 = (($0) + ($2)|0);
  $19 = (($1) - ($2))|0;
  _OPENSSL_cleanse($18,$19);
  $$0 = $0;
  return ($$0|0);
 }
 $20 = HEAP32[583]|0;
 $21 = ($20|0)!=(0|0);
 $22 = ($20|0)!=(28|0);
 $or$cond$i28 = $21 & $22;
 if ($or$cond$i28) {
  $23 = (FUNCTION_TABLE_iiii[$20 & 63]($2,$3,$4)|0);
  $$0$i29 = $23;
 } else {
  HEAP32[582] = 0;
  $24 = (_malloc($2)|0);
  $$0$i29 = $24;
 }
 $25 = ($$0$i29|0)==(0|0);
 if ($25) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($$0$i29|0),($0|0),($1|0))|0;
 $26 = ($1|0)==(0);
 if (!($26)) {
  _OPENSSL_cleanse($0,$1);
 }
 $27 = HEAP32[585]|0;
 $28 = ($27|0)!=(0|0);
 $29 = ($27|0)!=(18|0);
 $or$cond$i$i31 = $28 & $29;
 if ($or$cond$i$i31) {
  FUNCTION_TABLE_viii[$27 & 31]($0,$3,$4);
  $$0 = $$0$i29;
  return ($$0|0);
 } else {
  _free($0);
  $$0 = $$0$i29;
  return ($$0|0);
 }
 return (0)|0;
}
function _CRYPTO_clear_free($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ($1|0)==(0);
 if (!($5)) {
  _OPENSSL_cleanse($0,$1);
 }
 $6 = HEAP32[585]|0;
 $7 = ($6|0)!=(0|0);
 $8 = ($6|0)!=(18|0);
 $or$cond$i = $7 & $8;
 if ($or$cond$i) {
  FUNCTION_TABLE_viii[$6 & 31]($0,$2,$3);
  return;
 } else {
  _free($0);
  return;
 }
}
function _OPENSSL_cleanse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[586]|0;
 (FUNCTION_TABLE_iiii[$2 & 63]($0,0,$1)|0);
 return;
}
function _CRYPTO_mem_ctrl($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _sh_setbit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)>(-1);
 $4 = HEAP32[(81540)>>2]|0;
 $5 = ($4|0)>($1|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  _OPENSSL_die(48732,83252,0);
  // unreachable;
 }
 $6 = HEAP32[(81528)>>2]|0;
 $7 = $0;
 $8 = (($7) - ($6))|0;
 $9 = HEAP32[(81532)>>2]|0;
 $10 = $9 >>> $1;
 $11 = (($10) + -1)|0;
 $12 = $11 & $8;
 $13 = ($12|0)==(0);
 if (!($13)) {
  _OPENSSL_die(48787,83252,0);
  // unreachable;
 }
 $14 = 1 << $1;
 $15 = (($8>>>0) / ($10>>>0))&-1;
 $16 = (($15) + ($14))|0;
 $17 = ($16|0)!=(0);
 $18 = HEAP32[(81556)>>2]|0;
 $19 = ($16>>>0)<($18>>>0);
 $or$cond17 = $17 & $19;
 if (!($or$cond17)) {
  _OPENSSL_die(48861,83252,0);
  // unreachable;
 }
 $20 = $16 >>> 3;
 $21 = (($2) + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $16 & 7;
 $25 = 1 << $24;
 $26 = $23 & $25;
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = $23 | $25;
  $29 = $28&255;
  HEAP8[$21>>0] = $29;
  return;
 } else {
  _OPENSSL_die(48913,83252,0);
  // unreachable;
 }
}
function _sh_add_to_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[(81536)>>2]|0;
 $3 = ($2>>>0)>($0>>>0);
 if ($3) {
  _OPENSSL_die(48537,83252,0);
  // unreachable;
 }
 $4 = HEAP32[(81540)>>2]|0;
 $5 = (($2) + ($4<<2)|0);
 $6 = ($5>>>0)>($0>>>0);
 if (!($6)) {
  _OPENSSL_die(48537,83252,0);
  // unreachable;
 }
 $7 = HEAP32[(81528)>>2]|0;
 $8 = ($7>>>0)>($1>>>0);
 if ($8) {
  _OPENSSL_die(48577,83252,0);
  // unreachable;
 }
 $9 = HEAP32[(81532)>>2]|0;
 $10 = (($7) + ($9)|0);
 $11 = ($10>>>0)>($1>>>0);
 if (!($11)) {
  _OPENSSL_die(48577,83252,0);
  // unreachable;
 }
 $12 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $12;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = ((($1)) + 4|0);
  HEAP32[$14>>2] = $0;
  HEAP32[$0>>2] = $1;
  return;
 }
 $15 = ($12>>>0)>=($7>>>0);
 $16 = ($12>>>0)<($10>>>0);
 $or$cond = $15 & $16;
 if (!($or$cond)) {
  _OPENSSL_die(48613,83252,0);
  // unreachable;
 }
 $17 = ((($1)) + 4|0);
 HEAP32[$17>>2] = $0;
 $18 = ((($12)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==($0|0);
 if (!($20)) {
  _OPENSSL_die(48678,83252,0);
  // unreachable;
 }
 HEAP32[$18>>2] = $1;
 HEAP32[$0>>2] = $1;
 return;
}
function _CRYPTO_secure_malloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i = 0, $$0 = 0, $$0$i12 = 0, $$010$i = 0, $$010$lcssa$i = 0, $$01012$i = 0, $$01014$i = 0, $$013$i = 0, $$061$i = 0, $$06295$i = 0, $$063$i = 0, $$063$in$i = 0, $$1$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i73$i = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond$i = 0, $or$cond$i64$i = 0, $or$cond14$i = 0, $or$cond14$i$i = 0, $or$cond14$i65$i = 0, $or$cond14$i68$i = 0, $or$cond14$i71$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[20378]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_CRYPTO_malloc($0,$1,$2)|0);
  $$0 = $5;
  return ($$0|0);
 }
 $6 = HEAP32[20379]|0;
 (_CRYPTO_THREAD_write_lock($6)|0);
 $7 = HEAP32[(81532)>>2]|0;
 $8 = ($7>>>0)<($0>>>0);
 L5: do {
  if ($8) {
   $$0$i12 = 0;$264 = 0;
  } else {
   $9 = HEAP32[(81540)>>2]|0;
   $10 = HEAP32[(81544)>>2]|0;
   $$061$i = $10;$$063$in$i = $9;
   while(1) {
    $$063$i = (($$063$in$i) + -1)|0;
    $11 = ($$061$i>>>0)<($0>>>0);
    $12 = $$061$i << 1;
    if ($11) {
     $$061$i = $12;$$063$in$i = $$063$i;
    } else {
     break;
    }
   }
   $13 = ($$063$in$i|0)>(0);
   if ($13) {
    $14 = HEAP32[(81536)>>2]|0;
    $$06295$i = $$063$i;
    while(1) {
     $15 = (($14) + ($$06295$i<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0|0);
     if (!($17)) {
      break;
     }
     $19 = (($$06295$i) + -1)|0;
     $20 = ($$06295$i|0)>(0);
     if ($20) {
      $$06295$i = $19;
     } else {
      $$0$i12 = 0;$264 = 0;
      break L5;
     }
    }
    $18 = ($$06295$i|0)>(-2);
    $$1$i = $$06295$i;$168 = $14;$26 = $16;$30 = $7;
    L15: while(1) {
     $21 = ($$1$i|0)==($$063$i|0);
     if ($21) {
      label = 55;
      break;
     }
     $22 = HEAP32[(81552)>>2]|0;
     $23 = HEAP32[(81540)>>2]|0;
     $24 = ($23|0)>($$1$i|0);
     if (!($24)) {
      label = 13;
      break;
     }
     $25 = HEAP32[(81528)>>2]|0;
     $27 = $26;
     $28 = (($27) - ($25))|0;
     $29 = $30 >>> $$1$i;
     $31 = (($29) + -1)|0;
     $32 = $28 & $31;
     $33 = ($32|0)==(0);
     if (!($33)) {
      label = 15;
      break;
     }
     $34 = 1 << $$1$i;
     $35 = (($28>>>0) / ($29>>>0))&-1;
     $36 = (($35) + ($34))|0;
     $37 = ($36|0)!=(0);
     $38 = HEAP32[(81556)>>2]|0;
     $39 = ($36>>>0)<($38>>>0);
     $or$cond14$i$i = $37 & $39;
     if (!($or$cond14$i$i)) {
      label = 17;
      break;
     }
     $40 = $36 >>> 3;
     $41 = (($22) + ($40)|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42&255;
     $44 = $36 & 7;
     $45 = 1 << $44;
     $46 = $43 & $45;
     $47 = ($46|0)==(0);
     if (!($47)) {
      label = 19;
      break;
     }
     $48 = HEAP32[(81548)>>2]|0;
     _sh_clearbit($26,$$1$i,$48);
     $49 = HEAP32[$26>>2]|0;
     $50 = ($49|0)==(0|0);
     $$pre$i$i = ((($26)) + 4|0);
     if (!($50)) {
      $51 = HEAP32[$$pre$i$i>>2]|0;
      $52 = ((($49)) + 4|0);
      HEAP32[$52>>2] = $51;
     }
     $53 = HEAP32[$$pre$i$i>>2]|0;
     HEAP32[$53>>2] = $49;
     $54 = HEAP32[$26>>2]|0;
     $55 = ($54|0)==(0|0);
     do {
      if ($55) {
       $$pre$i = HEAP32[(81536)>>2]|0;
       $69 = $$pre$i;
      } else {
       $56 = ((($54)) + 4|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = HEAP32[(81536)>>2]|0;
       $59 = ($57>>>0)<($58>>>0);
       if (!($59)) {
        $60 = HEAP32[(81540)>>2]|0;
        $61 = (($58) + ($60<<2)|0);
        $62 = ($57>>>0)<($61>>>0);
        if ($62) {
         $69 = $58;
         break;
        }
       }
       $63 = HEAP32[(81528)>>2]|0;
       $64 = ($57>>>0)<($63>>>0);
       if ($64) {
        label = 28;
        break L15;
       }
       $65 = HEAP32[(81532)>>2]|0;
       $66 = (($63) + ($65)|0);
       $67 = ($57>>>0)<($66>>>0);
       if ($67) {
        $69 = $58;
       } else {
        label = 28;
        break L15;
       }
      }
     } while(0);
     $68 = (($69) + ($$1$i<<2)|0);
     $70 = HEAP32[$68>>2]|0;
     $71 = ($26|0)==($70|0);
     if ($71) {
      label = 30;
      break;
     }
     $72 = (($$1$i) + 1)|0;
     $73 = HEAP32[(81552)>>2]|0;
     $74 = HEAP32[(81540)>>2]|0;
     $75 = ($74|0)>($72|0);
     $or$cond$i64$i = $18 & $75;
     if (!($or$cond$i64$i)) {
      label = 32;
      break;
     }
     $76 = HEAP32[(81528)>>2]|0;
     $77 = (($27) - ($76))|0;
     $78 = HEAP32[(81532)>>2]|0;
     $79 = $78 >>> $72;
     $80 = (($79) + -1)|0;
     $81 = $80 & $77;
     $82 = ($81|0)==(0);
     if (!($82)) {
      label = 34;
      break;
     }
     $83 = 1 << $72;
     $84 = (($77>>>0) / ($79>>>0))&-1;
     $85 = (($84) + ($83))|0;
     $86 = ($85|0)!=(0);
     $87 = HEAP32[(81556)>>2]|0;
     $88 = ($85>>>0)<($87>>>0);
     $or$cond14$i65$i = $86 & $88;
     if (!($or$cond14$i65$i)) {
      label = 36;
      break;
     }
     $89 = $85 >>> 3;
     $90 = (($73) + ($89)|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = $85 & 7;
     $94 = 1 << $93;
     $95 = $92 & $94;
     $96 = ($95|0)==(0);
     if (!($96)) {
      label = 38;
      break;
     }
     $97 = HEAP32[(81548)>>2]|0;
     _sh_setbit($26,$72,$97);
     $98 = HEAP32[(81536)>>2]|0;
     $99 = (($98) + ($72<<2)|0);
     _sh_add_to_list($99,$26);
     $100 = HEAP32[(81536)>>2]|0;
     $101 = (($100) + ($72<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==($26|0);
     if (!($103)) {
      label = 40;
      break;
     }
     $104 = HEAP32[(81532)>>2]|0;
     $105 = $104 >>> $72;
     $106 = (($26) + ($105)|0);
     $107 = HEAP32[(81552)>>2]|0;
     $108 = HEAP32[(81540)>>2]|0;
     $109 = ($108|0)>($72|0);
     if (!($109)) {
      label = 42;
      break;
     }
     $110 = HEAP32[(81528)>>2]|0;
     $111 = $106;
     $112 = (($111) - ($110))|0;
     $113 = (($105) + -1)|0;
     $114 = $112 & $113;
     $115 = ($114|0)==(0);
     if (!($115)) {
      label = 44;
      break;
     }
     $116 = (($112>>>0) / ($105>>>0))&-1;
     $117 = (($116) + ($83))|0;
     $118 = ($117|0)!=(0);
     $119 = HEAP32[(81556)>>2]|0;
     $120 = ($117>>>0)<($119>>>0);
     $or$cond14$i68$i = $118 & $120;
     if (!($or$cond14$i68$i)) {
      label = 46;
      break;
     }
     $121 = $117 >>> 3;
     $122 = (($107) + ($121)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = $117 & 7;
     $126 = 1 << $125;
     $127 = $124 & $126;
     $128 = ($127|0)==(0);
     if (!($128)) {
      label = 48;
      break;
     }
     $129 = HEAP32[(81548)>>2]|0;
     _sh_setbit($106,$72,$129);
     $130 = HEAP32[(81536)>>2]|0;
     $131 = (($130) + ($72<<2)|0);
     _sh_add_to_list($131,$106);
     $132 = HEAP32[(81536)>>2]|0;
     $133 = (($132) + ($72<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($134|0)==($106|0);
     if (!($135)) {
      label = 50;
      break;
     }
     $136 = HEAP32[(81532)>>2]|0;
     $137 = $136 >>> $72;
     $138 = (0 - ($137))|0;
     $139 = (($106) + ($138)|0);
     $140 = HEAP32[(81528)>>2]|0;
     $141 = $140;
     $142 = (($111) - ($141))|0;
     $143 = (($142>>>0) / ($137>>>0))&-1;
     $144 = (($143) + ($83))|0;
     $145 = $144 ^ 1;
     $146 = HEAP32[(81548)>>2]|0;
     $147 = $144 >>> 3;
     $148 = (($146) + ($147)|0);
     $149 = HEAP8[$148>>0]|0;
     $150 = $149&255;
     $151 = $145 & 7;
     $152 = 1 << $151;
     $153 = $152 & $150;
     $154 = ($153|0)==(0);
     if ($154) {
      $166 = 0;
     } else {
      $155 = HEAP32[(81552)>>2]|0;
      $156 = (($155) + ($147)|0);
      $157 = HEAP8[$156>>0]|0;
      $158 = $157&255;
      $159 = $158 & $152;
      $160 = ($159|0)==(0);
      $161 = (($83) + -1)|0;
      $162 = $145 & $161;
      $163 = Math_imul($162, $137)|0;
      $164 = (($140) + ($163)|0);
      $$$i$i = $160 ? $164 : 0;
      $166 = $$$i$i;
     }
     $165 = ($139|0)==($166|0);
     if ($165) {
      $$1$i = $72;$168 = $132;$26 = $106;$30 = $136;
     } else {
      label = 54;
      break;
     }
    }
    switch (label|0) {
     case 13: {
      _OPENSSL_die(48732,83252,0);
      // unreachable;
      break;
     }
     case 15: {
      _OPENSSL_die(48787,83252,0);
      // unreachable;
      break;
     }
     case 17: {
      _OPENSSL_die(48861,83252,0);
      // unreachable;
      break;
     }
     case 19: {
      _OPENSSL_die(48952,83252,0);
      // unreachable;
      break;
     }
     case 28: {
      _OPENSSL_die(49009,83252,0);
      // unreachable;
      break;
     }
     case 30: {
      _OPENSSL_die(49089,83252,0);
      // unreachable;
      break;
     }
     case 32: {
      _OPENSSL_die(48732,83252,0);
      // unreachable;
      break;
     }
     case 34: {
      _OPENSSL_die(48787,83252,0);
      // unreachable;
      break;
     }
     case 36: {
      _OPENSSL_die(48861,83252,0);
      // unreachable;
      break;
     }
     case 38: {
      _OPENSSL_die(48952,83252,0);
      // unreachable;
      break;
     }
     case 40: {
      _OPENSSL_die(49134,83252,0);
      // unreachable;
      break;
     }
     case 42: {
      _OPENSSL_die(48732,83252,0);
      // unreachable;
      break;
     }
     case 44: {
      _OPENSSL_die(48787,83252,0);
      // unreachable;
      break;
     }
     case 46: {
      _OPENSSL_die(48861,83252,0);
      // unreachable;
      break;
     }
     case 48: {
      _OPENSSL_die(48952,83252,0);
      // unreachable;
      break;
     }
     case 50: {
      _OPENSSL_die(49134,83252,0);
      // unreachable;
      break;
     }
     case 54: {
      _OPENSSL_die(49179,83252,0);
      // unreachable;
      break;
     }
     case 55: {
      $167 = (($168) + ($$063$i<<2)|0);
      $169 = HEAP32[$167>>2]|0;
      $170 = HEAP32[(81548)>>2]|0;
      $171 = HEAP32[(81540)>>2]|0;
      $172 = ($171|0)<($$063$in$i|0);
      if ($172) {
       _OPENSSL_die(48732,83252,0);
       // unreachable;
      }
      $173 = HEAP32[(81528)>>2]|0;
      $174 = $169;
      $175 = (($174) - ($173))|0;
      $176 = $30 >>> $$063$i;
      $177 = (($176) + -1)|0;
      $178 = $175 & $177;
      $179 = ($178|0)==(0);
      if (!($179)) {
       _OPENSSL_die(48787,83252,0);
       // unreachable;
      }
      $180 = 1 << $$063$i;
      $181 = (($175>>>0) / ($176>>>0))&-1;
      $182 = (($181) + ($180))|0;
      $183 = ($182|0)!=(0);
      $184 = HEAP32[(81556)>>2]|0;
      $185 = ($182>>>0)<($184>>>0);
      $or$cond14$i71$i = $183 & $185;
      if (!($or$cond14$i71$i)) {
       _OPENSSL_die(48861,83252,0);
       // unreachable;
      }
      $186 = $182 >>> 3;
      $187 = (($170) + ($186)|0);
      $188 = HEAP8[$187>>0]|0;
      $189 = $188&255;
      $190 = $182 & 7;
      $191 = 1 << $190;
      $192 = $189 & $191;
      $193 = ($192|0)==(0);
      if ($193) {
       _OPENSSL_die(49260,83252,0);
       // unreachable;
      }
      $194 = HEAP32[(81552)>>2]|0;
      _sh_setbit($169,$$063$i,$194);
      $195 = HEAP32[$169>>2]|0;
      $196 = ($195|0)==(0|0);
      $$pre$i73$i = ((($169)) + 4|0);
      if (!($196)) {
       $197 = HEAP32[$$pre$i73$i>>2]|0;
       $198 = ((($195)) + 4|0);
       HEAP32[$198>>2] = $197;
      }
      $199 = HEAP32[$$pre$i73$i>>2]|0;
      HEAP32[$199>>2] = $195;
      $200 = HEAP32[$169>>2]|0;
      $201 = ($200|0)==(0|0);
      do {
       if (!($201)) {
        $202 = ((($200)) + 4|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = HEAP32[(81536)>>2]|0;
        $205 = ($203>>>0)<($204>>>0);
        if (!($205)) {
         $206 = HEAP32[(81540)>>2]|0;
         $207 = (($204) + ($206<<2)|0);
         $208 = ($203>>>0)<($207>>>0);
         if ($208) {
          break;
         }
        }
        $209 = HEAP32[(81528)>>2]|0;
        $210 = ($203>>>0)<($209>>>0);
        if ($210) {
         _OPENSSL_die(49009,83252,0);
         // unreachable;
        }
        $211 = HEAP32[(81532)>>2]|0;
        $212 = (($209) + ($211)|0);
        $213 = ($203>>>0)<($212>>>0);
        if (!($213)) {
         _OPENSSL_die(49009,83252,0);
         // unreachable;
        }
       }
      } while(0);
      $214 = HEAP32[(81528)>>2]|0;
      $215 = ($169>>>0)<($214>>>0);
      $216 = $214;
      if ($215) {
       _OPENSSL_die(49315,83252,0);
       // unreachable;
      }
      $217 = HEAP32[(81532)>>2]|0;
      $218 = (($214) + ($217)|0);
      $219 = ($169>>>0)<($218>>>0);
      if (!($219)) {
       _OPENSSL_die(49315,83252,0);
       // unreachable;
      }
      $220 = HEAP32[(81540)>>2]|0;
      $221 = (($169) + ($217)|0);
      $222 = $221;
      $223 = (($222) - ($216))|0;
      $224 = HEAP32[(81544)>>2]|0;
      $$01012$i = (($220) + -1)|0;
      $225 = ($224>>>0)>($223>>>0);
      L80: do {
       if ($225) {
        $$pre = HEAP32[(81548)>>2]|0;
        $$010$lcssa$i = $$01012$i;$255 = $$pre;
       } else {
        $226 = (($223>>>0) / ($224>>>0))&-1;
        $227 = HEAP32[(81548)>>2]|0;
        $$01014$i = $$01012$i;$$013$i = $226;
        while(1) {
         $230 = $$013$i >>> 3;
         $231 = (($227) + ($230)|0);
         $232 = HEAP8[$231>>0]|0;
         $233 = $232&255;
         $234 = $$013$i & 7;
         $235 = 1 << $234;
         $236 = $233 & $235;
         $237 = ($236|0)==(0);
         if (!($237)) {
          $$010$lcssa$i = $$01014$i;$255 = $227;
          break L80;
         }
         $238 = $$013$i & 1;
         $239 = ($238|0)==(0);
         $228 = $$013$i >>> 1;
         if (!($239)) {
          break;
         }
         $$010$i = (($$01014$i) + -1)|0;
         $229 = ($228|0)==(0);
         if ($229) {
          $$010$lcssa$i = $$010$i;$255 = $227;
          break L80;
         } else {
          $$01014$i = $$010$i;$$013$i = $228;
         }
        }
        _OPENSSL_die(49353,83252,0);
        // unreachable;
       }
      } while(0);
      $240 = ($$010$lcssa$i|0)>(-1);
      $241 = ($220|0)>($$010$lcssa$i|0);
      $or$cond$i = $240 & $241;
      if (!($or$cond$i)) {
       _OPENSSL_die(48732,83252,0);
       // unreachable;
      }
      $242 = (($174) - ($216))|0;
      $243 = $217 >>> $$010$lcssa$i;
      $244 = (($243) + -1)|0;
      $245 = $244 & $242;
      $246 = ($245|0)==(0);
      if (!($246)) {
       _OPENSSL_die(48787,83252,0);
       // unreachable;
      }
      $247 = 1 << $$010$lcssa$i;
      $248 = (($242>>>0) / ($243>>>0))&-1;
      $249 = (($248) + ($247))|0;
      $250 = ($249|0)!=(0);
      $251 = HEAP32[(81556)>>2]|0;
      $252 = ($249>>>0)<($251>>>0);
      $or$cond14$i = $250 & $252;
      if (!($or$cond14$i)) {
       _OPENSSL_die(48861,83252,0);
       // unreachable;
      }
      $253 = $249 >>> 3;
      $254 = (($255) + ($253)|0);
      $256 = HEAP8[$254>>0]|0;
      $257 = $256&255;
      $258 = $249 & 7;
      $259 = 1 << $258;
      $260 = $257 & $259;
      $261 = ($260|0)==(0);
      if (!($261)) {
       $$0$i12 = $169;$264 = $243;
       break L5;
      }
      _OPENSSL_die(49386,83252,0);
      // unreachable;
      break;
     }
    }
   } else {
    $$0$i12 = 0;$264 = 0;
   }
  }
 } while(0);
 $262 = HEAP32[20390]|0;
 $263 = (($262) + ($264))|0;
 HEAP32[20390] = $263;
 $265 = HEAP32[20379]|0;
 (_CRYPTO_THREAD_unlock($265)|0);
 $$0 = $$0$i12;
 return ($$0|0);
}
function _sh_clearbit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)>(-1);
 $4 = HEAP32[(81540)>>2]|0;
 $5 = ($4|0)>($1|0);
 $or$cond = $3 & $5;
 if (!($or$cond)) {
  _OPENSSL_die(48732,83252,0);
  // unreachable;
 }
 $6 = HEAP32[(81528)>>2]|0;
 $7 = $0;
 $8 = (($7) - ($6))|0;
 $9 = HEAP32[(81532)>>2]|0;
 $10 = $9 >>> $1;
 $11 = (($10) + -1)|0;
 $12 = $11 & $8;
 $13 = ($12|0)==(0);
 if (!($13)) {
  _OPENSSL_die(48787,83252,0);
  // unreachable;
 }
 $14 = 1 << $1;
 $15 = (($8>>>0) / ($10>>>0))&-1;
 $16 = (($15) + ($14))|0;
 $17 = ($16|0)!=(0);
 $18 = HEAP32[(81556)>>2]|0;
 $19 = ($16>>>0)<($18>>>0);
 $or$cond17 = $17 & $19;
 if (!($or$cond17)) {
  _OPENSSL_die(48861,83252,0);
  // unreachable;
 }
 $20 = $16 >>> 3;
 $21 = (($2) + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $16 & 7;
 $25 = 1 << $24;
 $26 = $23 & $25;
 $27 = ($26|0)==(0);
 if ($27) {
  _OPENSSL_die(49439,83252,0);
  // unreachable;
 } else {
  $28 = $25 ^ 255;
  $29 = $23 & $28;
  $30 = $29&255;
  HEAP8[$21>>0] = $30;
  return;
 }
}
function _CRYPTO_secure_zalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_CRYPTO_secure_malloc($0,$1,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  return ($3|0);
 }
 _memset(($3|0),0,($0|0))|0;
 return ($3|0);
}
function _CRYPTO_secure_free($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0$i = 0, $$$i43$i = 0, $$0$i10 = 0, $$010$i = 0, $$010$i$i = 0, $$010$lcssa$i = 0, $$010$lcssa$i$i = 0, $$01012$i = 0, $$01012$i$i = 0, $$01014$i = 0, $$01014$i$i = 0, $$013$i = 0, $$013$i$i = 0, $$042$i = 0, $$demorgan = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i51$i = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i11 = 0, $or$cond$i54$i = 0, $or$cond14$i = 0, $or$cond14$i$i = 0;
 var $or$cond14$i46$i = 0, $or$cond14$i49$i = 0, $or$cond14$i55$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[20378]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP32[20379]|0;
  (_CRYPTO_THREAD_write_lock($6)|0);
  $7 = HEAP32[(81528)>>2]|0;
  $8 = HEAP32[(81532)>>2]|0;
  $9 = (($7) + ($8)|0);
  $10 = ($9>>>0)>($0>>>0);
  $not$$i$i = ($7>>>0)<=($0>>>0);
  $11 = HEAP32[20379]|0;
  (_CRYPTO_THREAD_unlock($11)|0);
  $$demorgan = $not$$i$i & $10;
  if ($$demorgan) {
   $12 = HEAP32[20379]|0;
   (_CRYPTO_THREAD_write_lock($12)|0);
   $13 = HEAP32[(81528)>>2]|0;
   $14 = ($13>>>0)>($0>>>0);
   $15 = $13;
   if ($14) {
    _OPENSSL_die(48577,83252,0);
    // unreachable;
   }
   $16 = HEAP32[(81532)>>2]|0;
   $17 = (($13) + ($16)|0);
   $18 = ($17>>>0)>($0>>>0);
   if (!($18)) {
    _OPENSSL_die(48577,83252,0);
    // unreachable;
   }
   $19 = HEAP32[(81540)>>2]|0;
   $20 = (($0) + ($16)|0);
   $21 = $20;
   $22 = (($21) - ($15))|0;
   $23 = HEAP32[(81544)>>2]|0;
   $$01012$i = (($19) + -1)|0;
   $24 = ($23>>>0)>($22>>>0);
   L13: do {
    if ($24) {
     $$pre = HEAP32[(81548)>>2]|0;
     $$010$lcssa$i = $$01012$i;$55 = $$pre;
    } else {
     $25 = (($22>>>0) / ($23>>>0))&-1;
     $26 = HEAP32[(81548)>>2]|0;
     $$01014$i = $$01012$i;$$013$i = $25;
     while(1) {
      $29 = $$013$i >>> 3;
      $30 = (($26) + ($29)|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = $31&255;
      $33 = $$013$i & 7;
      $34 = 1 << $33;
      $35 = $32 & $34;
      $36 = ($35|0)==(0);
      if (!($36)) {
       $$010$lcssa$i = $$01014$i;$55 = $26;
       break L13;
      }
      $37 = $$013$i & 1;
      $38 = ($37|0)==(0);
      $27 = $$013$i >>> 1;
      if (!($38)) {
       break;
      }
      $$010$i = (($$01014$i) + -1)|0;
      $28 = ($27|0)==(0);
      if ($28) {
       $$010$lcssa$i = $$010$i;$55 = $26;
       break L13;
      } else {
       $$01014$i = $$010$i;$$013$i = $27;
      }
     }
     _OPENSSL_die(49353,83252,0);
     // unreachable;
    }
   } while(0);
   $39 = ($$010$lcssa$i|0)>(-1);
   $40 = ($19|0)>($$010$lcssa$i|0);
   $or$cond$i11 = $39 & $40;
   if (!($or$cond$i11)) {
    _OPENSSL_die(48732,83252,0);
    // unreachable;
   }
   $41 = $0;
   $42 = (($41) - ($15))|0;
   $43 = $16 >>> $$010$lcssa$i;
   $44 = (($43) + -1)|0;
   $45 = $44 & $42;
   $46 = ($45|0)==(0);
   if (!($46)) {
    _OPENSSL_die(48787,83252,0);
    // unreachable;
   }
   $47 = 1 << $$010$lcssa$i;
   $48 = (($42>>>0) / ($43>>>0))&-1;
   $49 = (($48) + ($47))|0;
   $50 = ($49|0)!=(0);
   $51 = HEAP32[(81556)>>2]|0;
   $52 = ($49>>>0)<($51>>>0);
   $or$cond14$i = $50 & $52;
   if (!($or$cond14$i)) {
    _OPENSSL_die(48861,83252,0);
    // unreachable;
   }
   $53 = $49 >>> 3;
   $54 = (($55) + ($53)|0);
   $56 = HEAP8[$54>>0]|0;
   $57 = $56&255;
   $58 = $49 & 7;
   $59 = 1 << $58;
   $60 = $57 & $59;
   $61 = ($60|0)==(0);
   if ($61) {
    _OPENSSL_die(49386,83252,0);
    // unreachable;
   }
   _OPENSSL_cleanse($0,$43);
   $62 = HEAP32[20390]|0;
   $63 = (($62) - ($43))|0;
   HEAP32[20390] = $63;
   $64 = HEAP32[(81528)>>2]|0;
   $65 = ($64>>>0)>($0>>>0);
   $66 = $64;
   if ($65) {
    _OPENSSL_die(48577,83252,0);
    // unreachable;
   }
   $67 = HEAP32[(81532)>>2]|0;
   $68 = (($64) + ($67)|0);
   $69 = ($68>>>0)>($0>>>0);
   if (!($69)) {
    _OPENSSL_die(48577,83252,0);
    // unreachable;
   }
   $70 = HEAP32[(81540)>>2]|0;
   $71 = (($0) + ($67)|0);
   $72 = $71;
   $73 = (($72) - ($66))|0;
   $74 = HEAP32[(81544)>>2]|0;
   $$01012$i$i = (($70) + -1)|0;
   $75 = ($74>>>0)>($73>>>0);
   L40: do {
    if ($75) {
     $$pre$i = HEAP32[(81548)>>2]|0;
     $$010$lcssa$i$i = $$01012$i$i;$105 = $$pre$i;
    } else {
     $76 = (($73>>>0) / ($74>>>0))&-1;
     $77 = HEAP32[(81548)>>2]|0;
     $$01014$i$i = $$01012$i$i;$$013$i$i = $76;
     while(1) {
      $80 = $$013$i$i >>> 3;
      $81 = (($77) + ($80)|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = $82&255;
      $84 = $$013$i$i & 7;
      $85 = 1 << $84;
      $86 = $83 & $85;
      $87 = ($86|0)==(0);
      if (!($87)) {
       $$010$lcssa$i$i = $$01014$i$i;$105 = $77;
       break L40;
      }
      $88 = $$013$i$i & 1;
      $89 = ($88|0)==(0);
      $78 = $$013$i$i >>> 1;
      if (!($89)) {
       break;
      }
      $$010$i$i = (($$01014$i$i) + -1)|0;
      $79 = ($78|0)==(0);
      if ($79) {
       $$010$lcssa$i$i = $$010$i$i;$105 = $77;
       break L40;
      } else {
       $$01014$i$i = $$010$i$i;$$013$i$i = $78;
      }
     }
     _OPENSSL_die(49353,83252,0);
     // unreachable;
    }
   } while(0);
   $90 = ($$010$lcssa$i$i|0)>(-1);
   $91 = ($70|0)>($$010$lcssa$i$i|0);
   $or$cond$i$i = $90 & $91;
   if (!($or$cond$i$i)) {
    _OPENSSL_die(48732,83252,0);
    // unreachable;
   }
   $92 = (($41) - ($66))|0;
   $93 = $67 >>> $$010$lcssa$i$i;
   $94 = (($93) + -1)|0;
   $95 = $94 & $92;
   $96 = ($95|0)==(0);
   if (!($96)) {
    _OPENSSL_die(48787,83252,0);
    // unreachable;
   }
   $97 = 1 << $$010$lcssa$i$i;
   $98 = (($92>>>0) / ($93>>>0))&-1;
   $99 = (($98) + ($97))|0;
   $100 = ($99|0)!=(0);
   $101 = HEAP32[(81556)>>2]|0;
   $102 = ($99>>>0)<($101>>>0);
   $or$cond14$i$i = $100 & $102;
   if (!($or$cond14$i$i)) {
    _OPENSSL_die(48861,83252,0);
    // unreachable;
   }
   $103 = $99 >>> 3;
   $104 = (($105) + ($103)|0);
   $106 = HEAP8[$104>>0]|0;
   $107 = $106&255;
   $108 = $99 & 7;
   $109 = 1 << $108;
   $110 = $107 & $109;
   $111 = ($110|0)==(0);
   if ($111) {
    _OPENSSL_die(49386,83252,0);
    // unreachable;
   }
   $112 = HEAP32[(81552)>>2]|0;
   _sh_clearbit($0,$$010$lcssa$i$i,$112);
   $113 = HEAP32[(81536)>>2]|0;
   $114 = (($113) + ($$010$lcssa$i$i<<2)|0);
   _sh_add_to_list($114,$0);
   $$0$i10 = $0;$$042$i = $$010$lcssa$i$i;
   L61: while(1) {
    $115 = 1 << $$042$i;
    $116 = HEAP32[(81528)>>2]|0;
    $117 = $$0$i10;
    $118 = $116;
    $119 = (($117) - ($118))|0;
    $120 = HEAP32[(81532)>>2]|0;
    $121 = $120 >>> $$042$i;
    $122 = (($119>>>0) / ($121>>>0))&-1;
    $123 = (($122) + ($115))|0;
    $124 = $123 ^ 1;
    $125 = HEAP32[(81548)>>2]|0;
    $126 = $123 >>> 3;
    $127 = (($125) + ($126)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = $124 & 7;
    $131 = 1 << $130;
    $132 = $131 & $129;
    $133 = ($132|0)==(0);
    if ($133) {
     label = 92;
     break;
    }
    $134 = HEAP32[(81552)>>2]|0;
    $135 = (($134) + ($126)|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = $136&255;
    $138 = $137 & $131;
    $139 = ($138|0)!=(0);
    $140 = (($115) + -1)|0;
    $141 = $124 & $140;
    $142 = Math_imul($141, $121)|0;
    $143 = (($116) + ($142)|0);
    $144 = ($143|0)==(0|0);
    $or$cond$i = $144 | $139;
    if ($or$cond$i) {
     label = 92;
     break;
    }
    $145 = (($142>>>0) / ($121>>>0))&-1;
    $146 = (($145) + ($115))|0;
    $147 = $146 ^ 1;
    $148 = $146 >>> 3;
    $149 = (($125) + ($148)|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $150&255;
    $152 = $147 & 7;
    $153 = 1 << $152;
    $154 = $153 & $151;
    $155 = ($154|0)==(0);
    if ($155) {
     $165 = 0;
    } else {
     $156 = (($134) + ($148)|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = $157&255;
     $159 = $158 & $153;
     $160 = ($159|0)==(0);
     $161 = $147 & $140;
     $162 = Math_imul($161, $121)|0;
     $163 = (($116) + ($162)|0);
     $$$i43$i = $160 ? $163 : 0;
     $165 = $$$i43$i;
    }
    $164 = ($$0$i10|0)==($165|0);
    if (!($164)) {
     label = 47;
     break;
    }
    $166 = ($$0$i10|0)==(0|0);
    if ($166) {
     label = 49;
     break;
    }
    $167 = HEAP32[(81540)>>2]|0;
    $168 = ($167|0)>($$042$i|0);
    if (!($168)) {
     label = 51;
     break;
    }
    $169 = (($121) + -1)|0;
    $170 = $169 & $119;
    $171 = ($170|0)==(0);
    if (!($171)) {
     label = 53;
     break;
    }
    $172 = ($123|0)!=(0);
    $173 = HEAP32[(81556)>>2]|0;
    $174 = ($123>>>0)<($173>>>0);
    $or$cond14$i46$i = $172 & $174;
    if (!($or$cond14$i46$i)) {
     label = 55;
     break;
    }
    $175 = $123 & 7;
    $176 = 1 << $175;
    $177 = $137 & $176;
    $178 = ($177|0)==(0);
    if (!($178)) {
     label = 57;
     break;
    }
    _sh_clearbit($$0$i10,$$042$i,$125);
    $179 = HEAP32[$$0$i10>>2]|0;
    $180 = ($179|0)==(0|0);
    $$pre$i$i = ((($$0$i10)) + 4|0);
    if (!($180)) {
     $181 = HEAP32[$$pre$i$i>>2]|0;
     $182 = ((($179)) + 4|0);
     HEAP32[$182>>2] = $181;
    }
    $183 = HEAP32[$$pre$i$i>>2]|0;
    HEAP32[$183>>2] = $179;
    $184 = HEAP32[$$0$i10>>2]|0;
    $185 = ($184|0)==(0|0);
    do {
     if (!($185)) {
      $186 = ((($184)) + 4|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = HEAP32[(81536)>>2]|0;
      $189 = ($187>>>0)<($188>>>0);
      if (!($189)) {
       $190 = HEAP32[(81540)>>2]|0;
       $191 = (($188) + ($190<<2)|0);
       $192 = ($187>>>0)<($191>>>0);
       if ($192) {
        break;
       }
      }
      $193 = HEAP32[(81528)>>2]|0;
      $194 = ($187>>>0)<($193>>>0);
      if ($194) {
       label = 65;
       break L61;
      }
      $195 = HEAP32[(81532)>>2]|0;
      $196 = (($193) + ($195)|0);
      $197 = ($187>>>0)<($196>>>0);
      if (!($197)) {
       label = 65;
       break L61;
      }
     }
    } while(0);
    $198 = HEAP32[(81552)>>2]|0;
    $199 = HEAP32[(81540)>>2]|0;
    $200 = ($199|0)>($$042$i|0);
    if (!($200)) {
     label = 67;
     break;
    }
    $201 = HEAP32[(81528)>>2]|0;
    $202 = (($117) - ($201))|0;
    $203 = HEAP32[(81532)>>2]|0;
    $204 = $203 >>> $$042$i;
    $205 = (($204) + -1)|0;
    $206 = $205 & $202;
    $207 = ($206|0)==(0);
    if (!($207)) {
     label = 69;
     break;
    }
    $208 = (($202>>>0) / ($204>>>0))&-1;
    $209 = (($208) + ($115))|0;
    $210 = ($209|0)!=(0);
    $211 = HEAP32[(81556)>>2]|0;
    $212 = ($209>>>0)<($211>>>0);
    $or$cond14$i49$i = $210 & $212;
    if (!($or$cond14$i49$i)) {
     label = 71;
     break;
    }
    $213 = $209 >>> 3;
    $214 = (($198) + ($213)|0);
    $215 = HEAP8[$214>>0]|0;
    $216 = $215&255;
    $217 = $209 & 7;
    $218 = 1 << $217;
    $219 = $216 & $218;
    $220 = ($219|0)==(0);
    if (!($220)) {
     label = 73;
     break;
    }
    $221 = HEAP32[(81548)>>2]|0;
    _sh_clearbit($143,$$042$i,$221);
    $222 = HEAP32[$143>>2]|0;
    $223 = ($222|0)==(0|0);
    $$pre$i51$i = ((($143)) + 4|0);
    if (!($223)) {
     $224 = HEAP32[$$pre$i51$i>>2]|0;
     $225 = ((($222)) + 4|0);
     HEAP32[$225>>2] = $224;
    }
    $226 = HEAP32[$$pre$i51$i>>2]|0;
    HEAP32[$226>>2] = $222;
    $227 = HEAP32[$143>>2]|0;
    $228 = ($227|0)==(0|0);
    do {
     if (!($228)) {
      $229 = ((($227)) + 4|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = HEAP32[(81536)>>2]|0;
      $232 = ($230>>>0)<($231>>>0);
      if (!($232)) {
       $233 = HEAP32[(81540)>>2]|0;
       $234 = (($231) + ($233<<2)|0);
       $235 = ($230>>>0)<($234>>>0);
       if ($235) {
        break;
       }
      }
      $236 = HEAP32[(81528)>>2]|0;
      $237 = ($230>>>0)<($236>>>0);
      if ($237) {
       label = 81;
       break L61;
      }
      $238 = HEAP32[(81532)>>2]|0;
      $239 = (($236) + ($238)|0);
      $240 = ($230>>>0)<($239>>>0);
      if (!($240)) {
       label = 81;
       break L61;
      }
     }
    } while(0);
    $241 = (($$042$i) + -1)|0;
    $242 = ($$0$i10>>>0)>($143>>>0);
    $$$0$i = $242 ? $143 : $$0$i10;
    $243 = HEAP32[(81552)>>2]|0;
    $244 = ($241|0)>(-1);
    $245 = HEAP32[(81540)>>2]|0;
    $246 = ($245|0)>($241|0);
    $or$cond$i54$i = $244 & $246;
    if (!($or$cond$i54$i)) {
     label = 83;
     break;
    }
    $247 = HEAP32[(81528)>>2]|0;
    $248 = $$$0$i;
    $249 = (($248) - ($247))|0;
    $250 = HEAP32[(81532)>>2]|0;
    $251 = $250 >>> $241;
    $252 = (($251) + -1)|0;
    $253 = $252 & $249;
    $254 = ($253|0)==(0);
    if (!($254)) {
     label = 85;
     break;
    }
    $255 = 1 << $241;
    $256 = (($249>>>0) / ($251>>>0))&-1;
    $257 = (($256) + ($255))|0;
    $258 = ($257|0)!=(0);
    $259 = HEAP32[(81556)>>2]|0;
    $260 = ($257>>>0)<($259>>>0);
    $or$cond14$i55$i = $258 & $260;
    if (!($or$cond14$i55$i)) {
     label = 87;
     break;
    }
    $261 = $257 >>> 3;
    $262 = (($243) + ($261)|0);
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&255;
    $265 = $257 & 7;
    $266 = 1 << $265;
    $267 = $264 & $266;
    $268 = ($267|0)==(0);
    if (!($268)) {
     label = 89;
     break;
    }
    $269 = HEAP32[(81548)>>2]|0;
    _sh_setbit($$$0$i,$241,$269);
    $270 = HEAP32[(81536)>>2]|0;
    $271 = (($270) + ($241<<2)|0);
    _sh_add_to_list($271,$$$0$i);
    $272 = HEAP32[(81536)>>2]|0;
    $273 = (($272) + ($241<<2)|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)==($$$0$i|0);
    if ($275) {
     $$0$i10 = $$$0$i;$$042$i = $241;
    } else {
     label = 91;
     break;
    }
   }
   switch (label|0) {
    case 47: {
     _OPENSSL_die(49477,83252,0);
     // unreachable;
     break;
    }
    case 49: {
     _OPENSSL_die(49532,83252,0);
     // unreachable;
     break;
    }
    case 51: {
     _OPENSSL_die(48732,83252,0);
     // unreachable;
     break;
    }
    case 53: {
     _OPENSSL_die(48787,83252,0);
     // unreachable;
     break;
    }
    case 55: {
     _OPENSSL_die(48861,83252,0);
     // unreachable;
     break;
    }
    case 57: {
     _OPENSSL_die(49562,83252,0);
     // unreachable;
     break;
    }
    case 65: {
     _OPENSSL_die(49009,83252,0);
     // unreachable;
     break;
    }
    case 67: {
     _OPENSSL_die(48732,83252,0);
     // unreachable;
     break;
    }
    case 69: {
     _OPENSSL_die(48787,83252,0);
     // unreachable;
     break;
    }
    case 71: {
     _OPENSSL_die(48861,83252,0);
     // unreachable;
     break;
    }
    case 73: {
     _OPENSSL_die(49562,83252,0);
     // unreachable;
     break;
    }
    case 81: {
     _OPENSSL_die(49009,83252,0);
     // unreachable;
     break;
    }
    case 83: {
     _OPENSSL_die(48732,83252,0);
     // unreachable;
     break;
    }
    case 85: {
     _OPENSSL_die(48787,83252,0);
     // unreachable;
     break;
    }
    case 87: {
     _OPENSSL_die(48861,83252,0);
     // unreachable;
     break;
    }
    case 89: {
     _OPENSSL_die(49562,83252,0);
     // unreachable;
     break;
    }
    case 91: {
     _OPENSSL_die(49617,83252,0);
     // unreachable;
     break;
    }
    case 92: {
     $276 = HEAP32[20379]|0;
     (_CRYPTO_THREAD_unlock($276)|0);
     return;
     break;
    }
   }
  }
 }
 _CRYPTO_free($0,$1,$2);
 return;
}
function _CRYPTO_strdup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_strlen($0)|0);
 $5 = (($4) + 1)|0;
 $6 = (_CRYPTO_malloc($5,$1,$2)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($6|0),($0|0),($5|0))|0;
 $$0 = $6;
 return ($$0|0);
}
function _OPENSSL_strnlen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$07 = 0, $$in = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $0;
  } else {
   $$07 = $0;$$in = $1;
   while(1) {
    $3 = (($$in) + -1)|0;
    $4 = HEAP8[$$07>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$0$lcssa = $$07;
     break L1;
    }
    $6 = ((($$07)) + 1|0);
    $7 = ($3|0)==(0);
    if ($7) {
     $$0$lcssa = $6;
     break;
    } else {
     $$07 = $6;$$in = $3;
    }
   }
  }
 } while(0);
 $8 = $$0$lcssa;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 return ($10|0);
}
function _CRYPTO_memdup($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 $5 = ($1>>>0)>(2147483646);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_CRYPTO_malloc($1,$2,$3)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _ERR_put_error(15,115,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  _memcpy(($6|0),($0|0),($1|0))|0;
  $$0 = $6;
  return ($$0|0);
 }
 return (0)|0;
}
function _OPENSSL_strlcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$010$lcssa = 0, $$01024 = 0, $$011$lcssa = 0, $$01118 = 0, $$01119 = 0, $$01123 = 0, $$012$lcssa = 0, $$01221 = 0, $$01222 = 0, $$014 = 0, $$015 = 0, $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(1);
 L1: do {
  if ($3) {
   $$01024 = $2;$$01123 = $1;$$01222 = $0;$$025 = 0;
   while(1) {
    $4 = HEAP8[$$01123>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$01118 = $$01123;$$01221 = $$01222;$$014 = $$025;
     label = 5;
     break L1;
    }
    $6 = ((($$01123)) + 1|0);
    $7 = ((($$01222)) + 1|0);
    HEAP8[$$01222>>0] = $4;
    $8 = (($$025) + 1)|0;
    $9 = (($$01024) + -1)|0;
    $10 = ($9>>>0)>(1);
    if ($10) {
     $$01024 = $9;$$01123 = $6;$$01222 = $7;$$025 = $8;
    } else {
     $$0$lcssa = $8;$$010$lcssa = $9;$$011$lcssa = $6;$$012$lcssa = $7;
     label = 4;
     break;
    }
   }
  } else {
   $$0$lcssa = 0;$$010$lcssa = $2;$$011$lcssa = $1;$$012$lcssa = $0;
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  $11 = ($$010$lcssa|0)==(0);
  if ($11) {
   $$01119 = $$011$lcssa;$$015 = $$0$lcssa;
  } else {
   $$01118 = $$011$lcssa;$$01221 = $$012$lcssa;$$014 = $$0$lcssa;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  HEAP8[$$01221>>0] = 0;
  $$01119 = $$01118;$$015 = $$014;
 }
 $12 = (_strlen($$01119)|0);
 $13 = (($12) + ($$015))|0;
 return ($13|0);
}
function _OPENSSL_strlcat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01024$i = 0, $$01118$i = 0, $$01119$i = 0, $$01123$i = 0, $$01221$i = 0, $$01222$i = 0, $$014$i = 0, $$015$i = 0, $$018 = 0, $$023 = 0, $$025$i = 0, $$0822 = 0, $$0921 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$01119$i = $1;$$015$i = 0;$$018 = 0;
  } else {
   $$023 = 0;$$0822 = $2;$$0921 = $0;
   while(1) {
    $4 = HEAP8[$$0921>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     break;
    }
    $6 = (($$023) + 1)|0;
    $7 = (($$0822) + -1)|0;
    $8 = ((($$0921)) + 1|0);
    $9 = ($7|0)==(0);
    if ($9) {
     $$01119$i = $1;$$015$i = 0;$$018 = $6;
     break L1;
    } else {
     $$023 = $6;$$0822 = $7;$$0921 = $8;
    }
   }
   $10 = ($$0822>>>0)>(1);
   L6: do {
    if ($10) {
     $$01024$i = $$0822;$$01123$i = $1;$$01222$i = $$0921;$$025$i = 0;
     while(1) {
      $11 = HEAP8[$$01123$i>>0]|0;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$01118$i = $$01123$i;$$01221$i = $$01222$i;$$014$i = $$025$i;
       break L6;
      }
      $13 = ((($$01123$i)) + 1|0);
      $14 = ((($$01222$i)) + 1|0);
      HEAP8[$$01222$i>>0] = $11;
      $15 = (($$025$i) + 1)|0;
      $16 = (($$01024$i) + -1)|0;
      $17 = ($16>>>0)>(1);
      if ($17) {
       $$01024$i = $16;$$01123$i = $13;$$01222$i = $14;$$025$i = $15;
      } else {
       break;
      }
     }
     $18 = ($16|0)==(0);
     if ($18) {
      $$01119$i = $13;$$015$i = $15;$$018 = $$023;
      break L1;
     } else {
      $$01118$i = $13;$$01221$i = $14;$$014$i = $15;
     }
    } else {
     $$01118$i = $1;$$01221$i = $$0921;$$014$i = 0;
    }
   } while(0);
   HEAP8[$$01221$i>>0] = 0;
   $$01119$i = $$01118$i;$$015$i = $$014$i;$$018 = $$023;
  }
 } while(0);
 $19 = (_strlen($$01119$i)|0);
 $20 = (($$015$i) + ($$018))|0;
 $21 = (($20) + ($19))|0;
 return ($21|0);
}
function _OPENSSL_hexchar2int($0) {
 $0 = $0|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($0<<24>>24) {
  case 48:  {
   $$0 = 0;
   break;
  }
  case 49:  {
   $$0 = 1;
   break;
  }
  case 50:  {
   $$0 = 2;
   break;
  }
  case 51:  {
   $$0 = 3;
   break;
  }
  case 52:  {
   $$0 = 4;
   break;
  }
  case 53:  {
   $$0 = 5;
   break;
  }
  case 54:  {
   $$0 = 6;
   break;
  }
  case 55:  {
   $$0 = 7;
   break;
  }
  case 56:  {
   $$0 = 8;
   break;
  }
  case 57:  {
   $$0 = 9;
   break;
  }
  case 65: case 97:  {
   $$0 = 10;
   break;
  }
  case 66: case 98:  {
   $$0 = 11;
   break;
  }
  case 67: case 99:  {
   $$0 = 12;
   break;
  }
  case 68: case 100:  {
   $$0 = 13;
   break;
  }
  case 69: case 101:  {
   $$0 = 14;
   break;
  }
  case 70: case 102:  {
   $$0 = 15;
   break;
  }
  default: {
   $$0 = -1;
  }
  }
 } while(0);
 return ($$0|0);
}
function _OPENSSL_hexstr2buf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$0$i37 = 0, $$035 = 0, $$035$ph = 0, $$036$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = $2 >>> 1;
 $4 = (_CRYPTO_malloc($3,83252,0)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _ERR_put_error(15,118,65,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $$035$ph = $0;$$036$ph = $4;
 }
 L4: while(1) {
  $$035 = $$035$ph;
  while(1) {
   $6 = HEAP8[$$035>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 44;
    break L4;
   }
   $8 = ((($$035)) + 1|0);
   $9 = ($6<<24>>24)==(58);
   if ($9) {
    $$035 = $8;
   } else {
    break;
   }
  }
  $10 = ((($$035)) + 2|0);
  $11 = HEAP8[$8>>0]|0;
  do {
   switch ($11<<24>>24) {
   case 0:  {
    label = 6;
    break L4;
    break;
   }
   case 48:  {
    $$0$i = 0;
    break;
   }
   case 49:  {
    $$0$i = 1;
    break;
   }
   case 50:  {
    $$0$i = 2;
    break;
   }
   case 51:  {
    $$0$i = 3;
    break;
   }
   case 52:  {
    $$0$i = 4;
    break;
   }
   case 53:  {
    $$0$i = 5;
    break;
   }
   case 54:  {
    $$0$i = 6;
    break;
   }
   case 55:  {
    $$0$i = 7;
    break;
   }
   case 56:  {
    $$0$i = 8;
    break;
   }
   case 57:  {
    $$0$i = 9;
    break;
   }
   case 65: case 97:  {
    $$0$i = 10;
    break;
   }
   case 66: case 98:  {
    $$0$i = 11;
    break;
   }
   case 67: case 99:  {
    $$0$i = 12;
    break;
   }
   case 68: case 100:  {
    $$0$i = 13;
    break;
   }
   case 69: case 101:  {
    $$0$i = 14;
    break;
   }
   case 70: case 102:  {
    $$0$i = 15;
    break;
   }
   default: {
    $$0$i = -1;
   }
   }
  } while(0);
  do {
   switch ($6<<24>>24) {
   case 48:  {
    $$0$i37 = 0;
    break;
   }
   case 49:  {
    $$0$i37 = 1;
    break;
   }
   case 50:  {
    $$0$i37 = 2;
    break;
   }
   case 51:  {
    $$0$i37 = 3;
    break;
   }
   case 52:  {
    $$0$i37 = 4;
    break;
   }
   case 53:  {
    $$0$i37 = 5;
    break;
   }
   case 54:  {
    $$0$i37 = 6;
    break;
   }
   case 55:  {
    $$0$i37 = 7;
    break;
   }
   case 56:  {
    $$0$i37 = 8;
    break;
   }
   case 57:  {
    $$0$i37 = 9;
    break;
   }
   case 65: case 97:  {
    $$0$i37 = 10;
    break;
   }
   case 66: case 98:  {
    $$0$i37 = 11;
    break;
   }
   case 67: case 99:  {
    $$0$i37 = 12;
    break;
   }
   case 68: case 100:  {
    $$0$i37 = 13;
    break;
   }
   case 69: case 101:  {
    $$0$i37 = 14;
    break;
   }
   case 70: case 102:  {
    $$0$i37 = 15;
    break;
   }
   default: {
    $$0$i37 = -1;
   }
   }
  } while(0);
  $12 = $$0$i37 | $$0$i;
  $13 = ($12|0)<(0);
  if ($13) {
   label = 41;
   break;
  }
  $14 = $$0$i37 << 4;
  $15 = $14 | $$0$i;
  $16 = $15&255;
  $17 = ((($$036$ph)) + 1|0);
  HEAP8[$$036$ph>>0] = $16;
  $$035$ph = $10;$$036$ph = $17;
 }
 if ((label|0) == 6) {
  _ERR_put_error(15,118,103,0,0);
  _CRYPTO_free($4,83252,0);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 41) {
  _CRYPTO_free($4,83252,0);
  _ERR_put_error(15,118,102,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 44) {
  $18 = ($1|0)==(0|0);
  if ($18) {
   $$0 = $4;
   return ($$0|0);
  }
  $19 = $$036$ph;
  $20 = $4;
  $21 = (($19) - ($20))|0;
  HEAP32[$1>>2] = $21;
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _obj_name_hash($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$pre$pre$phiZZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[20392]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$pre$pre$phiZZ2D = $0;
 } else {
  $3 = (_OPENSSL_sk_num($1)|0);
  $4 = HEAP32[$0>>2]|0;
  $5 = ($3|0)>($4|0);
  if ($5) {
   $6 = HEAP32[20392]|0;
   $7 = (_OPENSSL_sk_value($6,$4)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$8 & 63]($10)|0);
   $$0 = $11;$$pre$phiZ2D = $0;
   $15 = HEAP32[$$pre$phiZ2D>>2]|0;
   $16 = $15 ^ $$0;
   return ($16|0);
  } else {
   $$pre$pre$phiZZ2D = $0;
  }
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_OPENSSL_LH_strhash($13)|0);
 $$0 = $14;$$pre$phiZ2D = $$pre$pre$phiZZ2D;
 $15 = HEAP32[$$pre$phiZ2D>>2]|0;
 $16 = $15 ^ $$0;
 return ($16|0);
}
function _obj_name_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = HEAP32[20392]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (_OPENSSL_sk_num($6)|0);
  $9 = HEAP32[$0>>2]|0;
  $10 = ($8|0)>($9|0);
  if ($10) {
   $11 = HEAP32[20392]|0;
   $12 = (_OPENSSL_sk_value($11,$9)|0);
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($0)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($1)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iii[$14 & 63]($16,$18)|0);
   $$0 = $19;
   return ($$0|0);
  }
 }
 $20 = ((($0)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($1)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_strcmp($21,$23)|0);
 $$0 = $24;
 return ($$0|0);
}
function _OBJ_NAME_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01719 = 0, $$in = 0, $$lcssa18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 L1: do {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = HEAP32[20391]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $6 = (_OPENSSL_LH_new(36,49)|0);
    HEAP32[20391] = $6;
    $7 = HEAP32[20391]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $$0 = 0;
     break;
    } else {
     $$in = $7;
    }
   } else {
    $$in = $4;
   }
   $9 = $1 & -32769;
   $10 = ((($2)) + 8|0);
   HEAP32[$10>>2] = $0;
   HEAP32[$2>>2] = $9;
   $11 = (_OPENSSL_LH_retrieve($$in,$2)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$0 = 0;
   } else {
    $13 = $1 & 32768;
    $14 = ($13|0)==(0);
    L7: do {
     if ($14) {
      $$01719 = 0;$16 = $11;
      while(1) {
       $15 = ((($16)) + 4|0);
       $17 = HEAP32[$15>>2]|0;
       $18 = ($17|0)==(0);
       if ($18) {
        $$lcssa18 = $16;
        break L7;
       }
       $19 = ($$01719|0)>(9);
       if ($19) {
        $$0 = 0;
        break L1;
       }
       $20 = (($$01719) + 1)|0;
       $21 = ((($16)) + 12|0);
       $22 = HEAP32[$21>>2]|0;
       HEAP32[$10>>2] = $22;
       $23 = HEAP32[20391]|0;
       $24 = (_OPENSSL_LH_retrieve($23,$2)|0);
       $25 = ($24|0)==(0|0);
       if ($25) {
        $$0 = 0;
        break L1;
       } else {
        $$01719 = $20;$16 = $24;
       }
      }
     } else {
      $$lcssa18 = $11;
     }
    } while(0);
    $26 = ((($$lcssa18)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $$0 = $27;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_NAME_cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[20391]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 HEAP32[20393] = $0;
 $3 = (_OPENSSL_LH_get_down_load($1)|0);
 $4 = HEAP32[20391]|0;
 _OPENSSL_LH_set_down_load($4,0);
 $5 = HEAP32[20391]|0;
 _OPENSSL_LH_doall($5,33);
 $6 = ($0|0)<(0);
 $7 = HEAP32[20391]|0;
 if ($6) {
  _OPENSSL_LH_free($7);
  $8 = HEAP32[20392]|0;
  _OPENSSL_sk_pop_free($8,34);
  HEAP32[20391] = 0;
  HEAP32[20392] = 0;
  return;
 } else {
  _OPENSSL_LH_set_down_load($7,$3);
  return;
 }
}
function _names_lh_free_doall($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[20393]|0;
 $4 = ($3|0)<(0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ($3|0)==($5|0);
 $or$cond = $4 | $6;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[20391]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $5 & -32769;
  $12 = ((($1)) + 8|0);
  HEAP32[$12>>2] = $8;
  HEAP32[$1>>2] = $11;
  $13 = (_OPENSSL_LH_delete($9,$1)|0);
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = HEAP32[20392]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = (_OPENSSL_sk_num($15)|0);
    $18 = HEAP32[$13>>2]|0;
    $19 = ($17|0)>($18|0);
    if ($19) {
     $20 = HEAP32[20392]|0;
     $21 = (_OPENSSL_sk_value($20,$18)|0);
     $22 = ((($21)) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ((($13)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$13>>2]|0;
     $27 = ((($13)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viii[$23 & 31]($25,$26,$28);
    }
   }
   _CRYPTO_free($13,83252,0);
  }
 }
 STACKTOP = sp;return;
}
function _name_funcs_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_free($0,83252,0);
 return;
}
function _obj_cleanup_int() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20394]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 _OPENSSL_LH_set_down_load($0,0);
 $2 = HEAP32[20394]|0;
 _OPENSSL_LH_doall($2,35);
 $3 = HEAP32[20394]|0;
 _OPENSSL_LH_doall($3,36);
 $4 = HEAP32[20394]|0;
 _OPENSSL_LH_doall($4,37);
 $5 = HEAP32[20394]|0;
 _OPENSSL_LH_free($5);
 HEAP32[20394] = 0;
 return;
}
function _cleanup1_doall($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | 13;
 HEAP32[$4>>2] = $6;
 return;
}
function _cleanup2_doall($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _cleanup3_doall($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  _CRYPTO_free($0,83252,0);
  return;
 }
 _ASN1_OBJECT_free($2);
 _CRYPTO_free($0,83252,0);
 return;
}
function _OBJ_add_object($0) {
 $0 = $0|0;
 var $$025 = 0, $$phi$trans$insert = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 $2 = HEAP32[20394]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_OPENSSL_LH_new(37,50)|0);
  HEAP32[20394] = $4;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$025 = 0;
   STACKTOP = sp;return ($$025|0);
  }
 }
 $6 = (_OBJ_dup($0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $38 = 0;$39 = 0;$40 = 0;
 } else {
  $8 = (_CRYPTO_malloc(8,83252,0)|0);
  $9 = ((($1)) + 12|0);
  HEAP32[$9>>2] = $8;
  $10 = ($8|0)==(0|0);
  do {
   if ($10) {
    $61 = 0;$62 = 0;
   } else {
    $11 = ((($6)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0);
    if ($13) {
     $30 = 0;$34 = 0;
    } else {
     $14 = ((($0)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     if ($16) {
      $30 = 0;$34 = 0;
     } else {
      $17 = (_CRYPTO_malloc(8,83252,0)|0);
      HEAP32[$1>>2] = $17;
      $18 = ($17|0)==(0|0);
      if ($18) {
       $61 = 0;$62 = 0;
       break;
      } else {
       $30 = $17;$34 = $17;
      }
     }
    }
    $19 = HEAP32[$6>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     $63 = 0;$64 = 0;
    } else {
     $21 = (_CRYPTO_malloc(8,83252,0)|0);
     $22 = ((($1)) + 4|0);
     HEAP32[$22>>2] = $21;
     $23 = ($21|0)==(0|0);
     if ($23) {
      $61 = 0;$62 = $34;
      break;
     } else {
      $63 = $21;$64 = $21;
     }
    }
    $24 = ((($6)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    if (!($26)) {
     $27 = (_CRYPTO_malloc(8,83252,0)|0);
     $28 = ((($1)) + 8|0);
     HEAP32[$28>>2] = $27;
     $29 = ($27|0)==(0|0);
     if ($29) {
      $61 = $63;$62 = $34;
      break;
     }
    }
    $31 = ($30|0)==(0|0);
    if ($31) {
     $36 = $64;$43 = $63;
    } else {
     HEAP32[$30>>2] = 0;
     $32 = ((($30)) + 4|0);
     HEAP32[$32>>2] = $6;
     $33 = HEAP32[20394]|0;
     $35 = (_OPENSSL_LH_insert($33,$34)|0);
     _CRYPTO_free($35,83252,0);
     $$phi$trans$insert = ((($1)) + 4|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $36 = $$pre;$43 = $$pre;
    }
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     HEAP32[$36>>2] = 1;
     $41 = ((($36)) + 4|0);
     HEAP32[$41>>2] = $6;
     $42 = HEAP32[20394]|0;
     $44 = (_OPENSSL_LH_insert($42,$43)|0);
     _CRYPTO_free($44,83252,0);
    }
    $45 = ((($1)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==(0|0);
    if (!($47)) {
     HEAP32[$46>>2] = 2;
     $48 = ((($46)) + 4|0);
     HEAP32[$48>>2] = $6;
     $49 = HEAP32[20394]|0;
     $50 = (_OPENSSL_LH_insert($49,$46)|0);
     _CRYPTO_free($50,83252,0);
    }
    $51 = HEAP32[$9>>2]|0;
    $52 = ($51|0)==(0|0);
    if (!($52)) {
     HEAP32[$51>>2] = 3;
     $53 = ((($51)) + 4|0);
     HEAP32[$53>>2] = $6;
     $54 = HEAP32[20394]|0;
     $55 = (_OPENSSL_LH_insert($54,$51)|0);
     _CRYPTO_free($55,83252,0);
    }
    $56 = ((($6)) + 20|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $57 & -14;
    HEAP32[$56>>2] = $58;
    $59 = ((($6)) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    $$025 = $60;
    STACKTOP = sp;return ($$025|0);
   }
  } while(0);
  _ERR_put_error(8,105,65,0,0);
  $38 = $62;$39 = $61;$40 = $8;
 }
 _CRYPTO_free($38,83252,0);
 _CRYPTO_free($39,83252,0);
 _CRYPTO_free(0,83252,0);
 _CRYPTO_free($40,83252,0);
 _CRYPTO_free($6,83252,0);
 $$025 = 0;
 STACKTOP = sp;return ($$025|0);
}
function _added_obj_hash($0) {
 $0 = $0|0;
 var $$0 = 0, $$02528 = 0, $$02627 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 switch ($3|0) {
 case 0:  {
  $4 = ((($2)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 << 20;
  $7 = ((($2)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)>(0);
  if ($9) {
   $$02528 = $6;$$02627 = 0;
   while(1) {
    $10 = (($8) + ($$02627)|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11&255;
    $13 = ($$02627*3)|0;
    $14 = (($13|0) % 24)&-1;
    $15 = $12 << $14;
    $16 = $15 ^ $$02528;
    $17 = (($$02627) + 1)|0;
    $exitcond = ($17|0)==($5|0);
    if ($exitcond) {
     $$1 = $16;
     break;
    } else {
     $$02528 = $16;$$02627 = $17;
    }
   }
  } else {
   $$1 = $6;
  }
  break;
 }
 case 1:  {
  $18 = HEAP32[$2>>2]|0;
  $19 = (_OPENSSL_LH_strhash($18)|0);
  $$1 = $19;
  break;
 }
 case 2:  {
  $20 = ((($2)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_OPENSSL_LH_strhash($21)|0);
  $$1 = $22;
  break;
 }
 case 3:  {
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $$1 = $24;
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 $25 = $$1 & 1073741823;
 $26 = HEAP32[$0>>2]|0;
 $27 = $26 << 30;
 $28 = $27 | $25;
 $$0 = $28;
 return ($$0|0);
}
function _added_obj_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($2|0) {
 case 0:  {
  $10 = ((($7)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($9)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) - ($13))|0;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $$0 = $14;
   return ($$0|0);
  }
  $16 = ((($7)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($9)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_memcmp($17,$19,$11)|0);
  $$0 = $20;
  return ($$0|0);
  break;
 }
 case 1:  {
  $21 = HEAP32[$7>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = -1;
   return ($$0|0);
  }
  $23 = HEAP32[$9>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $$0 = 1;
   return ($$0|0);
  }
  $25 = (_strcmp($21,$23)|0);
  $$0 = $25;
  return ($$0|0);
  break;
 }
 case 2:  {
  $26 = ((($7)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $$0 = -1;
   return ($$0|0);
  }
  $29 = ((($9)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0|0);
  if ($31) {
   $$0 = 1;
   return ($$0|0);
  }
  $32 = (_strcmp($27,$30)|0);
  $$0 = $32;
  return ($$0|0);
  break;
 }
 case 3:  {
  $33 = ((($7)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($9)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) - ($36))|0;
  $$0 = $37;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _OBJ_nid2obj($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp + 24|0;
 $2 = sp;
 $3 = ($0>>>0)<(1061);
 do {
  if ($3) {
   $4 = ($0|0)==(0);
   if (!($4)) {
    $5 = (((2352 + (($0*24)|0)|0)) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0);
    if ($7) {
     _ERR_put_error(8,103,101,0,0);
     $$0 = 0;
     break;
    }
   }
   $8 = (2352 + (($0*24)|0)|0);
   $$0 = $8;
  } else {
   $9 = HEAP32[20394]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$0 = 0;
   } else {
    HEAP32[$1>>2] = 3;
    $11 = ((($1)) + 4|0);
    HEAP32[$11>>2] = $2;
    $12 = ((($2)) + 8|0);
    HEAP32[$12>>2] = $0;
    $13 = (_OPENSSL_LH_retrieve($9,$1)|0);
    $14 = ($13|0)==(0|0);
    if ($14) {
     _ERR_put_error(8,103,101,0,0);
     $$0 = 0;
     break;
    } else {
     $15 = ((($13)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $$0 = $16;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_nid2sn($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp + 24|0;
 $2 = sp;
 $3 = ($0>>>0)<(1061);
 do {
  if ($3) {
   $4 = ($0|0)==(0);
   if (!($4)) {
    $5 = (((2352 + (($0*24)|0)|0)) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0);
    if ($7) {
     _ERR_put_error(8,104,101,0,0);
     $$0 = 0;
     break;
    }
   }
   $8 = (2352 + (($0*24)|0)|0);
   $9 = HEAP32[$8>>2]|0;
   $$0 = $9;
  } else {
   $10 = HEAP32[20394]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$0 = 0;
   } else {
    HEAP32[$1>>2] = 3;
    $12 = ((($1)) + 4|0);
    HEAP32[$12>>2] = $2;
    $13 = ((($2)) + 8|0);
    HEAP32[$13>>2] = $0;
    $14 = (_OPENSSL_LH_retrieve($10,$1)|0);
    $15 = ($14|0)==(0|0);
    if ($15) {
     _ERR_put_error(8,104,101,0,0);
     $$0 = 0;
     break;
    } else {
     $16 = ((($14)) + 4|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = HEAP32[$17>>2]|0;
     $$0 = $18;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_obj2nid($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i$i = 0, $$043$i$i$i = 0, $$043$ph$i$i$i = 0, $$048$i$i$i = 0, $$048$ph$i$i$i = 0, $$049$ph$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = $0;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[20394]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  HEAP32[$1>>2] = 0;
  $13 = ((($1)) + 4|0);
  HEAP32[$13>>2] = $2;
  $14 = (_OPENSSL_LH_retrieve($10,$1)|0);
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = ((($14)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $$0 = $19;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = ((($0)) + 16|0);
 $$043$ph$i$i$i = 0;$$048$ph$i$i$i = 956;$$049$ph$i$i$i = 0;$44 = 0;
 L15: while(1) {
  $$043$i$i$i = $$043$ph$i$i$i;$$048$i$i$i = $$048$ph$i$i$i;$45 = $44;
  while(1) {
   $20 = ($$049$ph$i$i$i|0)<($$048$i$i$i|0);
   if (!($20)) {
    label = 15;
    break L15;
   }
   $21 = (($$048$i$i$i) + ($$049$ph$i$i$i))|0;
   $22 = (($21|0) / 2)&-1;
   $23 = (27816 + ($22<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$7>>2]|0;
   $26 = (((2352 + (($24*24)|0)|0)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) - ($27))|0;
   $29 = ($28|0)==(0);
   if ($29) {
    $30 = ($25|0)==(0);
    if ($30) {
     $39 = $23;
     break L15;
    }
    $31 = (((2352 + (($24*24)|0)|0)) + 16|0);
    $32 = HEAP32[$12>>2]|0;
    $33 = HEAP32[$31>>2]|0;
    $34 = (_memcmp($32,$33,$25)|0);
    $$0$i$i = $34;
   } else {
    $$0$i$i = $28;
   }
   $35 = ($$0$i$i|0)<(0);
   if ($35) {
    $$043$i$i$i = $$0$i$i;$$048$i$i$i = $22;$45 = $23;
   } else {
    break;
   }
  }
  $36 = ($$0$i$i|0)==(0);
  $37 = (($22) + 1)|0;
  if ($36) {
   $39 = $23;
   break;
  } else {
   $$043$ph$i$i$i = $$0$i$i;$$048$ph$i$i$i = $$048$i$i$i;$$049$ph$i$i$i = $37;$44 = $23;
  }
 }
 if ((label|0) == 15) {
  $38 = ($$043$i$i$i|0)==(0);
  if ($38) {
   $39 = $45;
  } else {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = ($39|0)==(0|0);
 if ($40) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = HEAP32[$39>>2]|0;
 $42 = (((2352 + (($41*24)|0)|0)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $$0 = $43;
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_txt2obj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i39 = 0, $$026 = 0, $$043$i$i$i$i = 0, $$043$i$i$i$i35 = 0, $$043$ph$i$i$i$i = 0, $$043$ph$i$i$i$i32 = 0, $$048$i$i$i$i = 0, $$048$i$i$i$i34 = 0, $$048$ph$i$i$i$i = 0, $$048$ph$i$i$i$i31 = 0, $$049$ph$i$i$i$i = 0, $$049$ph$i$i$i$i30 = 0, $$pre$i = 0, $$pre$i28 = 0, $$sink$i = 0, $$sink$i36 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $2 = sp + 96|0;
 $3 = sp + 72|0;
 $4 = sp + 48|0;
 $5 = sp + 40|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = ($1|0)==(0);
 L1: do {
  if ($10) {
   HEAP32[$6>>2] = $0;
   $11 = HEAP32[20394]|0;
   $12 = ($11|0)==(0|0);
   do {
    if ($12) {
     $26 = $0;
     label = 3;
    } else {
     HEAP32[$7>>2] = 1;
     $13 = ((($7)) + 4|0);
     HEAP32[$13>>2] = $6;
     $14 = (_OPENSSL_LH_retrieve($11,$7)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      $$pre$i = HEAP32[$6>>2]|0;
      $26 = $$pre$i;
      label = 3;
      break;
     } else {
      $16 = ((($14)) + 4|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ((($17)) + 8|0);
      $$sink$i = $18;
      label = 15;
      break;
     }
    }
   } while(0);
   do {
    if ((label|0) == 3) {
     $$043$ph$i$i$i$i = 0;$$048$ph$i$i$i$i = 1052;$$049$ph$i$i$i$i = 0;$87 = 0;
     L10: while(1) {
      $$043$i$i$i$i = $$043$ph$i$i$i$i;$$048$i$i$i$i = $$048$ph$i$i$i$i;$88 = $87;
      while(1) {
       $19 = ($$049$ph$i$i$i$i|0)<($$048$i$i$i$i|0);
       if (!($19)) {
        label = 11;
        break L10;
       }
       $20 = (($$048$i$i$i$i) + ($$049$ph$i$i$i$i))|0;
       $21 = (($20|0) / 2)&-1;
       $22 = (31640 + ($21<<2)|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (2352 + (($23*24)|0)|0);
       $25 = HEAP32[$24>>2]|0;
       $27 = (_strcmp($26,$25)|0);
       $28 = ($27|0)<(0);
       if ($28) {
        $$043$i$i$i$i = $27;$$048$i$i$i$i = $21;$88 = $22;
       } else {
        break;
       }
      }
      $29 = ($27|0)==(0);
      $30 = (($21) + 1)|0;
      if ($29) {
       $32 = $22;
       label = 12;
       break;
      } else {
       $$043$ph$i$i$i$i = $27;$$048$ph$i$i$i$i = $$048$i$i$i$i;$$049$ph$i$i$i$i = $30;$87 = $22;
      }
     }
     if ((label|0) == 11) {
      $31 = ($$043$i$i$i$i|0)==(0);
      if ($31) {
       $32 = $88;
       label = 12;
      }
     }
     if ((label|0) == 12) {
      $33 = ($32|0)==(0|0);
      if (!($33)) {
       $34 = HEAP32[$32>>2]|0;
       $35 = (((2352 + (($34*24)|0)|0)) + 8|0);
       $$sink$i = $35;
       label = 15;
       break;
      }
     }
     label = 16;
    }
   } while(0);
   if ((label|0) == 15) {
    $36 = HEAP32[$$sink$i>>2]|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
    } else {
     $$026 = $36;
    }
   }
   if ((label|0) == 16) {
    $38 = ((($4)) + 4|0);
    HEAP32[$38>>2] = $0;
    $39 = HEAP32[20394]|0;
    $40 = ($39|0)==(0|0);
    do {
     if ($40) {
      $54 = $0;
      label = 17;
     } else {
      HEAP32[$5>>2] = 2;
      $41 = ((($5)) + 4|0);
      HEAP32[$41>>2] = $4;
      $42 = (_OPENSSL_LH_retrieve($39,$5)|0);
      $43 = ($42|0)==(0|0);
      if ($43) {
       $$pre$i28 = HEAP32[$38>>2]|0;
       $54 = $$pre$i28;
       label = 17;
       break;
      } else {
       $44 = ((($42)) + 4|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ((($45)) + 8|0);
       $$sink$i36 = $46;
       break;
      }
     }
    } while(0);
    do {
     if ((label|0) == 17) {
      $$043$ph$i$i$i$i32 = 0;$$048$ph$i$i$i$i31 = 1052;$$049$ph$i$i$i$i30 = 0;$89 = 0;
      L33: while(1) {
       $$043$i$i$i$i35 = $$043$ph$i$i$i$i32;$$048$i$i$i$i34 = $$048$ph$i$i$i$i31;$90 = $89;
       while(1) {
        $47 = ($$049$ph$i$i$i$i30|0)<($$048$i$i$i$i34|0);
        if (!($47)) {
         label = 25;
         break L33;
        }
        $48 = (($$048$i$i$i$i34) + ($$049$ph$i$i$i$i30))|0;
        $49 = (($48|0) / 2)&-1;
        $50 = (35848 + ($49<<2)|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = (((2352 + (($51*24)|0)|0)) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $55 = (_strcmp($54,$53)|0);
        $56 = ($55|0)<(0);
        if ($56) {
         $$043$i$i$i$i35 = $55;$$048$i$i$i$i34 = $49;$90 = $50;
        } else {
         break;
        }
       }
       $57 = ($55|0)==(0);
       $58 = (($49) + 1)|0;
       if ($57) {
        $60 = $50;
        label = 26;
        break;
       } else {
        $$043$ph$i$i$i$i32 = $55;$$048$ph$i$i$i$i31 = $$048$i$i$i$i34;$$049$ph$i$i$i$i30 = $58;$89 = $50;
       }
      }
      if ((label|0) == 25) {
       $59 = ($$043$i$i$i$i35|0)==(0);
       if ($59) {
        $60 = $90;
        label = 26;
       }
      }
      if ((label|0) == 26) {
       $61 = ($60|0)==(0|0);
       if (!($61)) {
        $62 = HEAP32[$60>>2]|0;
        $63 = (((2352 + (($62*24)|0)|0)) + 8|0);
        $$sink$i36 = $63;
        break;
       }
      }
      break L1;
     }
    } while(0);
    $64 = HEAP32[$$sink$i36>>2]|0;
    $65 = ($64|0)==(0);
    if ($65) {
     break;
    } else {
     $$026 = $64;
    }
   }
   $66 = ($$026>>>0)<(1061);
   do {
    if ($66) {
     $67 = (((2352 + (($$026*24)|0)|0)) + 8|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(0);
     if ($69) {
      _ERR_put_error(8,103,101,0,0);
      $$0$i39 = 0;
      break;
     } else {
      $70 = (2352 + (($$026*24)|0)|0);
      $$0$i39 = $70;
      break;
     }
    } else {
     $71 = HEAP32[20394]|0;
     $72 = ($71|0)==(0|0);
     if ($72) {
      $$0$i39 = 0;
     } else {
      HEAP32[$2>>2] = 3;
      $73 = ((($2)) + 4|0);
      HEAP32[$73>>2] = $3;
      $74 = ((($3)) + 8|0);
      HEAP32[$74>>2] = $$026;
      $75 = (_OPENSSL_LH_retrieve($71,$2)|0);
      $76 = ($75|0)==(0|0);
      if ($76) {
       _ERR_put_error(8,103,101,0,0);
       $$0$i39 = 0;
       break;
      } else {
       $77 = ((($75)) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $$0$i39 = $78;
       break;
      }
     }
    }
   } while(0);
   $$0 = $$0$i39;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $79 = (_a2d_ASN1_OBJECT(0,0,$0,-1)|0);
 $80 = ($79|0)<(1);
 if ($80) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $81 = (_ASN1_object_size(0,$79,6)|0);
 $82 = ($81|0)<(0);
 if ($82) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $83 = (_CRYPTO_malloc($81,83252,0)|0);
 $84 = ($83|0)==(0|0);
 if ($84) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$8>>2] = $83;
 _ASN1_put_object($8,0,$79,6,0);
 $85 = HEAP32[$8>>2]|0;
 (_a2d_ASN1_OBJECT($85,$79,$0,-1)|0);
 HEAP32[$9>>2] = $83;
 $86 = (_d2i_ASN1_OBJECT(0,$9,$81)|0);
 _CRYPTO_free($83,83252,0);
 $$0 = $86;
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_sn2nid($0) {
 $0 = $0|0;
 var $$0 = 0, $$043$i$i$i = 0, $$043$ph$i$i$i = 0, $$048$i$i$i = 0, $$048$ph$i$i$i = 0, $$049$ph$i$i$i = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp + 8|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[20394]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $18 = $0;
   label = 2;
  } else {
   HEAP32[$2>>2] = 1;
   $5 = ((($2)) + 4|0);
   HEAP32[$5>>2] = $1;
   $6 = (_OPENSSL_LH_retrieve($3,$2)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$pre = HEAP32[$1>>2]|0;
    $18 = $$pre;
    label = 2;
    break;
   } else {
    $8 = ((($6)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($9)) + 8|0);
    $$sink = $10;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 2) {
   $$043$ph$i$i$i = 0;$$048$ph$i$i$i = 1052;$$049$ph$i$i$i = 0;$29 = 0;
   L8: while(1) {
    $$043$i$i$i = $$043$ph$i$i$i;$$048$i$i$i = $$048$ph$i$i$i;$30 = $29;
    while(1) {
     $11 = ($$049$ph$i$i$i|0)<($$048$i$i$i|0);
     if (!($11)) {
      label = 10;
      break L8;
     }
     $12 = (($$048$i$i$i) + ($$049$ph$i$i$i))|0;
     $13 = (($12|0) / 2)&-1;
     $14 = (31640 + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (2352 + (($15*24)|0)|0);
     $17 = HEAP32[$16>>2]|0;
     $19 = (_strcmp($18,$17)|0);
     $20 = ($19|0)<(0);
     if ($20) {
      $$043$i$i$i = $19;$$048$i$i$i = $13;$30 = $14;
     } else {
      break;
     }
    }
    $21 = ($19|0)==(0);
    $22 = (($13) + 1)|0;
    if ($21) {
     $24 = $14;
     break;
    } else {
     $$043$ph$i$i$i = $19;$$048$ph$i$i$i = $$048$i$i$i;$$049$ph$i$i$i = $22;$29 = $14;
    }
   }
   if ((label|0) == 10) {
    $23 = ($$043$i$i$i|0)==(0);
    if ($23) {
     $24 = $30;
    } else {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $25 = ($24|0)==(0|0);
   if ($25) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $26 = HEAP32[$24>>2]|0;
    $27 = (((2352 + (($26*24)|0)|0)) + 8|0);
    $$sink = $27;
    break;
   }
  }
 } while(0);
 $28 = HEAP32[$$sink>>2]|0;
 $$0 = $28;
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_ln2nid($0) {
 $0 = $0|0;
 var $$0 = 0, $$043$i$i$i = 0, $$043$ph$i$i$i = 0, $$048$i$i$i = 0, $$048$ph$i$i$i = 0, $$049$ph$i$i$i = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = HEAP32[20394]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $19 = $0;
   label = 2;
  } else {
   HEAP32[$2>>2] = 2;
   $6 = ((($2)) + 4|0);
   HEAP32[$6>>2] = $1;
   $7 = (_OPENSSL_LH_retrieve($4,$2)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$pre = HEAP32[$3>>2]|0;
    $19 = $$pre;
    label = 2;
    break;
   } else {
    $9 = ((($7)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($10)) + 8|0);
    $$sink = $11;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 2) {
   $$043$ph$i$i$i = 0;$$048$ph$i$i$i = 1052;$$049$ph$i$i$i = 0;$30 = 0;
   L8: while(1) {
    $$043$i$i$i = $$043$ph$i$i$i;$$048$i$i$i = $$048$ph$i$i$i;$31 = $30;
    while(1) {
     $12 = ($$049$ph$i$i$i|0)<($$048$i$i$i|0);
     if (!($12)) {
      label = 10;
      break L8;
     }
     $13 = (($$048$i$i$i) + ($$049$ph$i$i$i))|0;
     $14 = (($13|0) / 2)&-1;
     $15 = (35848 + ($14<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (((2352 + (($16*24)|0)|0)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $20 = (_strcmp($19,$18)|0);
     $21 = ($20|0)<(0);
     if ($21) {
      $$043$i$i$i = $20;$$048$i$i$i = $14;$31 = $15;
     } else {
      break;
     }
    }
    $22 = ($20|0)==(0);
    $23 = (($14) + 1)|0;
    if ($22) {
     $25 = $15;
     break;
    } else {
     $$043$ph$i$i$i = $20;$$048$ph$i$i$i = $$048$i$i$i;$$049$ph$i$i$i = $23;$30 = $15;
    }
   }
   if ((label|0) == 10) {
    $24 = ($$043$i$i$i|0)==(0);
    if ($24) {
     $25 = $31;
    } else {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = HEAP32[$25>>2]|0;
    $28 = (((2352 + (($27*24)|0)|0)) + 8|0);
    $$sink = $28;
    break;
   }
  }
 } while(0);
 $29 = HEAP32[$$sink>>2]|0;
 $$0 = $29;
 STACKTOP = sp;return ($$0|0);
}
function _OBJ_obj2txt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0127$be = 0, $$0127220 = 0, $$0130170 = 0, $$0134219 = 0, $$0136$ph = 0, $$0136211 = 0, $$0142$lcssa = 0, $$0142218 = 0, $$0147$ph = 0, $$0147210 = 0, $$0150217 = 0, $$0152$be = 0, $$0152216 = 0, $$0159215 = 0, $$0166 = 0, $$1128 = 0, $$1135$ph = 0, $$1137 = 0, $$1143$ph = 0, $$1148176 = 0;
 var $$1153 = 0, $$1160$ph = 0, $$2 = 0, $$2129 = 0, $$2144 = 0, $$2154 = 0, $$2163$be = 0, $$2163$lcssa = 0, $$2163214 = 0, $$3 = 0, $$3145177 = 0, $$3155 = 0, $$3164 = 0, $$4 = 0, $$4140 = 0, $$4146181 = 0, $$4156 = 0, $$5141 = 0, $$6 = 0, $$6158 = 0;
 var $$pn = 0, $$sink = 0, $$sink184 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond168 = 0, $or$cond168209 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp;
 $4 = sp + 64|0;
 $5 = sp + 40|0;
 $6 = sp + 32|0;
 $7 = sp + 8|0;
 $8 = sp + 72|0;
 $9 = ($0|0)!=(0|0);
 $10 = ($1|0)>(0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  HEAP8[$0>>0] = 0;
 }
 $11 = ($2|0)==(0|0);
 if ($11) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $12 = ((($2)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $15 = ($3|0)==(0);
 L10: do {
  if ($15) {
   $16 = (_OBJ_obj2nid($2)|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    $18 = ($16>>>0)<(1061);
    do {
     if ($18) {
      $19 = (((2352 + (($16*24)|0)|0)) + 8|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0);
      if ($21) {
       _ERR_put_error(8,102,101,0,0);
       label = 15;
       break;
      } else {
       $22 = (((2352 + (($16*24)|0)|0)) + 4|0);
       $$sink = $22;
       label = 16;
       break;
      }
     } else {
      $23 = HEAP32[20394]|0;
      $24 = ($23|0)==(0|0);
      if ($24) {
       label = 15;
      } else {
       HEAP32[$6>>2] = 3;
       $25 = ((($6)) + 4|0);
       HEAP32[$25>>2] = $7;
       $26 = ((($7)) + 8|0);
       HEAP32[$26>>2] = $16;
       $27 = (_OPENSSL_LH_retrieve($23,$6)|0);
       $28 = ($27|0)==(0|0);
       if ($28) {
        _ERR_put_error(8,102,101,0,0);
        label = 15;
        break;
       } else {
        $29 = ((($27)) + 4|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = ((($30)) + 4|0);
        $$sink = $31;
        label = 16;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 17;
    }
    else if ((label|0) == 16) {
     $32 = HEAP32[$$sink>>2]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      label = 17;
     } else {
      $$0130170 = $32;
     }
    }
    do {
     if ((label|0) == 17) {
      do {
       if ($18) {
        $34 = (((2352 + (($16*24)|0)|0)) + 8|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = ($35|0)==(0);
        if ($36) {
         _ERR_put_error(8,104,101,0,0);
         label = 25;
         break;
        } else {
         $37 = (2352 + (($16*24)|0)|0);
         $$sink184 = $37;
         label = 26;
         break;
        }
       } else {
        $38 = HEAP32[20394]|0;
        $39 = ($38|0)==(0|0);
        if ($39) {
         label = 25;
        } else {
         HEAP32[$4>>2] = 3;
         $40 = ((($4)) + 4|0);
         HEAP32[$40>>2] = $5;
         $41 = ((($5)) + 8|0);
         HEAP32[$41>>2] = $16;
         $42 = (_OPENSSL_LH_retrieve($38,$4)|0);
         $43 = ($42|0)==(0|0);
         if ($43) {
          _ERR_put_error(8,104,101,0,0);
          label = 25;
          break;
         } else {
          $44 = ((($42)) + 4|0);
          $45 = HEAP32[$44>>2]|0;
          $$sink184 = $45;
          label = 26;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 25) {
       break L10;
      }
      else if ((label|0) == 26) {
       $46 = HEAP32[$$sink184>>2]|0;
       $47 = ($46|0)==(0|0);
       if ($47) {
        break L10;
       } else {
        $$0130170 = $46;
        break;
       }
      }
     }
    } while(0);
    if ($9) {
     (_OPENSSL_strlcpy($0,$$0130170,$1)|0);
    }
    $48 = (_strlen($$0130170)|0);
    $$2 = $48;
    STACKTOP = sp;return ($$2|0);
   }
  }
 } while(0);
 $49 = ((($2)) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)>(0);
 L47: do {
  if ($51) {
   $52 = HEAP32[$12>>2]|0;
   $$0127220 = $0;$$0134219 = $52;$$0142218 = 0;$$0150217 = 1;$$0152216 = $1;$$0159215 = $50;$$2163214 = 0;
   L49: while(1) {
    $$0136$ph = 0;$$0147$ph = 0;$$1135$ph = $$0134219;$$1143$ph = $$0142218;$$1160$ph = $$0159215;
    L51: while(1) {
     $53 = HEAP8[$$1135$ph>>0]|0;
     $54 = (($$1160$ph) + -1)|0;
     $55 = ($54|0)!=(0);
     $56 = $53&255;
     $57 = $56 & 128;
     $58 = ($57|0)==(0);
     $or$cond168209 = $55 | $58;
     if ($or$cond168209) {
      $$0136211 = $$0136$ph;$$0147210 = $$0147$ph;$$pn = $$1135$ph;$119 = $58;$62 = $56;$77 = $54;
     } else {
      $$4146181 = $$1143$ph;
      break L49;
     }
     while(1) {
      $59 = ((($$pn)) + 1|0);
      $60 = ($$0147210|0)==(0);
      $61 = $62 & 127;
      if ($60) {
       $65 = $61 | $$0136211;
       $$1137 = $65;
      } else {
       $63 = (_BN_add_word($$1143$ph,$61)|0);
       $64 = ($63|0)==(0);
       if ($64) {
        $$4146181 = $$1143$ph;
        break L49;
       } else {
        $$1137 = $$0136211;
       }
      }
      if ($119) {
       break L51;
      }
      $66 = ($$1137>>>0)>(33554431);
      $or$cond3 = $60 & $66;
      if ($or$cond3) {
       label = 39;
       break;
      }
      if (!($60)) {
       $$1148176 = $$0147210;$$3145177 = $$1143$ph;
       break;
      }
      $74 = $$1137 << 7;
      $75 = HEAP8[$59>>0]|0;
      $76 = (($77) + -1)|0;
      $78 = ($76|0)!=(0);
      $79 = $75&255;
      $80 = $79 & 128;
      $81 = ($80|0)==(0);
      $or$cond168 = $78 | $81;
      if ($or$cond168) {
       $$0136211 = $74;$$0147210 = 0;$$pn = $59;$119 = $81;$62 = $79;$77 = $76;
      } else {
       $$4146181 = $$1143$ph;
       break L49;
      }
     }
     if ((label|0) == 39) {
      label = 0;
      $67 = ($$1143$ph|0)==(0|0);
      if ($67) {
       $68 = (_BN_new()|0);
       $69 = ($68|0)==(0|0);
       if ($69) {
        $$4146181 = 0;
        break L49;
       } else {
        $$2144 = $68;
       }
      } else {
       $$2144 = $$1143$ph;
      }
      $70 = (_BN_set_word($$2144,$$1137)|0);
      $71 = ($70|0)==(0);
      if ($71) {
       $$4146181 = $$2144;
       break L49;
      } else {
       $$1148176 = 1;$$3145177 = $$2144;
      }
     }
     $72 = (_BN_lshift($$3145177,$$3145177,7)|0);
     $73 = ($72|0)==(0);
     if ($73) {
      $$4146181 = $$3145177;
      break L49;
     } else {
      $$0136$ph = $$1137;$$0147$ph = $$1148176;$$1135$ph = $59;$$1143$ph = $$3145177;$$1160$ph = $77;
     }
    }
    $82 = ($$0150217|0)==(0);
    if ($82) {
     $$2129 = $$0127220;$$2154 = $$0152216;$$3164 = $$2163214;$$5141 = $$1137;
    } else {
     $83 = ($$1137>>>0)>(79);
     do {
      if ($83) {
       if ($60) {
        $86 = (($$1137) + -80)|0;
        $$0166 = 2;$$4140 = $86;
        break;
       } else {
        $84 = (_BN_sub_word($$1143$ph,80)|0);
        $85 = ($84|0)==(0);
        if ($85) {
         $$4146181 = $$1143$ph;
         break L49;
        } else {
         $$0166 = 2;$$4140 = $$1137;
         break;
        }
       }
      } else {
       $87 = (($$1137>>>0) / 40)&-1;
       $88 = Math_imul($87, -40)|0;
       $89 = (($88) + ($$1137))|0;
       $$0166 = $87;$$4140 = $89;
      }
     } while(0);
     $90 = ($$0127220|0)!=(0|0);
     $91 = ($$0152216|0)>(1);
     $or$cond5 = $91 & $90;
     $92 = ((($$0127220)) + 1|0);
     if ($or$cond5) {
      $93 = (($$0152216) + -1)|0;
      $94 = (($$0166) + 48)|0;
      $95 = $94&255;
      HEAP8[$$0127220>>0] = $95;
      HEAP8[$92>>0] = 0;
      $$1128 = $92;$$1153 = $93;
     } else {
      $$1128 = $$0127220;$$1153 = $$0152216;
     }
     $96 = (($$2163214) + 1)|0;
     $$2129 = $$1128;$$2154 = $$1153;$$3164 = $96;$$5141 = $$4140;
    }
    if ($60) {
     HEAP32[$vararg_buffer>>2] = $$5141;
     (_BIO_snprintf($8,26,80182,$vararg_buffer)|0);
     $110 = (_strlen($8)|0);
     $111 = ($$2129|0)!=(0|0);
     $112 = ($$2154|0)>(0);
     $or$cond7 = $112 & $111;
     do {
      if ($or$cond7) {
       (_OPENSSL_strlcpy($$2129,$8,$$2154)|0);
       $113 = ($$2154|0)<($110|0);
       if ($113) {
        $114 = (($$2129) + ($$2154)|0);
        $$6 = $114;$$6158 = 0;
        break;
       } else {
        $115 = (($$2129) + ($110)|0);
        $116 = (($$2154) - ($110))|0;
        $$6 = $115;$$6158 = $116;
        break;
       }
      } else {
       $$6 = $$2129;$$6158 = $$2154;
      }
     } while(0);
     $117 = (($110) + ($$3164))|0;
     $$0127$be = $$6;$$0152$be = $$6158;$$2163$be = $117;
    } else {
     $97 = (_BN_bn2dec($$1143$ph)|0);
     $98 = ($97|0)==(0|0);
     if ($98) {
      $$4146181 = $$1143$ph;
      break;
     }
     $99 = (_strlen($97)|0);
     $100 = ($$2129|0)==(0|0);
     do {
      if ($100) {
       $$4 = 0;$$4156 = $$2154;
      } else {
       $101 = ($$2154|0)>(1);
       $102 = ((($$2129)) + 1|0);
       if ($101) {
        $103 = (($$2154) + -1)|0;
        HEAP8[$$2129>>0] = 46;
        HEAP8[$102>>0] = 0;
        $$3 = $102;$$3155 = $103;
       } else {
        $$3 = $$2129;$$3155 = $$2154;
       }
       (_OPENSSL_strlcpy($$3,$97,$$3155)|0);
       $104 = ($$3155|0)<($99|0);
       if ($104) {
        $105 = (($$3) + ($$3155)|0);
        $$4 = $105;$$4156 = 0;
        break;
       } else {
        $106 = (($$3) + ($99)|0);
        $107 = (($$3155) - ($99))|0;
        $$4 = $106;$$4156 = $107;
        break;
       }
      }
     } while(0);
     $108 = (($$3164) + 1)|0;
     $109 = (($108) + ($99))|0;
     _CRYPTO_free($97,83252,0);
     $$0127$be = $$4;$$0152$be = $$4156;$$2163$be = $109;
    }
    $118 = ($77|0)>(0);
    if ($118) {
     $$0127220 = $$0127$be;$$0134219 = $59;$$0142218 = $$1143$ph;$$0150217 = 0;$$0152216 = $$0152$be;$$0159215 = $77;$$2163214 = $$2163$be;
    } else {
     $$0142$lcssa = $$1143$ph;$$2163$lcssa = $$2163$be;
     break L47;
    }
   }
   _BN_free($$4146181);
   $$2 = -1;
   STACKTOP = sp;return ($$2|0);
  } else {
   $$0142$lcssa = 0;$$2163$lcssa = 0;
  }
 } while(0);
 _BN_free($$0142$lcssa);
 $$2 = $$2163$lcssa;
 STACKTOP = sp;return ($$2|0);
}
function _OBJ_bsearch_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i = 0, $$0$ph$i = 0, $$043$i = 0, $$043$ph$i = 0, $$048$i = 0, $$048$ph$i = 0, $$049$ph$i = 0, $$050$i = 0, $$156$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==(0);
 if ($5) {
  $$050$i = 0;
  return ($$050$i|0);
 } else {
  $$0$ph$i = 0;$$043$ph$i = 0;$$048$ph$i = $2;$$049$ph$i = 0;
 }
 L3: while(1) {
  $$0$i = $$0$ph$i;$$043$i = $$043$ph$i;$$048$i = $$048$ph$i;
  while(1) {
   $6 = ($$049$ph$i|0)<($$048$i|0);
   if (!($6)) {
    label = 6;
    break L3;
   }
   $7 = (($$048$i) + ($$049$ph$i))|0;
   $8 = (($7|0) / 2)&-1;
   $9 = Math_imul($8, $3)|0;
   $10 = (($1) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$4 & 63]($0,$10)|0);
   $12 = ($11|0)<(0);
   if ($12) {
    $$0$i = $10;$$043$i = $11;$$048$i = $8;
   } else {
    break;
   }
  }
  $13 = ($11|0)==(0);
  $14 = (($8) + 1)|0;
  if ($13) {
   $$156$i = $10;
   break;
  } else {
   $$0$ph$i = $10;$$043$ph$i = $11;$$048$ph$i = $$048$i;$$049$ph$i = $14;
  }
 }
 if ((label|0) == 6) {
  $15 = ($$043$i|0)==(0);
  if ($15) {
   $$156$i = $$0$i;
  } else {
   $$050$i = 0;
   return ($$050$i|0);
  }
 }
 $$050$i = $$156$i;
 return ($$050$i|0);
}
function _OBJ_bsearch_ex_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$ph = 0, $$043 = 0, $$043$ph = 0, $$045 = 0, $$045$ph = 0, $$048 = 0, $$048$ph = 0, $$049$ph = 0, $$050 = 0, $$14655 = 0, $$156 = 0, $$247 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $6 = ($2|0)==(0);
 if ($6) {
  $$050 = 0;
  return ($$050|0);
 } else {
  $$0$ph = 0;$$043$ph = 0;$$045$ph = 0;$$048$ph = $2;$$049$ph = 0;
 }
 L3: while(1) {
  $$0 = $$0$ph;$$043 = $$043$ph;$$045 = $$045$ph;$$048 = $$048$ph;
  while(1) {
   $7 = ($$049$ph|0)<($$048|0);
   if (!($7)) {
    label = 7;
    break L3;
   }
   $8 = (($$048) + ($$049$ph))|0;
   $9 = (($8|0) / 2)&-1;
   $10 = Math_imul($9, $3)|0;
   $11 = (($1) + ($10)|0);
   $12 = (FUNCTION_TABLE_iii[$4 & 63]($0,$11)|0);
   $13 = ($12|0)<(0);
   if ($13) {
    $$0 = $11;$$043 = $12;$$045 = $9;$$048 = $9;
   } else {
    break;
   }
  }
  $14 = ($12|0)==(0);
  if ($14) {
   $$14655 = $9;$$156 = $11;$21 = 0;
   break;
  }
  $15 = (($9) + 1)|0;
  $$0$ph = $11;$$043$ph = $12;$$045$ph = $9;$$048$ph = $$048;$$049$ph = $15;
 }
 if ((label|0) == 7) {
  $16 = ($$043|0)!=(0);
  $17 = $5 & 1;
  $18 = ($17|0)==(0);
  $or$cond = $18 & $16;
  if ($or$cond) {
   $$050 = 0;
   return ($$050|0);
  } else {
   $$14655 = $$045;$$156 = $$0;$21 = $16;
  }
 }
 $19 = $5 & 2;
 $20 = ($19|0)==(0);
 $or$cond53 = $20 | $21;
 if ($or$cond53) {
  $$050 = $$156;
  return ($$050|0);
 } else {
  $$247 = $$14655;
 }
 while(1) {
  $22 = ($$247|0)>(0);
  if (!($22)) {
   break;
  }
  $23 = (($$247) + -1)|0;
  $24 = Math_imul($23, $3)|0;
  $25 = (($1) + ($24)|0);
  $26 = (FUNCTION_TABLE_iii[$4 & 63]($0,$25)|0);
  $27 = ($26|0)==(0);
  if ($27) {
   $$247 = $23;
  } else {
   break;
  }
 }
 $28 = Math_imul($$247, $3)|0;
 $29 = (($1) + ($28)|0);
 $$050 = $29;
 return ($$050|0);
}
function _OBJ_create($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$018 = 0, $$043$i$i$i$i = 0, $$043$i$i$i$i27 = 0, $$043$ph$i$i$i$i = 0, $$043$ph$i$i$i$i24 = 0, $$048$i$i$i$i = 0, $$048$i$i$i$i26 = 0, $$048$ph$i$i$i$i = 0, $$048$ph$i$i$i$i23 = 0, $$049$ph$i$i$i$i = 0, $$049$ph$i$i$i$i22 = 0, $$pre$i = 0, $$pre$i20 = 0, $$sink$i = 0, $$sink$i28 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 32|0;
 $5 = sp + 8|0;
 $6 = sp;
 HEAP32[$5>>2] = $1;
 $7 = HEAP32[20394]|0;
 $8 = ($7|0)==(0|0);
 do {
  if ($8) {
   $22 = $1;
   label = 2;
  } else {
   HEAP32[$6>>2] = 1;
   $9 = ((($6)) + 4|0);
   HEAP32[$9>>2] = $5;
   $10 = (_OPENSSL_LH_retrieve($7,$6)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$pre$i = HEAP32[$5>>2]|0;
    $22 = $$pre$i;
    label = 2;
    break;
   } else {
    $12 = ((($10)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 8|0);
    $$sink$i = $14;
    label = 14;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 2) {
   $$043$ph$i$i$i$i = 0;$$048$ph$i$i$i$i = 1052;$$049$ph$i$i$i$i = 0;$71 = 0;
   L8: while(1) {
    $$043$i$i$i$i = $$043$ph$i$i$i$i;$$048$i$i$i$i = $$048$ph$i$i$i$i;$72 = $71;
    while(1) {
     $15 = ($$049$ph$i$i$i$i|0)<($$048$i$i$i$i|0);
     if (!($15)) {
      label = 10;
      break L8;
     }
     $16 = (($$048$i$i$i$i) + ($$049$ph$i$i$i$i))|0;
     $17 = (($16|0) / 2)&-1;
     $18 = (31640 + ($17<<2)|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (2352 + (($19*24)|0)|0);
     $21 = HEAP32[$20>>2]|0;
     $23 = (_strcmp($22,$21)|0);
     $24 = ($23|0)<(0);
     if ($24) {
      $$043$i$i$i$i = $23;$$048$i$i$i$i = $17;$72 = $18;
     } else {
      break;
     }
    }
    $25 = ($23|0)==(0);
    $26 = (($17) + 1)|0;
    if ($25) {
     $28 = $18;
     label = 11;
     break;
    } else {
     $$043$ph$i$i$i$i = $23;$$048$ph$i$i$i$i = $$048$i$i$i$i;$$049$ph$i$i$i$i = $26;$71 = $18;
    }
   }
   if ((label|0) == 10) {
    $27 = ($$043$i$i$i$i|0)==(0);
    if ($27) {
     $28 = $72;
     label = 11;
    }
   }
   if ((label|0) == 11) {
    $29 = ($28|0)==(0|0);
    if (!($29)) {
     $30 = HEAP32[$28>>2]|0;
     $31 = (((2352 + (($30*24)|0)|0)) + 8|0);
     $$sink$i = $31;
     label = 14;
     break;
    }
   }
   label = 15;
  }
 } while(0);
 if ((label|0) == 14) {
  $32 = HEAP32[$$sink$i>>2]|0;
  $33 = ($32|0)==(0);
  if ($33) {
   label = 15;
  }
 }
 do {
  if ((label|0) == 15) {
   $34 = ((($3)) + 4|0);
   HEAP32[$34>>2] = $2;
   $35 = HEAP32[20394]|0;
   $36 = ($35|0)==(0|0);
   do {
    if ($36) {
     $50 = $2;
     label = 16;
    } else {
     HEAP32[$4>>2] = 2;
     $37 = ((($4)) + 4|0);
     HEAP32[$37>>2] = $3;
     $38 = (_OPENSSL_LH_retrieve($35,$4)|0);
     $39 = ($38|0)==(0|0);
     if ($39) {
      $$pre$i20 = HEAP32[$34>>2]|0;
      $50 = $$pre$i20;
      label = 16;
      break;
     } else {
      $40 = ((($38)) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($41)) + 8|0);
      $$sink$i28 = $42;
      label = 28;
      break;
     }
    }
   } while(0);
   do {
    if ((label|0) == 16) {
     $$043$ph$i$i$i$i24 = 0;$$048$ph$i$i$i$i23 = 1052;$$049$ph$i$i$i$i22 = 0;$73 = 0;
     L31: while(1) {
      $$043$i$i$i$i27 = $$043$ph$i$i$i$i24;$$048$i$i$i$i26 = $$048$ph$i$i$i$i23;$74 = $73;
      while(1) {
       $43 = ($$049$ph$i$i$i$i22|0)<($$048$i$i$i$i26|0);
       if (!($43)) {
        label = 24;
        break L31;
       }
       $44 = (($$048$i$i$i$i26) + ($$049$ph$i$i$i$i22))|0;
       $45 = (($44|0) / 2)&-1;
       $46 = (35848 + ($45<<2)|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = (((2352 + (($47*24)|0)|0)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $51 = (_strcmp($50,$49)|0);
       $52 = ($51|0)<(0);
       if ($52) {
        $$043$i$i$i$i27 = $51;$$048$i$i$i$i26 = $45;$74 = $46;
       } else {
        break;
       }
      }
      $53 = ($51|0)==(0);
      $54 = (($45) + 1)|0;
      if ($53) {
       $56 = $46;
       label = 25;
       break;
      } else {
       $$043$ph$i$i$i$i24 = $51;$$048$ph$i$i$i$i23 = $$048$i$i$i$i26;$$049$ph$i$i$i$i22 = $54;$73 = $46;
      }
     }
     if ((label|0) == 24) {
      $55 = ($$043$i$i$i$i27|0)==(0);
      if ($55) {
       $56 = $74;
       label = 25;
      }
     }
     if ((label|0) == 25) {
      $57 = ($56|0)==(0|0);
      if (!($57)) {
       $58 = HEAP32[$56>>2]|0;
       $59 = (((2352 + (($58*24)|0)|0)) + 8|0);
       $$sink$i28 = $59;
       label = 28;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 28) {
    $60 = HEAP32[$$sink$i28>>2]|0;
    $61 = ($60|0)==(0);
    if (!($61)) {
     break;
    }
   }
   $62 = (_OBJ_txt2obj($0,1)|0);
   $63 = ($62|0)==(0|0);
   if ($63) {
    $$018 = 0;
    STACKTOP = sp;return ($$018|0);
   }
   $64 = (_OBJ_obj2nid($62)|0);
   $65 = ($64|0)==(0);
   if ($65) {
    $66 = HEAP32[587]|0;
    $67 = (($66) + 1)|0;
    HEAP32[587] = $67;
    $68 = ((($62)) + 8|0);
    HEAP32[$68>>2] = $66;
    HEAP32[$62>>2] = $1;
    $69 = ((($62)) + 4|0);
    HEAP32[$69>>2] = $2;
    $70 = (_OBJ_add_object($62)|0);
    HEAP32[$62>>2] = 0;
    HEAP32[$69>>2] = 0;
    $$0 = $70;
   } else {
    _ERR_put_error(8,100,102,0,0);
    $$0 = 0;
   }
   _ASN1_OBJECT_free($62);
   $$018 = $$0;
   STACKTOP = sp;return ($$018|0);
  }
 } while(0);
 _ERR_put_error(8,100,102,0,0);
 $$018 = 0;
 STACKTOP = sp;return ($$018|0);
}
function _OBJ_length($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _OBJ_dup($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = $0;
  return ($$0|0);
 }
 $6 = (_ASN1_OBJECT_new()|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _ERR_put_error(8,101,13,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = $8 | 13;
 $10 = ((($6)) + 20|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = ((($0)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_CRYPTO_memdup($15,$12,83252,0)|0);
  $17 = ((($6)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ($16|0)==(0|0);
  if (!($18)) {
   $$pre = HEAP32[$11>>2]|0;
   $20 = $$pre;
   label = 8;
  }
 } else {
  $20 = $12;
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $19 = ((($6)) + 12|0);
   HEAP32[$19>>2] = $20;
   $21 = ((($0)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($6)) + 8|0);
   HEAP32[$23>>2] = $22;
   $24 = ((($0)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = (_CRYPTO_strdup($25,83252,0)|0);
    $28 = ((($6)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = ($27|0)==(0|0);
    if ($29) {
     break;
    }
   }
   $30 = HEAP32[$0>>2]|0;
   $31 = ($30|0)==(0|0);
   if ($31) {
    $$0 = $6;
    return ($$0|0);
   }
   $32 = (_CRYPTO_strdup($30,83252,0)|0);
   HEAP32[$6>>2] = $32;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    $$0 = $6;
    return ($$0|0);
   }
  }
 } while(0);
 _ASN1_OBJECT_free($6);
 _ERR_put_error(8,101,65,0,0);
 $$0 = 0;
 return ($$0|0);
}
function _OBJ_sigid_free() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20395]|0;
 _OPENSSL_sk_pop_free($0,38);
 HEAP32[20395] = 0;
 $1 = HEAP32[20396]|0;
 _OPENSSL_sk_free($1);
 HEAP32[20396] = 0;
 return;
}
function _sid_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _CRYPTO_free($0,83252,0);
 return;
}
function _PKCS7_SIGNER_INFO_get0_algs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)==(0|0);
 if (!($4)) {
  $5 = ((($0)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$1>>2] = $6;
 }
 $7 = ($2|0)==(0|0);
 if (!($7)) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$2>>2] = $9;
 }
 $10 = ($3|0)==(0|0);
 if ($10) {
  return;
 }
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$3>>2] = $12;
 return;
}
function _PKCS7_RECIP_INFO_get0_alg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $4;
 return;
}
function _rsa_pub_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (_X509_PUBKEY_get0_param(0,$2,$3,0,$1)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $$0 = 0;
  } else {
   $6 = HEAP32[$3>>2]|0;
   $7 = (_d2i_RSAPublicKey(0,$2,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    _ERR_put_error(4,139,4,0,0);
    $$0 = 0;
    break;
   } else {
    (_EVP_PKEY_assign($0,6,$7)|0);
    $$0 = 1;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _rsa_pub_encode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_i2d_RSAPublicKey($4,$2)|0);
 $6 = ($5|0)<(1);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_OBJ_nid2obj(6)|0);
 $8 = HEAP32[$2>>2]|0;
 $9 = (_X509_PUBKEY_set0_param($0,$7,5,0,$8,$5)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$2>>2]|0;
 _CRYPTO_free($11,83252,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _rsa_pub_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_BN_cmp($5,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$2>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$6>>2]|0;
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_BN_cmp($14,$17)|0);
  $19 = ($18|0)==(0);
  $$ = $19&1;
  return ($$|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _rsa_pub_print($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_do_rsa_print($0,$5,$2,0)|0);
 return ($6|0);
}
function _rsa_priv_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (_PKCS8_pkey_get0(0,$2,$3,0,$1)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $$0 = 0;
  } else {
   $6 = HEAP32[$3>>2]|0;
   $7 = (_d2i_RSAPrivateKey(0,$2,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    _ERR_put_error(4,147,4,0,0);
    $$0 = 0;
    break;
   } else {
    (_EVP_PKEY_assign($0,6,$7)|0);
    $$0 = 1;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _rsa_priv_encode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_i2d_RSAPrivateKey($4,$2)|0);
 $6 = ($5|0)<(1);
 if ($6) {
  _ERR_put_error(4,138,65,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_OBJ_nid2obj(6)|0);
 $8 = HEAP32[$2>>2]|0;
 $9 = (_PKCS8_pkey_set0($0,$7,0,5,0,$8,$5)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _ERR_put_error(4,138,65,0,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _rsa_priv_print($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_do_rsa_print($0,$5,$2,1)|0);
 return ($6|0);
}
function _int_rsa_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_RSA_size($2)|0);
 return ($3|0);
}
function _rsa_bits($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_BN_num_bits($4)|0);
 return ($5|0);
}
function _rsa_security_bits($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_RSA_security_bits($2)|0);
 return ($3|0);
}
function _rsa_sig_print($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $cond = 0;
 var $not$ = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = (_OBJ_obj2nid($5)|0);
 $7 = ($6|0)==(912);
 if ($7) {
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_ASN1_TYPE_unpack_sequence(40604,$9)|0);
  $11 = ($10|0)==(0|0);
  if ($11) {
   $21 = (_BIO_puts($0,80206)|0);
   $not$$i = ($21|0)>(0);
   _RSA_PSS_PARAMS_free(0);
   _X509_ALGOR_free(0);
   if (!($not$$i)) {
    $$1 = 0;
    return ($$1|0);
   }
  } else {
   $12 = ((($10)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $$0 = 0;
   } else {
    $15 = HEAP32[$13>>2]|0;
    $16 = (_OBJ_obj2nid($15)|0);
    $17 = ($16|0)==(911);
    if ($17) {
     $18 = ((($13)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (_ASN1_TYPE_unpack_sequence(1356,$19)|0);
     $$0 = $20;
    } else {
     $$0 = 0;
    }
   }
   $22 = (_BIO_puts($0,80869)|0);
   $23 = ($22|0)<(1);
   if ($23) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $24 = (_BIO_indent($0,$3,128)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $26 = (_BIO_puts($0,80233)|0);
   $27 = ($26|0)<(1);
   if ($27) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $28 = HEAP32[$10>>2]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $33 = (_BIO_puts($0,80250)|0);
    $34 = ($33|0)<(1);
    if ($34) {
     _RSA_PSS_PARAMS_free($10);
     _X509_ALGOR_free($$0);
     $$1 = 0;
     return ($$1|0);
    }
   } else {
    $30 = HEAP32[$28>>2]|0;
    $31 = (_i2a_ASN1_OBJECT($0,$30)|0);
    $32 = ($31|0)<(1);
    if ($32) {
     _RSA_PSS_PARAMS_free($10);
     _X509_ALGOR_free($$0);
     $$1 = 0;
     return ($$1|0);
    }
   }
   $35 = (_BIO_puts($0,80869)|0);
   $36 = ($35|0)<(1);
   if ($36) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $37 = (_BIO_indent($0,$3,128)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $39 = (_BIO_puts($0,80265)|0);
   $40 = ($39|0)<(1);
   if ($40) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $41 = HEAP32[$12>>2]|0;
   $42 = ($41|0)==(0|0);
   do {
    if ($42) {
     $54 = (_BIO_puts($0,80297)|0);
     $55 = ($54|0)<(1);
     if ($55) {
      _RSA_PSS_PARAMS_free($10);
      _X509_ALGOR_free($$0);
      $$1 = 0;
      return ($$1|0);
     }
    } else {
     $43 = HEAP32[$41>>2]|0;
     $44 = (_i2a_ASN1_OBJECT($0,$43)|0);
     $45 = ($44|0)<(1);
     if ($45) {
      _RSA_PSS_PARAMS_free($10);
      _X509_ALGOR_free($$0);
      $$1 = 0;
      return ($$1|0);
     }
     $46 = (_BIO_puts($0,80282)|0);
     $47 = ($46|0)<(1);
     if ($47) {
      _RSA_PSS_PARAMS_free($10);
      _X509_ALGOR_free($$0);
      $$1 = 0;
      return ($$1|0);
     }
     $48 = ($$0|0)==(0|0);
     if ($48) {
      $52 = (_BIO_puts($0,80289)|0);
      $53 = ($52|0)<(1);
      if (!($53)) {
       break;
      }
      _RSA_PSS_PARAMS_free($10);
      _X509_ALGOR_free(0);
      $$1 = 0;
      return ($$1|0);
     } else {
      $49 = HEAP32[$$0>>2]|0;
      $50 = (_i2a_ASN1_OBJECT($0,$49)|0);
      $51 = ($50|0)<(1);
      if (!($51)) {
       break;
      }
      _RSA_PSS_PARAMS_free($10);
      _X509_ALGOR_free($$0);
      $$1 = 0;
      return ($$1|0);
     }
    }
   } while(0);
   (_BIO_puts($0,80869)|0);
   $56 = (_BIO_indent($0,$3,128)|0);
   $57 = ($56|0)==(0);
   if ($57) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $58 = (_BIO_puts($0,80322)|0);
   $59 = ($58|0)<(1);
   if ($59) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $60 = ((($10)) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if ($62) {
    $65 = (_BIO_puts($0,80338)|0);
    $66 = ($65|0)<(1);
    if ($66) {
     _RSA_PSS_PARAMS_free($10);
     _X509_ALGOR_free($$0);
     $$1 = 0;
     return ($$1|0);
    }
   } else {
    $63 = (_i2a_ASN1_INTEGER($0,$61)|0);
    $64 = ($63|0)<(1);
    if ($64) {
     _RSA_PSS_PARAMS_free($10);
     _X509_ALGOR_free($$0);
     $$1 = 0;
     return ($$1|0);
    }
   }
   (_BIO_puts($0,80869)|0);
   $67 = (_BIO_indent($0,$3,128)|0);
   $68 = ($67|0)==(0);
   if ($68) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $69 = (_BIO_puts($0,80351)|0);
   $70 = ($69|0)<(1);
   if ($70) {
    _RSA_PSS_PARAMS_free($10);
    _X509_ALGOR_free($$0);
    $$1 = 0;
    return ($$1|0);
   }
   $71 = ((($10)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(0|0);
   do {
    if ($73) {
     $76 = (_BIO_puts($0,80369)|0);
     $77 = ($76|0)<(1);
     if (!($77)) {
      break;
     }
     _RSA_PSS_PARAMS_free($10);
     _X509_ALGOR_free($$0);
     $$1 = 0;
     return ($$1|0);
    } else {
     $74 = (_i2a_ASN1_INTEGER($0,$72)|0);
     $75 = ($74|0)<(1);
     if (!($75)) {
      break;
     }
     _RSA_PSS_PARAMS_free($10);
     _X509_ALGOR_free($$0);
     $$1 = 0;
     return ($$1|0);
    }
   } while(0);
   (_BIO_puts($0,80869)|0);
   _RSA_PSS_PARAMS_free($10);
   _X509_ALGOR_free($$0);
  }
  $79 = ($2|0)==(0|0);
  if ($79) {
   $$1 = 1;
   return ($$1|0);
  }
 } else {
  $cond = ($2|0)==(0|0);
  if ($cond) {
   $78 = (_BIO_puts($0,80869)|0);
   $not$ = ($78|0)>(0);
   $$ = $not$&1;
   return ($$|0);
  }
 }
 $80 = (_X509_signature_dump($0,$2,$3)|0);
 $$1 = $80;
 return ($$1|0);
}
function _int_rsa_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 _RSA_free($2);
 return;
}
function _rsa_pkey_ctrl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 HEAP32[$4>>2] = 0;
 switch ($1|0) {
 case 1:  {
  $5 = ($2|0)==(0);
  if ($5) {
   _PKCS7_SIGNER_INFO_get0_algs($3,0,0,$4);
   label = 7;
  } else {
   label = 7;
  }
  break;
 }
 case 2:  {
  $6 = ($2|0)==(0);
  if ($6) {
   _PKCS7_RECIP_INFO_get0_alg($3,$4);
   label = 7;
  } else {
   label = 7;
  }
  break;
 }
 case 3:  {
  HEAP32[$3>>2] = 672;
  $$0 = 1;
  break;
 }
 default: {
  $$0 = -2;
 }
 }
 if ((label|0) == 7) {
  $7 = HEAP32[$4>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 1;
  } else {
   $9 = (_OBJ_nid2obj(6)|0);
   (_X509_ALGOR_set0($7,$9,5,0)|0);
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _old_rsa_priv_decode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_d2i_RSAPrivateKey(0,$1,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _ERR_put_error(4,147,4,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_EVP_PKEY_assign($0,6,$3)|0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _old_rsa_priv_encode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_i2d_RSAPrivateKey($3,$1)|0);
 return ($4|0);
}
function _rsa_item_verify($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i111$i = 0, $$0$i213$i = 0, $$0$i8$i = 0, $$031$i = 0, $$032$i = 0, $$033$i = 0, $$05$ph$i = 0, $$0516$i = 0, $$0517$i = 0, $$056$i = 0, $$pr$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$3>>2]|0;
 $9 = (_OBJ_obj2nid($8)|0);
 $10 = ($9|0)==(912);
 if (!($10)) {
  _ERR_put_error(4,148,155,0,0);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$6>>2] = 0;
 $11 = HEAP32[$3>>2]|0;
 $12 = (_OBJ_obj2nid($11)|0);
 $13 = ($12|0)==(912);
 if ($13) {
  $14 = ((($3)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_ASN1_TYPE_unpack_sequence(40604,$15)|0);
  $17 = ($16|0)==(0|0);
  L7: do {
   if ($17) {
    _ERR_put_error(4,155,149,0,0);
    $$0$i8$i = 0;$$033$i = -1;$$056$i = 0;
   } else {
    $18 = ((($16)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     $$0517$i = 0;
     label = 17;
    } else {
     $21 = HEAP32[$19>>2]|0;
     $22 = (_OBJ_obj2nid($21)|0);
     $23 = ($22|0)==(911);
     if ($23) {
      $24 = ((($19)) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (_ASN1_TYPE_unpack_sequence(1356,$25)|0);
      $$05$ph$i = $26;
     } else {
      $$05$ph$i = 0;
     }
     $$pr$i = HEAP32[$18>>2]|0;
     $27 = ($$pr$i|0)==(0|0);
     if ($27) {
      $$0517$i = $$05$ph$i;
      label = 17;
     } else {
      $28 = HEAP32[$$pr$i>>2]|0;
      $29 = (_OBJ_obj2nid($28)|0);
      $30 = ($29|0)==(911);
      if (!($30)) {
       _ERR_put_error(4,157,153,0,0);
       $$0$i8$i = $16;$$033$i = -1;$$056$i = $$05$ph$i;
       break;
      }
      $31 = ($$05$ph$i|0)==(0|0);
      if ($31) {
       _ERR_put_error(4,157,154,0,0);
       $$0$i8$i = $16;$$033$i = -1;$$056$i = 0;
       break;
      }
      $32 = HEAP32[$$05$ph$i>>2]|0;
      $33 = (_OBJ_obj2nid($32)|0);
      $34 = (_OBJ_nid2sn($33)|0);
      $35 = (_EVP_get_digestbyname($34)|0);
      $36 = ($35|0)==(0|0);
      if ($36) {
       _ERR_put_error(4,157,151,0,0);
       $$0$i8$i = $16;$$033$i = -1;$$056$i = $$05$ph$i;
       break;
      } else {
       $$0$i111$i = $35;$$0516$i = $$05$ph$i;
      }
     }
    }
    if ((label|0) == 17) {
     $37 = (_EVP_sha1()|0);
     $38 = ($37|0)==(0|0);
     if ($38) {
      $$0$i8$i = $16;$$033$i = -1;$$056$i = $$0517$i;
      break;
     } else {
      $$0$i111$i = $37;$$0516$i = $$0517$i;
     }
    }
    $39 = HEAP32[$16>>2]|0;
    $40 = ($39|0)==(0|0);
    if ($40) {
     $46 = (_EVP_sha1()|0);
     $47 = ($46|0)==(0|0);
     if ($47) {
      $$0$i8$i = $16;$$033$i = -1;$$056$i = $$0516$i;
      break;
     } else {
      $$0$i213$i = $46;
     }
    } else {
     $41 = HEAP32[$39>>2]|0;
     $42 = (_OBJ_obj2nid($41)|0);
     $43 = (_OBJ_nid2sn($42)|0);
     $44 = (_EVP_get_digestbyname($43)|0);
     $45 = ($44|0)==(0|0);
     if ($45) {
      _ERR_put_error(4,156,166,0,0);
      $$0$i8$i = $16;$$033$i = -1;$$056$i = $$0516$i;
      break;
     } else {
      $$0$i213$i = $44;
     }
    }
    $48 = ((($16)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0|0);
    if ($50) {
     $$032$i = 20;
    } else {
     $51 = (_ASN1_INTEGER_get($49)|0);
     $52 = ($51|0)<(0);
     if ($52) {
      _ERR_put_error(4,155,150,0,0);
      $$0$i8$i = $16;$$033$i = -1;$$056$i = $$0516$i;
      break;
     } else {
      $$032$i = $51;
     }
    }
    $53 = ((($16)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(0|0);
    if (!($55)) {
     $56 = (_ASN1_INTEGER_get($54)|0);
     $57 = ($56|0)==(1);
     if (!($57)) {
      _ERR_put_error(4,155,139,0,0);
      $$0$i8$i = $16;$$033$i = -1;$$056$i = $$0516$i;
      break;
     }
    }
    $58 = ($5|0)==(0|0);
    L39: do {
     if ($58) {
      $61 = (_EVP_PKEY_CTX_ctrl(0,-1,248,13,0,$7)|0);
      $62 = ($61|0)<(1);
      do {
       if (!($62)) {
        $63 = (_EVP_MD_type($$0$i213$i)|0);
        $64 = HEAP32[$7>>2]|0;
        $65 = (_EVP_MD_type($64)|0);
        $66 = ($63|0)==($65|0);
        if ($66) {
         break L39;
        } else {
         _ERR_put_error(4,155,158,0,0);
         break;
        }
       }
      } while(0);
      $$0$i8$i = $16;$$033$i = -1;$$056$i = $$0516$i;
      break L7;
     } else {
      $59 = (_EVP_DigestVerifyInit($0,$6,$$0$i213$i,0,$5)|0);
      $60 = ($59|0)==(0);
      if ($60) {
       $$0$i8$i = $16;$$033$i = -1;$$056$i = $$0516$i;
       break L7;
      }
     }
    } while(0);
    $67 = HEAP32[$6>>2]|0;
    $68 = (_EVP_PKEY_CTX_ctrl($67,6,-1,4097,6,0)|0);
    $69 = ($68|0)<(1);
    if ($69) {
     $$0$i8$i = $16;$$033$i = -1;$$056$i = $$0516$i;
    } else {
     $70 = HEAP32[$6>>2]|0;
     $71 = (_EVP_PKEY_CTX_ctrl($70,6,24,4098,$$032$i,0)|0);
     $72 = ($71|0)<(1);
     if ($72) {
      $$0$i8$i = $16;$$033$i = -1;$$056$i = $$0516$i;
     } else {
      $73 = HEAP32[$6>>2]|0;
      $74 = (_EVP_PKEY_CTX_ctrl($73,6,1016,4101,0,$$0$i111$i)|0);
      $75 = ($74|0)<(1);
      $$$i = $75 ? -1 : 1;
      $$0$i8$i = $16;$$033$i = $$$i;$$056$i = $$0516$i;
     }
    }
   }
  } while(0);
  _RSA_PSS_PARAMS_free($$0$i8$i);
  _X509_ALGOR_free($$056$i);
  $$031$i = $$033$i;
 } else {
  _ERR_put_error(4,155,155,0,0);
  $$031$i = -1;
 }
 $76 = ($$031$i|0)>(0);
 $$ = $76 ? 2 : -1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _rsa_item_sign($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$020$i = 0, $$021$ph$i = 0, $$09$ph$i$i = 0, $$0911$i$i = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $cond = 0, $not$$i = 0, $not$$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 $12 = (_EVP_MD_CTX_pkey_ctx($0)|0);
 $13 = (_EVP_PKEY_CTX_ctrl($12,6,-1,4102,0,$11)|0);
 $14 = ($13|0)<(1);
 if ($14) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $15 = HEAP32[$11>>2]|0;
 $cond = ($15|0)==(6);
 if (!($cond)) {
  $$2 = 2;
  STACKTOP = sp;return ($$2|0);
 }
 HEAP32[$9>>2] = 0;
 $16 = (_EVP_PKEY_CTX_get0_pkey($12)|0);
 $17 = (_EVP_PKEY_CTX_ctrl($12,-1,248,13,0,$7)|0);
 $18 = ($17|0)<(1);
 do {
  if ($18) {
   $$021$ph$i = 0;
   label = 26;
  } else {
   $19 = (_EVP_PKEY_CTX_ctrl($12,6,1016,4104,0,$8)|0);
   $20 = ($19|0)<(1);
   if ($20) {
    $$021$ph$i = 0;
    label = 26;
   } else {
    $21 = (_EVP_PKEY_CTX_ctrl($12,6,24,4103,0,$10)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $$021$ph$i = 0;
     label = 26;
    } else {
     $23 = HEAP32[$10>>2]|0;
     switch ($23|0) {
     case -1:  {
      $24 = HEAP32[$7>>2]|0;
      $25 = (_EVP_MD_size($24)|0);
      HEAP32[$10>>2] = $25;
      break;
     }
     case -2:  {
      $26 = (_EVP_PKEY_size($16)|0);
      $27 = HEAP32[$7>>2]|0;
      $28 = (_EVP_MD_size($27)|0);
      $29 = (($26) + -2)|0;
      $30 = (($29) - ($28))|0;
      HEAP32[$10>>2] = $30;
      $31 = (_EVP_PKEY_bits($16)|0);
      $32 = (($31) + 7)|0;
      $33 = $32 & 7;
      $34 = ($33|0)==(0);
      if ($34) {
       $35 = HEAP32[$10>>2]|0;
       $36 = (($35) + -1)|0;
       HEAP32[$10>>2] = $36;
      }
      break;
     }
     default: {
     }
     }
     $37 = (_RSA_PSS_PARAMS_new()|0);
     $38 = ($37|0)==(0|0);
     if ($38) {
      $$021$ph$i = 0;
      label = 26;
     } else {
      $39 = HEAP32[$10>>2]|0;
      $40 = ($39|0)==(20);
      if (!($40)) {
       $41 = (_ASN1_INTEGER_new()|0);
       $42 = ((($37)) + 8|0);
       HEAP32[$42>>2] = $41;
       $43 = ($41|0)==(0|0);
       if ($43) {
        $$021$ph$i = $37;
        label = 26;
        break;
       }
       $44 = HEAP32[$10>>2]|0;
       $45 = (_ASN1_INTEGER_set($41,$44)|0);
       $46 = ($45|0)==(0);
       if ($46) {
        $$021$ph$i = $37;
        label = 26;
        break;
       }
      }
      $47 = HEAP32[$7>>2]|0;
      $48 = (_EVP_MD_type($47)|0);
      $49 = ($48|0)==(64);
      if (!($49)) {
       $50 = (_X509_ALGOR_new()|0);
       HEAP32[$37>>2] = $50;
       $51 = ($50|0)==(0|0);
       if ($51) {
        $$021$ph$i = $37;
        label = 26;
        break;
       }
       _X509_ALGOR_set_md($50,$47);
      }
      $52 = ((($37)) + 4|0);
      $53 = HEAP32[$8>>2]|0;
      HEAP32[$6>>2] = 0;
      HEAP32[$52>>2] = 0;
      $54 = (_EVP_MD_type($53)|0);
      $55 = ($54|0)==(64);
      if ($55) {
      } else {
       $56 = (_EVP_MD_type($53)|0);
       $57 = ($56|0)==(64);
       if ($57) {
        $$09$ph$i$i = 0;
        label = 22;
       } else {
        $58 = (_X509_ALGOR_new()|0);
        $59 = ($58|0)==(0|0);
        if ($59) {
         $$0911$i$i = 0;
        } else {
         _X509_ALGOR_set_md($58,$53);
         $$09$ph$i$i = $58;
         label = 22;
        }
       }
       if ((label|0) == 22) {
        $60 = (_ASN1_item_pack($$09$ph$i$i,1356,$6)|0);
        $61 = ($60|0)==(0|0);
        if ($61) {
         $$0911$i$i = $$09$ph$i$i;
        } else {
         $62 = (_X509_ALGOR_new()|0);
         HEAP32[$52>>2] = $62;
         $63 = ($62|0)==(0|0);
         if ($63) {
          $$0911$i$i = $$09$ph$i$i;
         } else {
          $64 = (_OBJ_nid2obj(911)|0);
          $65 = HEAP32[$6>>2]|0;
          (_X509_ALGOR_set0($62,$64,16,$65)|0);
          HEAP32[$6>>2] = 0;
          $$0911$i$i = $$09$ph$i$i;
         }
        }
       }
       $66 = HEAP32[$6>>2]|0;
       _ASN1_STRING_free($66);
       _X509_ALGOR_free($$0911$i$i);
       $67 = HEAP32[$52>>2]|0;
       $not$$i$i = ($67|0)==(0|0);
       if ($not$$i$i) {
        $$021$ph$i = $37;
        label = 26;
        break;
       }
      }
      $69 = (_ASN1_item_pack($37,40604,$9)|0);
      $not$$i = ($69|0)==(0|0);
      _RSA_PSS_PARAMS_free($37);
      $70 = HEAP32[$9>>2]|0;
      if ($not$$i) {
       $71 = $70;
       label = 28;
      } else {
       $$020$i = $70;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 26) {
  _RSA_PSS_PARAMS_free($$021$ph$i);
  $68 = HEAP32[$9>>2]|0;
  $71 = $68;
  label = 28;
 }
 if ((label|0) == 28) {
  _ASN1_STRING_free($71);
  $$020$i = 0;
 }
 $72 = ($$020$i|0)==(0|0);
 if ($72) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $73 = ($4|0)==(0|0);
 do {
  if (!($73)) {
   $74 = (_ASN1_STRING_dup($$020$i)|0);
   $75 = ($74|0)==(0|0);
   if (!($75)) {
    $76 = (_OBJ_nid2obj(912)|0);
    (_X509_ALGOR_set0($4,$76,16,$74)|0);
    break;
   }
   _ASN1_STRING_free($$020$i);
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
 } while(0);
 $77 = (_OBJ_nid2obj(912)|0);
 (_X509_ALGOR_set0($3,$77,16,$$020$i)|0);
 $$2 = 3;
 STACKTOP = sp;return ($$2|0);
}
function _do_rsa_print($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$044 = 0, $$045 = 0, $$046 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
 } else {
  $7 = (_BN_num_bits($5)|0);
  $$0 = $7;
 }
 $8 = (_BIO_indent($0,$2,128)|0);
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$044 = 0;
  } else {
   $10 = ($3|0)!=(0);
   if ($10) {
    $11 = ((($1)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     label = 7;
    } else {
     HEAP32[$vararg_buffer>>2] = $$0;
     $14 = (_BIO_printf($0,80382,$vararg_buffer)|0);
     $15 = ($14|0)<(1);
     if ($15) {
      $$044 = 0;
      break;
     } else {
      $$045 = 80445;$$046 = 80427;
     }
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    HEAP32[$vararg_buffer1>>2] = $$0;
    $16 = (_BIO_printf($0,80405,$vararg_buffer1)|0);
    $17 = ($16|0)<(1);
    if ($17) {
     $$044 = 0;
     break;
    } else {
     $$045 = 80461;$$046 = 80436;
    }
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = (_ASN1_bn_print($0,$$046,$18,0,$2)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$044 = 0;
   } else {
    $21 = ((($1)) + 20|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_ASN1_bn_print($0,$$045,$22,0,$2)|0);
    $24 = ($23|0)==(0);
    if ($24) {
     $$044 = 0;
    } else {
     if ($10) {
      $25 = ((($1)) + 24|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (_ASN1_bn_print($0,80471,$26,0,$2)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       $$044 = 0;
       break;
      }
      $29 = ((($1)) + 28|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_ASN1_bn_print($0,80488,$30,0,$2)|0);
      $32 = ($31|0)==(0);
      if ($32) {
       $$044 = 0;
       break;
      }
      $33 = ((($1)) + 32|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_ASN1_bn_print($0,80496,$34,0,$2)|0);
      $36 = ($35|0)==(0);
      if ($36) {
       $$044 = 0;
       break;
      }
      $37 = ((($1)) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (_ASN1_bn_print($0,80504,$38,0,$2)|0);
      $40 = ($39|0)==(0);
      if ($40) {
       $$044 = 0;
       break;
      }
      $41 = ((($1)) + 40|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (_ASN1_bn_print($0,80515,$42,0,$2)|0);
      $44 = ($43|0)==(0);
      if ($44) {
       $$044 = 0;
       break;
      }
      $45 = ((($1)) + 44|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (_ASN1_bn_print($0,80526,$46,0,$2)|0);
      $48 = ($47|0)==(0);
      if ($48) {
       $$044 = 0;
       break;
      }
     }
     $$044 = 1;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$044|0);
}
function _rsa_cb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 0:  {
  $4 = (_RSA_new()|0);
  HEAP32[$1>>2] = $4;
  $5 = ($4|0)==(0|0);
  $$ = $5 ? 0 : 2;
  $$0 = $$;
  break;
 }
 case 2:  {
  $6 = HEAP32[$1>>2]|0;
  _RSA_free($6);
  HEAP32[$1>>2] = 0;
  $$0 = 2;
  break;
 }
 default: {
  $$0 = 1;
 }
 }
 return ($$0|0);
}
function _RSA_PSS_PARAMS_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ASN1_item_new(40604)|0);
 return ($0|0);
}
function _RSA_PSS_PARAMS_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($0,40604);
 return;
}
function _d2i_RSAPrivateKey($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_ASN1_item_d2i($0,$1,$2,40280)|0);
 return ($3|0);
}
function _i2d_RSAPrivateKey($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_ASN1_item_i2d($0,$1,40280)|0);
 return ($2|0);
}
function _d2i_RSAPublicKey($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_ASN1_item_d2i($0,$1,$2,40512)|0);
 return ($3|0);
}
function _i2d_RSAPublicKey($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_ASN1_item_i2d($0,$1,40512)|0);
 return ($2|0);
}
function _RSA_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_BN_num_bits($2)|0);
 $4 = (($3) + 7)|0;
 $5 = (($4|0) / 8)&-1;
 return ($5|0);
}
function _RSA_public_encrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiiii[$8 & 31]($0,$1,$2,$3,$4)|0);
 return ($9|0);
}
function _RSA_private_encrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiiii[$8 & 31]($0,$1,$2,$3,$4)|0);
 return ($9|0);
}
function _RSA_private_decrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiiii[$8 & 31]($0,$1,$2,$3,$4)|0);
 return ($9|0);
}
function _RSA_public_decrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiiii[$8 & 31]($0,$1,$2,$3,$4)|0);
 return ($9|0);
}
function _RSA_setup_blinding($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$044 = 0, $$045 = 0, $$1 = 0, $$146 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_BN_CTX_new()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$044 = $3;
  }
 } else {
  $$044 = $1;
 }
 _BN_CTX_start($$044);
 $5 = (_BN_CTX_get($$044)|0);
 $6 = ($5|0)==(0|0);
 L5: do {
  if ($6) {
   _ERR_put_error(4,136,65,0,0);
   $$1 = 0;$$146 = 0;
  } else {
   $7 = ((($0)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   L8: do {
    if ($9) {
     $10 = ((($0)) + 24|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($0)) + 28|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($0)) + 32|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($11|0)==(0|0);
     $17 = ($13|0)==(0|0);
     $or$cond$i = $16 | $17;
     $18 = ($15|0)==(0|0);
     $or$cond3$i = $or$cond$i | $18;
     do {
      if (!($or$cond3$i)) {
       _BN_CTX_start($$044);
       $19 = (_BN_CTX_get($$044)|0);
       $20 = (_BN_CTX_get($$044)|0);
       $21 = (_BN_CTX_get($$044)|0);
       $22 = ($21|0)==(0|0);
       if (!($22)) {
        $23 = (_BN_value_one()|0);
        $24 = (_BN_sub($20,$13,$23)|0);
        $25 = ($24|0)==(0);
        if (!($25)) {
         $26 = (_BN_value_one()|0);
         $27 = (_BN_sub($21,$15,$26)|0);
         $28 = ($27|0)==(0);
         if (!($28)) {
          $29 = (_BN_mul($19,$20,$21,$$044)|0);
          $30 = ($29|0)==(0);
          if (!($30)) {
           $31 = (_BN_mod_inverse(0,$11,$19,$$044)|0);
           _BN_CTX_end($$044);
           $32 = ($31|0)==(0|0);
           if ($32) {
            break;
           } else {
            $$045 = $31;
            break L8;
           }
          }
         }
        }
       }
       _BN_CTX_end($$044);
      }
     } while(0);
     _ERR_put_error(4,136,140,0,0);
     $$1 = 0;$$146 = 0;
     break L5;
    } else {
     $$045 = $8;
    }
   } while(0);
   $33 = (_RAND_status()|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = ((($0)) + 24|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = (_bn_get_words($36)|0);
     $39 = ($38|0)==(0|0);
     if (!($39)) {
      $40 = HEAP32[$35>>2]|0;
      $41 = (_bn_get_words($40)|0);
      $42 = HEAP32[$35>>2]|0;
      $43 = (_bn_get_dmax($42)|0);
      $44 = $43 << 2;
      _RAND_add($41,$44,+0);
     }
    }
   }
   $45 = (_BN_new()|0);
   $46 = ($45|0)==(0|0);
   if ($46) {
    _ERR_put_error(4,136,65,0,0);
    $$1 = 0;$$146 = $$045;
    break;
   }
   $47 = ((($0)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   _BN_with_flags($45,$48,4);
   $49 = ((($0)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($0)) + 60|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (_BN_BLINDING_create_param(0,$$045,$45,$$044,$52,$54)|0);
   _BN_free($45);
   $56 = ($55|0)==(0|0);
   if ($56) {
    _ERR_put_error(4,136,3,0,0);
    $$1 = 0;$$146 = $$045;
    break;
   } else {
    _BN_BLINDING_set_current_thread($55);
    $$1 = $55;$$146 = $$045;
    break;
   }
  }
 } while(0);
 _BN_CTX_end($$044);
 $57 = ($$044|0)==($1|0);
 if (!($57)) {
  _BN_CTX_free($$044);
 }
 $58 = ((($0)) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($$146|0)==($59|0);
 if ($60) {
  $$0 = $$1;
  return ($$0|0);
 }
 _BN_free($$146);
 $$0 = $$1;
 return ($$0|0);
}
function _RSA_generate_key_ex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0137155158$i = 0, $$0138$i = 0, $$1139$i = 0, $$1141$i = 0, $$1141159$i = 0, $$pre$i = 0, $$pre169$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = (FUNCTION_TABLE_iiiii[$7 & 63]($0,$1,$2,$3)|0);
  $$0 = $9;
  return ($$0|0);
 }
 $10 = ($1|0)<(16);
 if ($10) {
  _ERR_put_error(4,129,120,0,0);
  $$0137155158$i = 0;$$1141159$i = 0;
 } else {
  $11 = (_BN_CTX_new()|0);
  $12 = ($11|0)==(0|0);
  L8: do {
   if ($12) {
    label = 53;
   } else {
    _BN_CTX_start($11);
    $13 = (_BN_CTX_get($11)|0);
    $14 = (_BN_CTX_get($11)|0);
    $15 = (_BN_CTX_get($11)|0);
    $16 = (_BN_CTX_get($11)|0);
    $17 = ($16|0)==(0|0);
    if ($17) {
     label = 53;
    } else {
     $18 = (($1) + 1)|0;
     $19 = (($18|0) / 2)&-1;
     $20 = (($1) - ($19))|0;
     $21 = ((($0)) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0|0);
     if ($23) {
      $24 = (_BN_new()|0);
      HEAP32[$21>>2] = $24;
      $25 = ($24|0)==(0|0);
      if ($25) {
       label = 53;
       break;
      }
     }
     $26 = ((($0)) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(0|0);
     if ($28) {
      $29 = (_BN_secure_new()|0);
      HEAP32[$26>>2] = $29;
      $30 = ($29|0)==(0|0);
      if ($30) {
       label = 53;
       break;
      }
     }
     $31 = ((($0)) + 20|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      $34 = (_BN_new()|0);
      HEAP32[$31>>2] = $34;
      $35 = ($34|0)==(0|0);
      if ($35) {
       label = 53;
       break;
      }
     }
     $36 = ((($0)) + 28|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(0|0);
     if ($38) {
      $39 = (_BN_secure_new()|0);
      HEAP32[$36>>2] = $39;
      $40 = ($39|0)==(0|0);
      if ($40) {
       label = 53;
       break;
      }
     }
     $41 = ((($0)) + 32|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      $44 = (_BN_secure_new()|0);
      HEAP32[$41>>2] = $44;
      $45 = ($44|0)==(0|0);
      if ($45) {
       label = 53;
       break;
      }
     }
     $46 = ((($0)) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(0|0);
     if ($48) {
      $49 = (_BN_secure_new()|0);
      HEAP32[$46>>2] = $49;
      $50 = ($49|0)==(0|0);
      if ($50) {
       label = 53;
       break;
      }
     }
     $51 = ((($0)) + 40|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(0|0);
     if ($53) {
      $54 = (_BN_secure_new()|0);
      HEAP32[$51>>2] = $54;
      $55 = ($54|0)==(0|0);
      if ($55) {
       label = 53;
       break;
      }
     }
     $56 = ((($0)) + 44|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = (_BN_secure_new()|0);
      HEAP32[$56>>2] = $59;
      $60 = ($59|0)==(0|0);
      if ($60) {
       label = 53;
       break;
      }
     }
     $61 = HEAP32[$31>>2]|0;
     $62 = (_BN_copy($61,$2)|0);
     $63 = ($62|0)==(0|0);
     if ($63) {
      label = 53;
     } else {
      $$0138$i = 0;
      while(1) {
       $64 = HEAP32[$36>>2]|0;
       $65 = (_BN_generate_prime_ex($64,$19,0,0,0,$3)|0);
       $66 = ($65|0)==(0);
       if ($66) {
        label = 53;
        break L8;
       }
       $67 = HEAP32[$36>>2]|0;
       $68 = (_BN_value_one()|0);
       $69 = (_BN_sub($15,$67,$68)|0);
       $70 = ($69|0)==(0);
       if ($70) {
        label = 53;
        break L8;
       }
       $71 = HEAP32[$31>>2]|0;
       $72 = (_BN_gcd($14,$15,$71,$11)|0);
       $73 = ($72|0)==(0);
       if ($73) {
        label = 53;
        break L8;
       }
       $74 = (_BN_is_one($14)|0);
       $75 = ($74|0)==(0);
       if (!($75)) {
        break;
       }
       $76 = (($$0138$i) + 1)|0;
       $77 = (_BN_GENCB_call($3,2,$$0138$i)|0);
       $78 = ($77|0)==(0);
       if ($78) {
        label = 53;
        break L8;
       } else {
        $$0138$i = $76;
       }
      }
      $79 = (_BN_GENCB_call($3,3,0)|0);
      $80 = ($79|0)==(0);
      if ($80) {
       label = 53;
      } else {
       $$1139$i = $$0138$i;
       while(1) {
        while(1) {
         $81 = HEAP32[$41>>2]|0;
         $82 = (_BN_generate_prime_ex($81,$20,0,0,0,$3)|0);
         $83 = ($82|0)==(0);
         if ($83) {
          label = 53;
          break L8;
         }
         $84 = HEAP32[$36>>2]|0;
         $85 = HEAP32[$41>>2]|0;
         $86 = (_BN_cmp($84,$85)|0);
         $87 = ($86|0)==(0);
         if (!($87)) {
          break;
         }
        }
        $88 = HEAP32[$41>>2]|0;
        $89 = (_BN_value_one()|0);
        $90 = (_BN_sub($15,$88,$89)|0);
        $91 = ($90|0)==(0);
        if ($91) {
         label = 53;
         break L8;
        }
        $92 = HEAP32[$31>>2]|0;
        $93 = (_BN_gcd($14,$15,$92,$11)|0);
        $94 = ($93|0)==(0);
        if ($94) {
         label = 53;
         break L8;
        }
        $95 = (_BN_is_one($14)|0);
        $96 = ($95|0)==(0);
        if (!($96)) {
         break;
        }
        $97 = (($$1139$i) + 1)|0;
        $98 = (_BN_GENCB_call($3,2,$$1139$i)|0);
        $99 = ($98|0)==(0);
        if ($99) {
         label = 53;
         break L8;
        } else {
         $$1139$i = $97;
        }
       }
       $100 = (_BN_GENCB_call($3,3,1)|0);
       $101 = ($100|0)==(0);
       if ($101) {
        label = 53;
       } else {
        $102 = HEAP32[$36>>2]|0;
        $103 = HEAP32[$41>>2]|0;
        $104 = (_BN_cmp($102,$103)|0);
        $105 = ($104|0)<(0);
        if ($105) {
         $106 = HEAP32[$36>>2]|0;
         $107 = HEAP32[$41>>2]|0;
         HEAP32[$36>>2] = $107;
         HEAP32[$41>>2] = $106;
         $108 = $107;
         $109 = $106;
         $111 = $108;$112 = $109;
        } else {
         $$pre$i = HEAP32[$36>>2]|0;
         $$pre169$i = HEAP32[$41>>2]|0;
         $111 = $$pre$i;$112 = $$pre169$i;
        }
        $110 = HEAP32[$21>>2]|0;
        $113 = (_BN_mul($110,$111,$112,$11)|0);
        $114 = ($113|0)==(0);
        if ($114) {
         label = 53;
        } else {
         $115 = HEAP32[$36>>2]|0;
         $116 = (_BN_value_one()|0);
         $117 = (_BN_sub($14,$115,$116)|0);
         $118 = ($117|0)==(0);
         if ($118) {
          label = 53;
         } else {
          $119 = HEAP32[$41>>2]|0;
          $120 = (_BN_value_one()|0);
          $121 = (_BN_sub($15,$119,$120)|0);
          $122 = ($121|0)==(0);
          if ($122) {
           label = 53;
           break;
          }
          $123 = (_BN_mul($13,$14,$15,$11)|0);
          $124 = ($123|0)==(0);
          if ($124) {
           label = 53;
           break;
          }
          $125 = (_BN_new()|0);
          $126 = ($125|0)==(0|0);
          if ($126) {
           label = 53;
           break;
          }
          _BN_with_flags($125,$13,4);
          $127 = HEAP32[$26>>2]|0;
          $128 = HEAP32[$31>>2]|0;
          $129 = (_BN_mod_inverse($127,$128,$125,$11)|0);
          $130 = ($129|0)==(0|0);
          _BN_free($125);
          if ($130) {
           label = 53;
           break;
          }
          $131 = (_BN_new()|0);
          $132 = ($131|0)==(0|0);
          if ($132) {
           label = 53;
           break;
          }
          $133 = HEAP32[$26>>2]|0;
          _BN_with_flags($131,$133,4);
          $134 = HEAP32[$46>>2]|0;
          $135 = (_BN_div(0,$134,$131,$14,$11)|0);
          $136 = ($135|0)==(0);
          do {
           if (!($136)) {
            $137 = HEAP32[$51>>2]|0;
            $138 = (_BN_div(0,$137,$131,$15,$11)|0);
            $139 = ($138|0)==(0);
            if ($139) {
             break;
            }
            _BN_free($131);
            $140 = (_BN_new()|0);
            $141 = ($140|0)==(0|0);
            if ($141) {
             label = 53;
             break L8;
            }
            $142 = HEAP32[$36>>2]|0;
            _BN_with_flags($140,$142,4);
            $143 = HEAP32[$56>>2]|0;
            $144 = HEAP32[$41>>2]|0;
            $145 = (_BN_mod_inverse($143,$144,$140,$11)|0);
            $146 = ($145|0)==(0|0);
            _BN_free($140);
            if ($146) {
             label = 53;
             break L8;
            } else {
             $$1141$i = 1;
             break L8;
            }
           }
          } while(0);
          _BN_free($131);
          label = 53;
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 53) {
   _ERR_put_error(4,129,3,0,0);
   $$1141$i = 0;
  }
  if ($12) {
   $$0137155158$i = 0;$$1141159$i = $$1141$i;
  } else {
   _BN_CTX_end($11);
   $$0137155158$i = $11;$$1141159$i = $$1141$i;
  }
 }
 _BN_CTX_free($$0137155158$i);
 $$0 = $$1141159$i;
 return ($$0|0);
}
function _RSA_new() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_RSA_new_method(0)|0);
 return ($0|0);
}
function _RSA_new_method($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_zalloc(88,83252,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _ERR_put_error(4,106,65,0,0);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 52|0);
 HEAP32[$3>>2] = 1;
 $4 = (_CRYPTO_THREAD_lock_new()|0);
 $5 = ((($1)) + 84|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  _ERR_put_error(4,106,65,0,0);
  _CRYPTO_free($1,83252,0);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[20397]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (_RSA_PKCS1_OpenSSL()|0);
  HEAP32[20397] = $9;
  $11 = $9;
 } else {
  $11 = $7;
 }
 $10 = ((($1)) + 8|0);
 HEAP32[$10>>2] = $11;
 $12 = ((($11)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & -1025;
 $15 = ((($1)) + 56|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($1)) + 48|0);
 $17 = (_CRYPTO_new_ex_data(9,$1,$16)|0);
 $18 = ($17|0)==(0);
 do {
  if (!($18)) {
   $19 = HEAP32[$10>>2]|0;
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $$0 = $1;
    return ($$0|0);
   }
   $23 = (FUNCTION_TABLE_ii[$21 & 63]($1)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    _ERR_put_error(4,106,70,0,0);
    break;
   } else {
    $$0 = $1;
    return ($$0|0);
   }
  }
 } while(0);
 _RSA_free($1);
 $$0 = 0;
 return ($$0|0);
}
function _RSA_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($0)) + 52|0);
 $4 = ((($0)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 (_CRYPTO_atomic_add($3,-1,$1,$5)|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  (FUNCTION_TABLE_ii[$11 & 63]($0)|0);
 }
 $13 = ((($0)) + 48|0);
 _CRYPTO_free_ex_data(9,$0,$13);
 $14 = HEAP32[$4>>2]|0;
 _CRYPTO_THREAD_lock_free($14);
 $15 = ((($0)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 _BN_clear_free($16);
 $17 = ((($0)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 _BN_clear_free($18);
 $19 = ((($0)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 _BN_clear_free($20);
 $21 = ((($0)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 _BN_clear_free($22);
 $23 = ((($0)) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 _BN_clear_free($24);
 $25 = ((($0)) + 36|0);
 $26 = HEAP32[$25>>2]|0;
 _BN_clear_free($26);
 $27 = ((($0)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 _BN_clear_free($28);
 $29 = ((($0)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 _BN_clear_free($30);
 $31 = ((($0)) + 76|0);
 $32 = HEAP32[$31>>2]|0;
 _BN_BLINDING_free($32);
 $33 = ((($0)) + 80|0);
 $34 = HEAP32[$33>>2]|0;
 _BN_BLINDING_free($34);
 $35 = ((($0)) + 72|0);
 $36 = HEAP32[$35>>2]|0;
 _CRYPTO_free($36,83252,0);
 _CRYPTO_free($0,83252,0);
 STACKTOP = sp;return;
}
function _RSA_up_ref($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $narrow = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 52|0);
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_CRYPTO_atomic_add($2,1,$1,$4)|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)>(1);
 $not$ = ($5|0)>(0);
 $narrow = $not$ & $7;
 $$0 = $narrow&1;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_security_bits($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_BN_num_bits($2)|0);
 $4 = (_BN_security_bits($3,-1)|0);
 return ($4|0);
}
function _RSA_padding_add_none($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)>($1|0);
 do {
  if ($4) {
   _ERR_put_error(4,107,110,0,0);
   $$0 = 0;
  } else {
   $5 = ($3|0)<($1|0);
   if ($5) {
    _ERR_put_error(4,107,122,0,0);
    $$0 = 0;
    break;
   } else {
    _memcpy(($0|0),($2|0),($3|0))|0;
    $$0 = 1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _RSA_padding_check_none($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1|0)<($3|0);
 if ($5) {
  _ERR_put_error(4,111,109,0,0);
  $$0 = -1;
  return ($$0|0);
 } else {
  $6 = (($1) - ($3))|0;
  _memset(($0|0),0,($6|0))|0;
  $7 = (($0) + ($1)|0);
  $8 = (0 - ($3))|0;
  $9 = (($7) + ($8)|0);
  _memcpy(($9|0),($2|0),($3|0))|0;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _RSA_padding_add_PKCS1_OAEP($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (_RSA_padding_add_PKCS1_OAEP_mgf1($0,$1,$2,$3,$4,$5,0,0)|0);
 return ($6|0);
}
function _RSA_padding_add_PKCS1_OAEP_mgf1($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$076 = 0, $$076$ = 0, $$07881 = 0, $$180 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond84 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $8 = sp;
 $9 = (($1) + -1)|0;
 $10 = ($6|0)==(0|0);
 if ($10) {
  $11 = (_EVP_sha1()|0);
  $$076 = $11;
 } else {
  $$076 = $6;
 }
 $12 = ($7|0)==(0|0);
 $$076$ = $12 ? $$076 : $7;
 $13 = (_EVP_MD_size($$076)|0);
 $14 = (0 - ($13))|0;
 $15 = $13 << 1;
 $16 = (($9) - ($15))|0;
 $17 = ($16|0)>($3|0);
 if (!($17)) {
  _ERR_put_error(4,154,110,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 | 1;
 $19 = ($18|0)<($1|0);
 if (!($19)) {
  _ERR_put_error(4,154,120,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$0>>0] = 0;
 $20 = ((($0)) + 1|0);
 $21 = (($0) + ($13)|0);
 $22 = ((($21)) + 1|0);
 $23 = (_EVP_Digest($4,$5,$22,0,$$076,0)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (($22) + ($13)|0);
 $26 = (($9) - ($3))|0;
 $27 = (($26) + -1)|0;
 $28 = (($27) - ($15))|0;
 _memset(($25|0),0,($28|0))|0;
 $29 = (($27) - ($13))|0;
 $30 = (($22) + ($29)|0);
 HEAP8[$30>>0] = 1;
 $31 = (($22) + ($9)|0);
 $32 = (0 - ($3))|0;
 $33 = (($31) + ($32)|0);
 $34 = (($33) + ($14)|0);
 _memcpy(($34|0),($2|0),($3|0))|0;
 $35 = (_RAND_bytes($20,$13)|0);
 $36 = ($35|0)<(1);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($9) - ($13))|0;
 $38 = (_CRYPTO_malloc($37,83252,0)|0);
 $39 = ($38|0)==(0|0);
 if ($39) {
  _ERR_put_error(4,154,65,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = (_PKCS1_MGF1($38,$37,$20,$13,$$076$)|0);
 $41 = ($40|0)<(0);
 if (!($41)) {
  $42 = ($37|0)>(0);
  if ($42) {
   $$07881 = 0;
   while(1) {
    $43 = (($38) + ($$07881)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = (($22) + ($$07881)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 ^ $44;
    HEAP8[$45>>0] = $47;
    $48 = (($$07881) + 1)|0;
    $exitcond84 = ($48|0)==($37|0);
    if ($exitcond84) {
     break;
    } else {
     $$07881 = $48;
    }
   }
  }
  $49 = (_PKCS1_MGF1($8,$13,$22,$37,$$076$)|0);
  $50 = ($49|0)<(0);
  if (!($50)) {
   $51 = ($13|0)>(0);
   if ($51) {
    $$180 = 0;
    while(1) {
     $52 = (($8) + ($$180)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = (($20) + ($$180)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55 ^ $53;
     HEAP8[$54>>0] = $56;
     $57 = (($$180) + 1)|0;
     $exitcond = ($57|0)==($13|0);
     if ($exitcond) {
      break;
     } else {
      $$180 = $57;
     }
    }
   }
   _CRYPTO_free($38,83252,0);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _CRYPTO_free($38,83252,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _PKCS1_MGF1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$03942 = 0, $$04041 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $5 = sp + 64|0;
 $6 = sp;
 $7 = (_EVP_MD_CTX_new()|0);
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $$0 = -1;
  } else {
   $9 = (_EVP_MD_size($4)|0);
   $10 = ($9|0)<(0);
   if ($10) {
    $$0 = -1;
   } else {
    $11 = ($1|0)>(0);
    if ($11) {
     $12 = ((($5)) + 1|0);
     $13 = ((($5)) + 2|0);
     $14 = ((($5)) + 3|0);
     $$03942 = 0;$$04041 = 0;
     while(1) {
      $15 = $$03942 >>> 24;
      $16 = $15&255;
      HEAP8[$5>>0] = $16;
      $17 = $$03942 >>> 16;
      $18 = $17&255;
      HEAP8[$12>>0] = $18;
      $19 = $$03942 >>> 8;
      $20 = $19&255;
      HEAP8[$13>>0] = $20;
      $21 = $$03942&255;
      HEAP8[$14>>0] = $21;
      $22 = (_EVP_DigestInit_ex($7,$4,0)|0);
      $23 = ($22|0)==(0);
      if ($23) {
       $$0 = -1;
       break L1;
      }
      $24 = (_EVP_DigestUpdate($7,$2,$3)|0);
      $25 = ($24|0)==(0);
      if ($25) {
       $$0 = -1;
       break L1;
      }
      $26 = (_EVP_DigestUpdate($7,$5,4)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       $$0 = -1;
       break L1;
      }
      $28 = (($$04041) + ($9))|0;
      $29 = ($28|0)>($1|0);
      if ($29) {
       break;
      }
      $30 = (($0) + ($$04041)|0);
      $31 = (_EVP_DigestFinal_ex($7,$30,0)|0);
      $32 = ($31|0)==(0);
      if ($32) {
       $$0 = -1;
       break L1;
      }
      $37 = (($$03942) + 1)|0;
      $38 = ($28|0)<($1|0);
      if ($38) {
       $$03942 = $37;$$04041 = $28;
      } else {
       $$0 = 0;
       break L1;
      }
     }
     $33 = (_EVP_DigestFinal_ex($7,$6,0)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      $$0 = -1;
     } else {
      $35 = (($0) + ($$04041)|0);
      $36 = (($1) - ($$04041))|0;
      _memcpy(($35|0),($6|0),($36|0))|0;
      $$0 = 0;
     }
    } else {
     $$0 = 0;
    }
   }
  }
 } while(0);
 _EVP_MD_CTX_free($7);
 STACKTOP = sp;return ($$0|0);
}
function _RSA_padding_check_PKCS1_OAEP($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (_RSA_padding_check_PKCS1_OAEP_mgf1($0,$1,$2,$3,$4,$5,$6,0,0)|0);
 return ($7|0);
}
function _RSA_padding_check_PKCS1_OAEP_mgf1($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$0 = 0, $$0116 = 0, $$0116$ = 0, $$0118 = 0, $$0119 = 0, $$0121138 = 0, $$0125$lcssa = 0, $$0125131 = 0, $$0126$lcssa = 0, $$0126130 = 0, $$0127$lcssa = 0, $$0127129 = 0, $$1 = 0, $$1120 = 0, $$1122135 = 0, $$1124 = 0, $$2132 = 0, $$not = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $exitcond = 0, $exitcond143 = 0, $or$cond = 0, $or$cond3 = 0, $phitmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $9 = sp + 64|0;
 $10 = sp;
 $11 = ($7|0)==(0|0);
 if ($11) {
  $12 = (_EVP_sha1()|0);
  $$0116 = $12;
 } else {
  $$0116 = $7;
 }
 $13 = ($8|0)==(0|0);
 $$0116$ = $13 ? $$0116 : $8;
 $14 = (_EVP_MD_size($$0116)|0);
 $15 = ($1|0)<(1);
 $16 = ($3|0)<(1);
 $or$cond = $15 | $16;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($4|0)<($3|0);
 do {
  if ($17) {
   $$0118 = 0;$$0119 = 0;
   label = 22;
  } else {
   $18 = $14 << 1;
   $19 = (($18) + 2)|0;
   $20 = ($19|0)>($4|0);
   if ($20) {
    $$0118 = 0;$$0119 = 0;
    label = 22;
   } else {
    $21 = (($4) - ($14))|0;
    $22 = (($21) + -1)|0;
    $23 = (_CRYPTO_malloc($22,83252,0)|0);
    $24 = (_CRYPTO_malloc($4,83252,0)|0);
    $25 = ($23|0)==(0|0);
    $26 = ($24|0)==(0|0);
    $or$cond3 = $25 | $26;
    if ($or$cond3) {
     _ERR_put_error(4,153,65,0,0);
     $$1 = $24;$$1120 = $23;$$1124 = -1;
     break;
    }
    _memset(($24|0),0,($4|0))|0;
    $27 = (($24) + ($4)|0);
    $28 = (0 - ($3))|0;
    $29 = (($27) + ($28)|0);
    _memcpy(($29|0),($2|0),($3|0))|0;
    $30 = HEAP8[$24>>0]|0;
    $31 = $30&255;
    $32 = (($31) + -1)|0;
    $33 = ((($24)) + 1|0);
    $34 = (($33) + ($14)|0);
    $35 = (_PKCS1_MGF1($9,$14,$34,$22,$$0116$)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = ($14|0)>(0);
     if ($37) {
      $$0121138 = 0;
      while(1) {
       $38 = (($33) + ($$0121138)|0);
       $39 = HEAP8[$38>>0]|0;
       $40 = (($9) + ($$0121138)|0);
       $41 = HEAP8[$40>>0]|0;
       $42 = $41 ^ $39;
       HEAP8[$40>>0] = $42;
       $43 = (($$0121138) + 1)|0;
       $exitcond143 = ($43|0)==($14|0);
       if ($exitcond143) {
        break;
       } else {
        $$0121138 = $43;
       }
      }
     }
     $44 = (_PKCS1_MGF1($23,$22,$9,$14,$$0116$)|0);
     $45 = ($44|0)==(0);
     if ($45) {
      $46 = ($21|0)>(1);
      if ($46) {
       $$1122135 = 0;
       while(1) {
        $47 = (($34) + ($$1122135)|0);
        $48 = HEAP8[$47>>0]|0;
        $49 = (($23) + ($$1122135)|0);
        $50 = HEAP8[$49>>0]|0;
        $51 = $50 ^ $48;
        HEAP8[$49>>0] = $51;
        $52 = (($$1122135) + 1)|0;
        $53 = ($52|0)<($22|0);
        if ($53) {
         $$1122135 = $52;
        } else {
         break;
        }
       }
      }
      $54 = (_EVP_Digest($5,$6,$10,0,$$0116,0)|0);
      $55 = ($54|0)==(0);
      if ($55) {
       $$1 = $24;$$1120 = $23;$$1124 = -1;
      } else {
       $56 = (_CRYPTO_memcmp($23,$10,$14)|0);
       $57 = $56 ^ -2147483648;
       $58 = (($56) + -1)|0;
       $59 = $57 & $32;
       $60 = $59 & $58;
       $61 = $60 >> 31;
       $62 = ($14|0)<($22|0);
       if ($62) {
        $$0125131 = 0;$$0126130 = $61;$$0127129 = 0;$$2132 = $14;
        while(1) {
         $63 = (($23) + ($$2132)|0);
         $64 = HEAP8[$63>>0]|0;
         $65 = $64&255;
         $66 = $65 ^ 1;
         $67 = (($66) + -1)|0;
         $68 = $67 >> 31;
         $69 = (($65) + -1)|0;
         $70 = $69 >> 31;
         $71 = $$0125131 ^ -1;
         $72 = $$2132 & $71;
         $73 = $72 & $68;
         $$not = $68 ^ -1;
         $74 = $$0125131 | $$not;
         $75 = $74 & $$0127129;
         $76 = $75 | $73;
         $77 = $68 | $$0125131;
         $78 = $77 | $70;
         $79 = $78 & $$0126130;
         $80 = (($$2132) + 1)|0;
         $exitcond = ($80|0)==($22|0);
         if ($exitcond) {
          break;
         } else {
          $$0125131 = $77;$$0126130 = $79;$$0127129 = $76;$$2132 = $80;
         }
        }
        $phitmp = (($76) + 1)|0;
        $$0125$lcssa = $77;$$0126$lcssa = $79;$$0127$lcssa = $phitmp;
       } else {
        $$0125$lcssa = 0;$$0126$lcssa = $61;$$0127$lcssa = 1;
       }
       $81 = $$0125$lcssa & $$0126$lcssa;
       $82 = ($81|0)==(0);
       if ($82) {
        $$0118 = $24;$$0119 = $23;
        label = 22;
       } else {
        $83 = (($22) - ($$0127$lcssa))|0;
        $84 = ($83|0)>($1|0);
        if ($84) {
         _ERR_put_error(4,153,109,0,0);
         $$0118 = $24;$$0119 = $23;
         label = 22;
         break;
        } else {
         $85 = (($23) + ($$0127$lcssa)|0);
         _memcpy(($0|0),($85|0),($83|0))|0;
         $$1 = $24;$$1120 = $23;$$1124 = $83;
         break;
        }
       }
      }
     } else {
      $$1 = $24;$$1120 = $23;$$1124 = -1;
     }
    } else {
     $$1 = $24;$$1120 = $23;$$1124 = -1;
    }
   }
  }
 } while(0);
 if ((label|0) == 22) {
  _ERR_put_error(4,153,121,0,0);
  $$1 = $$0118;$$1120 = $$0119;$$1124 = -1;
 }
 _CRYPTO_free($$1120,83252,0);
 _CRYPTO_free($$1,83252,0);
 $$0 = $$1124;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_PKCS1_OpenSSL() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (40712|0);
}
function _rsa_ossl_public_encrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$08693 = 0, $$08694 = 0, $$08792 = 0, $$089 = 0, $$090 = 0, $$096 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($3)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_BN_num_bits($6)|0);
 $8 = ($7|0)>(16384);
 if ($8) {
  _ERR_put_error(4,104,105,0,0);
  $$089 = -1;
  return ($$089|0);
 }
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($3)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_BN_ucmp($9,$11)|0);
 $13 = ($12|0)<(1);
 if ($13) {
  _ERR_put_error(4,104,101,0,0);
  $$089 = -1;
  return ($$089|0);
 }
 $14 = HEAP32[$5>>2]|0;
 $15 = (_BN_num_bits($14)|0);
 $16 = ($15|0)>(3072);
 if ($16) {
  $17 = HEAP32[$10>>2]|0;
  $18 = (_BN_num_bits($17)|0);
  $19 = ($18|0)>(64);
  if ($19) {
   _ERR_put_error(4,104,101,0,0);
   $$089 = -1;
   return ($$089|0);
  }
 }
 $20 = (_BN_CTX_new()|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$08694 = -1;$$08792 = 0;$$096 = 0;
 } else {
  _BN_CTX_start($20);
  $22 = (_BN_CTX_get($20)|0);
  $23 = (_BN_CTX_get($20)|0);
  $24 = HEAP32[$5>>2]|0;
  $25 = (_BN_num_bits($24)|0);
  $26 = (($25) + 7)|0;
  $27 = (($26|0) / 8)&-1;
  $28 = (_CRYPTO_malloc($27,83252,0)|0);
  $29 = ($22|0)==(0|0);
  $30 = ($23|0)==(0|0);
  $or$cond = $29 | $30;
  $31 = ($28|0)==(0|0);
  $or$cond3 = $or$cond | $31;
  L16: do {
   if ($or$cond3) {
    _ERR_put_error(4,104,65,0,0);
    $$08693 = -1;
   } else {
    switch ($4|0) {
    case 1:  {
     $32 = (_RSA_padding_add_PKCS1_type_2($28,$27,$1,$0)|0);
     $$090 = $32;
     break;
    }
    case 4:  {
     $33 = (_RSA_padding_add_PKCS1_OAEP($28,$27,$1,$0,0,0)|0);
     $$090 = $33;
     break;
    }
    case 2:  {
     $34 = (_RSA_padding_add_SSLv23($28,$27,$1,$0)|0);
     $$090 = $34;
     break;
    }
    case 3:  {
     $35 = (_RSA_padding_add_none($28,$27,$1,$0)|0);
     $$090 = $35;
     break;
    }
    default: {
     _ERR_put_error(4,104,118,0,0);
     $$08693 = -1;
     break L16;
    }
    }
    $36 = ($$090|0)<(1);
    if ($36) {
     $$08693 = -1;
    } else {
     $37 = (_BN_bin2bn($28,$27,$22)|0);
     $38 = ($37|0)==(0|0);
     if ($38) {
      $$08693 = -1;
     } else {
      $39 = HEAP32[$5>>2]|0;
      $40 = (_BN_ucmp($22,$39)|0);
      $41 = ($40|0)>(-1);
      if ($41) {
       _ERR_put_error(4,104,132,0,0);
       $$08693 = -1;
       break;
      }
      $42 = ((($3)) + 56|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $43 & 2;
      $45 = ($44|0)==(0);
      $$pre = ((($3)) + 60|0);
      if (!($45)) {
       $46 = ((($3)) + 84|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = HEAP32[$5>>2]|0;
       $49 = (_BN_MONT_CTX_set_locked($$pre,$47,$48,$20)|0);
       $50 = ($49|0)==(0|0);
       if ($50) {
        $$08693 = -1;
        break;
       }
      }
      $51 = ((($3)) + 8|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ((($52)) + 24|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = HEAP32[$10>>2]|0;
      $56 = HEAP32[$5>>2]|0;
      $57 = HEAP32[$$pre>>2]|0;
      $58 = (FUNCTION_TABLE_iiiiiii[$54 & 31]($23,$22,$55,$56,$20,$57)|0);
      $59 = ($58|0)==(0);
      if ($59) {
       $$08693 = -1;
      } else {
       $60 = (_BN_num_bits($23)|0);
       $61 = (($60) + 7)|0;
       $62 = (($61|0) / 8)&-1;
       $63 = (($27) - ($62))|0;
       $64 = (($2) + ($63)|0);
       $65 = (_BN_bn2bin($23,$64)|0);
       $66 = (($27) - ($65))|0;
       $67 = ($66|0)>(0);
       if ($67) {
        _memset(($2|0),0,($66|0))|0;
        $$08693 = $27;
       } else {
        $$08693 = $27;
       }
      }
     }
    }
   }
  } while(0);
  _BN_CTX_end($20);
  $$08694 = $$08693;$$08792 = $27;$$096 = $28;
 }
 _BN_CTX_free($20);
 _CRYPTO_clear_free($$096,$$08792,83252,0);
 $$089 = $$08694;
 return ($$089|0);
}
function _rsa_ossl_public_decrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$081 = 0, $$082 = 0, $$08387 = 0, $$091 = 0, $$1$ph = 0, $$189 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($3)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_BN_num_bits($6)|0);
 $8 = ($7|0)>(16384);
 if ($8) {
  _ERR_put_error(4,103,105,0,0);
  $$081 = -1;
  return ($$081|0);
 }
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($3)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_BN_ucmp($9,$11)|0);
 $13 = ($12|0)<(1);
 if ($13) {
  _ERR_put_error(4,103,101,0,0);
  $$081 = -1;
  return ($$081|0);
 }
 $14 = HEAP32[$5>>2]|0;
 $15 = (_BN_num_bits($14)|0);
 $16 = ($15|0)>(3072);
 if ($16) {
  $17 = HEAP32[$10>>2]|0;
  $18 = (_BN_num_bits($17)|0);
  $19 = ($18|0)>(64);
  if ($19) {
   _ERR_put_error(4,103,101,0,0);
   $$081 = -1;
   return ($$081|0);
  }
 }
 $20 = (_BN_CTX_new()|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$08387 = 0;$$091 = 0;$$189 = -1;
 } else {
  _BN_CTX_start($20);
  $22 = (_BN_CTX_get($20)|0);
  $23 = (_BN_CTX_get($20)|0);
  $24 = HEAP32[$5>>2]|0;
  $25 = (_BN_num_bits($24)|0);
  $26 = (($25) + 7)|0;
  $27 = (($26|0) / 8)&-1;
  $28 = (_CRYPTO_malloc($27,83252,0)|0);
  $29 = ($22|0)==(0|0);
  $30 = ($23|0)==(0|0);
  $or$cond = $29 | $30;
  $31 = ($28|0)==(0|0);
  $or$cond3 = $or$cond | $31;
  L16: do {
   if ($or$cond3) {
    _ERR_put_error(4,103,65,0,0);
    $$1$ph = -1;
   } else {
    $32 = ($27|0)<($0|0);
    if ($32) {
     _ERR_put_error(4,103,108,0,0);
     $$1$ph = -1;
     break;
    }
    $33 = (_BN_bin2bn($1,$0,$22)|0);
    $34 = ($33|0)==(0|0);
    if ($34) {
     $$1$ph = -1;
    } else {
     $35 = HEAP32[$5>>2]|0;
     $36 = (_BN_ucmp($22,$35)|0);
     $37 = ($36|0)>(-1);
     if ($37) {
      _ERR_put_error(4,103,132,0,0);
      $$1$ph = -1;
      break;
     }
     $38 = ((($3)) + 56|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $39 & 2;
     $41 = ($40|0)==(0);
     $$pre = ((($3)) + 60|0);
     if (!($41)) {
      $42 = ((($3)) + 84|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = HEAP32[$5>>2]|0;
      $45 = (_BN_MONT_CTX_set_locked($$pre,$43,$44,$20)|0);
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$1$ph = -1;
       break;
      }
     }
     $47 = ((($3)) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ((($48)) + 24|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = HEAP32[$10>>2]|0;
     $52 = HEAP32[$5>>2]|0;
     $53 = HEAP32[$$pre>>2]|0;
     $54 = (FUNCTION_TABLE_iiiiiii[$50 & 31]($23,$22,$51,$52,$20,$53)|0);
     $55 = ($54|0)==(0);
     if ($55) {
      $$1$ph = -1;
     } else {
      $56 = ($4|0)==(5);
      L30: do {
       if ($56) {
        $57 = (_bn_get_words($23)|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = $58 & 15;
        $60 = ($59|0)==(12);
        if (!($60)) {
         $61 = HEAP32[$5>>2]|0;
         $62 = (_BN_sub($23,$61,$23)|0);
         $63 = ($62|0)==(0);
         if ($63) {
          $$1$ph = -1;
          break L16;
         }
        }
        $64 = (_BN_bn2bin($23,$28)|0);
        $65 = (_RSA_padding_check_X931($2,$27,$28,$64,$27)|0);
        $$082 = $65;
       } else {
        $66 = (_BN_bn2bin($23,$28)|0);
        switch ($4|0) {
        case 1:  {
         $67 = (_RSA_padding_check_PKCS1_type_1($2,$27,$28,$66,$27)|0);
         $$082 = $67;
         break L30;
         break;
        }
        case 3:  {
         $68 = (_RSA_padding_check_none($2,$27,$28,$66,$27)|0);
         $$082 = $68;
         break L30;
         break;
        }
        default: {
         _ERR_put_error(4,103,118,0,0);
         $$1$ph = -1;
         break L16;
        }
        }
       }
      } while(0);
      $69 = ($$082|0)<(0);
      if ($69) {
       _ERR_put_error(4,103,114,0,0);
       $$1$ph = $$082;
      } else {
       $$1$ph = $$082;
      }
     }
    }
   }
  } while(0);
  _BN_CTX_end($20);
  $$08387 = $27;$$091 = $28;$$189 = $$1$ph;
 }
 _BN_CTX_free($20);
 _CRYPTO_clear_free($$091,$$08387,83252,0);
 $$081 = $$189;
 return ($$081|0);
}
function _rsa_ossl_private_encrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i136 = 0, $$0127$ph144147 = 0, $$0127$ph145 = 0, $$0127143 = 0, $$0128149 = 0, $$0129160 = 0, $$0130157 = 0, $$0130158 = 0, $$0131156 = 0, $$0133 = 0, $$0134 = 0, $$1 = 0, $$135 = 0, $$pre = 0, $$pre163 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_BN_CTX_new()|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0129160 = 0;$$0130158 = -1;$$0131156 = 0;
  _BN_CTX_free($5);
  _CRYPTO_clear_free($$0129160,$$0131156,83252,0);
  return ($$0130158|0);
 }
 _BN_CTX_start($5);
 $7 = (_BN_CTX_get($5)|0);
 $8 = (_BN_CTX_get($5)|0);
 $9 = ((($3)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_BN_num_bits($10)|0);
 $12 = (($11) + 7)|0;
 $13 = (($12|0) / 8)&-1;
 $14 = (_CRYPTO_malloc($13,83252,0)|0);
 $15 = ($7|0)==(0|0);
 $16 = ($8|0)==(0|0);
 $or$cond = $15 | $16;
 $17 = ($14|0)==(0|0);
 $or$cond3 = $or$cond | $17;
 L4: do {
  if ($or$cond3) {
   _ERR_put_error(4,102,65,0,0);
   $$0130157 = -1;
  } else {
   switch ($4|0) {
   case 1:  {
    $18 = (_RSA_padding_add_PKCS1_type_1($14,$13,$1,$0)|0);
    $$0134 = $18;
    break;
   }
   case 5:  {
    $19 = (_RSA_padding_add_X931($14,$13,$1,$0)|0);
    $$0134 = $19;
    break;
   }
   case 3:  {
    $20 = (_RSA_padding_add_none($14,$13,$1,$0)|0);
    $$0134 = $20;
    break;
   }
   default: {
    _ERR_put_error(4,102,118,0,0);
    $$0130157 = -1;
    break L4;
   }
   }
   $21 = ($$0134|0)<(1);
   if ($21) {
    $$0130157 = -1;
   } else {
    $22 = (_BN_bin2bn($14,$13,$7)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     $$0130157 = -1;
    } else {
     $24 = HEAP32[$9>>2]|0;
     $25 = (_BN_ucmp($7,$24)|0);
     $26 = ($25|0)>(-1);
     if ($26) {
      _ERR_put_error(4,102,132,0,0);
      $$0130157 = -1;
      break;
     }
     $27 = ((($3)) + 56|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $28 & 128;
     $30 = ($29|0)==(0);
     L18: do {
      if ($30) {
       $31 = ((($3)) + 84|0);
       $32 = HEAP32[$31>>2]|0;
       (_CRYPTO_THREAD_write_lock($32)|0);
       $33 = ((($3)) + 76|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($34|0)==(0|0);
       if ($35) {
        $36 = (_RSA_setup_blinding($3,$5)|0);
        HEAP32[$33>>2] = $36;
        $37 = ($36|0)==(0|0);
        if ($37) {
         $38 = HEAP32[$31>>2]|0;
         (_CRYPTO_THREAD_unlock($38)|0);
        } else {
         $39 = $36;
         label = 17;
        }
       } else {
        $39 = $34;
        label = 17;
       }
       L23: do {
        if ((label|0) == 17) {
         $40 = (_BN_BLINDING_is_current_thread($39)|0);
         $41 = ($40|0)==(0);
         do {
          if ($41) {
           $42 = ((($3)) + 80|0);
           $43 = HEAP32[$42>>2]|0;
           $44 = ($43|0)==(0|0);
           if ($44) {
            $46 = (_RSA_setup_blinding($3,$5)|0);
            HEAP32[$42>>2] = $46;
            $47 = HEAP32[$31>>2]|0;
            (_CRYPTO_THREAD_unlock($47)|0);
            $48 = ($46|0)==(0|0);
            if ($48) {
             break L23;
            } else {
             $$0127$ph145 = $46;
            }
           } else {
            $45 = HEAP32[$31>>2]|0;
            (_CRYPTO_THREAD_unlock($45)|0);
            $$0127$ph145 = $43;
           }
           $49 = (_BN_CTX_get($5)|0);
           $50 = ($49|0)==(0|0);
           if ($50) {
            _ERR_put_error(4,102,65,0,0);
            $$0130157 = -1;
            break L4;
           } else {
            (_BN_BLINDING_lock($$0127$ph145)|0);
            $53 = (_BN_BLINDING_convert_ex($7,$49,$$0127$ph145,$5)|0);
            (_BN_BLINDING_unlock($$0127$ph145)|0);
            $$0$i136 = $53;$$0127$ph144147 = $$0127$ph145;$$0128149 = $49;
            break;
           }
          } else {
           $51 = HEAP32[$31>>2]|0;
           (_CRYPTO_THREAD_unlock($51)|0);
           $52 = (_BN_BLINDING_convert_ex($7,0,$39,$5)|0);
           $$0$i136 = $52;$$0127$ph144147 = $39;$$0128149 = 0;
          }
         } while(0);
         $54 = ($$0$i136|0)==(0);
         if ($54) {
          $$0130157 = -1;
          break L4;
         }
         $$pre = HEAP32[$27>>2]|0;
         $$0127143 = $$0127$ph144147;$$1 = $$0128149;$113 = 1;$56 = $$pre;
         break L18;
        }
       } while(0);
       _ERR_put_error(4,102,68,0,0);
       $$0130157 = -1;
       break L4;
      } else {
       $$0127143 = 0;$$1 = 0;$113 = 0;$56 = $28;
      }
     } while(0);
     $55 = $56 & 32;
     $57 = ($55|0)==(0);
     do {
      if ($57) {
       $58 = ((($3)) + 28|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = ($59|0)==(0|0);
       if (!($60)) {
        $61 = ((($3)) + 32|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = ($62|0)==(0|0);
        if (!($63)) {
         $64 = ((($3)) + 36|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = ($65|0)==(0|0);
         if (!($66)) {
          $67 = ((($3)) + 40|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = ($68|0)==(0|0);
          if (!($69)) {
           $70 = ((($3)) + 44|0);
           $71 = HEAP32[$70>>2]|0;
           $72 = ($71|0)==(0|0);
           if (!($72)) {
            label = 34;
            break;
           }
          }
         }
        }
       }
       $79 = (_BN_new()|0);
       $80 = ($79|0)==(0|0);
       if ($80) {
        _ERR_put_error(4,102,65,0,0);
        $$0130157 = -1;
        break L4;
       }
       $81 = ((($3)) + 24|0);
       $82 = HEAP32[$81>>2]|0;
       _BN_with_flags($79,$82,4);
       $83 = HEAP32[$27>>2]|0;
       $84 = $83 & 2;
       $85 = ($84|0)==(0);
       $$pre163 = ((($3)) + 60|0);
       if (!($85)) {
        $86 = ((($3)) + 84|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = HEAP32[$9>>2]|0;
        $89 = (_BN_MONT_CTX_set_locked($$pre163,$87,$88,$5)|0);
        $90 = ($89|0)==(0|0);
        if ($90) {
         _BN_free($79);
         $$0130157 = -1;
         break L4;
        }
       }
       $91 = ((($3)) + 8|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($92)) + 24|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = HEAP32[$9>>2]|0;
       $96 = HEAP32[$$pre163>>2]|0;
       $97 = (FUNCTION_TABLE_iiiiiii[$94 & 31]($8,$7,$79,$95,$5,$96)|0);
       $98 = ($97|0)==(0);
       _BN_free($79);
       if ($98) {
        $$0130157 = -1;
        break L4;
       }
      } else {
       label = 34;
      }
     } while(0);
     if ((label|0) == 34) {
      $73 = ((($3)) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ((($74)) + 20|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (FUNCTION_TABLE_iiiii[$76 & 63]($8,$7,$3,$5)|0);
      $78 = ($77|0)==(0);
      if ($78) {
       $$0130157 = -1;
       break;
      }
     }
     if ($113) {
      $99 = (_BN_BLINDING_invert_ex($8,$$1,$$0127143,$5)|0);
      $100 = ($99|0)==(0);
      if ($100) {
       $$0130157 = -1;
       break;
      }
     }
     $101 = ($4|0)==(5);
     if ($101) {
      $102 = HEAP32[$9>>2]|0;
      (_BN_sub($7,$102,$8)|0);
      $103 = (_BN_cmp($8,$7)|0);
      $104 = ($103|0)>(0);
      $$135 = $104 ? $7 : $8;
      $$0133 = $$135;
     } else {
      $$0133 = $8;
     }
     $105 = (_BN_num_bits($$0133)|0);
     $106 = (($105) + 7)|0;
     $107 = (($106|0) / 8)&-1;
     $108 = (($13) - ($107))|0;
     $109 = (($2) + ($108)|0);
     $110 = (_BN_bn2bin($$0133,$109)|0);
     $111 = (($13) - ($110))|0;
     $112 = ($111|0)>(0);
     if ($112) {
      _memset(($2|0),0,($111|0))|0;
      $$0130157 = $13;
     } else {
      $$0130157 = $13;
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($5);
 $$0129160 = $14;$$0130158 = $$0130157;$$0131156 = $13;
 _BN_CTX_free($5);
 _CRYPTO_clear_free($$0129160,$$0131156,83252,0);
 return ($$0130158|0);
}
function _rsa_ossl_private_decrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i121 = 0, $$0115$ph129132 = 0, $$0115$ph130 = 0, $$0115128 = 0, $$0116134 = 0, $$0117145 = 0, $$0118143 = 0, $$0119 = 0, $$1 = 0, $$1120140 = 0, $$1120141 = 0, $$pre = 0, $$pre147 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_BN_CTX_new()|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0117145 = 0;$$0118143 = 0;$$1120141 = -1;
  _BN_CTX_free($5);
  _CRYPTO_clear_free($$0117145,$$0118143,83252,0);
  return ($$1120141|0);
 }
 _BN_CTX_start($5);
 $7 = (_BN_CTX_get($5)|0);
 $8 = (_BN_CTX_get($5)|0);
 $9 = ((($3)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_BN_num_bits($10)|0);
 $12 = (($11) + 7)|0;
 $13 = (($12|0) / 8)&-1;
 $14 = (_CRYPTO_malloc($13,83252,0)|0);
 $15 = ($7|0)==(0|0);
 $16 = ($8|0)==(0|0);
 $or$cond = $15 | $16;
 $17 = ($14|0)==(0|0);
 $or$cond3 = $or$cond | $17;
 L4: do {
  if ($or$cond3) {
   _ERR_put_error(4,101,65,0,0);
   $$1120140 = -1;
  } else {
   $18 = ($13|0)<($0|0);
   if ($18) {
    _ERR_put_error(4,101,108,0,0);
    $$1120140 = -1;
    break;
   }
   $19 = (_BN_bin2bn($1,$0,$7)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    $$1120140 = -1;
   } else {
    $21 = HEAP32[$9>>2]|0;
    $22 = (_BN_ucmp($7,$21)|0);
    $23 = ($22|0)>(-1);
    if ($23) {
     _ERR_put_error(4,101,132,0,0);
     $$1120140 = -1;
     break;
    }
    $24 = ((($3)) + 56|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 128;
    $27 = ($26|0)==(0);
    L14: do {
     if ($27) {
      $28 = ((($3)) + 84|0);
      $29 = HEAP32[$28>>2]|0;
      (_CRYPTO_THREAD_write_lock($29)|0);
      $30 = ((($3)) + 76|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(0|0);
      if ($32) {
       $33 = (_RSA_setup_blinding($3,$5)|0);
       HEAP32[$30>>2] = $33;
       $34 = ($33|0)==(0|0);
       if ($34) {
        $35 = HEAP32[$28>>2]|0;
        (_CRYPTO_THREAD_unlock($35)|0);
       } else {
        $36 = $33;
        label = 13;
       }
      } else {
       $36 = $31;
       label = 13;
      }
      L19: do {
       if ((label|0) == 13) {
        $37 = (_BN_BLINDING_is_current_thread($36)|0);
        $38 = ($37|0)==(0);
        do {
         if ($38) {
          $39 = ((($3)) + 80|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = ($40|0)==(0|0);
          if ($41) {
           $43 = (_RSA_setup_blinding($3,$5)|0);
           HEAP32[$39>>2] = $43;
           $44 = HEAP32[$28>>2]|0;
           (_CRYPTO_THREAD_unlock($44)|0);
           $45 = ($43|0)==(0|0);
           if ($45) {
            break L19;
           } else {
            $$0115$ph130 = $43;
           }
          } else {
           $42 = HEAP32[$28>>2]|0;
           (_CRYPTO_THREAD_unlock($42)|0);
           $$0115$ph130 = $40;
          }
          $46 = (_BN_CTX_get($5)|0);
          $47 = ($46|0)==(0|0);
          if ($47) {
           _ERR_put_error(4,101,65,0,0);
           $$1120140 = -1;
           break L4;
          } else {
           (_BN_BLINDING_lock($$0115$ph130)|0);
           $50 = (_BN_BLINDING_convert_ex($7,$46,$$0115$ph130,$5)|0);
           (_BN_BLINDING_unlock($$0115$ph130)|0);
           $$0$i121 = $50;$$0115$ph129132 = $$0115$ph130;$$0116134 = $46;
           break;
          }
         } else {
          $48 = HEAP32[$28>>2]|0;
          (_CRYPTO_THREAD_unlock($48)|0);
          $49 = (_BN_BLINDING_convert_ex($7,0,$36,$5)|0);
          $$0$i121 = $49;$$0115$ph129132 = $36;$$0116134 = 0;
         }
        } while(0);
        $51 = ($$0$i121|0)==(0);
        if ($51) {
         $$1120140 = -1;
         break L4;
        }
        $$pre = HEAP32[$24>>2]|0;
        $$0115128 = $$0115$ph129132;$$1 = $$0116134;$104 = 1;$53 = $$pre;
        break L14;
       }
      } while(0);
      _ERR_put_error(4,101,68,0,0);
      $$1120140 = -1;
      break L4;
     } else {
      $$0115128 = 0;$$1 = 0;$104 = 0;$53 = $25;
     }
    } while(0);
    $52 = $53 & 32;
    $54 = ($52|0)==(0);
    do {
     if ($54) {
      $55 = ((($3)) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)==(0|0);
      if (!($57)) {
       $58 = ((($3)) + 32|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = ($59|0)==(0|0);
       if (!($60)) {
        $61 = ((($3)) + 36|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = ($62|0)==(0|0);
        if (!($63)) {
         $64 = ((($3)) + 40|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = ($65|0)==(0|0);
         if (!($66)) {
          $67 = ((($3)) + 44|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = ($68|0)==(0|0);
          if (!($69)) {
           label = 30;
           break;
          }
         }
        }
       }
      }
      $76 = (_BN_new()|0);
      $77 = ($76|0)==(0|0);
      if ($77) {
       _ERR_put_error(4,101,65,0,0);
       $$1120140 = -1;
       break L4;
      }
      $78 = ((($3)) + 24|0);
      $79 = HEAP32[$78>>2]|0;
      _BN_with_flags($76,$79,4);
      $80 = HEAP32[$24>>2]|0;
      $81 = $80 & 2;
      $82 = ($81|0)==(0);
      $$pre147 = ((($3)) + 60|0);
      if (!($82)) {
       $83 = ((($3)) + 84|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = HEAP32[$9>>2]|0;
       $86 = (_BN_MONT_CTX_set_locked($$pre147,$84,$85,$5)|0);
       $87 = ($86|0)==(0|0);
       if ($87) {
        _BN_free($76);
        $$1120140 = -1;
        break L4;
       }
      }
      $88 = ((($3)) + 8|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ((($89)) + 24|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = HEAP32[$9>>2]|0;
      $93 = HEAP32[$$pre147>>2]|0;
      $94 = (FUNCTION_TABLE_iiiiiii[$91 & 31]($8,$7,$76,$92,$5,$93)|0);
      $95 = ($94|0)==(0);
      _BN_free($76);
      if ($95) {
       $$1120140 = -1;
       break L4;
      }
     } else {
      label = 30;
     }
    } while(0);
    if ((label|0) == 30) {
     $70 = ((($3)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 20|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (FUNCTION_TABLE_iiiii[$73 & 63]($8,$7,$3,$5)|0);
     $75 = ($74|0)==(0);
     if ($75) {
      $$1120140 = -1;
      break;
     }
    }
    if ($104) {
     $96 = (_BN_BLINDING_invert_ex($8,$$1,$$0115128,$5)|0);
     $97 = ($96|0)==(0);
     if ($97) {
      $$1120140 = -1;
      break;
     }
    }
    $98 = (_BN_bn2bin($8,$14)|0);
    switch ($4|0) {
    case 1:  {
     $99 = (_RSA_padding_check_PKCS1_type_2($2,$13,$14,$98,$13)|0);
     $$0119 = $99;
     break;
    }
    case 4:  {
     $100 = (_RSA_padding_check_PKCS1_OAEP($2,$13,$14,$98,$13,0,0)|0);
     $$0119 = $100;
     break;
    }
    case 2:  {
     $101 = (_RSA_padding_check_SSLv23($2,$13,$14,$98,$13)|0);
     $$0119 = $101;
     break;
    }
    case 3:  {
     $102 = (_RSA_padding_check_none($2,$13,$14,$98,$13)|0);
     $$0119 = $102;
     break;
    }
    default: {
     _ERR_put_error(4,101,118,0,0);
     $$1120140 = -1;
     break L4;
    }
    }
    $103 = ($$0119|0)<(0);
    if ($103) {
     _ERR_put_error(4,101,114,0,0);
     $$1120140 = $$0119;
    } else {
     $$1120140 = $$0119;
    }
   }
  }
 } while(0);
 _BN_CTX_end($5);
 $$0117145 = $14;$$0118143 = $13;$$1120141 = $$1120140;
 _BN_CTX_free($5);
 _CRYPTO_clear_free($$0117145,$$0118143,83252,0);
 return ($$1120141|0);
}
function _rsa_ossl_mod_exp($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0159 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _BN_CTX_start($3);
 $4 = (_BN_CTX_get($3)|0);
 $5 = (_BN_CTX_get($3)|0);
 $6 = (_BN_CTX_get($3)|0);
 $7 = (_BN_new()|0);
 $8 = (_BN_new()|0);
 $9 = ($7|0)==(0|0);
 $10 = ($8|0)==(0|0);
 $or$cond = $9 | $10;
 L1: do {
  if ($or$cond) {
   _BN_free($7);
   _BN_free($8);
   $$0159 = 0;
  } else {
   $11 = ((($2)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   _BN_with_flags($7,$12,4);
   $13 = ((($2)) + 32|0);
   $14 = HEAP32[$13>>2]|0;
   _BN_with_flags($8,$14,4);
   $15 = ((($2)) + 56|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 & 4;
   $18 = ($17|0)==(0);
   do {
    if (!($18)) {
     $19 = ((($2)) + 64|0);
     $20 = ((($2)) + 84|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (_BN_MONT_CTX_set_locked($19,$21,$7,$3)|0);
     $23 = ($22|0)==(0|0);
     if (!($23)) {
      $24 = ((($2)) + 68|0);
      $25 = HEAP32[$20>>2]|0;
      $26 = (_BN_MONT_CTX_set_locked($24,$25,$8,$3)|0);
      $27 = ($26|0)==(0|0);
      if (!($27)) {
       break;
      }
     }
     _BN_free($7);
     _BN_free($8);
     $$0159 = 0;
     break L1;
    }
   } while(0);
   _BN_free($7);
   _BN_free($8);
   $28 = HEAP32[$15>>2]|0;
   $29 = $28 & 2;
   $30 = ($29|0)==(0);
   if (!($30)) {
    $31 = ((($2)) + 60|0);
    $32 = ((($2)) + 84|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($2)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (_BN_MONT_CTX_set_locked($31,$33,$35,$3)|0);
    $37 = ($36|0)==(0|0);
    if ($37) {
     $$0159 = 0;
     break;
    }
   }
   $38 = (_BN_new()|0);
   $39 = ($38|0)==(0|0);
   if ($39) {
    $$0159 = 0;
   } else {
    _BN_with_flags($38,$1,4);
    $40 = HEAP32[$13>>2]|0;
    $41 = (_BN_div(0,$4,$38,$40,$3)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     _BN_free($38);
     $$0159 = 0;
     break;
    }
    $43 = (_BN_new()|0);
    $44 = ($43|0)==(0|0);
    if ($44) {
     _BN_free($38);
     $$0159 = 0;
     break;
    }
    $45 = ((($2)) + 40|0);
    $46 = HEAP32[$45>>2]|0;
    _BN_with_flags($43,$46,4);
    $47 = ((($2)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 24|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$13>>2]|0;
    $52 = ((($2)) + 68|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (FUNCTION_TABLE_iiiiiii[$50 & 31]($5,$4,$43,$51,$3,$53)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     _BN_free($38);
     _BN_free($43);
     $$0159 = 0;
     break;
    }
    _BN_free($43);
    $56 = HEAP32[$11>>2]|0;
    $57 = (_BN_div(0,$4,$38,$56,$3)|0);
    $58 = ($57|0)==(0);
    _BN_free($38);
    if ($58) {
     $$0159 = 0;
    } else {
     $59 = (_BN_new()|0);
     $60 = ($59|0)==(0|0);
     if ($60) {
      $$0159 = 0;
     } else {
      $61 = ((($2)) + 36|0);
      $62 = HEAP32[$61>>2]|0;
      _BN_with_flags($59,$62,4);
      $63 = HEAP32[$47>>2]|0;
      $64 = ((($63)) + 24|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = HEAP32[$11>>2]|0;
      $67 = ((($2)) + 64|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (FUNCTION_TABLE_iiiiiii[$65 & 31]($0,$4,$59,$66,$3,$68)|0);
      $70 = ($69|0)==(0);
      _BN_free($59);
      if ($70) {
       $$0159 = 0;
      } else {
       $71 = (_BN_sub($0,$0,$5)|0);
       $72 = ($71|0)==(0);
       if ($72) {
        $$0159 = 0;
       } else {
        $73 = (_BN_is_negative($0)|0);
        $74 = ($73|0)==(0);
        if (!($74)) {
         $75 = HEAP32[$11>>2]|0;
         $76 = (_BN_add($0,$0,$75)|0);
         $77 = ($76|0)==(0);
         if ($77) {
          $$0159 = 0;
          break;
         }
        }
        $78 = ((($2)) + 44|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = (_BN_mul($4,$0,$79,$3)|0);
        $81 = ($80|0)==(0);
        if ($81) {
         $$0159 = 0;
        } else {
         $82 = (_BN_new()|0);
         $83 = ($82|0)==(0|0);
         if ($83) {
          $$0159 = 0;
         } else {
          _BN_with_flags($82,$4,4);
          $84 = HEAP32[$11>>2]|0;
          $85 = (_BN_div(0,$0,$82,$84,$3)|0);
          $86 = ($85|0)==(0);
          _BN_free($82);
          if ($86) {
           $$0159 = 0;
          } else {
           $87 = (_BN_is_negative($0)|0);
           $88 = ($87|0)==(0);
           if (!($88)) {
            $89 = HEAP32[$11>>2]|0;
            $90 = (_BN_add($0,$0,$89)|0);
            $91 = ($90|0)==(0);
            if ($91) {
             $$0159 = 0;
             break;
            }
           }
           $92 = HEAP32[$13>>2]|0;
           $93 = (_BN_mul($4,$0,$92,$3)|0);
           $94 = ($93|0)==(0);
           if ($94) {
            $$0159 = 0;
           } else {
            $95 = (_BN_add($0,$4,$5)|0);
            $96 = ($95|0)==(0);
            if ($96) {
             $$0159 = 0;
            } else {
             $97 = ((($2)) + 20|0);
             $98 = HEAP32[$97>>2]|0;
             $99 = ($98|0)==(0|0);
             if ($99) {
              $$0159 = 1;
             } else {
              $100 = ((($2)) + 16|0);
              $101 = HEAP32[$100>>2]|0;
              $102 = ($101|0)==(0|0);
              if ($102) {
               $$0159 = 1;
               break;
              }
              $103 = HEAP32[$47>>2]|0;
              $104 = ((($103)) + 24|0);
              $105 = HEAP32[$104>>2]|0;
              $106 = ((($2)) + 60|0);
              $107 = HEAP32[$106>>2]|0;
              $108 = (FUNCTION_TABLE_iiiiiii[$105 & 31]($6,$0,$98,$101,$3,$107)|0);
              $109 = ($108|0)==(0);
              if ($109) {
               $$0159 = 0;
               break;
              }
              $110 = (_BN_sub($6,$6,$1)|0);
              $111 = ($110|0)==(0);
              if ($111) {
               $$0159 = 0;
               break;
              }
              $112 = HEAP32[$100>>2]|0;
              $113 = (_BN_div(0,$6,$6,$112,$3)|0);
              $114 = ($113|0)==(0);
              if ($114) {
               $$0159 = 0;
               break;
              }
              $115 = (_BN_is_negative($6)|0);
              $116 = ($115|0)==(0);
              if (!($116)) {
               $117 = HEAP32[$100>>2]|0;
               $118 = (_BN_add($6,$6,$117)|0);
               $119 = ($118|0)==(0);
               if ($119) {
                $$0159 = 0;
                break;
               }
              }
              $120 = (_BN_is_zero($6)|0);
              $121 = ($120|0)==(0);
              if (!($121)) {
               $$0159 = 1;
               break;
              }
              $122 = (_BN_new()|0);
              $123 = ($122|0)==(0|0);
              if (!($123)) {
               $124 = ((($2)) + 24|0);
               $125 = HEAP32[$124>>2]|0;
               _BN_with_flags($122,$125,4);
               $126 = HEAP32[$47>>2]|0;
               $127 = ((($126)) + 24|0);
               $128 = HEAP32[$127>>2]|0;
               $129 = HEAP32[$100>>2]|0;
               $130 = HEAP32[$106>>2]|0;
               $131 = (FUNCTION_TABLE_iiiiiii[$128 & 31]($0,$1,$122,$129,$3,$130)|0);
               $132 = ($131|0)==(0);
               _BN_free($122);
               if (!($132)) {
                $$0159 = 1;
                break;
               }
              }
              $$0159 = 0;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _BN_CTX_end($3);
 return ($$0159|0);
}
function _rsa_ossl_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 6;
 HEAP32[$1>>2] = $3;
 return 1;
}
function _rsa_ossl_finish($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 _BN_MONT_CTX_free($2);
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 _BN_MONT_CTX_free($4);
 $5 = ((($0)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 _BN_MONT_CTX_free($6);
 return 1;
}
function _RSA_padding_add_PKCS1_type_1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($1) + -11)|0;
 $5 = ($4|0)<($3|0);
 if ($5) {
  _ERR_put_error(4,108,110,0,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $6 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 0;
  $7 = ((($0)) + 2|0);
  HEAP8[$6>>0] = 1;
  $8 = (($1) + -3)|0;
  $9 = (($8) - ($3))|0;
  _memset(($7|0),-1,($9|0))|0;
  $10 = (($7) + ($9)|0);
  $11 = ((($10)) + 1|0);
  HEAP8[$10>>0] = 0;
  _memcpy(($11|0),($2|0),($3|0))|0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _RSA_padding_check_PKCS1_type_1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$pn45 = 0, $$0$pn45$phi = 0, $$03342 = 0, $$03344 = 0, $$034 = 0, $$035 = 0, $$1 = 0, $$143 = 0, $$146 = 0, $$2 = 0, $$neg = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($4|0)<(11);
 if ($5) {
  $$034 = -1;
  return ($$034|0);
 }
 $6 = ($4|0)==($3|0);
 do {
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    $9 = ((($2)) + 1|0);
    $10 = (($4) + -1)|0;
    $$0 = $9;$$035 = $10;
    break;
   }
   _ERR_put_error(4,112,138,0,0);
   $$034 = -1;
   return ($$034|0);
  } else {
   $$0 = $2;$$035 = $3;
  }
 } while(0);
 $11 = (($$035) + 1)|0;
 $12 = ($11|0)==($4|0);
 if ($12) {
  $13 = HEAP8[$$0>>0]|0;
  $14 = ($13<<24>>24)==(1);
  if ($14) {
   $15 = (($$035) + -1)|0;
   $$143 = ((($$0)) + 1|0);
   $16 = ($$035|0)>(1);
   L14: do {
    if ($16) {
     $$0$pn45 = $$0;$$03344 = 0;$$146 = $$143;
     L15: while(1) {
      $17 = HEAP8[$$146>>0]|0;
      switch ($17<<24>>24) {
      case 0:  {
       label = 11;
       break L15;
       break;
      }
      case -1:  {
       break;
      }
      default: {
       break L15;
      }
      }
      $19 = (($$03344) + 1)|0;
      $$1 = ((($$146)) + 1|0);
      $20 = ($19|0)<($15|0);
      if ($20) {
       $$0$pn45$phi = $$146;$$03344 = $19;$$146 = $$1;$$0$pn45 = $$0$pn45$phi;
      } else {
       $$03342 = $19;$$2 = $$1;
       break L14;
      }
     }
     if ((label|0) == 11) {
      $18 = ((($$0$pn45)) + 2|0);
      $$03342 = $$03344;$$2 = $18;
      break;
     }
     _ERR_put_error(4,112,102,0,0);
     $$034 = -1;
     return ($$034|0);
    } else {
     $$03342 = 0;$$2 = $$143;
    }
   } while(0);
   $21 = ($$03342|0)==($15|0);
   if ($21) {
    _ERR_put_error(4,112,113,0,0);
    $$034 = -1;
    return ($$034|0);
   }
   $22 = ($$03342|0)<(8);
   if ($22) {
    _ERR_put_error(4,112,103,0,0);
    $$034 = -1;
    return ($$034|0);
   }
   $$neg = (($$035) + -2)|0;
   $23 = (($$neg) - ($$03342))|0;
   $24 = ($23|0)>($1|0);
   if ($24) {
    _ERR_put_error(4,112,109,0,0);
    $$034 = -1;
    return ($$034|0);
   } else {
    _memcpy(($0|0),($$2|0),($23|0))|0;
    $$034 = $23;
    return ($$034|0);
   }
  }
 }
 _ERR_put_error(4,112,106,0,0);
 $$034 = -1;
 return ($$034|0);
}
function _RSA_padding_add_PKCS1_type_2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa = 0, $$024 = 0, $$02529 = 0, $$030 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($1) + -11)|0;
 $5 = ($4|0)<($3|0);
 if ($5) {
  _ERR_put_error(4,109,110,0,0);
  $$024 = 0;
  return ($$024|0);
 }
 $6 = ((($0)) + 1|0);
 HEAP8[$0>>0] = 0;
 $7 = ((($0)) + 2|0);
 HEAP8[$6>>0] = 2;
 $8 = (($1) + -3)|0;
 $9 = (($8) - ($3))|0;
 $10 = (_RAND_bytes($7,$9)|0);
 $11 = ($10|0)<(1);
 if ($11) {
  $$024 = 0;
  return ($$024|0);
 }
 $12 = ($9|0)>(0);
 L8: do {
  if ($12) {
   $$02529 = 0;$$030 = $7;
   L9: while(1) {
    $13 = HEAP8[$$030>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if ($14) {
     while(1) {
      $15 = (_RAND_bytes($$030,1)|0);
      $16 = ($15|0)<(1);
      if ($16) {
       $$024 = 0;
       break L9;
      }
      $17 = HEAP8[$$030>>0]|0;
      $18 = ($17<<24>>24)==(0);
      if (!($18)) {
       break;
      }
     }
    }
    $19 = ((($$030)) + 1|0);
    $20 = (($$02529) + 1)|0;
    $21 = ($20|0)<($9|0);
    if ($21) {
     $$02529 = $20;$$030 = $19;
    } else {
     $$0$lcssa = $19;
     break L8;
    }
   }
   return ($$024|0);
  } else {
   $$0$lcssa = $7;
  }
 } while(0);
 $22 = ((($$0$lcssa)) + 1|0);
 HEAP8[$$0$lcssa>>0] = 0;
 _memcpy(($22|0),($2|0),($3|0))|0;
 $$024 = 1;
 return ($$024|0);
}
function _RSA_padding_check_PKCS1_type_2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$06168 = 0, $$062$lcssa = 0, $$06267 = 0, $$06366 = 0, $$064$ph = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3 | $1;
 $6 = ($5|0)<(0);
 if ($6) {
  $$0 = -1;
  return ($$0|0);
 }
 $7 = ($3|0)>($4|0);
 $8 = ($4|0)<(11);
 $or$cond3 = $7 | $8;
 if ($or$cond3) {
  $$064$ph = 0;
  label = 8;
 } else {
  $9 = (_CRYPTO_zalloc($4,83252,0)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   _ERR_put_error(4,113,65,0,0);
   $$0 = -1;
   return ($$0|0);
  }
  $11 = (($9) + ($4)|0);
  $12 = (0 - ($3))|0;
  $13 = (($11) + ($12)|0);
  _memcpy(($13|0),($2|0),($3|0))|0;
  $14 = HEAP8[$9>>0]|0;
  $15 = $14&255;
  $16 = (($15) + -1)|0;
  $17 = ((($9)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 ^ 2;
  $20 = $19&255;
  $21 = (($20) + -1)|0;
  $22 = $21 & $16;
  $23 = $22 >> 31;
  $24 = ($4|0)>(2);
  if ($24) {
   $$06168 = 2;$$06267 = 0;$$06366 = 0;
   while(1) {
    $25 = (($9) + ($$06168)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = (($27) + -1)|0;
    $29 = $28 >> 31;
    $30 = $$06366 ^ -1;
    $31 = $$06168 & $30;
    $32 = $31 & $29;
    $$not = $29 ^ -1;
    $33 = $$06366 | $$not;
    $34 = $33 & $$06267;
    $35 = $34 | $32;
    $36 = $29 | $$06366;
    $37 = (($$06168) + 1)|0;
    $exitcond = ($37|0)==($4|0);
    if ($exitcond) {
     $$062$lcssa = $35;
     break;
    } else {
     $$06168 = $37;$$06267 = $35;$$06366 = $36;
    }
   }
  } else {
   $$062$lcssa = 0;
  }
  $38 = (($$062$lcssa) + -10)|0;
  $39 = $$062$lcssa ^ -2147483648;
  $40 = $38 & $39;
  $41 = $40 >> 31;
  $42 = $41 ^ -1;
  $43 = $23 & $42;
  $44 = (($$062$lcssa) + 1)|0;
  $45 = (($4) - ($44))|0;
  $46 = $45 ^ $1;
  $47 = (($1) - ($45))|0;
  $48 = $47 ^ $45;
  $49 = $48 | $46;
  $50 = $49 ^ $1;
  $51 = $50 >> 31;
  $52 = $51 ^ -1;
  $53 = $43 & $52;
  $54 = ($53|0)==(0);
  if ($54) {
   $$064$ph = $9;
   label = 8;
  } else {
   $55 = (($9) + ($44)|0);
   _memcpy(($0|0),($55|0),($45|0))|0;
   _CRYPTO_free($9,83252,0);
   $56 = ($45|0)==(-1);
   if (!($56)) {
    $$0 = $45;
    return ($$0|0);
   }
  }
 }
 if ((label|0) == 8) {
  _CRYPTO_free($$064$ph,83252,0);
 }
 _ERR_put_error(4,113,159,0,0);
 $$0 = -1;
 return ($$0|0);
}
function _pkey_rsa_init($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_zalloc(44,83252,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$1>>2] = 1024;
 $3 = ((($1)) + 16|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($1)) + 28|0);
 HEAP32[$4>>2] = -2;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($1)) + 8|0);
 $7 = ((($0)) + 32|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 36|0);
 HEAP32[$8>>2] = 2;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_rsa_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = (_CRYPTO_zalloc(44,83252,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$2>>2] = 1024;
 $4 = ((($2)) + 16|0);
 HEAP32[$4>>2] = 1;
 $5 = ((($2)) + 28|0);
 HEAP32[$5>>2] = -2;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($2)) + 8|0);
 $8 = ((($0)) + 32|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 36|0);
 HEAP32[$9>>2] = 2;
 $10 = ((($1)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$2>>2] = $12;
 $13 = ((($11)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = (_BN_dup($14)|0);
  $17 = ((($2)) + 4|0);
  HEAP32[$17>>2] = $16;
  $18 = ($16|0)==(0|0);
  if ($18) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $19 = ((($11)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($2)) + 16|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($11)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($2)) + 20|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($11)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($2)) + 24|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($11)) + 36|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $$0 = 1;
  return ($$0|0);
 }
 $31 = ((($2)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 _CRYPTO_free($32,83252,0);
 $33 = HEAP32[$28>>2]|0;
 $34 = ((($11)) + 40|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_CRYPTO_memdup($33,$35,83252,0)|0);
 HEAP32[$31>>2] = $36;
 $37 = ($36|0)==(0|0);
 if ($37) {
  $$0 = 0;
  return ($$0|0);
 }
 $38 = HEAP32[$34>>2]|0;
 $39 = ((($2)) + 40|0);
 HEAP32[$39>>2] = $38;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_rsa_cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _BN_free($5);
 $6 = ((($2)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 _CRYPTO_free($7,83252,0);
 $8 = ((($2)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 _CRYPTO_free($9,83252,0);
 _CRYPTO_free($2,83252,0);
 return;
}
function _pkey_rsa_keygen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_BN_new()|0);
  HEAP32[$4>>2] = $7;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
  $9 = (_BN_set_word($7,65537)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $11 = (_RSA_new()|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   $$028 = 0;
  } else {
   $16 = (_BN_GENCB_new()|0);
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    _evp_pkey_set_cb_translate($16,$0);
    $$028 = $16;
    break;
   }
   _RSA_free($11);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $18 = HEAP32[$3>>2]|0;
 $19 = HEAP32[$4>>2]|0;
 $20 = (_RSA_generate_key_ex($11,$18,$19,$$028)|0);
 _BN_GENCB_free($$028);
 $21 = ($20|0)>(0);
 if ($21) {
  (_EVP_PKEY_assign($1,6,$11)|0);
  $$0 = $20;
  return ($$0|0);
 } else {
  _RSA_free($11);
  $$0 = $20;
  return ($$0|0);
 }
 return (0)|0;
}
function _pkey_rsa_sign($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$2 = 0, $$268 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $not$$i = 0, $not$$i71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($8)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 L1: do {
  if ($15) {
   $70 = ((($8)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (_RSA_private_encrypt($4,$3,$1,$12,$71)|0);
   $$268 = $72;
  } else {
   $16 = (_EVP_MD_size($14)|0);
   $17 = ($16|0)==($4|0);
   if (!($17)) {
    _ERR_put_error(4,142,143,0,0);
    $$2 = -1;
    STACKTOP = sp;return ($$2|0);
   }
   $18 = HEAP32[$13>>2]|0;
   $19 = (_EVP_MD_type($18)|0);
   $20 = ($19|0)==(95);
   if ($20) {
    $21 = ((($8)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(1);
    if ($23) {
     $24 = (_RSA_sign_ASN1_OCTET_STRING(0,$3,$4,$1,$5,$12)|0);
     $25 = ($24|0)<(1);
     $26 = HEAP32[$5>>2]|0;
     if ($25) {
      $$2 = $24;
     } else {
      $$268 = $26;
      break;
     }
     STACKTOP = sp;return ($$2|0);
    } else {
     $$2 = -1;
     STACKTOP = sp;return ($$2|0);
    }
   }
   $27 = ((($8)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   switch ($28|0) {
   case 5:  {
    $29 = HEAP32[$9>>2]|0;
    $30 = (_EVP_PKEY_size($29)|0);
    $31 = (($4) + 1)|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     _ERR_put_error(4,142,120,0,0);
     $$2 = -1;
     STACKTOP = sp;return ($$2|0);
    }
    $33 = ((($8)) + 32|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     $36 = HEAP32[$9>>2]|0;
     $37 = (_EVP_PKEY_size($36)|0);
     $38 = (_CRYPTO_malloc($37,83252,0)|0);
     HEAP32[$33>>2] = $38;
     $not$$i = ($38|0)==(0|0);
     if ($not$$i) {
      _ERR_put_error(4,142,65,0,0);
      $$2 = -1;
      STACKTOP = sp;return ($$2|0);
     } else {
      $39 = $38;
     }
    } else {
     $39 = $34;
    }
    _memcpy(($39|0),($3|0),($4|0))|0;
    $40 = HEAP32[$13>>2]|0;
    $41 = (_EVP_MD_type($40)|0);
    $42 = (_RSA_X931_hash_id($41)|0);
    $43 = $42&255;
    $44 = HEAP32[$33>>2]|0;
    $45 = (($44) + ($4)|0);
    HEAP8[$45>>0] = $43;
    $46 = HEAP32[$33>>2]|0;
    $47 = (_RSA_private_encrypt($31,$46,$1,$12,5)|0);
    $$268 = $47;
    break L1;
    break;
   }
   case 1:  {
    $48 = HEAP32[$13>>2]|0;
    $49 = (_EVP_MD_type($48)|0);
    $50 = (_RSA_sign($49,$3,$4,$1,$6,$12)|0);
    $51 = ($50|0)<(1);
    $52 = HEAP32[$6>>2]|0;
    if ($51) {
     $$2 = $50;
    } else {
     $$268 = $52;
     break L1;
    }
    STACKTOP = sp;return ($$2|0);
    break;
   }
   case 6:  {
    $53 = ((($8)) + 32|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(0|0);
    if ($55) {
     $56 = HEAP32[$9>>2]|0;
     $57 = (_EVP_PKEY_size($56)|0);
     $58 = (_CRYPTO_malloc($57,83252,0)|0);
     HEAP32[$53>>2] = $58;
     $not$$i71 = ($58|0)==(0|0);
     if ($not$$i71) {
      $$2 = -1;
      STACKTOP = sp;return ($$2|0);
     } else {
      $64 = $58;
     }
    } else {
     $64 = $54;
    }
    $59 = HEAP32[$13>>2]|0;
    $60 = ((($8)) + 24|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($8)) + 28|0);
    $63 = HEAP32[$62>>2]|0;
    $65 = (_RSA_padding_add_PKCS1_PSS_mgf1($12,$64,$3,$59,$61,$63)|0);
    $66 = ($65|0)==(0);
    if ($66) {
     $$2 = -1;
     STACKTOP = sp;return ($$2|0);
    } else {
     $67 = (_RSA_size($12)|0);
     $68 = HEAP32[$53>>2]|0;
     $69 = (_RSA_private_encrypt($67,$68,$1,$12,3)|0);
     $$268 = $69;
     break L1;
    }
    break;
   }
   default: {
    $$2 = -1;
    STACKTOP = sp;return ($$2|0);
   }
   }
  }
 } while(0);
 $73 = ($$268|0)<(0);
 if ($73) {
  $$2 = $$268;
  STACKTOP = sp;return ($$2|0);
 }
 HEAP32[$2>>2] = $$268;
 $$2 = 1;
 STACKTOP = sp;return ($$2|0);
}
function _pkey_rsa_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$1 = 0, $$45 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$$i = 0, $not$$i46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 L1: do {
  if ($14) {
   $41 = ((($7)) + 32|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $44 = (_EVP_PKEY_size($9)|0);
    $45 = (_CRYPTO_malloc($44,83252,0)|0);
    HEAP32[$41>>2] = $45;
    $not$$i46 = ($45|0)==(0|0);
    if ($not$$i46) {
     $$1 = -1;
     STACKTOP = sp;return ($$1|0);
    } else {
     $48 = $45;
    }
   } else {
    $48 = $42;
   }
   $46 = ((($7)) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $49 = (_RSA_public_decrypt($2,$1,$48,$11,$47)|0);
   HEAP32[$5>>2] = $49;
   $50 = ($49|0)==(0);
   if ($50) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   } else {
    $51 = $49;
   }
  } else {
   $15 = ((($7)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(1);
   if ($17) {
    $18 = (_EVP_MD_type($13)|0);
    $19 = (_RSA_verify($18,$3,$4,$1,$2,$11)|0);
    $$1 = $19;
    STACKTOP = sp;return ($$1|0);
   }
   $20 = (_EVP_MD_size($13)|0);
   $21 = ($20|0)==($4|0);
   if (!($21)) {
    _ERR_put_error(4,149,143,0,0);
    $$1 = -1;
    STACKTOP = sp;return ($$1|0);
   }
   $22 = HEAP32[$15>>2]|0;
   switch ($22|0) {
   case 5:  {
    $23 = (_pkey_rsa_verifyrecover($0,0,$5,$1,$2)|0);
    $24 = ($23|0)<(1);
    if ($24) {
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    } else {
     $$pre = HEAP32[$5>>2]|0;
     $51 = $$pre;
     break L1;
    }
    break;
   }
   case 6:  {
    $25 = ((($7)) + 32|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $28 = HEAP32[$8>>2]|0;
     $29 = (_EVP_PKEY_size($28)|0);
     $30 = (_CRYPTO_malloc($29,83252,0)|0);
     HEAP32[$25>>2] = $30;
     $not$$i = ($30|0)==(0|0);
     if ($not$$i) {
      $$1 = -1;
      STACKTOP = sp;return ($$1|0);
     } else {
      $31 = $30;
     }
    } else {
     $31 = $26;
    }
    $32 = (_RSA_public_decrypt($2,$1,$31,$11,3)|0);
    $33 = ($32|0)<(1);
    if ($33) {
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    }
    $34 = HEAP32[$12>>2]|0;
    $35 = ((($7)) + 24|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$25>>2]|0;
    $38 = ((($7)) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (_RSA_verify_PKCS1_PSS_mgf1($11,$3,$34,$36,$37,$39)|0);
    $not$ = ($40|0)>(0);
    $$ = $not$&1;
    $$1 = $$;
    STACKTOP = sp;return ($$1|0);
    break;
   }
   default: {
    $$1 = -1;
    STACKTOP = sp;return ($$1|0);
   }
   }
  }
 } while(0);
 $52 = ($51|0)==($4|0);
 if (!($52)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $53 = ((($7)) + 32|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (_memcmp($3,$54,$4)|0);
 $56 = ($55|0)==(0);
 $$45 = $56&1;
 $$1 = $$45;
 STACKTOP = sp;return ($$1|0);
}
function _pkey_rsa_verifyrecover($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$1 = 0, $$140 = 0, $$14041 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 $11 = ((($7)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 L1: do {
  if ($10) {
   $48 = ((($0)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (_RSA_public_decrypt($4,$3,$1,$51,$12)|0);
   $$140 = $52;
   label = 14;
  } else {
   switch ($12|0) {
   case 5:  {
    $13 = ((($7)) + 32|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    $16 = ((($0)) + 8|0);
    if ($15) {
     $17 = HEAP32[$16>>2]|0;
     $18 = (_EVP_PKEY_size($17)|0);
     $19 = (_CRYPTO_malloc($18,83252,0)|0);
     HEAP32[$13>>2] = $19;
     $not$$i = ($19|0)==(0|0);
     if ($not$$i) {
      $$1 = -1;
      STACKTOP = sp;return ($$1|0);
     } else {
      $23 = $19;
     }
    } else {
     $23 = $14;
    }
    $20 = HEAP32[$16>>2]|0;
    $21 = ((($20)) + 20|0);
    $22 = HEAP32[$21>>2]|0;
    $24 = (_RSA_public_decrypt($4,$3,$23,$22,5)|0);
    $25 = ($24|0)<(1);
    if ($25) {
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    }
    $26 = (($24) + -1)|0;
    $27 = HEAP32[$13>>2]|0;
    $28 = (($27) + ($26)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = HEAP32[$8>>2]|0;
    $32 = (_EVP_MD_type($31)|0);
    $33 = (_RSA_X931_hash_id($32)|0);
    $34 = ($30|0)==($33|0);
    if (!($34)) {
     _ERR_put_error(4,141,100,0,0);
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    }
    $35 = HEAP32[$8>>2]|0;
    $36 = (_EVP_MD_size($35)|0);
    $37 = ($26|0)==($36|0);
    if ($37) {
     $38 = ($1|0)==(0|0);
     if ($38) {
      $$14041 = $26;
      break L1;
     }
     $39 = HEAP32[$13>>2]|0;
     _memcpy(($1|0),($39|0),($26|0))|0;
     $$14041 = $26;
     break L1;
    } else {
     _ERR_put_error(4,141,143,0,0);
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    }
    break;
   }
   case 1:  {
    $40 = (_EVP_MD_type($9)|0);
    $41 = ((($0)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 20|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_int_rsa_verify($40,0,0,$1,$5,$3,$4,$44)|0);
    $46 = ($45|0)<(1);
    $47 = HEAP32[$5>>2]|0;
    if ($46) {
     $$1 = 0;
    } else {
     $$140 = $47;
     label = 14;
     break L1;
    }
    STACKTOP = sp;return ($$1|0);
    break;
   }
   default: {
    $$1 = -1;
    STACKTOP = sp;return ($$1|0);
   }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $53 = ($$140|0)<(0);
  if ($53) {
   $$1 = $$140;
   STACKTOP = sp;return ($$1|0);
  } else {
   $$14041 = $$140;
  }
 }
 HEAP32[$2>>2] = $$14041;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _pkey_rsa_encrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$1 = 0, $$133 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(4);
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 do {
  if ($9) {
   $14 = (_RSA_size($13)|0);
   $15 = ((($6)) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $18 = HEAP32[$10>>2]|0;
    $19 = (_EVP_PKEY_size($18)|0);
    $20 = (_CRYPTO_malloc($19,83252,0)|0);
    HEAP32[$15>>2] = $20;
    $not$$i = ($20|0)==(0|0);
    if ($not$$i) {
     $$1 = -1;
     return ($$1|0);
    } else {
     $29 = $20;
    }
   } else {
    $29 = $16;
   }
   $21 = ((($6)) + 36|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($6)) + 40|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($6)) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($6)) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $30 = (_RSA_padding_add_PKCS1_OAEP_mgf1($29,$14,$3,$4,$22,$24,$26,$28)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $$1 = -1;
    return ($$1|0);
   } else {
    $32 = HEAP32[$15>>2]|0;
    $33 = HEAP32[$10>>2]|0;
    $34 = ((($33)) + 20|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (_RSA_public_encrypt($14,$32,$1,$35,3)|0);
    $$133 = $36;
    break;
   }
  } else {
   $37 = (_RSA_public_encrypt($4,$3,$1,$13,$8)|0);
   $$133 = $37;
  }
 } while(0);
 $38 = ($$133|0)<(0);
 if ($38) {
  $$1 = $$133;
  return ($$1|0);
 }
 HEAP32[$2>>2] = $$133;
 $$1 = 1;
 return ($$1|0);
}
function _pkey_rsa_decrypt($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$030 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(4);
 do {
  if ($9) {
   $10 = ((($6)) + 32|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $13 = ((($0)) + 8|0);
   if ($12) {
    $14 = HEAP32[$13>>2]|0;
    $15 = (_EVP_PKEY_size($14)|0);
    $16 = (_CRYPTO_malloc($15,83252,0)|0);
    HEAP32[$10>>2] = $16;
    $not$$i = ($16|0)==(0|0);
    if ($not$$i) {
     $$0 = -1;
     return ($$0|0);
    } else {
     $20 = $16;
    }
   } else {
    $20 = $11;
   }
   $17 = HEAP32[$13>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $21 = (_RSA_private_decrypt($4,$3,$20,$19,3)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0 = $21;
    return ($$0|0);
   } else {
    $23 = HEAP32[$10>>2]|0;
    $24 = ((($6)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($6)) + 40|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($6)) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($6)) + 24|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (_RSA_padding_check_PKCS1_OAEP_mgf1($1,$21,$23,$21,$21,$25,$27,$29,$31)|0);
    $$030 = $32;
    break;
   }
  } else {
   $33 = ((($0)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_RSA_private_decrypt($4,$3,$1,$36,$8)|0);
   $$030 = $37;
  }
 } while(0);
 $38 = ($$030|0)<(0);
 if ($38) {
  $$0 = $$030;
  return ($$0|0);
 }
 HEAP32[$2>>2] = $$030;
 $$0 = 1;
 return ($$0|0);
}
function _pkey_rsa_ctrl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$78 = 0, $$off = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 do {
  switch ($1|0) {
  case 4097:  {
   $$off = (($2) + -1)|0;
   $6 = ($$off>>>0)<(6);
   L5: do {
    if ($6) {
     $7 = ((($5)) + 20|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ($8|0)==(0|0);
     L7: do {
      if ($9) {
       label = 10;
      } else {
       $10 = (_EVP_MD_type($8)|0);
       switch ($2|0) {
       case 3:  {
        _ERR_put_error(4,140,141,0,0);
        $$0 = 0;
        return ($$0|0);
        break;
       }
       case 5:  {
        $11 = (_RSA_X931_hash_id($10)|0);
        $12 = ($11|0)==(-1);
        if (!($12)) {
         break L7;
        }
        _ERR_put_error(4,140,142,0,0);
        $$0 = 0;
        return ($$0|0);
        break;
       }
       default: {
        switch ($10|0) {
        case 117: case 95: case 257: case 3: case 114: case 4: case 674: case 673: case 672: case 675: case 64:  {
         label = 10;
         break L7;
         break;
        }
        default: {
        }
        }
        _ERR_put_error(4,140,157,0,0);
        $$0 = 0;
        return ($$0|0);
       }
       }
      }
     } while(0);
     L18: do {
      if ((label|0) == 10) {
       switch ($2|0) {
       case 6:  {
        $13 = ((($0)) + 16|0);
        $14 = HEAP32[$13>>2]|0;
        $15 = $14 & 24;
        $16 = ($15|0)==(0);
        if ($16) {
         break L5;
        }
        $17 = HEAP32[$7>>2]|0;
        $18 = ($17|0)==(0|0);
        if (!($18)) {
         break L18;
        }
        $19 = (_EVP_sha1()|0);
        HEAP32[$7>>2] = $19;
        break L18;
        break;
       }
       case 4:  {
        $20 = ((($0)) + 16|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = $21 & 768;
        $23 = ($22|0)==(0);
        if ($23) {
         break L5;
        }
        $24 = HEAP32[$7>>2]|0;
        $25 = ($24|0)==(0|0);
        if (!($25)) {
         break L18;
        }
        $26 = (_EVP_sha1()|0);
        HEAP32[$7>>2] = $26;
        break L18;
        break;
       }
       default: {
        break L18;
       }
       }
      }
     } while(0);
     $27 = ((($5)) + 16|0);
     HEAP32[$27>>2] = $2;
     $$0 = 1;
     return ($$0|0);
    }
   } while(0);
   _ERR_put_error(4,143,144,0,0);
   $$0 = -2;
   return ($$0|0);
   break;
  }
  case 4102:  {
   $28 = ((($5)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$3>>2] = $29;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4103: case 4098:  {
   $30 = ((($5)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(6);
   if (!($32)) {
    _ERR_put_error(4,143,146,0,0);
    $$0 = -2;
    return ($$0|0);
   }
   $33 = ($1|0)==(4103);
   if ($33) {
    $34 = ((($5)) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$3>>2] = $35;
    $$0 = 1;
    return ($$0|0);
   }
   $36 = ($2|0)<(-2);
   if ($36) {
    $$0 = -2;
    return ($$0|0);
   }
   $37 = ((($5)) + 28|0);
   HEAP32[$37>>2] = $2;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4099:  {
   $38 = ($2|0)<(512);
   if ($38) {
    _ERR_put_error(4,143,120,0,0);
    $$0 = -2;
    return ($$0|0);
   } else {
    HEAP32[$5>>2] = $2;
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 4100:  {
   $39 = ($3|0)==(0|0);
   if (!($39)) {
    $40 = (_BN_is_odd($3)|0);
    $41 = ($40|0)==(0);
    if (!($41)) {
     $42 = (_BN_is_one($3)|0);
     $43 = ($42|0)==(0);
     if ($43) {
      $44 = ((($5)) + 4|0);
      $45 = HEAP32[$44>>2]|0;
      _BN_free($45);
      HEAP32[$44>>2] = $3;
      $$0 = 1;
      return ($$0|0);
     }
    }
   }
   _ERR_put_error(4,143,101,0,0);
   $$0 = -2;
   return ($$0|0);
   break;
  }
  case 4107: case 4105:  {
   $46 = ((($5)) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(4);
   if (!($48)) {
    _ERR_put_error(4,143,141,0,0);
    $$0 = -2;
    return ($$0|0);
   }
   $49 = ($1|0)==(4107);
   $50 = ((($5)) + 20|0);
   if ($49) {
    $51 = HEAP32[$50>>2]|0;
    HEAP32[$3>>2] = $51;
    $$0 = 1;
    return ($$0|0);
   } else {
    HEAP32[$50>>2] = $3;
    $$0 = 1;
    return ($$0|0);
   }
   break;
  }
  case 1:  {
   $52 = ($3|0)==(0|0);
   L71: do {
    if (!($52)) {
     $53 = ((($5)) + 16|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (_EVP_MD_type($3)|0);
     switch ($54|0) {
     case 3:  {
      _ERR_put_error(4,140,141,0,0);
      $$0 = 0;
      return ($$0|0);
      break;
     }
     case 5:  {
      $56 = (_RSA_X931_hash_id($55)|0);
      $57 = ($56|0)==(-1);
      if (!($57)) {
       break L71;
      }
      _ERR_put_error(4,140,142,0,0);
      $$0 = 0;
      return ($$0|0);
      break;
     }
     default: {
      switch ($55|0) {
      case 117: case 95: case 257: case 3: case 114: case 4: case 674: case 673: case 672: case 675: case 64:  {
       break L71;
       break;
      }
      default: {
      }
      }
      _ERR_put_error(4,140,157,0,0);
      $$0 = 0;
      return ($$0|0);
     }
     }
    }
   } while(0);
   $58 = ((($5)) + 20|0);
   HEAP32[$58>>2] = $3;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 13:  {
   $59 = ((($5)) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP32[$3>>2] = $60;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4104: case 4101:  {
   $61 = ((($5)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   switch ($62|0) {
   case 4: case 6:  {
    break;
   }
   default: {
    _ERR_put_error(4,143,156,0,0);
    $$0 = -2;
    return ($$0|0);
   }
   }
   $63 = ($1|0)==(4104);
   $64 = ((($5)) + 24|0);
   if (!($63)) {
    HEAP32[$64>>2] = $3;
    $$0 = 1;
    return ($$0|0);
   }
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)==(0|0);
   if ($66) {
    $67 = ((($5)) + 20|0);
    $68 = HEAP32[$67>>2]|0;
    $$sink = $68;
   } else {
    $$sink = $65;
   }
   HEAP32[$3>>2] = $$sink;
   $$0 = 1;
   return ($$0|0);
   break;
  }
  case 4106:  {
   $69 = ((($5)) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(4);
   if ($71) {
    $72 = ((($5)) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    _CRYPTO_free($73,83252,0);
    $74 = ($3|0)!=(0|0);
    $75 = ($2|0)>(0);
    $or$cond5 = $75 & $74;
    $$ = $or$cond5 ? $3 : 0;
    $$78 = $or$cond5 ? $2 : 0;
    HEAP32[$72>>2] = $$;
    $76 = ((($5)) + 40|0);
    HEAP32[$76>>2] = $$78;
    $$0 = 1;
    return ($$0|0);
   } else {
    _ERR_put_error(4,143,141,0,0);
    $$0 = -2;
    return ($$0|0);
   }
   break;
  }
  case 4108:  {
   $77 = ((($5)) + 16|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)==(4);
   if ($79) {
    $80 = ((($5)) + 36|0);
    $81 = HEAP32[$80>>2]|0;
    HEAP32[$3>>2] = $81;
    $82 = ((($5)) + 40|0);
    $83 = HEAP32[$82>>2]|0;
    $$0 = $83;
    return ($$0|0);
   } else {
    _ERR_put_error(4,143,141,0,0);
    $$0 = -2;
    return ($$0|0);
   }
   break;
  }
  case 2:  {
   _ERR_put_error(4,143,148,0,0);
   $$0 = -2;
   return ($$0|0);
   break;
  }
  case 5: case 4: case 3: case 7:  {
   $$0 = 1;
   return ($$0|0);
   break;
  }
  default: {
   $$0 = -2;
   return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _pkey_rsa_ctrl_str($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$055 = 0, $$1 = 0, $$4 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ($2|0)==(0|0);
 if ($5) {
  _ERR_put_error(4,144,147,0,0);
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 $6 = (_strcmp($1,80681)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (_strcmp($2,80698)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$055 = 1;
  } else {
   $10 = (_strcmp($2,80704)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$055 = 2;
   } else {
    $12 = (_strcmp($2,80711)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$055 = 3;
    } else {
     $14 = (_strcmp($2,80716)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $$055 = 4;
     } else {
      $16 = (_strcmp($2,80721)|0);
      $17 = ($16|0)==(0);
      if ($17) {
       $$055 = 4;
      } else {
       $18 = (_strcmp($2,80726)|0);
       $19 = ($18|0)==(0);
       if ($19) {
        $$055 = 5;
       } else {
        $20 = (_strcmp($2,80731)|0);
        $21 = ($20|0)==(0);
        if ($21) {
         $$055 = 6;
        } else {
         _ERR_put_error(4,144,118,0,0);
         $$5 = -2;
         STACKTOP = sp;return ($$5|0);
        }
       }
      }
     }
    }
   }
  }
  $22 = (_EVP_PKEY_CTX_ctrl($0,6,-1,4097,$$055,0)|0);
  $$5 = $22;
  STACKTOP = sp;return ($$5|0);
 }
 $23 = (_strcmp($1,80735)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = (_atoi($2)|0);
  $26 = (_EVP_PKEY_CTX_ctrl($0,6,24,4098,$25,0)|0);
  $$5 = $26;
  STACKTOP = sp;return ($$5|0);
 }
 $27 = (_strcmp($1,80751)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $29 = (_atoi($2)|0);
  $30 = (_EVP_PKEY_CTX_ctrl($0,6,4,4099,$29,0)|0);
  $$5 = $30;
  STACKTOP = sp;return ($$5|0);
 }
 $31 = (_strcmp($1,80767)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  HEAP32[$3>>2] = 0;
  $33 = (_BN_asc2bn($3,$2)|0);
  $34 = ($33|0)==(0);
  if ($34) {
   $$1 = 0;
  } else {
   $35 = HEAP32[$3>>2]|0;
   $36 = (_EVP_PKEY_CTX_ctrl($0,6,4,4100,0,$35)|0);
   $37 = ($36|0)<(1);
   if ($37) {
    $38 = HEAP32[$3>>2]|0;
    _BN_free($38);
    $$1 = $36;
   } else {
    $$1 = $36;
   }
  }
  $$5 = $$1;
  STACKTOP = sp;return ($$5|0);
 }
 $39 = (_strcmp($1,80785)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = (_EVP_get_digestbyname($2)|0);
  $42 = ($41|0)==(0|0);
  if ($42) {
   _ERR_put_error(4,144,157,0,0);
   $$5 = 0;
   STACKTOP = sp;return ($$5|0);
  } else {
   $43 = (_EVP_PKEY_CTX_ctrl($0,6,1016,4101,0,$41)|0);
   $$5 = $43;
   STACKTOP = sp;return ($$5|0);
  }
 }
 $44 = (_strcmp($1,80797)|0);
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = (_EVP_get_digestbyname($2)|0);
  $47 = ($46|0)==(0|0);
  if ($47) {
   _ERR_put_error(4,144,157,0,0);
   $$5 = 0;
   STACKTOP = sp;return ($$5|0);
  } else {
   $48 = (_EVP_PKEY_CTX_ctrl($0,6,768,4105,0,$46)|0);
   $$5 = $48;
   STACKTOP = sp;return ($$5|0);
  }
 }
 $49 = (_strcmp($1,80809)|0);
 $50 = ($49|0)==(0);
 if (!($50)) {
  $$5 = -2;
  STACKTOP = sp;return ($$5|0);
 }
 $51 = (_OPENSSL_hexstr2buf($2,$4)|0);
 $52 = ($51|0)==(0|0);
 if ($52) {
  $$4 = 0;
 } else {
  $53 = HEAP32[$4>>2]|0;
  $54 = (_EVP_PKEY_CTX_ctrl($0,6,768,4106,$53,$51)|0);
  $55 = ($54|0)<(1);
  if ($55) {
   _CRYPTO_free($51,83252,0);
   $$4 = $54;
  } else {
   $$4 = $54;
  }
 }
 $$5 = $$4;
 STACKTOP = sp;return ($$5|0);
}
function _RSA_verify_PKCS1_PSS_mgf1($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$090 = 0, $$091 = 0, $$092 = 0, $$093 = 0, $$094101 = 0, $$095 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $6 = sp;
 $7 = (_EVP_MD_CTX_new()|0);
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $$090 = 0;$$095 = 0;
  } else {
   $9 = ($3|0)==(0|0);
   $$ = $9 ? $2 : $3;
   $10 = (_EVP_MD_size($2)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    $$090 = 0;$$095 = 0;
   } else {
    switch ($5|0) {
    case -1:  {
     $$093 = $10;
     break;
    }
    case -2:  {
     $$093 = -2;
     break;
    }
    default: {
     $12 = ($5|0)<(-2);
     if ($12) {
      _ERR_put_error(4,126,136,0,0);
      $$090 = 0;$$095 = 0;
      break L1;
     } else {
      $$093 = $5;
     }
    }
    }
    $13 = ((($0)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_BN_num_bits($14)|0);
    $16 = (($15) + 7)|0;
    $17 = $16 & 7;
    $18 = (_RSA_size($0)|0);
    $19 = HEAP8[$4>>0]|0;
    $20 = $19&255;
    $21 = 255 << $17;
    $22 = $20 & $21;
    $23 = ($22|0)==(0);
    if (!($23)) {
     _ERR_put_error(4,126,133,0,0);
     $$090 = 0;$$095 = 0;
     break;
    }
    $24 = ($17|0)==(0);
    $25 = ((($4)) + 1|0);
    $26 = $24 << 31 >> 31;
    $$092 = (($26) + ($18))|0;
    $$091 = $24 ? $25 : $4;
    $27 = (($10) + 2)|0;
    $28 = ($$092|0)<($27|0);
    if ($28) {
     _ERR_put_error(4,126,109,0,0);
     $$090 = 0;$$095 = 0;
     break;
    }
    $29 = (($$092) - ($10))|0;
    $30 = (($29) + -2)|0;
    $31 = ($$093|0)>($30|0);
    if ($31) {
     _ERR_put_error(4,126,109,0,0);
     $$090 = 0;$$095 = 0;
     break;
    }
    $32 = (($$092) + -1)|0;
    $33 = (($$091) + ($32)|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)==(-68);
    if (!($35)) {
     _ERR_put_error(4,126,134,0,0);
     $$090 = 0;$$095 = 0;
     break;
    }
    $36 = (($29) + -1)|0;
    $37 = (($$091) + ($36)|0);
    $38 = (_CRYPTO_malloc($36,83252,0)|0);
    $39 = ($38|0)==(0|0);
    if ($39) {
     _ERR_put_error(4,126,65,0,0);
     $$090 = 0;$$095 = 0;
     break;
    }
    $40 = (_PKCS1_MGF1($38,$36,$37,$10,$$)|0);
    $41 = ($40|0)<(0);
    if ($41) {
     $$090 = $38;$$095 = 0;
    } else {
     $42 = ($29|0)>(1);
     if ($42) {
      $$094101 = 0;
      while(1) {
       $43 = (($$091) + ($$094101)|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($38) + ($$094101)|0);
       $46 = HEAP8[$45>>0]|0;
       $47 = $46 ^ $44;
       HEAP8[$45>>0] = $47;
       $48 = (($$094101) + 1)|0;
       $49 = ($48|0)<($36|0);
       if ($49) {
        $$094101 = $48;
       } else {
        break;
       }
      }
     }
     if ($24) {
      $$1 = 0;
     } else {
      $50 = (8 - ($17))|0;
      $51 = 255 >>> $50;
      $52 = HEAP8[$38>>0]|0;
      $53 = $52&255;
      $54 = $53 & $51;
      $55 = $54&255;
      HEAP8[$38>>0] = $55;
      $$1 = 0;
     }
     while(1) {
      $56 = (($38) + ($$1)|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = ($57<<24>>24)==(0);
      $59 = (($$1) + 1)|0;
      $60 = ($$1|0)<($30|0);
      $or$cond = $60 & $58;
      if ($or$cond) {
       $$1 = $59;
      } else {
       break;
      }
     }
     $61 = ($57<<24>>24)==(1);
     if (!($61)) {
      _ERR_put_error(4,126,135,0,0);
      $$090 = $38;$$095 = 0;
      break;
     }
     $62 = ($$093|0)<(0);
     $63 = (($36) - ($59))|0;
     $64 = ($63|0)==($$093|0);
     $or$cond98 = $62 | $64;
     if (!($or$cond98)) {
      _ERR_put_error(4,126,136,0,0);
      $$090 = $38;$$095 = 0;
      break;
     }
     $65 = (_EVP_DigestInit_ex($7,$2,0)|0);
     $66 = ($65|0)==(0);
     if ($66) {
      $$090 = $38;$$095 = 0;
     } else {
      $67 = (_EVP_DigestUpdate($7,83244,8)|0);
      $68 = ($67|0)==(0);
      if ($68) {
       $$090 = $38;$$095 = 0;
      } else {
       $69 = (_EVP_DigestUpdate($7,$1,$10)|0);
       $70 = ($69|0)==(0);
       if ($70) {
        $$090 = $38;$$095 = 0;
       } else {
        $71 = ($63|0)==(0);
        if (!($71)) {
         $72 = (($38) + ($59)|0);
         $73 = (_EVP_DigestUpdate($7,$72,$63)|0);
         $74 = ($73|0)==(0);
         if ($74) {
          $$090 = $38;$$095 = 0;
          break;
         }
        }
        $75 = (_EVP_DigestFinal_ex($7,$6,0)|0);
        $76 = ($75|0)==(0);
        if ($76) {
         $$090 = $38;$$095 = 0;
        } else {
         $77 = (_memcmp($6,$37,$10)|0);
         $78 = ($77|0)==(0);
         if ($78) {
          $$090 = $38;$$095 = 1;
         } else {
          _ERR_put_error(4,126,104,0,0);
          $$090 = $38;$$095 = 0;
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _CRYPTO_free($$090,83252,0);
 _EVP_MD_CTX_free($7);
 STACKTOP = sp;return ($$095|0);
}
function _RSA_padding_add_PKCS1_PSS_mgf1($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$08798 = 0, $$088 = 0, $$089 = 0, $$090 = 0, $$092 = 0, $$09497 = 0, $$095 = 0, $$1 = 0, $$193 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($4|0)==(0|0);
 $$ = $6 ? $3 : $4;
 $7 = (_EVP_MD_size($3)|0);
 $8 = ($7|0)<(0);
 L1: do {
  if ($8) {
   $$0 = 0;$$095 = 0;$$1 = 0;
  } else {
   switch ($5|0) {
   case -1:  {
    $$092 = $7;
    break;
   }
   case -2:  {
    $$092 = -2;
    break;
   }
   default: {
    $9 = ($5|0)<(-2);
    if ($9) {
     _ERR_put_error(4,152,136,0,0);
     $$0 = 0;$$095 = 0;$$1 = 0;
     break L1;
    } else {
     $$092 = $5;
    }
   }
   }
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_BN_num_bits($11)|0);
   $13 = (($12) + 7)|0;
   $14 = $13 & 7;
   $15 = (_RSA_size($0)|0);
   $16 = ($14|0)==(0);
   if ($16) {
    $17 = (($15) + -1)|0;
    $18 = ((($1)) + 1|0);
    HEAP8[$1>>0] = 0;
    $$089 = $18;$$090 = $17;
   } else {
    $$089 = $1;$$090 = $15;
   }
   $19 = (($7) + 2)|0;
   $20 = ($$090|0)<($19|0);
   if ($20) {
    _ERR_put_error(4,152,110,0,0);
    $$0 = 0;$$095 = 0;$$1 = 0;
    break;
   }
   $21 = ($$092|0)==(-2);
   $22 = (($$090) - ($7))|0;
   $23 = (($22) + -2)|0;
   if ($21) {
    $$193 = $23;
   } else {
    $24 = ($$092|0)>($23|0);
    if ($24) {
     _ERR_put_error(4,152,110,0,0);
     $$0 = 0;$$095 = 0;$$1 = 0;
     break;
    } else {
     $$193 = $$092;
    }
   }
   $25 = ($$193|0)>(0);
   do {
    if ($25) {
     $26 = (_CRYPTO_malloc($$193,83252,0)|0);
     $27 = ($26|0)==(0|0);
     if ($27) {
      _ERR_put_error(4,152,65,0,0);
      $$0 = 0;$$095 = 0;$$1 = 0;
      break L1;
     } else {
      $28 = (_RAND_bytes($26,$$193)|0);
      $29 = ($28|0)<(1);
      if ($29) {
       $$0 = 0;$$095 = 0;$$1 = $26;
       break L1;
      } else {
       $$088 = $26;
       break;
      }
     }
    } else {
     $$088 = 0;
    }
   } while(0);
   $30 = (($22) + -1)|0;
   $31 = (($$089) + ($30)|0);
   $32 = (_EVP_MD_CTX_new()|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    $$0 = 0;$$095 = 0;$$1 = $$088;
   } else {
    $34 = (_EVP_DigestInit_ex($32,$3,0)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     $$0 = $32;$$095 = 0;$$1 = $$088;
    } else {
     $36 = (_EVP_DigestUpdate($32,83244,8)|0);
     $37 = ($36|0)==(0);
     if ($37) {
      $$0 = $32;$$095 = 0;$$1 = $$088;
     } else {
      $38 = (_EVP_DigestUpdate($32,$2,$7)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       $$0 = $32;$$095 = 0;$$1 = $$088;
      } else {
       $40 = ($$193|0)==(0);
       if (!($40)) {
        $41 = (_EVP_DigestUpdate($32,$$088,$$193)|0);
        $42 = ($41|0)==(0);
        if ($42) {
         $$0 = $32;$$095 = 0;$$1 = $$088;
         break;
        }
       }
       $43 = (_EVP_DigestFinal_ex($32,$31,0)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        $$0 = $32;$$095 = 0;$$1 = $$088;
       } else {
        $45 = (_PKCS1_MGF1($$089,$30,$31,$7,$$)|0);
        $46 = ($45|0)==(0);
        if ($46) {
         $47 = (-2 - ($7))|0;
         $48 = (($47) + ($$090))|0;
         $49 = (($48) - ($$193))|0;
         $50 = (($$089) + ($49)|0);
         $51 = HEAP8[$50>>0]|0;
         $52 = $51 ^ 1;
         HEAP8[$50>>0] = $52;
         if ($25) {
          $$09497 = 0;$$pn = $50;
          while(1) {
           $$08798 = ((($$pn)) + 1|0);
           $53 = (($$088) + ($$09497)|0);
           $54 = HEAP8[$53>>0]|0;
           $55 = HEAP8[$$08798>>0]|0;
           $56 = $55 ^ $54;
           HEAP8[$$08798>>0] = $56;
           $57 = (($$09497) + 1)|0;
           $exitcond = ($57|0)==($$193|0);
           if ($exitcond) {
            break;
           } else {
            $$09497 = $57;$$pn = $$08798;
           }
          }
         }
         if (!($16)) {
          $58 = (8 - ($14))|0;
          $59 = 255 >>> $58;
          $60 = HEAP8[$$089>>0]|0;
          $61 = $60&255;
          $62 = $61 & $59;
          $63 = $62&255;
          HEAP8[$$089>>0] = $63;
         }
         $64 = (($$090) + -1)|0;
         $65 = (($$089) + ($64)|0);
         HEAP8[$65>>0] = -68;
         $$0 = $32;$$095 = 1;$$1 = $$088;
        } else {
         $$0 = $32;$$095 = 0;$$1 = $$088;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _EVP_MD_CTX_free($$0);
 _CRYPTO_free($$1,83252,0);
 return ($$095|0);
}
function _RSA_sign_ASN1_OCTET_STRING($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 4;
 HEAP32[$6>>2] = $2;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $1;
 $10 = (_i2d_ASN1_OCTET_STRING($6,0)|0);
 $11 = (_RSA_size($5)|0);
 $12 = (($11) + -11)|0;
 $13 = ($10|0)>($12|0);
 if ($13) {
  _ERR_put_error(4,118,112,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($11) + 1)|0;
 $15 = (_CRYPTO_malloc($14,83252,0)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  _ERR_put_error(4,118,65,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$7>>2] = $15;
 (_i2d_ASN1_OCTET_STRING($6,$7)|0);
 $17 = (_RSA_private_encrypt($10,$15,$3,$5,1)|0);
 $18 = ($17|0)<(1);
 if ($18) {
  $$025 = 0;
 } else {
  HEAP32[$4>>2] = $17;
  $$025 = 1;
 }
 _CRYPTO_clear_free($15,$14,83252,0);
 $$0 = $$025;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_sign($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$027 = 0, $$028 = 0, $$pre29 = 0, $$pre30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$6>>2] = 0;
 HEAP32[$7>>2] = 0;
 $8 = ((($5)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = (FUNCTION_TABLE_iiiiiii[$11 & 31]($0,$1,$2,$3,$4,$5)|0);
  $$028 = $13;
  STACKTOP = sp;return ($$028|0);
 }
 $14 = ($0|0)==(114);
 do {
  if ($14) {
   $15 = ($2|0)==(36);
   if ($15) {
    HEAP32[$6>>2] = 36;
    $$0 = $1;$20 = 36;$26 = 0;
    label = 8;
    break;
   }
   _ERR_put_error(4,117,131,0,0);
   $$028 = 0;
   STACKTOP = sp;return ($$028|0);
  } else {
   $16 = (_encode_pkcs1($7,$6,$0,$1,$2)|0);
   $17 = ($16|0)==(0);
   $$pre29 = HEAP32[$7>>2]|0;
   $$pre30 = HEAP32[$6>>2]|0;
   if ($17) {
    $$027 = 0;$24 = $$pre29;$25 = $$pre30;
   } else {
    $$0 = $$pre29;$20 = $$pre30;$26 = $$pre29;
    label = 8;
   }
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   $18 = (_RSA_size($5)|0);
   $19 = (($18) + -11)|0;
   $21 = ($20|0)>($19|0);
   if ($21) {
    _ERR_put_error(4,117,112,0,0);
    $$027 = 0;$24 = $26;$25 = $20;
    break;
   }
   $22 = (_RSA_private_encrypt($20,$$0,$3,$5,1)|0);
   $23 = ($22|0)<(1);
   if ($23) {
    $$027 = 0;$24 = $26;$25 = $20;
   } else {
    HEAP32[$4>>2] = $22;
    $$027 = 1;$24 = $26;$25 = $20;
   }
  }
 } while(0);
 _CRYPTO_clear_free($24,$25,83252,0);
 $$028 = $$027;
 STACKTOP = sp;return ($$028|0);
}
function _encode_pkcs1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $5 = sp + 40|0;
 $6 = sp + 32|0;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp;
 HEAP32[$9>>2] = 0;
 HEAP32[$5>>2] = $6;
 $10 = (_OBJ_nid2obj($2)|0);
 HEAP32[$6>>2] = $10;
 $11 = ($10|0)==(0|0);
 if ($11) {
  _ERR_put_error(4,146,117,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (_OBJ_length($10)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  _ERR_put_error(4,146,116,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$7>>2] = 5;
 $14 = ((($7)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 4|0);
 HEAP32[$15>>2] = $7;
 $16 = ((($5)) + 4|0);
 HEAP32[$16>>2] = $8;
 $17 = ((($8)) + 8|0);
 HEAP32[$17>>2] = $3;
 HEAP32[$8>>2] = $4;
 $18 = (_i2d_X509_SIG($5,$9)|0);
 $19 = ($18|0)<(0);
 if ($19) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = HEAP32[$9>>2]|0;
 HEAP32[$0>>2] = $20;
 HEAP32[$1>>2] = $18;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _int_rsa_verify($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$062 = 0, $$1 = 0, $$165 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = 0;
 HEAP32[$9>>2] = 0;
 $10 = (_RSA_size($7)|0);
 $11 = ($10|0)==($6|0);
 if (!($11)) {
  _ERR_put_error(4,145,119,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (_CRYPTO_malloc($6,83252,0)|0);
 $13 = ($12|0)==(0|0);
 L5: do {
  if ($13) {
   _ERR_put_error(4,145,65,0,0);
   $$062 = 0;$51 = 0;
  } else {
   $14 = (_RSA_public_decrypt($6,$5,$12,$7,1)|0);
   $15 = ($14|0)<(1);
   if ($15) {
    $$062 = 0;$51 = 0;
   } else {
    $16 = ($0|0)==(114);
    if ($16) {
     $17 = ($14|0)==(36);
     if (!($17)) {
      _ERR_put_error(4,145,104,0,0);
      $$062 = 0;$51 = 0;
      break;
     }
     $18 = ($3|0)==(0|0);
     if (!($18)) {
      dest=$3; src=$12; stop=dest+36|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      HEAP32[$4>>2] = 36;
      $$062 = 1;$51 = 0;
      break;
     }
     $19 = ($2|0)==(36);
     if (!($19)) {
      _ERR_put_error(4,145,131,0,0);
      $$062 = 0;$51 = 0;
      break;
     }
     $20 = (_memcmp($12,$1,36)|0);
     $21 = ($20|0)==(0);
     if ($21) {
      $$062 = 1;$51 = 0;
      break;
     }
     _ERR_put_error(4,145,104,0,0);
     $$062 = 0;$51 = 0;
     break;
    }
    $22 = ($0|0)==(95);
    $23 = ($14|0)==(18);
    $or$cond = $22 & $23;
    if ($or$cond) {
     $24 = HEAP8[$12>>0]|0;
     $25 = ($24<<24>>24)==(4);
     if ($25) {
      $26 = ((($12)) + 1|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = ($27<<24>>24)==(16);
      if ($28) {
       $29 = ($3|0)==(0|0);
       if (!($29)) {
        $30 = ((($12)) + 2|0);
        dest=$3; src=$30; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        HEAP32[$4>>2] = 16;
        $$062 = 1;$51 = 0;
        break;
       }
       $31 = ($2|0)==(16);
       if (!($31)) {
        _ERR_put_error(4,145,131,0,0);
        $$062 = 0;$51 = 0;
        break;
       }
       $32 = ((($12)) + 2|0);
       $33 = (_memcmp($1,$32,16)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        $$062 = 1;$51 = 0;
        break;
       }
       _ERR_put_error(4,145,104,0,0);
       $$062 = 0;$51 = 0;
       break;
      }
     }
    }
    $35 = ($3|0)!=(0|0);
    do {
     if ($35) {
      $36 = (_OBJ_nid2sn($0)|0);
      $37 = (_EVP_get_digestbyname($36)|0);
      $38 = ($37|0)==(0|0);
      if ($38) {
       _ERR_put_error(4,145,117,0,0);
       $$062 = 0;$51 = 0;
       break L5;
      }
      $39 = (_EVP_MD_size($37)|0);
      $40 = ($39>>>0)>($14>>>0);
      if ($40) {
       _ERR_put_error(4,145,143,0,0);
       $$062 = 0;$51 = 0;
       break L5;
      } else {
       $41 = (($12) + ($14)|0);
       $42 = (0 - ($39))|0;
       $43 = (($41) + ($42)|0);
       $$1 = $43;$$165 = $39;
       break;
      }
     } else {
      $$1 = $1;$$165 = $2;
     }
    } while(0);
    $44 = (_encode_pkcs1($9,$8,$0,$$1,$$165)|0);
    $45 = ($44|0)==(0);
    $$pre = HEAP32[$8>>2]|0;
    if ($45) {
     $$062 = 0;$51 = $$pre;
    } else {
     $46 = ($$pre|0)==($14|0);
     if ($46) {
      $47 = HEAP32[$9>>2]|0;
      $48 = (_memcmp($47,$12,$14)|0);
      $49 = ($48|0)==(0);
      if ($49) {
       if (!($35)) {
        $$062 = 1;$51 = $14;
        break;
       }
       _memcpy(($3|0),($$1|0),($$165|0))|0;
       HEAP32[$4>>2] = $$165;
       $$062 = 1;$51 = $14;
       break;
      }
     }
     _ERR_put_error(4,145,104,0,0);
     $$062 = 0;$51 = $$pre;
    }
   }
  }
 } while(0);
 $50 = HEAP32[$9>>2]|0;
 _CRYPTO_clear_free($50,$51,83252,0);
 _CRYPTO_clear_free($12,$6,83252,0);
 $$0 = $$062;
 STACKTOP = sp;return ($$0|0);
}
function _RSA_verify($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $12 = (_int_rsa_verify($0,$1,$2,0,0,$3,$4,$5)|0);
  $$0 = $12;
  return ($$0|0);
 } else {
  $11 = (FUNCTION_TABLE_iiiiiii[$9 & 31]($0,$1,$2,$3,$4,$5)|0);
  $$0 = $11;
  return ($$0|0);
 }
 return (0)|0;
}
function _RSA_padding_add_SSLv23($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa = 0, $$026 = 0, $$02731 = 0, $$032 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($1) + -11)|0;
 $5 = ($4|0)<($3|0);
 if ($5) {
  _ERR_put_error(4,110,110,0,0);
  $$026 = 0;
  return ($$026|0);
 }
 $6 = ((($0)) + 1|0);
 HEAP8[$0>>0] = 0;
 $7 = ((($0)) + 2|0);
 HEAP8[$6>>0] = 2;
 $8 = (($4) - ($3))|0;
 $9 = (_RAND_bytes($7,$8)|0);
 $10 = ($9|0)<(1);
 if ($10) {
  $$026 = 0;
  return ($$026|0);
 }
 $11 = ($8|0)>(0);
 L8: do {
  if ($11) {
   $$02731 = 0;$$032 = $7;
   L9: while(1) {
    $12 = HEAP8[$$032>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     while(1) {
      $14 = (_RAND_bytes($$032,1)|0);
      $15 = ($14|0)<(1);
      if ($15) {
       $$026 = 0;
       break L9;
      }
      $16 = HEAP8[$$032>>0]|0;
      $17 = ($16<<24>>24)==(0);
      if (!($17)) {
       break;
      }
     }
    }
    $18 = ((($$032)) + 1|0);
    $19 = (($$02731) + 1)|0;
    $20 = ($19|0)<($8|0);
    if ($20) {
     $$02731 = $19;$$032 = $18;
    } else {
     $$0$lcssa = $18;
     break L8;
    }
   }
   return ($$026|0);
  } else {
   $$0$lcssa = $7;
  }
 } while(0);
 $21 = $$0$lcssa;
 $22 = $21;
 HEAP8[$22>>0]=50529027&255;HEAP8[$22+1>>0]=(50529027>>8)&255;HEAP8[$22+2>>0]=(50529027>>16)&255;HEAP8[$22+3>>0]=50529027>>24;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP8[$24>>0]=50529027&255;HEAP8[$24+1>>0]=(50529027>>8)&255;HEAP8[$24+2>>0]=(50529027>>16)&255;HEAP8[$24+3>>0]=50529027>>24;
 $25 = ((($$0$lcssa)) + 8|0);
 $26 = ((($$0$lcssa)) + 9|0);
 HEAP8[$25>>0] = 0;
 _memcpy(($26|0),($2|0),($3|0))|0;
 $$026 = 1;
 return ($$026|0);
}
function _RSA_padding_check_SSLv23($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$036$lcssa = 0, $$03640 = 0, $$037 = 0, $$041 = 0, $$neg = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3|0)<(10);
 if ($5) {
  _ERR_put_error(4,114,111,0,0);
  $$037 = -1;
  return ($$037|0);
 }
 $6 = (($3) + 1)|0;
 $7 = ($6|0)==($4|0);
 if ($7) {
  $8 = HEAP8[$2>>0]|0;
  $9 = ($8<<24>>24)==(2);
  if ($9) {
   $10 = ((($2)) + 1|0);
   $11 = (($3) + -1)|0;
   $$03640 = 0;$$041 = $10;
   while(1) {
    $12 = ((($$041)) + 1|0);
    $13 = HEAP8[$$041>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if ($14) {
     $$036$lcssa = $$03640;
     break;
    }
    $15 = (($$03640) + 1)|0;
    $16 = ($15|0)<($11|0);
    if ($16) {
     $$03640 = $15;$$041 = $12;
    } else {
     $$036$lcssa = $15;
     break;
    }
   }
   $17 = ($$036$lcssa|0)==($11|0);
   $18 = ($$036$lcssa|0)<(8);
   $or$cond = $17 | $18;
   if ($or$cond) {
    _ERR_put_error(4,114,113,0,0);
    $$037 = -1;
    return ($$037|0);
   }
   $19 = ((($$041)) + -8|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = ($20<<24>>24)==(3);
   if ($21) {
    $22 = ((($$041)) + -7|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(3);
    if ($24) {
     $27 = ((($$041)) + -6|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = ($28<<24>>24)==(3);
     if ($29) {
      $30 = ((($$041)) + -5|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==(3);
      if ($32) {
       $33 = ((($$041)) + -4|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = ($34<<24>>24)==(3);
       if ($35) {
        $36 = ((($$041)) + -3|0);
        $37 = HEAP8[$36>>0]|0;
        $38 = ($37<<24>>24)==(3);
        if ($38) {
         $39 = ((($$041)) + -2|0);
         $40 = HEAP8[$39>>0]|0;
         $41 = ($40<<24>>24)==(3);
         if ($41) {
          $42 = ((($$041)) + -1|0);
          $43 = HEAP8[$42>>0]|0;
          $44 = ($43<<24>>24)==(3);
          if ($44) {
           _ERR_put_error(4,114,115,0,0);
           $$037 = -1;
           return ($$037|0);
          }
         }
        }
       }
      }
     }
    }
   }
   $$neg = (($3) + -2)|0;
   $25 = (($$neg) - ($$036$lcssa))|0;
   $26 = ($25|0)>($1|0);
   if ($26) {
    _ERR_put_error(4,114,109,0,0);
    $$037 = -1;
    return ($$037|0);
   } else {
    _memcpy(($0|0),($12|0),($25|0))|0;
    $$037 = $25;
    return ($$037|0);
   }
  }
 }
 _ERR_put_error(4,114,107,0,0);
 $$037 = -1;
 return ($$037|0);
}
function _RSA_padding_add_X931($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($1) - ($3))|0;
 $5 = (($4) + -2)|0;
 $6 = ($4|0)<(2);
 if ($6) {
  _ERR_put_error(4,127,110,0,0);
  $$021 = -1;
  return ($$021|0);
 }
 $7 = ($5|0)==(0);
 $8 = ((($0)) + 1|0);
 if ($7) {
  HEAP8[$0>>0] = 106;
  $$1 = $8;
 } else {
  HEAP8[$0>>0] = 107;
  $9 = ($5|0)>(1);
  $10 = (($4) + -3)|0;
  if ($9) {
   $11 = (($8) + ($10)|0);
   _memset(($8|0),-69,($10|0))|0;
   $$0 = $11;
  } else {
   $$0 = $8;
  }
  $12 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = -70;
  $$1 = $12;
 }
 _memcpy(($$1|0),($2|0),($3|0))|0;
 $13 = (($$1) + ($3)|0);
 HEAP8[$13>>0] = -52;
 $$021 = 1;
 return ($$021|0);
}
function _RSA_padding_check_X931($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$02937 = 0, $$032 = 0, $$03336 = 0, $$2 = 0, $$231 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($4|0)==($3|0);
 if ($5) {
  $6 = HEAP8[$2>>0]|0;
  $7 = $6 & -2;
  $switch = ($7<<24>>24)==(106);
  if ($switch) {
   $8 = ((($2)) + 1|0);
   $9 = ($6<<24>>24)==(107);
   L4: do {
    if ($9) {
     $10 = (($4) + -3)|0;
     $11 = ($4|0)>(3);
     do {
      if ($11) {
       $$02937 = $8;$$03336 = 0;
       L7: while(1) {
        $12 = ((($$02937)) + 1|0);
        $13 = HEAP8[$$02937>>0]|0;
        switch ($13<<24>>24) {
        case -70:  {
         label = 10;
         break L7;
         break;
        }
        case -69:  {
         break;
        }
        default: {
         label = 7;
         break L7;
        }
        }
        $14 = (($$03336) + 1)|0;
        $15 = ($10|0)>($14|0);
        if ($15) {
         $$02937 = $12;$$03336 = $14;
        } else {
         label = 9;
         break;
        }
       }
       if ((label|0) == 7) {
        _ERR_put_error(4,128,138,0,0);
        $$2 = -1;
        return ($$2|0);
       }
       else if ((label|0) == 9) {
        $16 = (($10) - ($14))|0;
        $$032 = $16;$$231 = $12;
        break L4;
       }
       else if ((label|0) == 10) {
        $17 = (($10) - ($$03336))|0;
        $18 = ($$03336|0)==(0);
        if ($18) {
         break;
        } else {
         $$032 = $17;$$231 = $12;
         break L4;
        }
       }
      }
     } while(0);
     _ERR_put_error(4,128,138,0,0);
     $$2 = -1;
     return ($$2|0);
    } else {
     $19 = (($4) + -2)|0;
     $$032 = $19;$$231 = $8;
    }
   } while(0);
   $20 = (($$231) + ($$032)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(-52);
   if ($22) {
    _memcpy(($0|0),($$231|0),($$032|0))|0;
    $$2 = $$032;
    return ($$2|0);
   } else {
    _ERR_put_error(4,128,139,0,0);
    $$2 = -1;
    return ($$2|0);
   }
  }
 }
 _ERR_put_error(4,128,137,0,0);
 $$2 = -1;
 return ($$2|0);
}
function _RSA_X931_hash_id($0) {
 $0 = $0|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 64:  {
  $$0 = 51;
  break;
 }
 case 672:  {
  $$0 = 52;
  break;
 }
 case 673:  {
  $$0 = 54;
  break;
 }
 case 674:  {
  $$0 = 53;
  break;
 }
 default: {
  $$0 = -1;
 }
 }
 return ($$0|0);
}
function _SHA1_Update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$060 = 0, $$061 = 0, $$1 = 0, $$162 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  return 1;
 }
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 << 3;
 $7 = (($5) + ($6))|0;
 $8 = ($7>>>0)<($5>>>0);
 $9 = ((($0)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 if ($8) {
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $14 = $11;
 } else {
  $14 = $10;
 }
 $12 = $2 >>> 29;
 $13 = (($14) + ($12))|0;
 HEAP32[$9>>2] = $13;
 HEAP32[$4>>2] = $7;
 $15 = ((($0)) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 do {
  if ($17) {
   $$060 = $1;$$061 = $2;
  } else {
   $18 = ((($0)) + 28|0);
   $19 = (($16) + ($2))|0;
   $20 = $19 | $2;
   $21 = ($20>>>0)>(63);
   $22 = (($18) + ($16)|0);
   if ($21) {
    $23 = (64 - ($16))|0;
    _memcpy(($22|0),($1|0),($23|0))|0;
    _sha1_block_data_order($0,$18,1);
    $24 = (($1) + ($23)|0);
    $25 = (($2) - ($23))|0;
    dest=$18; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$060 = $24;$$061 = $25;
    break;
   }
   _memcpy(($22|0),($1|0),($2|0))|0;
   $26 = HEAP32[$15>>2]|0;
   $27 = (($26) + ($2))|0;
   HEAP32[$15>>2] = $27;
   return 1;
  }
 } while(0);
 $28 = $$061 >>> 6;
 $29 = ($28|0)==(0);
 $30 = $28 << 6;
 if ($29) {
  $$1 = $$060;$$162 = $$061;
 } else {
  $31 = (($$061) - ($30))|0;
  $32 = (($$060) + ($30)|0);
  _sha1_block_data_order($0,$$060,$28);
  $$1 = $32;$$162 = $31;
 }
 $33 = ($$162|0)==(0);
 if ($33) {
  return 1;
 }
 $34 = ((($0)) + 28|0);
 HEAP32[$15>>2] = $$162;
 _memcpy(($34|0),($$1|0),($$162|0))|0;
 return 1;
}
function _sha1_block_data_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01562 = 0, $$01564 = 0, $$01566 = 0, $$01566$pre = 0, $$01568 = 0, $$01568$pre = 0, $$01570 = 0, $$01570$pre = 0, $$01571 = 0, $$01571$pre = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
 var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
 var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0;
 var $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0;
 var $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0;
 var $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0;
 var $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0;
 var $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0;
 var $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0;
 var $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0;
 var $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0;
 var $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0;
 var $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0;
 var $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0;
 var $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0;
 var $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0;
 var $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0;
 var $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0;
 var $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0;
 var $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0;
 var $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0;
 var $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0;
 var $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0;
 var $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0;
 var $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0;
 var $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0;
 var $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0;
 var $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0;
 var $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0;
 var $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0;
 var $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0;
 var $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0;
 var $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0;
 var $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0;
 var $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0;
 var $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0;
 var $171 = 0, $1710 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = ((($0)) + 8|0);
 $5 = ((($0)) + 12|0);
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $$01566$pre = HEAP32[$5>>2]|0;
 $$01568$pre = HEAP32[$4>>2]|0;
 $$01570$pre = HEAP32[$3>>2]|0;
 $$01571$pre = HEAP32[$0>>2]|0;
 $$0 = $2;$$01562 = $1;$$01564 = $7;$$01566 = $$01566$pre;$$01568 = $$01568$pre;$$01570 = $$01570$pre;$$01571 = $$01571$pre;
 while(1) {
  $8 = $$01571 >>> 2;
  $9 = $$01570 << 30;
  $10 = $$01571 << 30;
  $11 = $$01570 >>> 2;
  $12 = $10 | $8;
  $13 = $9 | $11;
  $14 = $13 ^ $$01568;
  $15 = $14 & $$01571;
  $16 = $15 ^ $$01568;
  $17 = $$01568 ^ $$01566;
  $18 = $17 & $$01570;
  $19 = $18 ^ $$01566;
  $20 = $12 ^ $13;
  $21 = $$01571 << 5;
  $22 = $$01571 >>> 27;
  $23 = $21 | $22;
  $24 = ((($$01562)) + 1|0);
  $25 = HEAP8[$$01562>>0]|0;
  $26 = $25&255;
  $27 = $26 << 24;
  $28 = ((($$01562)) + 2|0);
  $29 = HEAP8[$24>>0]|0;
  $30 = $29&255;
  $31 = $30 << 16;
  $32 = $31 | $27;
  $33 = ((($$01562)) + 3|0);
  $34 = HEAP8[$28>>0]|0;
  $35 = $34&255;
  $36 = $35 << 8;
  $37 = $32 | $36;
  $38 = ((($$01562)) + 4|0);
  $39 = HEAP8[$33>>0]|0;
  $40 = $39&255;
  $41 = $37 | $40;
  $42 = ((($$01562)) + 5|0);
  $43 = HEAP8[$38>>0]|0;
  $44 = $43&255;
  $45 = $44 << 24;
  $46 = ((($$01562)) + 6|0);
  $47 = HEAP8[$42>>0]|0;
  $48 = $47&255;
  $49 = $48 << 16;
  $50 = $49 | $45;
  $51 = ((($$01562)) + 7|0);
  $52 = HEAP8[$46>>0]|0;
  $53 = $52&255;
  $54 = $53 << 8;
  $55 = $50 | $54;
  $56 = ((($$01562)) + 8|0);
  $57 = HEAP8[$51>>0]|0;
  $58 = $57&255;
  $59 = $55 | $58;
  $60 = (($$01564) + 1518500249)|0;
  $61 = (($60) + ($19))|0;
  $62 = (($61) + ($23))|0;
  $63 = (($62) + ($41))|0;
  $64 = ((($$01562)) + 9|0);
  $65 = HEAP8[$56>>0]|0;
  $66 = $65&255;
  $67 = $66 << 24;
  $68 = ((($$01562)) + 10|0);
  $69 = HEAP8[$64>>0]|0;
  $70 = $69&255;
  $71 = $70 << 16;
  $72 = $71 | $67;
  $73 = ((($$01562)) + 11|0);
  $74 = HEAP8[$68>>0]|0;
  $75 = $74&255;
  $76 = $75 << 8;
  $77 = $72 | $76;
  $78 = ((($$01562)) + 12|0);
  $79 = HEAP8[$73>>0]|0;
  $80 = $79&255;
  $81 = $77 | $80;
  $82 = $63 << 5;
  $83 = $63 >>> 27;
  $84 = $82 | $83;
  $85 = (($$01566) + 1518500249)|0;
  $86 = (($85) + ($16))|0;
  $87 = (($86) + ($59))|0;
  $88 = (($87) + ($84))|0;
  $89 = ((($$01562)) + 13|0);
  $90 = HEAP8[$78>>0]|0;
  $91 = $90&255;
  $92 = $91 << 24;
  $93 = ((($$01562)) + 14|0);
  $94 = HEAP8[$89>>0]|0;
  $95 = $94&255;
  $96 = $95 << 16;
  $97 = $96 | $92;
  $98 = ((($$01562)) + 15|0);
  $99 = HEAP8[$93>>0]|0;
  $100 = $99&255;
  $101 = $100 << 8;
  $102 = $97 | $101;
  $103 = ((($$01562)) + 16|0);
  $104 = HEAP8[$98>>0]|0;
  $105 = $104&255;
  $106 = $102 | $105;
  $107 = $88 << 5;
  $108 = $88 >>> 27;
  $109 = $107 | $108;
  $110 = $63 & $20;
  $111 = $110 ^ $13;
  $112 = (($$01568) + 1518500249)|0;
  $113 = (($112) + ($111))|0;
  $114 = (($113) + ($81))|0;
  $115 = (($114) + ($109))|0;
  $116 = $63 << 30;
  $117 = $63 >>> 2;
  $118 = $116 | $117;
  $119 = ((($$01562)) + 17|0);
  $120 = HEAP8[$103>>0]|0;
  $121 = $120&255;
  $122 = $121 << 24;
  $123 = ((($$01562)) + 18|0);
  $124 = HEAP8[$119>>0]|0;
  $125 = $124&255;
  $126 = $125 << 16;
  $127 = $126 | $122;
  $128 = ((($$01562)) + 19|0);
  $129 = HEAP8[$123>>0]|0;
  $130 = $129&255;
  $131 = $130 << 8;
  $132 = $127 | $131;
  $133 = ((($$01562)) + 20|0);
  $134 = HEAP8[$128>>0]|0;
  $135 = $134&255;
  $136 = $132 | $135;
  $137 = $115 << 5;
  $138 = $115 >>> 27;
  $139 = $137 | $138;
  $140 = $118 ^ $12;
  $141 = $88 & $140;
  $142 = $141 ^ $12;
  $143 = (($13) + 1518500249)|0;
  $144 = (($143) + ($142))|0;
  $145 = (($144) + ($106))|0;
  $146 = (($145) + ($139))|0;
  $147 = $88 << 30;
  $148 = $88 >>> 2;
  $149 = $147 | $148;
  $150 = ((($$01562)) + 21|0);
  $151 = HEAP8[$133>>0]|0;
  $152 = $151&255;
  $153 = $152 << 24;
  $154 = ((($$01562)) + 22|0);
  $155 = HEAP8[$150>>0]|0;
  $156 = $155&255;
  $157 = $156 << 16;
  $158 = $157 | $153;
  $159 = ((($$01562)) + 23|0);
  $160 = HEAP8[$154>>0]|0;
  $161 = $160&255;
  $162 = $161 << 8;
  $163 = $158 | $162;
  $164 = ((($$01562)) + 24|0);
  $165 = HEAP8[$159>>0]|0;
  $166 = $165&255;
  $167 = $163 | $166;
  $168 = $146 << 5;
  $169 = $146 >>> 27;
  $170 = $168 | $169;
  $171 = $149 ^ $118;
  $172 = $115 & $171;
  $173 = $172 ^ $118;
  $174 = (($12) + 1518500249)|0;
  $175 = (($174) + ($173))|0;
  $176 = (($175) + ($136))|0;
  $177 = (($176) + ($170))|0;
  $178 = $115 << 30;
  $179 = $115 >>> 2;
  $180 = $178 | $179;
  $181 = ((($$01562)) + 25|0);
  $182 = HEAP8[$164>>0]|0;
  $183 = $182&255;
  $184 = $183 << 24;
  $185 = ((($$01562)) + 26|0);
  $186 = HEAP8[$181>>0]|0;
  $187 = $186&255;
  $188 = $187 << 16;
  $189 = $188 | $184;
  $190 = ((($$01562)) + 27|0);
  $191 = HEAP8[$185>>0]|0;
  $192 = $191&255;
  $193 = $192 << 8;
  $194 = $189 | $193;
  $195 = ((($$01562)) + 28|0);
  $196 = HEAP8[$190>>0]|0;
  $197 = $196&255;
  $198 = $194 | $197;
  $199 = $177 << 5;
  $200 = $177 >>> 27;
  $201 = $199 | $200;
  $202 = $180 ^ $149;
  $203 = $146 & $202;
  $204 = $203 ^ $149;
  $205 = (($118) + 1518500249)|0;
  $206 = (($205) + ($204))|0;
  $207 = (($206) + ($167))|0;
  $208 = (($207) + ($201))|0;
  $209 = $146 << 30;
  $210 = $146 >>> 2;
  $211 = $209 | $210;
  $212 = ((($$01562)) + 29|0);
  $213 = HEAP8[$195>>0]|0;
  $214 = $213&255;
  $215 = $214 << 24;
  $216 = ((($$01562)) + 30|0);
  $217 = HEAP8[$212>>0]|0;
  $218 = $217&255;
  $219 = $218 << 16;
  $220 = $219 | $215;
  $221 = ((($$01562)) + 31|0);
  $222 = HEAP8[$216>>0]|0;
  $223 = $222&255;
  $224 = $223 << 8;
  $225 = $220 | $224;
  $226 = ((($$01562)) + 32|0);
  $227 = HEAP8[$221>>0]|0;
  $228 = $227&255;
  $229 = $225 | $228;
  $230 = $208 << 5;
  $231 = $208 >>> 27;
  $232 = $230 | $231;
  $233 = $211 ^ $180;
  $234 = $177 & $233;
  $235 = $234 ^ $180;
  $236 = (($149) + 1518500249)|0;
  $237 = (($236) + ($235))|0;
  $238 = (($237) + ($198))|0;
  $239 = (($238) + ($232))|0;
  $240 = $177 << 30;
  $241 = $177 >>> 2;
  $242 = $240 | $241;
  $243 = ((($$01562)) + 33|0);
  $244 = HEAP8[$226>>0]|0;
  $245 = $244&255;
  $246 = $245 << 24;
  $247 = ((($$01562)) + 34|0);
  $248 = HEAP8[$243>>0]|0;
  $249 = $248&255;
  $250 = $249 << 16;
  $251 = $250 | $246;
  $252 = ((($$01562)) + 35|0);
  $253 = HEAP8[$247>>0]|0;
  $254 = $253&255;
  $255 = $254 << 8;
  $256 = $251 | $255;
  $257 = ((($$01562)) + 36|0);
  $258 = HEAP8[$252>>0]|0;
  $259 = $258&255;
  $260 = $256 | $259;
  $261 = $239 << 5;
  $262 = $239 >>> 27;
  $263 = $261 | $262;
  $264 = $242 ^ $211;
  $265 = $208 & $264;
  $266 = $265 ^ $211;
  $267 = (($180) + 1518500249)|0;
  $268 = (($267) + ($266))|0;
  $269 = (($268) + ($229))|0;
  $270 = (($269) + ($263))|0;
  $271 = $208 << 30;
  $272 = $208 >>> 2;
  $273 = $271 | $272;
  $274 = ((($$01562)) + 37|0);
  $275 = HEAP8[$257>>0]|0;
  $276 = $275&255;
  $277 = $276 << 24;
  $278 = ((($$01562)) + 38|0);
  $279 = HEAP8[$274>>0]|0;
  $280 = $279&255;
  $281 = $280 << 16;
  $282 = $281 | $277;
  $283 = ((($$01562)) + 39|0);
  $284 = HEAP8[$278>>0]|0;
  $285 = $284&255;
  $286 = $285 << 8;
  $287 = $282 | $286;
  $288 = ((($$01562)) + 40|0);
  $289 = HEAP8[$283>>0]|0;
  $290 = $289&255;
  $291 = $287 | $290;
  $292 = $270 << 5;
  $293 = $270 >>> 27;
  $294 = $292 | $293;
  $295 = $273 ^ $242;
  $296 = $239 & $295;
  $297 = $296 ^ $242;
  $298 = (($211) + 1518500249)|0;
  $299 = (($298) + ($297))|0;
  $300 = (($299) + ($260))|0;
  $301 = (($300) + ($294))|0;
  $302 = $239 << 30;
  $303 = $239 >>> 2;
  $304 = $302 | $303;
  $305 = ((($$01562)) + 41|0);
  $306 = HEAP8[$288>>0]|0;
  $307 = $306&255;
  $308 = $307 << 24;
  $309 = ((($$01562)) + 42|0);
  $310 = HEAP8[$305>>0]|0;
  $311 = $310&255;
  $312 = $311 << 16;
  $313 = $312 | $308;
  $314 = ((($$01562)) + 43|0);
  $315 = HEAP8[$309>>0]|0;
  $316 = $315&255;
  $317 = $316 << 8;
  $318 = $313 | $317;
  $319 = ((($$01562)) + 44|0);
  $320 = HEAP8[$314>>0]|0;
  $321 = $320&255;
  $322 = $318 | $321;
  $323 = $301 << 5;
  $324 = $301 >>> 27;
  $325 = $323 | $324;
  $326 = $304 ^ $273;
  $327 = $270 & $326;
  $328 = $327 ^ $273;
  $329 = (($242) + 1518500249)|0;
  $330 = (($329) + ($328))|0;
  $331 = (($330) + ($291))|0;
  $332 = (($331) + ($325))|0;
  $333 = $270 << 30;
  $334 = $270 >>> 2;
  $335 = $333 | $334;
  $336 = ((($$01562)) + 45|0);
  $337 = HEAP8[$319>>0]|0;
  $338 = $337&255;
  $339 = $338 << 24;
  $340 = ((($$01562)) + 46|0);
  $341 = HEAP8[$336>>0]|0;
  $342 = $341&255;
  $343 = $342 << 16;
  $344 = $343 | $339;
  $345 = ((($$01562)) + 47|0);
  $346 = HEAP8[$340>>0]|0;
  $347 = $346&255;
  $348 = $347 << 8;
  $349 = $344 | $348;
  $350 = ((($$01562)) + 48|0);
  $351 = HEAP8[$345>>0]|0;
  $352 = $351&255;
  $353 = $349 | $352;
  $354 = $332 << 5;
  $355 = $332 >>> 27;
  $356 = $354 | $355;
  $357 = $335 ^ $304;
  $358 = $301 & $357;
  $359 = $358 ^ $304;
  $360 = (($273) + 1518500249)|0;
  $361 = (($360) + ($359))|0;
  $362 = (($361) + ($322))|0;
  $363 = (($362) + ($356))|0;
  $364 = $301 << 30;
  $365 = $301 >>> 2;
  $366 = $364 | $365;
  $367 = ((($$01562)) + 49|0);
  $368 = HEAP8[$350>>0]|0;
  $369 = $368&255;
  $370 = $369 << 24;
  $371 = ((($$01562)) + 50|0);
  $372 = HEAP8[$367>>0]|0;
  $373 = $372&255;
  $374 = $373 << 16;
  $375 = $374 | $370;
  $376 = ((($$01562)) + 51|0);
  $377 = HEAP8[$371>>0]|0;
  $378 = $377&255;
  $379 = $378 << 8;
  $380 = $375 | $379;
  $381 = ((($$01562)) + 52|0);
  $382 = HEAP8[$376>>0]|0;
  $383 = $382&255;
  $384 = $380 | $383;
  $385 = $363 << 5;
  $386 = $363 >>> 27;
  $387 = $385 | $386;
  $388 = $366 ^ $335;
  $389 = $332 & $388;
  $390 = $389 ^ $335;
  $391 = (($304) + 1518500249)|0;
  $392 = (($391) + ($390))|0;
  $393 = (($392) + ($353))|0;
  $394 = (($393) + ($387))|0;
  $395 = $332 << 30;
  $396 = $332 >>> 2;
  $397 = $395 | $396;
  $398 = ((($$01562)) + 53|0);
  $399 = HEAP8[$381>>0]|0;
  $400 = $399&255;
  $401 = $400 << 24;
  $402 = ((($$01562)) + 54|0);
  $403 = HEAP8[$398>>0]|0;
  $404 = $403&255;
  $405 = $404 << 16;
  $406 = $405 | $401;
  $407 = ((($$01562)) + 55|0);
  $408 = HEAP8[$402>>0]|0;
  $409 = $408&255;
  $410 = $409 << 8;
  $411 = $406 | $410;
  $412 = ((($$01562)) + 56|0);
  $413 = HEAP8[$407>>0]|0;
  $414 = $413&255;
  $415 = $411 | $414;
  $416 = $394 << 5;
  $417 = $394 >>> 27;
  $418 = $416 | $417;
  $419 = $397 ^ $366;
  $420 = $363 & $419;
  $421 = $420 ^ $366;
  $422 = (($335) + 1518500249)|0;
  $423 = (($422) + ($421))|0;
  $424 = (($423) + ($384))|0;
  $425 = (($424) + ($418))|0;
  $426 = $363 << 30;
  $427 = $363 >>> 2;
  $428 = $426 | $427;
  $429 = ((($$01562)) + 57|0);
  $430 = HEAP8[$412>>0]|0;
  $431 = $430&255;
  $432 = $431 << 24;
  $433 = ((($$01562)) + 58|0);
  $434 = HEAP8[$429>>0]|0;
  $435 = $434&255;
  $436 = $435 << 16;
  $437 = $436 | $432;
  $438 = ((($$01562)) + 59|0);
  $439 = HEAP8[$433>>0]|0;
  $440 = $439&255;
  $441 = $440 << 8;
  $442 = $437 | $441;
  $443 = ((($$01562)) + 60|0);
  $444 = HEAP8[$438>>0]|0;
  $445 = $444&255;
  $446 = $442 | $445;
  $447 = $425 << 5;
  $448 = $425 >>> 27;
  $449 = $447 | $448;
  $450 = $428 ^ $397;
  $451 = $394 & $450;
  $452 = $451 ^ $397;
  $453 = (($366) + 1518500249)|0;
  $454 = (($453) + ($452))|0;
  $455 = (($454) + ($415))|0;
  $456 = (($455) + ($449))|0;
  $457 = $394 << 30;
  $458 = $394 >>> 2;
  $459 = $457 | $458;
  $460 = ((($$01562)) + 61|0);
  $461 = HEAP8[$443>>0]|0;
  $462 = $461&255;
  $463 = $462 << 24;
  $464 = ((($$01562)) + 62|0);
  $465 = HEAP8[$460>>0]|0;
  $466 = $465&255;
  $467 = $466 << 16;
  $468 = $467 | $463;
  $469 = ((($$01562)) + 63|0);
  $470 = HEAP8[$464>>0]|0;
  $471 = $470&255;
  $472 = $471 << 8;
  $473 = $468 | $472;
  $474 = ((($$01562)) + 64|0);
  $475 = HEAP8[$469>>0]|0;
  $476 = $475&255;
  $477 = $473 | $476;
  $478 = $456 << 5;
  $479 = $456 >>> 27;
  $480 = $478 | $479;
  $481 = $459 ^ $428;
  $482 = $425 & $481;
  $483 = $482 ^ $428;
  $484 = (($397) + 1518500249)|0;
  $485 = (($484) + ($483))|0;
  $486 = (($485) + ($446))|0;
  $487 = (($486) + ($480))|0;
  $488 = $425 << 30;
  $489 = $425 >>> 2;
  $490 = $488 | $489;
  $491 = $487 << 5;
  $492 = $487 >>> 27;
  $493 = $491 | $492;
  $494 = $490 ^ $459;
  $495 = $456 & $494;
  $496 = $495 ^ $459;
  $497 = (($428) + 1518500249)|0;
  $498 = (($497) + ($496))|0;
  $499 = (($498) + ($477))|0;
  $500 = (($499) + ($493))|0;
  $501 = $456 << 30;
  $502 = $456 >>> 2;
  $503 = $501 | $502;
  $504 = $81 ^ $41;
  $505 = $504 ^ $260;
  $506 = $505 ^ $415;
  $507 = $506 << 1;
  $508 = $506 >>> 31;
  $509 = $507 | $508;
  $510 = (($459) + 1518500249)|0;
  $511 = $500 << 5;
  $512 = $500 >>> 27;
  $513 = $511 | $512;
  $514 = $503 ^ $490;
  $515 = $487 & $514;
  $516 = $515 ^ $490;
  $517 = (($510) + ($509))|0;
  $518 = (($517) + ($516))|0;
  $519 = (($518) + ($513))|0;
  $520 = $487 << 30;
  $521 = $487 >>> 2;
  $522 = $520 | $521;
  $523 = $106 ^ $59;
  $524 = $523 ^ $291;
  $525 = $524 ^ $446;
  $526 = $525 << 1;
  $527 = $525 >>> 31;
  $528 = $526 | $527;
  $529 = (($490) + 1518500249)|0;
  $530 = $519 << 5;
  $531 = $519 >>> 27;
  $532 = $530 | $531;
  $533 = $522 ^ $503;
  $534 = $500 & $533;
  $535 = $534 ^ $503;
  $536 = (($529) + ($528))|0;
  $537 = (($536) + ($535))|0;
  $538 = (($537) + ($532))|0;
  $539 = $500 << 30;
  $540 = $500 >>> 2;
  $541 = $539 | $540;
  $542 = $136 ^ $81;
  $543 = $542 ^ $322;
  $544 = $543 ^ $477;
  $545 = $544 << 1;
  $546 = $544 >>> 31;
  $547 = $545 | $546;
  $548 = (($503) + 1518500249)|0;
  $549 = $538 << 5;
  $550 = $538 >>> 27;
  $551 = $549 | $550;
  $552 = $541 ^ $522;
  $553 = $519 & $552;
  $554 = $553 ^ $522;
  $555 = (($548) + ($547))|0;
  $556 = (($555) + ($554))|0;
  $557 = (($556) + ($551))|0;
  $558 = $519 << 30;
  $559 = $519 >>> 2;
  $560 = $558 | $559;
  $561 = $167 ^ $106;
  $562 = $561 ^ $353;
  $563 = $562 ^ $509;
  $564 = $563 << 1;
  $565 = $563 >>> 31;
  $566 = $564 | $565;
  $567 = $557 << 5;
  $568 = $557 >>> 27;
  $569 = $567 | $568;
  $570 = $560 ^ $541;
  $571 = $538 & $570;
  $572 = $571 ^ $541;
  $573 = (($566) + 1518500249)|0;
  $574 = (($573) + ($522))|0;
  $575 = (($574) + ($572))|0;
  $576 = (($575) + ($569))|0;
  $577 = $538 << 30;
  $578 = $538 >>> 2;
  $579 = $577 | $578;
  $580 = $198 ^ $136;
  $581 = $580 ^ $384;
  $582 = $581 ^ $528;
  $583 = $582 << 1;
  $584 = $582 >>> 31;
  $585 = $583 | $584;
  $586 = $576 << 5;
  $587 = $576 >>> 27;
  $588 = $586 | $587;
  $589 = $579 ^ $560;
  $590 = $589 ^ $557;
  $591 = (($585) + 1859775393)|0;
  $592 = (($591) + ($541))|0;
  $593 = (($592) + ($590))|0;
  $594 = (($593) + ($588))|0;
  $595 = $557 << 30;
  $596 = $557 >>> 2;
  $597 = $595 | $596;
  $598 = $229 ^ $167;
  $599 = $598 ^ $415;
  $600 = $599 ^ $547;
  $601 = $600 << 1;
  $602 = $600 >>> 31;
  $603 = $601 | $602;
  $604 = $594 << 5;
  $605 = $594 >>> 27;
  $606 = $604 | $605;
  $607 = $597 ^ $579;
  $608 = $607 ^ $576;
  $609 = (($603) + 1859775393)|0;
  $610 = (($609) + ($560))|0;
  $611 = (($610) + ($608))|0;
  $612 = (($611) + ($606))|0;
  $613 = $576 << 30;
  $614 = $576 >>> 2;
  $615 = $613 | $614;
  $616 = $260 ^ $198;
  $617 = $616 ^ $446;
  $618 = $617 ^ $566;
  $619 = $618 << 1;
  $620 = $618 >>> 31;
  $621 = $619 | $620;
  $622 = $612 << 5;
  $623 = $612 >>> 27;
  $624 = $622 | $623;
  $625 = $615 ^ $597;
  $626 = $625 ^ $594;
  $627 = (($621) + 1859775393)|0;
  $628 = (($627) + ($579))|0;
  $629 = (($628) + ($626))|0;
  $630 = (($629) + ($624))|0;
  $631 = $594 << 30;
  $632 = $594 >>> 2;
  $633 = $631 | $632;
  $634 = $291 ^ $229;
  $635 = $634 ^ $477;
  $636 = $635 ^ $585;
  $637 = $636 << 1;
  $638 = $636 >>> 31;
  $639 = $637 | $638;
  $640 = $630 << 5;
  $641 = $630 >>> 27;
  $642 = $640 | $641;
  $643 = $633 ^ $615;
  $644 = $643 ^ $612;
  $645 = (($639) + 1859775393)|0;
  $646 = (($645) + ($597))|0;
  $647 = (($646) + ($644))|0;
  $648 = (($647) + ($642))|0;
  $649 = $612 << 30;
  $650 = $612 >>> 2;
  $651 = $649 | $650;
  $652 = $322 ^ $260;
  $653 = $652 ^ $509;
  $654 = $653 ^ $603;
  $655 = $654 << 1;
  $656 = $654 >>> 31;
  $657 = $655 | $656;
  $658 = $648 << 5;
  $659 = $648 >>> 27;
  $660 = $658 | $659;
  $661 = $651 ^ $633;
  $662 = $661 ^ $630;
  $663 = (($657) + 1859775393)|0;
  $664 = (($663) + ($615))|0;
  $665 = (($664) + ($662))|0;
  $666 = (($665) + ($660))|0;
  $667 = $630 << 30;
  $668 = $630 >>> 2;
  $669 = $667 | $668;
  $670 = $353 ^ $291;
  $671 = $670 ^ $528;
  $672 = $671 ^ $621;
  $673 = $672 << 1;
  $674 = $672 >>> 31;
  $675 = $673 | $674;
  $676 = $666 << 5;
  $677 = $666 >>> 27;
  $678 = $676 | $677;
  $679 = $669 ^ $651;
  $680 = $679 ^ $648;
  $681 = (($675) + 1859775393)|0;
  $682 = (($681) + ($633))|0;
  $683 = (($682) + ($680))|0;
  $684 = (($683) + ($678))|0;
  $685 = $648 << 30;
  $686 = $648 >>> 2;
  $687 = $685 | $686;
  $688 = $384 ^ $322;
  $689 = $688 ^ $547;
  $690 = $689 ^ $639;
  $691 = $690 << 1;
  $692 = $690 >>> 31;
  $693 = $691 | $692;
  $694 = $684 << 5;
  $695 = $684 >>> 27;
  $696 = $694 | $695;
  $697 = $687 ^ $669;
  $698 = $697 ^ $666;
  $699 = (($693) + 1859775393)|0;
  $700 = (($699) + ($651))|0;
  $701 = (($700) + ($698))|0;
  $702 = (($701) + ($696))|0;
  $703 = $666 << 30;
  $704 = $666 >>> 2;
  $705 = $703 | $704;
  $706 = $415 ^ $353;
  $707 = $706 ^ $566;
  $708 = $707 ^ $657;
  $709 = $708 << 1;
  $710 = $708 >>> 31;
  $711 = $709 | $710;
  $712 = $702 << 5;
  $713 = $702 >>> 27;
  $714 = $712 | $713;
  $715 = $705 ^ $687;
  $716 = $715 ^ $684;
  $717 = (($711) + 1859775393)|0;
  $718 = (($717) + ($669))|0;
  $719 = (($718) + ($716))|0;
  $720 = (($719) + ($714))|0;
  $721 = $684 << 30;
  $722 = $684 >>> 2;
  $723 = $721 | $722;
  $724 = $446 ^ $384;
  $725 = $724 ^ $585;
  $726 = $725 ^ $675;
  $727 = $726 << 1;
  $728 = $726 >>> 31;
  $729 = $727 | $728;
  $730 = $720 << 5;
  $731 = $720 >>> 27;
  $732 = $730 | $731;
  $733 = $723 ^ $705;
  $734 = $733 ^ $702;
  $735 = (($729) + 1859775393)|0;
  $736 = (($735) + ($687))|0;
  $737 = (($736) + ($734))|0;
  $738 = (($737) + ($732))|0;
  $739 = $702 << 30;
  $740 = $702 >>> 2;
  $741 = $739 | $740;
  $742 = $477 ^ $415;
  $743 = $742 ^ $603;
  $744 = $743 ^ $693;
  $745 = $744 << 1;
  $746 = $744 >>> 31;
  $747 = $745 | $746;
  $748 = $738 << 5;
  $749 = $738 >>> 27;
  $750 = $748 | $749;
  $751 = $741 ^ $723;
  $752 = $751 ^ $720;
  $753 = (($747) + 1859775393)|0;
  $754 = (($753) + ($705))|0;
  $755 = (($754) + ($752))|0;
  $756 = (($755) + ($750))|0;
  $757 = $720 << 30;
  $758 = $720 >>> 2;
  $759 = $757 | $758;
  $760 = $446 ^ $509;
  $761 = $760 ^ $621;
  $762 = $761 ^ $711;
  $763 = $762 << 1;
  $764 = $762 >>> 31;
  $765 = $763 | $764;
  $766 = $756 << 5;
  $767 = $756 >>> 27;
  $768 = $766 | $767;
  $769 = $759 ^ $741;
  $770 = $769 ^ $738;
  $771 = (($765) + 1859775393)|0;
  $772 = (($771) + ($723))|0;
  $773 = (($772) + ($770))|0;
  $774 = (($773) + ($768))|0;
  $775 = $738 << 30;
  $776 = $738 >>> 2;
  $777 = $775 | $776;
  $778 = $477 ^ $528;
  $779 = $778 ^ $639;
  $780 = $779 ^ $729;
  $781 = $780 << 1;
  $782 = $780 >>> 31;
  $783 = $781 | $782;
  $784 = $774 << 5;
  $785 = $774 >>> 27;
  $786 = $784 | $785;
  $787 = $777 ^ $759;
  $788 = $787 ^ $756;
  $789 = (($783) + 1859775393)|0;
  $790 = (($789) + ($741))|0;
  $791 = (($790) + ($788))|0;
  $792 = (($791) + ($786))|0;
  $793 = $756 << 30;
  $794 = $756 >>> 2;
  $795 = $793 | $794;
  $796 = $547 ^ $509;
  $797 = $796 ^ $657;
  $798 = $797 ^ $747;
  $799 = $798 << 1;
  $800 = $798 >>> 31;
  $801 = $799 | $800;
  $802 = $792 << 5;
  $803 = $792 >>> 27;
  $804 = $802 | $803;
  $805 = $795 ^ $777;
  $806 = $805 ^ $774;
  $807 = (($801) + 1859775393)|0;
  $808 = (($807) + ($759))|0;
  $809 = (($808) + ($806))|0;
  $810 = (($809) + ($804))|0;
  $811 = $774 << 30;
  $812 = $774 >>> 2;
  $813 = $811 | $812;
  $814 = $528 ^ $566;
  $815 = $814 ^ $675;
  $816 = $815 ^ $765;
  $817 = $816 << 1;
  $818 = $816 >>> 31;
  $819 = $817 | $818;
  $820 = $810 << 5;
  $821 = $810 >>> 27;
  $822 = $820 | $821;
  $823 = $813 ^ $795;
  $824 = $823 ^ $792;
  $825 = (($819) + 1859775393)|0;
  $826 = (($825) + ($777))|0;
  $827 = (($826) + ($824))|0;
  $828 = (($827) + ($822))|0;
  $829 = $792 << 30;
  $830 = $792 >>> 2;
  $831 = $829 | $830;
  $832 = $547 ^ $585;
  $833 = $832 ^ $693;
  $834 = $833 ^ $783;
  $835 = $834 << 1;
  $836 = $834 >>> 31;
  $837 = $835 | $836;
  $838 = $828 << 5;
  $839 = $828 >>> 27;
  $840 = $838 | $839;
  $841 = $831 ^ $813;
  $842 = $841 ^ $810;
  $843 = (($837) + 1859775393)|0;
  $844 = (($843) + ($795))|0;
  $845 = (($844) + ($842))|0;
  $846 = (($845) + ($840))|0;
  $847 = $810 << 30;
  $848 = $810 >>> 2;
  $849 = $847 | $848;
  $850 = $603 ^ $566;
  $851 = $850 ^ $711;
  $852 = $851 ^ $801;
  $853 = $852 << 1;
  $854 = $852 >>> 31;
  $855 = $853 | $854;
  $856 = $846 << 5;
  $857 = $846 >>> 27;
  $858 = $856 | $857;
  $859 = $849 ^ $831;
  $860 = $859 ^ $828;
  $861 = (($855) + 1859775393)|0;
  $862 = (($861) + ($813))|0;
  $863 = (($862) + ($860))|0;
  $864 = (($863) + ($858))|0;
  $865 = $828 << 30;
  $866 = $828 >>> 2;
  $867 = $865 | $866;
  $868 = $585 ^ $621;
  $869 = $868 ^ $729;
  $870 = $869 ^ $819;
  $871 = $870 << 1;
  $872 = $870 >>> 31;
  $873 = $871 | $872;
  $874 = $864 << 5;
  $875 = $864 >>> 27;
  $876 = $874 | $875;
  $877 = $867 ^ $849;
  $878 = $877 ^ $846;
  $879 = (($873) + 1859775393)|0;
  $880 = (($879) + ($831))|0;
  $881 = (($880) + ($878))|0;
  $882 = (($881) + ($876))|0;
  $883 = $846 << 30;
  $884 = $846 >>> 2;
  $885 = $883 | $884;
  $886 = $603 ^ $639;
  $887 = $886 ^ $747;
  $888 = $887 ^ $837;
  $889 = $888 << 1;
  $890 = $888 >>> 31;
  $891 = $889 | $890;
  $892 = $882 << 5;
  $893 = $882 >>> 27;
  $894 = $892 | $893;
  $895 = $885 ^ $867;
  $896 = $895 ^ $864;
  $897 = (($891) + 1859775393)|0;
  $898 = (($897) + ($849))|0;
  $899 = (($898) + ($896))|0;
  $900 = (($899) + ($894))|0;
  $901 = $864 << 30;
  $902 = $864 >>> 2;
  $903 = $901 | $902;
  $904 = $657 ^ $621;
  $905 = $904 ^ $765;
  $906 = $905 ^ $855;
  $907 = $906 << 1;
  $908 = $906 >>> 31;
  $909 = $907 | $908;
  $910 = $900 << 5;
  $911 = $900 >>> 27;
  $912 = $910 | $911;
  $913 = $903 ^ $885;
  $914 = $913 ^ $882;
  $915 = (($909) + 1859775393)|0;
  $916 = (($915) + ($867))|0;
  $917 = (($916) + ($914))|0;
  $918 = (($917) + ($912))|0;
  $919 = $882 << 30;
  $920 = $882 >>> 2;
  $921 = $919 | $920;
  $922 = $639 ^ $675;
  $923 = $922 ^ $783;
  $924 = $923 ^ $873;
  $925 = $924 << 1;
  $926 = $924 >>> 31;
  $927 = $925 | $926;
  $928 = $918 << 5;
  $929 = $918 >>> 27;
  $930 = $928 | $929;
  $931 = $921 ^ $903;
  $932 = $931 ^ $900;
  $933 = (($927) + 1859775393)|0;
  $934 = (($933) + ($885))|0;
  $935 = (($934) + ($932))|0;
  $936 = (($935) + ($930))|0;
  $937 = $900 << 30;
  $938 = $900 >>> 2;
  $939 = $937 | $938;
  $940 = $657 ^ $693;
  $941 = $940 ^ $801;
  $942 = $941 ^ $891;
  $943 = $942 << 1;
  $944 = $942 >>> 31;
  $945 = $943 | $944;
  $946 = $936 << 5;
  $947 = $936 >>> 27;
  $948 = $946 | $947;
  $949 = $918 & $939;
  $950 = $918 | $939;
  $951 = $950 & $921;
  $952 = $951 | $949;
  $953 = (($945) + -1894007588)|0;
  $954 = (($953) + ($903))|0;
  $955 = (($954) + ($952))|0;
  $956 = (($955) + ($948))|0;
  $957 = $918 << 30;
  $958 = $918 >>> 2;
  $959 = $957 | $958;
  $960 = $711 ^ $675;
  $961 = $960 ^ $819;
  $962 = $961 ^ $909;
  $963 = $962 << 1;
  $964 = $962 >>> 31;
  $965 = $963 | $964;
  $966 = $956 << 5;
  $967 = $956 >>> 27;
  $968 = $966 | $967;
  $969 = $936 & $959;
  $970 = $936 | $959;
  $971 = $970 & $939;
  $972 = $971 | $969;
  $973 = (($965) + -1894007588)|0;
  $974 = (($973) + ($921))|0;
  $975 = (($974) + ($972))|0;
  $976 = (($975) + ($968))|0;
  $977 = $936 << 30;
  $978 = $936 >>> 2;
  $979 = $977 | $978;
  $980 = $693 ^ $729;
  $981 = $980 ^ $837;
  $982 = $981 ^ $927;
  $983 = $982 << 1;
  $984 = $982 >>> 31;
  $985 = $983 | $984;
  $986 = $976 << 5;
  $987 = $976 >>> 27;
  $988 = $986 | $987;
  $989 = $956 & $979;
  $990 = $956 | $979;
  $991 = $990 & $959;
  $992 = $991 | $989;
  $993 = (($985) + -1894007588)|0;
  $994 = (($993) + ($939))|0;
  $995 = (($994) + ($992))|0;
  $996 = (($995) + ($988))|0;
  $997 = $956 << 30;
  $998 = $956 >>> 2;
  $999 = $997 | $998;
  $1000 = $711 ^ $747;
  $1001 = $1000 ^ $855;
  $1002 = $1001 ^ $945;
  $1003 = $1002 << 1;
  $1004 = $1002 >>> 31;
  $1005 = $1003 | $1004;
  $1006 = $996 << 5;
  $1007 = $996 >>> 27;
  $1008 = $1006 | $1007;
  $1009 = $976 & $999;
  $1010 = $976 | $999;
  $1011 = $1010 & $979;
  $1012 = $1011 | $1009;
  $1013 = (($1005) + -1894007588)|0;
  $1014 = (($1013) + ($959))|0;
  $1015 = (($1014) + ($1012))|0;
  $1016 = (($1015) + ($1008))|0;
  $1017 = $976 << 30;
  $1018 = $976 >>> 2;
  $1019 = $1017 | $1018;
  $1020 = $765 ^ $729;
  $1021 = $1020 ^ $873;
  $1022 = $1021 ^ $965;
  $1023 = $1022 << 1;
  $1024 = $1022 >>> 31;
  $1025 = $1023 | $1024;
  $1026 = $1016 << 5;
  $1027 = $1016 >>> 27;
  $1028 = $1026 | $1027;
  $1029 = $996 & $1019;
  $1030 = $996 | $1019;
  $1031 = $1030 & $999;
  $1032 = $1031 | $1029;
  $1033 = (($1025) + -1894007588)|0;
  $1034 = (($1033) + ($979))|0;
  $1035 = (($1034) + ($1032))|0;
  $1036 = (($1035) + ($1028))|0;
  $1037 = $996 << 30;
  $1038 = $996 >>> 2;
  $1039 = $1037 | $1038;
  $1040 = $747 ^ $783;
  $1041 = $1040 ^ $891;
  $1042 = $1041 ^ $985;
  $1043 = $1042 << 1;
  $1044 = $1042 >>> 31;
  $1045 = $1043 | $1044;
  $1046 = $1036 << 5;
  $1047 = $1036 >>> 27;
  $1048 = $1046 | $1047;
  $1049 = $1016 & $1039;
  $1050 = $1016 | $1039;
  $1051 = $1050 & $1019;
  $1052 = $1051 | $1049;
  $1053 = (($1045) + -1894007588)|0;
  $1054 = (($1053) + ($999))|0;
  $1055 = (($1054) + ($1052))|0;
  $1056 = (($1055) + ($1048))|0;
  $1057 = $1016 << 30;
  $1058 = $1016 >>> 2;
  $1059 = $1057 | $1058;
  $1060 = $765 ^ $801;
  $1061 = $1060 ^ $909;
  $1062 = $1061 ^ $1005;
  $1063 = $1062 << 1;
  $1064 = $1062 >>> 31;
  $1065 = $1063 | $1064;
  $1066 = $1056 << 5;
  $1067 = $1056 >>> 27;
  $1068 = $1066 | $1067;
  $1069 = $1036 & $1059;
  $1070 = $1036 | $1059;
  $1071 = $1070 & $1039;
  $1072 = $1071 | $1069;
  $1073 = (($1065) + -1894007588)|0;
  $1074 = (($1073) + ($1019))|0;
  $1075 = (($1074) + ($1072))|0;
  $1076 = (($1075) + ($1068))|0;
  $1077 = $1036 << 30;
  $1078 = $1036 >>> 2;
  $1079 = $1077 | $1078;
  $1080 = $819 ^ $783;
  $1081 = $1080 ^ $927;
  $1082 = $1081 ^ $1025;
  $1083 = $1082 << 1;
  $1084 = $1082 >>> 31;
  $1085 = $1083 | $1084;
  $1086 = $1076 << 5;
  $1087 = $1076 >>> 27;
  $1088 = $1086 | $1087;
  $1089 = $1056 & $1079;
  $1090 = $1056 | $1079;
  $1091 = $1090 & $1059;
  $1092 = $1091 | $1089;
  $1093 = (($1085) + -1894007588)|0;
  $1094 = (($1093) + ($1039))|0;
  $1095 = (($1094) + ($1092))|0;
  $1096 = (($1095) + ($1088))|0;
  $1097 = $1056 << 30;
  $1098 = $1056 >>> 2;
  $1099 = $1097 | $1098;
  $1100 = $801 ^ $837;
  $1101 = $1100 ^ $945;
  $1102 = $1101 ^ $1045;
  $1103 = $1102 << 1;
  $1104 = $1102 >>> 31;
  $1105 = $1103 | $1104;
  $1106 = $1096 << 5;
  $1107 = $1096 >>> 27;
  $1108 = $1106 | $1107;
  $1109 = $1076 & $1099;
  $1110 = $1076 | $1099;
  $1111 = $1110 & $1079;
  $1112 = $1111 | $1109;
  $1113 = (($1105) + -1894007588)|0;
  $1114 = (($1113) + ($1059))|0;
  $1115 = (($1114) + ($1112))|0;
  $1116 = (($1115) + ($1108))|0;
  $1117 = $1076 << 30;
  $1118 = $1076 >>> 2;
  $1119 = $1117 | $1118;
  $1120 = $819 ^ $855;
  $1121 = $1120 ^ $965;
  $1122 = $1121 ^ $1065;
  $1123 = $1122 << 1;
  $1124 = $1122 >>> 31;
  $1125 = $1123 | $1124;
  $1126 = $1116 << 5;
  $1127 = $1116 >>> 27;
  $1128 = $1126 | $1127;
  $1129 = $1096 & $1119;
  $1130 = $1096 | $1119;
  $1131 = $1130 & $1099;
  $1132 = $1131 | $1129;
  $1133 = (($1125) + -1894007588)|0;
  $1134 = (($1133) + ($1079))|0;
  $1135 = (($1134) + ($1132))|0;
  $1136 = (($1135) + ($1128))|0;
  $1137 = $1096 << 30;
  $1138 = $1096 >>> 2;
  $1139 = $1137 | $1138;
  $1140 = $873 ^ $837;
  $1141 = $1140 ^ $985;
  $1142 = $1141 ^ $1085;
  $1143 = $1142 << 1;
  $1144 = $1142 >>> 31;
  $1145 = $1143 | $1144;
  $1146 = $1136 << 5;
  $1147 = $1136 >>> 27;
  $1148 = $1146 | $1147;
  $1149 = $1116 & $1139;
  $1150 = $1116 | $1139;
  $1151 = $1150 & $1119;
  $1152 = $1151 | $1149;
  $1153 = (($1145) + -1894007588)|0;
  $1154 = (($1153) + ($1099))|0;
  $1155 = (($1154) + ($1152))|0;
  $1156 = (($1155) + ($1148))|0;
  $1157 = $1116 << 30;
  $1158 = $1116 >>> 2;
  $1159 = $1157 | $1158;
  $1160 = $855 ^ $891;
  $1161 = $1160 ^ $1005;
  $1162 = $1161 ^ $1105;
  $1163 = $1162 << 1;
  $1164 = $1162 >>> 31;
  $1165 = $1163 | $1164;
  $1166 = $1156 << 5;
  $1167 = $1156 >>> 27;
  $1168 = $1166 | $1167;
  $1169 = $1136 & $1159;
  $1170 = $1136 | $1159;
  $1171 = $1170 & $1139;
  $1172 = $1171 | $1169;
  $1173 = (($1165) + -1894007588)|0;
  $1174 = (($1173) + ($1119))|0;
  $1175 = (($1174) + ($1172))|0;
  $1176 = (($1175) + ($1168))|0;
  $1177 = $1136 << 30;
  $1178 = $1136 >>> 2;
  $1179 = $1177 | $1178;
  $1180 = $873 ^ $909;
  $1181 = $1180 ^ $1025;
  $1182 = $1181 ^ $1125;
  $1183 = $1182 << 1;
  $1184 = $1182 >>> 31;
  $1185 = $1183 | $1184;
  $1186 = $1176 << 5;
  $1187 = $1176 >>> 27;
  $1188 = $1186 | $1187;
  $1189 = $1156 & $1179;
  $1190 = $1156 | $1179;
  $1191 = $1190 & $1159;
  $1192 = $1191 | $1189;
  $1193 = (($1185) + -1894007588)|0;
  $1194 = (($1193) + ($1139))|0;
  $1195 = (($1194) + ($1192))|0;
  $1196 = (($1195) + ($1188))|0;
  $1197 = $1156 << 30;
  $1198 = $1156 >>> 2;
  $1199 = $1197 | $1198;
  $1200 = $927 ^ $891;
  $1201 = $1200 ^ $1045;
  $1202 = $1201 ^ $1145;
  $1203 = $1202 << 1;
  $1204 = $1202 >>> 31;
  $1205 = $1203 | $1204;
  $1206 = $1196 << 5;
  $1207 = $1196 >>> 27;
  $1208 = $1206 | $1207;
  $1209 = $1176 & $1199;
  $1210 = $1176 | $1199;
  $1211 = $1210 & $1179;
  $1212 = $1211 | $1209;
  $1213 = (($1205) + -1894007588)|0;
  $1214 = (($1213) + ($1159))|0;
  $1215 = (($1214) + ($1212))|0;
  $1216 = (($1215) + ($1208))|0;
  $1217 = $1176 << 30;
  $1218 = $1176 >>> 2;
  $1219 = $1217 | $1218;
  $1220 = $909 ^ $945;
  $1221 = $1220 ^ $1065;
  $1222 = $1221 ^ $1165;
  $1223 = $1222 << 1;
  $1224 = $1222 >>> 31;
  $1225 = $1223 | $1224;
  $1226 = $1216 << 5;
  $1227 = $1216 >>> 27;
  $1228 = $1226 | $1227;
  $1229 = $1196 & $1219;
  $1230 = $1196 | $1219;
  $1231 = $1230 & $1199;
  $1232 = $1231 | $1229;
  $1233 = (($1225) + -1894007588)|0;
  $1234 = (($1233) + ($1179))|0;
  $1235 = (($1234) + ($1232))|0;
  $1236 = (($1235) + ($1228))|0;
  $1237 = $1196 << 30;
  $1238 = $1196 >>> 2;
  $1239 = $1237 | $1238;
  $1240 = $927 ^ $965;
  $1241 = $1240 ^ $1085;
  $1242 = $1241 ^ $1185;
  $1243 = $1242 << 1;
  $1244 = $1242 >>> 31;
  $1245 = $1243 | $1244;
  $1246 = $1236 << 5;
  $1247 = $1236 >>> 27;
  $1248 = $1246 | $1247;
  $1249 = $1216 & $1239;
  $1250 = $1216 | $1239;
  $1251 = $1250 & $1219;
  $1252 = $1251 | $1249;
  $1253 = (($1245) + -1894007588)|0;
  $1254 = (($1253) + ($1199))|0;
  $1255 = (($1254) + ($1252))|0;
  $1256 = (($1255) + ($1248))|0;
  $1257 = $1216 << 30;
  $1258 = $1216 >>> 2;
  $1259 = $1257 | $1258;
  $1260 = $985 ^ $945;
  $1261 = $1260 ^ $1105;
  $1262 = $1261 ^ $1205;
  $1263 = $1262 << 1;
  $1264 = $1262 >>> 31;
  $1265 = $1263 | $1264;
  $1266 = $1256 << 5;
  $1267 = $1256 >>> 27;
  $1268 = $1266 | $1267;
  $1269 = $1236 & $1259;
  $1270 = $1236 | $1259;
  $1271 = $1270 & $1239;
  $1272 = $1271 | $1269;
  $1273 = (($1265) + -1894007588)|0;
  $1274 = (($1273) + ($1219))|0;
  $1275 = (($1274) + ($1272))|0;
  $1276 = (($1275) + ($1268))|0;
  $1277 = $1236 << 30;
  $1278 = $1236 >>> 2;
  $1279 = $1277 | $1278;
  $1280 = $965 ^ $1005;
  $1281 = $1280 ^ $1125;
  $1282 = $1281 ^ $1225;
  $1283 = $1282 << 1;
  $1284 = $1282 >>> 31;
  $1285 = $1283 | $1284;
  $1286 = $1276 << 5;
  $1287 = $1276 >>> 27;
  $1288 = $1286 | $1287;
  $1289 = $1256 & $1279;
  $1290 = $1256 | $1279;
  $1291 = $1290 & $1259;
  $1292 = $1291 | $1289;
  $1293 = (($1285) + -1894007588)|0;
  $1294 = (($1293) + ($1239))|0;
  $1295 = (($1294) + ($1292))|0;
  $1296 = (($1295) + ($1288))|0;
  $1297 = $1256 << 30;
  $1298 = $1256 >>> 2;
  $1299 = $1297 | $1298;
  $1300 = $985 ^ $1025;
  $1301 = $1300 ^ $1145;
  $1302 = $1301 ^ $1245;
  $1303 = $1302 << 1;
  $1304 = $1302 >>> 31;
  $1305 = $1303 | $1304;
  $1306 = $1296 << 5;
  $1307 = $1296 >>> 27;
  $1308 = $1306 | $1307;
  $1309 = $1276 & $1299;
  $1310 = $1276 | $1299;
  $1311 = $1310 & $1279;
  $1312 = $1311 | $1309;
  $1313 = (($1305) + -1894007588)|0;
  $1314 = (($1313) + ($1259))|0;
  $1315 = (($1314) + ($1312))|0;
  $1316 = (($1315) + ($1308))|0;
  $1317 = $1276 << 30;
  $1318 = $1276 >>> 2;
  $1319 = $1317 | $1318;
  $1320 = $1045 ^ $1005;
  $1321 = $1320 ^ $1165;
  $1322 = $1321 ^ $1265;
  $1323 = $1322 << 1;
  $1324 = $1322 >>> 31;
  $1325 = $1323 | $1324;
  $1326 = $1316 << 5;
  $1327 = $1316 >>> 27;
  $1328 = $1326 | $1327;
  $1329 = $1296 & $1319;
  $1330 = $1296 | $1319;
  $1331 = $1330 & $1299;
  $1332 = $1331 | $1329;
  $1333 = (($1325) + -1894007588)|0;
  $1334 = (($1333) + ($1279))|0;
  $1335 = (($1334) + ($1332))|0;
  $1336 = (($1335) + ($1328))|0;
  $1337 = $1296 << 30;
  $1338 = $1296 >>> 2;
  $1339 = $1337 | $1338;
  $1340 = $1025 ^ $1065;
  $1341 = $1340 ^ $1185;
  $1342 = $1341 ^ $1285;
  $1343 = $1342 << 1;
  $1344 = $1342 >>> 31;
  $1345 = $1343 | $1344;
  $1346 = $1336 << 5;
  $1347 = $1336 >>> 27;
  $1348 = $1346 | $1347;
  $1349 = $1339 ^ $1319;
  $1350 = $1349 ^ $1316;
  $1351 = (($1345) + -899497514)|0;
  $1352 = (($1351) + ($1299))|0;
  $1353 = (($1352) + ($1350))|0;
  $1354 = (($1353) + ($1348))|0;
  $1355 = $1316 << 30;
  $1356 = $1316 >>> 2;
  $1357 = $1355 | $1356;
  $1358 = $1045 ^ $1085;
  $1359 = $1358 ^ $1205;
  $1360 = $1359 ^ $1305;
  $1361 = $1360 << 1;
  $1362 = $1360 >>> 31;
  $1363 = $1361 | $1362;
  $1364 = $1354 << 5;
  $1365 = $1354 >>> 27;
  $1366 = $1364 | $1365;
  $1367 = $1357 ^ $1339;
  $1368 = $1367 ^ $1336;
  $1369 = (($1363) + -899497514)|0;
  $1370 = (($1369) + ($1319))|0;
  $1371 = (($1370) + ($1368))|0;
  $1372 = (($1371) + ($1366))|0;
  $1373 = $1336 << 30;
  $1374 = $1336 >>> 2;
  $1375 = $1373 | $1374;
  $1376 = $1105 ^ $1065;
  $1377 = $1376 ^ $1225;
  $1378 = $1377 ^ $1325;
  $1379 = $1378 << 1;
  $1380 = $1378 >>> 31;
  $1381 = $1379 | $1380;
  $1382 = $1372 << 5;
  $1383 = $1372 >>> 27;
  $1384 = $1382 | $1383;
  $1385 = $1375 ^ $1357;
  $1386 = $1385 ^ $1354;
  $1387 = (($1381) + -899497514)|0;
  $1388 = (($1387) + ($1339))|0;
  $1389 = (($1388) + ($1386))|0;
  $1390 = (($1389) + ($1384))|0;
  $1391 = $1354 << 30;
  $1392 = $1354 >>> 2;
  $1393 = $1391 | $1392;
  $1394 = $1085 ^ $1125;
  $1395 = $1394 ^ $1245;
  $1396 = $1395 ^ $1345;
  $1397 = $1396 << 1;
  $1398 = $1396 >>> 31;
  $1399 = $1397 | $1398;
  $1400 = $1390 << 5;
  $1401 = $1390 >>> 27;
  $1402 = $1400 | $1401;
  $1403 = $1393 ^ $1375;
  $1404 = $1403 ^ $1372;
  $1405 = (($1399) + -899497514)|0;
  $1406 = (($1405) + ($1357))|0;
  $1407 = (($1406) + ($1404))|0;
  $1408 = (($1407) + ($1402))|0;
  $1409 = $1372 << 30;
  $1410 = $1372 >>> 2;
  $1411 = $1409 | $1410;
  $1412 = $1105 ^ $1145;
  $1413 = $1412 ^ $1265;
  $1414 = $1413 ^ $1363;
  $1415 = $1414 << 1;
  $1416 = $1414 >>> 31;
  $1417 = $1415 | $1416;
  $1418 = $1408 << 5;
  $1419 = $1408 >>> 27;
  $1420 = $1418 | $1419;
  $1421 = $1411 ^ $1393;
  $1422 = $1421 ^ $1390;
  $1423 = (($1417) + -899497514)|0;
  $1424 = (($1423) + ($1375))|0;
  $1425 = (($1424) + ($1422))|0;
  $1426 = (($1425) + ($1420))|0;
  $1427 = $1390 << 30;
  $1428 = $1390 >>> 2;
  $1429 = $1427 | $1428;
  $1430 = $1165 ^ $1125;
  $1431 = $1430 ^ $1285;
  $1432 = $1431 ^ $1381;
  $1433 = $1432 << 1;
  $1434 = $1432 >>> 31;
  $1435 = $1433 | $1434;
  $1436 = $1426 << 5;
  $1437 = $1426 >>> 27;
  $1438 = $1436 | $1437;
  $1439 = $1429 ^ $1411;
  $1440 = $1439 ^ $1408;
  $1441 = (($1435) + -899497514)|0;
  $1442 = (($1441) + ($1393))|0;
  $1443 = (($1442) + ($1440))|0;
  $1444 = (($1443) + ($1438))|0;
  $1445 = $1408 << 30;
  $1446 = $1408 >>> 2;
  $1447 = $1445 | $1446;
  $1448 = $1145 ^ $1185;
  $1449 = $1448 ^ $1305;
  $1450 = $1449 ^ $1399;
  $1451 = $1450 << 1;
  $1452 = $1450 >>> 31;
  $1453 = $1451 | $1452;
  $1454 = $1444 << 5;
  $1455 = $1444 >>> 27;
  $1456 = $1454 | $1455;
  $1457 = $1447 ^ $1429;
  $1458 = $1457 ^ $1426;
  $1459 = (($1453) + -899497514)|0;
  $1460 = (($1459) + ($1411))|0;
  $1461 = (($1460) + ($1458))|0;
  $1462 = (($1461) + ($1456))|0;
  $1463 = $1426 << 30;
  $1464 = $1426 >>> 2;
  $1465 = $1463 | $1464;
  $1466 = $1165 ^ $1205;
  $1467 = $1466 ^ $1325;
  $1468 = $1467 ^ $1417;
  $1469 = $1468 << 1;
  $1470 = $1468 >>> 31;
  $1471 = $1469 | $1470;
  $1472 = $1462 << 5;
  $1473 = $1462 >>> 27;
  $1474 = $1472 | $1473;
  $1475 = $1465 ^ $1447;
  $1476 = $1475 ^ $1444;
  $1477 = (($1471) + -899497514)|0;
  $1478 = (($1477) + ($1429))|0;
  $1479 = (($1478) + ($1476))|0;
  $1480 = (($1479) + ($1474))|0;
  $1481 = $1444 << 30;
  $1482 = $1444 >>> 2;
  $1483 = $1481 | $1482;
  $1484 = $1225 ^ $1185;
  $1485 = $1484 ^ $1345;
  $1486 = $1485 ^ $1435;
  $1487 = $1486 << 1;
  $1488 = $1486 >>> 31;
  $1489 = $1487 | $1488;
  $1490 = $1480 << 5;
  $1491 = $1480 >>> 27;
  $1492 = $1490 | $1491;
  $1493 = $1483 ^ $1465;
  $1494 = $1493 ^ $1462;
  $1495 = (($1489) + -899497514)|0;
  $1496 = (($1495) + ($1447))|0;
  $1497 = (($1496) + ($1494))|0;
  $1498 = (($1497) + ($1492))|0;
  $1499 = $1462 << 30;
  $1500 = $1462 >>> 2;
  $1501 = $1499 | $1500;
  $1502 = $1205 ^ $1245;
  $1503 = $1502 ^ $1363;
  $1504 = $1503 ^ $1453;
  $1505 = $1504 << 1;
  $1506 = $1504 >>> 31;
  $1507 = $1505 | $1506;
  $1508 = $1498 << 5;
  $1509 = $1498 >>> 27;
  $1510 = $1508 | $1509;
  $1511 = $1501 ^ $1483;
  $1512 = $1511 ^ $1480;
  $1513 = (($1507) + -899497514)|0;
  $1514 = (($1513) + ($1465))|0;
  $1515 = (($1514) + ($1512))|0;
  $1516 = (($1515) + ($1510))|0;
  $1517 = $1480 << 30;
  $1518 = $1480 >>> 2;
  $1519 = $1517 | $1518;
  $1520 = $1225 ^ $1265;
  $1521 = $1520 ^ $1381;
  $1522 = $1521 ^ $1471;
  $1523 = $1522 << 1;
  $1524 = $1522 >>> 31;
  $1525 = $1523 | $1524;
  $1526 = $1516 << 5;
  $1527 = $1516 >>> 27;
  $1528 = $1526 | $1527;
  $1529 = $1519 ^ $1501;
  $1530 = $1529 ^ $1498;
  $1531 = (($1525) + -899497514)|0;
  $1532 = (($1531) + ($1483))|0;
  $1533 = (($1532) + ($1530))|0;
  $1534 = (($1533) + ($1528))|0;
  $1535 = $1498 << 30;
  $1536 = $1498 >>> 2;
  $1537 = $1535 | $1536;
  $1538 = $1285 ^ $1245;
  $1539 = $1538 ^ $1399;
  $1540 = $1539 ^ $1489;
  $1541 = $1540 << 1;
  $1542 = $1540 >>> 31;
  $1543 = $1541 | $1542;
  $1544 = $1534 << 5;
  $1545 = $1534 >>> 27;
  $1546 = $1544 | $1545;
  $1547 = $1537 ^ $1519;
  $1548 = $1547 ^ $1516;
  $1549 = (($1543) + -899497514)|0;
  $1550 = (($1549) + ($1501))|0;
  $1551 = (($1550) + ($1548))|0;
  $1552 = (($1551) + ($1546))|0;
  $1553 = $1516 << 30;
  $1554 = $1516 >>> 2;
  $1555 = $1553 | $1554;
  $1556 = $1265 ^ $1305;
  $1557 = $1556 ^ $1417;
  $1558 = $1557 ^ $1507;
  $1559 = $1558 << 1;
  $1560 = $1558 >>> 31;
  $1561 = $1559 | $1560;
  $1562 = $1552 << 5;
  $1563 = $1552 >>> 27;
  $1564 = $1562 | $1563;
  $1565 = $1555 ^ $1537;
  $1566 = $1565 ^ $1534;
  $1567 = (($1561) + -899497514)|0;
  $1568 = (($1567) + ($1519))|0;
  $1569 = (($1568) + ($1566))|0;
  $1570 = (($1569) + ($1564))|0;
  $1571 = $1534 << 30;
  $1572 = $1534 >>> 2;
  $1573 = $1571 | $1572;
  $1574 = $1285 ^ $1325;
  $1575 = $1574 ^ $1435;
  $1576 = $1575 ^ $1525;
  $1577 = $1576 << 1;
  $1578 = $1576 >>> 31;
  $1579 = $1577 | $1578;
  $1580 = $1570 << 5;
  $1581 = $1570 >>> 27;
  $1582 = $1580 | $1581;
  $1583 = $1573 ^ $1555;
  $1584 = $1583 ^ $1552;
  $1585 = (($1579) + -899497514)|0;
  $1586 = (($1585) + ($1537))|0;
  $1587 = (($1586) + ($1584))|0;
  $1588 = (($1587) + ($1582))|0;
  $1589 = $1552 << 30;
  $1590 = $1552 >>> 2;
  $1591 = $1589 | $1590;
  $1592 = $1345 ^ $1305;
  $1593 = $1592 ^ $1453;
  $1594 = $1593 ^ $1543;
  $1595 = $1594 << 1;
  $1596 = $1594 >>> 31;
  $1597 = $1595 | $1596;
  $1598 = $1588 << 5;
  $1599 = $1588 >>> 27;
  $1600 = $1598 | $1599;
  $1601 = $1591 ^ $1573;
  $1602 = $1601 ^ $1570;
  $1603 = (($1597) + -899497514)|0;
  $1604 = (($1603) + ($1555))|0;
  $1605 = (($1604) + ($1602))|0;
  $1606 = (($1605) + ($1600))|0;
  $1607 = $1570 << 30;
  $1608 = $1570 >>> 2;
  $1609 = $1607 | $1608;
  $1610 = $1325 ^ $1363;
  $1611 = $1610 ^ $1471;
  $1612 = $1611 ^ $1561;
  $1613 = $1612 << 1;
  $1614 = $1612 >>> 31;
  $1615 = $1613 | $1614;
  $1616 = $1606 << 5;
  $1617 = $1606 >>> 27;
  $1618 = $1616 | $1617;
  $1619 = $1609 ^ $1591;
  $1620 = $1619 ^ $1588;
  $1621 = (($1615) + -899497514)|0;
  $1622 = (($1621) + ($1573))|0;
  $1623 = (($1622) + ($1620))|0;
  $1624 = (($1623) + ($1618))|0;
  $1625 = $1588 << 30;
  $1626 = $1588 >>> 2;
  $1627 = $1625 | $1626;
  $1628 = $1345 ^ $1381;
  $1629 = $1628 ^ $1489;
  $1630 = $1629 ^ $1579;
  $1631 = $1630 << 1;
  $1632 = $1630 >>> 31;
  $1633 = $1631 | $1632;
  $1634 = $1624 << 5;
  $1635 = $1624 >>> 27;
  $1636 = $1634 | $1635;
  $1637 = $1627 ^ $1609;
  $1638 = $1637 ^ $1606;
  $1639 = (($1633) + -899497514)|0;
  $1640 = (($1639) + ($1591))|0;
  $1641 = (($1640) + ($1638))|0;
  $1642 = (($1641) + ($1636))|0;
  $1643 = $1606 << 30;
  $1644 = $1606 >>> 2;
  $1645 = $1643 | $1644;
  $1646 = $1399 ^ $1363;
  $1647 = $1646 ^ $1507;
  $1648 = $1647 ^ $1597;
  $1649 = $1648 << 1;
  $1650 = $1648 >>> 31;
  $1651 = $1649 | $1650;
  $1652 = $1642 << 5;
  $1653 = $1642 >>> 27;
  $1654 = $1652 | $1653;
  $1655 = $1645 ^ $1627;
  $1656 = $1655 ^ $1624;
  $1657 = (($1651) + -899497514)|0;
  $1658 = (($1657) + ($1609))|0;
  $1659 = (($1658) + ($1656))|0;
  $1660 = (($1659) + ($1654))|0;
  $1661 = $1624 << 30;
  $1662 = $1624 >>> 2;
  $1663 = $1661 | $1662;
  $1664 = $1381 ^ $1417;
  $1665 = $1664 ^ $1525;
  $1666 = $1665 ^ $1615;
  $1667 = $1666 << 1;
  $1668 = $1666 >>> 31;
  $1669 = $1667 | $1668;
  $1670 = $1660 << 5;
  $1671 = $1660 >>> 27;
  $1672 = $1670 | $1671;
  $1673 = $1663 ^ $1645;
  $1674 = $1673 ^ $1642;
  $1675 = (($1669) + -899497514)|0;
  $1676 = (($1675) + ($1627))|0;
  $1677 = (($1676) + ($1674))|0;
  $1678 = (($1677) + ($1672))|0;
  $1679 = $1642 << 30;
  $1680 = $1642 >>> 2;
  $1681 = $1679 | $1680;
  $1682 = $1399 ^ $1435;
  $1683 = $1682 ^ $1543;
  $1684 = $1683 ^ $1633;
  $1685 = $1684 << 1;
  $1686 = $1684 >>> 31;
  $1687 = $1685 | $1686;
  $1688 = $1678 << 5;
  $1689 = $1678 >>> 27;
  $1690 = $1688 | $1689;
  $1691 = $1681 ^ $1663;
  $1692 = $1691 ^ $1660;
  $1693 = $1660 << 30;
  $1694 = $1660 >>> 2;
  $1695 = $1693 | $1694;
  $1696 = (($$01571) + -899497514)|0;
  $1697 = (($1696) + ($1687))|0;
  $1698 = (($1697) + ($1645))|0;
  $1699 = (($1698) + ($1692))|0;
  $1700 = (($1699) + ($1690))|0;
  HEAP32[$0>>2] = $1700;
  $1701 = HEAP32[$3>>2]|0;
  $1702 = (($1678) + ($1701))|0;
  HEAP32[$3>>2] = $1702;
  $1703 = HEAP32[$4>>2]|0;
  $1704 = (($1695) + ($1703))|0;
  HEAP32[$4>>2] = $1704;
  $1705 = HEAP32[$5>>2]|0;
  $1706 = (($1681) + ($1705))|0;
  HEAP32[$5>>2] = $1706;
  $1707 = HEAP32[$6>>2]|0;
  $1708 = (($1663) + ($1707))|0;
  HEAP32[$6>>2] = $1708;
  $1709 = (($$0) + -1)|0;
  $1710 = ($1709|0)==(0);
  if ($1710) {
   break;
  } else {
   $$0 = $1709;$$01562 = $474;$$01564 = $1708;$$01566 = $1706;$$01568 = $1704;$$01570 = $1702;$$01571 = $1700;
  }
 }
 return;
}
function _SHA1_Final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = ((($1)) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 HEAP8[$5>>0] = -128;
 $6 = (($4) + 1)|0;
 $7 = ($6>>>0)>(56);
 if ($7) {
  $8 = (63 - ($4))|0;
  $9 = (($2) + ($6)|0);
  _memset(($9|0),0,($8|0))|0;
  _sha1_block_data_order($1,$2,1);
  $$0 = 0;
 } else {
  $$0 = $6;
 }
 $10 = (($2) + ($$0)|0);
 $11 = (56 - ($$0))|0;
 _memset(($10|0),0,($11|0))|0;
 $12 = ((($1)) + 84|0);
 $13 = ((($1)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >>> 24;
 $16 = $15&255;
 $17 = ((($12)) + 1|0);
 HEAP8[$12>>0] = $16;
 $18 = $14 >>> 16;
 $19 = $18&255;
 $20 = ((($12)) + 2|0);
 HEAP8[$17>>0] = $19;
 $21 = $14 >>> 8;
 $22 = $21&255;
 $23 = ((($12)) + 3|0);
 HEAP8[$20>>0] = $22;
 $24 = $14&255;
 $25 = ((($1)) + 88|0);
 HEAP8[$23>>0] = $24;
 $26 = ((($1)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 >>> 24;
 $29 = $28&255;
 $30 = ((($25)) + 1|0);
 HEAP8[$25>>0] = $29;
 $31 = $27 >>> 16;
 $32 = $31&255;
 $33 = ((($25)) + 2|0);
 HEAP8[$30>>0] = $32;
 $34 = $27 >>> 8;
 $35 = $34&255;
 $36 = ((($25)) + 3|0);
 HEAP8[$33>>0] = $35;
 $37 = $27&255;
 HEAP8[$36>>0] = $37;
 _sha1_block_data_order($1,$2,1);
 HEAP32[$3>>2] = 0;
 _OPENSSL_cleanse($2,64);
 $38 = HEAP32[$1>>2]|0;
 $39 = $38 >>> 24;
 $40 = $39&255;
 $41 = ((($0)) + 1|0);
 HEAP8[$0>>0] = $40;
 $42 = $38 >>> 16;
 $43 = $42&255;
 $44 = ((($0)) + 2|0);
 HEAP8[$41>>0] = $43;
 $45 = $38 >>> 8;
 $46 = $45&255;
 $47 = ((($0)) + 3|0);
 HEAP8[$44>>0] = $46;
 $48 = $38&255;
 $49 = ((($0)) + 4|0);
 HEAP8[$47>>0] = $48;
 $50 = ((($1)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 >>> 24;
 $53 = $52&255;
 $54 = ((($0)) + 5|0);
 HEAP8[$49>>0] = $53;
 $55 = $51 >>> 16;
 $56 = $55&255;
 $57 = ((($0)) + 6|0);
 HEAP8[$54>>0] = $56;
 $58 = $51 >>> 8;
 $59 = $58&255;
 $60 = ((($0)) + 7|0);
 HEAP8[$57>>0] = $59;
 $61 = $51&255;
 $62 = ((($0)) + 8|0);
 HEAP8[$60>>0] = $61;
 $63 = ((($1)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 >>> 24;
 $66 = $65&255;
 $67 = ((($0)) + 9|0);
 HEAP8[$62>>0] = $66;
 $68 = $64 >>> 16;
 $69 = $68&255;
 $70 = ((($0)) + 10|0);
 HEAP8[$67>>0] = $69;
 $71 = $64 >>> 8;
 $72 = $71&255;
 $73 = ((($0)) + 11|0);
 HEAP8[$70>>0] = $72;
 $74 = $64&255;
 $75 = ((($0)) + 12|0);
 HEAP8[$73>>0] = $74;
 $76 = ((($1)) + 12|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 >>> 24;
 $79 = $78&255;
 $80 = ((($0)) + 13|0);
 HEAP8[$75>>0] = $79;
 $81 = $77 >>> 16;
 $82 = $81&255;
 $83 = ((($0)) + 14|0);
 HEAP8[$80>>0] = $82;
 $84 = $77 >>> 8;
 $85 = $84&255;
 $86 = ((($0)) + 15|0);
 HEAP8[$83>>0] = $85;
 $87 = $77&255;
 $88 = ((($0)) + 16|0);
 HEAP8[$86>>0] = $87;
 $89 = ((($1)) + 16|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 >>> 24;
 $92 = $91&255;
 $93 = ((($0)) + 17|0);
 HEAP8[$88>>0] = $92;
 $94 = $90 >>> 16;
 $95 = $94&255;
 $96 = ((($0)) + 18|0);
 HEAP8[$93>>0] = $95;
 $97 = $90 >>> 8;
 $98 = $97&255;
 $99 = ((($0)) + 19|0);
 HEAP8[$96>>0] = $98;
 $100 = $90&255;
 HEAP8[$99>>0] = $100;
 return 1;
}
function _SHA1_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 dest=$1; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$0>>2] = 1732584193;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = -271733879;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = -1732584194;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 271733878;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = -1009589776;
 return 1;
}
function _SHA256_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 dest=$1; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$0>>2] = 1779033703;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = -1150833019;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 1013904242;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = -1521486534;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 1359893119;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = -1694144372;
 $7 = ((($0)) + 24|0);
 HEAP32[$7>>2] = 528734635;
 $8 = ((($0)) + 28|0);
 HEAP32[$8>>2] = 1541459225;
 $9 = ((($0)) + 108|0);
 HEAP32[$9>>2] = 32;
 return 1;
}
function _SHA256_Update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$060 = 0, $$061 = 0, $$1 = 0, $$162 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  return 1;
 }
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 << 3;
 $7 = (($5) + ($6))|0;
 $8 = ($7>>>0)<($5>>>0);
 $9 = ((($0)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 if ($8) {
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $14 = $11;
 } else {
  $14 = $10;
 }
 $12 = $2 >>> 29;
 $13 = (($14) + ($12))|0;
 HEAP32[$9>>2] = $13;
 HEAP32[$4>>2] = $7;
 $15 = ((($0)) + 104|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 do {
  if ($17) {
   $$060 = $1;$$061 = $2;
  } else {
   $18 = ((($0)) + 40|0);
   $19 = (($16) + ($2))|0;
   $20 = $19 | $2;
   $21 = ($20>>>0)>(63);
   $22 = (($18) + ($16)|0);
   if ($21) {
    $23 = (64 - ($16))|0;
    _memcpy(($22|0),($1|0),($23|0))|0;
    _sha256_block_data_order($0,$18,1);
    $24 = (($1) + ($23)|0);
    $25 = (($2) - ($23))|0;
    dest=$18; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$060 = $24;$$061 = $25;
    break;
   }
   _memcpy(($22|0),($1|0),($2|0))|0;
   $26 = HEAP32[$15>>2]|0;
   $27 = (($26) + ($2))|0;
   HEAP32[$15>>2] = $27;
   return 1;
  }
 } while(0);
 $28 = $$061 >>> 6;
 $29 = ($28|0)==(0);
 $30 = $28 << 6;
 if ($29) {
  $$1 = $$060;$$162 = $$061;
 } else {
  $31 = (($$061) - ($30))|0;
  $32 = (($$060) + ($30)|0);
  _sha256_block_data_order($0,$$060,$28);
  $$1 = $32;$$162 = $31;
 }
 $33 = ($$162|0)==(0);
 if ($33) {
  return 1;
 }
 $34 = ((($0)) + 40|0);
 HEAP32[$15>>2] = $$162;
 _memcpy(($34|0),($$1|0),($$162|0))|0;
 return 1;
}
function _SHA256_Final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$089 = 0, $$2100 = 0, $$29499 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 40|0);
 $3 = ((($1)) + 104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 HEAP8[$5>>0] = -128;
 $6 = (($4) + 1)|0;
 $7 = ($6>>>0)>(56);
 if ($7) {
  $8 = (63 - ($4))|0;
  $9 = (($2) + ($6)|0);
  _memset(($9|0),0,($8|0))|0;
  _sha256_block_data_order($1,$2,1);
  $$089 = 0;
 } else {
  $$089 = $6;
 }
 $10 = (($2) + ($$089)|0);
 $11 = (56 - ($$089))|0;
 _memset(($10|0),0,($11|0))|0;
 $12 = ((($1)) + 96|0);
 $13 = ((($1)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >>> 24;
 $16 = $15&255;
 $17 = ((($12)) + 1|0);
 HEAP8[$12>>0] = $16;
 $18 = $14 >>> 16;
 $19 = $18&255;
 $20 = ((($12)) + 2|0);
 HEAP8[$17>>0] = $19;
 $21 = $14 >>> 8;
 $22 = $21&255;
 $23 = ((($12)) + 3|0);
 HEAP8[$20>>0] = $22;
 $24 = $14&255;
 $25 = ((($1)) + 100|0);
 HEAP8[$23>>0] = $24;
 $26 = ((($1)) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 >>> 24;
 $29 = $28&255;
 $30 = ((($25)) + 1|0);
 HEAP8[$25>>0] = $29;
 $31 = $27 >>> 16;
 $32 = $31&255;
 $33 = ((($25)) + 2|0);
 HEAP8[$30>>0] = $32;
 $34 = $27 >>> 8;
 $35 = $34&255;
 $36 = ((($25)) + 3|0);
 HEAP8[$33>>0] = $35;
 $37 = $27&255;
 HEAP8[$36>>0] = $37;
 _sha256_block_data_order($1,$2,1);
 HEAP32[$3>>2] = 0;
 _OPENSSL_cleanse($2,64);
 $38 = ((($1)) + 108|0);
 $39 = HEAP32[$38>>2]|0;
 switch ($39|0) {
 case 28:  {
  $142 = HEAP32[$1>>2]|0;
  $143 = $142 >>> 24;
  $144 = $143&255;
  $145 = ((($0)) + 1|0);
  HEAP8[$0>>0] = $144;
  $146 = $142 >>> 16;
  $147 = $146&255;
  $148 = ((($0)) + 2|0);
  HEAP8[$145>>0] = $147;
  $149 = $142 >>> 8;
  $150 = $149&255;
  $151 = ((($0)) + 3|0);
  HEAP8[$148>>0] = $150;
  $152 = $142&255;
  $153 = ((($0)) + 4|0);
  HEAP8[$151>>0] = $152;
  $154 = ((($1)) + 4|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $155 >>> 24;
  $157 = $156&255;
  $158 = ((($0)) + 5|0);
  HEAP8[$153>>0] = $157;
  $159 = $155 >>> 16;
  $160 = $159&255;
  $161 = ((($0)) + 6|0);
  HEAP8[$158>>0] = $160;
  $162 = $155 >>> 8;
  $163 = $162&255;
  $164 = ((($0)) + 7|0);
  HEAP8[$161>>0] = $163;
  $165 = $155&255;
  $166 = ((($0)) + 8|0);
  HEAP8[$164>>0] = $165;
  $167 = ((($1)) + 8|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = $168 >>> 24;
  $170 = $169&255;
  $171 = ((($0)) + 9|0);
  HEAP8[$166>>0] = $170;
  $172 = $168 >>> 16;
  $173 = $172&255;
  $174 = ((($0)) + 10|0);
  HEAP8[$171>>0] = $173;
  $175 = $168 >>> 8;
  $176 = $175&255;
  $177 = ((($0)) + 11|0);
  HEAP8[$174>>0] = $176;
  $178 = $168&255;
  $179 = ((($0)) + 12|0);
  HEAP8[$177>>0] = $178;
  $180 = ((($1)) + 12|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = $181 >>> 24;
  $183 = $182&255;
  $184 = ((($0)) + 13|0);
  HEAP8[$179>>0] = $183;
  $185 = $181 >>> 16;
  $186 = $185&255;
  $187 = ((($0)) + 14|0);
  HEAP8[$184>>0] = $186;
  $188 = $181 >>> 8;
  $189 = $188&255;
  $190 = ((($0)) + 15|0);
  HEAP8[$187>>0] = $189;
  $191 = $181&255;
  $192 = ((($0)) + 16|0);
  HEAP8[$190>>0] = $191;
  $193 = ((($1)) + 16|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $194 >>> 24;
  $196 = $195&255;
  $197 = ((($0)) + 17|0);
  HEAP8[$192>>0] = $196;
  $198 = $194 >>> 16;
  $199 = $198&255;
  $200 = ((($0)) + 18|0);
  HEAP8[$197>>0] = $199;
  $201 = $194 >>> 8;
  $202 = $201&255;
  $203 = ((($0)) + 19|0);
  HEAP8[$200>>0] = $202;
  $204 = $194&255;
  $205 = ((($0)) + 20|0);
  HEAP8[$203>>0] = $204;
  $206 = ((($1)) + 20|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = $207 >>> 24;
  $209 = $208&255;
  $210 = ((($0)) + 21|0);
  HEAP8[$205>>0] = $209;
  $211 = $207 >>> 16;
  $212 = $211&255;
  $213 = ((($0)) + 22|0);
  HEAP8[$210>>0] = $212;
  $214 = $207 >>> 8;
  $215 = $214&255;
  $216 = ((($0)) + 23|0);
  HEAP8[$213>>0] = $215;
  $217 = $207&255;
  $218 = ((($0)) + 24|0);
  HEAP8[$216>>0] = $217;
  $219 = ((($1)) + 24|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $220 >>> 24;
  $222 = $221&255;
  $223 = ((($0)) + 25|0);
  HEAP8[$218>>0] = $222;
  $224 = $220 >>> 16;
  $225 = $224&255;
  $226 = ((($0)) + 26|0);
  HEAP8[$223>>0] = $225;
  $227 = $220 >>> 8;
  $228 = $227&255;
  $229 = ((($0)) + 27|0);
  HEAP8[$226>>0] = $228;
  $230 = $220&255;
  HEAP8[$229>>0] = $230;
  $250 = 1;
  return ($250|0);
  break;
 }
 case 32:  {
  $40 = HEAP32[$1>>2]|0;
  $41 = $40 >>> 24;
  $42 = $41&255;
  $43 = ((($0)) + 1|0);
  HEAP8[$0>>0] = $42;
  $44 = $40 >>> 16;
  $45 = $44&255;
  $46 = ((($0)) + 2|0);
  HEAP8[$43>>0] = $45;
  $47 = $40 >>> 8;
  $48 = $47&255;
  $49 = ((($0)) + 3|0);
  HEAP8[$46>>0] = $48;
  $50 = $40&255;
  $51 = ((($0)) + 4|0);
  HEAP8[$49>>0] = $50;
  $52 = ((($1)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53 >>> 24;
  $55 = $54&255;
  $56 = ((($0)) + 5|0);
  HEAP8[$51>>0] = $55;
  $57 = $53 >>> 16;
  $58 = $57&255;
  $59 = ((($0)) + 6|0);
  HEAP8[$56>>0] = $58;
  $60 = $53 >>> 8;
  $61 = $60&255;
  $62 = ((($0)) + 7|0);
  HEAP8[$59>>0] = $61;
  $63 = $53&255;
  $64 = ((($0)) + 8|0);
  HEAP8[$62>>0] = $63;
  $65 = ((($1)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 >>> 24;
  $68 = $67&255;
  $69 = ((($0)) + 9|0);
  HEAP8[$64>>0] = $68;
  $70 = $66 >>> 16;
  $71 = $70&255;
  $72 = ((($0)) + 10|0);
  HEAP8[$69>>0] = $71;
  $73 = $66 >>> 8;
  $74 = $73&255;
  $75 = ((($0)) + 11|0);
  HEAP8[$72>>0] = $74;
  $76 = $66&255;
  $77 = ((($0)) + 12|0);
  HEAP8[$75>>0] = $76;
  $78 = ((($1)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79 >>> 24;
  $81 = $80&255;
  $82 = ((($0)) + 13|0);
  HEAP8[$77>>0] = $81;
  $83 = $79 >>> 16;
  $84 = $83&255;
  $85 = ((($0)) + 14|0);
  HEAP8[$82>>0] = $84;
  $86 = $79 >>> 8;
  $87 = $86&255;
  $88 = ((($0)) + 15|0);
  HEAP8[$85>>0] = $87;
  $89 = $79&255;
  $90 = ((($0)) + 16|0);
  HEAP8[$88>>0] = $89;
  $91 = ((($1)) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 >>> 24;
  $94 = $93&255;
  $95 = ((($0)) + 17|0);
  HEAP8[$90>>0] = $94;
  $96 = $92 >>> 16;
  $97 = $96&255;
  $98 = ((($0)) + 18|0);
  HEAP8[$95>>0] = $97;
  $99 = $92 >>> 8;
  $100 = $99&255;
  $101 = ((($0)) + 19|0);
  HEAP8[$98>>0] = $100;
  $102 = $92&255;
  $103 = ((($0)) + 20|0);
  HEAP8[$101>>0] = $102;
  $104 = ((($1)) + 20|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $105 >>> 24;
  $107 = $106&255;
  $108 = ((($0)) + 21|0);
  HEAP8[$103>>0] = $107;
  $109 = $105 >>> 16;
  $110 = $109&255;
  $111 = ((($0)) + 22|0);
  HEAP8[$108>>0] = $110;
  $112 = $105 >>> 8;
  $113 = $112&255;
  $114 = ((($0)) + 23|0);
  HEAP8[$111>>0] = $113;
  $115 = $105&255;
  $116 = ((($0)) + 24|0);
  HEAP8[$114>>0] = $115;
  $117 = ((($1)) + 24|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $118 >>> 24;
  $120 = $119&255;
  $121 = ((($0)) + 25|0);
  HEAP8[$116>>0] = $120;
  $122 = $118 >>> 16;
  $123 = $122&255;
  $124 = ((($0)) + 26|0);
  HEAP8[$121>>0] = $123;
  $125 = $118 >>> 8;
  $126 = $125&255;
  $127 = ((($0)) + 27|0);
  HEAP8[$124>>0] = $126;
  $128 = $118&255;
  $129 = ((($0)) + 28|0);
  HEAP8[$127>>0] = $128;
  $130 = ((($1)) + 28|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $131 >>> 24;
  $133 = $132&255;
  $134 = ((($0)) + 29|0);
  HEAP8[$129>>0] = $133;
  $135 = $131 >>> 16;
  $136 = $135&255;
  $137 = ((($0)) + 30|0);
  HEAP8[$134>>0] = $136;
  $138 = $131 >>> 8;
  $139 = $138&255;
  $140 = ((($0)) + 31|0);
  HEAP8[$137>>0] = $139;
  $141 = $131&255;
  HEAP8[$140>>0] = $141;
  $250 = 1;
  return ($250|0);
  break;
 }
 default: {
  $231 = ($39>>>0)>(32);
  if ($231) {
   $250 = 0;
   return ($250|0);
  }
  $232 = ($39>>>0)>(3);
  if ($232) {
   $$2100 = 0;$$29499 = $0;
  } else {
   $250 = 1;
   return ($250|0);
  }
  while(1) {
   $233 = (($1) + ($$2100<<2)|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 >>> 24;
   $236 = $235&255;
   $237 = ((($$29499)) + 1|0);
   HEAP8[$$29499>>0] = $236;
   $238 = $234 >>> 16;
   $239 = $238&255;
   $240 = ((($$29499)) + 2|0);
   HEAP8[$237>>0] = $239;
   $241 = $234 >>> 8;
   $242 = $241&255;
   $243 = ((($$29499)) + 3|0);
   HEAP8[$240>>0] = $242;
   $244 = $234&255;
   $245 = ((($$29499)) + 4|0);
   HEAP8[$243>>0] = $244;
   $246 = (($$2100) + 1)|0;
   $247 = HEAP32[$38>>2]|0;
   $248 = $247 >>> 2;
   $249 = ($246>>>0)<($248>>>0);
   if ($249) {
    $$2100 = $246;$$29499 = $245;
   } else {
    $250 = 1;
    break;
   }
  }
  return ($250|0);
 }
 }
 return (0)|0;
}
function _sha256_block_data_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$014601486 = 0, $$014621484 = 0, $$114641483 = 0, $$114661482 = 0, $$114681481 = 0, $$114701480 = 0, $$114721479 = 0, $$114741478 = 0, $$114761477 = 0, $$11485 = 0, $$in = 0, $$pre = 0, $$pre1494 = 0, $$pre1495 = 0, $$pre1496 = 0, $$pre1497 = 0, $$pre1498 = 0, $$pre1499 = 0, $$pre1500 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
 var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0;
 var $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0;
 var $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0;
 var $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0;
 var $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0;
 var $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0;
 var $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0;
 var $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0;
 var $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0;
 var $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0;
 var $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0;
 var $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0;
 var $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0;
 var $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0;
 var $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0;
 var $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0;
 var $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp;
 $4 = ($2|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($0)) + 4|0);
 $6 = ((($0)) + 8|0);
 $7 = ((($0)) + 12|0);
 $8 = ((($0)) + 16|0);
 $9 = ((($0)) + 20|0);
 $10 = ((($0)) + 24|0);
 $11 = ((($0)) + 28|0);
 $12 = ((($3)) + 4|0);
 $13 = ((($3)) + 8|0);
 $14 = ((($3)) + 12|0);
 $15 = ((($3)) + 16|0);
 $16 = ((($3)) + 20|0);
 $17 = ((($3)) + 24|0);
 $18 = ((($3)) + 28|0);
 $19 = ((($3)) + 32|0);
 $20 = ((($3)) + 36|0);
 $21 = ((($3)) + 40|0);
 $22 = ((($3)) + 44|0);
 $23 = ((($3)) + 48|0);
 $24 = ((($3)) + 52|0);
 $25 = ((($3)) + 56|0);
 $26 = ((($3)) + 60|0);
 $$pre = HEAP32[$0>>2]|0;
 $$pre1494 = HEAP32[$5>>2]|0;
 $$pre1495 = HEAP32[$6>>2]|0;
 $$pre1496 = HEAP32[$8>>2]|0;
 $$pre1497 = HEAP32[$9>>2]|0;
 $$pre1498 = HEAP32[$10>>2]|0;
 $$pre1499 = HEAP32[$11>>2]|0;
 $$pre1500 = HEAP32[$7>>2]|0;
 $$014601486 = $1;$$in = $2;$28 = $$pre;$29 = $$pre1494;$31 = $$pre1496;$43 = $$pre1497;$46 = $$pre1498;$60 = $$pre1495;$84 = $$pre1499;$89 = $$pre1500;
 while(1) {
  $27 = $29 & $28;
  $30 = $31 << 26;
  $32 = $31 >>> 6;
  $33 = $30 | $32;
  $34 = $31 << 21;
  $35 = $31 >>> 11;
  $36 = $34 | $35;
  $37 = $33 ^ $36;
  $38 = $31 << 7;
  $39 = $31 >>> 25;
  $40 = $38 | $39;
  $41 = $37 ^ $40;
  $42 = $43 & $31;
  $44 = $31 ^ -1;
  $45 = $46 & $44;
  $47 = $45 ^ $42;
  $48 = $28 << 30;
  $49 = $28 >>> 2;
  $50 = $48 | $49;
  $51 = $28 << 19;
  $52 = $28 >>> 13;
  $53 = $51 | $52;
  $54 = $50 ^ $53;
  $55 = $28 << 10;
  $56 = $28 >>> 22;
  $57 = $55 | $56;
  $58 = $54 ^ $57;
  $59 = $60 & $28;
  $61 = $59 ^ $27;
  $62 = $60 & $29;
  $63 = $61 ^ $62;
  $64 = (($63) + ($58))|0;
  $65 = ((($$014601486)) + 1|0);
  $66 = HEAP8[$$014601486>>0]|0;
  $67 = $66&255;
  $68 = $67 << 24;
  $69 = ((($$014601486)) + 2|0);
  $70 = HEAP8[$65>>0]|0;
  $71 = $70&255;
  $72 = $71 << 16;
  $73 = $72 | $68;
  $74 = ((($$014601486)) + 3|0);
  $75 = HEAP8[$69>>0]|0;
  $76 = $75&255;
  $77 = $76 << 8;
  $78 = $73 | $77;
  $79 = ((($$014601486)) + 4|0);
  $80 = HEAP8[$74>>0]|0;
  $81 = $80&255;
  $82 = $78 | $81;
  HEAP32[$3>>2] = $82;
  $83 = (($84) + 1116352408)|0;
  $85 = (($83) + ($41))|0;
  $86 = (($85) + ($47))|0;
  $87 = (($86) + ($82))|0;
  $88 = (($87) + ($89))|0;
  $90 = (($64) + ($87))|0;
  $91 = ((($$014601486)) + 5|0);
  $92 = HEAP8[$79>>0]|0;
  $93 = $92&255;
  $94 = $93 << 24;
  $95 = ((($$014601486)) + 6|0);
  $96 = HEAP8[$91>>0]|0;
  $97 = $96&255;
  $98 = $97 << 16;
  $99 = $98 | $94;
  $100 = ((($$014601486)) + 7|0);
  $101 = HEAP8[$95>>0]|0;
  $102 = $101&255;
  $103 = $102 << 8;
  $104 = $99 | $103;
  $105 = ((($$014601486)) + 8|0);
  $106 = HEAP8[$100>>0]|0;
  $107 = $106&255;
  $108 = $104 | $107;
  HEAP32[$12>>2] = $108;
  $109 = $88 << 26;
  $110 = $88 >>> 6;
  $111 = $109 | $110;
  $112 = $88 << 21;
  $113 = $88 >>> 11;
  $114 = $112 | $113;
  $115 = $111 ^ $114;
  $116 = $88 << 7;
  $117 = $88 >>> 25;
  $118 = $116 | $117;
  $119 = $115 ^ $118;
  $120 = $88 & $31;
  $121 = $88 ^ -1;
  $122 = $43 & $121;
  $123 = $120 ^ $122;
  $124 = (($46) + 1899447441)|0;
  $125 = (($124) + ($123))|0;
  $126 = (($125) + ($108))|0;
  $127 = (($126) + ($119))|0;
  $128 = $90 << 30;
  $129 = $90 >>> 2;
  $130 = $128 | $129;
  $131 = $90 << 19;
  $132 = $90 >>> 13;
  $133 = $131 | $132;
  $134 = $130 ^ $133;
  $135 = $90 << 10;
  $136 = $90 >>> 22;
  $137 = $135 | $136;
  $138 = $134 ^ $137;
  $139 = $90 & $28;
  $140 = $90 & $29;
  $141 = $140 ^ $27;
  $142 = $141 ^ $139;
  $143 = (($138) + ($142))|0;
  $144 = (($127) + ($60))|0;
  $145 = (($143) + ($127))|0;
  $146 = ((($$014601486)) + 9|0);
  $147 = HEAP8[$105>>0]|0;
  $148 = $147&255;
  $149 = $148 << 24;
  $150 = ((($$014601486)) + 10|0);
  $151 = HEAP8[$146>>0]|0;
  $152 = $151&255;
  $153 = $152 << 16;
  $154 = $153 | $149;
  $155 = ((($$014601486)) + 11|0);
  $156 = HEAP8[$150>>0]|0;
  $157 = $156&255;
  $158 = $157 << 8;
  $159 = $154 | $158;
  $160 = ((($$014601486)) + 12|0);
  $161 = HEAP8[$155>>0]|0;
  $162 = $161&255;
  $163 = $159 | $162;
  HEAP32[$13>>2] = $163;
  $164 = $144 << 26;
  $165 = $144 >>> 6;
  $166 = $164 | $165;
  $167 = $144 << 21;
  $168 = $144 >>> 11;
  $169 = $167 | $168;
  $170 = $166 ^ $169;
  $171 = $144 << 7;
  $172 = $144 >>> 25;
  $173 = $171 | $172;
  $174 = $170 ^ $173;
  $175 = $144 & $88;
  $176 = $144 ^ -1;
  $177 = $31 & $176;
  $178 = $175 ^ $177;
  $179 = (($43) + -1245643825)|0;
  $180 = (($179) + ($163))|0;
  $181 = (($180) + ($178))|0;
  $182 = (($181) + ($174))|0;
  $183 = $145 << 30;
  $184 = $145 >>> 2;
  $185 = $183 | $184;
  $186 = $145 << 19;
  $187 = $145 >>> 13;
  $188 = $186 | $187;
  $189 = $185 ^ $188;
  $190 = $145 << 10;
  $191 = $145 >>> 22;
  $192 = $190 | $191;
  $193 = $189 ^ $192;
  $194 = $145 & $90;
  $195 = $145 & $28;
  $196 = $195 ^ $139;
  $197 = $196 ^ $194;
  $198 = (($193) + ($197))|0;
  $199 = (($182) + ($29))|0;
  $200 = (($198) + ($182))|0;
  $201 = ((($$014601486)) + 13|0);
  $202 = HEAP8[$160>>0]|0;
  $203 = $202&255;
  $204 = $203 << 24;
  $205 = ((($$014601486)) + 14|0);
  $206 = HEAP8[$201>>0]|0;
  $207 = $206&255;
  $208 = $207 << 16;
  $209 = $208 | $204;
  $210 = ((($$014601486)) + 15|0);
  $211 = HEAP8[$205>>0]|0;
  $212 = $211&255;
  $213 = $212 << 8;
  $214 = $209 | $213;
  $215 = ((($$014601486)) + 16|0);
  $216 = HEAP8[$210>>0]|0;
  $217 = $216&255;
  $218 = $214 | $217;
  HEAP32[$14>>2] = $218;
  $219 = $199 << 26;
  $220 = $199 >>> 6;
  $221 = $219 | $220;
  $222 = $199 << 21;
  $223 = $199 >>> 11;
  $224 = $222 | $223;
  $225 = $221 ^ $224;
  $226 = $199 << 7;
  $227 = $199 >>> 25;
  $228 = $226 | $227;
  $229 = $225 ^ $228;
  $230 = $199 & $144;
  $231 = $199 ^ -1;
  $232 = $88 & $231;
  $233 = $230 ^ $232;
  $234 = (($31) + -373957723)|0;
  $235 = (($234) + ($218))|0;
  $236 = (($235) + ($233))|0;
  $237 = (($236) + ($229))|0;
  $238 = $200 << 30;
  $239 = $200 >>> 2;
  $240 = $238 | $239;
  $241 = $200 << 19;
  $242 = $200 >>> 13;
  $243 = $241 | $242;
  $244 = $240 ^ $243;
  $245 = $200 << 10;
  $246 = $200 >>> 22;
  $247 = $245 | $246;
  $248 = $244 ^ $247;
  $249 = $200 & $145;
  $250 = $200 & $90;
  $251 = $250 ^ $194;
  $252 = $251 ^ $249;
  $253 = (($248) + ($252))|0;
  $254 = (($237) + ($28))|0;
  $255 = (($253) + ($237))|0;
  $256 = ((($$014601486)) + 17|0);
  $257 = HEAP8[$215>>0]|0;
  $258 = $257&255;
  $259 = $258 << 24;
  $260 = ((($$014601486)) + 18|0);
  $261 = HEAP8[$256>>0]|0;
  $262 = $261&255;
  $263 = $262 << 16;
  $264 = $263 | $259;
  $265 = ((($$014601486)) + 19|0);
  $266 = HEAP8[$260>>0]|0;
  $267 = $266&255;
  $268 = $267 << 8;
  $269 = $264 | $268;
  $270 = ((($$014601486)) + 20|0);
  $271 = HEAP8[$265>>0]|0;
  $272 = $271&255;
  $273 = $269 | $272;
  HEAP32[$15>>2] = $273;
  $274 = $254 << 26;
  $275 = $254 >>> 6;
  $276 = $274 | $275;
  $277 = $254 << 21;
  $278 = $254 >>> 11;
  $279 = $277 | $278;
  $280 = $276 ^ $279;
  $281 = $254 << 7;
  $282 = $254 >>> 25;
  $283 = $281 | $282;
  $284 = $280 ^ $283;
  $285 = $254 & $199;
  $286 = $254 ^ -1;
  $287 = $144 & $286;
  $288 = $285 ^ $287;
  $289 = (($88) + 961987163)|0;
  $290 = (($289) + ($273))|0;
  $291 = (($290) + ($288))|0;
  $292 = (($291) + ($284))|0;
  $293 = $255 << 30;
  $294 = $255 >>> 2;
  $295 = $293 | $294;
  $296 = $255 << 19;
  $297 = $255 >>> 13;
  $298 = $296 | $297;
  $299 = $295 ^ $298;
  $300 = $255 << 10;
  $301 = $255 >>> 22;
  $302 = $300 | $301;
  $303 = $299 ^ $302;
  $304 = $255 & $200;
  $305 = $255 & $145;
  $306 = $305 ^ $249;
  $307 = $306 ^ $304;
  $308 = (($303) + ($307))|0;
  $309 = (($292) + ($90))|0;
  $310 = (($308) + ($292))|0;
  $311 = ((($$014601486)) + 21|0);
  $312 = HEAP8[$270>>0]|0;
  $313 = $312&255;
  $314 = $313 << 24;
  $315 = ((($$014601486)) + 22|0);
  $316 = HEAP8[$311>>0]|0;
  $317 = $316&255;
  $318 = $317 << 16;
  $319 = $318 | $314;
  $320 = ((($$014601486)) + 23|0);
  $321 = HEAP8[$315>>0]|0;
  $322 = $321&255;
  $323 = $322 << 8;
  $324 = $319 | $323;
  $325 = ((($$014601486)) + 24|0);
  $326 = HEAP8[$320>>0]|0;
  $327 = $326&255;
  $328 = $324 | $327;
  HEAP32[$16>>2] = $328;
  $329 = $309 << 26;
  $330 = $309 >>> 6;
  $331 = $329 | $330;
  $332 = $309 << 21;
  $333 = $309 >>> 11;
  $334 = $332 | $333;
  $335 = $331 ^ $334;
  $336 = $309 << 7;
  $337 = $309 >>> 25;
  $338 = $336 | $337;
  $339 = $335 ^ $338;
  $340 = $309 & $254;
  $341 = $309 ^ -1;
  $342 = $199 & $341;
  $343 = $340 ^ $342;
  $344 = (($144) + 1508970993)|0;
  $345 = (($344) + ($328))|0;
  $346 = (($345) + ($343))|0;
  $347 = (($346) + ($339))|0;
  $348 = $310 << 30;
  $349 = $310 >>> 2;
  $350 = $348 | $349;
  $351 = $310 << 19;
  $352 = $310 >>> 13;
  $353 = $351 | $352;
  $354 = $350 ^ $353;
  $355 = $310 << 10;
  $356 = $310 >>> 22;
  $357 = $355 | $356;
  $358 = $354 ^ $357;
  $359 = $310 & $255;
  $360 = $310 & $200;
  $361 = $360 ^ $304;
  $362 = $361 ^ $359;
  $363 = (($358) + ($362))|0;
  $364 = (($347) + ($145))|0;
  $365 = (($363) + ($347))|0;
  $366 = ((($$014601486)) + 25|0);
  $367 = HEAP8[$325>>0]|0;
  $368 = $367&255;
  $369 = $368 << 24;
  $370 = ((($$014601486)) + 26|0);
  $371 = HEAP8[$366>>0]|0;
  $372 = $371&255;
  $373 = $372 << 16;
  $374 = $373 | $369;
  $375 = ((($$014601486)) + 27|0);
  $376 = HEAP8[$370>>0]|0;
  $377 = $376&255;
  $378 = $377 << 8;
  $379 = $374 | $378;
  $380 = ((($$014601486)) + 28|0);
  $381 = HEAP8[$375>>0]|0;
  $382 = $381&255;
  $383 = $379 | $382;
  HEAP32[$17>>2] = $383;
  $384 = $364 << 26;
  $385 = $364 >>> 6;
  $386 = $384 | $385;
  $387 = $364 << 21;
  $388 = $364 >>> 11;
  $389 = $387 | $388;
  $390 = $386 ^ $389;
  $391 = $364 << 7;
  $392 = $364 >>> 25;
  $393 = $391 | $392;
  $394 = $390 ^ $393;
  $395 = $364 & $309;
  $396 = $364 ^ -1;
  $397 = $254 & $396;
  $398 = $395 ^ $397;
  $399 = (($199) + -1841331548)|0;
  $400 = (($399) + ($383))|0;
  $401 = (($400) + ($398))|0;
  $402 = (($401) + ($394))|0;
  $403 = $365 << 30;
  $404 = $365 >>> 2;
  $405 = $403 | $404;
  $406 = $365 << 19;
  $407 = $365 >>> 13;
  $408 = $406 | $407;
  $409 = $405 ^ $408;
  $410 = $365 << 10;
  $411 = $365 >>> 22;
  $412 = $410 | $411;
  $413 = $409 ^ $412;
  $414 = $365 & $310;
  $415 = $365 & $255;
  $416 = $415 ^ $359;
  $417 = $416 ^ $414;
  $418 = (($413) + ($417))|0;
  $419 = (($402) + ($200))|0;
  $420 = (($418) + ($402))|0;
  $421 = ((($$014601486)) + 29|0);
  $422 = HEAP8[$380>>0]|0;
  $423 = $422&255;
  $424 = $423 << 24;
  $425 = ((($$014601486)) + 30|0);
  $426 = HEAP8[$421>>0]|0;
  $427 = $426&255;
  $428 = $427 << 16;
  $429 = $428 | $424;
  $430 = ((($$014601486)) + 31|0);
  $431 = HEAP8[$425>>0]|0;
  $432 = $431&255;
  $433 = $432 << 8;
  $434 = $429 | $433;
  $435 = ((($$014601486)) + 32|0);
  $436 = HEAP8[$430>>0]|0;
  $437 = $436&255;
  $438 = $434 | $437;
  HEAP32[$18>>2] = $438;
  $439 = $419 << 26;
  $440 = $419 >>> 6;
  $441 = $439 | $440;
  $442 = $419 << 21;
  $443 = $419 >>> 11;
  $444 = $442 | $443;
  $445 = $441 ^ $444;
  $446 = $419 << 7;
  $447 = $419 >>> 25;
  $448 = $446 | $447;
  $449 = $445 ^ $448;
  $450 = $419 & $364;
  $451 = $419 ^ -1;
  $452 = $309 & $451;
  $453 = $450 ^ $452;
  $454 = (($254) + -1424204075)|0;
  $455 = (($454) + ($438))|0;
  $456 = (($455) + ($453))|0;
  $457 = (($456) + ($449))|0;
  $458 = $420 << 30;
  $459 = $420 >>> 2;
  $460 = $458 | $459;
  $461 = $420 << 19;
  $462 = $420 >>> 13;
  $463 = $461 | $462;
  $464 = $460 ^ $463;
  $465 = $420 << 10;
  $466 = $420 >>> 22;
  $467 = $465 | $466;
  $468 = $464 ^ $467;
  $469 = $420 & $365;
  $470 = $420 & $310;
  $471 = $470 ^ $414;
  $472 = $471 ^ $469;
  $473 = (($468) + ($472))|0;
  $474 = (($457) + ($255))|0;
  $475 = (($473) + ($457))|0;
  $476 = ((($$014601486)) + 33|0);
  $477 = HEAP8[$435>>0]|0;
  $478 = $477&255;
  $479 = $478 << 24;
  $480 = ((($$014601486)) + 34|0);
  $481 = HEAP8[$476>>0]|0;
  $482 = $481&255;
  $483 = $482 << 16;
  $484 = $483 | $479;
  $485 = ((($$014601486)) + 35|0);
  $486 = HEAP8[$480>>0]|0;
  $487 = $486&255;
  $488 = $487 << 8;
  $489 = $484 | $488;
  $490 = ((($$014601486)) + 36|0);
  $491 = HEAP8[$485>>0]|0;
  $492 = $491&255;
  $493 = $489 | $492;
  HEAP32[$19>>2] = $493;
  $494 = $474 << 26;
  $495 = $474 >>> 6;
  $496 = $494 | $495;
  $497 = $474 << 21;
  $498 = $474 >>> 11;
  $499 = $497 | $498;
  $500 = $496 ^ $499;
  $501 = $474 << 7;
  $502 = $474 >>> 25;
  $503 = $501 | $502;
  $504 = $500 ^ $503;
  $505 = $474 & $419;
  $506 = $474 ^ -1;
  $507 = $364 & $506;
  $508 = $505 ^ $507;
  $509 = (($309) + -670586216)|0;
  $510 = (($509) + ($493))|0;
  $511 = (($510) + ($508))|0;
  $512 = (($511) + ($504))|0;
  $513 = $475 << 30;
  $514 = $475 >>> 2;
  $515 = $513 | $514;
  $516 = $475 << 19;
  $517 = $475 >>> 13;
  $518 = $516 | $517;
  $519 = $515 ^ $518;
  $520 = $475 << 10;
  $521 = $475 >>> 22;
  $522 = $520 | $521;
  $523 = $519 ^ $522;
  $524 = $475 & $420;
  $525 = $475 & $365;
  $526 = $525 ^ $469;
  $527 = $526 ^ $524;
  $528 = (($523) + ($527))|0;
  $529 = (($512) + ($310))|0;
  $530 = (($528) + ($512))|0;
  $531 = ((($$014601486)) + 37|0);
  $532 = HEAP8[$490>>0]|0;
  $533 = $532&255;
  $534 = $533 << 24;
  $535 = ((($$014601486)) + 38|0);
  $536 = HEAP8[$531>>0]|0;
  $537 = $536&255;
  $538 = $537 << 16;
  $539 = $538 | $534;
  $540 = ((($$014601486)) + 39|0);
  $541 = HEAP8[$535>>0]|0;
  $542 = $541&255;
  $543 = $542 << 8;
  $544 = $539 | $543;
  $545 = ((($$014601486)) + 40|0);
  $546 = HEAP8[$540>>0]|0;
  $547 = $546&255;
  $548 = $544 | $547;
  HEAP32[$20>>2] = $548;
  $549 = $529 << 26;
  $550 = $529 >>> 6;
  $551 = $549 | $550;
  $552 = $529 << 21;
  $553 = $529 >>> 11;
  $554 = $552 | $553;
  $555 = $551 ^ $554;
  $556 = $529 << 7;
  $557 = $529 >>> 25;
  $558 = $556 | $557;
  $559 = $555 ^ $558;
  $560 = $529 & $474;
  $561 = $529 ^ -1;
  $562 = $419 & $561;
  $563 = $560 ^ $562;
  $564 = (($548) + 310598401)|0;
  $565 = (($564) + ($364))|0;
  $566 = (($565) + ($563))|0;
  $567 = (($566) + ($559))|0;
  $568 = $530 << 30;
  $569 = $530 >>> 2;
  $570 = $568 | $569;
  $571 = $530 << 19;
  $572 = $530 >>> 13;
  $573 = $571 | $572;
  $574 = $570 ^ $573;
  $575 = $530 << 10;
  $576 = $530 >>> 22;
  $577 = $575 | $576;
  $578 = $574 ^ $577;
  $579 = $530 & $475;
  $580 = $530 & $420;
  $581 = $580 ^ $524;
  $582 = $581 ^ $579;
  $583 = (($578) + ($582))|0;
  $584 = (($567) + ($365))|0;
  $585 = (($583) + ($567))|0;
  $586 = ((($$014601486)) + 41|0);
  $587 = HEAP8[$545>>0]|0;
  $588 = $587&255;
  $589 = $588 << 24;
  $590 = ((($$014601486)) + 42|0);
  $591 = HEAP8[$586>>0]|0;
  $592 = $591&255;
  $593 = $592 << 16;
  $594 = $593 | $589;
  $595 = ((($$014601486)) + 43|0);
  $596 = HEAP8[$590>>0]|0;
  $597 = $596&255;
  $598 = $597 << 8;
  $599 = $594 | $598;
  $600 = ((($$014601486)) + 44|0);
  $601 = HEAP8[$595>>0]|0;
  $602 = $601&255;
  $603 = $599 | $602;
  HEAP32[$21>>2] = $603;
  $604 = $584 << 26;
  $605 = $584 >>> 6;
  $606 = $604 | $605;
  $607 = $584 << 21;
  $608 = $584 >>> 11;
  $609 = $607 | $608;
  $610 = $606 ^ $609;
  $611 = $584 << 7;
  $612 = $584 >>> 25;
  $613 = $611 | $612;
  $614 = $610 ^ $613;
  $615 = $584 & $529;
  $616 = $584 ^ -1;
  $617 = $474 & $616;
  $618 = $615 ^ $617;
  $619 = (($603) + 607225278)|0;
  $620 = (($619) + ($419))|0;
  $621 = (($620) + ($618))|0;
  $622 = (($621) + ($614))|0;
  $623 = $585 << 30;
  $624 = $585 >>> 2;
  $625 = $623 | $624;
  $626 = $585 << 19;
  $627 = $585 >>> 13;
  $628 = $626 | $627;
  $629 = $625 ^ $628;
  $630 = $585 << 10;
  $631 = $585 >>> 22;
  $632 = $630 | $631;
  $633 = $629 ^ $632;
  $634 = $585 & $530;
  $635 = $585 & $475;
  $636 = $635 ^ $579;
  $637 = $636 ^ $634;
  $638 = (($633) + ($637))|0;
  $639 = (($622) + ($420))|0;
  $640 = (($638) + ($622))|0;
  $641 = ((($$014601486)) + 45|0);
  $642 = HEAP8[$600>>0]|0;
  $643 = $642&255;
  $644 = $643 << 24;
  $645 = ((($$014601486)) + 46|0);
  $646 = HEAP8[$641>>0]|0;
  $647 = $646&255;
  $648 = $647 << 16;
  $649 = $648 | $644;
  $650 = ((($$014601486)) + 47|0);
  $651 = HEAP8[$645>>0]|0;
  $652 = $651&255;
  $653 = $652 << 8;
  $654 = $649 | $653;
  $655 = ((($$014601486)) + 48|0);
  $656 = HEAP8[$650>>0]|0;
  $657 = $656&255;
  $658 = $654 | $657;
  HEAP32[$22>>2] = $658;
  $659 = $639 << 26;
  $660 = $639 >>> 6;
  $661 = $659 | $660;
  $662 = $639 << 21;
  $663 = $639 >>> 11;
  $664 = $662 | $663;
  $665 = $661 ^ $664;
  $666 = $639 << 7;
  $667 = $639 >>> 25;
  $668 = $666 | $667;
  $669 = $665 ^ $668;
  $670 = $639 & $584;
  $671 = $639 ^ -1;
  $672 = $529 & $671;
  $673 = $670 ^ $672;
  $674 = (($658) + 1426881987)|0;
  $675 = (($674) + ($474))|0;
  $676 = (($675) + ($673))|0;
  $677 = (($676) + ($669))|0;
  $678 = $640 << 30;
  $679 = $640 >>> 2;
  $680 = $678 | $679;
  $681 = $640 << 19;
  $682 = $640 >>> 13;
  $683 = $681 | $682;
  $684 = $680 ^ $683;
  $685 = $640 << 10;
  $686 = $640 >>> 22;
  $687 = $685 | $686;
  $688 = $684 ^ $687;
  $689 = $640 & $585;
  $690 = $640 & $530;
  $691 = $690 ^ $634;
  $692 = $691 ^ $689;
  $693 = (($688) + ($692))|0;
  $694 = (($677) + ($475))|0;
  $695 = (($693) + ($677))|0;
  $696 = ((($$014601486)) + 49|0);
  $697 = HEAP8[$655>>0]|0;
  $698 = $697&255;
  $699 = $698 << 24;
  $700 = ((($$014601486)) + 50|0);
  $701 = HEAP8[$696>>0]|0;
  $702 = $701&255;
  $703 = $702 << 16;
  $704 = $703 | $699;
  $705 = ((($$014601486)) + 51|0);
  $706 = HEAP8[$700>>0]|0;
  $707 = $706&255;
  $708 = $707 << 8;
  $709 = $704 | $708;
  $710 = ((($$014601486)) + 52|0);
  $711 = HEAP8[$705>>0]|0;
  $712 = $711&255;
  $713 = $709 | $712;
  HEAP32[$23>>2] = $713;
  $714 = $694 << 26;
  $715 = $694 >>> 6;
  $716 = $714 | $715;
  $717 = $694 << 21;
  $718 = $694 >>> 11;
  $719 = $717 | $718;
  $720 = $716 ^ $719;
  $721 = $694 << 7;
  $722 = $694 >>> 25;
  $723 = $721 | $722;
  $724 = $720 ^ $723;
  $725 = $694 & $639;
  $726 = $694 ^ -1;
  $727 = $584 & $726;
  $728 = $725 ^ $727;
  $729 = (($713) + 1925078388)|0;
  $730 = (($729) + ($529))|0;
  $731 = (($730) + ($728))|0;
  $732 = (($731) + ($724))|0;
  $733 = $695 << 30;
  $734 = $695 >>> 2;
  $735 = $733 | $734;
  $736 = $695 << 19;
  $737 = $695 >>> 13;
  $738 = $736 | $737;
  $739 = $735 ^ $738;
  $740 = $695 << 10;
  $741 = $695 >>> 22;
  $742 = $740 | $741;
  $743 = $739 ^ $742;
  $744 = $695 & $640;
  $745 = $695 & $585;
  $746 = $745 ^ $689;
  $747 = $746 ^ $744;
  $748 = (($743) + ($747))|0;
  $749 = (($732) + ($530))|0;
  $750 = (($748) + ($732))|0;
  $751 = ((($$014601486)) + 53|0);
  $752 = HEAP8[$710>>0]|0;
  $753 = $752&255;
  $754 = $753 << 24;
  $755 = ((($$014601486)) + 54|0);
  $756 = HEAP8[$751>>0]|0;
  $757 = $756&255;
  $758 = $757 << 16;
  $759 = $758 | $754;
  $760 = ((($$014601486)) + 55|0);
  $761 = HEAP8[$755>>0]|0;
  $762 = $761&255;
  $763 = $762 << 8;
  $764 = $759 | $763;
  $765 = ((($$014601486)) + 56|0);
  $766 = HEAP8[$760>>0]|0;
  $767 = $766&255;
  $768 = $764 | $767;
  HEAP32[$24>>2] = $768;
  $769 = $749 << 26;
  $770 = $749 >>> 6;
  $771 = $769 | $770;
  $772 = $749 << 21;
  $773 = $749 >>> 11;
  $774 = $772 | $773;
  $775 = $771 ^ $774;
  $776 = $749 << 7;
  $777 = $749 >>> 25;
  $778 = $776 | $777;
  $779 = $775 ^ $778;
  $780 = $749 & $694;
  $781 = $749 ^ -1;
  $782 = $639 & $781;
  $783 = $780 ^ $782;
  $784 = (($768) + -2132889090)|0;
  $785 = (($784) + ($584))|0;
  $786 = (($785) + ($783))|0;
  $787 = (($786) + ($779))|0;
  $788 = $750 << 30;
  $789 = $750 >>> 2;
  $790 = $788 | $789;
  $791 = $750 << 19;
  $792 = $750 >>> 13;
  $793 = $791 | $792;
  $794 = $790 ^ $793;
  $795 = $750 << 10;
  $796 = $750 >>> 22;
  $797 = $795 | $796;
  $798 = $794 ^ $797;
  $799 = $750 & $695;
  $800 = $750 & $640;
  $801 = $800 ^ $744;
  $802 = $801 ^ $799;
  $803 = (($798) + ($802))|0;
  $804 = (($787) + ($585))|0;
  $805 = (($803) + ($787))|0;
  $806 = ((($$014601486)) + 57|0);
  $807 = HEAP8[$765>>0]|0;
  $808 = $807&255;
  $809 = $808 << 24;
  $810 = ((($$014601486)) + 58|0);
  $811 = HEAP8[$806>>0]|0;
  $812 = $811&255;
  $813 = $812 << 16;
  $814 = $813 | $809;
  $815 = ((($$014601486)) + 59|0);
  $816 = HEAP8[$810>>0]|0;
  $817 = $816&255;
  $818 = $817 << 8;
  $819 = $814 | $818;
  $820 = ((($$014601486)) + 60|0);
  $821 = HEAP8[$815>>0]|0;
  $822 = $821&255;
  $823 = $819 | $822;
  HEAP32[$25>>2] = $823;
  $824 = $804 << 26;
  $825 = $804 >>> 6;
  $826 = $824 | $825;
  $827 = $804 << 21;
  $828 = $804 >>> 11;
  $829 = $827 | $828;
  $830 = $826 ^ $829;
  $831 = $804 << 7;
  $832 = $804 >>> 25;
  $833 = $831 | $832;
  $834 = $830 ^ $833;
  $835 = $804 & $749;
  $836 = $804 ^ -1;
  $837 = $694 & $836;
  $838 = $835 ^ $837;
  $839 = (($823) + -1680079193)|0;
  $840 = (($839) + ($639))|0;
  $841 = (($840) + ($838))|0;
  $842 = (($841) + ($834))|0;
  $843 = $805 << 30;
  $844 = $805 >>> 2;
  $845 = $843 | $844;
  $846 = $805 << 19;
  $847 = $805 >>> 13;
  $848 = $846 | $847;
  $849 = $845 ^ $848;
  $850 = $805 << 10;
  $851 = $805 >>> 22;
  $852 = $850 | $851;
  $853 = $849 ^ $852;
  $854 = $805 & $750;
  $855 = $805 & $695;
  $856 = $855 ^ $799;
  $857 = $856 ^ $854;
  $858 = (($853) + ($857))|0;
  $859 = (($842) + ($640))|0;
  $860 = (($858) + ($842))|0;
  $861 = ((($$014601486)) + 61|0);
  $862 = HEAP8[$820>>0]|0;
  $863 = $862&255;
  $864 = $863 << 24;
  $865 = ((($$014601486)) + 62|0);
  $866 = HEAP8[$861>>0]|0;
  $867 = $866&255;
  $868 = $867 << 16;
  $869 = $868 | $864;
  $870 = ((($$014601486)) + 63|0);
  $871 = HEAP8[$865>>0]|0;
  $872 = $871&255;
  $873 = $872 << 8;
  $874 = $869 | $873;
  $875 = HEAP8[$870>>0]|0;
  $876 = $875&255;
  $877 = $874 | $876;
  HEAP32[$26>>2] = $877;
  $878 = $859 << 26;
  $879 = $859 >>> 6;
  $880 = $878 | $879;
  $881 = $859 << 21;
  $882 = $859 >>> 11;
  $883 = $881 | $882;
  $884 = $880 ^ $883;
  $885 = $859 << 7;
  $886 = $859 >>> 25;
  $887 = $885 | $886;
  $888 = $884 ^ $887;
  $889 = $859 & $804;
  $890 = $859 ^ -1;
  $891 = $749 & $890;
  $892 = $889 ^ $891;
  $893 = (($877) + -1046744716)|0;
  $894 = (($893) + ($694))|0;
  $895 = (($894) + ($892))|0;
  $896 = (($895) + ($888))|0;
  $897 = $860 << 30;
  $898 = $860 >>> 2;
  $899 = $897 | $898;
  $900 = $860 << 19;
  $901 = $860 >>> 13;
  $902 = $900 | $901;
  $903 = $899 ^ $902;
  $904 = $860 << 10;
  $905 = $860 >>> 22;
  $906 = $904 | $905;
  $907 = $903 ^ $906;
  $908 = $805 ^ $750;
  $909 = $860 & $908;
  $910 = $909 ^ $854;
  $911 = (($907) + ($910))|0;
  $912 = (($911) + ($896))|0;
  $913 = (($896) + ($695))|0;
  $$014621484 = 16;$$114641483 = $860;$$114661482 = $805;$$114681481 = $749;$$114701480 = $804;$$114721479 = $859;$$114741478 = $913;$$114761477 = $750;$$11485 = $912;
  while(1) {
   $914 = $$014621484 | 1;
   $915 = $914 & 9;
   $916 = (($3) + ($915<<2)|0);
   $917 = HEAP32[$916>>2]|0;
   $918 = $917 << 25;
   $919 = $917 >>> 7;
   $920 = $918 | $919;
   $921 = $917 << 14;
   $922 = $917 >>> 18;
   $923 = $921 | $922;
   $924 = $917 >>> 3;
   $925 = $923 ^ $924;
   $926 = $925 ^ $920;
   $927 = (($$014621484) + 14)|0;
   $928 = $927 & 14;
   $929 = (($3) + ($928<<2)|0);
   $930 = HEAP32[$929>>2]|0;
   $931 = $930 << 15;
   $932 = $930 >>> 17;
   $933 = $931 | $932;
   $934 = $930 << 13;
   $935 = $930 >>> 19;
   $936 = $934 | $935;
   $937 = $930 >>> 10;
   $938 = $936 ^ $937;
   $939 = $938 ^ $933;
   $940 = (($$014621484) + 9)|0;
   $941 = $940 & 9;
   $942 = (($3) + ($941<<2)|0);
   $943 = HEAP32[$942>>2]|0;
   $944 = $$014621484 & 8;
   $945 = (($3) + ($944<<2)|0);
   $946 = HEAP32[$945>>2]|0;
   $947 = (($946) + ($943))|0;
   $948 = (($947) + ($926))|0;
   $949 = (($948) + ($939))|0;
   HEAP32[$945>>2] = $949;
   $950 = $$114741478 << 26;
   $951 = $$114741478 >>> 6;
   $952 = $950 | $951;
   $953 = $$114741478 << 21;
   $954 = $$114741478 >>> 11;
   $955 = $953 | $954;
   $956 = $952 ^ $955;
   $957 = $$114741478 << 7;
   $958 = $$114741478 >>> 25;
   $959 = $957 | $958;
   $960 = $956 ^ $959;
   $961 = (($960) + ($$114681481))|0;
   $962 = $$114721479 & $$114741478;
   $963 = $$114741478 ^ -1;
   $964 = $$114701480 & $963;
   $965 = $964 ^ $962;
   $966 = (($961) + ($965))|0;
   $967 = (40876 + ($$014621484<<2)|0);
   $968 = HEAP32[$967>>2]|0;
   $969 = (($966) + ($968))|0;
   $970 = (($969) + ($949))|0;
   $971 = $$11485 << 30;
   $972 = $$11485 >>> 2;
   $973 = $971 | $972;
   $974 = $$11485 << 19;
   $975 = $$11485 >>> 13;
   $976 = $974 | $975;
   $977 = $973 ^ $976;
   $978 = $$11485 << 10;
   $979 = $$11485 >>> 22;
   $980 = $978 | $979;
   $981 = $977 ^ $980;
   $982 = $$11485 & $$114641483;
   $983 = $$11485 ^ $$114641483;
   $984 = $983 & $$114661482;
   $985 = $984 ^ $982;
   $986 = (($981) + ($985))|0;
   $987 = (($970) + ($$114761477))|0;
   $988 = (($986) + ($970))|0;
   $989 = (($914) + 1)|0;
   $990 = $989 & 10;
   $991 = (($3) + ($990<<2)|0);
   $992 = HEAP32[$991>>2]|0;
   $993 = $992 << 25;
   $994 = $992 >>> 7;
   $995 = $993 | $994;
   $996 = $992 << 14;
   $997 = $992 >>> 18;
   $998 = $996 | $997;
   $999 = $992 >>> 3;
   $1000 = $998 ^ $999;
   $1001 = $1000 ^ $995;
   $1002 = (($914) + 14)|0;
   $1003 = $1002 & 15;
   $1004 = (($3) + ($1003<<2)|0);
   $1005 = HEAP32[$1004>>2]|0;
   $1006 = $1005 << 15;
   $1007 = $1005 >>> 17;
   $1008 = $1006 | $1007;
   $1009 = $1005 << 13;
   $1010 = $1005 >>> 19;
   $1011 = $1009 | $1010;
   $1012 = $1005 >>> 10;
   $1013 = $1011 ^ $1012;
   $1014 = $1013 ^ $1008;
   $1015 = (($914) + 9)|0;
   $1016 = $1015 & 10;
   $1017 = (($3) + ($1016<<2)|0);
   $1018 = HEAP32[$1017>>2]|0;
   $1019 = HEAP32[$916>>2]|0;
   $1020 = (($1019) + ($1018))|0;
   $1021 = (($1020) + ($1001))|0;
   $1022 = (($1021) + ($1014))|0;
   HEAP32[$916>>2] = $1022;
   $1023 = $987 << 26;
   $1024 = $987 >>> 6;
   $1025 = $1023 | $1024;
   $1026 = $987 << 21;
   $1027 = $987 >>> 11;
   $1028 = $1026 | $1027;
   $1029 = $1025 ^ $1028;
   $1030 = $987 << 7;
   $1031 = $987 >>> 25;
   $1032 = $1030 | $1031;
   $1033 = $1029 ^ $1032;
   $1034 = $987 & $$114741478;
   $1035 = $987 ^ -1;
   $1036 = $$114721479 & $1035;
   $1037 = $1034 ^ $1036;
   $1038 = (40876 + ($914<<2)|0);
   $1039 = HEAP32[$1038>>2]|0;
   $1040 = (($1039) + ($$114701480))|0;
   $1041 = (($1040) + ($1037))|0;
   $1042 = (($1041) + ($1033))|0;
   $1043 = (($1042) + ($1022))|0;
   $1044 = $988 << 30;
   $1045 = $988 >>> 2;
   $1046 = $1044 | $1045;
   $1047 = $988 << 19;
   $1048 = $988 >>> 13;
   $1049 = $1047 | $1048;
   $1050 = $1046 ^ $1049;
   $1051 = $988 << 10;
   $1052 = $988 >>> 22;
   $1053 = $1051 | $1052;
   $1054 = $1050 ^ $1053;
   $1055 = $988 & $$11485;
   $1056 = $988 & $$114641483;
   $1057 = $1056 ^ $982;
   $1058 = $1057 ^ $1055;
   $1059 = (($1054) + ($1058))|0;
   $1060 = (($1043) + ($$114661482))|0;
   $1061 = (($1059) + ($1043))|0;
   $1062 = $$014621484 | 2;
   $1063 = $944 | 3;
   $1064 = (($3) + ($1063<<2)|0);
   $1065 = HEAP32[$1064>>2]|0;
   $1066 = $1065 << 25;
   $1067 = $1065 >>> 7;
   $1068 = $1066 | $1067;
   $1069 = $1065 << 14;
   $1070 = $1065 >>> 18;
   $1071 = $1069 | $1070;
   $1072 = $1065 >>> 3;
   $1073 = $1071 ^ $1072;
   $1074 = $1073 ^ $1068;
   $1075 = (($1062) + 14)|0;
   $1076 = $1075 & 8;
   $1077 = (($3) + ($1076<<2)|0);
   $1078 = HEAP32[$1077>>2]|0;
   $1079 = $1078 << 15;
   $1080 = $1078 >>> 17;
   $1081 = $1079 | $1080;
   $1082 = $1078 << 13;
   $1083 = $1078 >>> 19;
   $1084 = $1082 | $1083;
   $1085 = $1078 >>> 10;
   $1086 = $1084 ^ $1085;
   $1087 = $1086 ^ $1081;
   $1088 = (($1062) + 9)|0;
   $1089 = $1088 & 11;
   $1090 = (($3) + ($1089<<2)|0);
   $1091 = HEAP32[$1090>>2]|0;
   $1092 = $1062 & 10;
   $1093 = (($3) + ($1092<<2)|0);
   $1094 = HEAP32[$1093>>2]|0;
   $1095 = (($1094) + ($1091))|0;
   $1096 = (($1095) + ($1074))|0;
   $1097 = (($1096) + ($1087))|0;
   HEAP32[$1093>>2] = $1097;
   $1098 = $1060 << 26;
   $1099 = $1060 >>> 6;
   $1100 = $1098 | $1099;
   $1101 = $1060 << 21;
   $1102 = $1060 >>> 11;
   $1103 = $1101 | $1102;
   $1104 = $1100 ^ $1103;
   $1105 = $1060 << 7;
   $1106 = $1060 >>> 25;
   $1107 = $1105 | $1106;
   $1108 = $1104 ^ $1107;
   $1109 = $1060 & $987;
   $1110 = $1060 ^ -1;
   $1111 = $$114741478 & $1110;
   $1112 = $1109 ^ $1111;
   $1113 = (40876 + ($1062<<2)|0);
   $1114 = HEAP32[$1113>>2]|0;
   $1115 = (($1114) + ($$114721479))|0;
   $1116 = (($1115) + ($1097))|0;
   $1117 = (($1116) + ($1112))|0;
   $1118 = (($1117) + ($1108))|0;
   $1119 = $1061 << 30;
   $1120 = $1061 >>> 2;
   $1121 = $1119 | $1120;
   $1122 = $1061 << 19;
   $1123 = $1061 >>> 13;
   $1124 = $1122 | $1123;
   $1125 = $1121 ^ $1124;
   $1126 = $1061 << 10;
   $1127 = $1061 >>> 22;
   $1128 = $1126 | $1127;
   $1129 = $1125 ^ $1128;
   $1130 = $1061 & $988;
   $1131 = $1061 & $$11485;
   $1132 = $1131 ^ $1055;
   $1133 = $1132 ^ $1130;
   $1134 = (($1129) + ($1133))|0;
   $1135 = (($1118) + ($$114641483))|0;
   $1136 = (($1134) + ($1118))|0;
   $1137 = $$014621484 | 3;
   $1138 = (($1137) + 1)|0;
   $1139 = $1138 & 12;
   $1140 = (($3) + ($1139<<2)|0);
   $1141 = HEAP32[$1140>>2]|0;
   $1142 = $1141 << 25;
   $1143 = $1141 >>> 7;
   $1144 = $1142 | $1143;
   $1145 = $1141 << 14;
   $1146 = $1141 >>> 18;
   $1147 = $1145 | $1146;
   $1148 = $1141 >>> 3;
   $1149 = $1147 ^ $1148;
   $1150 = $1149 ^ $1144;
   $1151 = (($1137) + 14)|0;
   $1152 = $1151 & 9;
   $1153 = (($3) + ($1152<<2)|0);
   $1154 = HEAP32[$1153>>2]|0;
   $1155 = $1154 << 15;
   $1156 = $1154 >>> 17;
   $1157 = $1155 | $1156;
   $1158 = $1154 << 13;
   $1159 = $1154 >>> 19;
   $1160 = $1158 | $1159;
   $1161 = $1154 >>> 10;
   $1162 = $1160 ^ $1161;
   $1163 = $1162 ^ $1157;
   $1164 = (($1137) + 9)|0;
   $1165 = $1164 & 12;
   $1166 = (($3) + ($1165<<2)|0);
   $1167 = HEAP32[$1166>>2]|0;
   $1168 = $1137 & 11;
   $1169 = (($3) + ($1168<<2)|0);
   $1170 = HEAP32[$1169>>2]|0;
   $1171 = (($1170) + ($1167))|0;
   $1172 = (($1171) + ($1150))|0;
   $1173 = (($1172) + ($1163))|0;
   HEAP32[$1169>>2] = $1173;
   $1174 = $1135 << 26;
   $1175 = $1135 >>> 6;
   $1176 = $1174 | $1175;
   $1177 = $1135 << 21;
   $1178 = $1135 >>> 11;
   $1179 = $1177 | $1178;
   $1180 = $1176 ^ $1179;
   $1181 = $1135 << 7;
   $1182 = $1135 >>> 25;
   $1183 = $1181 | $1182;
   $1184 = $1180 ^ $1183;
   $1185 = $1135 & $1060;
   $1186 = $1135 ^ -1;
   $1187 = $987 & $1186;
   $1188 = $1185 ^ $1187;
   $1189 = (40876 + ($1137<<2)|0);
   $1190 = HEAP32[$1189>>2]|0;
   $1191 = (($1190) + ($$114741478))|0;
   $1192 = (($1191) + ($1173))|0;
   $1193 = (($1192) + ($1188))|0;
   $1194 = (($1193) + ($1184))|0;
   $1195 = $1136 << 30;
   $1196 = $1136 >>> 2;
   $1197 = $1195 | $1196;
   $1198 = $1136 << 19;
   $1199 = $1136 >>> 13;
   $1200 = $1198 | $1199;
   $1201 = $1197 ^ $1200;
   $1202 = $1136 << 10;
   $1203 = $1136 >>> 22;
   $1204 = $1202 | $1203;
   $1205 = $1201 ^ $1204;
   $1206 = $1136 & $1061;
   $1207 = $1136 & $988;
   $1208 = $1207 ^ $1130;
   $1209 = $1208 ^ $1206;
   $1210 = (($1205) + ($1209))|0;
   $1211 = (($1194) + ($$11485))|0;
   $1212 = (($1210) + ($1194))|0;
   $1213 = $$014621484 | 4;
   $1214 = $944 | 5;
   $1215 = (($3) + ($1214<<2)|0);
   $1216 = HEAP32[$1215>>2]|0;
   $1217 = $1216 << 25;
   $1218 = $1216 >>> 7;
   $1219 = $1217 | $1218;
   $1220 = $1216 << 14;
   $1221 = $1216 >>> 18;
   $1222 = $1220 | $1221;
   $1223 = $1216 >>> 3;
   $1224 = $1222 ^ $1223;
   $1225 = $1224 ^ $1219;
   $1226 = (($1213) + 14)|0;
   $1227 = $1226 & 10;
   $1228 = (($3) + ($1227<<2)|0);
   $1229 = HEAP32[$1228>>2]|0;
   $1230 = $1229 << 15;
   $1231 = $1229 >>> 17;
   $1232 = $1230 | $1231;
   $1233 = $1229 << 13;
   $1234 = $1229 >>> 19;
   $1235 = $1233 | $1234;
   $1236 = $1229 >>> 10;
   $1237 = $1235 ^ $1236;
   $1238 = $1237 ^ $1232;
   $1239 = (($1213) + 9)|0;
   $1240 = $1239 & 13;
   $1241 = (($3) + ($1240<<2)|0);
   $1242 = HEAP32[$1241>>2]|0;
   $1243 = $1213 & 12;
   $1244 = (($3) + ($1243<<2)|0);
   $1245 = HEAP32[$1244>>2]|0;
   $1246 = (($1245) + ($1242))|0;
   $1247 = (($1246) + ($1225))|0;
   $1248 = (($1247) + ($1238))|0;
   HEAP32[$1244>>2] = $1248;
   $1249 = $1211 << 26;
   $1250 = $1211 >>> 6;
   $1251 = $1249 | $1250;
   $1252 = $1211 << 21;
   $1253 = $1211 >>> 11;
   $1254 = $1252 | $1253;
   $1255 = $1251 ^ $1254;
   $1256 = $1211 << 7;
   $1257 = $1211 >>> 25;
   $1258 = $1256 | $1257;
   $1259 = $1255 ^ $1258;
   $1260 = $1211 & $1135;
   $1261 = $1211 ^ -1;
   $1262 = $1060 & $1261;
   $1263 = $1260 ^ $1262;
   $1264 = (40876 + ($1213<<2)|0);
   $1265 = HEAP32[$1264>>2]|0;
   $1266 = (($1265) + ($987))|0;
   $1267 = (($1266) + ($1248))|0;
   $1268 = (($1267) + ($1263))|0;
   $1269 = (($1268) + ($1259))|0;
   $1270 = $1212 << 30;
   $1271 = $1212 >>> 2;
   $1272 = $1270 | $1271;
   $1273 = $1212 << 19;
   $1274 = $1212 >>> 13;
   $1275 = $1273 | $1274;
   $1276 = $1272 ^ $1275;
   $1277 = $1212 << 10;
   $1278 = $1212 >>> 22;
   $1279 = $1277 | $1278;
   $1280 = $1276 ^ $1279;
   $1281 = $1212 & $1136;
   $1282 = $1212 & $1061;
   $1283 = $1282 ^ $1206;
   $1284 = $1283 ^ $1281;
   $1285 = (($1280) + ($1284))|0;
   $1286 = (($1269) + ($988))|0;
   $1287 = (($1285) + ($1269))|0;
   $1288 = $$014621484 | 5;
   $1289 = (($1288) + 1)|0;
   $1290 = $1289 & 14;
   $1291 = (($3) + ($1290<<2)|0);
   $1292 = HEAP32[$1291>>2]|0;
   $1293 = $1292 << 25;
   $1294 = $1292 >>> 7;
   $1295 = $1293 | $1294;
   $1296 = $1292 << 14;
   $1297 = $1292 >>> 18;
   $1298 = $1296 | $1297;
   $1299 = $1292 >>> 3;
   $1300 = $1298 ^ $1299;
   $1301 = $1300 ^ $1295;
   $1302 = (($1288) + 14)|0;
   $1303 = $1302 & 11;
   $1304 = (($3) + ($1303<<2)|0);
   $1305 = HEAP32[$1304>>2]|0;
   $1306 = $1305 << 15;
   $1307 = $1305 >>> 17;
   $1308 = $1306 | $1307;
   $1309 = $1305 << 13;
   $1310 = $1305 >>> 19;
   $1311 = $1309 | $1310;
   $1312 = $1305 >>> 10;
   $1313 = $1311 ^ $1312;
   $1314 = $1313 ^ $1308;
   $1315 = (($1288) + 9)|0;
   $1316 = $1315 & 14;
   $1317 = (($3) + ($1316<<2)|0);
   $1318 = HEAP32[$1317>>2]|0;
   $1319 = $1288 & 13;
   $1320 = (($3) + ($1319<<2)|0);
   $1321 = HEAP32[$1320>>2]|0;
   $1322 = (($1321) + ($1318))|0;
   $1323 = (($1322) + ($1301))|0;
   $1324 = (($1323) + ($1314))|0;
   HEAP32[$1320>>2] = $1324;
   $1325 = $1286 << 26;
   $1326 = $1286 >>> 6;
   $1327 = $1325 | $1326;
   $1328 = $1286 << 21;
   $1329 = $1286 >>> 11;
   $1330 = $1328 | $1329;
   $1331 = $1327 ^ $1330;
   $1332 = $1286 << 7;
   $1333 = $1286 >>> 25;
   $1334 = $1332 | $1333;
   $1335 = $1331 ^ $1334;
   $1336 = $1286 & $1211;
   $1337 = $1286 ^ -1;
   $1338 = $1135 & $1337;
   $1339 = $1336 ^ $1338;
   $1340 = (40876 + ($1288<<2)|0);
   $1341 = HEAP32[$1340>>2]|0;
   $1342 = (($1341) + ($1060))|0;
   $1343 = (($1342) + ($1324))|0;
   $1344 = (($1343) + ($1339))|0;
   $1345 = (($1344) + ($1335))|0;
   $1346 = $1287 << 30;
   $1347 = $1287 >>> 2;
   $1348 = $1346 | $1347;
   $1349 = $1287 << 19;
   $1350 = $1287 >>> 13;
   $1351 = $1349 | $1350;
   $1352 = $1348 ^ $1351;
   $1353 = $1287 << 10;
   $1354 = $1287 >>> 22;
   $1355 = $1353 | $1354;
   $1356 = $1352 ^ $1355;
   $1357 = $1287 & $1212;
   $1358 = $1287 & $1136;
   $1359 = $1358 ^ $1281;
   $1360 = $1359 ^ $1357;
   $1361 = (($1356) + ($1360))|0;
   $1362 = (($1345) + ($1061))|0;
   $1363 = (($1361) + ($1345))|0;
   $1364 = $$014621484 | 6;
   $1365 = $944 | 7;
   $1366 = (($3) + ($1365<<2)|0);
   $1367 = HEAP32[$1366>>2]|0;
   $1368 = $1367 << 25;
   $1369 = $1367 >>> 7;
   $1370 = $1368 | $1369;
   $1371 = $1367 << 14;
   $1372 = $1367 >>> 18;
   $1373 = $1371 | $1372;
   $1374 = $1367 >>> 3;
   $1375 = $1373 ^ $1374;
   $1376 = $1375 ^ $1370;
   $1377 = (($1364) + 14)|0;
   $1378 = $1377 & 12;
   $1379 = (($3) + ($1378<<2)|0);
   $1380 = HEAP32[$1379>>2]|0;
   $1381 = $1380 << 15;
   $1382 = $1380 >>> 17;
   $1383 = $1381 | $1382;
   $1384 = $1380 << 13;
   $1385 = $1380 >>> 19;
   $1386 = $1384 | $1385;
   $1387 = $1380 >>> 10;
   $1388 = $1386 ^ $1387;
   $1389 = $1388 ^ $1383;
   $1390 = (($1364) + 9)|0;
   $1391 = $1390 & 15;
   $1392 = (($3) + ($1391<<2)|0);
   $1393 = HEAP32[$1392>>2]|0;
   $1394 = $1364 & 14;
   $1395 = (($3) + ($1394<<2)|0);
   $1396 = HEAP32[$1395>>2]|0;
   $1397 = (($1396) + ($1393))|0;
   $1398 = (($1397) + ($1376))|0;
   $1399 = (($1398) + ($1389))|0;
   HEAP32[$1395>>2] = $1399;
   $1400 = $1362 << 26;
   $1401 = $1362 >>> 6;
   $1402 = $1400 | $1401;
   $1403 = $1362 << 21;
   $1404 = $1362 >>> 11;
   $1405 = $1403 | $1404;
   $1406 = $1402 ^ $1405;
   $1407 = $1362 << 7;
   $1408 = $1362 >>> 25;
   $1409 = $1407 | $1408;
   $1410 = $1406 ^ $1409;
   $1411 = $1362 & $1286;
   $1412 = $1362 ^ -1;
   $1413 = $1211 & $1412;
   $1414 = $1411 ^ $1413;
   $1415 = (40876 + ($1364<<2)|0);
   $1416 = HEAP32[$1415>>2]|0;
   $1417 = (($1416) + ($1135))|0;
   $1418 = (($1417) + ($1399))|0;
   $1419 = (($1418) + ($1414))|0;
   $1420 = (($1419) + ($1410))|0;
   $1421 = $1363 << 30;
   $1422 = $1363 >>> 2;
   $1423 = $1421 | $1422;
   $1424 = $1363 << 19;
   $1425 = $1363 >>> 13;
   $1426 = $1424 | $1425;
   $1427 = $1423 ^ $1426;
   $1428 = $1363 << 10;
   $1429 = $1363 >>> 22;
   $1430 = $1428 | $1429;
   $1431 = $1427 ^ $1430;
   $1432 = $1363 & $1287;
   $1433 = $1363 & $1212;
   $1434 = $1433 ^ $1357;
   $1435 = $1434 ^ $1432;
   $1436 = (($1431) + ($1435))|0;
   $1437 = (($1420) + ($1136))|0;
   $1438 = (($1436) + ($1420))|0;
   $1439 = $$014621484 | 7;
   $1440 = (($1439) + 1)|0;
   $1441 = $1440 & 8;
   $1442 = (($3) + ($1441<<2)|0);
   $1443 = HEAP32[$1442>>2]|0;
   $1444 = $1443 << 25;
   $1445 = $1443 >>> 7;
   $1446 = $1444 | $1445;
   $1447 = $1443 << 14;
   $1448 = $1443 >>> 18;
   $1449 = $1447 | $1448;
   $1450 = $1443 >>> 3;
   $1451 = $1449 ^ $1450;
   $1452 = $1451 ^ $1446;
   $1453 = (($1439) + 14)|0;
   $1454 = $1453 & 13;
   $1455 = (($3) + ($1454<<2)|0);
   $1456 = HEAP32[$1455>>2]|0;
   $1457 = $1456 << 15;
   $1458 = $1456 >>> 17;
   $1459 = $1457 | $1458;
   $1460 = $1456 << 13;
   $1461 = $1456 >>> 19;
   $1462 = $1460 | $1461;
   $1463 = $1456 >>> 10;
   $1464 = $1462 ^ $1463;
   $1465 = $1464 ^ $1459;
   $1466 = (($1439) + 9)|0;
   $1467 = $1466 & 8;
   $1468 = (($3) + ($1467<<2)|0);
   $1469 = HEAP32[$1468>>2]|0;
   $1470 = $1439 & 15;
   $1471 = (($3) + ($1470<<2)|0);
   $1472 = HEAP32[$1471>>2]|0;
   $1473 = (($1472) + ($1469))|0;
   $1474 = (($1473) + ($1452))|0;
   $1475 = (($1474) + ($1465))|0;
   HEAP32[$1471>>2] = $1475;
   $1476 = $1437 << 26;
   $1477 = $1437 >>> 6;
   $1478 = $1476 | $1477;
   $1479 = $1437 << 21;
   $1480 = $1437 >>> 11;
   $1481 = $1479 | $1480;
   $1482 = $1478 ^ $1481;
   $1483 = $1437 << 7;
   $1484 = $1437 >>> 25;
   $1485 = $1483 | $1484;
   $1486 = $1482 ^ $1485;
   $1487 = $1437 & $1362;
   $1488 = $1437 ^ -1;
   $1489 = $1286 & $1488;
   $1490 = $1487 ^ $1489;
   $1491 = (40876 + ($1439<<2)|0);
   $1492 = HEAP32[$1491>>2]|0;
   $1493 = (($1492) + ($1211))|0;
   $1494 = (($1493) + ($1475))|0;
   $1495 = (($1494) + ($1490))|0;
   $1496 = (($1495) + ($1486))|0;
   $1497 = $1438 << 30;
   $1498 = $1438 >>> 2;
   $1499 = $1497 | $1498;
   $1500 = $1438 << 19;
   $1501 = $1438 >>> 13;
   $1502 = $1500 | $1501;
   $1503 = $1499 ^ $1502;
   $1504 = $1438 << 10;
   $1505 = $1438 >>> 22;
   $1506 = $1504 | $1505;
   $1507 = $1503 ^ $1506;
   $1508 = $1363 ^ $1287;
   $1509 = $1438 & $1508;
   $1510 = $1509 ^ $1432;
   $1511 = (($1507) + ($1510))|0;
   $1512 = (($1496) + ($1212))|0;
   $1513 = (($1511) + ($1496))|0;
   $1514 = (($$014621484) + 8)|0;
   $1515 = ($1514|0)<(64);
   if ($1515) {
    $$014621484 = $1514;$$114641483 = $1438;$$114661482 = $1363;$$114681481 = $1286;$$114701480 = $1362;$$114721479 = $1437;$$114741478 = $1512;$$114761477 = $1287;$$11485 = $1513;
   } else {
    break;
   }
  }
  $1516 = (($$in) + -1)|0;
  $1517 = ((($$014601486)) + 64|0);
  $1518 = HEAP32[$0>>2]|0;
  $1519 = (($1518) + ($1513))|0;
  HEAP32[$0>>2] = $1519;
  $1520 = HEAP32[$5>>2]|0;
  $1521 = (($1520) + ($1438))|0;
  HEAP32[$5>>2] = $1521;
  $1522 = HEAP32[$6>>2]|0;
  $1523 = (($1522) + ($1363))|0;
  HEAP32[$6>>2] = $1523;
  $1524 = HEAP32[$7>>2]|0;
  $1525 = (($1524) + ($1287))|0;
  HEAP32[$7>>2] = $1525;
  $1526 = HEAP32[$8>>2]|0;
  $1527 = (($1526) + ($1512))|0;
  HEAP32[$8>>2] = $1527;
  $1528 = HEAP32[$9>>2]|0;
  $1529 = (($1528) + ($1437))|0;
  HEAP32[$9>>2] = $1529;
  $1530 = HEAP32[$10>>2]|0;
  $1531 = (($1530) + ($1362))|0;
  HEAP32[$10>>2] = $1531;
  $1532 = HEAP32[$11>>2]|0;
  $1533 = (($1532) + ($1286))|0;
  HEAP32[$11>>2] = $1533;
  $1534 = ($1516|0)==(0);
  if ($1534) {
   break;
  } else {
   $$014601486 = $1517;$$in = $1516;$28 = $1519;$29 = $1521;$31 = $1527;$43 = $1529;$46 = $1531;$60 = $1523;$84 = $1533;$89 = $1525;
  }
 }
 STACKTOP = sp;return;
}
function _OPENSSL_sk_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _CRYPTO_free($3,83252,0);
 _CRYPTO_free($0,83252,0);
 return;
}
function _OPENSSL_sk_new_null() {
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(20,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (_CRYPTO_zalloc(16,83252,0)|0);
  $3 = ((($0)) + 4|0);
  HEAP32[$3>>2] = $2;
  $4 = ($2|0)==(0|0);
  if (!($4)) {
   $5 = ((($0)) + 16|0);
   HEAP32[$5>>2] = 0;
   $6 = ((($0)) + 12|0);
   HEAP32[$6>>2] = 4;
   $$0$i = $0;
   return ($$0$i|0);
  }
 }
 _CRYPTO_free($0,83252,0);
 $$0$i = 0;
 return ($$0$i|0);
}
function _OPENSSL_sk_new($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_CRYPTO_zalloc(20,83252,0)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (_CRYPTO_zalloc(16,83252,0)|0);
  $4 = ((($1)) + 4|0);
  HEAP32[$4>>2] = $3;
  $5 = ($3|0)==(0|0);
  if (!($5)) {
   $6 = ((($1)) + 16|0);
   HEAP32[$6>>2] = $0;
   $7 = ((($1)) + 12|0);
   HEAP32[$7>>2] = 4;
   $$0 = $1;
   return ($$0|0);
  }
 }
 _CRYPTO_free($1,83252,0);
 $$0 = 0;
 return ($$0|0);
}
function _OPENSSL_sk_delete_ptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017 = 0, $$09 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$09 = 0;
  return ($$09|0);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $$017 = 0;
 while(1) {
  $6 = (($5) + ($$017<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==($1|0);
  if ($8) {
   break;
  }
  $19 = (($$017) + 1)|0;
  $20 = ($2|0)>($19|0);
  if ($20) {
   $$017 = $19;
  } else {
   $$09 = 0;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$09|0);
 }
 $9 = ($$017|0)<(0);
 if ($9) {
  $$09 = 0;
  return ($$09|0);
 }
 $10 = (($2) + -1)|0;
 $11 = ($10|0)==($$017|0);
 if ($11) {
  $18 = $2;
 } else {
  $12 = (($$017) + 1)|0;
  $13 = (($5) + ($12<<2)|0);
  $14 = (($2) - ($$017))|0;
  $15 = $14 << 2;
  $16 = (($15) + -4)|0;
  _memmove(($6|0),($13|0),($16|0))|0;
  $$pre$i = HEAP32[$0>>2]|0;
  $18 = $$pre$i;
 }
 $17 = (($18) + -1)|0;
 HEAP32[$0>>2] = $17;
 $$09 = $1;
 return ($$09|0);
}
function _OPENSSL_sk_delete($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)<(0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)>($1|0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($4) + -1)|0;
 $11 = ($10|0)==($1|0);
 if ($11) {
  $18 = $4;
 } else {
  $12 = (($4) - ($1))|0;
  $13 = $12 << 2;
  $14 = (($13) + -4)|0;
  $15 = (($1) + 1)|0;
  $16 = (($7) + ($15<<2)|0);
  _memmove(($8|0),($16|0),($14|0))|0;
  $$pre = HEAP32[$0>>2]|0;
  $18 = $$pre;
 }
 $17 = (($18) + -1)|0;
 HEAP32[$0>>2] = $17;
 $$0 = $9;
 return ($$0|0);
}
function _OPENSSL_sk_find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$018$i = 0, $$019$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $1;
 $3 = ($0|0)==(0|0);
 L1: do {
  if ($3) {
   $$018$i = -1;
  } else {
   $4 = ((($0)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = ($7|0)>(0);
    if (!($8)) {
     $$018$i = -1;
     break;
    }
    $9 = ((($0)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $$019$i = 0;
    while(1) {
     $11 = (($10) + ($$019$i<<2)|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==($1|0);
     if ($13) {
      $$018$i = $$019$i;
      break L1;
     }
     $14 = (($$019$i) + 1)|0;
     $15 = ($14|0)<($7|0);
     if ($15) {
      $$019$i = $14;
     } else {
      $$018$i = -1;
      break L1;
     }
    }
   }
   $16 = ((($0)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$0>>2]|0;
    _qsort($20,$21,4,$5);
    HEAP32[$16>>2] = 1;
   }
   $22 = ($1|0)==(0|0);
   if ($22) {
    $$018$i = -1;
   } else {
    $23 = ((($0)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$0>>2]|0;
    $26 = HEAP32[$4>>2]|0;
    $27 = (_OBJ_bsearch_ex_($2,$24,$25,4,$26,2)|0);
    $28 = ($27|0)==(0|0);
    if ($28) {
     $$018$i = -1;
    } else {
     $29 = HEAP32[$23>>2]|0;
     $30 = $27;
     $31 = (($30) - ($29))|0;
     $32 = $31 >> 2;
     $$018$i = $32;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$018$i|0);
}
function _OPENSSL_sk_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1$i = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre43$i = 0, $$pre44$i = 0, $$sink2$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond41$i = 0, $or$cond42$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$1$i = 0;
  return ($$1$i|0);
 }
 $4 = ($2|0)<(0);
 $5 = ($2|0)==(2147483647);
 $or$cond41$i = $4 | $5;
 if ($or$cond41$i) {
  $$1$i = 0;
  return ($$1$i|0);
 }
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($2) + 1)|0;
 $9 = ($7>>>0)>($8>>>0);
 if ($9) {
  $$phi$trans$insert$i = ((($0)) + 4|0);
  $$pre43$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $20 = $$pre43$i;$21 = $2;
  label = 8;
 } else {
  $10 = $7 << 1;
  $11 = ($10>>>0)<($7>>>0);
  $12 = ($10>>>0)>(1073741823);
  $or$cond42$i = $11 | $12;
  if ($or$cond42$i) {
   $$1$i = 0;
   return ($$1$i|0);
  }
  $13 = ((($0)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $7 << 3;
  $16 = (_CRYPTO_realloc($14,$15,83252,0)|0);
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$1$i = 0;
   return ($$1$i|0);
  }
  HEAP32[$13>>2] = $16;
  HEAP32[$6>>2] = $10;
  $$pre$i = HEAP32[$0>>2]|0;
  $18 = ($$pre$i|0)>($2|0);
  if ($18) {
   $22 = (($16) + ($8<<2)|0);
   $23 = (($16) + ($2<<2)|0);
   $24 = (($$pre$i) - ($2))|0;
   $25 = $24 << 2;
   _memmove(($22|0),($23|0),($25|0))|0;
   $26 = HEAP32[$13>>2]|0;
   $27 = (($26) + ($2<<2)|0);
   $$pre44$i = HEAP32[$0>>2]|0;
   $$sink2$i = $27;$29 = $$pre44$i;
  } else {
   $20 = $16;$21 = $$pre$i;
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $19 = (($20) + ($21<<2)|0);
  $$sink2$i = $19;$29 = $21;
 }
 HEAP32[$$sink2$i>>2] = $1;
 $28 = (($29) + 1)|0;
 HEAP32[$0>>2] = $28;
 $30 = ((($0)) + 8|0);
 HEAP32[$30>>2] = 0;
 $$1$i = $28;
 return ($$1$i|0);
}
function _OPENSSL_sk_pop($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)<(1);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (($2) + -1)|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$0>>2] = $4;
 $$0 = $8;
 return ($$0|0);
}
function _OPENSSL_sk_pop_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$09 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(0);
 $5 = ((($0)) + 4|0);
 if ($4) {
  $$09 = 0;$14 = $3;
  while(1) {
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($$09<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $12 = $14;
   } else {
    FUNCTION_TABLE_vi[$1 & 63]($8);
    $$pre = HEAP32[$0>>2]|0;
    $12 = $$pre;
   }
   $10 = (($$09) + 1)|0;
   $11 = ($10|0)<($12|0);
   if ($11) {
    $$09 = $10;$14 = $12;
   } else {
    break;
   }
  }
 }
 $13 = HEAP32[$5>>2]|0;
 _CRYPTO_free($13,83252,0);
 _CRYPTO_free($0,83252,0);
 return;
}
function _OPENSSL_sk_num($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _OPENSSL_sk_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)<(0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)>($1|0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $$0 = $9;
 return ($$0|0);
}
function _OPENSSL_sk_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)<(0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)>($1|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[$7>>2]|0;
 $11 = (($10) + ($1<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $$0 = $12;
 return ($$0|0);
}
function _CRYPTO_THREAD_lock_new() {
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_CRYPTO_zalloc(4,83252,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1;
 $$0 = $0;
 return ($$0|0);
}
function _CRYPTO_THREAD_read_lock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  return 1;
 } else {
  _OPENSSL_die(80824,83252,0);
  // unreachable;
 }
 return (0)|0;
}
function _CRYPTO_THREAD_write_lock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  return 1;
 } else {
  _OPENSSL_die(80824,83252,0);
  // unreachable;
 }
 return (0)|0;
}
function _CRYPTO_THREAD_unlock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  return 1;
 } else {
  _OPENSSL_die(80824,83252,0);
  // unreachable;
 }
 return (0)|0;
}
function _CRYPTO_THREAD_lock_free($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 HEAP32[$0>>2] = 0;
 _CRYPTO_free($0,83252,0);
 return;
}
function _CRYPTO_THREAD_run_once($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  return 1;
 }
 FUNCTION_TABLE_v[$1 & 31]();
 HEAP32[$0>>2] = 1;
 return 1;
}
function _CRYPTO_THREAD_init_local($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[20398]|0;
 $3 = ($2>>>0)>(255);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (81596 + ($2<<2)|0);
 $5 = (($2) + 1)|0;
 HEAP32[20398] = $5;
 HEAP32[$0>>2] = $2;
 HEAP32[$4>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _CRYPTO_THREAD_get_local($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>(255);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (81596 + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $$0 = $4;
 return ($$0|0);
}
function _CRYPTO_THREAD_set_local($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>(255);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (81596 + ($2<<2)|0);
 HEAP32[$4>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _CRYPTO_THREAD_cleanup_local($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 257;
 return 1;
}
function _CRYPTO_THREAD_get_current_id() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _CRYPTO_THREAD_compare_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 $3 = $2&1;
 return ($3|0);
}
function _CRYPTO_atomic_add($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1))|0;
 HEAP32[$0>>2] = $5;
 HEAP32[$2>>2] = $5;
 return 1;
}
function _X509_signature_dump($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $$021 = 0;
 while(1) {
  $6 = ($$021|0)<($3|0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = (($$021|0) % 18)&-1;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = (_BIO_write($0,80869,1)|0);
   $10 = ($9|0)<(1);
   if ($10) {
    $$0 = 0;
    label = 8;
    break;
   }
   $11 = (_BIO_indent($0,$2,$2)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0 = 0;
    label = 8;
    break;
   }
  }
  $13 = (($5) + ($$021)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (($$021) + 1)|0;
  $17 = ($16|0)==($3|0);
  $18 = $17 ? 83252 : 80871;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  $19 = (_BIO_printf($0,80873,$vararg_buffer)|0);
  $20 = ($19|0)<(1);
  if ($20) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $$021 = $16;
  }
 }
 if ((label|0) == 7) {
  $21 = (_BIO_write($0,80869,1)|0);
  $22 = ($21|0)==(1);
  $$ = $22&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _X509_get_default_cert_area() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (80880|0);
}
function _X509_ATTRIBUTE_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ASN1_item_free($0,41132);
 return;
}
function _pubkey_cb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 3:  {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  _EVP_PKEY_free($6);
  $$1 = 1;
  return ($$1|0);
  break;
 }
 case 5:  {
  $7 = HEAP32[$1>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  _EVP_PKEY_free($9);
  (_ERR_set_mark()|0);
  $10 = (_x509_pubkey_decode($8,$7)|0);
  $11 = ($10|0)==(-1);
  if ($11) {
   $$1 = 0;
   return ($$1|0);
  }
  (_ERR_pop_to_mark()|0);
  $$1 = 1;
  return ($$1|0);
  break;
 }
 default: {
  $$1 = 1;
  return ($$1|0);
 }
 }
 return (0)|0;
}
function _x509_pubkey_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_EVP_PKEY_new()|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _ERR_put_error(11,148,65,0,0);
  $$0 = -1;
  return ($$0|0);
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_OBJ_obj2nid($5)|0);
 $7 = (_EVP_PKEY_set_type($2,$6)|0);
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   _ERR_put_error(11,148,111,0,0);
  } else {
   $9 = ((($2)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    _ERR_put_error(11,148,124,0,0);
    break;
   }
   $14 = (FUNCTION_TABLE_iii[$12 & 63]($2,$1)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    _ERR_put_error(11,148,125,0,0);
    break;
   }
   HEAP32[$0>>2] = $2;
   $$0 = 1;
   return ($$0|0);
  }
 } while(0);
 _EVP_PKEY_free($2);
 $$0 = 0;
 return ($$0|0);
}
function _X509_PUBKEY_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_ASN1_item_new(41200)|0);
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    _ERR_put_error(11,120,111,0,0);
    break;
   }
   $8 = ((($6)) + 24|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    _ERR_put_error(11,120,124,0,0);
    break;
   }
   $11 = (FUNCTION_TABLE_iii[$9 & 63]($3,$1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    _ERR_put_error(11,120,126,0,0);
    break;
   }
   $13 = HEAP32[$0>>2]|0;
   _ASN1_item_free($13,41200);
   HEAP32[$0>>2] = $3;
   $14 = ((($3)) + 8|0);
   HEAP32[$14>>2] = $1;
   (_EVP_PKEY_up_ref($1)|0);
   $$0 = 1;
   return ($$0|0);
  }
 } while(0);
 _ASN1_item_free($3,41200);
 $$0 = 0;
 return ($$0|0);
}
function _i2d_RSA_PUBKEY($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_EVP_PKEY_new()|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _ERR_put_error(13,165,65,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_EVP_PKEY_set1_RSA($4,$0)|0);
 HEAP32[$2>>2] = 0;
 $6 = (_X509_PUBKEY_set($2,$4)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0$i = 0;
 } else {
  $8 = HEAP32[$2>>2]|0;
  $9 = (_ASN1_item_i2d($8,$1,41200)|0);
  $10 = HEAP32[$2>>2]|0;
  _ASN1_item_free($10,41200);
  $$0$i = $9;
 }
 _EVP_PKEY_free($4);
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _X509_PUBKEY_set0_param($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$0>>2]|0;
 $7 = (_X509_ALGOR_set0($6,$1,$2,$3)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ($4|0)==(0|0);
 if ($9) {
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 _CRYPTO_free($13,83252,0);
 $14 = HEAP32[$10>>2]|0;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $4;
 HEAP32[$14>>2] = $5;
 $16 = ((($14)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -16;
 $19 = $18 | 8;
 HEAP32[$16>>2] = $19;
 $$0 = 1;
 return ($$0|0);
}
function _X509_PUBKEY_get0_param($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$4>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
 }
 $8 = ($1|0)==(0|0);
 if (!($8)) {
  $9 = ((($4)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$9>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$2>>2] = $14;
 }
 $15 = ($3|0)==(0|0);
 if ($15) {
  return 1;
 }
 $16 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $16;
 return 1;
}
function _X509V3_add_value($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$024 = 0, $$1 = 0, $$122 = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$021 = 0;
  label = 3;
 } else {
  $4 = (_CRYPTO_strdup($0,83252,0)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$1 = 0;$$122 = 0;$20 = 0;
  } else {
   $$021 = $4;
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ($1|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = (_CRYPTO_strdup($1,83252,0)|0);
    $8 = ($7|0)==(0|0);
    if ($8) {
     $$1 = 0;$$122 = $$021;$20 = 0;
     break;
    } else {
     $$0 = $7;
    }
   }
   $9 = (_CRYPTO_malloc(12,83252,0)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$1 = $$0;$$122 = $$021;$20 = 0;
   } else {
    $11 = HEAP32[$2>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $13 = (_OPENSSL_sk_new_null()|0);
     HEAP32[$2>>2] = $13;
     $14 = ($13|0)==(0|0);
     if ($14) {
      $$1 = $$0;$$122 = $$021;$20 = $9;
      break;
     } else {
      $$pre$phiZ2D = $2;
     }
    } else {
     $$pre$phiZ2D = $2;
    }
    HEAP32[$9>>2] = 0;
    $15 = ((($9)) + 4|0);
    HEAP32[$15>>2] = $$021;
    $16 = ((($9)) + 8|0);
    HEAP32[$16>>2] = $$0;
    $17 = HEAP32[$$pre$phiZ2D>>2]|0;
    $18 = (_OPENSSL_sk_push($17,$9)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $$1 = $$0;$$122 = $$021;$20 = $9;
    } else {
     $$024 = 1;
     return ($$024|0);
    }
   }
  }
 } while(0);
 _ERR_put_error(34,105,65,0,0);
 _CRYPTO_free($20,83252,0);
 _CRYPTO_free($$122,83252,0);
 _CRYPTO_free($$1,83252,0);
 $$024 = 0;
 return ($$024|0);
}
function _X509V3_conf_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _CRYPTO_free($3,83252,0);
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _CRYPTO_free($5,83252,0);
 $6 = HEAP32[$0>>2]|0;
 _CRYPTO_free($6,83252,0);
 _CRYPTO_free($0,83252,0);
 return;
}
function _X509V3_get_value_bool($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = (_strcmp($3,80956)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    $7 = (_strcmp($3,80961)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = (_strcmp($3,80966)|0);
     $10 = ($9|0)==(0);
     if (!($10)) {
      $11 = (_strcmp($3,80968)|0);
      $12 = ($11|0)==(0);
      if (!($12)) {
       $13 = (_strcmp($3,80970)|0);
       $14 = ($13|0)==(0);
       if (!($14)) {
        $15 = (_strcmp($3,80974)|0);
        $16 = ($15|0)==(0);
        if (!($16)) {
         $17 = (_strcmp($3,80950)|0);
         $18 = ($17|0)==(0);
         if (!($18)) {
          $19 = (_strcmp($3,80978)|0);
          $20 = ($19|0)==(0);
          if (!($20)) {
           $21 = (_strcmp($3,80984)|0);
           $22 = ($21|0)==(0);
           if (!($22)) {
            $23 = (_strcmp($3,80986)|0);
            $24 = ($23|0)==(0);
            if (!($24)) {
             $25 = (_strcmp($3,80988)|0);
             $26 = ($25|0)==(0);
             if (!($26)) {
              $27 = (_strcmp($3,80991)|0);
              $28 = ($27|0)==(0);
              if (!($28)) {
               break;
              }
             }
            }
           }
          }
         }
         HEAP32[$1>>2] = 0;
         $$0 = 1;
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
     }
    }
   }
   HEAP32[$1>>2] = 255;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _ERR_put_error(34,110,104,0,0);
 $29 = HEAP32[$0>>2]|0;
 $30 = ((($0)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer>>2] = 80994;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $29;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 81003;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $31;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 81010;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $32;
 _ERR_add_error_data(6,$vararg_buffer);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _X509V3_parse_list($0) {
 $0 = $0|0;
 var $$$019$i88 = 0, $$0 = 0, $$0$i = 0, $$0$i59 = 0, $$0$i72 = 0, $$0$i85 = 0, $$01926$i = 0, $$01926$i54 = 0, $$01926$i67 = 0, $$01926$i80 = 0, $$020$i90 = 0, $$046 = 0, $$047 = 0, $$049 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$pn$i = 0, $$pn$i58 = 0;
 var $$pn$i71 = 0, $$pn$i84 = 0, $$pre$i = 0, $$pre$i60 = 0, $$pre$i73 = 0, $$pre$i86 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $cond$i = 0, $cond$i56 = 0, $cond$i69 = 0, $cond$i82 = 0, $cond25$i = 0, $cond25$i53 = 0, $cond25$i66 = 0, $cond25$i79 = 0, $or$cond = 0, $or$cond94 = 0, $or$cond95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = 0;
 $2 = (_CRYPTO_strdup($0,83252,0)|0);
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   _ERR_put_error(34,109,65,0,0);
  } else {
   $$0 = 1;$$047 = 0;$$049 = $2;$$050 = $2;
   L3: while(1) {
    $4 = HEAP8[$$049>>0]|0;
    switch ($4<<24>>24) {
    case 10: case 13: case 0:  {
     label = 38;
     break L3;
     break;
    }
    default: {
    }
    }
    L6: do {
     switch ($$0|0) {
     case 1:  {
      switch ($4<<24>>24) {
      case 58:  {
       HEAP8[$$049>>0] = 0;
       $5 = HEAP8[$$050>>0]|0;
       $cond25$i = ($5<<24>>24)==(0);
       if ($cond25$i) {
        label = 14;
        break L3;
       } else {
        $$01926$i = $$050;$7 = $5;
       }
       while(1) {
        $6 = $7&255;
        $8 = (_isspace($6)|0);
        $9 = ($8|0)==(0);
        if ($9) {
         break;
        }
        $10 = ((($$01926$i)) + 1|0);
        $11 = HEAP8[$10>>0]|0;
        $cond$i = ($11<<24>>24)==(0);
        if ($cond$i) {
         label = 14;
         break L3;
        } else {
         $$01926$i = $10;$7 = $11;
        }
       }
       $12 = (_strlen($$01926$i)|0);
       $13 = (($$01926$i) + ($12)|0);
       $$pn$i = $13;
       while(1) {
        $$0$i = ((($$pn$i)) + -1|0);
        $14 = ($$0$i|0)==($$01926$i|0);
        if ($14) {
         $19 = $7;
         break;
        }
        $15 = HEAP8[$$0$i>>0]|0;
        $16 = $15&255;
        $17 = (_isspace($16)|0);
        $18 = ($17|0)==(0);
        if ($18) {
         label = 12;
         break;
        } else {
         $$pn$i = $$0$i;
        }
       }
       if ((label|0) == 12) {
        label = 0;
        HEAP8[$$pn$i>>0] = 0;
        $$pre$i = HEAP8[$$01926$i>>0]|0;
        $19 = $$pre$i;
       }
       $20 = ($19<<24>>24)==(0);
       $21 = ($$01926$i|0)==(0|0);
       $or$cond = $21 | $20;
       if ($or$cond) {
        label = 14;
        break L3;
       }
       $22 = ((($$049)) + 1|0);
       $$1 = 2;$$148 = $$01926$i;$$151 = $22;
       break L6;
       break;
      }
      case 44:  {
       HEAP8[$$049>>0] = 0;
       $23 = HEAP8[$$050>>0]|0;
       $cond25$i53 = ($23<<24>>24)==(0);
       if ($cond25$i53) {
        label = 24;
        break L3;
       } else {
        $$01926$i54 = $$050;$25 = $23;
       }
       while(1) {
        $24 = $25&255;
        $26 = (_isspace($24)|0);
        $27 = ($26|0)==(0);
        if ($27) {
         break;
        }
        $28 = ((($$01926$i54)) + 1|0);
        $29 = HEAP8[$28>>0]|0;
        $cond$i56 = ($29<<24>>24)==(0);
        if ($cond$i56) {
         label = 24;
         break L3;
        } else {
         $$01926$i54 = $28;$25 = $29;
        }
       }
       $30 = (_strlen($$01926$i54)|0);
       $31 = (($$01926$i54) + ($30)|0);
       $$pn$i58 = $31;
       while(1) {
        $$0$i59 = ((($$pn$i58)) + -1|0);
        $32 = ($$0$i59|0)==($$01926$i54|0);
        if ($32) {
         $37 = $25;
         break;
        }
        $33 = HEAP8[$$0$i59>>0]|0;
        $34 = $33&255;
        $35 = (_isspace($34)|0);
        $36 = ($35|0)==(0);
        if ($36) {
         label = 22;
         break;
        } else {
         $$pn$i58 = $$0$i59;
        }
       }
       if ((label|0) == 22) {
        label = 0;
        HEAP8[$$pn$i58>>0] = 0;
        $$pre$i60 = HEAP8[$$01926$i54>>0]|0;
        $37 = $$pre$i60;
       }
       $38 = ($37<<24>>24)==(0);
       $39 = ($$01926$i54|0)==(0|0);
       $or$cond94 = $39 | $38;
       if ($or$cond94) {
        label = 24;
        break L3;
       }
       $40 = ((($$049)) + 1|0);
       (_X509V3_add_value($$01926$i54,0,$1)|0);
       $$1 = 1;$$148 = $$01926$i54;$$151 = $40;
       break L6;
       break;
      }
      default: {
       $$1 = 1;$$148 = $$047;$$151 = $$050;
       break L6;
      }
      }
      break;
     }
     case 2:  {
      $41 = ($4<<24>>24)==(44);
      if ($41) {
       HEAP8[$$049>>0] = 0;
       $42 = HEAP8[$$050>>0]|0;
       $cond25$i66 = ($42<<24>>24)==(0);
       if ($cond25$i66) {
        label = 35;
        break L3;
       } else {
        $$01926$i67 = $$050;$44 = $42;
       }
       while(1) {
        $43 = $44&255;
        $45 = (_isspace($43)|0);
        $46 = ($45|0)==(0);
        if ($46) {
         break;
        }
        $47 = ((($$01926$i67)) + 1|0);
        $48 = HEAP8[$47>>0]|0;
        $cond$i69 = ($48<<24>>24)==(0);
        if ($cond$i69) {
         label = 35;
         break L3;
        } else {
         $$01926$i67 = $47;$44 = $48;
        }
       }
       $49 = (_strlen($$01926$i67)|0);
       $50 = (($$01926$i67) + ($49)|0);
       $$pn$i71 = $50;
       while(1) {
        $$0$i72 = ((($$pn$i71)) + -1|0);
        $51 = ($$0$i72|0)==($$01926$i67|0);
        if ($51) {
         $56 = $44;
         break;
        }
        $52 = HEAP8[$$0$i72>>0]|0;
        $53 = $52&255;
        $54 = (_isspace($53)|0);
        $55 = ($54|0)==(0);
        if ($55) {
         label = 33;
         break;
        } else {
         $$pn$i71 = $$0$i72;
        }
       }
       if ((label|0) == 33) {
        label = 0;
        HEAP8[$$pn$i71>>0] = 0;
        $$pre$i73 = HEAP8[$$01926$i67>>0]|0;
        $56 = $$pre$i73;
       }
       $57 = ($56<<24>>24)==(0);
       $58 = ($$01926$i67|0)==(0|0);
       $or$cond95 = $58 | $57;
       if ($or$cond95) {
        label = 35;
        break L3;
       }
       (_X509V3_add_value($$047,$$01926$i67,$1)|0);
       $59 = ((($$049)) + 1|0);
       $$1 = 1;$$148 = 0;$$151 = $59;
      } else {
       $$1 = 2;$$148 = $$047;$$151 = $$050;
      }
      break;
     }
     default: {
      $$1 = $$0;$$148 = $$047;$$151 = $$050;
     }
     }
    } while(0);
    $60 = ((($$049)) + 1|0);
    $$0 = $$1;$$047 = $$148;$$049 = $60;$$050 = $$151;
   }
   if ((label|0) == 14) {
    _ERR_put_error(34,109,108,0,0);
    break;
   }
   else if ((label|0) == 24) {
    _ERR_put_error(34,109,108,0,0);
    break;
   }
   else if ((label|0) == 35) {
    _ERR_put_error(34,109,109,0,0);
    break;
   }
   else if ((label|0) == 38) {
    $61 = ($$0|0)==(2);
    $62 = HEAP8[$$050>>0]|0;
    $cond25$i79 = ($62<<24>>24)==(0);
    L49: do {
     if ($cond25$i79) {
      $$020$i90 = 0;
     } else {
      $$01926$i80 = $$050;$64 = $62;
      while(1) {
       $63 = $64&255;
       $65 = (_isspace($63)|0);
       $66 = ($65|0)==(0);
       if ($66) {
        break;
       }
       $67 = ((($$01926$i80)) + 1|0);
       $68 = HEAP8[$67>>0]|0;
       $cond$i82 = ($68<<24>>24)==(0);
       if ($cond$i82) {
        $$020$i90 = 0;
        break L49;
       } else {
        $$01926$i80 = $67;$64 = $68;
       }
      }
      $69 = (_strlen($$01926$i80)|0);
      $70 = (($$01926$i80) + ($69)|0);
      $$pn$i84 = $70;
      while(1) {
       $$0$i85 = ((($$pn$i84)) + -1|0);
       $71 = ($$0$i85|0)==($$01926$i80|0);
       if ($71) {
        $76 = $64;
        break;
       }
       $72 = HEAP8[$$0$i85>>0]|0;
       $73 = $72&255;
       $74 = (_isspace($73)|0);
       $75 = ($74|0)==(0);
       if ($75) {
        label = 44;
        break;
       } else {
        $$pn$i84 = $$0$i85;
       }
      }
      if ((label|0) == 44) {
       HEAP8[$$pn$i84>>0] = 0;
       $$pre$i86 = HEAP8[$$01926$i80>>0]|0;
       $76 = $$pre$i86;
      }
      $77 = ($76<<24>>24)==(0);
      $$$019$i88 = $77 ? 0 : $$01926$i80;
      $$020$i90 = $$$019$i88;
     }
    } while(0);
    $78 = ($$020$i90|0)!=(0|0);
    do {
     if ($61) {
      if ($78) {
       (_X509V3_add_value($$047,$$020$i90,$1)|0);
       break;
      } else {
       _ERR_put_error(34,109,109,0,0);
       break L1;
      }
     } else {
      if ($78) {
       (_X509V3_add_value($$020$i90,0,$1)|0);
       break;
      } else {
       _ERR_put_error(34,109,108,0,0);
       break L1;
      }
     }
    } while(0);
    _CRYPTO_free($2,83252,0);
    $79 = HEAP32[$1>>2]|0;
    $$046 = $79;
    STACKTOP = sp;return ($$046|0);
   }
  }
 } while(0);
 _CRYPTO_free($2,83252,0);
 $80 = HEAP32[$1>>2]|0;
 _OPENSSL_sk_pop_free($80,27);
 $$046 = 0;
 STACKTOP = sp;return ($$046|0);
}
function _rsasignjs_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _randombytes_stir(); //@line 12 "rsasign.c"
 return; //@line 13 "rsasign.c"
}
function _rsasignjs_public_key_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 450; //@line 16 "rsasign.c"
}
function _rsasignjs_secret_key_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1700; //@line 20 "rsasign.c"
}
function _rsasignjs_signature_bytes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 256; //@line 24 "rsasign.c"
}
function _rsasignjs_keypair($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $7 = (_BN_new()|0); //@line 31 "rsasign.c"
 $5 = $7; //@line 31 "rsasign.c"
 $8 = (_RSA_new()|0); //@line 32 "rsasign.c"
 $6 = $8; //@line 32 "rsasign.c"
 $9 = $5; //@line 34 "rsasign.c"
 (_BN_add_word($9,65537)|0); //@line 34 "rsasign.c"
 $10 = $6; //@line 36 "rsasign.c"
 $11 = $5; //@line 36 "rsasign.c"
 $12 = (_RSA_generate_key_ex($10,2048,$11,0)|0); //@line 36 "rsasign.c"
 $13 = ($12|0)!=(1); //@line 36 "rsasign.c"
 if ($13) {
  $2 = 1; //@line 37 "rsasign.c"
  $18 = $2; //@line 47 "rsasign.c"
  STACKTOP = sp;return ($18|0); //@line 47 "rsasign.c"
 } else {
  $14 = $6; //@line 40 "rsasign.c"
  (_i2d_RSA_PUBKEY($14,$3)|0); //@line 40 "rsasign.c"
  $15 = $6; //@line 41 "rsasign.c"
  (_i2d_RSAPrivateKey($15,$4)|0); //@line 41 "rsasign.c"
  $16 = $6; //@line 43 "rsasign.c"
  _RSA_free($16); //@line 43 "rsasign.c"
  $17 = $5; //@line 44 "rsasign.c"
  _BN_free($17); //@line 44 "rsasign.c"
  $2 = 0; //@line 46 "rsasign.c"
  $18 = $2; //@line 47 "rsasign.c"
  STACKTOP = sp;return ($18|0); //@line 47 "rsasign.c"
 }
 return (0)|0;
}
function _rsasignjs_sign($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $9 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 152|0;
 $13 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 HEAP32[$9>>2] = $3;
 $10 = $4;
 $15 = (_RSA_new()|0); //@line 56 "rsasign.c"
 HEAP32[$11>>2] = $15; //@line 56 "rsasign.c"
 $16 = $10; //@line 58 "rsasign.c"
 $17 = (_d2i_RSAPrivateKey($11,$9,$16)|0); //@line 58 "rsasign.c"
 $18 = ($17|0)==(0|0); //@line 58 "rsasign.c"
 if ($18) {
  $5 = -1; //@line 59 "rsasign.c"
  $26 = $5; //@line 80 "rsasign.c"
  STACKTOP = sp;return ($26|0); //@line 80 "rsasign.c"
 } else {
  (_SHA256_Init($13)|0); //@line 64 "rsasign.c"
  $19 = $7; //@line 65 "rsasign.c"
  $20 = $8; //@line 65 "rsasign.c"
  (_SHA256_Update($13,$19,$20)|0); //@line 65 "rsasign.c"
  (_SHA256_Final($12,$13)|0); //@line 66 "rsasign.c"
  $21 = $6; //@line 72 "rsasign.c"
  $22 = HEAP32[$11>>2]|0; //@line 74 "rsasign.c"
  $23 = (_RSA_sign(672,$12,32,$21,0,$22)|0); //@line 68 "rsasign.c"
  $14 = $23; //@line 68 "rsasign.c"
  $24 = HEAP32[$11>>2]|0; //@line 77 "rsasign.c"
  _RSA_free($24); //@line 77 "rsasign.c"
  $25 = $14; //@line 79 "rsasign.c"
  $5 = $25; //@line 79 "rsasign.c"
  $26 = $5; //@line 80 "rsasign.c"
  STACKTOP = sp;return ($26|0); //@line 80 "rsasign.c"
 }
 return (0)|0;
}
function _rsasignjs_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $9 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 152|0;
 $13 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 HEAP32[$9>>2] = $3;
 $10 = $4;
 $15 = (_RSA_new()|0); //@line 89 "rsasign.c"
 HEAP32[$11>>2] = $15; //@line 89 "rsasign.c"
 $16 = $10; //@line 91 "rsasign.c"
 $17 = (_d2i_RSAPublicKey($11,$9,$16)|0); //@line 91 "rsasign.c"
 $18 = ($17|0)==(0|0); //@line 91 "rsasign.c"
 if ($18) {
  $5 = -1; //@line 92 "rsasign.c"
  $26 = $5; //@line 113 "rsasign.c"
  STACKTOP = sp;return ($26|0); //@line 113 "rsasign.c"
 } else {
  (_SHA256_Init($13)|0); //@line 97 "rsasign.c"
  $19 = $7; //@line 98 "rsasign.c"
  $20 = $8; //@line 98 "rsasign.c"
  (_SHA256_Update($13,$19,$20)|0); //@line 98 "rsasign.c"
  (_SHA256_Final($12,$13)|0); //@line 99 "rsasign.c"
  $21 = $6; //@line 105 "rsasign.c"
  $22 = HEAP32[$11>>2]|0; //@line 107 "rsasign.c"
  $23 = (_RSA_verify(672,$12,32,$21,256,$22)|0); //@line 101 "rsasign.c"
  $14 = $23; //@line 101 "rsasign.c"
  $24 = HEAP32[$11>>2]|0; //@line 110 "rsasign.c"
  _RSA_free($24); //@line 110 "rsasign.c"
  $25 = $14; //@line 112 "rsasign.c"
  $5 = $25; //@line 112 "rsasign.c"
  $26 = $5; //@line 113 "rsasign.c"
  STACKTOP = sp;return ($26|0); //@line 113 "rsasign.c"
 }
 return (0)|0;
}
function _RAND_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = +0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _randombytes_stir(); //@line 117 "rsasign.c"
 STACKTOP = sp;return; //@line 118 "rsasign.c"
}
function _RAND_bytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $0;
 $3 = $1;
 $4 = $2; //@line 121 "rsasign.c"
 $5 = $3; //@line 121 "rsasign.c"
 _randombytes_buf($4,$5); //@line 121 "rsasign.c"
 STACKTOP = sp;return 1; //@line 122 "rsasign.c"
}
function _RAND_status() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1; //@line 134 "rsasign.c"
}
function _rand_cleanup_int() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return; //@line 137 "rsasign.c"
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (82620|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_29()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_29() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (41292|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01824 = 0, $$01926 = 0, $$01926$in = 0, $$020 = 0, $$025 = 0, $$lcssa = 0, $$lcssa22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = $4&255;
  $6 = ($4<<24>>24)==(0);
  $7 = HEAP8[$1>>0]|0;
  $8 = $7&255;
  L3: do {
   if ($6) {
    $$lcssa = $8;$$lcssa22 = $5;
   } else {
    $$01824 = $0;$$01926$in = $2;$$025 = $1;$12 = $4;$22 = $8;$23 = $5;$9 = $7;
    while(1) {
     $$01926 = (($$01926$in) + -1)|0;
     $10 = ($9<<24>>24)!=(0);
     $11 = ($$01926|0)!=(0);
     $or$cond = $11 & $10;
     $13 = ($12<<24>>24)==($9<<24>>24);
     $or$cond21 = $13 & $or$cond;
     if (!($or$cond21)) {
      $$lcssa = $22;$$lcssa22 = $23;
      break L3;
     }
     $14 = ((($$01824)) + 1|0);
     $15 = ((($$025)) + 1|0);
     $16 = HEAP8[$14>>0]|0;
     $17 = $16&255;
     $18 = ($16<<24>>24)==(0);
     $19 = HEAP8[$15>>0]|0;
     $20 = $19&255;
     if ($18) {
      $$lcssa = $20;$$lcssa22 = $17;
      break;
     } else {
      $$01824 = $14;$$01926$in = $$01926;$$025 = $15;$12 = $16;$22 = $20;$23 = $17;$9 = $19;
     }
    }
   }
  } while(0);
  $21 = (($$lcssa22) - ($$lcssa))|0;
  $$020 = $21;
 }
 return ($$020|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$2 = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$42 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $43 = ($42|0)==(1);
    $or$cond = $41 & $43;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     }
    } else {
     $46 = ($$2|0)<(2);
     if (!($46)) {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169 = $60;$$2 = $49;$42 = $59;
      continue;
     }
    }
    $47 = (_pntz($5)|0);
    _shr($5,$47);
    $48 = (($47) + ($$2))|0;
    $$pre$pre = HEAP32[$5>>2]|0;
    $$pre76 = (($$169) + ($12)|0);
    $$169 = $$pre76;$$2 = $48;$42 = $$pre$pre;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02932 = $0;$$03031 = $3;$$033 = 1;$14 = $0;
   while(1) {
    $8 = (($$02932) + ($7)|0);
    $9 = (($$03031) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 63]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 63]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$033;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 63]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($$033) + 1)|0;
    $22 = (($5) + ($$033<<2)|0);
    if ($20) {
     HEAP32[$22>>2] = $13;
     $23 = (($$03031) + -1)|0;
     $$029$be = $13;$$030$be = $23;
    } else {
     HEAP32[$22>>2] = $8;
     $$029$be = $8;$$030$be = $9;
    }
    $24 = ($$030$be|0)>(1);
    if (!($24)) {
     $$0$lcssa = $21;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02932 = $$029$be;$$03031 = $$030$be;$$033 = $21;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 63]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 63]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 63]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 63]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $$ = $9 ? 0 : $8;
  return ($$|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $5 & 1;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     _memcpy(($10|0),($9|0),($8|0))|0;
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      _memcpy(($12|0),($15|0),($8|0))|0;
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strtox($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 108|0);
 HEAP32[$10>>2] = $9;
 $11 = ($1|0)!=(0);
 $12 = ($9|0)>($1|0);
 $or$cond = $11 & $12;
 $13 = (($6) + ($1)|0);
 $$sink = $or$cond ? $13 : $4;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((81019) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)!=(0|0);
      if ($54) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if (!($54)) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((81019) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $93 = ($92|0)<(0);
        $94 = $93 << 31 >> 31;
        $95 = $92 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165167 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$262 = $103;$264 = $102;
       } else {
        $$1165167 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$262 = $292;$264 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165168 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (81275 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((81019) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((81019) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$157 = 0;$159 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$157 = 0;$159 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $158 = ($157>>>0)>($153>>>0);
      $160 = ($159>>>0)>($152>>>0);
      $161 = ($157|0)==($153|0);
      $162 = $161 & $160;
      $163 = $158 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$293 = $159;$294 = $157;
       label = 72;
       break;
      } else {
       $164 = $159;$165 = $157;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((81019) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((81019) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((81019) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$208 = $296;$210 = $295;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((81019) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7198 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((81019) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((81019) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $294;$264 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre29$pre = 0, $$pre35 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert28$phi$trans$insert = ((($0)) + 4|0);
    $$pre29$pre = HEAP32[$$phi$trans$insert28$phi$trans$insert>>2]|0;
    $$pre35 = ((($0)) + 108|0);
    $$pre$phi34Z2D = $$pre35;$$sink = $$pre;$25 = $$pre;$28 = $$pre29$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$pre$phi34Z2D = $17;$$sink = $21;$25 = $21;$28 = $14;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$pre$phi34Z2D = $17;$$sink = $23;$25 = $21;$28 = $14;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = $25;
    $29 = $28;
    $30 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $31 = (($27) + 1)|0;
    $32 = (($31) - ($29))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$$pre$phi34Z2D>>2] = $33;
   }
   $34 = ((($28)) + -1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)==($7|0);
   if ($37) {
    $$0 = $7;
   } else {
    $38 = $7&255;
    HEAP8[$34>>0] = $38;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtoul($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox($0,$1,$2,-1,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(6);
 $$ = $isdigit | $3;
 $4 = $$&1;
 return ($4|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[20671]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (82724 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[20671] = $24;
     } else {
      $25 = HEAP32[(82700)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(82692)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (82724 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[20671] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(82700)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(82704)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (82724 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[20671] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(82700)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(82692)>>2] = $84;
     HEAP32[(82704)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(82688)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (82988 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $not$5$i = ($140|0)==(0|0);
     $$sink16$i = $not$5$i&1;
     $141 = (((($134)) + 16|0) + ($$sink16$i<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(0|0);
     if ($143) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;$$01937$i = $138;$145 = $142;
      while(1) {
       $144 = ((($145)) + 4|0);
       $146 = HEAP32[$144>>2]|0;
       $147 = $146 & -8;
       $148 = (($147) - ($6))|0;
       $149 = ($148>>>0)<($$01937$i>>>0);
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = ((($145)) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $not$$i = ($151|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $152 = (((($145)) + 16|0) + ($$sink1$i<<2)|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;$$01937$i = $$$0193$i;$145 = $153;
       }
      }
     }
     $155 = HEAP32[(82700)>>2]|0;
     $156 = ($$0192$lcssa$i>>>0)<($155>>>0);
     if ($156) {
      _abort();
      // unreachable;
     }
     $157 = (($$0192$lcssa$i) + ($6)|0);
     $158 = ($$0192$lcssa$i>>>0)<($157>>>0);
     if (!($158)) {
      _abort();
      // unreachable;
     }
     $159 = ((($$0192$lcssa$i)) + 24|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$0192$lcssa$i)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==($$0192$lcssa$i|0);
     do {
      if ($163) {
       $173 = ((($$0192$lcssa$i)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = ((($$0192$lcssa$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;$$1198$i = $176;
        }
       } else {
        $$1196$i = $174;$$1198$i = $173;
       }
       while(1) {
        $179 = ((($$1196$i)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $$1196$i = $180;$$1198$i = $179;
         continue;
        }
        $182 = ((($$1196$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;$$1198$i = $182;
        }
       }
       $185 = ($$1198$i>>>0)<($155>>>0);
       if ($185) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = ((($$0192$lcssa$i)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165>>>0)<($155>>>0);
       if ($166) {
        _abort();
        // unreachable;
       }
       $167 = ((($165)) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==($$0192$lcssa$i|0);
       if (!($169)) {
        _abort();
        // unreachable;
       }
       $170 = ((($162)) + 8|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==($$0192$lcssa$i|0);
       if ($172) {
        HEAP32[$167>>2] = $162;
        HEAP32[$170>>2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $186 = ($160|0)==(0|0);
     L73: do {
      if (!($186)) {
       $187 = ((($$0192$lcssa$i)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (82988 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($$0192$lcssa$i|0)==($190|0);
       do {
        if ($191) {
         HEAP32[$189>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[(82688)>>2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[(82700)>>2]|0;
         $196 = ($160>>>0)<($195>>>0);
         if ($196) {
          _abort();
          // unreachable;
         } else {
          $197 = ((($160)) + 16|0);
          $198 = HEAP32[$197>>2]|0;
          $not$1$i = ($198|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $not$1$i&1;
          $199 = (((($160)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$199>>2] = $$3$i;
          $200 = ($$3$i|0)==(0|0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $201 = HEAP32[(82700)>>2]|0;
       $202 = ($$3$i>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       }
       $203 = ((($$3$i)) + 24|0);
       HEAP32[$203>>2] = $160;
       $204 = ((($$0192$lcssa$i)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==(0|0);
       do {
        if (!($206)) {
         $207 = ($205>>>0)<($201>>>0);
         if ($207) {
          _abort();
          // unreachable;
         } else {
          $208 = ((($$3$i)) + 16|0);
          HEAP32[$208>>2] = $205;
          $209 = ((($205)) + 24|0);
          HEAP32[$209>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $210 = ((($$0192$lcssa$i)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)==(0|0);
       if (!($212)) {
        $213 = HEAP32[(82700)>>2]|0;
        $214 = ($211>>>0)<($213>>>0);
        if ($214) {
         _abort();
         // unreachable;
        } else {
         $215 = ((($$3$i)) + 20|0);
         HEAP32[$215>>2] = $211;
         $216 = ((($211)) + 24|0);
         HEAP32[$216>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $217 = ($$0193$lcssa$i>>>0)<(16);
     if ($217) {
      $218 = (($$0193$lcssa$i) + ($6))|0;
      $219 = $218 | 3;
      $220 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$220>>2] = $219;
      $221 = (($$0192$lcssa$i) + ($218)|0);
      $222 = ((($221)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 | 1;
      HEAP32[$222>>2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$226>>2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = ((($157)) + 4|0);
      HEAP32[$228>>2] = $227;
      $229 = (($157) + ($$0193$lcssa$i)|0);
      HEAP32[$229>>2] = $$0193$lcssa$i;
      $230 = ($37|0)==(0);
      if (!($230)) {
       $231 = HEAP32[(82704)>>2]|0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = (82724 + ($233<<2)|0);
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = $8 | $235;
        HEAP32[20671] = $238;
        $$pre$i = ((($234)) + 8|0);
        $$0189$i = $234;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = ((($234)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = HEAP32[(82700)>>2]|0;
        $242 = ($240>>>0)<($241>>>0);
        if ($242) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $240;$$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $231;
       $243 = ((($$0189$i)) + 12|0);
       HEAP32[$243>>2] = $231;
       $244 = ((($231)) + 8|0);
       HEAP32[$244>>2] = $$0189$i;
       $245 = ((($231)) + 12|0);
       HEAP32[$245>>2] = $234;
      }
      HEAP32[(82692)>>2] = $$0193$lcssa$i;
      HEAP32[(82704)>>2] = $157;
     }
     $246 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $246;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = ($0>>>0)>(4294967231);
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = (($0) + 11)|0;
    $249 = $248 & -8;
    $250 = HEAP32[(82688)>>2]|0;
    $251 = ($250|0)==(0);
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = (0 - ($249))|0;
     $253 = $248 >>> 8;
     $254 = ($253|0)==(0);
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = ($249>>>0)>(16777215);
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = (($253) + 1048320)|0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = (($259) + 520192)|0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = (($264) + 245760)|0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = (14 - ($268))|0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = (($269) + ($271))|0;
       $273 = $272 << 1;
       $274 = (($272) + 7)|0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = (82988 + ($$0358$i<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(0|0);
     L117: do {
      if ($280) {
       $$2355$i = 0;$$3$i201 = 0;$$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i|0)==(31);
       $282 = $$0358$i >>> 1;
       $283 = (25 - ($282))|0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;$$0347$i = $252;$$0353$i = $279;$$0359$i = $285;$$0362$i = 0;
       while(1) {
        $286 = ((($$0353$i)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $287 & -8;
        $289 = (($288) - ($249))|0;
        $290 = ($289>>>0)<($$0347$i>>>0);
        if ($290) {
         $291 = ($289|0)==(0);
         if ($291) {
          $$415$i = $$0353$i;$$435114$i = 0;$$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $292 = ((($$0353$i)) + 20|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $$0359$i >>> 31;
        $295 = (((($$0353$i)) + 16|0) + ($294<<2)|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($293|0)==(0|0);
        $298 = ($293|0)==($296|0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296|0)==(0|0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i&1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;$$3$i201 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $296;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $301 = ($$2355$i|0)==(0|0);
      $302 = ($$3$i201|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (82988 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;$$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i|0)==(0|0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;$$435114$i = $$3350$i;$$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $334 = ((($$435713$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($249))|0;
       $338 = ($337>>>0)<($$435114$i>>>0);
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = ((($$435713$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $not$1$i203 = ($340|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $341 = (((($$435713$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($342|0)==(0|0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;$$435114$i = $$$4351$i;$$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i|0)==(0|0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[(82692)>>2]|0;
      $346 = (($345) - ($249))|0;
      $347 = ($$4351$lcssa$i>>>0)<($346>>>0);
      if ($347) {
       $348 = HEAP32[(82700)>>2]|0;
       $349 = ($$4$lcssa$i>>>0)<($348>>>0);
       if ($349) {
        _abort();
        // unreachable;
       }
       $350 = (($$4$lcssa$i) + ($249)|0);
       $351 = ($$4$lcssa$i>>>0)<($350>>>0);
       if (!($351)) {
        _abort();
        // unreachable;
       }
       $352 = ((($$4$lcssa$i)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($$4$lcssa$i)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==($$4$lcssa$i|0);
       do {
        if ($356) {
         $366 = ((($$4$lcssa$i)) + 20|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = ($367|0)==(0|0);
         if ($368) {
          $369 = ((($$4$lcssa$i)) + 16|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = ($370|0)==(0|0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;$$1374$i = $369;
          }
         } else {
          $$1370$i = $367;$$1374$i = $366;
         }
         while(1) {
          $372 = ((($$1370$i)) + 20|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($373|0)==(0|0);
          if (!($374)) {
           $$1370$i = $373;$$1374$i = $372;
           continue;
          }
          $375 = ((($$1370$i)) + 16|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = ($376|0)==(0|0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;$$1374$i = $375;
          }
         }
         $378 = ($$1374$i>>>0)<($348>>>0);
         if ($378) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = ((($$4$lcssa$i)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358>>>0)<($348>>>0);
         if ($359) {
          _abort();
          // unreachable;
         }
         $360 = ((($358)) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = ($361|0)==($$4$lcssa$i|0);
         if (!($362)) {
          _abort();
          // unreachable;
         }
         $363 = ((($355)) + 8|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==($$4$lcssa$i|0);
         if ($365) {
          HEAP32[$360>>2] = $355;
          HEAP32[$363>>2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $379 = ($353|0)==(0|0);
       L164: do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = ((($$4$lcssa$i)) + 28|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = (82988 + ($381<<2)|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($$4$lcssa$i|0)==($383|0);
         do {
          if ($384) {
           HEAP32[$382>>2] = $$3372$i;
           $cond$i208 = ($$3372$i|0)==(0|0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[(82688)>>2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[(82700)>>2]|0;
           $389 = ($353>>>0)<($388>>>0);
           if ($389) {
            _abort();
            // unreachable;
           } else {
            $390 = ((($353)) + 16|0);
            $391 = HEAP32[$390>>2]|0;
            $not$$i209 = ($391|0)!=($$4$lcssa$i|0);
            $$sink3$i = $not$$i209&1;
            $392 = (((($353)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$392>>2] = $$3372$i;
            $393 = ($$3372$i|0)==(0|0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $394 = HEAP32[(82700)>>2]|0;
         $395 = ($$3372$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3372$i)) + 24|0);
         HEAP32[$396>>2] = $353;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3372$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[(82700)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3372$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4351$lcssa$i) + ($249))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = ((($350)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($350) + ($$4351$lcssa$i)|0);
         HEAP32[$422>>2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = ($$4351$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (82724 + ($425<<2)|0);
          $427 = HEAP32[20671]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[20671] = $431;
           $$pre$i210 = ((($426)) + 8|0);
           $$0368$i = $426;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(82700)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $433;$$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $350;
          $436 = ((($$0368$i)) + 12|0);
          HEAP32[$436>>2] = $350;
          $437 = ((($350)) + 8|0);
          HEAP32[$437>>2] = $$0368$i;
          $438 = ((($350)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = (82988 + ($$0361$i<<2)|0);
         $465 = ((($350)) + 28|0);
         HEAP32[$465>>2] = $$0361$i;
         $466 = ((($350)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(82688)>>2] = $472;
          HEAP32[$464>>2] = $350;
          $473 = ((($350)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($350)) + 12|0);
          HEAP32[$474>>2] = $350;
          $475 = ((($350)) + 8|0);
          HEAP32[$475>>2] = $350;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0361$i|0)==(31);
         $478 = $$0361$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;$$0345$i = $476;
         while(1) {
          $482 = ((($$0345$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4351$lcssa$i|0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = (((($$0345$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;$$0345$i = $489;
          }
         }
         if ((label|0) == 136) {
          $491 = HEAP32[(82700)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $350;
           $493 = ((($350)) + 24|0);
           HEAP32[$493>>2] = $$0345$i;
           $494 = ((($350)) + 12|0);
           HEAP32[$494>>2] = $350;
           $495 = ((($350)) + 8|0);
           HEAP32[$495>>2] = $350;
           break;
          }
         }
         else if ((label|0) == 139) {
          $496 = ((($$0345$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(82700)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$9$i = ($$0345$i>>>0)>=($498>>>0);
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $350;
           HEAP32[$496>>2] = $350;
           $502 = ((($350)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($350)) + 12|0);
           HEAP32[$503>>2] = $$0345$i;
           $504 = ((($350)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(82692)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(82704)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(82704)>>2] = $511;
   HEAP32[(82692)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(82692)>>2] = 0;
   HEAP32[(82704)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(82696)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(82696)>>2] = $526;
  $527 = HEAP32[(82708)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(82708)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[20789]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(83164)>>2] = 4096;
  HEAP32[(83160)>>2] = 4096;
  HEAP32[(83168)>>2] = -1;
  HEAP32[(83172)>>2] = -1;
  HEAP32[(83176)>>2] = 0;
  HEAP32[(83128)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[20789] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[(83164)>>2]|0;
  $542 = $$pre$i212;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(83124)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(83116)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(83128)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L244: do {
  if ($554) {
   $555 = HEAP32[(82708)>>2]|0;
   $556 = ($555|0)==(0|0);
   L246: do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = (83132);
     while(1) {
      $557 = HEAP32[$$0$i$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;$$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[(83160)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(83116)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[(83124)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723948$i = $$$i;$$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $610 = ($$2247$ph$i|0)==((-1)|0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[(83164)>>2]|0;
     $602 = (($540) - ($$2253$ph$i))|0;
     $603 = (($602) + ($601))|0;
     $604 = (0 - ($601))|0;
     $605 = $603 & $604;
     $606 = ($605>>>0)<(2147483647);
     if (!($606)) {
      $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = (_sbrk(($605|0))|0);
     $608 = ($607|0)==((-1)|0);
     if ($608) {
      (_sbrk(($597|0))|0);
      $$2234253237$i = 0;
      break;
     } else {
      $609 = (($605) + ($$2253$ph$i))|0;
      $$723948$i = $609;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $611 = HEAP32[(83128)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(83128)>>2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = (($619) - ($620))|0;
   $622 = (($$0197) + 40)|0;
   $623 = ($621>>>0)>($622>>>0);
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614|0)==((-1)|0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!($or$cond50$i)) {
    $$723948$i = $$$4236$i;$$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $626 = HEAP32[(83116)>>2]|0;
  $627 = (($626) + ($$723948$i))|0;
  HEAP32[(83116)>>2] = $627;
  $628 = HEAP32[(83120)>>2]|0;
  $629 = ($627>>>0)>($628>>>0);
  if ($629) {
   HEAP32[(83120)>>2] = $627;
  }
  $630 = HEAP32[(82708)>>2]|0;
  $631 = ($630|0)==(0|0);
  do {
   if ($631) {
    $632 = HEAP32[(82700)>>2]|0;
    $633 = ($632|0)==(0|0);
    $634 = ($$749$i>>>0)<($632>>>0);
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[(82700)>>2] = $$749$i;
    }
    HEAP32[(83132)>>2] = $$749$i;
    HEAP32[(83136)>>2] = $$723948$i;
    HEAP32[(83144)>>2] = 0;
    $635 = HEAP32[20789]|0;
    HEAP32[(82720)>>2] = $635;
    HEAP32[(82716)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $636 = $$01$i$i << 1;
     $637 = (82724 + ($636<<2)|0);
     $638 = ((($637)) + 12|0);
     HEAP32[$638>>2] = $637;
     $639 = ((($637)) + 8|0);
     HEAP32[$639>>2] = $637;
     $640 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($640|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = (($$723948$i) + -40)|0;
    $642 = ((($$749$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$749$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(82708)>>2] = $649;
    HEAP32[(82696)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($649) + ($650)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(83172)>>2]|0;
    HEAP32[(82712)>>2] = $655;
   } else {
    $$024371$i = (83132);
    while(1) {
     $656 = HEAP32[$$024371$i>>2]|0;
     $657 = ((($$024371$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$749$i|0)==($659|0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = ((($$024371$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label|0) == 190) {
     $664 = ((($$024371$i)) + 12|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = $665 & 8;
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = ($630>>>0)>=($656>>>0);
      $669 = ($630>>>0)<($$749$i>>>0);
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = (($658) + ($$723948$i))|0;
       HEAP32[$657>>2] = $670;
       $671 = HEAP32[(82696)>>2]|0;
       $672 = ((($630)) + 8|0);
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674|0)==(0);
       $676 = (0 - ($673))|0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = (($630) + ($678)|0);
       $680 = (($$723948$i) - ($678))|0;
       $681 = (($671) + ($680))|0;
       HEAP32[(82708)>>2] = $679;
       HEAP32[(82696)>>2] = $681;
       $682 = $681 | 1;
       $683 = ((($679)) + 4|0);
       HEAP32[$683>>2] = $682;
       $684 = (($679) + ($681)|0);
       $685 = ((($684)) + 4|0);
       HEAP32[$685>>2] = 40;
       $686 = HEAP32[(83172)>>2]|0;
       HEAP32[(82712)>>2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[(82700)>>2]|0;
    $688 = ($$749$i>>>0)<($687>>>0);
    if ($688) {
     HEAP32[(82700)>>2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = (($$749$i) + ($$723948$i)|0);
    $$124470$i = (83132);
    while(1) {
     $690 = HEAP32[$$124470$i>>2]|0;
     $691 = ($690|0)==($689|0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = ((($$124470$i)) + 8|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(0|0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label|0) == 198) {
     $695 = ((($$124470$i)) + 12|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 & 8;
     $698 = ($697|0)==(0);
     if ($698) {
      HEAP32[$$124470$i>>2] = $$749$i;
      $699 = ((($$124470$i)) + 4|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($700) + ($$723948$i))|0;
      HEAP32[$699>>2] = $701;
      $702 = ((($$749$i)) + 8|0);
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704|0)==(0);
      $706 = (0 - ($703))|0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = (($$749$i) + ($708)|0);
      $710 = ((($689)) + 8|0);
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712|0)==(0);
      $714 = (0 - ($711))|0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = (($689) + ($716)|0);
      $718 = $717;
      $719 = $709;
      $720 = (($718) - ($719))|0;
      $721 = (($709) + ($$0197)|0);
      $722 = (($720) - ($$0197))|0;
      $723 = $$0197 | 3;
      $724 = ((($709)) + 4|0);
      HEAP32[$724>>2] = $723;
      $725 = ($717|0)==($630|0);
      do {
       if ($725) {
        $726 = HEAP32[(82696)>>2]|0;
        $727 = (($726) + ($722))|0;
        HEAP32[(82696)>>2] = $727;
        HEAP32[(82708)>>2] = $721;
        $728 = $727 | 1;
        $729 = ((($721)) + 4|0);
        HEAP32[$729>>2] = $728;
       } else {
        $730 = HEAP32[(82704)>>2]|0;
        $731 = ($717|0)==($730|0);
        if ($731) {
         $732 = HEAP32[(82692)>>2]|0;
         $733 = (($732) + ($722))|0;
         HEAP32[(82692)>>2] = $733;
         HEAP32[(82704)>>2] = $721;
         $734 = $733 | 1;
         $735 = ((($721)) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = (($721) + ($733)|0);
         HEAP32[$736>>2] = $733;
         break;
        }
        $737 = ((($717)) + 4|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = $738 & 3;
        $740 = ($739|0)==(1);
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = ($738>>>0)<(256);
         L314: do {
          if ($743) {
           $744 = ((($717)) + 8|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ((($717)) + 12|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = $742 << 1;
           $749 = (82724 + ($748<<2)|0);
           $750 = ($745|0)==($749|0);
           do {
            if (!($750)) {
             $751 = ($745>>>0)<($752>>>0);
             if ($751) {
              _abort();
              // unreachable;
             }
             $753 = ((($745)) + 12|0);
             $754 = HEAP32[$753>>2]|0;
             $755 = ($754|0)==($717|0);
             if ($755) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $756 = ($747|0)==($745|0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[20671]|0;
            $760 = $759 & $758;
            HEAP32[20671] = $760;
            break;
           }
           $761 = ($747|0)==($749|0);
           do {
            if ($761) {
             $$pre10$i$i = ((($747)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = ($747>>>0)<($752>>>0);
             if ($762) {
              _abort();
              // unreachable;
             }
             $763 = ((($747)) + 8|0);
             $764 = HEAP32[$763>>2]|0;
             $765 = ($764|0)==($717|0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $766 = ((($745)) + 12|0);
           HEAP32[$766>>2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $745;
          } else {
           $767 = ((($717)) + 24|0);
           $768 = HEAP32[$767>>2]|0;
           $769 = ((($717)) + 12|0);
           $770 = HEAP32[$769>>2]|0;
           $771 = ($770|0)==($717|0);
           do {
            if ($771) {
             $781 = ((($717)) + 16|0);
             $782 = ((($781)) + 4|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==(0|0);
             if ($784) {
              $785 = HEAP32[$781>>2]|0;
              $786 = ($785|0)==(0|0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;$$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;$$1293$i$i = $782;
             }
             while(1) {
              $787 = ((($$1291$i$i)) + 20|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if (!($789)) {
               $$1291$i$i = $788;$$1293$i$i = $787;
               continue;
              }
              $790 = ((($$1291$i$i)) + 16|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;$$1293$i$i = $790;
              }
             }
             $793 = ($$1293$i$i>>>0)<($752>>>0);
             if ($793) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = ((($717)) + 8|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773>>>0)<($752>>>0);
             if ($774) {
              _abort();
              // unreachable;
             }
             $775 = ((($773)) + 12|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($717|0);
             if (!($777)) {
              _abort();
              // unreachable;
             }
             $778 = ((($770)) + 8|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($717|0);
             if ($780) {
              HEAP32[$775>>2] = $770;
              HEAP32[$778>>2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $794 = ($768|0)==(0|0);
           if ($794) {
            break;
           }
           $795 = ((($717)) + 28|0);
           $796 = HEAP32[$795>>2]|0;
           $797 = (82988 + ($796<<2)|0);
           $798 = HEAP32[$797>>2]|0;
           $799 = ($717|0)==($798|0);
           do {
            if ($799) {
             HEAP32[$797>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[(82688)>>2]|0;
             $803 = $802 & $801;
             HEAP32[(82688)>>2] = $803;
             break L314;
            } else {
             $804 = HEAP32[(82700)>>2]|0;
             $805 = ($768>>>0)<($804>>>0);
             if ($805) {
              _abort();
              // unreachable;
             } else {
              $806 = ((($768)) + 16|0);
              $807 = HEAP32[$806>>2]|0;
              $not$$i17$i = ($807|0)!=($717|0);
              $$sink1$i$i = $not$$i17$i&1;
              $808 = (((($768)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$808>>2] = $$3$i$i;
              $809 = ($$3$i$i|0)==(0|0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $810 = HEAP32[(82700)>>2]|0;
           $811 = ($$3$i$i>>>0)<($810>>>0);
           if ($811) {
            _abort();
            // unreachable;
           }
           $812 = ((($$3$i$i)) + 24|0);
           HEAP32[$812>>2] = $768;
           $813 = ((($717)) + 16|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ($814|0)==(0|0);
           do {
            if (!($815)) {
             $816 = ($814>>>0)<($810>>>0);
             if ($816) {
              _abort();
              // unreachable;
             } else {
              $817 = ((($$3$i$i)) + 16|0);
              HEAP32[$817>>2] = $814;
              $818 = ((($814)) + 24|0);
              HEAP32[$818>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $819 = ((($813)) + 4|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           if ($821) {
            break;
           }
           $822 = HEAP32[(82700)>>2]|0;
           $823 = ($820>>>0)<($822>>>0);
           if ($823) {
            _abort();
            // unreachable;
           } else {
            $824 = ((($$3$i$i)) + 20|0);
            HEAP32[$824>>2] = $820;
            $825 = ((($820)) + 24|0);
            HEAP32[$825>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $826 = (($717) + ($741)|0);
         $827 = (($741) + ($722))|0;
         $$0$i18$i = $826;$$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;$$0287$i$i = $722;
        }
        $828 = ((($$0$i18$i)) + 4|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = $829 & -2;
        HEAP32[$828>>2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = ((($721)) + 4|0);
        HEAP32[$832>>2] = $831;
        $833 = (($721) + ($$0287$i$i)|0);
        HEAP32[$833>>2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = ($$0287$i$i>>>0)<(256);
        if ($835) {
         $836 = $834 << 1;
         $837 = (82724 + ($836<<2)|0);
         $838 = HEAP32[20671]|0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840|0)==(0);
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[20671] = $842;
           $$pre$i19$i = ((($837)) + 8|0);
           $$0295$i$i = $837;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = ((($837)) + 8|0);
           $844 = HEAP32[$843>>2]|0;
           $845 = HEAP32[(82700)>>2]|0;
           $846 = ($844>>>0)<($845>>>0);
           if (!($846)) {
            $$0295$i$i = $844;$$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $721;
         $847 = ((($$0295$i$i)) + 12|0);
         HEAP32[$847>>2] = $721;
         $848 = ((($721)) + 8|0);
         HEAP32[$848>>2] = $$0295$i$i;
         $849 = ((($721)) + 12|0);
         HEAP32[$849>>2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850|0)==(0);
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = ($$0287$i$i>>>0)>(16777215);
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = (($850) + 1048320)|0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = (($856) + 520192)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = (($861) + 245760)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = (14 - ($865))|0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = (($866) + ($868))|0;
          $870 = $869 << 1;
          $871 = (($869) + 7)|0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while(0);
        $875 = (82988 + ($$0296$i$i<<2)|0);
        $876 = ((($721)) + 28|0);
        HEAP32[$876>>2] = $$0296$i$i;
        $877 = ((($721)) + 16|0);
        $878 = ((($877)) + 4|0);
        HEAP32[$878>>2] = 0;
        HEAP32[$877>>2] = 0;
        $879 = HEAP32[(82688)>>2]|0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881|0)==(0);
        if ($882) {
         $883 = $879 | $880;
         HEAP32[(82688)>>2] = $883;
         HEAP32[$875>>2] = $721;
         $884 = ((($721)) + 24|0);
         HEAP32[$884>>2] = $875;
         $885 = ((($721)) + 12|0);
         HEAP32[$885>>2] = $721;
         $886 = ((($721)) + 8|0);
         HEAP32[$886>>2] = $721;
         break;
        }
        $887 = HEAP32[$875>>2]|0;
        $888 = ($$0296$i$i|0)==(31);
        $889 = $$0296$i$i >>> 1;
        $890 = (25 - ($889))|0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;$$0289$i$i = $887;
        while(1) {
         $893 = ((($$0289$i$i)) + 4|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 & -8;
         $896 = ($895|0)==($$0287$i$i|0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = (((($$0289$i$i)) + 16|0) + ($897<<2)|0);
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898>>2]|0;
         $901 = ($900|0)==(0|0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;$$0289$i$i = $900;
         }
        }
        if ((label|0) == 262) {
         $902 = HEAP32[(82700)>>2]|0;
         $903 = ($898>>>0)<($902>>>0);
         if ($903) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$898>>2] = $721;
          $904 = ((($721)) + 24|0);
          HEAP32[$904>>2] = $$0289$i$i;
          $905 = ((($721)) + 12|0);
          HEAP32[$905>>2] = $721;
          $906 = ((($721)) + 8|0);
          HEAP32[$906>>2] = $721;
          break;
         }
        }
        else if ((label|0) == 265) {
         $907 = ((($$0289$i$i)) + 8|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = HEAP32[(82700)>>2]|0;
         $910 = ($908>>>0)>=($909>>>0);
         $not$7$i$i = ($$0289$i$i>>>0)>=($909>>>0);
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = ((($908)) + 12|0);
          HEAP32[$912>>2] = $721;
          HEAP32[$907>>2] = $721;
          $913 = ((($721)) + 8|0);
          HEAP32[$913>>2] = $908;
          $914 = ((($721)) + 12|0);
          HEAP32[$914>>2] = $$0289$i$i;
          $915 = ((($721)) + 24|0);
          HEAP32[$915>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1047 = ((($709)) + 8|0);
      $$0 = $1047;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (83132);
    while(1) {
     $916 = HEAP32[$$0$i$i$i>>2]|0;
     $917 = ($916>>>0)>($630>>>0);
     if (!($917)) {
      $918 = ((($$0$i$i$i)) + 4|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($916) + ($919)|0);
      $921 = ($920>>>0)>($630>>>0);
      if ($921) {
       break;
      }
     }
     $922 = ((($$0$i$i$i)) + 8|0);
     $923 = HEAP32[$922>>2]|0;
     $$0$i$i$i = $923;
    }
    $924 = ((($920)) + -47|0);
    $925 = ((($924)) + 8|0);
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927|0)==(0);
    $929 = (0 - ($926))|0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = (($924) + ($931)|0);
    $933 = ((($630)) + 16|0);
    $934 = ($932>>>0)<($933>>>0);
    $935 = $934 ? $630 : $932;
    $936 = ((($935)) + 8|0);
    $937 = ((($935)) + 24|0);
    $938 = (($$723948$i) + -40)|0;
    $939 = ((($$749$i)) + 8|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    $943 = (0 - ($940))|0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = (($$749$i) + ($945)|0);
    $947 = (($938) - ($945))|0;
    HEAP32[(82708)>>2] = $946;
    HEAP32[(82696)>>2] = $947;
    $948 = $947 | 1;
    $949 = ((($946)) + 4|0);
    HEAP32[$949>>2] = $948;
    $950 = (($946) + ($947)|0);
    $951 = ((($950)) + 4|0);
    HEAP32[$951>>2] = 40;
    $952 = HEAP32[(83172)>>2]|0;
    HEAP32[(82712)>>2] = $952;
    $953 = ((($935)) + 4|0);
    HEAP32[$953>>2] = 27;
    ;HEAP32[$936>>2]=HEAP32[(83132)>>2]|0;HEAP32[$936+4>>2]=HEAP32[(83132)+4>>2]|0;HEAP32[$936+8>>2]=HEAP32[(83132)+8>>2]|0;HEAP32[$936+12>>2]=HEAP32[(83132)+12>>2]|0;
    HEAP32[(83132)>>2] = $$749$i;
    HEAP32[(83136)>>2] = $$723948$i;
    HEAP32[(83144)>>2] = 0;
    HEAP32[(83140)>>2] = $936;
    $955 = $937;
    while(1) {
     $954 = ((($955)) + 4|0);
     HEAP32[$954>>2] = 7;
     $956 = ((($955)) + 8|0);
     $957 = ($956>>>0)<($920>>>0);
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935|0)==($630|0);
    if (!($958)) {
     $959 = $935;
     $960 = $630;
     $961 = (($959) - ($960))|0;
     $962 = HEAP32[$953>>2]|0;
     $963 = $962 & -2;
     HEAP32[$953>>2] = $963;
     $964 = $961 | 1;
     $965 = ((($630)) + 4|0);
     HEAP32[$965>>2] = $964;
     HEAP32[$935>>2] = $961;
     $966 = $961 >>> 3;
     $967 = ($961>>>0)<(256);
     if ($967) {
      $968 = $966 << 1;
      $969 = (82724 + ($968<<2)|0);
      $970 = HEAP32[20671]|0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972|0)==(0);
      if ($973) {
       $974 = $970 | $971;
       HEAP32[20671] = $974;
       $$pre$i$i = ((($969)) + 8|0);
       $$0211$i$i = $969;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = ((($969)) + 8|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = HEAP32[(82700)>>2]|0;
       $978 = ($976>>>0)<($977>>>0);
       if ($978) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $976;$$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $630;
      $979 = ((($$0211$i$i)) + 12|0);
      HEAP32[$979>>2] = $630;
      $980 = ((($630)) + 8|0);
      HEAP32[$980>>2] = $$0211$i$i;
      $981 = ((($630)) + 12|0);
      HEAP32[$981>>2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982|0)==(0);
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = ($961>>>0)>(16777215);
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = (($982) + 1048320)|0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = (($988) + 520192)|0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = (($993) + 245760)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = (14 - ($997))|0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = (($998) + ($1000))|0;
       $1002 = $1001 << 1;
       $1003 = (($1001) + 7)|0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = (82988 + ($$0212$i$i<<2)|0);
     $1008 = ((($630)) + 28|0);
     HEAP32[$1008>>2] = $$0212$i$i;
     $1009 = ((($630)) + 20|0);
     HEAP32[$1009>>2] = 0;
     HEAP32[$933>>2] = 0;
     $1010 = HEAP32[(82688)>>2]|0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012|0)==(0);
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[(82688)>>2] = $1014;
      HEAP32[$1007>>2] = $630;
      $1015 = ((($630)) + 24|0);
      HEAP32[$1015>>2] = $1007;
      $1016 = ((($630)) + 12|0);
      HEAP32[$1016>>2] = $630;
      $1017 = ((($630)) + 8|0);
      HEAP32[$1017>>2] = $630;
      break;
     }
     $1018 = HEAP32[$1007>>2]|0;
     $1019 = ($$0212$i$i|0)==(31);
     $1020 = $$0212$i$i >>> 1;
     $1021 = (25 - ($1020))|0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;$$0207$i$i = $1018;
     while(1) {
      $1024 = ((($$0207$i$i)) + 4|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $1025 & -8;
      $1027 = ($1026|0)==($961|0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = (((($$0207$i$i)) + 16|0) + ($1028<<2)|0);
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029>>2]|0;
      $1032 = ($1031|0)==(0|0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;$$0207$i$i = $1031;
      }
     }
     if ((label|0) == 289) {
      $1033 = HEAP32[(82700)>>2]|0;
      $1034 = ($1029>>>0)<($1033>>>0);
      if ($1034) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1029>>2] = $630;
       $1035 = ((($630)) + 24|0);
       HEAP32[$1035>>2] = $$0207$i$i;
       $1036 = ((($630)) + 12|0);
       HEAP32[$1036>>2] = $630;
       $1037 = ((($630)) + 8|0);
       HEAP32[$1037>>2] = $630;
       break;
      }
     }
     else if ((label|0) == 292) {
      $1038 = ((($$0207$i$i)) + 8|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[(82700)>>2]|0;
      $1041 = ($1039>>>0)>=($1040>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1040>>>0);
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = ((($1039)) + 12|0);
       HEAP32[$1043>>2] = $630;
       HEAP32[$1038>>2] = $630;
       $1044 = ((($630)) + 8|0);
       HEAP32[$1044>>2] = $1039;
       $1045 = ((($630)) + 12|0);
       HEAP32[$1045>>2] = $$0207$i$i;
       $1046 = ((($630)) + 24|0);
       HEAP32[$1046>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1048 = HEAP32[(82696)>>2]|0;
  $1049 = ($1048>>>0)>($$0197>>>0);
  if ($1049) {
   $1050 = (($1048) - ($$0197))|0;
   HEAP32[(82696)>>2] = $1050;
   $1051 = HEAP32[(82708)>>2]|0;
   $1052 = (($1051) + ($$0197)|0);
   HEAP32[(82708)>>2] = $1052;
   $1053 = $1050 | 1;
   $1054 = ((($1052)) + 4|0);
   HEAP32[$1054>>2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = ((($1051)) + 4|0);
   HEAP32[$1056>>2] = $1055;
   $1057 = ((($1051)) + 8|0);
   $$0 = $1057;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1058 = (___errno_location()|0);
 HEAP32[$1058>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(82700)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(82704)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $104 = ((($10)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $$1 = $16;$$1382 = $17;$112 = $16;
     break;
    }
    $108 = (($16) + ($17)|0);
    $109 = ((($16)) + 4|0);
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[(82692)>>2] = $17;
    HEAP32[$104>>2] = $111;
    HEAP32[$109>>2] = $110;
    HEAP32[$108>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (82724 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[20671]|0;
     $38 = $37 & $36;
     HEAP32[20671] = $38;
     $$1 = $16;$$1382 = $17;$112 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre444 = ((($26)) + 8|0);
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi445Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$112 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($$1390>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$112 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (82988 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(82688)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(82688)>>2] = $81;
       $$1 = $16;$$1382 = $17;$112 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(82700)>>2]|0;
      $83 = ($46>>>0)<($82>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $not$405 = ($85|0)!=($16|0);
       $$sink3 = $not$405&1;
       $86 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$86>>2] = $$3;
       $87 = ($$3|0)==(0|0);
       if ($87) {
        $$1 = $16;$$1382 = $17;$112 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[(82700)>>2]|0;
    $89 = ($$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($$3)) + 24|0);
    HEAP32[$90>>2] = $46;
    $91 = ((($16)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $$1 = $16;$$1382 = $17;$112 = $16;
    } else {
     $100 = HEAP32[(82700)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $$3;
      $$1 = $16;$$1382 = $17;$112 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$112 = $2;
  }
 } while(0);
 $113 = ($112>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(82708)>>2]|0;
  $121 = ($10|0)==($120|0);
  $122 = HEAP32[(82704)>>2]|0;
  if ($121) {
   $123 = HEAP32[(82696)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(82696)>>2] = $124;
   HEAP32[(82708)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = ($$1|0)==($122|0);
   if (!($127)) {
    return;
   }
   HEAP32[(82704)>>2] = 0;
   HEAP32[(82692)>>2] = 0;
   return;
  }
  $128 = ($10|0)==($122|0);
  if ($128) {
   $129 = HEAP32[(82692)>>2]|0;
   $130 = (($129) + ($$1382))|0;
   HEAP32[(82692)>>2] = $130;
   HEAP32[(82704)>>2] = $112;
   $131 = $130 | 1;
   $132 = ((($$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($112) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = (($134) + ($$1382))|0;
  $136 = $115 >>> 3;
  $137 = ($115>>>0)<(256);
  L108: do {
   if ($137) {
    $138 = ((($10)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($10)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (82724 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(82700)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($10|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[20671]|0;
     $154 = $153 & $152;
     HEAP32[20671] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre442 = ((($141)) + 8|0);
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[(82700)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($10|0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi443Z2D>>2] = $139;
   } else {
    $162 = ((($10)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($10)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($10|0);
    do {
     if ($166) {
      $177 = ((($10)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;$$1402 = $177;
       }
      } else {
       $$1398 = $179;$$1402 = $178;
      }
      while(1) {
       $183 = ((($$1398)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $$1398 = $184;$$1402 = $183;
        continue;
       }
       $186 = ((($$1398)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;$$1402 = $186;
       }
      }
      $189 = HEAP32[(82700)>>2]|0;
      $190 = ($$1402>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = ((($10)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(82700)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($10|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($10|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($10)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (82988 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($10|0)==($195|0);
     do {
      if ($196) {
       HEAP32[$194>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[(82688)>>2]|0;
        $200 = $199 & $198;
        HEAP32[(82688)>>2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[(82700)>>2]|0;
       $202 = ($163>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       } else {
        $203 = ((($163)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $not$ = ($204|0)!=($10|0);
        $$sink5 = $not$&1;
        $205 = (((($163)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$205>>2] = $$3400;
        $206 = ($$3400|0)==(0|0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $207 = HEAP32[(82700)>>2]|0;
     $208 = ($$3400>>>0)<($207>>>0);
     if ($208) {
      _abort();
      // unreachable;
     }
     $209 = ((($$3400)) + 24|0);
     HEAP32[$209>>2] = $163;
     $210 = ((($10)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0|0);
     do {
      if (!($212)) {
       $213 = ($211>>>0)<($207>>>0);
       if ($213) {
        _abort();
        // unreachable;
       } else {
        $214 = ((($$3400)) + 16|0);
        HEAP32[$214>>2] = $211;
        $215 = ((($211)) + 24|0);
        HEAP32[$215>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $216 = ((($210)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[(82700)>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if ($220) {
       _abort();
       // unreachable;
      } else {
       $221 = ((($$3400)) + 20|0);
       HEAP32[$221>>2] = $217;
       $222 = ((($217)) + 24|0);
       HEAP32[$222>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $223 = $135 | 1;
  $224 = ((($$1)) + 4|0);
  HEAP32[$224>>2] = $223;
  $225 = (($112) + ($135)|0);
  HEAP32[$225>>2] = $135;
  $226 = HEAP32[(82704)>>2]|0;
  $227 = ($$1|0)==($226|0);
  if ($227) {
   HEAP32[(82692)>>2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114>>2] = $228;
  $229 = $$1382 | 1;
  $230 = ((($$1)) + 4|0);
  HEAP32[$230>>2] = $229;
  $231 = (($112) + ($$1382)|0);
  HEAP32[$231>>2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = ($$2>>>0)<(256);
 if ($233) {
  $234 = $232 << 1;
  $235 = (82724 + ($234<<2)|0);
  $236 = HEAP32[20671]|0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238|0)==(0);
  if ($239) {
   $240 = $236 | $237;
   HEAP32[20671] = $240;
   $$pre = ((($235)) + 8|0);
   $$0403 = $235;$$pre$phiZ2D = $$pre;
  } else {
   $241 = ((($235)) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = HEAP32[(82700)>>2]|0;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $242;$$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $245 = ((($$0403)) + 12|0);
  HEAP32[$245>>2] = $$1;
  $246 = ((($$1)) + 8|0);
  HEAP32[$246>>2] = $$0403;
  $247 = ((($$1)) + 12|0);
  HEAP32[$247>>2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248|0)==(0);
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = ($$2>>>0)>(16777215);
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = (($248) + 1048320)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = (($254) + 520192)|0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = (($259) + 245760)|0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = (14 - ($263))|0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = (($264) + ($266))|0;
   $268 = $267 << 1;
   $269 = (($267) + 7)|0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = (82988 + ($$0396<<2)|0);
 $274 = ((($$1)) + 28|0);
 HEAP32[$274>>2] = $$0396;
 $275 = ((($$1)) + 16|0);
 $276 = ((($$1)) + 20|0);
 HEAP32[$276>>2] = 0;
 HEAP32[$275>>2] = 0;
 $277 = HEAP32[(82688)>>2]|0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279|0)==(0);
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[(82688)>>2] = $281;
   HEAP32[$273>>2] = $$1;
   $282 = ((($$1)) + 24|0);
   HEAP32[$282>>2] = $273;
   $283 = ((($$1)) + 12|0);
   HEAP32[$283>>2] = $$1;
   $284 = ((($$1)) + 8|0);
   HEAP32[$284>>2] = $$1;
  } else {
   $285 = HEAP32[$273>>2]|0;
   $286 = ($$0396|0)==(31);
   $287 = $$0396 >>> 1;
   $288 = (25 - ($287))|0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;$$0384 = $285;
   while(1) {
    $291 = ((($$0384)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & -8;
    $294 = ($293|0)==($$2|0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = (((($$0384)) + 16|0) + ($295<<2)|0);
    $297 = $$0383 << 1;
    $298 = HEAP32[$296>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;$$0384 = $298;
    }
   }
   if ((label|0) == 121) {
    $300 = HEAP32[(82700)>>2]|0;
    $301 = ($296>>>0)<($300>>>0);
    if ($301) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$296>>2] = $$1;
     $302 = ((($$1)) + 24|0);
     HEAP32[$302>>2] = $$0384;
     $303 = ((($$1)) + 12|0);
     HEAP32[$303>>2] = $$1;
     $304 = ((($$1)) + 8|0);
     HEAP32[$304>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $305 = ((($$0384)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = HEAP32[(82700)>>2]|0;
    $308 = ($306>>>0)>=($307>>>0);
    $not$437 = ($$0384>>>0)>=($307>>>0);
    $309 = $308 & $not$437;
    if ($309) {
     $310 = ((($306)) + 12|0);
     HEAP32[$310>>2] = $$1;
     HEAP32[$305>>2] = $$1;
     $311 = ((($$1)) + 8|0);
     HEAP32[$311>>2] = $306;
     $312 = ((($$1)) + 12|0);
     HEAP32[$312>>2] = $$0384;
     $313 = ((($$1)) + 24|0);
     HEAP32[$313>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $314 = HEAP32[(82716)>>2]|0;
 $315 = (($314) + -1)|0;
 HEAP32[(82716)>>2] = $315;
 $316 = ($315|0)==(0);
 if ($316) {
  $$0212$in$i = (83140);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $317 = ($$0212$i|0)==(0|0);
  $318 = ((($$0212$i)) + 8|0);
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[(82716)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(82700)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(83164)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(82708)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(82696)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(82708)>>2] = $40;
  HEAP32[(82696)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(82704)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(82692)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  $53 = $3 & 1;
  if ($52) {
   $54 = (($0) + ($1)|0);
   $55 = (($54) + ($51)|0);
   $56 = $53 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($54)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$55>>2] = $51;
   $60 = ((($55)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $54;$storemerge1 = $51;
  } else {
   $63 = $53 | $49;
   $64 = $63 | 2;
   HEAP32[$2>>2] = $64;
   $65 = (($0) + ($49)|0);
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 1;
   HEAP32[$66>>2] = $68;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(82692)>>2] = $storemerge1;
  HEAP32[(82704)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $69 = $10 & 2;
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$2 = 0;
  return ($$2|0);
 }
 $71 = $10 & -8;
 $72 = (($71) + ($4))|0;
 $73 = ($72>>>0)<($1>>>0);
 if ($73) {
  $$2 = 0;
  return ($$2|0);
 }
 $74 = (($72) - ($1))|0;
 $75 = $10 >>> 3;
 $76 = ($10>>>0)<(256);
 L49: do {
  if ($76) {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($5)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $75 << 1;
   $82 = (82724 + ($81<<2)|0);
   $83 = ($78|0)==($82|0);
   if (!($83)) {
    $84 = ($78>>>0)<($6>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($78)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==($5|0);
    if (!($87)) {
     _abort();
     // unreachable;
    }
   }
   $88 = ($80|0)==($78|0);
   if ($88) {
    $89 = 1 << $75;
    $90 = $89 ^ -1;
    $91 = HEAP32[20671]|0;
    $92 = $91 & $90;
    HEAP32[20671] = $92;
    break;
   }
   $93 = ($80|0)==($82|0);
   if ($93) {
    $$pre = ((($80)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $94 = ($80>>>0)<($6>>>0);
    if ($94) {
     _abort();
     // unreachable;
    }
    $95 = ((($80)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==($5|0);
    if ($97) {
     $$pre$phiZ2D = $95;
    } else {
     _abort();
     // unreachable;
    }
   }
   $98 = ((($78)) + 12|0);
   HEAP32[$98>>2] = $80;
   HEAP32[$$pre$phiZ2D>>2] = $78;
  } else {
   $99 = ((($5)) + 24|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($5)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==($5|0);
   do {
    if ($103) {
     $113 = ((($5)) + 16|0);
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $117 = HEAP32[$113>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $$3 = 0;
       break;
      } else {
       $$1272 = $117;$$1275 = $113;
      }
     } else {
      $$1272 = $115;$$1275 = $114;
     }
     while(1) {
      $119 = ((($$1272)) + 20|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)==(0|0);
      if (!($121)) {
       $$1272 = $120;$$1275 = $119;
       continue;
      }
      $122 = ((($$1272)) + 16|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(0|0);
      if ($124) {
       break;
      } else {
       $$1272 = $123;$$1275 = $122;
      }
     }
     $125 = ($$1275>>>0)<($6>>>0);
     if ($125) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1275>>2] = 0;
      $$3 = $$1272;
      break;
     }
    } else {
     $104 = ((($5)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105>>>0)<($6>>>0);
     if ($106) {
      _abort();
      // unreachable;
     }
     $107 = ((($105)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==($5|0);
     if (!($109)) {
      _abort();
      // unreachable;
     }
     $110 = ((($102)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==($5|0);
     if ($112) {
      HEAP32[$107>>2] = $102;
      HEAP32[$110>>2] = $105;
      $$3 = $102;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $126 = ($100|0)==(0|0);
   if (!($126)) {
    $127 = ((($5)) + 28|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (82988 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($5|0)==($130|0);
    do {
     if ($131) {
      HEAP32[$129>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $132 = 1 << $128;
       $133 = $132 ^ -1;
       $134 = HEAP32[(82688)>>2]|0;
       $135 = $134 & $133;
       HEAP32[(82688)>>2] = $135;
       break L49;
      }
     } else {
      $136 = HEAP32[(82700)>>2]|0;
      $137 = ($100>>>0)<($136>>>0);
      if ($137) {
       _abort();
       // unreachable;
      } else {
       $138 = ((($100)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $not$ = ($139|0)!=($5|0);
       $$sink1 = $not$&1;
       $140 = (((($100)) + 16|0) + ($$sink1<<2)|0);
       HEAP32[$140>>2] = $$3;
       $141 = ($$3|0)==(0|0);
       if ($141) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $142 = HEAP32[(82700)>>2]|0;
    $143 = ($$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($$3)) + 24|0);
    HEAP32[$144>>2] = $100;
    $145 = ((($5)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(82700)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($74>>>0)<(16);
 $159 = $3 & 1;
 if ($158) {
  $160 = $72 | $159;
  $161 = $160 | 2;
  HEAP32[$2>>2] = $161;
  $162 = (($0) + ($72)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $$2 = $0;
  return ($$2|0);
 } else {
  $166 = (($0) + ($1)|0);
  $167 = $159 | $1;
  $168 = $167 | 2;
  HEAP32[$2>>2] = $168;
  $169 = ((($166)) + 4|0);
  $170 = $74 | 3;
  HEAP32[$169>>2] = $170;
  $171 = (($166) + ($74)|0);
  $172 = ((($171)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 1;
  HEAP32[$172>>2] = $174;
  _dispose_chunk($166,$74);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $$pre25 = 0, $$sink2 = 0;
 var $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond17 = 0, $not$ = 0, $not$1 = 0, $not$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(82700)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(82704)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $100 = ((($2)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$1 = $11;$$1418 = $12;
     break;
    }
    $104 = (($11) + ($12)|0);
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $101 & -2;
    HEAP32[(82692)>>2] = $12;
    HEAP32[$100>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$104>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (82724 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[20671]|0;
     $34 = $33 & $32;
     HEAP32[20671] = $34;
     $$1 = $11;$$1418 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre25 = ((($22)) + 8|0);
     $$pre$phi26Z2D = $$pre25;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi26Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi26Z2D>>2] = $20;
    $$1 = $11;$$1418 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1426 = $59;$$1429 = $55;
      }
     } else {
      $$1426 = $57;$$1429 = $56;
     }
     while(1) {
      $61 = ((($$1426)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1426 = $62;$$1429 = $61;
       continue;
      }
      $64 = ((($$1426)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1426 = $65;$$1429 = $64;
      }
     }
     $67 = ($$1429>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1429>>2] = 0;
      $$3 = $$1426;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1418 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (82988 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(82688)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(82688)>>2] = $77;
       $$1 = $11;$$1418 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(82700)>>2]|0;
      $79 = ($42>>>0)<($78>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $not$1 = ($81|0)!=($11|0);
       $$sink2 = $not$1&1;
       $82 = (((($42)) + 16|0) + ($$sink2<<2)|0);
       HEAP32[$82>>2] = $$3;
       $83 = ($$3|0)==(0|0);
       if ($83) {
        $$1 = $11;$$1418 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $84 = HEAP32[(82700)>>2]|0;
    $85 = ($$3>>>0)<($84>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($$3)) + 24|0);
    HEAP32[$86>>2] = $42;
    $87 = ((($11)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    do {
     if (!($89)) {
      $90 = ($88>>>0)<($84>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = ((($$3)) + 16|0);
       HEAP32[$91>>2] = $88;
       $92 = ((($88)) + 24|0);
       HEAP32[$92>>2] = $$3;
       break;
      }
     }
    } while(0);
    $93 = ((($87)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$1 = $11;$$1418 = $12;
    } else {
     $96 = HEAP32[(82700)>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = ((($$3)) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = ((($94)) + 24|0);
      HEAP32[$99>>2] = $$3;
      $$1 = $11;$$1418 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1418 = $1;
  }
 } while(0);
 $108 = HEAP32[(82700)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(82708)>>2]|0;
  $115 = ($2|0)==($114|0);
  $116 = HEAP32[(82704)>>2]|0;
  if ($115) {
   $117 = HEAP32[(82696)>>2]|0;
   $118 = (($117) + ($$1418))|0;
   HEAP32[(82696)>>2] = $118;
   HEAP32[(82708)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = ($$1|0)==($116|0);
   if (!($121)) {
    return;
   }
   HEAP32[(82704)>>2] = 0;
   HEAP32[(82692)>>2] = 0;
   return;
  }
  $122 = ($2|0)==($116|0);
  if ($122) {
   $123 = HEAP32[(82692)>>2]|0;
   $124 = (($123) + ($$1418))|0;
   HEAP32[(82692)>>2] = $124;
   HEAP32[(82704)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $111 & -8;
  $129 = (($128) + ($$1418))|0;
  $130 = $111 >>> 3;
  $131 = ($111>>>0)<(256);
  L96: do {
   if ($131) {
    $132 = ((($2)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($2)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (82724 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($108>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[20671]|0;
     $147 = $146 & $145;
     HEAP32[20671] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre23 = ((($135)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $149 = ($135>>>0)<($108>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($2|0);
     if ($152) {
      $$pre$phi24Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi24Z2D>>2] = $133;
   } else {
    $154 = ((($2)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($2)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($2|0);
    do {
     if ($158) {
      $168 = ((($2)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $$3435 = 0;
        break;
       } else {
        $$1433 = $172;$$1437 = $168;
       }
      } else {
       $$1433 = $170;$$1437 = $169;
      }
      while(1) {
       $174 = ((($$1433)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $$1433 = $175;$$1437 = $174;
        continue;
       }
       $177 = ((($$1433)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $$1433 = $178;$$1437 = $177;
       }
      }
      $180 = ($$1437>>>0)<($108>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1437>>2] = 0;
       $$3435 = $$1433;
       break;
      }
     } else {
      $159 = ((($2)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($108>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($2|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($2|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $$3435 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($2)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (82988 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($2|0)==($185|0);
     do {
      if ($186) {
       HEAP32[$184>>2] = $$3435;
       $cond17 = ($$3435|0)==(0|0);
       if ($cond17) {
        $187 = 1 << $183;
        $188 = $187 ^ -1;
        $189 = HEAP32[(82688)>>2]|0;
        $190 = $189 & $188;
        HEAP32[(82688)>>2] = $190;
        break L96;
       }
      } else {
       $191 = HEAP32[(82700)>>2]|0;
       $192 = ($155>>>0)<($191>>>0);
       if ($192) {
        _abort();
        // unreachable;
       } else {
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $not$ = ($194|0)!=($2|0);
        $$sink4 = $not$&1;
        $195 = (((($155)) + 16|0) + ($$sink4<<2)|0);
        HEAP32[$195>>2] = $$3435;
        $196 = ($$3435|0)==(0|0);
        if ($196) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while(0);
     $197 = HEAP32[(82700)>>2]|0;
     $198 = ($$3435>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($$3435)) + 24|0);
     HEAP32[$199>>2] = $155;
     $200 = ((($2)) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($$3435)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $$3435;
        break;
       }
      }
     } while(0);
     $206 = ((($200)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(82700)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($$3435)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $$3435;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $129 | 1;
  $214 = ((($$1)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$1) + ($129)|0);
  HEAP32[$215>>2] = $129;
  $216 = HEAP32[(82704)>>2]|0;
  $217 = ($$1|0)==($216|0);
  if ($217) {
   HEAP32[(82692)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $218 = $111 & -2;
  HEAP32[$110>>2] = $218;
  $219 = $$1418 | 1;
  $220 = ((($$1)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$1) + ($$1418)|0);
  HEAP32[$221>>2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 $223 = ($$2>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (82724 + ($224<<2)|0);
  $226 = HEAP32[20671]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[20671] = $230;
   $$pre = ((($225)) + 8|0);
   $$0438 = $225;$$pre$phiZ2D = $$pre;
  } else {
   $231 = ((($225)) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(82700)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$0438 = $232;$$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $235 = ((($$0438)) + 12|0);
  HEAP32[$235>>2] = $$1;
  $236 = ((($$1)) + 8|0);
  HEAP32[$236>>2] = $$0438;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $$0431 = 0;
 } else {
  $240 = ($$2>>>0)>(16777215);
  if ($240) {
   $$0431 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$2 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $$0431 = $262;
  }
 }
 $263 = (82988 + ($$0431<<2)|0);
 $264 = ((($$1)) + 28|0);
 HEAP32[$264>>2] = $$0431;
 $265 = ((($$1)) + 16|0);
 $266 = ((($$1)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(82688)>>2]|0;
 $268 = 1 << $$0431;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(82688)>>2] = $271;
  HEAP32[$263>>2] = $$1;
  $272 = ((($$1)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$1)) + 12|0);
  HEAP32[$273>>2] = $$1;
  $274 = ((($$1)) + 8|0);
  HEAP32[$274>>2] = $$1;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($$0431|0)==(31);
 $277 = $$0431 >>> 1;
 $278 = (25 - ($277))|0;
 $279 = $276 ? 0 : $278;
 $280 = $$2 << $279;
 $$0419 = $280;$$0420 = $275;
 while(1) {
  $281 = ((($$0420)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $282 & -8;
  $284 = ($283|0)==($$2|0);
  if ($284) {
   label = 121;
   break;
  }
  $285 = $$0419 >>> 31;
  $286 = (((($$0420)) + 16|0) + ($285<<2)|0);
  $287 = $$0419 << 1;
  $288 = HEAP32[$286>>2]|0;
  $289 = ($288|0)==(0|0);
  if ($289) {
   label = 118;
   break;
  } else {
   $$0419 = $287;$$0420 = $288;
  }
 }
 if ((label|0) == 118) {
  $290 = HEAP32[(82700)>>2]|0;
  $291 = ($286>>>0)<($290>>>0);
  if ($291) {
   _abort();
   // unreachable;
  }
  HEAP32[$286>>2] = $$1;
  $292 = ((($$1)) + 24|0);
  HEAP32[$292>>2] = $$0420;
  $293 = ((($$1)) + 12|0);
  HEAP32[$293>>2] = $$1;
  $294 = ((($$1)) + 8|0);
  HEAP32[$294>>2] = $$1;
  return;
 }
 else if ((label|0) == 121) {
  $295 = ((($$0420)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[(82700)>>2]|0;
  $298 = ($296>>>0)>=($297>>>0);
  $not$19 = ($$0420>>>0)>=($297>>>0);
  $299 = $298 & $not$19;
  if (!($299)) {
   _abort();
   // unreachable;
  }
  $300 = ((($296)) + 12|0);
  HEAP32[$300>>2] = $$1;
  HEAP32[$295>>2] = $$1;
  $301 = ((($$1)) + 8|0);
  HEAP32[$301>>2] = $296;
  $302 = ((($$1)) + 12|0);
  HEAP32[$302>>2] = $$0420;
  $303 = ((($$1)) + 24|0);
  HEAP32[$303>>2] = 0;
  return;
 }
}
function _memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(9);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$0 = $3;
  return ($$0|0);
 } else {
  $4 = (_internal_memalign($0,$1)|0);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _internal_memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0100 = 0, $$099 = 0, $$1 = 0, $$198 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)>(16);
 $$ = $2 ? $0 : 16;
 $3 = (($$) + -1)|0;
 $4 = $3 & $$;
 $5 = ($4|0)==(0);
 if ($5) {
  $$1 = $$;
 } else {
  $$099 = 16;
  while(1) {
   $6 = ($$099>>>0)<($$>>>0);
   $7 = $$099 << 1;
   if ($6) {
    $$099 = $7;
   } else {
    $$1 = $$099;
    break;
   }
  }
 }
 $8 = (-64 - ($$1))|0;
 $9 = ($8>>>0)>($1>>>0);
 if (!($9)) {
  $10 = (___errno_location()|0);
  HEAP32[$10>>2] = 12;
  $$198 = 0;
  return ($$198|0);
 }
 $11 = ($1>>>0)<(11);
 $12 = (($1) + 11)|0;
 $13 = $12 & -8;
 $14 = $11 ? 16 : $13;
 $15 = (($14) + 12)|0;
 $16 = (($15) + ($$1))|0;
 $17 = (_malloc($16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$198 = 0;
  return ($$198|0);
 }
 $19 = ((($17)) + -8|0);
 $20 = $17;
 $21 = (($$1) + -1)|0;
 $22 = $20 & $21;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $$0100 = $19;$72 = $19;
  } else {
   $24 = (($17) + ($$1)|0);
   $25 = ((($24)) + -1|0);
   $26 = $25;
   $27 = (0 - ($$1))|0;
   $28 = $26 & $27;
   $29 = $28;
   $30 = ((($29)) + -8|0);
   $31 = $30;
   $32 = $19;
   $33 = (($31) - ($32))|0;
   $34 = ($33>>>0)>(15);
   $35 = (($30) + ($$1)|0);
   $36 = $34 ? $30 : $35;
   $37 = $36;
   $38 = (($37) - ($32))|0;
   $39 = ((($17)) + -4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -8;
   $42 = (($41) - ($38))|0;
   $43 = $40 & 3;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = HEAP32[$19>>2]|0;
    $46 = (($45) + ($38))|0;
    HEAP32[$36>>2] = $46;
    $47 = ((($36)) + 4|0);
    HEAP32[$47>>2] = $42;
    $$0100 = $36;$72 = $36;
    break;
   } else {
    $48 = ((($36)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 1;
    $51 = $42 | $50;
    $52 = $51 | 2;
    HEAP32[$48>>2] = $52;
    $53 = (($36) + ($42)|0);
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 1;
    HEAP32[$54>>2] = $56;
    $57 = HEAP32[$39>>2]|0;
    $58 = $57 & 1;
    $59 = $38 | $58;
    $60 = $59 | 2;
    HEAP32[$39>>2] = $60;
    $61 = HEAP32[$48>>2]|0;
    $62 = $61 | 1;
    HEAP32[$48>>2] = $62;
    _dispose_chunk($19,$38);
    $$0100 = $36;$72 = $36;
    break;
   }
  }
 } while(0);
 $63 = ((($$0100)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 3;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = $64 & -8;
  $68 = (($14) + 16)|0;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   $70 = (($67) - ($14))|0;
   $71 = (($72) + ($14)|0);
   $73 = $64 & 1;
   $74 = $14 | $73;
   $75 = $74 | 2;
   HEAP32[$63>>2] = $75;
   $76 = ((($71)) + 4|0);
   $77 = $70 | 3;
   HEAP32[$76>>2] = $77;
   $78 = (($71) + ($70)|0);
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 | 1;
   HEAP32[$79>>2] = $81;
   _dispose_chunk($71,$70);
  }
 }
 $82 = ((($72)) + 8|0);
 $$198 = $82;
 return ($$198|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(2,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(3,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(4,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_5(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(5,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_6(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(6,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_7(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(7,a1|0,a2|0,a3|0)|0;
}



function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function jsCall_vi_0(a1) {
  a1=a1|0;
  jsCall_vi(0,a1|0);
}



function jsCall_vi_1(a1) {
  a1=a1|0;
  jsCall_vi(1,a1|0);
}



function jsCall_vi_2(a1) {
  a1=a1|0;
  jsCall_vi(2,a1|0);
}



function jsCall_vi_3(a1) {
  a1=a1|0;
  jsCall_vi(3,a1|0);
}



function jsCall_vi_4(a1) {
  a1=a1|0;
  jsCall_vi(4,a1|0);
}



function jsCall_vi_5(a1) {
  a1=a1|0;
  jsCall_vi(5,a1|0);
}



function jsCall_vi_6(a1) {
  a1=a1|0;
  jsCall_vi(6,a1|0);
}



function jsCall_vi_7(a1) {
  a1=a1|0;
  jsCall_vi(7,a1|0);
}



function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function jsCall_vii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(0,a1|0,a2|0);
}



function jsCall_vii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(1,a1|0,a2|0);
}



function jsCall_vii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(2,a1|0,a2|0);
}



function jsCall_vii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(3,a1|0,a2|0);
}



function jsCall_vii_4(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(4,a1|0,a2|0);
}



function jsCall_vii_5(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(5,a1|0,a2|0);
}



function jsCall_vii_6(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(6,a1|0,a2|0);
}



function jsCall_vii_7(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(7,a1|0,a2|0);
}



function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function jsCall_iiiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_5(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_6(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_7(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function jsCall_ii_2(a1) {
  a1=a1|0;
  return jsCall_ii(2,a1|0)|0;
}



function jsCall_ii_3(a1) {
  a1=a1|0;
  return jsCall_ii(3,a1|0)|0;
}



function jsCall_ii_4(a1) {
  a1=a1|0;
  return jsCall_ii(4,a1|0)|0;
}



function jsCall_ii_5(a1) {
  a1=a1|0;
  return jsCall_ii(5,a1|0)|0;
}



function jsCall_ii_6(a1) {
  a1=a1|0;
  return jsCall_ii(6,a1|0)|0;
}



function jsCall_ii_7(a1) {
  a1=a1|0;
  return jsCall_ii(7,a1|0)|0;
}



function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function jsCall_viii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(0,a1|0,a2|0,a3|0);
}



function jsCall_viii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(1,a1|0,a2|0,a3|0);
}



function jsCall_viii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(2,a1|0,a2|0,a3|0);
}



function jsCall_viii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(3,a1|0,a2|0,a3|0);
}



function jsCall_viii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(4,a1|0,a2|0,a3|0);
}



function jsCall_viii_5(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(5,a1|0,a2|0,a3|0);
}



function jsCall_viii_6(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(6,a1|0,a2|0,a3|0);
}



function jsCall_viii_7(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(7,a1|0,a2|0,a3|0);
}



function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&31]();
}


function jsCall_v_0() {
  
  jsCall_v(0);
}



function jsCall_v_1() {
  
  jsCall_v(1);
}



function jsCall_v_2() {
  
  jsCall_v(2);
}



function jsCall_v_3() {
  
  jsCall_v(3);
}



function jsCall_v_4() {
  
  jsCall_v(4);
}



function jsCall_v_5() {
  
  jsCall_v(5);
}



function jsCall_v_6() {
  
  jsCall_v(6);
}



function jsCall_v_7() {
  
  jsCall_v(7);
}



function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function jsCall_iiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function jsCall_iiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return jsCall_iiiiiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}



function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function jsCall_iiiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(0,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(1,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(2,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(3,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(4,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_5(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(5,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_6(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(6,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_7(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(7,a1|0,a2|0,a3|0,a4|0)|0;
}



function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_5(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_6(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_7(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function jsCall_iii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(1,a1|0,a2|0)|0;
}



function jsCall_iii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(2,a1|0,a2|0)|0;
}



function jsCall_iii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(3,a1|0,a2|0)|0;
}



function jsCall_iii_4(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(4,a1|0,a2|0)|0;
}



function jsCall_iii_5(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(5,a1|0,a2|0)|0;
}



function jsCall_iii_6(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(6,a1|0,a2|0)|0;
}



function jsCall_iii_7(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(7,a1|0,a2|0)|0;
}



function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function jsCall_iiiiii_0(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_1(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_2(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_3(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_4(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_5(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(5,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_6(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(6,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}



function jsCall_iiiiii_7(a1,a2,a3,a4,a5) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return jsCall_iiiiii(7,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0;
}
function _memset__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return _memset(p0|0,p1|0,p2|0)|0;
}
function b1(p0) {
 p0 = p0|0; abort(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(2);
}
function b3(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(3);return 0;
}
function b4(p0) {
 p0 = p0|0; abort(4);return 0;
}
function b5(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(5);
}
function b6() {
 ; abort(6);
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(7);return 0;
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(9);
}
function b10(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(10);return 0;
}
function b11(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(11);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,jsCall_iiii_0,jsCall_iiii_1,jsCall_iiii_2,jsCall_iiii_3,jsCall_iiii_4,jsCall_iiii_5,jsCall_iiii_6,jsCall_iiii_7,b0,b0,b0,b0,b0,b0,b0,b0,b0,_def_load_bio,_def_load,_update,_update_1116,_old_hmac_decode,_pkey_hmac_ctrl_str,_pkey_hkdf_derive,_pkey_hkdf_ctrl_str,_pkey_tls1_prf_derive,_pkey_tls1_prf_ctrl_str,_CRYPTO_malloc
,_memset__wrapper,_old_rsa_priv_decode,_pkey_rsa_ctrl_str,_mask_cb,_write_bio,_BN_add,_BN_sub,_trans_cb,_int_update,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,jsCall_vi_0,jsCall_vi_1,jsCall_vi_2,jsCall_vi_3,jsCall_vi_4,jsCall_vi_5,jsCall_vi_6,jsCall_vi_7,b1,b1,b1,b1,b1,b1,b1,b1,b1,_hmac_key_free,_pkey_hmac_cleanup,_pkey_hkdf_cleanup,_pkey_tls1_prf_cleanup,_int_rsa_free,_pkey_rsa_cleanup,_st_free,_oid_module_finish,_stbl_module_finish,_X509V3_conf_free,_value_free_stack_doall
,_free_evp_pbe_ctl,_X509_ATTRIBUTE_free,_cleanup_cb,_ossl_init_thread_stop_wrap,_names_lh_free_doall,_name_funcs_free,_cleanup1_doall,_cleanup2_doall,_cleanup3_doall,_sid_free,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,jsCall_vii_0,jsCall_vii_1,jsCall_vii_2,jsCall_vii_3,jsCall_vii_4,jsCall_vii_5,jsCall_vii_6,jsCall_vii_7,b2,b2,b2,b2,b2,b2,b2,b2,b2,_bn_free,_long_free,_value_free_hash,_dump_value_doall_arg,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiiiiii = [b3,jsCall_iiiiiii_0,jsCall_iiiiiii_1,jsCall_iiiiiii_2,jsCall_iiiiiii_3,jsCall_iiiiiii_4,jsCall_iiiiiii_5,jsCall_iiiiiii_6,jsCall_iiiiiii_7,b3,b3,b3,b3,b3,b3,b3,b3,b3,_bn_c2i,_bn_secure_c2i,_long_c2i,_rsa_item_verify,_rsa_item_sign,_BN_mod_exp_mont,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,jsCall_ii_0,jsCall_ii_1,jsCall_ii_2,jsCall_ii_3,jsCall_ii_4,jsCall_ii_5,jsCall_ii_6,jsCall_ii_7,b4,b4,b4,b4,b4,b4,b4,b4,b4,_def_create,_def_init_default,_def_destroy,_def_destroy_data,_init,_init_1115,_hmac_size,_pkey_hmac_init,_pkey_hkdf_init,_pkey_tls1_prf_init,_int_rsa_size
,_rsa_bits,_rsa_security_bits,_rsa_ossl_init,_rsa_ossl_finish,_pkey_rsa_init,_conf_value_hash,_OPENSSL_LH_strhash,_obj_name_hash,_added_obj_hash,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_viii = [b5,jsCall_viii_0,jsCall_viii_1,jsCall_viii_2,jsCall_viii_3,jsCall_viii_4,jsCall_viii_5,jsCall_viii_6,jsCall_viii_7,b5,b5,b5,b5,b5,b5,b5,b5,b5,_CRYPTO_free,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,jsCall_v_0,jsCall_v_1,jsCall_v_2,jsCall_v_3,jsCall_v_4,jsCall_v_5,jsCall_v_6,jsCall_v_7,b6,b6,b6,b6,b6,b6,b6,b6,b6,_err_do_init_ossl_,_do_ex_data_init_ossl_,_ossl_init_base_ossl_,_ossl_init_no_load_crypto_strings_ossl_,_ossl_init_load_crypto_strings_ossl_,_ossl_init_no_add_algs_ossl_,_ossl_init_add_all_ciphers_ossl_,_ossl_init_add_all_digests_ossl_,_ossl_init_no_config_ossl_,_ossl_init_config_ossl_,_ossl_init_async_ossl_
,_OPENSSL_cleanup,b6,b6];
var FUNCTION_TABLE_iiiiiiiii = [b7,jsCall_iiiiiiiii_0,jsCall_iiiiiiiii_1,jsCall_iiiiiiiii_2,jsCall_iiiiiiiii_3,jsCall_iiiiiiiii_4,jsCall_iiiiiiiii_5,jsCall_iiiiiiiii_6,jsCall_iiiiiiiii_7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiiii = [b8,jsCall_iiiii_0,jsCall_iiiii_1,jsCall_iiiii_2,jsCall_iiiii_3,jsCall_iiiii_4,jsCall_iiiii_5,jsCall_iiiii_6,jsCall_iiiii_7,b8,b8,b8,b8,b8,b8,b8,b8,b8,_bn_i2c,_long_i2c,_ctrl_1118,_hmac_pkey_ctrl,_hmac_signctx,_pkey_hmac_ctrl,_pkey_hkdf_ctrl,_pkey_tls1_prf_ctrl,_CRYPTO_realloc,_rsa_pub_print,_rsa_priv_print
,_rsa_pkey_ctrl,_rsa_cb,_rsa_ossl_mod_exp,_pkey_rsa_ctrl,_pubkey_cb,_BN_rand,_BN_pseudo_rand,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiii = [b9,jsCall_viiiiii_0,jsCall_viiiiii_1,jsCall_viiiiii_2,jsCall_viiiiii_3,jsCall_viiiiii_4,jsCall_viiiiii_5,jsCall_viiiiii_6,jsCall_viiiiii_7,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_iii = [b10,jsCall_iii_0,jsCall_iii_1,jsCall_iii_2,jsCall_iii_3,jsCall_iii_4,jsCall_iii_5,jsCall_iii_6,jsCall_iii_7,b10,b10,b10,b10,b10,b10,b10,b10,b10,_bn_new,_bn_secure_new,_long_new,_def_dump,_def_is_number,_def_to_int,_final,_final_1117,_hmac_pkey_public_cmp,_old_hmac_encode,_pkey_hmac_copy
,_pkey_hmac_keygen,_hmac_signctx_init,_rsa_pub_decode,_rsa_pub_encode,_rsa_pub_cmp,_rsa_priv_decode,_rsa_priv_encode,_old_rsa_priv_encode,_pkey_rsa_copy,_pkey_rsa_keygen,_sk_table_cmp,_table_cmp_BSEARCH_CMP_FN,_ameth_cmp_BSEARCH_CMP_FN,_oid_module_init,_stbl_module_init,_der_cmp,_conf_value_cmp,_alg_module_init,_pmeth_cmp_BSEARCH_CMP_FN,_strcmp,_obj_name_cmp,_added_obj_cmp,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iiiiii = [b11,jsCall_iiiiii_0,jsCall_iiiiii_1,jsCall_iiiiii_2,jsCall_iiiiii_3,jsCall_iiiiii_4,jsCall_iiiiii_5,jsCall_iiiiii_6,jsCall_iiiiii_7,b11,b11,b11,b11,b11,b11,b11,b11,b11,_bn_print,_long_print,_rsa_sig_print,_rsa_ossl_public_encrypt,_rsa_ossl_public_decrypt,_rsa_ossl_private_encrypt,_rsa_ossl_private_decrypt,_pkey_rsa_sign,_pkey_rsa_verify,_pkey_rsa_verifyrecover,_pkey_rsa_encrypt
,_pkey_rsa_decrypt,b11,b11];

  return { _rsasignjs_signature_bytes: _rsasignjs_signature_bytes, _llvm_cttz_i32: _llvm_cttz_i32, _bitshift64Lshr: _bitshift64Lshr, ___uremdi3: ___uremdi3, _bitshift64Shl: _bitshift64Shl, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, ___muldi3: ___muldi3, _rsasignjs_sign: _rsasignjs_sign, ___muldsi3: ___muldsi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _i64Add: _i64Add, _emscripten_get_global_libc: _emscripten_get_global_libc, ___udivdi3: ___udivdi3, _rsasignjs_public_key_bytes: _rsasignjs_public_key_bytes, _rsasignjs_init: _rsasignjs_init, _free: _free, _rsasignjs_verify: _rsasignjs_verify, _rsasignjs_secret_key_bytes: _rsasignjs_secret_key_bytes, _memmove: _memmove, _rsasignjs_keypair: _rsasignjs_keypair, _malloc: _malloc, _memalign: _memalign, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var _rsasignjs_signature_bytes = Module["_rsasignjs_signature_bytes"] = asm["_rsasignjs_signature_bytes"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _rsasignjs_sign = Module["_rsasignjs_sign"] = asm["_rsasignjs_sign"];
var _rsasignjs_public_key_bytes = Module["_rsasignjs_public_key_bytes"] = asm["_rsasignjs_public_key_bytes"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _rsasignjs_init = Module["_rsasignjs_init"] = asm["_rsasignjs_init"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _rsasignjs_verify = Module["_rsasignjs_verify"] = asm["_rsasignjs_verify"];
var _rsasignjs_secret_key_bytes = Module["_rsasignjs_secret_key_bytes"] = asm["_rsasignjs_secret_key_bytes"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _rsasignjs_keypair = Module["_rsasignjs_keypair"] = asm["_rsasignjs_keypair"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memalign = Module["_memalign"] = asm["_memalign"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
;

Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];

Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_i64Subtract","_i64Add","_memset","_bitshift64Lshr","_bitshift64Shl","_memcpy","_llvm_cttz_i32","___udivmoddi4","___udivdi3","___muldsi3","___muldi3","_sbrk","_memmove","___uremdi3"]


;

function byteArrayIndexOf (arr, n) {
	if (arr.indexOf) {
		return arr.indexOf(n);
	}

	for (var i = 0 ; i < arr.length ; ++i) {
		if (arr[i] === n) {
			return i;
		}
	}

	return -1;
}

function dataResult (buffer, bytes) {
	return new Uint8Array(
		new Uint8Array(Module.HEAPU8.buffer, buffer, bytes)
	);
}

function dataFree (buffer) {
	try {
		Module._free(buffer);
	}
	catch (_) {}
}

function importJWK (key, purpose) {
	return Promise.resolve().then(function () {
		var zeroIndex	= byteArrayIndexOf(key, 0);
		var jwk			= JSON.parse(
			sodiumUtil.to_string(
				zeroIndex > -1 ?
					new Uint8Array(new Uint8Array(key).buffer, 0, zeroIndex) :
					new Uint8Array(key)
			)
		);

		return Promise.resolve().then(function () {
			return crypto.subtle.importKey(
				'jwk',
				jwk,
				algorithm,
				false,
				[purpose]
			);
		}).catch(function () {
			return pemJwk.jwk2pem(jwk);
		});
	});
}
	
function exportJWK (key, bytes) {
	return Promise.resolve().then(function () {
		if (typeof key === 'string') {
			return pemJwk.pem2jwk(key);
		}
		else {
			return crypto.subtle.exportKey(
				'jwk',
				key,
				algorithm.name
			);
		}
	}).then(function (jwk) {
		var a	= sodiumUtil.from_string(JSON.stringify(jwk));
		var b	= new Uint8Array(bytes);
		b.set(a);
		sodiumUtil.memzero(a);
		return b;
	});
}

function exportKeyPair (keyPair) {
	return Promise.all([
		exportJWK(keyPair.publicKey, rsaSign.publicKeyBytes),
		exportJWK(keyPair.privateKey, rsaSign.privateKeyBytes)
	]).then(function (results) {
		return {
			publicKey: results[0],
			privateKey: results[1]
		};
	});
}


Module._rsasignjs_init();


var algorithm	= isNode ?
	'RSA-SHA256' :
	{
		name: 'RSASSA-PKCS1-v1_5',
		hash: {
			name: 'SHA-256'
		},
		modulusLength: 2048,
		publicExponent: new Uint8Array([0x01, 0x00, 0x01])
	}
;


var rsaSign	= {
	publicKeyBytes: Module._rsasignjs_public_key_bytes(),
	privateKeyBytes: Module._rsasignjs_secret_key_bytes(),
	bytes: Module._rsasignjs_signature_bytes(),

	keyPair: function () {
		return Promise.resolve().then(function () {
			if (isNode) {
				var keyPair	= rsaKeygen.generate();

				return {
					publicKey: keyPair.public_key.toString(),
					privateKey: keyPair.private_key.toString()
				};
			}
			else {
				return crypto.subtle.generateKey(
					algorithm,
					true,
					['sign', 'verify']
				);
			}
		}).then(
			exportKeyPair
		).catch(function () {
			var publicKeyBuffer		= Module._malloc(rsaSign.publicKeyBytes);
			var privateKeyBuffer	= Module._malloc(rsaSign.privateKeyBytes);

			try {
				var returnValue	= Module._rsasignjs_keypair(
					publicKeyBuffer,
					privateKeyBuffer
				);

				if (returnValue !== 0) {
					throw new Error('RSA Sign error: keyPair failed (' + returnValue + ')');
				}

				return exportKeyPair({
					publicKey:
						'-----BEGIN PUBLIC KEY-----\n' +
						sodiumUtil.to_base64(dataResult(publicKeyBuffer, rsaSign.publicKeyBytes)) +
						'\n-----END PUBLIC KEY-----'
					,
					privateKey:
						'-----BEGIN RSA PRIVATE KEY-----\n' +
						sodiumUtil.to_base64(dataResult(privateKeyBuffer, rsaSign.privateKeyBytes)) +
						'\n-----END RSA PRIVATE KEY-----'
				});
			}
			finally {
				dataFree(publicKeyBuffer, rsaSign.publicKeyBytes);
				dataFree(privateKeyBuffer, rsaSign.privateKeyBytes);
			}
		});
	},

	sign: function (message, privateKey) {
		return rsaSign.signDetached(message, privateKey).then(function (signature) {
			var signed	= new Uint8Array(rsaSign.bytes + message.length);
			signed.set(signature);
			signed.set(message, rsaSign.bytes);
			return signed;
		});
	},

	signDetached: function (message, privateKey) {
		return importJWK(privateKey, 'sign').then(function (sk) {
			return Promise.resolve().then(function () {
				if (isNode) {
					var messageBuffer	= new Buffer(message);
					var signer			= nodeCrypto.createSign(algorithm);
					signer.write(messageBuffer);
					signer.end();

					var signature	= signer.sign(sk);
					sodiumUtil.memzero(messageBuffer);
					return signature;
				}
				else {
					return crypto.subtle.sign(algorithm, sk, message);
				}
			}).catch(function () {
				sk	= sodiumUtil.from_base64(sk.split('-----')[2]);

				var signatureBuffer		= Module._malloc(rsaSign.bytes);
				var messageBuffer		= Module._malloc(message.length);
				var privateKeyBuffer	= Module._malloc(sk.length);

				Module.writeArrayToMemory(message, messageBuffer);
				Module.writeArrayToMemory(sk, privateKeyBuffer);

				try {
					var returnValue	= Module._rsasignjs_sign(
						signatureBuffer,
						messageBuffer,
						message.length,
						privateKeyBuffer,
						sk.length
					);

					if (returnValue !== 1) {
						throw new Error('RSA Sign error: sign failed (' + returnValue + ')');
					}

					return dataResult(signatureBuffer, rsaSign.bytes);
				}
				finally {
					dataFree(signatureBuffer);
					dataFree(messageBuffer);
					dataFree(privateKeyBuffer);
				}
			}).then(function (signature) {
				sodiumUtil.memzero(sk);
				return new Uint8Array(signature);
			});
		});
	},

	open: function (signed, publicKey) {
		return Promise.resolve().then(function () {
			var signature	= new Uint8Array(signed.buffer, 0, rsaSign.bytes);
			var message		= new Uint8Array(signed.buffer, rsaSign.bytes);

			return rsaSign.verifyDetached(signature, message, publicKey).then(function (isValid) {
				if (isValid) {
					return message;
				}
				else {
					throw new Error('Failed to open RSA signed message.');
				}
			});
		});
	},

	verifyDetached: function (signature, message, publicKey) {
		return importJWK(publicKey, 'verify').then(function (pk) {
			return Promise.resolve().then(function () {
				if (isNode) {
					var verifier	= nodeCrypto.createVerify(algorithm);
					verifier.update(new Buffer(message));
					return verifier.verify(pk, signature);
				}
				else {
					return crypto.subtle.verify(algorithm, pk, signature, message);
				}
			}).catch(function () {
				pk	= sodiumUtil.from_base64(pk.split('-----')[2]);

				var signatureBuffer	= Module._malloc(rsaSign.bytes);
				var messageBuffer	= Module._malloc(message.length);
				var publicKeyBuffer	= Module._malloc(pk.length);

				Module.writeArrayToMemory(signature, signatureBuffer);
				Module.writeArrayToMemory(message, messageBuffer);
				Module.writeArrayToMemory(pk, publicKeyBuffer);

				try {
					var returnValue	= Module._rsasignjs_verify(
						signatureBuffer,
						messageBuffer,
						message.length,
						publicKeyBuffer,
						pk.length
					);

					return returnValue === 1;
				}
				finally {
					dataFree(signatureBuffer);
					dataFree(messageBuffer);
					dataFree(publicKeyBuffer);
				}
			}).then(function (isValid) {
				sodiumUtil.memzero(pk);
				return isValid;
			});
		});
	}
};



rsaSign.rsaSign	= rsaSign;
module.exports	= rsaSign;

//# sourceMappingURL=rsasign.debug.js.map